var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var require_index_18e50d07 = __commonJS({
  "assets/index.18e50d07.js"(exports, module) {
    const p$2 = function polyfill() {
      const relList = document.createElement("link").relList;
      if (relList && relList.supports && relList.supports("modulepreload")) {
        return;
      }
      for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
        processPreload(link);
      }
      new MutationObserver((mutations) => {
        for (const mutation of mutations) {
          if (mutation.type !== "childList") {
            continue;
          }
          for (const node of mutation.addedNodes) {
            if (node.tagName === "LINK" && node.rel === "modulepreload")
              processPreload(node);
          }
        }
      }).observe(document, { childList: true, subtree: true });
      function getFetchOpts(script) {
        const fetchOpts = {};
        if (script.integrity)
          fetchOpts.integrity = script.integrity;
        if (script.referrerpolicy)
          fetchOpts.referrerPolicy = script.referrerpolicy;
        if (script.crossorigin === "use-credentials")
          fetchOpts.credentials = "include";
        else if (script.crossorigin === "anonymous")
          fetchOpts.credentials = "omit";
        else
          fetchOpts.credentials = "same-origin";
        return fetchOpts;
      }
      function processPreload(link) {
        if (link.ep)
          return;
        link.ep = true;
        const fetchOpts = getFetchOpts(link);
        fetch(link.href, fetchOpts);
      }
    };
    p$2();
    const global$1 = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
    function makeMap(str2, expectsLowerCase) {
      const map2 = /* @__PURE__ */ Object.create(null);
      const list = str2.split(",");
      for (let i2 = 0; i2 < list.length; i2++) {
        map2[list[i2]] = true;
      }
      return expectsLowerCase ? (val) => !!map2[val.toLowerCase()] : (val) => !!map2[val];
    }
    const GLOBALS_WHITE_LISTED = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt";
    const isGloballyWhitelisted = /* @__PURE__ */ makeMap(GLOBALS_WHITE_LISTED);
    const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
    const isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);
    function includeBooleanAttr(value) {
      return !!value || value === "";
    }
    function normalizeStyle(value) {
      if (isArray$6(value)) {
        const res = {};
        for (let i2 = 0; i2 < value.length; i2++) {
          const item = value[i2];
          const normalized = isString$3(item) ? parseStringStyle(item) : normalizeStyle(item);
          if (normalized) {
            for (const key in normalized) {
              res[key] = normalized[key];
            }
          }
        }
        return res;
      } else if (isString$3(value)) {
        return value;
      } else if (isObject$7(value)) {
        return value;
      }
    }
    const listDelimiterRE = /;(?![^(]*\))/g;
    const propertyDelimiterRE = /:(.+)/;
    function parseStringStyle(cssText) {
      const ret = {};
      cssText.split(listDelimiterRE).forEach((item) => {
        if (item) {
          const tmp = item.split(propertyDelimiterRE);
          tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
        }
      });
      return ret;
    }
    function normalizeClass(value) {
      let res = "";
      if (isString$3(value)) {
        res = value;
      } else if (isArray$6(value)) {
        for (let i2 = 0; i2 < value.length; i2++) {
          const normalized = normalizeClass(value[i2]);
          if (normalized) {
            res += normalized + " ";
          }
        }
      } else if (isObject$7(value)) {
        for (const name in value) {
          if (value[name]) {
            res += name + " ";
          }
        }
      }
      return res.trim();
    }
    function normalizeProps(props) {
      if (!props)
        return null;
      let { class: klass, style: style2 } = props;
      if (klass && !isString$3(klass)) {
        props.class = normalizeClass(klass);
      }
      if (style2) {
        props.style = normalizeStyle(style2);
      }
      return props;
    }
    function looseCompareArrays(a2, b2) {
      if (a2.length !== b2.length)
        return false;
      let equal = true;
      for (let i2 = 0; equal && i2 < a2.length; i2++) {
        equal = looseEqual(a2[i2], b2[i2]);
      }
      return equal;
    }
    function looseEqual(a2, b2) {
      if (a2 === b2)
        return true;
      let aValidType = isDate$2(a2);
      let bValidType = isDate$2(b2);
      if (aValidType || bValidType) {
        return aValidType && bValidType ? a2.getTime() === b2.getTime() : false;
      }
      aValidType = isSymbol$2(a2);
      bValidType = isSymbol$2(b2);
      if (aValidType || bValidType) {
        return a2 === b2;
      }
      aValidType = isArray$6(a2);
      bValidType = isArray$6(b2);
      if (aValidType || bValidType) {
        return aValidType && bValidType ? looseCompareArrays(a2, b2) : false;
      }
      aValidType = isObject$7(a2);
      bValidType = isObject$7(b2);
      if (aValidType || bValidType) {
        if (!aValidType || !bValidType) {
          return false;
        }
        const aKeysCount = Object.keys(a2).length;
        const bKeysCount = Object.keys(b2).length;
        if (aKeysCount !== bKeysCount) {
          return false;
        }
        for (const key in a2) {
          const aHasKey = a2.hasOwnProperty(key);
          const bHasKey = b2.hasOwnProperty(key);
          if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a2[key], b2[key])) {
            return false;
          }
        }
      }
      return String(a2) === String(b2);
    }
    function looseIndexOf(arr, val) {
      return arr.findIndex((item) => looseEqual(item, val));
    }
    const toDisplayString$1 = (val) => {
      return isString$3(val) ? val : val == null ? "" : isArray$6(val) || isObject$7(val) && (val.toString === objectToString$3 || !isFunction$4(val.toString)) ? JSON.stringify(val, replacer, 2) : String(val);
    };
    const replacer = (_key, val) => {
      if (val && val.__v_isRef) {
        return replacer(_key, val.value);
      } else if (isMap$2(val)) {
        return {
          [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val2]) => {
            entries[`${key} =>`] = val2;
            return entries;
          }, {})
        };
      } else if (isSet$2(val)) {
        return {
          [`Set(${val.size})`]: [...val.values()]
        };
      } else if (isObject$7(val) && !isArray$6(val) && !isPlainObject$2(val)) {
        return String(val);
      }
      return val;
    };
    const EMPTY_OBJ = {};
    const EMPTY_ARR = [];
    const NOOP = () => {
    };
    const NO = () => false;
    const onRE = /^on[^a-z]/;
    const isOn = (key) => onRE.test(key);
    const isModelListener = (key) => key.startsWith("onUpdate:");
    const extend$1 = Object.assign;
    const remove$1 = (arr, el) => {
      const i2 = arr.indexOf(el);
      if (i2 > -1) {
        arr.splice(i2, 1);
      }
    };
    const hasOwnProperty$g = Object.prototype.hasOwnProperty;
    const hasOwn$2 = (val, key) => hasOwnProperty$g.call(val, key);
    const isArray$6 = Array.isArray;
    const isMap$2 = (val) => toTypeString$1(val) === "[object Map]";
    const isSet$2 = (val) => toTypeString$1(val) === "[object Set]";
    const isDate$2 = (val) => toTypeString$1(val) === "[object Date]";
    const isFunction$4 = (val) => typeof val === "function";
    const isString$3 = (val) => typeof val === "string";
    const isSymbol$2 = (val) => typeof val === "symbol";
    const isObject$7 = (val) => val !== null && typeof val === "object";
    const isPromise$1 = (val) => {
      return isObject$7(val) && isFunction$4(val.then) && isFunction$4(val.catch);
    };
    const objectToString$3 = Object.prototype.toString;
    const toTypeString$1 = (value) => objectToString$3.call(value);
    const toRawType = (value) => {
      return toTypeString$1(value).slice(8, -1);
    };
    const isPlainObject$2 = (val) => toTypeString$1(val) === "[object Object]";
    const isIntegerKey = (key) => isString$3(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
    const isReservedProp = /* @__PURE__ */ makeMap(
      ",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
    );
    const cacheStringFunction = (fn2) => {
      const cache2 = /* @__PURE__ */ Object.create(null);
      return (str2) => {
        const hit = cache2[str2];
        return hit || (cache2[str2] = fn2(str2));
      };
    };
    const camelizeRE = /-(\w)/g;
    const camelize = cacheStringFunction((str2) => {
      return str2.replace(camelizeRE, (_2, c2) => c2 ? c2.toUpperCase() : "");
    });
    const hyphenateRE = /\B([A-Z])/g;
    const hyphenate = cacheStringFunction((str2) => str2.replace(hyphenateRE, "-$1").toLowerCase());
    const capitalize = cacheStringFunction((str2) => str2.charAt(0).toUpperCase() + str2.slice(1));
    const toHandlerKey = cacheStringFunction((str2) => str2 ? `on${capitalize(str2)}` : ``);
    const hasChanged = (value, oldValue) => !Object.is(value, oldValue);
    const invokeArrayFns = (fns, arg) => {
      for (let i2 = 0; i2 < fns.length; i2++) {
        fns[i2](arg);
      }
    };
    const def = (obj, key, value) => {
      Object.defineProperty(obj, key, {
        configurable: true,
        enumerable: false,
        value
      });
    };
    const toNumber$1 = (val) => {
      const n2 = parseFloat(val);
      return isNaN(n2) ? val : n2;
    };
    let _globalThis$1;
    const getGlobalThis$1 = () => {
      return _globalThis$1 || (_globalThis$1 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global$1 !== "undefined" ? global$1 : {});
    };
    let activeEffectScope;
    class EffectScope {
      constructor(detached = false) {
        this.active = true;
        this.effects = [];
        this.cleanups = [];
        if (!detached && activeEffectScope) {
          this.parent = activeEffectScope;
          this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;
        }
      }
      run(fn2) {
        if (this.active) {
          const currentEffectScope = activeEffectScope;
          try {
            activeEffectScope = this;
            return fn2();
          } finally {
            activeEffectScope = currentEffectScope;
          }
        }
      }
      on() {
        activeEffectScope = this;
      }
      off() {
        activeEffectScope = this.parent;
      }
      stop(fromParent) {
        if (this.active) {
          let i2, l2;
          for (i2 = 0, l2 = this.effects.length; i2 < l2; i2++) {
            this.effects[i2].stop();
          }
          for (i2 = 0, l2 = this.cleanups.length; i2 < l2; i2++) {
            this.cleanups[i2]();
          }
          if (this.scopes) {
            for (i2 = 0, l2 = this.scopes.length; i2 < l2; i2++) {
              this.scopes[i2].stop(true);
            }
          }
          if (this.parent && !fromParent) {
            const last = this.parent.scopes.pop();
            if (last && last !== this) {
              this.parent.scopes[this.index] = last;
              last.index = this.index;
            }
          }
          this.active = false;
        }
      }
    }
    function effectScope(detached) {
      return new EffectScope(detached);
    }
    function recordEffectScope(effect2, scope = activeEffectScope) {
      if (scope && scope.active) {
        scope.effects.push(effect2);
      }
    }
    function getCurrentScope() {
      return activeEffectScope;
    }
    function onScopeDispose(fn2) {
      if (activeEffectScope) {
        activeEffectScope.cleanups.push(fn2);
      }
    }
    const createDep = (effects) => {
      const dep = new Set(effects);
      dep.w = 0;
      dep.n = 0;
      return dep;
    };
    const wasTracked = (dep) => (dep.w & trackOpBit) > 0;
    const newTracked = (dep) => (dep.n & trackOpBit) > 0;
    const initDepMarkers = ({ deps }) => {
      if (deps.length) {
        for (let i2 = 0; i2 < deps.length; i2++) {
          deps[i2].w |= trackOpBit;
        }
      }
    };
    const finalizeDepMarkers = (effect2) => {
      const { deps } = effect2;
      if (deps.length) {
        let ptr = 0;
        for (let i2 = 0; i2 < deps.length; i2++) {
          const dep = deps[i2];
          if (wasTracked(dep) && !newTracked(dep)) {
            dep.delete(effect2);
          } else {
            deps[ptr++] = dep;
          }
          dep.w &= ~trackOpBit;
          dep.n &= ~trackOpBit;
        }
        deps.length = ptr;
      }
    };
    const targetMap = /* @__PURE__ */ new WeakMap();
    let effectTrackDepth = 0;
    let trackOpBit = 1;
    const maxMarkerBits = 30;
    let activeEffect;
    const ITERATE_KEY = Symbol("");
    const MAP_KEY_ITERATE_KEY = Symbol("");
    class ReactiveEffect {
      constructor(fn2, scheduler = null, scope) {
        this.fn = fn2;
        this.scheduler = scheduler;
        this.active = true;
        this.deps = [];
        this.parent = void 0;
        recordEffectScope(this, scope);
      }
      run() {
        if (!this.active) {
          return this.fn();
        }
        let parent = activeEffect;
        let lastShouldTrack = shouldTrack;
        while (parent) {
          if (parent === this) {
            return;
          }
          parent = parent.parent;
        }
        try {
          this.parent = activeEffect;
          activeEffect = this;
          shouldTrack = true;
          trackOpBit = 1 << ++effectTrackDepth;
          if (effectTrackDepth <= maxMarkerBits) {
            initDepMarkers(this);
          } else {
            cleanupEffect(this);
          }
          return this.fn();
        } finally {
          if (effectTrackDepth <= maxMarkerBits) {
            finalizeDepMarkers(this);
          }
          trackOpBit = 1 << --effectTrackDepth;
          activeEffect = this.parent;
          shouldTrack = lastShouldTrack;
          this.parent = void 0;
          if (this.deferStop) {
            this.stop();
          }
        }
      }
      stop() {
        if (activeEffect === this) {
          this.deferStop = true;
        } else if (this.active) {
          cleanupEffect(this);
          if (this.onStop) {
            this.onStop();
          }
          this.active = false;
        }
      }
    }
    function cleanupEffect(effect2) {
      const { deps } = effect2;
      if (deps.length) {
        for (let i2 = 0; i2 < deps.length; i2++) {
          deps[i2].delete(effect2);
        }
        deps.length = 0;
      }
    }
    function effect(fn2, options) {
      if (fn2.effect) {
        fn2 = fn2.effect.fn;
      }
      const _effect = new ReactiveEffect(fn2);
      if (options) {
        extend$1(_effect, options);
        if (options.scope)
          recordEffectScope(_effect, options.scope);
      }
      if (!options || !options.lazy) {
        _effect.run();
      }
      const runner = _effect.run.bind(_effect);
      runner.effect = _effect;
      return runner;
    }
    function stop(runner) {
      runner.effect.stop();
    }
    let shouldTrack = true;
    const trackStack = [];
    function pauseTracking() {
      trackStack.push(shouldTrack);
      shouldTrack = false;
    }
    function resetTracking() {
      const last = trackStack.pop();
      shouldTrack = last === void 0 ? true : last;
    }
    function track(target, type2, key) {
      if (shouldTrack && activeEffect) {
        let depsMap = targetMap.get(target);
        if (!depsMap) {
          targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
        }
        let dep = depsMap.get(key);
        if (!dep) {
          depsMap.set(key, dep = createDep());
        }
        trackEffects(dep);
      }
    }
    function trackEffects(dep, debuggerEventExtraInfo) {
      let shouldTrack2 = false;
      if (effectTrackDepth <= maxMarkerBits) {
        if (!newTracked(dep)) {
          dep.n |= trackOpBit;
          shouldTrack2 = !wasTracked(dep);
        }
      } else {
        shouldTrack2 = !dep.has(activeEffect);
      }
      if (shouldTrack2) {
        dep.add(activeEffect);
        activeEffect.deps.push(dep);
      }
    }
    function trigger(target, type2, key, newValue, oldValue, oldTarget) {
      const depsMap = targetMap.get(target);
      if (!depsMap) {
        return;
      }
      let deps = [];
      if (type2 === "clear") {
        deps = [...depsMap.values()];
      } else if (key === "length" && isArray$6(target)) {
        depsMap.forEach((dep, key2) => {
          if (key2 === "length" || key2 >= newValue) {
            deps.push(dep);
          }
        });
      } else {
        if (key !== void 0) {
          deps.push(depsMap.get(key));
        }
        switch (type2) {
          case "add":
            if (!isArray$6(target)) {
              deps.push(depsMap.get(ITERATE_KEY));
              if (isMap$2(target)) {
                deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
              }
            } else if (isIntegerKey(key)) {
              deps.push(depsMap.get("length"));
            }
            break;
          case "delete":
            if (!isArray$6(target)) {
              deps.push(depsMap.get(ITERATE_KEY));
              if (isMap$2(target)) {
                deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
              }
            }
            break;
          case "set":
            if (isMap$2(target)) {
              deps.push(depsMap.get(ITERATE_KEY));
            }
            break;
        }
      }
      if (deps.length === 1) {
        if (deps[0]) {
          {
            triggerEffects(deps[0]);
          }
        }
      } else {
        const effects = [];
        for (const dep of deps) {
          if (dep) {
            effects.push(...dep);
          }
        }
        {
          triggerEffects(createDep(effects));
        }
      }
    }
    function triggerEffects(dep, debuggerEventExtraInfo) {
      const effects = isArray$6(dep) ? dep : [...dep];
      for (const effect2 of effects) {
        if (effect2.computed) {
          triggerEffect(effect2);
        }
      }
      for (const effect2 of effects) {
        if (!effect2.computed) {
          triggerEffect(effect2);
        }
      }
    }
    function triggerEffect(effect2, debuggerEventExtraInfo) {
      if (effect2 !== activeEffect || effect2.allowRecurse) {
        if (effect2.scheduler) {
          effect2.scheduler();
        } else {
          effect2.run();
        }
      }
    }
    const isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);
    const builtInSymbols = new Set(
      /* @__PURE__ */ Object.getOwnPropertyNames(Symbol).filter((key) => key !== "arguments" && key !== "caller").map((key) => Symbol[key]).filter(isSymbol$2)
    );
    const get$2 = /* @__PURE__ */ createGetter();
    const shallowGet = /* @__PURE__ */ createGetter(false, true);
    const readonlyGet = /* @__PURE__ */ createGetter(true);
    const shallowReadonlyGet = /* @__PURE__ */ createGetter(true, true);
    const arrayInstrumentations = /* @__PURE__ */ createArrayInstrumentations();
    function createArrayInstrumentations() {
      const instrumentations = {};
      ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
        instrumentations[key] = function(...args) {
          const arr = toRaw(this);
          for (let i2 = 0, l2 = this.length; i2 < l2; i2++) {
            track(arr, "get", i2 + "");
          }
          const res = arr[key](...args);
          if (res === -1 || res === false) {
            return arr[key](...args.map(toRaw));
          } else {
            return res;
          }
        };
      });
      ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
        instrumentations[key] = function(...args) {
          pauseTracking();
          const res = toRaw(this)[key].apply(this, args);
          resetTracking();
          return res;
        };
      });
      return instrumentations;
    }
    function createGetter(isReadonly2 = false, shallow = false) {
      return function get2(target, key, receiver) {
        if (key === "__v_isReactive") {
          return !isReadonly2;
        } else if (key === "__v_isReadonly") {
          return isReadonly2;
        } else if (key === "__v_isShallow") {
          return shallow;
        } else if (key === "__v_raw" && receiver === (isReadonly2 ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) {
          return target;
        }
        const targetIsArray = isArray$6(target);
        if (!isReadonly2 && targetIsArray && hasOwn$2(arrayInstrumentations, key)) {
          return Reflect.get(arrayInstrumentations, key, receiver);
        }
        const res = Reflect.get(target, key, receiver);
        if (isSymbol$2(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
          return res;
        }
        if (!isReadonly2) {
          track(target, "get", key);
        }
        if (shallow) {
          return res;
        }
        if (isRef(res)) {
          return targetIsArray && isIntegerKey(key) ? res : res.value;
        }
        if (isObject$7(res)) {
          return isReadonly2 ? readonly(res) : reactive(res);
        }
        return res;
      };
    }
    const set$2 = /* @__PURE__ */ createSetter();
    const shallowSet = /* @__PURE__ */ createSetter(true);
    function createSetter(shallow = false) {
      return function set2(target, key, value, receiver) {
        let oldValue = target[key];
        if (isReadonly(oldValue) && isRef(oldValue) && !isRef(value)) {
          return false;
        }
        if (!shallow && !isReadonly(value)) {
          if (!isShallow(value)) {
            value = toRaw(value);
            oldValue = toRaw(oldValue);
          }
          if (!isArray$6(target) && isRef(oldValue) && !isRef(value)) {
            oldValue.value = value;
            return true;
          }
        }
        const hadKey = isArray$6(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn$2(target, key);
        const result = Reflect.set(target, key, value, receiver);
        if (target === toRaw(receiver)) {
          if (!hadKey) {
            trigger(target, "add", key, value);
          } else if (hasChanged(value, oldValue)) {
            trigger(target, "set", key, value);
          }
        }
        return result;
      };
    }
    function deleteProperty(target, key) {
      const hadKey = hasOwn$2(target, key);
      target[key];
      const result = Reflect.deleteProperty(target, key);
      if (result && hadKey) {
        trigger(target, "delete", key, void 0);
      }
      return result;
    }
    function has(target, key) {
      const result = Reflect.has(target, key);
      if (!isSymbol$2(key) || !builtInSymbols.has(key)) {
        track(target, "has", key);
      }
      return result;
    }
    function ownKeys(target) {
      track(target, "iterate", isArray$6(target) ? "length" : ITERATE_KEY);
      return Reflect.ownKeys(target);
    }
    const mutableHandlers = {
      get: get$2,
      set: set$2,
      deleteProperty,
      has,
      ownKeys
    };
    const readonlyHandlers = {
      get: readonlyGet,
      set(target, key) {
        return true;
      },
      deleteProperty(target, key) {
        return true;
      }
    };
    const shallowReactiveHandlers = /* @__PURE__ */ extend$1({}, mutableHandlers, {
      get: shallowGet,
      set: shallowSet
    });
    const shallowReadonlyHandlers = /* @__PURE__ */ extend$1({}, readonlyHandlers, {
      get: shallowReadonlyGet
    });
    const toShallow = (value) => value;
    const getProto = (v2) => Reflect.getPrototypeOf(v2);
    function get$1$1(target, key, isReadonly2 = false, isShallow2 = false) {
      target = target["__v_raw"];
      const rawTarget = toRaw(target);
      const rawKey = toRaw(key);
      if (!isReadonly2) {
        if (key !== rawKey) {
          track(rawTarget, "get", key);
        }
        track(rawTarget, "get", rawKey);
      }
      const { has: has2 } = getProto(rawTarget);
      const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
      if (has2.call(rawTarget, key)) {
        return wrap(target.get(key));
      } else if (has2.call(rawTarget, rawKey)) {
        return wrap(target.get(rawKey));
      } else if (target !== rawTarget) {
        target.get(key);
      }
    }
    function has$1(key, isReadonly2 = false) {
      const target = this["__v_raw"];
      const rawTarget = toRaw(target);
      const rawKey = toRaw(key);
      if (!isReadonly2) {
        if (key !== rawKey) {
          track(rawTarget, "has", key);
        }
        track(rawTarget, "has", rawKey);
      }
      return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
    }
    function size(target, isReadonly2 = false) {
      target = target["__v_raw"];
      !isReadonly2 && track(toRaw(target), "iterate", ITERATE_KEY);
      return Reflect.get(target, "size", target);
    }
    function add$1(value) {
      value = toRaw(value);
      const target = toRaw(this);
      const proto = getProto(target);
      const hadKey = proto.has.call(target, value);
      if (!hadKey) {
        target.add(value);
        trigger(target, "add", value, value);
      }
      return this;
    }
    function set$1$1(key, value) {
      value = toRaw(value);
      const target = toRaw(this);
      const { has: has2, get: get2 } = getProto(target);
      let hadKey = has2.call(target, key);
      if (!hadKey) {
        key = toRaw(key);
        hadKey = has2.call(target, key);
      }
      const oldValue = get2.call(target, key);
      target.set(key, value);
      if (!hadKey) {
        trigger(target, "add", key, value);
      } else if (hasChanged(value, oldValue)) {
        trigger(target, "set", key, value);
      }
      return this;
    }
    function deleteEntry(key) {
      const target = toRaw(this);
      const { has: has2, get: get2 } = getProto(target);
      let hadKey = has2.call(target, key);
      if (!hadKey) {
        key = toRaw(key);
        hadKey = has2.call(target, key);
      }
      get2 ? get2.call(target, key) : void 0;
      const result = target.delete(key);
      if (hadKey) {
        trigger(target, "delete", key, void 0);
      }
      return result;
    }
    function clear() {
      const target = toRaw(this);
      const hadItems = target.size !== 0;
      const result = target.clear();
      if (hadItems) {
        trigger(target, "clear", void 0, void 0);
      }
      return result;
    }
    function createForEach(isReadonly2, isShallow2) {
      return function forEach2(callback, thisArg) {
        const observed = this;
        const target = observed["__v_raw"];
        const rawTarget = toRaw(target);
        const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
        !isReadonly2 && track(rawTarget, "iterate", ITERATE_KEY);
        return target.forEach((value, key) => {
          return callback.call(thisArg, wrap(value), wrap(key), observed);
        });
      };
    }
    function createIterableMethod(method2, isReadonly2, isShallow2) {
      return function(...args) {
        const target = this["__v_raw"];
        const rawTarget = toRaw(target);
        const targetIsMap = isMap$2(rawTarget);
        const isPair = method2 === "entries" || method2 === Symbol.iterator && targetIsMap;
        const isKeyOnly = method2 === "keys" && targetIsMap;
        const innerIterator = target[method2](...args);
        const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
        !isReadonly2 && track(rawTarget, "iterate", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
        return {
          next() {
            const { value, done: done2 } = innerIterator.next();
            return done2 ? { value, done: done2 } : {
              value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
              done: done2
            };
          },
          [Symbol.iterator]() {
            return this;
          }
        };
      };
    }
    function createReadonlyMethod(type2) {
      return function(...args) {
        return type2 === "delete" ? false : this;
      };
    }
    function createInstrumentations() {
      const mutableInstrumentations2 = {
        get(key) {
          return get$1$1(this, key);
        },
        get size() {
          return size(this);
        },
        has: has$1,
        add: add$1,
        set: set$1$1,
        delete: deleteEntry,
        clear,
        forEach: createForEach(false, false)
      };
      const shallowInstrumentations2 = {
        get(key) {
          return get$1$1(this, key, false, true);
        },
        get size() {
          return size(this);
        },
        has: has$1,
        add: add$1,
        set: set$1$1,
        delete: deleteEntry,
        clear,
        forEach: createForEach(false, true)
      };
      const readonlyInstrumentations2 = {
        get(key) {
          return get$1$1(this, key, true);
        },
        get size() {
          return size(this, true);
        },
        has(key) {
          return has$1.call(this, key, true);
        },
        add: createReadonlyMethod("add"),
        set: createReadonlyMethod("set"),
        delete: createReadonlyMethod("delete"),
        clear: createReadonlyMethod("clear"),
        forEach: createForEach(true, false)
      };
      const shallowReadonlyInstrumentations2 = {
        get(key) {
          return get$1$1(this, key, true, true);
        },
        get size() {
          return size(this, true);
        },
        has(key) {
          return has$1.call(this, key, true);
        },
        add: createReadonlyMethod("add"),
        set: createReadonlyMethod("set"),
        delete: createReadonlyMethod("delete"),
        clear: createReadonlyMethod("clear"),
        forEach: createForEach(true, true)
      };
      const iteratorMethods = ["keys", "values", "entries", Symbol.iterator];
      iteratorMethods.forEach((method2) => {
        mutableInstrumentations2[method2] = createIterableMethod(method2, false, false);
        readonlyInstrumentations2[method2] = createIterableMethod(method2, true, false);
        shallowInstrumentations2[method2] = createIterableMethod(method2, false, true);
        shallowReadonlyInstrumentations2[method2] = createIterableMethod(method2, true, true);
      });
      return [
        mutableInstrumentations2,
        readonlyInstrumentations2,
        shallowInstrumentations2,
        shallowReadonlyInstrumentations2
      ];
    }
    const [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = /* @__PURE__ */ createInstrumentations();
    function createInstrumentationGetter(isReadonly2, shallow) {
      const instrumentations = shallow ? isReadonly2 ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly2 ? readonlyInstrumentations : mutableInstrumentations;
      return (target, key, receiver) => {
        if (key === "__v_isReactive") {
          return !isReadonly2;
        } else if (key === "__v_isReadonly") {
          return isReadonly2;
        } else if (key === "__v_raw") {
          return target;
        }
        return Reflect.get(hasOwn$2(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
      };
    }
    const mutableCollectionHandlers = {
      get: /* @__PURE__ */ createInstrumentationGetter(false, false)
    };
    const shallowCollectionHandlers = {
      get: /* @__PURE__ */ createInstrumentationGetter(false, true)
    };
    const readonlyCollectionHandlers = {
      get: /* @__PURE__ */ createInstrumentationGetter(true, false)
    };
    const shallowReadonlyCollectionHandlers = {
      get: /* @__PURE__ */ createInstrumentationGetter(true, true)
    };
    const reactiveMap = /* @__PURE__ */ new WeakMap();
    const shallowReactiveMap = /* @__PURE__ */ new WeakMap();
    const readonlyMap = /* @__PURE__ */ new WeakMap();
    const shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
    function targetTypeMap(rawType) {
      switch (rawType) {
        case "Object":
        case "Array":
          return 1;
        case "Map":
        case "Set":
        case "WeakMap":
        case "WeakSet":
          return 2;
        default:
          return 0;
      }
    }
    function getTargetType(value) {
      return value["__v_skip"] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));
    }
    function reactive(target) {
      if (isReadonly(target)) {
        return target;
      }
      return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);
    }
    function shallowReactive(target) {
      return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);
    }
    function readonly(target) {
      return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
    }
    function shallowReadonly(target) {
      return createReactiveObject(target, true, shallowReadonlyHandlers, shallowReadonlyCollectionHandlers, shallowReadonlyMap);
    }
    function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
      if (!isObject$7(target)) {
        return target;
      }
      if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) {
        return target;
      }
      const existingProxy = proxyMap.get(target);
      if (existingProxy) {
        return existingProxy;
      }
      const targetType = getTargetType(target);
      if (targetType === 0) {
        return target;
      }
      const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);
      proxyMap.set(target, proxy);
      return proxy;
    }
    function isReactive(value) {
      if (isReadonly(value)) {
        return isReactive(value["__v_raw"]);
      }
      return !!(value && value["__v_isReactive"]);
    }
    function isReadonly(value) {
      return !!(value && value["__v_isReadonly"]);
    }
    function isShallow(value) {
      return !!(value && value["__v_isShallow"]);
    }
    function isProxy(value) {
      return isReactive(value) || isReadonly(value);
    }
    function toRaw(observed) {
      const raw = observed && observed["__v_raw"];
      return raw ? toRaw(raw) : observed;
    }
    function markRaw(value) {
      def(value, "__v_skip", true);
      return value;
    }
    const toReactive = (value) => isObject$7(value) ? reactive(value) : value;
    const toReadonly = (value) => isObject$7(value) ? readonly(value) : value;
    function trackRefValue(ref2) {
      if (shouldTrack && activeEffect) {
        ref2 = toRaw(ref2);
        {
          trackEffects(ref2.dep || (ref2.dep = createDep()));
        }
      }
    }
    function triggerRefValue(ref2, newVal) {
      ref2 = toRaw(ref2);
      if (ref2.dep) {
        {
          triggerEffects(ref2.dep);
        }
      }
    }
    function isRef(r) {
      return !!(r && r.__v_isRef === true);
    }
    function ref(value) {
      return createRef(value, false);
    }
    function shallowRef(value) {
      return createRef(value, true);
    }
    function createRef(rawValue, shallow) {
      if (isRef(rawValue)) {
        return rawValue;
      }
      return new RefImpl(rawValue, shallow);
    }
    class RefImpl {
      constructor(value, __v_isShallow) {
        this.__v_isShallow = __v_isShallow;
        this.dep = void 0;
        this.__v_isRef = true;
        this._rawValue = __v_isShallow ? value : toRaw(value);
        this._value = __v_isShallow ? value : toReactive(value);
      }
      get value() {
        trackRefValue(this);
        return this._value;
      }
      set value(newVal) {
        newVal = this.__v_isShallow ? newVal : toRaw(newVal);
        if (hasChanged(newVal, this._rawValue)) {
          this._rawValue = newVal;
          this._value = this.__v_isShallow ? newVal : toReactive(newVal);
          triggerRefValue(this);
        }
      }
    }
    function triggerRef(ref2) {
      triggerRefValue(ref2);
    }
    function unref(ref2) {
      return isRef(ref2) ? ref2.value : ref2;
    }
    const shallowUnwrapHandlers = {
      get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),
      set: (target, key, value, receiver) => {
        const oldValue = target[key];
        if (isRef(oldValue) && !isRef(value)) {
          oldValue.value = value;
          return true;
        } else {
          return Reflect.set(target, key, value, receiver);
        }
      }
    };
    function proxyRefs(objectWithRefs) {
      return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
    }
    class CustomRefImpl {
      constructor(factory) {
        this.dep = void 0;
        this.__v_isRef = true;
        const { get: get2, set: set2 } = factory(() => trackRefValue(this), () => triggerRefValue(this));
        this._get = get2;
        this._set = set2;
      }
      get value() {
        return this._get();
      }
      set value(newVal) {
        this._set(newVal);
      }
    }
    function customRef(factory) {
      return new CustomRefImpl(factory);
    }
    function toRefs(object2) {
      const ret = isArray$6(object2) ? new Array(object2.length) : {};
      for (const key in object2) {
        ret[key] = toRef(object2, key);
      }
      return ret;
    }
    class ObjectRefImpl {
      constructor(_object, _key, _defaultValue) {
        this._object = _object;
        this._key = _key;
        this._defaultValue = _defaultValue;
        this.__v_isRef = true;
      }
      get value() {
        const val = this._object[this._key];
        return val === void 0 ? this._defaultValue : val;
      }
      set value(newVal) {
        this._object[this._key] = newVal;
      }
    }
    function toRef(object2, key, defaultValue) {
      const val = object2[key];
      return isRef(val) ? val : new ObjectRefImpl(object2, key, defaultValue);
    }
    class ComputedRefImpl {
      constructor(getter, _setter, isReadonly2, isSSR) {
        this._setter = _setter;
        this.dep = void 0;
        this.__v_isRef = true;
        this._dirty = true;
        this.effect = new ReactiveEffect(getter, () => {
          if (!this._dirty) {
            this._dirty = true;
            triggerRefValue(this);
          }
        });
        this.effect.computed = this;
        this.effect.active = this._cacheable = !isSSR;
        this["__v_isReadonly"] = isReadonly2;
      }
      get value() {
        const self2 = toRaw(this);
        trackRefValue(self2);
        if (self2._dirty || !self2._cacheable) {
          self2._dirty = false;
          self2._value = self2.effect.run();
        }
        return self2._value;
      }
      set value(newValue) {
        this._setter(newValue);
      }
    }
    function computed$1(getterOrOptions, debugOptions, isSSR = false) {
      let getter;
      let setter;
      const onlyGetter = isFunction$4(getterOrOptions);
      if (onlyGetter) {
        getter = getterOrOptions;
        setter = NOOP;
      } else {
        getter = getterOrOptions.get;
        setter = getterOrOptions.set;
      }
      const cRef = new ComputedRefImpl(getter, setter, onlyGetter || !setter, isSSR);
      return cRef;
    }
    const stack = [];
    function warn$1(msg, ...args) {
      pauseTracking();
      const instance = stack.length ? stack[stack.length - 1].component : null;
      const appWarnHandler = instance && instance.appContext.config.warnHandler;
      const trace = getComponentTrace();
      if (appWarnHandler) {
        callWithErrorHandling(appWarnHandler, instance, 11, [
          msg + args.join(""),
          instance && instance.proxy,
          trace.map(({ vnode }) => `at <${formatComponentName(instance, vnode.type)}>`).join("\n"),
          trace
        ]);
      } else {
        const warnArgs = [`[Vue warn]: ${msg}`, ...args];
        if (trace.length && true) {
          warnArgs.push(`
`, ...formatTrace(trace));
        }
        console.warn(...warnArgs);
      }
      resetTracking();
    }
    function getComponentTrace() {
      let currentVNode = stack[stack.length - 1];
      if (!currentVNode) {
        return [];
      }
      const normalizedStack = [];
      while (currentVNode) {
        const last = normalizedStack[0];
        if (last && last.vnode === currentVNode) {
          last.recurseCount++;
        } else {
          normalizedStack.push({
            vnode: currentVNode,
            recurseCount: 0
          });
        }
        const parentInstance = currentVNode.component && currentVNode.component.parent;
        currentVNode = parentInstance && parentInstance.vnode;
      }
      return normalizedStack;
    }
    function formatTrace(trace) {
      const logs = [];
      trace.forEach((entry, i2) => {
        logs.push(...i2 === 0 ? [] : [`
`], ...formatTraceEntry(entry));
      });
      return logs;
    }
    function formatTraceEntry({ vnode, recurseCount }) {
      const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
      const isRoot = vnode.component ? vnode.component.parent == null : false;
      const open = ` at <${formatComponentName(vnode.component, vnode.type, isRoot)}`;
      const close2 = `>` + postfix;
      return vnode.props ? [open, ...formatProps(vnode.props), close2] : [open + close2];
    }
    function formatProps(props) {
      const res = [];
      const keys2 = Object.keys(props);
      keys2.slice(0, 3).forEach((key) => {
        res.push(...formatProp(key, props[key]));
      });
      if (keys2.length > 3) {
        res.push(` ...`);
      }
      return res;
    }
    function formatProp(key, value, raw) {
      if (isString$3(value)) {
        value = JSON.stringify(value);
        return raw ? value : [`${key}=${value}`];
      } else if (typeof value === "number" || typeof value === "boolean" || value == null) {
        return raw ? value : [`${key}=${value}`];
      } else if (isRef(value)) {
        value = formatProp(key, toRaw(value.value), true);
        return raw ? value : [`${key}=Ref<`, value, `>`];
      } else if (isFunction$4(value)) {
        return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];
      } else {
        value = toRaw(value);
        return raw ? value : [`${key}=`, value];
      }
    }
    function callWithErrorHandling(fn2, instance, type2, args) {
      let res;
      try {
        res = args ? fn2(...args) : fn2();
      } catch (err) {
        handleError(err, instance, type2);
      }
      return res;
    }
    function callWithAsyncErrorHandling(fn2, instance, type2, args) {
      if (isFunction$4(fn2)) {
        const res = callWithErrorHandling(fn2, instance, type2, args);
        if (res && isPromise$1(res)) {
          res.catch((err) => {
            handleError(err, instance, type2);
          });
        }
        return res;
      }
      const values = [];
      for (let i2 = 0; i2 < fn2.length; i2++) {
        values.push(callWithAsyncErrorHandling(fn2[i2], instance, type2, args));
      }
      return values;
    }
    function handleError(err, instance, type2, throwInDev = true) {
      const contextVNode = instance ? instance.vnode : null;
      if (instance) {
        let cur = instance.parent;
        const exposedInstance = instance.proxy;
        const errorInfo = type2;
        while (cur) {
          const errorCapturedHooks = cur.ec;
          if (errorCapturedHooks) {
            for (let i2 = 0; i2 < errorCapturedHooks.length; i2++) {
              if (errorCapturedHooks[i2](err, exposedInstance, errorInfo) === false) {
                return;
              }
            }
          }
          cur = cur.parent;
        }
        const appErrorHandler = instance.appContext.config.errorHandler;
        if (appErrorHandler) {
          callWithErrorHandling(appErrorHandler, null, 10, [err, exposedInstance, errorInfo]);
          return;
        }
      }
      logError$1(err, type2, contextVNode, throwInDev);
    }
    function logError$1(err, type2, contextVNode, throwInDev = true) {
      {
        console.error(err);
      }
    }
    let isFlushing = false;
    let isFlushPending = false;
    const queue$1 = [];
    let flushIndex = 0;
    const pendingPreFlushCbs = [];
    let activePreFlushCbs = null;
    let preFlushIndex = 0;
    const pendingPostFlushCbs = [];
    let activePostFlushCbs = null;
    let postFlushIndex = 0;
    const resolvedPromise = /* @__PURE__ */ Promise.resolve();
    let currentFlushPromise = null;
    let currentPreFlushParentJob = null;
    function nextTick$1(fn2) {
      const p2 = currentFlushPromise || resolvedPromise;
      return fn2 ? p2.then(this ? fn2.bind(this) : fn2) : p2;
    }
    function findInsertionIndex(id2) {
      let start = flushIndex + 1;
      let end2 = queue$1.length;
      while (start < end2) {
        const middle = start + end2 >>> 1;
        const middleJobId = getId(queue$1[middle]);
        middleJobId < id2 ? start = middle + 1 : end2 = middle;
      }
      return start;
    }
    function queueJob(job) {
      if ((!queue$1.length || !queue$1.includes(job, isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex)) && job !== currentPreFlushParentJob) {
        if (job.id == null) {
          queue$1.push(job);
        } else {
          queue$1.splice(findInsertionIndex(job.id), 0, job);
        }
        queueFlush();
      }
    }
    function queueFlush() {
      if (!isFlushing && !isFlushPending) {
        isFlushPending = true;
        currentFlushPromise = resolvedPromise.then(flushJobs);
      }
    }
    function invalidateJob(job) {
      const i2 = queue$1.indexOf(job);
      if (i2 > flushIndex) {
        queue$1.splice(i2, 1);
      }
    }
    function queueCb(cb, activeQueue, pendingQueue, index2) {
      if (!isArray$6(cb)) {
        if (!activeQueue || !activeQueue.includes(cb, cb.allowRecurse ? index2 + 1 : index2)) {
          pendingQueue.push(cb);
        }
      } else {
        pendingQueue.push(...cb);
      }
      queueFlush();
    }
    function queuePreFlushCb(cb) {
      queueCb(cb, activePreFlushCbs, pendingPreFlushCbs, preFlushIndex);
    }
    function queuePostFlushCb(cb) {
      queueCb(cb, activePostFlushCbs, pendingPostFlushCbs, postFlushIndex);
    }
    function flushPreFlushCbs(seen, parentJob = null) {
      if (pendingPreFlushCbs.length) {
        currentPreFlushParentJob = parentJob;
        activePreFlushCbs = [...new Set(pendingPreFlushCbs)];
        pendingPreFlushCbs.length = 0;
        for (preFlushIndex = 0; preFlushIndex < activePreFlushCbs.length; preFlushIndex++) {
          activePreFlushCbs[preFlushIndex]();
        }
        activePreFlushCbs = null;
        preFlushIndex = 0;
        currentPreFlushParentJob = null;
        flushPreFlushCbs(seen, parentJob);
      }
    }
    function flushPostFlushCbs(seen) {
      flushPreFlushCbs();
      if (pendingPostFlushCbs.length) {
        const deduped = [...new Set(pendingPostFlushCbs)];
        pendingPostFlushCbs.length = 0;
        if (activePostFlushCbs) {
          activePostFlushCbs.push(...deduped);
          return;
        }
        activePostFlushCbs = deduped;
        activePostFlushCbs.sort((a2, b2) => getId(a2) - getId(b2));
        for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
          activePostFlushCbs[postFlushIndex]();
        }
        activePostFlushCbs = null;
        postFlushIndex = 0;
      }
    }
    const getId = (job) => job.id == null ? Infinity : job.id;
    function flushJobs(seen) {
      isFlushPending = false;
      isFlushing = true;
      flushPreFlushCbs(seen);
      queue$1.sort((a2, b2) => getId(a2) - getId(b2));
      const check = NOOP;
      try {
        for (flushIndex = 0; flushIndex < queue$1.length; flushIndex++) {
          const job = queue$1[flushIndex];
          if (job && job.active !== false) {
            if (false)
              ;
            callWithErrorHandling(job, null, 14);
          }
        }
      } finally {
        flushIndex = 0;
        queue$1.length = 0;
        flushPostFlushCbs();
        isFlushing = false;
        currentFlushPromise = null;
        if (queue$1.length || pendingPreFlushCbs.length || pendingPostFlushCbs.length) {
          flushJobs(seen);
        }
      }
    }
    let devtools$1;
    let buffer = [];
    function setDevtoolsHook(hook2, target) {
      var _a2, _b;
      devtools$1 = hook2;
      if (devtools$1) {
        devtools$1.enabled = true;
        buffer.forEach(({ event, args }) => devtools$1.emit(event, ...args));
        buffer = [];
      } else if (typeof window !== "undefined" && window.HTMLElement && !((_b = (_a2 = window.navigator) === null || _a2 === void 0 ? void 0 : _a2.userAgent) === null || _b === void 0 ? void 0 : _b.includes("jsdom"))) {
        const replay = target.__VUE_DEVTOOLS_HOOK_REPLAY__ = target.__VUE_DEVTOOLS_HOOK_REPLAY__ || [];
        replay.push((newHook) => {
          setDevtoolsHook(newHook, target);
        });
        setTimeout(() => {
          if (!devtools$1) {
            target.__VUE_DEVTOOLS_HOOK_REPLAY__ = null;
            buffer = [];
          }
        }, 3e3);
      } else {
        buffer = [];
      }
    }
    function emit$1(instance, event, ...rawArgs) {
      if (instance.isUnmounted)
        return;
      const props = instance.vnode.props || EMPTY_OBJ;
      let args = rawArgs;
      const isModelListener2 = event.startsWith("update:");
      const modelArg = isModelListener2 && event.slice(7);
      if (modelArg && modelArg in props) {
        const modifiersKey = `${modelArg === "modelValue" ? "model" : modelArg}Modifiers`;
        const { number: number2, trim } = props[modifiersKey] || EMPTY_OBJ;
        if (trim) {
          args = rawArgs.map((a2) => a2.trim());
        }
        if (number2) {
          args = rawArgs.map(toNumber$1);
        }
      }
      let handlerName;
      let handler = props[handlerName = toHandlerKey(event)] || props[handlerName = toHandlerKey(camelize(event))];
      if (!handler && isModelListener2) {
        handler = props[handlerName = toHandlerKey(hyphenate(event))];
      }
      if (handler) {
        callWithAsyncErrorHandling(handler, instance, 6, args);
      }
      const onceHandler = props[handlerName + `Once`];
      if (onceHandler) {
        if (!instance.emitted) {
          instance.emitted = {};
        } else if (instance.emitted[handlerName]) {
          return;
        }
        instance.emitted[handlerName] = true;
        callWithAsyncErrorHandling(onceHandler, instance, 6, args);
      }
    }
    function normalizeEmitsOptions(comp, appContext, asMixin = false) {
      const cache2 = appContext.emitsCache;
      const cached = cache2.get(comp);
      if (cached !== void 0) {
        return cached;
      }
      const raw = comp.emits;
      let normalized = {};
      let hasExtends = false;
      if (!isFunction$4(comp)) {
        const extendEmits = (raw2) => {
          const normalizedFromExtend = normalizeEmitsOptions(raw2, appContext, true);
          if (normalizedFromExtend) {
            hasExtends = true;
            extend$1(normalized, normalizedFromExtend);
          }
        };
        if (!asMixin && appContext.mixins.length) {
          appContext.mixins.forEach(extendEmits);
        }
        if (comp.extends) {
          extendEmits(comp.extends);
        }
        if (comp.mixins) {
          comp.mixins.forEach(extendEmits);
        }
      }
      if (!raw && !hasExtends) {
        cache2.set(comp, null);
        return null;
      }
      if (isArray$6(raw)) {
        raw.forEach((key) => normalized[key] = null);
      } else {
        extend$1(normalized, raw);
      }
      cache2.set(comp, normalized);
      return normalized;
    }
    function isEmitListener(options, key) {
      if (!options || !isOn(key)) {
        return false;
      }
      key = key.slice(2).replace(/Once$/, "");
      return hasOwn$2(options, key[0].toLowerCase() + key.slice(1)) || hasOwn$2(options, hyphenate(key)) || hasOwn$2(options, key);
    }
    let currentRenderingInstance = null;
    let currentScopeId = null;
    function setCurrentRenderingInstance(instance) {
      const prev = currentRenderingInstance;
      currentRenderingInstance = instance;
      currentScopeId = instance && instance.type.__scopeId || null;
      return prev;
    }
    function pushScopeId(id2) {
      currentScopeId = id2;
    }
    function popScopeId() {
      currentScopeId = null;
    }
    const withScopeId = (_id) => withCtx;
    function withCtx(fn2, ctx = currentRenderingInstance, isNonScopedSlot) {
      if (!ctx)
        return fn2;
      if (fn2._n) {
        return fn2;
      }
      const renderFnWithContext = (...args) => {
        if (renderFnWithContext._d) {
          setBlockTracking(-1);
        }
        const prevInstance = setCurrentRenderingInstance(ctx);
        const res = fn2(...args);
        setCurrentRenderingInstance(prevInstance);
        if (renderFnWithContext._d) {
          setBlockTracking(1);
        }
        return res;
      };
      renderFnWithContext._n = true;
      renderFnWithContext._c = true;
      renderFnWithContext._d = true;
      return renderFnWithContext;
    }
    function markAttrsAccessed() {
    }
    function renderComponentRoot(instance) {
      const { type: Component, vnode, proxy, withProxy, props, propsOptions: [propsOptions], slots, attrs, emit: emit2, render: render2, renderCache, data, setupState, ctx, inheritAttrs } = instance;
      let result;
      let fallthroughAttrs;
      const prev = setCurrentRenderingInstance(instance);
      try {
        if (vnode.shapeFlag & 4) {
          const proxyToUse = withProxy || proxy;
          result = normalizeVNode(render2.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));
          fallthroughAttrs = attrs;
        } else {
          const render3 = Component;
          if (false)
            ;
          result = normalizeVNode(render3.length > 1 ? render3(props, false ? {
            get attrs() {
              markAttrsAccessed();
              return attrs;
            },
            slots,
            emit: emit2
          } : { attrs, slots, emit: emit2 }) : render3(props, null));
          fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
        }
      } catch (err) {
        blockStack.length = 0;
        handleError(err, instance, 1);
        result = createVNode(Comment);
      }
      let root2 = result;
      if (fallthroughAttrs && inheritAttrs !== false) {
        const keys2 = Object.keys(fallthroughAttrs);
        const { shapeFlag } = root2;
        if (keys2.length) {
          if (shapeFlag & (1 | 6)) {
            if (propsOptions && keys2.some(isModelListener)) {
              fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);
            }
            root2 = cloneVNode(root2, fallthroughAttrs);
          }
        }
      }
      if (vnode.dirs) {
        root2 = cloneVNode(root2);
        root2.dirs = root2.dirs ? root2.dirs.concat(vnode.dirs) : vnode.dirs;
      }
      if (vnode.transition) {
        root2.transition = vnode.transition;
      }
      {
        result = root2;
      }
      setCurrentRenderingInstance(prev);
      return result;
    }
    function filterSingleRoot(children) {
      let singleRoot;
      for (let i2 = 0; i2 < children.length; i2++) {
        const child = children[i2];
        if (isVNode(child)) {
          if (child.type !== Comment || child.children === "v-if") {
            if (singleRoot) {
              return;
            } else {
              singleRoot = child;
            }
          }
        } else {
          return;
        }
      }
      return singleRoot;
    }
    const getFunctionalFallthrough = (attrs) => {
      let res;
      for (const key in attrs) {
        if (key === "class" || key === "style" || isOn(key)) {
          (res || (res = {}))[key] = attrs[key];
        }
      }
      return res;
    };
    const filterModelListeners = (attrs, props) => {
      const res = {};
      for (const key in attrs) {
        if (!isModelListener(key) || !(key.slice(9) in props)) {
          res[key] = attrs[key];
        }
      }
      return res;
    };
    function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
      const { props: prevProps, children: prevChildren, component: component2 } = prevVNode;
      const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;
      const emits = component2.emitsOptions;
      if (nextVNode.dirs || nextVNode.transition) {
        return true;
      }
      if (optimized && patchFlag >= 0) {
        if (patchFlag & 1024) {
          return true;
        }
        if (patchFlag & 16) {
          if (!prevProps) {
            return !!nextProps;
          }
          return hasPropsChanged(prevProps, nextProps, emits);
        } else if (patchFlag & 8) {
          const dynamicProps = nextVNode.dynamicProps;
          for (let i2 = 0; i2 < dynamicProps.length; i2++) {
            const key = dynamicProps[i2];
            if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) {
              return true;
            }
          }
        }
      } else {
        if (prevChildren || nextChildren) {
          if (!nextChildren || !nextChildren.$stable) {
            return true;
          }
        }
        if (prevProps === nextProps) {
          return false;
        }
        if (!prevProps) {
          return !!nextProps;
        }
        if (!nextProps) {
          return true;
        }
        return hasPropsChanged(prevProps, nextProps, emits);
      }
      return false;
    }
    function hasPropsChanged(prevProps, nextProps, emitsOptions) {
      const nextKeys = Object.keys(nextProps);
      if (nextKeys.length !== Object.keys(prevProps).length) {
        return true;
      }
      for (let i2 = 0; i2 < nextKeys.length; i2++) {
        const key = nextKeys[i2];
        if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) {
          return true;
        }
      }
      return false;
    }
    function updateHOCHostEl({ vnode, parent }, el) {
      while (parent && parent.subTree === vnode) {
        (vnode = parent.vnode).el = el;
        parent = parent.parent;
      }
    }
    const isSuspense = (type2) => type2.__isSuspense;
    const SuspenseImpl = {
      name: "Suspense",
      __isSuspense: true,
      process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {
        if (n1 == null) {
          mountSuspense(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals);
        } else {
          patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, rendererInternals);
        }
      },
      hydrate: hydrateSuspense,
      create: createSuspenseBoundary,
      normalize: normalizeSuspenseChildren
    };
    const Suspense = SuspenseImpl;
    function triggerEvent$1(vnode, name) {
      const eventListener = vnode.props && vnode.props[name];
      if (isFunction$4(eventListener)) {
        eventListener();
      }
    }
    function mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {
      const { p: patch, o: { createElement } } = rendererInternals;
      const hiddenContainer = createElement("div");
      const suspense = vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals);
      patch(null, suspense.pendingBranch = vnode.ssContent, hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds);
      if (suspense.deps > 0) {
        triggerEvent$1(vnode, "onPending");
        triggerEvent$1(vnode, "onFallback");
        patch(
          null,
          vnode.ssFallback,
          container,
          anchor,
          parentComponent,
          null,
          isSVG,
          slotScopeIds
        );
        setActiveBranch(suspense, vnode.ssFallback);
      } else {
        suspense.resolve();
      }
    }
    function patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, { p: patch, um: unmount, o: { createElement } }) {
      const suspense = n2.suspense = n1.suspense;
      suspense.vnode = n2;
      n2.el = n1.el;
      const newBranch = n2.ssContent;
      const newFallback = n2.ssFallback;
      const { activeBranch, pendingBranch, isInFallback, isHydrating } = suspense;
      if (pendingBranch) {
        suspense.pendingBranch = newBranch;
        if (isSameVNodeType(newBranch, pendingBranch)) {
          patch(pendingBranch, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
          if (suspense.deps <= 0) {
            suspense.resolve();
          } else if (isInFallback) {
            patch(
              activeBranch,
              newFallback,
              container,
              anchor,
              parentComponent,
              null,
              isSVG,
              slotScopeIds,
              optimized
            );
            setActiveBranch(suspense, newFallback);
          }
        } else {
          suspense.pendingId++;
          if (isHydrating) {
            suspense.isHydrating = false;
            suspense.activeBranch = pendingBranch;
          } else {
            unmount(pendingBranch, parentComponent, suspense);
          }
          suspense.deps = 0;
          suspense.effects.length = 0;
          suspense.hiddenContainer = createElement("div");
          if (isInFallback) {
            patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
            if (suspense.deps <= 0) {
              suspense.resolve();
            } else {
              patch(
                activeBranch,
                newFallback,
                container,
                anchor,
                parentComponent,
                null,
                isSVG,
                slotScopeIds,
                optimized
              );
              setActiveBranch(suspense, newFallback);
            }
          } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
            patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);
            suspense.resolve(true);
          } else {
            patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
            if (suspense.deps <= 0) {
              suspense.resolve();
            }
          }
        }
      } else {
        if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
          patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);
          setActiveBranch(suspense, newBranch);
        } else {
          triggerEvent$1(n2, "onPending");
          suspense.pendingBranch = newBranch;
          suspense.pendingId++;
          patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
          if (suspense.deps <= 0) {
            suspense.resolve();
          } else {
            const { timeout, pendingId } = suspense;
            if (timeout > 0) {
              setTimeout(() => {
                if (suspense.pendingId === pendingId) {
                  suspense.fallback(newFallback);
                }
              }, timeout);
            } else if (timeout === 0) {
              suspense.fallback(newFallback);
            }
          }
        }
      }
    }
    function createSuspenseBoundary(vnode, parent, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals, isHydrating = false) {
      const { p: patch, m: move, um: unmount, n: next, o: { parentNode, remove: remove2 } } = rendererInternals;
      const timeout = toNumber$1(vnode.props && vnode.props.timeout);
      const suspense = {
        vnode,
        parent,
        parentComponent,
        isSVG,
        container,
        hiddenContainer,
        anchor,
        deps: 0,
        pendingId: 0,
        timeout: typeof timeout === "number" ? timeout : -1,
        activeBranch: null,
        pendingBranch: null,
        isInFallback: true,
        isHydrating,
        isUnmounted: false,
        effects: [],
        resolve(resume2 = false) {
          const { vnode: vnode2, activeBranch, pendingBranch, pendingId, effects, parentComponent: parentComponent2, container: container2 } = suspense;
          if (suspense.isHydrating) {
            suspense.isHydrating = false;
          } else if (!resume2) {
            const delayEnter = activeBranch && pendingBranch.transition && pendingBranch.transition.mode === "out-in";
            if (delayEnter) {
              activeBranch.transition.afterLeave = () => {
                if (pendingId === suspense.pendingId) {
                  move(pendingBranch, container2, anchor2, 0);
                }
              };
            }
            let { anchor: anchor2 } = suspense;
            if (activeBranch) {
              anchor2 = next(activeBranch);
              unmount(activeBranch, parentComponent2, suspense, true);
            }
            if (!delayEnter) {
              move(pendingBranch, container2, anchor2, 0);
            }
          }
          setActiveBranch(suspense, pendingBranch);
          suspense.pendingBranch = null;
          suspense.isInFallback = false;
          let parent2 = suspense.parent;
          let hasUnresolvedAncestor = false;
          while (parent2) {
            if (parent2.pendingBranch) {
              parent2.effects.push(...effects);
              hasUnresolvedAncestor = true;
              break;
            }
            parent2 = parent2.parent;
          }
          if (!hasUnresolvedAncestor) {
            queuePostFlushCb(effects);
          }
          suspense.effects = [];
          triggerEvent$1(vnode2, "onResolve");
        },
        fallback(fallbackVNode) {
          if (!suspense.pendingBranch) {
            return;
          }
          const { vnode: vnode2, activeBranch, parentComponent: parentComponent2, container: container2, isSVG: isSVG2 } = suspense;
          triggerEvent$1(vnode2, "onFallback");
          const anchor2 = next(activeBranch);
          const mountFallback = () => {
            if (!suspense.isInFallback) {
              return;
            }
            patch(
              null,
              fallbackVNode,
              container2,
              anchor2,
              parentComponent2,
              null,
              isSVG2,
              slotScopeIds,
              optimized
            );
            setActiveBranch(suspense, fallbackVNode);
          };
          const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === "out-in";
          if (delayEnter) {
            activeBranch.transition.afterLeave = mountFallback;
          }
          suspense.isInFallback = true;
          unmount(
            activeBranch,
            parentComponent2,
            null,
            true
          );
          if (!delayEnter) {
            mountFallback();
          }
        },
        move(container2, anchor2, type2) {
          suspense.activeBranch && move(suspense.activeBranch, container2, anchor2, type2);
          suspense.container = container2;
        },
        next() {
          return suspense.activeBranch && next(suspense.activeBranch);
        },
        registerDep(instance, setupRenderEffect) {
          const isInPendingSuspense = !!suspense.pendingBranch;
          if (isInPendingSuspense) {
            suspense.deps++;
          }
          const hydratedEl = instance.vnode.el;
          instance.asyncDep.catch((err) => {
            handleError(err, instance, 0);
          }).then((asyncSetupResult) => {
            if (instance.isUnmounted || suspense.isUnmounted || suspense.pendingId !== instance.suspenseId) {
              return;
            }
            instance.asyncResolved = true;
            const { vnode: vnode2 } = instance;
            handleSetupResult(instance, asyncSetupResult, false);
            if (hydratedEl) {
              vnode2.el = hydratedEl;
            }
            const placeholder = !hydratedEl && instance.subTree.el;
            setupRenderEffect(
              instance,
              vnode2,
              parentNode(hydratedEl || instance.subTree.el),
              hydratedEl ? null : next(instance.subTree),
              suspense,
              isSVG,
              optimized
            );
            if (placeholder) {
              remove2(placeholder);
            }
            updateHOCHostEl(instance, vnode2.el);
            if (isInPendingSuspense && --suspense.deps === 0) {
              suspense.resolve();
            }
          });
        },
        unmount(parentSuspense, doRemove) {
          suspense.isUnmounted = true;
          if (suspense.activeBranch) {
            unmount(suspense.activeBranch, parentComponent, parentSuspense, doRemove);
          }
          if (suspense.pendingBranch) {
            unmount(suspense.pendingBranch, parentComponent, parentSuspense, doRemove);
          }
        }
      };
      return suspense;
    }
    function hydrateSuspense(node, vnode, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals, hydrateNode) {
      const suspense = vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, node.parentNode, document.createElement("div"), null, isSVG, slotScopeIds, optimized, rendererInternals, true);
      const result = hydrateNode(node, suspense.pendingBranch = vnode.ssContent, parentComponent, suspense, slotScopeIds, optimized);
      if (suspense.deps === 0) {
        suspense.resolve();
      }
      return result;
    }
    function normalizeSuspenseChildren(vnode) {
      const { shapeFlag, children } = vnode;
      const isSlotChildren = shapeFlag & 32;
      vnode.ssContent = normalizeSuspenseSlot(isSlotChildren ? children.default : children);
      vnode.ssFallback = isSlotChildren ? normalizeSuspenseSlot(children.fallback) : createVNode(Comment);
    }
    function normalizeSuspenseSlot(s2) {
      let block;
      if (isFunction$4(s2)) {
        const trackBlock = isBlockTreeEnabled && s2._c;
        if (trackBlock) {
          s2._d = false;
          openBlock();
        }
        s2 = s2();
        if (trackBlock) {
          s2._d = true;
          block = currentBlock;
          closeBlock();
        }
      }
      if (isArray$6(s2)) {
        const singleChild = filterSingleRoot(s2);
        s2 = singleChild;
      }
      s2 = normalizeVNode(s2);
      if (block && !s2.dynamicChildren) {
        s2.dynamicChildren = block.filter((c2) => c2 !== s2);
      }
      return s2;
    }
    function queueEffectWithSuspense(fn2, suspense) {
      if (suspense && suspense.pendingBranch) {
        if (isArray$6(fn2)) {
          suspense.effects.push(...fn2);
        } else {
          suspense.effects.push(fn2);
        }
      } else {
        queuePostFlushCb(fn2);
      }
    }
    function setActiveBranch(suspense, branch) {
      suspense.activeBranch = branch;
      const { vnode, parentComponent } = suspense;
      const el = vnode.el = branch.el;
      if (parentComponent && parentComponent.subTree === vnode) {
        parentComponent.vnode.el = el;
        updateHOCHostEl(parentComponent, el);
      }
    }
    function provide(key, value) {
      if (!currentInstance)
        ;
      else {
        let provides = currentInstance.provides;
        const parentProvides = currentInstance.parent && currentInstance.parent.provides;
        if (parentProvides === provides) {
          provides = currentInstance.provides = Object.create(parentProvides);
        }
        provides[key] = value;
      }
    }
    function inject(key, defaultValue, treatDefaultAsFactory = false) {
      const instance = currentInstance || currentRenderingInstance;
      if (instance) {
        const provides = instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides;
        if (provides && key in provides) {
          return provides[key];
        } else if (arguments.length > 1) {
          return treatDefaultAsFactory && isFunction$4(defaultValue) ? defaultValue.call(instance.proxy) : defaultValue;
        } else
          ;
      }
    }
    function watchEffect(effect2, options) {
      return doWatch(effect2, null, options);
    }
    function watchPostEffect(effect2, options) {
      return doWatch(effect2, null, { flush: "post" });
    }
    function watchSyncEffect(effect2, options) {
      return doWatch(effect2, null, { flush: "sync" });
    }
    const INITIAL_WATCHER_VALUE = {};
    function watch(source, cb, options) {
      return doWatch(source, cb, options);
    }
    function doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ) {
      const instance = currentInstance;
      let getter;
      let forceTrigger = false;
      let isMultiSource = false;
      if (isRef(source)) {
        getter = () => source.value;
        forceTrigger = isShallow(source);
      } else if (isReactive(source)) {
        getter = () => source;
        deep = true;
      } else if (isArray$6(source)) {
        isMultiSource = true;
        forceTrigger = source.some((s2) => isReactive(s2) || isShallow(s2));
        getter = () => source.map((s2) => {
          if (isRef(s2)) {
            return s2.value;
          } else if (isReactive(s2)) {
            return traverse(s2);
          } else if (isFunction$4(s2)) {
            return callWithErrorHandling(s2, instance, 2);
          } else
            ;
        });
      } else if (isFunction$4(source)) {
        if (cb) {
          getter = () => callWithErrorHandling(source, instance, 2);
        } else {
          getter = () => {
            if (instance && instance.isUnmounted) {
              return;
            }
            if (cleanup) {
              cleanup();
            }
            return callWithAsyncErrorHandling(source, instance, 3, [onCleanup]);
          };
        }
      } else {
        getter = NOOP;
      }
      if (cb && deep) {
        const baseGetter = getter;
        getter = () => traverse(baseGetter());
      }
      let cleanup;
      let onCleanup = (fn2) => {
        cleanup = effect2.onStop = () => {
          callWithErrorHandling(fn2, instance, 4);
        };
      };
      if (isInSSRComponentSetup) {
        onCleanup = NOOP;
        if (!cb) {
          getter();
        } else if (immediate) {
          callWithAsyncErrorHandling(cb, instance, 3, [
            getter(),
            isMultiSource ? [] : void 0,
            onCleanup
          ]);
        }
        return NOOP;
      }
      let oldValue = isMultiSource ? [] : INITIAL_WATCHER_VALUE;
      const job = () => {
        if (!effect2.active) {
          return;
        }
        if (cb) {
          const newValue = effect2.run();
          if (deep || forceTrigger || (isMultiSource ? newValue.some((v2, i2) => hasChanged(v2, oldValue[i2])) : hasChanged(newValue, oldValue)) || false) {
            if (cleanup) {
              cleanup();
            }
            callWithAsyncErrorHandling(cb, instance, 3, [
              newValue,
              oldValue === INITIAL_WATCHER_VALUE ? void 0 : oldValue,
              onCleanup
            ]);
            oldValue = newValue;
          }
        } else {
          effect2.run();
        }
      };
      job.allowRecurse = !!cb;
      let scheduler;
      if (flush === "sync") {
        scheduler = job;
      } else if (flush === "post") {
        scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);
      } else {
        scheduler = () => queuePreFlushCb(job);
      }
      const effect2 = new ReactiveEffect(getter, scheduler);
      if (cb) {
        if (immediate) {
          job();
        } else {
          oldValue = effect2.run();
        }
      } else if (flush === "post") {
        queuePostRenderEffect(effect2.run.bind(effect2), instance && instance.suspense);
      } else {
        effect2.run();
      }
      return () => {
        effect2.stop();
        if (instance && instance.scope) {
          remove$1(instance.scope.effects, effect2);
        }
      };
    }
    function instanceWatch(source, value, options) {
      const publicThis = this.proxy;
      const getter = isString$3(source) ? source.includes(".") ? createPathGetter(publicThis, source) : () => publicThis[source] : source.bind(publicThis, publicThis);
      let cb;
      if (isFunction$4(value)) {
        cb = value;
      } else {
        cb = value.handler;
        options = value;
      }
      const cur = currentInstance;
      setCurrentInstance(this);
      const res = doWatch(getter, cb.bind(publicThis), options);
      if (cur) {
        setCurrentInstance(cur);
      } else {
        unsetCurrentInstance();
      }
      return res;
    }
    function createPathGetter(ctx, path) {
      const segments = path.split(".");
      return () => {
        let cur = ctx;
        for (let i2 = 0; i2 < segments.length && cur; i2++) {
          cur = cur[segments[i2]];
        }
        return cur;
      };
    }
    function traverse(value, seen) {
      if (!isObject$7(value) || value["__v_skip"]) {
        return value;
      }
      seen = seen || /* @__PURE__ */ new Set();
      if (seen.has(value)) {
        return value;
      }
      seen.add(value);
      if (isRef(value)) {
        traverse(value.value, seen);
      } else if (isArray$6(value)) {
        for (let i2 = 0; i2 < value.length; i2++) {
          traverse(value[i2], seen);
        }
      } else if (isSet$2(value) || isMap$2(value)) {
        value.forEach((v2) => {
          traverse(v2, seen);
        });
      } else if (isPlainObject$2(value)) {
        for (const key in value) {
          traverse(value[key], seen);
        }
      }
      return value;
    }
    function useTransitionState() {
      const state = {
        isMounted: false,
        isLeaving: false,
        isUnmounting: false,
        leavingVNodes: /* @__PURE__ */ new Map()
      };
      onMounted(() => {
        state.isMounted = true;
      });
      onBeforeUnmount(() => {
        state.isUnmounting = true;
      });
      return state;
    }
    const TransitionHookValidator = [Function, Array];
    const BaseTransitionImpl = {
      name: `BaseTransition`,
      props: {
        mode: String,
        appear: Boolean,
        persisted: Boolean,
        onBeforeEnter: TransitionHookValidator,
        onEnter: TransitionHookValidator,
        onAfterEnter: TransitionHookValidator,
        onEnterCancelled: TransitionHookValidator,
        onBeforeLeave: TransitionHookValidator,
        onLeave: TransitionHookValidator,
        onAfterLeave: TransitionHookValidator,
        onLeaveCancelled: TransitionHookValidator,
        onBeforeAppear: TransitionHookValidator,
        onAppear: TransitionHookValidator,
        onAfterAppear: TransitionHookValidator,
        onAppearCancelled: TransitionHookValidator
      },
      setup(props, { slots }) {
        const instance = getCurrentInstance();
        const state = useTransitionState();
        let prevTransitionKey;
        return () => {
          const children = slots.default && getTransitionRawChildren(slots.default(), true);
          if (!children || !children.length) {
            return;
          }
          let child = children[0];
          if (children.length > 1) {
            for (const c2 of children) {
              if (c2.type !== Comment) {
                child = c2;
                break;
              }
            }
          }
          const rawProps = toRaw(props);
          const { mode } = rawProps;
          if (state.isLeaving) {
            return emptyPlaceholder(child);
          }
          const innerChild = getKeepAliveChild(child);
          if (!innerChild) {
            return emptyPlaceholder(child);
          }
          const enterHooks = resolveTransitionHooks(innerChild, rawProps, state, instance);
          setTransitionHooks(innerChild, enterHooks);
          const oldChild = instance.subTree;
          const oldInnerChild = oldChild && getKeepAliveChild(oldChild);
          let transitionKeyChanged = false;
          const { getTransitionKey } = innerChild.type;
          if (getTransitionKey) {
            const key = getTransitionKey();
            if (prevTransitionKey === void 0) {
              prevTransitionKey = key;
            } else if (key !== prevTransitionKey) {
              prevTransitionKey = key;
              transitionKeyChanged = true;
            }
          }
          if (oldInnerChild && oldInnerChild.type !== Comment && (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {
            const leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance);
            setTransitionHooks(oldInnerChild, leavingHooks);
            if (mode === "out-in") {
              state.isLeaving = true;
              leavingHooks.afterLeave = () => {
                state.isLeaving = false;
                instance.update();
              };
              return emptyPlaceholder(child);
            } else if (mode === "in-out" && innerChild.type !== Comment) {
              leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {
                const leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild);
                leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
                el._leaveCb = () => {
                  earlyRemove();
                  el._leaveCb = void 0;
                  delete enterHooks.delayedLeave;
                };
                enterHooks.delayedLeave = delayedLeave;
              };
            }
          }
          return child;
        };
      }
    };
    const BaseTransition = BaseTransitionImpl;
    function getLeavingNodesForType(state, vnode) {
      const { leavingVNodes } = state;
      let leavingVNodesCache = leavingVNodes.get(vnode.type);
      if (!leavingVNodesCache) {
        leavingVNodesCache = /* @__PURE__ */ Object.create(null);
        leavingVNodes.set(vnode.type, leavingVNodesCache);
      }
      return leavingVNodesCache;
    }
    function resolveTransitionHooks(vnode, props, state, instance) {
      const { appear, mode, persisted = false, onBeforeEnter, onEnter, onAfterEnter, onEnterCancelled, onBeforeLeave, onLeave, onAfterLeave, onLeaveCancelled, onBeforeAppear, onAppear, onAfterAppear, onAppearCancelled } = props;
      const key = String(vnode.key);
      const leavingVNodesCache = getLeavingNodesForType(state, vnode);
      const callHook2 = (hook2, args) => {
        hook2 && callWithAsyncErrorHandling(hook2, instance, 9, args);
      };
      const callAsyncHook = (hook2, args) => {
        const done2 = args[1];
        callHook2(hook2, args);
        if (isArray$6(hook2)) {
          if (hook2.every((hook3) => hook3.length <= 1))
            done2();
        } else if (hook2.length <= 1) {
          done2();
        }
      };
      const hooks = {
        mode,
        persisted,
        beforeEnter(el) {
          let hook2 = onBeforeEnter;
          if (!state.isMounted) {
            if (appear) {
              hook2 = onBeforeAppear || onBeforeEnter;
            } else {
              return;
            }
          }
          if (el._leaveCb) {
            el._leaveCb(true);
          }
          const leavingVNode = leavingVNodesCache[key];
          if (leavingVNode && isSameVNodeType(vnode, leavingVNode) && leavingVNode.el._leaveCb) {
            leavingVNode.el._leaveCb();
          }
          callHook2(hook2, [el]);
        },
        enter(el) {
          let hook2 = onEnter;
          let afterHook = onAfterEnter;
          let cancelHook = onEnterCancelled;
          if (!state.isMounted) {
            if (appear) {
              hook2 = onAppear || onEnter;
              afterHook = onAfterAppear || onAfterEnter;
              cancelHook = onAppearCancelled || onEnterCancelled;
            } else {
              return;
            }
          }
          let called = false;
          const done2 = el._enterCb = (cancelled) => {
            if (called)
              return;
            called = true;
            if (cancelled) {
              callHook2(cancelHook, [el]);
            } else {
              callHook2(afterHook, [el]);
            }
            if (hooks.delayedLeave) {
              hooks.delayedLeave();
            }
            el._enterCb = void 0;
          };
          if (hook2) {
            callAsyncHook(hook2, [el, done2]);
          } else {
            done2();
          }
        },
        leave(el, remove2) {
          const key2 = String(vnode.key);
          if (el._enterCb) {
            el._enterCb(true);
          }
          if (state.isUnmounting) {
            return remove2();
          }
          callHook2(onBeforeLeave, [el]);
          let called = false;
          const done2 = el._leaveCb = (cancelled) => {
            if (called)
              return;
            called = true;
            remove2();
            if (cancelled) {
              callHook2(onLeaveCancelled, [el]);
            } else {
              callHook2(onAfterLeave, [el]);
            }
            el._leaveCb = void 0;
            if (leavingVNodesCache[key2] === vnode) {
              delete leavingVNodesCache[key2];
            }
          };
          leavingVNodesCache[key2] = vnode;
          if (onLeave) {
            callAsyncHook(onLeave, [el, done2]);
          } else {
            done2();
          }
        },
        clone(vnode2) {
          return resolveTransitionHooks(vnode2, props, state, instance);
        }
      };
      return hooks;
    }
    function emptyPlaceholder(vnode) {
      if (isKeepAlive(vnode)) {
        vnode = cloneVNode(vnode);
        vnode.children = null;
        return vnode;
      }
    }
    function getKeepAliveChild(vnode) {
      return isKeepAlive(vnode) ? vnode.children ? vnode.children[0] : void 0 : vnode;
    }
    function setTransitionHooks(vnode, hooks) {
      if (vnode.shapeFlag & 6 && vnode.component) {
        setTransitionHooks(vnode.component.subTree, hooks);
      } else if (vnode.shapeFlag & 128) {
        vnode.ssContent.transition = hooks.clone(vnode.ssContent);
        vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
      } else {
        vnode.transition = hooks;
      }
    }
    function getTransitionRawChildren(children, keepComment = false, parentKey) {
      let ret = [];
      let keyedFragmentCount = 0;
      for (let i2 = 0; i2 < children.length; i2++) {
        let child = children[i2];
        const key = parentKey == null ? child.key : String(parentKey) + String(child.key != null ? child.key : i2);
        if (child.type === Fragment) {
          if (child.patchFlag & 128)
            keyedFragmentCount++;
          ret = ret.concat(getTransitionRawChildren(child.children, keepComment, key));
        } else if (keepComment || child.type !== Comment) {
          ret.push(key != null ? cloneVNode(child, { key }) : child);
        }
      }
      if (keyedFragmentCount > 1) {
        for (let i2 = 0; i2 < ret.length; i2++) {
          ret[i2].patchFlag = -2;
        }
      }
      return ret;
    }
    function defineComponent(options) {
      return isFunction$4(options) ? { setup: options, name: options.name } : options;
    }
    const isAsyncWrapper = (i2) => !!i2.type.__asyncLoader;
    function defineAsyncComponent(source) {
      if (isFunction$4(source)) {
        source = { loader: source };
      }
      const {
        loader: loader2,
        loadingComponent,
        errorComponent,
        delay = 200,
        timeout,
        suspensible = true,
        onError: userOnError
      } = source;
      let pendingRequest = null;
      let resolvedComp;
      let retries = 0;
      const retry = () => {
        retries++;
        pendingRequest = null;
        return load2();
      };
      const load2 = () => {
        let thisRequest;
        return pendingRequest || (thisRequest = pendingRequest = loader2().catch((err) => {
          err = err instanceof Error ? err : new Error(String(err));
          if (userOnError) {
            return new Promise((resolve2, reject) => {
              const userRetry = () => resolve2(retry());
              const userFail = () => reject(err);
              userOnError(err, userRetry, userFail, retries + 1);
            });
          } else {
            throw err;
          }
        }).then((comp) => {
          if (thisRequest !== pendingRequest && pendingRequest) {
            return pendingRequest;
          }
          if (comp && (comp.__esModule || comp[Symbol.toStringTag] === "Module")) {
            comp = comp.default;
          }
          resolvedComp = comp;
          return comp;
        }));
      };
      return defineComponent({
        name: "AsyncComponentWrapper",
        __asyncLoader: load2,
        get __asyncResolved() {
          return resolvedComp;
        },
        setup() {
          const instance = currentInstance;
          if (resolvedComp) {
            return () => createInnerComp(resolvedComp, instance);
          }
          const onError = (err) => {
            pendingRequest = null;
            handleError(err, instance, 13, !errorComponent);
          };
          if (suspensible && instance.suspense || isInSSRComponentSetup) {
            return load2().then((comp) => {
              return () => createInnerComp(comp, instance);
            }).catch((err) => {
              onError(err);
              return () => errorComponent ? createVNode(errorComponent, {
                error: err
              }) : null;
            });
          }
          const loaded = ref(false);
          const error2 = ref();
          const delayed = ref(!!delay);
          if (delay) {
            setTimeout(() => {
              delayed.value = false;
            }, delay);
          }
          if (timeout != null) {
            setTimeout(() => {
              if (!loaded.value && !error2.value) {
                const err = new Error(`Async component timed out after ${timeout}ms.`);
                onError(err);
                error2.value = err;
              }
            }, timeout);
          }
          load2().then(() => {
            loaded.value = true;
            if (instance.parent && isKeepAlive(instance.parent.vnode)) {
              queueJob(instance.parent.update);
            }
          }).catch((err) => {
            onError(err);
            error2.value = err;
          });
          return () => {
            if (loaded.value && resolvedComp) {
              return createInnerComp(resolvedComp, instance);
            } else if (error2.value && errorComponent) {
              return createVNode(errorComponent, {
                error: error2.value
              });
            } else if (loadingComponent && !delayed.value) {
              return createVNode(loadingComponent);
            }
          };
        }
      });
    }
    function createInnerComp(comp, { vnode: { ref: ref2, props, children, shapeFlag }, parent }) {
      const vnode = createVNode(comp, props, children);
      vnode.ref = ref2;
      return vnode;
    }
    const isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
    const KeepAliveImpl = {
      name: `KeepAlive`,
      __isKeepAlive: true,
      props: {
        include: [String, RegExp, Array],
        exclude: [String, RegExp, Array],
        max: [String, Number]
      },
      setup(props, { slots }) {
        const instance = getCurrentInstance();
        const sharedContext = instance.ctx;
        if (!sharedContext.renderer) {
          return () => {
            const children = slots.default && slots.default();
            return children && children.length === 1 ? children[0] : children;
          };
        }
        const cache2 = /* @__PURE__ */ new Map();
        const keys2 = /* @__PURE__ */ new Set();
        let current = null;
        const parentSuspense = instance.suspense;
        const { renderer: { p: patch, m: move, um: _unmount, o: { createElement } } } = sharedContext;
        const storageContainer = createElement("div");
        sharedContext.activate = (vnode, container, anchor, isSVG, optimized) => {
          const instance2 = vnode.component;
          move(vnode, container, anchor, 0, parentSuspense);
          patch(instance2.vnode, vnode, container, anchor, instance2, parentSuspense, isSVG, vnode.slotScopeIds, optimized);
          queuePostRenderEffect(() => {
            instance2.isDeactivated = false;
            if (instance2.a) {
              invokeArrayFns(instance2.a);
            }
            const vnodeHook = vnode.props && vnode.props.onVnodeMounted;
            if (vnodeHook) {
              invokeVNodeHook(vnodeHook, instance2.parent, vnode);
            }
          }, parentSuspense);
        };
        sharedContext.deactivate = (vnode) => {
          const instance2 = vnode.component;
          move(vnode, storageContainer, null, 1, parentSuspense);
          queuePostRenderEffect(() => {
            if (instance2.da) {
              invokeArrayFns(instance2.da);
            }
            const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;
            if (vnodeHook) {
              invokeVNodeHook(vnodeHook, instance2.parent, vnode);
            }
            instance2.isDeactivated = true;
          }, parentSuspense);
        };
        function unmount(vnode) {
          resetShapeFlag(vnode);
          _unmount(vnode, instance, parentSuspense, true);
        }
        function pruneCache(filter) {
          cache2.forEach((vnode, key) => {
            const name = getComponentName(vnode.type);
            if (name && (!filter || !filter(name))) {
              pruneCacheEntry(key);
            }
          });
        }
        function pruneCacheEntry(key) {
          const cached = cache2.get(key);
          if (!current || cached.type !== current.type) {
            unmount(cached);
          } else if (current) {
            resetShapeFlag(current);
          }
          cache2.delete(key);
          keys2.delete(key);
        }
        watch(
          () => [props.include, props.exclude],
          ([include, exclude]) => {
            include && pruneCache((name) => matches(include, name));
            exclude && pruneCache((name) => !matches(exclude, name));
          },
          { flush: "post", deep: true }
        );
        let pendingCacheKey = null;
        const cacheSubtree = () => {
          if (pendingCacheKey != null) {
            cache2.set(pendingCacheKey, getInnerChild(instance.subTree));
          }
        };
        onMounted(cacheSubtree);
        onUpdated(cacheSubtree);
        onBeforeUnmount(() => {
          cache2.forEach((cached) => {
            const { subTree, suspense } = instance;
            const vnode = getInnerChild(subTree);
            if (cached.type === vnode.type) {
              resetShapeFlag(vnode);
              const da = vnode.component.da;
              da && queuePostRenderEffect(da, suspense);
              return;
            }
            unmount(cached);
          });
        });
        return () => {
          pendingCacheKey = null;
          if (!slots.default) {
            return null;
          }
          const children = slots.default();
          const rawVNode = children[0];
          if (children.length > 1) {
            current = null;
            return children;
          } else if (!isVNode(rawVNode) || !(rawVNode.shapeFlag & 4) && !(rawVNode.shapeFlag & 128)) {
            current = null;
            return rawVNode;
          }
          let vnode = getInnerChild(rawVNode);
          const comp = vnode.type;
          const name = getComponentName(isAsyncWrapper(vnode) ? vnode.type.__asyncResolved || {} : comp);
          const { include, exclude, max: max2 } = props;
          if (include && (!name || !matches(include, name)) || exclude && name && matches(exclude, name)) {
            current = vnode;
            return rawVNode;
          }
          const key = vnode.key == null ? comp : vnode.key;
          const cachedVNode = cache2.get(key);
          if (vnode.el) {
            vnode = cloneVNode(vnode);
            if (rawVNode.shapeFlag & 128) {
              rawVNode.ssContent = vnode;
            }
          }
          pendingCacheKey = key;
          if (cachedVNode) {
            vnode.el = cachedVNode.el;
            vnode.component = cachedVNode.component;
            if (vnode.transition) {
              setTransitionHooks(vnode, vnode.transition);
            }
            vnode.shapeFlag |= 512;
            keys2.delete(key);
            keys2.add(key);
          } else {
            keys2.add(key);
            if (max2 && keys2.size > parseInt(max2, 10)) {
              pruneCacheEntry(keys2.values().next().value);
            }
          }
          vnode.shapeFlag |= 256;
          current = vnode;
          return isSuspense(rawVNode.type) ? rawVNode : vnode;
        };
      }
    };
    const KeepAlive = KeepAliveImpl;
    function matches(pattern2, name) {
      if (isArray$6(pattern2)) {
        return pattern2.some((p2) => matches(p2, name));
      } else if (isString$3(pattern2)) {
        return pattern2.split(",").includes(name);
      } else if (pattern2.test) {
        return pattern2.test(name);
      }
      return false;
    }
    function onActivated(hook2, target) {
      registerKeepAliveHook(hook2, "a", target);
    }
    function onDeactivated(hook2, target) {
      registerKeepAliveHook(hook2, "da", target);
    }
    function registerKeepAliveHook(hook2, type2, target = currentInstance) {
      const wrappedHook = hook2.__wdc || (hook2.__wdc = () => {
        let current = target;
        while (current) {
          if (current.isDeactivated) {
            return;
          }
          current = current.parent;
        }
        return hook2();
      });
      injectHook(type2, wrappedHook, target);
      if (target) {
        let current = target.parent;
        while (current && current.parent) {
          if (isKeepAlive(current.parent.vnode)) {
            injectToKeepAliveRoot(wrappedHook, type2, target, current);
          }
          current = current.parent;
        }
      }
    }
    function injectToKeepAliveRoot(hook2, type2, target, keepAliveRoot) {
      const injected = injectHook(type2, hook2, keepAliveRoot, true);
      onUnmounted(() => {
        remove$1(keepAliveRoot[type2], injected);
      }, target);
    }
    function resetShapeFlag(vnode) {
      let shapeFlag = vnode.shapeFlag;
      if (shapeFlag & 256) {
        shapeFlag -= 256;
      }
      if (shapeFlag & 512) {
        shapeFlag -= 512;
      }
      vnode.shapeFlag = shapeFlag;
    }
    function getInnerChild(vnode) {
      return vnode.shapeFlag & 128 ? vnode.ssContent : vnode;
    }
    function injectHook(type2, hook2, target = currentInstance, prepend = false) {
      if (target) {
        const hooks = target[type2] || (target[type2] = []);
        const wrappedHook = hook2.__weh || (hook2.__weh = (...args) => {
          if (target.isUnmounted) {
            return;
          }
          pauseTracking();
          setCurrentInstance(target);
          const res = callWithAsyncErrorHandling(hook2, target, type2, args);
          unsetCurrentInstance();
          resetTracking();
          return res;
        });
        if (prepend) {
          hooks.unshift(wrappedHook);
        } else {
          hooks.push(wrappedHook);
        }
        return wrappedHook;
      }
    }
    const createHook = (lifecycle) => (hook2, target = currentInstance) => (!isInSSRComponentSetup || lifecycle === "sp") && injectHook(lifecycle, hook2, target);
    const onBeforeMount = createHook("bm");
    const onMounted = createHook("m");
    const onBeforeUpdate = createHook("bu");
    const onUpdated = createHook("u");
    const onBeforeUnmount = createHook("bum");
    const onUnmounted = createHook("um");
    const onServerPrefetch = createHook("sp");
    const onRenderTriggered = createHook("rtg");
    const onRenderTracked = createHook("rtc");
    function onErrorCaptured(hook2, target = currentInstance) {
      injectHook("ec", hook2, target);
    }
    function withDirectives(vnode, directives) {
      const internalInstance = currentRenderingInstance;
      if (internalInstance === null) {
        return vnode;
      }
      const instance = getExposeProxy(internalInstance) || internalInstance.proxy;
      const bindings = vnode.dirs || (vnode.dirs = []);
      for (let i2 = 0; i2 < directives.length; i2++) {
        let [dir, value, arg, modifiers = EMPTY_OBJ] = directives[i2];
        if (isFunction$4(dir)) {
          dir = {
            mounted: dir,
            updated: dir
          };
        }
        if (dir.deep) {
          traverse(value);
        }
        bindings.push({
          dir,
          instance,
          value,
          oldValue: void 0,
          arg,
          modifiers
        });
      }
      return vnode;
    }
    function invokeDirectiveHook(vnode, prevVNode, instance, name) {
      const bindings = vnode.dirs;
      const oldBindings = prevVNode && prevVNode.dirs;
      for (let i2 = 0; i2 < bindings.length; i2++) {
        const binding2 = bindings[i2];
        if (oldBindings) {
          binding2.oldValue = oldBindings[i2].value;
        }
        let hook2 = binding2.dir[name];
        if (hook2) {
          pauseTracking();
          callWithAsyncErrorHandling(hook2, instance, 8, [
            vnode.el,
            binding2,
            vnode,
            prevVNode
          ]);
          resetTracking();
        }
      }
    }
    const COMPONENTS = "components";
    const DIRECTIVES = "directives";
    function resolveComponent(name, maybeSelfReference) {
      return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;
    }
    const NULL_DYNAMIC_COMPONENT = Symbol();
    function resolveDynamicComponent(component2) {
      if (isString$3(component2)) {
        return resolveAsset(COMPONENTS, component2, false) || component2;
      } else {
        return component2 || NULL_DYNAMIC_COMPONENT;
      }
    }
    function resolveDirective(name) {
      return resolveAsset(DIRECTIVES, name);
    }
    function resolveAsset(type2, name, warnMissing = true, maybeSelfReference = false) {
      const instance = currentRenderingInstance || currentInstance;
      if (instance) {
        const Component = instance.type;
        if (type2 === COMPONENTS) {
          const selfName = getComponentName(Component, false);
          if (selfName && (selfName === name || selfName === camelize(name) || selfName === capitalize(camelize(name)))) {
            return Component;
          }
        }
        const res = resolve(instance[type2] || Component[type2], name) || resolve(instance.appContext[type2], name);
        if (!res && maybeSelfReference) {
          return Component;
        }
        return res;
      }
    }
    function resolve(registry, name) {
      return registry && (registry[name] || registry[camelize(name)] || registry[capitalize(camelize(name))]);
    }
    function renderList(source, renderItem, cache2, index2) {
      let ret;
      const cached = cache2 && cache2[index2];
      if (isArray$6(source) || isString$3(source)) {
        ret = new Array(source.length);
        for (let i2 = 0, l2 = source.length; i2 < l2; i2++) {
          ret[i2] = renderItem(source[i2], i2, void 0, cached && cached[i2]);
        }
      } else if (typeof source === "number") {
        ret = new Array(source);
        for (let i2 = 0; i2 < source; i2++) {
          ret[i2] = renderItem(i2 + 1, i2, void 0, cached && cached[i2]);
        }
      } else if (isObject$7(source)) {
        if (source[Symbol.iterator]) {
          ret = Array.from(source, (item, i2) => renderItem(item, i2, void 0, cached && cached[i2]));
        } else {
          const keys2 = Object.keys(source);
          ret = new Array(keys2.length);
          for (let i2 = 0, l2 = keys2.length; i2 < l2; i2++) {
            const key = keys2[i2];
            ret[i2] = renderItem(source[key], key, i2, cached && cached[i2]);
          }
        }
      } else {
        ret = [];
      }
      if (cache2) {
        cache2[index2] = ret;
      }
      return ret;
    }
    function createSlots(slots, dynamicSlots) {
      for (let i2 = 0; i2 < dynamicSlots.length; i2++) {
        const slot = dynamicSlots[i2];
        if (isArray$6(slot)) {
          for (let j2 = 0; j2 < slot.length; j2++) {
            slots[slot[j2].name] = slot[j2].fn;
          }
        } else if (slot) {
          slots[slot.name] = slot.fn;
        }
      }
      return slots;
    }
    function renderSlot(slots, name, props = {}, fallback, noSlotted) {
      if (currentRenderingInstance.isCE || currentRenderingInstance.parent && isAsyncWrapper(currentRenderingInstance.parent) && currentRenderingInstance.parent.isCE) {
        return createVNode("slot", name === "default" ? null : { name }, fallback && fallback());
      }
      let slot = slots[name];
      if (slot && slot._c) {
        slot._d = false;
      }
      openBlock();
      const validSlotContent = slot && ensureValidVNode(slot(props));
      const rendered = createBlock(Fragment, { key: props.key || `_${name}` }, validSlotContent || (fallback ? fallback() : []), validSlotContent && slots._ === 1 ? 64 : -2);
      if (!noSlotted && rendered.scopeId) {
        rendered.slotScopeIds = [rendered.scopeId + "-s"];
      }
      if (slot && slot._c) {
        slot._d = true;
      }
      return rendered;
    }
    function ensureValidVNode(vnodes) {
      return vnodes.some((child) => {
        if (!isVNode(child))
          return true;
        if (child.type === Comment)
          return false;
        if (child.type === Fragment && !ensureValidVNode(child.children))
          return false;
        return true;
      }) ? vnodes : null;
    }
    function toHandlers(obj) {
      const ret = {};
      for (const key in obj) {
        ret[toHandlerKey(key)] = obj[key];
      }
      return ret;
    }
    const getPublicInstance = (i2) => {
      if (!i2)
        return null;
      if (isStatefulComponent(i2))
        return getExposeProxy(i2) || i2.proxy;
      return getPublicInstance(i2.parent);
    };
    const publicPropertiesMap = /* @__PURE__ */ extend$1(/* @__PURE__ */ Object.create(null), {
      $: (i2) => i2,
      $el: (i2) => i2.vnode.el,
      $data: (i2) => i2.data,
      $props: (i2) => i2.props,
      $attrs: (i2) => i2.attrs,
      $slots: (i2) => i2.slots,
      $refs: (i2) => i2.refs,
      $parent: (i2) => getPublicInstance(i2.parent),
      $root: (i2) => getPublicInstance(i2.root),
      $emit: (i2) => i2.emit,
      $options: (i2) => resolveMergedOptions(i2),
      $forceUpdate: (i2) => i2.f || (i2.f = () => queueJob(i2.update)),
      $nextTick: (i2) => i2.n || (i2.n = nextTick$1.bind(i2.proxy)),
      $watch: (i2) => instanceWatch.bind(i2)
    });
    const PublicInstanceProxyHandlers = {
      get({ _: instance }, key) {
        const { ctx, setupState, data, props, accessCache, type: type2, appContext } = instance;
        let normalizedProps;
        if (key[0] !== "$") {
          const n2 = accessCache[key];
          if (n2 !== void 0) {
            switch (n2) {
              case 1:
                return setupState[key];
              case 2:
                return data[key];
              case 4:
                return ctx[key];
              case 3:
                return props[key];
            }
          } else if (setupState !== EMPTY_OBJ && hasOwn$2(setupState, key)) {
            accessCache[key] = 1;
            return setupState[key];
          } else if (data !== EMPTY_OBJ && hasOwn$2(data, key)) {
            accessCache[key] = 2;
            return data[key];
          } else if ((normalizedProps = instance.propsOptions[0]) && hasOwn$2(normalizedProps, key)) {
            accessCache[key] = 3;
            return props[key];
          } else if (ctx !== EMPTY_OBJ && hasOwn$2(ctx, key)) {
            accessCache[key] = 4;
            return ctx[key];
          } else if (shouldCacheAccess) {
            accessCache[key] = 0;
          }
        }
        const publicGetter = publicPropertiesMap[key];
        let cssModule, globalProperties;
        if (publicGetter) {
          if (key === "$attrs") {
            track(instance, "get", key);
          }
          return publicGetter(instance);
        } else if ((cssModule = type2.__cssModules) && (cssModule = cssModule[key])) {
          return cssModule;
        } else if (ctx !== EMPTY_OBJ && hasOwn$2(ctx, key)) {
          accessCache[key] = 4;
          return ctx[key];
        } else if (globalProperties = appContext.config.globalProperties, hasOwn$2(globalProperties, key)) {
          {
            return globalProperties[key];
          }
        } else
          ;
      },
      set({ _: instance }, key, value) {
        const { data, setupState, ctx } = instance;
        if (setupState !== EMPTY_OBJ && hasOwn$2(setupState, key)) {
          setupState[key] = value;
          return true;
        } else if (data !== EMPTY_OBJ && hasOwn$2(data, key)) {
          data[key] = value;
          return true;
        } else if (hasOwn$2(instance.props, key)) {
          return false;
        }
        if (key[0] === "$" && key.slice(1) in instance) {
          return false;
        } else {
          {
            ctx[key] = value;
          }
        }
        return true;
      },
      has({ _: { data, setupState, accessCache, ctx, appContext, propsOptions } }, key) {
        let normalizedProps;
        return !!accessCache[key] || data !== EMPTY_OBJ && hasOwn$2(data, key) || setupState !== EMPTY_OBJ && hasOwn$2(setupState, key) || (normalizedProps = propsOptions[0]) && hasOwn$2(normalizedProps, key) || hasOwn$2(ctx, key) || hasOwn$2(publicPropertiesMap, key) || hasOwn$2(appContext.config.globalProperties, key);
      },
      defineProperty(target, key, descriptor) {
        if (descriptor.get != null) {
          target._.accessCache[key] = 0;
        } else if (hasOwn$2(descriptor, "value")) {
          this.set(target, key, descriptor.value, null);
        }
        return Reflect.defineProperty(target, key, descriptor);
      }
    };
    const RuntimeCompiledPublicInstanceProxyHandlers = /* @__PURE__ */ extend$1({}, PublicInstanceProxyHandlers, {
      get(target, key) {
        if (key === Symbol.unscopables) {
          return;
        }
        return PublicInstanceProxyHandlers.get(target, key, target);
      },
      has(_2, key) {
        const has2 = key[0] !== "_" && !isGloballyWhitelisted(key);
        return has2;
      }
    });
    let shouldCacheAccess = true;
    function applyOptions(instance) {
      const options = resolveMergedOptions(instance);
      const publicThis = instance.proxy;
      const ctx = instance.ctx;
      shouldCacheAccess = false;
      if (options.beforeCreate) {
        callHook$1(options.beforeCreate, instance, "bc");
      }
      const {
        data: dataOptions,
        computed: computedOptions,
        methods,
        watch: watchOptions,
        provide: provideOptions,
        inject: injectOptions,
        created,
        beforeMount,
        mounted,
        beforeUpdate,
        updated,
        activated,
        deactivated,
        beforeDestroy,
        beforeUnmount,
        destroyed,
        unmounted,
        render: render2,
        renderTracked,
        renderTriggered,
        errorCaptured,
        serverPrefetch,
        expose,
        inheritAttrs,
        components,
        directives,
        filters
      } = options;
      const checkDuplicateProperties = null;
      if (injectOptions) {
        resolveInjections(injectOptions, ctx, checkDuplicateProperties, instance.appContext.config.unwrapInjectedRef);
      }
      if (methods) {
        for (const key in methods) {
          const methodHandler = methods[key];
          if (isFunction$4(methodHandler)) {
            {
              ctx[key] = methodHandler.bind(publicThis);
            }
          }
        }
      }
      if (dataOptions) {
        const data = dataOptions.call(publicThis, publicThis);
        if (!isObject$7(data))
          ;
        else {
          instance.data = reactive(data);
        }
      }
      shouldCacheAccess = true;
      if (computedOptions) {
        for (const key in computedOptions) {
          const opt = computedOptions[key];
          const get2 = isFunction$4(opt) ? opt.bind(publicThis, publicThis) : isFunction$4(opt.get) ? opt.get.bind(publicThis, publicThis) : NOOP;
          const set2 = !isFunction$4(opt) && isFunction$4(opt.set) ? opt.set.bind(publicThis) : NOOP;
          const c2 = computed({
            get: get2,
            set: set2
          });
          Object.defineProperty(ctx, key, {
            enumerable: true,
            configurable: true,
            get: () => c2.value,
            set: (v2) => c2.value = v2
          });
        }
      }
      if (watchOptions) {
        for (const key in watchOptions) {
          createWatcher(watchOptions[key], ctx, publicThis, key);
        }
      }
      if (provideOptions) {
        const provides = isFunction$4(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
        Reflect.ownKeys(provides).forEach((key) => {
          provide(key, provides[key]);
        });
      }
      if (created) {
        callHook$1(created, instance, "c");
      }
      function registerLifecycleHook(register2, hook2) {
        if (isArray$6(hook2)) {
          hook2.forEach((_hook) => register2(_hook.bind(publicThis)));
        } else if (hook2) {
          register2(hook2.bind(publicThis));
        }
      }
      registerLifecycleHook(onBeforeMount, beforeMount);
      registerLifecycleHook(onMounted, mounted);
      registerLifecycleHook(onBeforeUpdate, beforeUpdate);
      registerLifecycleHook(onUpdated, updated);
      registerLifecycleHook(onActivated, activated);
      registerLifecycleHook(onDeactivated, deactivated);
      registerLifecycleHook(onErrorCaptured, errorCaptured);
      registerLifecycleHook(onRenderTracked, renderTracked);
      registerLifecycleHook(onRenderTriggered, renderTriggered);
      registerLifecycleHook(onBeforeUnmount, beforeUnmount);
      registerLifecycleHook(onUnmounted, unmounted);
      registerLifecycleHook(onServerPrefetch, serverPrefetch);
      if (isArray$6(expose)) {
        if (expose.length) {
          const exposed = instance.exposed || (instance.exposed = {});
          expose.forEach((key) => {
            Object.defineProperty(exposed, key, {
              get: () => publicThis[key],
              set: (val) => publicThis[key] = val
            });
          });
        } else if (!instance.exposed) {
          instance.exposed = {};
        }
      }
      if (render2 && instance.render === NOOP) {
        instance.render = render2;
      }
      if (inheritAttrs != null) {
        instance.inheritAttrs = inheritAttrs;
      }
      if (components)
        instance.components = components;
      if (directives)
        instance.directives = directives;
    }
    function resolveInjections(injectOptions, ctx, checkDuplicateProperties = NOOP, unwrapRef = false) {
      if (isArray$6(injectOptions)) {
        injectOptions = normalizeInject(injectOptions);
      }
      for (const key in injectOptions) {
        const opt = injectOptions[key];
        let injected;
        if (isObject$7(opt)) {
          if ("default" in opt) {
            injected = inject(opt.from || key, opt.default, true);
          } else {
            injected = inject(opt.from || key);
          }
        } else {
          injected = inject(opt);
        }
        if (isRef(injected)) {
          if (unwrapRef) {
            Object.defineProperty(ctx, key, {
              enumerable: true,
              configurable: true,
              get: () => injected.value,
              set: (v2) => injected.value = v2
            });
          } else {
            ctx[key] = injected;
          }
        } else {
          ctx[key] = injected;
        }
      }
    }
    function callHook$1(hook2, instance, type2) {
      callWithAsyncErrorHandling(isArray$6(hook2) ? hook2.map((h2) => h2.bind(instance.proxy)) : hook2.bind(instance.proxy), instance, type2);
    }
    function createWatcher(raw, ctx, publicThis, key) {
      const getter = key.includes(".") ? createPathGetter(publicThis, key) : () => publicThis[key];
      if (isString$3(raw)) {
        const handler = ctx[raw];
        if (isFunction$4(handler)) {
          watch(getter, handler);
        }
      } else if (isFunction$4(raw)) {
        watch(getter, raw.bind(publicThis));
      } else if (isObject$7(raw)) {
        if (isArray$6(raw)) {
          raw.forEach((r) => createWatcher(r, ctx, publicThis, key));
        } else {
          const handler = isFunction$4(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
          if (isFunction$4(handler)) {
            watch(getter, handler, raw);
          }
        }
      } else
        ;
    }
    function resolveMergedOptions(instance) {
      const base2 = instance.type;
      const { mixins, extends: extendsOptions } = base2;
      const { mixins: globalMixins, optionsCache: cache2, config: { optionMergeStrategies } } = instance.appContext;
      const cached = cache2.get(base2);
      let resolved;
      if (cached) {
        resolved = cached;
      } else if (!globalMixins.length && !mixins && !extendsOptions) {
        {
          resolved = base2;
        }
      } else {
        resolved = {};
        if (globalMixins.length) {
          globalMixins.forEach((m2) => mergeOptions$1(resolved, m2, optionMergeStrategies, true));
        }
        mergeOptions$1(resolved, base2, optionMergeStrategies);
      }
      cache2.set(base2, resolved);
      return resolved;
    }
    function mergeOptions$1(to, from2, strats, asMixin = false) {
      const { mixins, extends: extendsOptions } = from2;
      if (extendsOptions) {
        mergeOptions$1(to, extendsOptions, strats, true);
      }
      if (mixins) {
        mixins.forEach((m2) => mergeOptions$1(to, m2, strats, true));
      }
      for (const key in from2) {
        if (asMixin && key === "expose")
          ;
        else {
          const strat = internalOptionMergeStrats[key] || strats && strats[key];
          to[key] = strat ? strat(to[key], from2[key]) : from2[key];
        }
      }
      return to;
    }
    const internalOptionMergeStrats = {
      data: mergeDataFn,
      props: mergeObjectOptions,
      emits: mergeObjectOptions,
      methods: mergeObjectOptions,
      computed: mergeObjectOptions,
      beforeCreate: mergeAsArray,
      created: mergeAsArray,
      beforeMount: mergeAsArray,
      mounted: mergeAsArray,
      beforeUpdate: mergeAsArray,
      updated: mergeAsArray,
      beforeDestroy: mergeAsArray,
      beforeUnmount: mergeAsArray,
      destroyed: mergeAsArray,
      unmounted: mergeAsArray,
      activated: mergeAsArray,
      deactivated: mergeAsArray,
      errorCaptured: mergeAsArray,
      serverPrefetch: mergeAsArray,
      components: mergeObjectOptions,
      directives: mergeObjectOptions,
      watch: mergeWatchOptions,
      provide: mergeDataFn,
      inject: mergeInject
    };
    function mergeDataFn(to, from2) {
      if (!from2) {
        return to;
      }
      if (!to) {
        return from2;
      }
      return function mergedDataFn() {
        return extend$1(isFunction$4(to) ? to.call(this, this) : to, isFunction$4(from2) ? from2.call(this, this) : from2);
      };
    }
    function mergeInject(to, from2) {
      return mergeObjectOptions(normalizeInject(to), normalizeInject(from2));
    }
    function normalizeInject(raw) {
      if (isArray$6(raw)) {
        const res = {};
        for (let i2 = 0; i2 < raw.length; i2++) {
          res[raw[i2]] = raw[i2];
        }
        return res;
      }
      return raw;
    }
    function mergeAsArray(to, from2) {
      return to ? [...new Set([].concat(to, from2))] : from2;
    }
    function mergeObjectOptions(to, from2) {
      return to ? extend$1(extend$1(/* @__PURE__ */ Object.create(null), to), from2) : from2;
    }
    function mergeWatchOptions(to, from2) {
      if (!to)
        return from2;
      if (!from2)
        return to;
      const merged = extend$1(/* @__PURE__ */ Object.create(null), to);
      for (const key in from2) {
        merged[key] = mergeAsArray(to[key], from2[key]);
      }
      return merged;
    }
    function initProps(instance, rawProps, isStateful, isSSR = false) {
      const props = {};
      const attrs = {};
      def(attrs, InternalObjectKey, 1);
      instance.propsDefaults = /* @__PURE__ */ Object.create(null);
      setFullProps(instance, rawProps, props, attrs);
      for (const key in instance.propsOptions[0]) {
        if (!(key in props)) {
          props[key] = void 0;
        }
      }
      if (isStateful) {
        instance.props = isSSR ? props : shallowReactive(props);
      } else {
        if (!instance.type.props) {
          instance.props = attrs;
        } else {
          instance.props = props;
        }
      }
      instance.attrs = attrs;
    }
    function updateProps(instance, rawProps, rawPrevProps, optimized) {
      const { props, attrs, vnode: { patchFlag } } = instance;
      const rawCurrentProps = toRaw(props);
      const [options] = instance.propsOptions;
      let hasAttrsChanged = false;
      if ((optimized || patchFlag > 0) && !(patchFlag & 16)) {
        if (patchFlag & 8) {
          const propsToUpdate = instance.vnode.dynamicProps;
          for (let i2 = 0; i2 < propsToUpdate.length; i2++) {
            let key = propsToUpdate[i2];
            if (isEmitListener(instance.emitsOptions, key)) {
              continue;
            }
            const value = rawProps[key];
            if (options) {
              if (hasOwn$2(attrs, key)) {
                if (value !== attrs[key]) {
                  attrs[key] = value;
                  hasAttrsChanged = true;
                }
              } else {
                const camelizedKey = camelize(key);
                props[camelizedKey] = resolvePropValue(options, rawCurrentProps, camelizedKey, value, instance, false);
              }
            } else {
              if (value !== attrs[key]) {
                attrs[key] = value;
                hasAttrsChanged = true;
              }
            }
          }
        }
      } else {
        if (setFullProps(instance, rawProps, props, attrs)) {
          hasAttrsChanged = true;
        }
        let kebabKey;
        for (const key in rawCurrentProps) {
          if (!rawProps || !hasOwn$2(rawProps, key) && ((kebabKey = hyphenate(key)) === key || !hasOwn$2(rawProps, kebabKey))) {
            if (options) {
              if (rawPrevProps && (rawPrevProps[key] !== void 0 || rawPrevProps[kebabKey] !== void 0)) {
                props[key] = resolvePropValue(options, rawCurrentProps, key, void 0, instance, true);
              }
            } else {
              delete props[key];
            }
          }
        }
        if (attrs !== rawCurrentProps) {
          for (const key in attrs) {
            if (!rawProps || !hasOwn$2(rawProps, key) && true) {
              delete attrs[key];
              hasAttrsChanged = true;
            }
          }
        }
      }
      if (hasAttrsChanged) {
        trigger(instance, "set", "$attrs");
      }
    }
    function setFullProps(instance, rawProps, props, attrs) {
      const [options, needCastKeys] = instance.propsOptions;
      let hasAttrsChanged = false;
      let rawCastValues;
      if (rawProps) {
        for (let key in rawProps) {
          if (isReservedProp(key)) {
            continue;
          }
          const value = rawProps[key];
          let camelKey;
          if (options && hasOwn$2(options, camelKey = camelize(key))) {
            if (!needCastKeys || !needCastKeys.includes(camelKey)) {
              props[camelKey] = value;
            } else {
              (rawCastValues || (rawCastValues = {}))[camelKey] = value;
            }
          } else if (!isEmitListener(instance.emitsOptions, key)) {
            if (!(key in attrs) || value !== attrs[key]) {
              attrs[key] = value;
              hasAttrsChanged = true;
            }
          }
        }
      }
      if (needCastKeys) {
        const rawCurrentProps = toRaw(props);
        const castValues = rawCastValues || EMPTY_OBJ;
        for (let i2 = 0; i2 < needCastKeys.length; i2++) {
          const key = needCastKeys[i2];
          props[key] = resolvePropValue(options, rawCurrentProps, key, castValues[key], instance, !hasOwn$2(castValues, key));
        }
      }
      return hasAttrsChanged;
    }
    function resolvePropValue(options, props, key, value, instance, isAbsent2) {
      const opt = options[key];
      if (opt != null) {
        const hasDefault = hasOwn$2(opt, "default");
        if (hasDefault && value === void 0) {
          const defaultValue = opt.default;
          if (opt.type !== Function && isFunction$4(defaultValue)) {
            const { propsDefaults } = instance;
            if (key in propsDefaults) {
              value = propsDefaults[key];
            } else {
              setCurrentInstance(instance);
              value = propsDefaults[key] = defaultValue.call(null, props);
              unsetCurrentInstance();
            }
          } else {
            value = defaultValue;
          }
        }
        if (opt[0]) {
          if (isAbsent2 && !hasDefault) {
            value = false;
          } else if (opt[1] && (value === "" || value === hyphenate(key))) {
            value = true;
          }
        }
      }
      return value;
    }
    function normalizePropsOptions(comp, appContext, asMixin = false) {
      const cache2 = appContext.propsCache;
      const cached = cache2.get(comp);
      if (cached) {
        return cached;
      }
      const raw = comp.props;
      const normalized = {};
      const needCastKeys = [];
      let hasExtends = false;
      if (!isFunction$4(comp)) {
        const extendProps = (raw2) => {
          hasExtends = true;
          const [props, keys2] = normalizePropsOptions(raw2, appContext, true);
          extend$1(normalized, props);
          if (keys2)
            needCastKeys.push(...keys2);
        };
        if (!asMixin && appContext.mixins.length) {
          appContext.mixins.forEach(extendProps);
        }
        if (comp.extends) {
          extendProps(comp.extends);
        }
        if (comp.mixins) {
          comp.mixins.forEach(extendProps);
        }
      }
      if (!raw && !hasExtends) {
        cache2.set(comp, EMPTY_ARR);
        return EMPTY_ARR;
      }
      if (isArray$6(raw)) {
        for (let i2 = 0; i2 < raw.length; i2++) {
          const normalizedKey = camelize(raw[i2]);
          if (validatePropName(normalizedKey)) {
            normalized[normalizedKey] = EMPTY_OBJ;
          }
        }
      } else if (raw) {
        for (const key in raw) {
          const normalizedKey = camelize(key);
          if (validatePropName(normalizedKey)) {
            const opt = raw[key];
            const prop = normalized[normalizedKey] = isArray$6(opt) || isFunction$4(opt) ? { type: opt } : opt;
            if (prop) {
              const booleanIndex = getTypeIndex(Boolean, prop.type);
              const stringIndex = getTypeIndex(String, prop.type);
              prop[0] = booleanIndex > -1;
              prop[1] = stringIndex < 0 || booleanIndex < stringIndex;
              if (booleanIndex > -1 || hasOwn$2(prop, "default")) {
                needCastKeys.push(normalizedKey);
              }
            }
          }
        }
      }
      const res = [normalized, needCastKeys];
      cache2.set(comp, res);
      return res;
    }
    function validatePropName(key) {
      if (key[0] !== "$") {
        return true;
      }
      return false;
    }
    function getType(ctor) {
      const match = ctor && ctor.toString().match(/^\s*function (\w+)/);
      return match ? match[1] : ctor === null ? "null" : "";
    }
    function isSameType(a2, b2) {
      return getType(a2) === getType(b2);
    }
    function getTypeIndex(type2, expectedTypes) {
      if (isArray$6(expectedTypes)) {
        return expectedTypes.findIndex((t) => isSameType(t, type2));
      } else if (isFunction$4(expectedTypes)) {
        return isSameType(expectedTypes, type2) ? 0 : -1;
      }
      return -1;
    }
    const isInternalKey = (key) => key[0] === "_" || key === "$stable";
    const normalizeSlotValue = (value) => isArray$6(value) ? value.map(normalizeVNode) : [normalizeVNode(value)];
    const normalizeSlot = (key, rawSlot, ctx) => {
      if (rawSlot._n) {
        return rawSlot;
      }
      const normalized = withCtx((...args) => {
        return normalizeSlotValue(rawSlot(...args));
      }, ctx);
      normalized._c = false;
      return normalized;
    };
    const normalizeObjectSlots = (rawSlots, slots, instance) => {
      const ctx = rawSlots._ctx;
      for (const key in rawSlots) {
        if (isInternalKey(key))
          continue;
        const value = rawSlots[key];
        if (isFunction$4(value)) {
          slots[key] = normalizeSlot(key, value, ctx);
        } else if (value != null) {
          const normalized = normalizeSlotValue(value);
          slots[key] = () => normalized;
        }
      }
    };
    const normalizeVNodeSlots = (instance, children) => {
      const normalized = normalizeSlotValue(children);
      instance.slots.default = () => normalized;
    };
    const initSlots = (instance, children) => {
      if (instance.vnode.shapeFlag & 32) {
        const type2 = children._;
        if (type2) {
          instance.slots = toRaw(children);
          def(children, "_", type2);
        } else {
          normalizeObjectSlots(children, instance.slots = {});
        }
      } else {
        instance.slots = {};
        if (children) {
          normalizeVNodeSlots(instance, children);
        }
      }
      def(instance.slots, InternalObjectKey, 1);
    };
    const updateSlots = (instance, children, optimized) => {
      const { vnode, slots } = instance;
      let needDeletionCheck = true;
      let deletionComparisonTarget = EMPTY_OBJ;
      if (vnode.shapeFlag & 32) {
        const type2 = children._;
        if (type2) {
          if (optimized && type2 === 1) {
            needDeletionCheck = false;
          } else {
            extend$1(slots, children);
            if (!optimized && type2 === 1) {
              delete slots._;
            }
          }
        } else {
          needDeletionCheck = !children.$stable;
          normalizeObjectSlots(children, slots);
        }
        deletionComparisonTarget = children;
      } else if (children) {
        normalizeVNodeSlots(instance, children);
        deletionComparisonTarget = { default: 1 };
      }
      if (needDeletionCheck) {
        for (const key in slots) {
          if (!isInternalKey(key) && !(key in deletionComparisonTarget)) {
            delete slots[key];
          }
        }
      }
    };
    function createAppContext() {
      return {
        app: null,
        config: {
          isNativeTag: NO,
          performance: false,
          globalProperties: {},
          optionMergeStrategies: {},
          errorHandler: void 0,
          warnHandler: void 0,
          compilerOptions: {}
        },
        mixins: [],
        components: {},
        directives: {},
        provides: /* @__PURE__ */ Object.create(null),
        optionsCache: /* @__PURE__ */ new WeakMap(),
        propsCache: /* @__PURE__ */ new WeakMap(),
        emitsCache: /* @__PURE__ */ new WeakMap()
      };
    }
    let uid$1 = 0;
    function createAppAPI(render2, hydrate2) {
      return function createApp2(rootComponent, rootProps = null) {
        if (!isFunction$4(rootComponent)) {
          rootComponent = Object.assign({}, rootComponent);
        }
        if (rootProps != null && !isObject$7(rootProps)) {
          rootProps = null;
        }
        const context = createAppContext();
        const installedPlugins = /* @__PURE__ */ new Set();
        let isMounted = false;
        const app2 = context.app = {
          _uid: uid$1++,
          _component: rootComponent,
          _props: rootProps,
          _container: null,
          _context: context,
          _instance: null,
          version: version$3,
          get config() {
            return context.config;
          },
          set config(v2) {
          },
          use(plugin, ...options) {
            if (installedPlugins.has(plugin))
              ;
            else if (plugin && isFunction$4(plugin.install)) {
              installedPlugins.add(plugin);
              plugin.install(app2, ...options);
            } else if (isFunction$4(plugin)) {
              installedPlugins.add(plugin);
              plugin(app2, ...options);
            } else
              ;
            return app2;
          },
          mixin(mixin) {
            {
              if (!context.mixins.includes(mixin)) {
                context.mixins.push(mixin);
              }
            }
            return app2;
          },
          component(name, component2) {
            if (!component2) {
              return context.components[name];
            }
            context.components[name] = component2;
            return app2;
          },
          directive(name, directive) {
            if (!directive) {
              return context.directives[name];
            }
            context.directives[name] = directive;
            return app2;
          },
          mount(rootContainer, isHydrate, isSVG) {
            if (!isMounted) {
              const vnode = createVNode(rootComponent, rootProps);
              vnode.appContext = context;
              if (isHydrate && hydrate2) {
                hydrate2(vnode, rootContainer);
              } else {
                render2(vnode, rootContainer, isSVG);
              }
              isMounted = true;
              app2._container = rootContainer;
              rootContainer.__vue_app__ = app2;
              return getExposeProxy(vnode.component) || vnode.component.proxy;
            }
          },
          unmount() {
            if (isMounted) {
              render2(null, app2._container);
              delete app2._container.__vue_app__;
            }
          },
          provide(key, value) {
            context.provides[key] = value;
            return app2;
          }
        };
        return app2;
      };
    }
    function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
      if (isArray$6(rawRef)) {
        rawRef.forEach((r, i2) => setRef(r, oldRawRef && (isArray$6(oldRawRef) ? oldRawRef[i2] : oldRawRef), parentSuspense, vnode, isUnmount));
        return;
      }
      if (isAsyncWrapper(vnode) && !isUnmount) {
        return;
      }
      const refValue = vnode.shapeFlag & 4 ? getExposeProxy(vnode.component) || vnode.component.proxy : vnode.el;
      const value = isUnmount ? null : refValue;
      const { i: owner, r: ref2 } = rawRef;
      const oldRef = oldRawRef && oldRawRef.r;
      const refs = owner.refs === EMPTY_OBJ ? owner.refs = {} : owner.refs;
      const setupState = owner.setupState;
      if (oldRef != null && oldRef !== ref2) {
        if (isString$3(oldRef)) {
          refs[oldRef] = null;
          if (hasOwn$2(setupState, oldRef)) {
            setupState[oldRef] = null;
          }
        } else if (isRef(oldRef)) {
          oldRef.value = null;
        }
      }
      if (isFunction$4(ref2)) {
        callWithErrorHandling(ref2, owner, 12, [value, refs]);
      } else {
        const _isString = isString$3(ref2);
        const _isRef = isRef(ref2);
        if (_isString || _isRef) {
          const doSet = () => {
            if (rawRef.f) {
              const existing = _isString ? refs[ref2] : ref2.value;
              if (isUnmount) {
                isArray$6(existing) && remove$1(existing, refValue);
              } else {
                if (!isArray$6(existing)) {
                  if (_isString) {
                    refs[ref2] = [refValue];
                    if (hasOwn$2(setupState, ref2)) {
                      setupState[ref2] = refs[ref2];
                    }
                  } else {
                    ref2.value = [refValue];
                    if (rawRef.k)
                      refs[rawRef.k] = ref2.value;
                  }
                } else if (!existing.includes(refValue)) {
                  existing.push(refValue);
                }
              }
            } else if (_isString) {
              refs[ref2] = value;
              if (hasOwn$2(setupState, ref2)) {
                setupState[ref2] = value;
              }
            } else if (_isRef) {
              ref2.value = value;
              if (rawRef.k)
                refs[rawRef.k] = value;
            } else
              ;
          };
          if (value) {
            doSet.id = -1;
            queuePostRenderEffect(doSet, parentSuspense);
          } else {
            doSet();
          }
        }
      }
    }
    let hasMismatch = false;
    const isSVGContainer = (container) => /svg/.test(container.namespaceURI) && container.tagName !== "foreignObject";
    const isComment$1 = (node) => node.nodeType === 8;
    function createHydrationFunctions(rendererInternals) {
      const { mt: mountComponent, p: patch, o: { patchProp: patchProp2, createText, nextSibling, parentNode, remove: remove2, insert, createComment } } = rendererInternals;
      const hydrate2 = (vnode, container) => {
        if (!container.hasChildNodes()) {
          patch(null, vnode, container);
          flushPostFlushCbs();
          container._vnode = vnode;
          return;
        }
        hasMismatch = false;
        hydrateNode(container.firstChild, vnode, null, null, null);
        flushPostFlushCbs();
        container._vnode = vnode;
        if (hasMismatch && true) {
          console.error(`Hydration completed but contains mismatches.`);
        }
      };
      const hydrateNode = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized = false) => {
        const isFragmentStart = isComment$1(node) && node.data === "[";
        const onMismatch = () => handleMismatch(node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragmentStart);
        const { type: type2, ref: ref2, shapeFlag, patchFlag } = vnode;
        const domType = node.nodeType;
        vnode.el = node;
        if (patchFlag === -2) {
          optimized = false;
          vnode.dynamicChildren = null;
        }
        let nextNode = null;
        switch (type2) {
          case Text:
            if (domType !== 3) {
              if (vnode.children === "") {
                insert(vnode.el = createText(""), parentNode(node), node);
                nextNode = node;
              } else {
                nextNode = onMismatch();
              }
            } else {
              if (node.data !== vnode.children) {
                hasMismatch = true;
                node.data = vnode.children;
              }
              nextNode = nextSibling(node);
            }
            break;
          case Comment:
            if (domType !== 8 || isFragmentStart) {
              nextNode = onMismatch();
            } else {
              nextNode = nextSibling(node);
            }
            break;
          case Static:
            if (domType !== 1 && domType !== 3) {
              nextNode = onMismatch();
            } else {
              nextNode = node;
              const needToAdoptContent = !vnode.children.length;
              for (let i2 = 0; i2 < vnode.staticCount; i2++) {
                if (needToAdoptContent)
                  vnode.children += nextNode.nodeType === 1 ? nextNode.outerHTML : nextNode.data;
                if (i2 === vnode.staticCount - 1) {
                  vnode.anchor = nextNode;
                }
                nextNode = nextSibling(nextNode);
              }
              return nextNode;
            }
            break;
          case Fragment:
            if (!isFragmentStart) {
              nextNode = onMismatch();
            } else {
              nextNode = hydrateFragment(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
            }
            break;
          default:
            if (shapeFlag & 1) {
              if (domType !== 1 || vnode.type.toLowerCase() !== node.tagName.toLowerCase()) {
                nextNode = onMismatch();
              } else {
                nextNode = hydrateElement(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
              }
            } else if (shapeFlag & 6) {
              vnode.slotScopeIds = slotScopeIds;
              const container = parentNode(node);
              mountComponent(vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), optimized);
              nextNode = isFragmentStart ? locateClosingAsyncAnchor(node) : nextSibling(node);
              if (nextNode && isComment$1(nextNode) && nextNode.data === "teleport end") {
                nextNode = nextSibling(nextNode);
              }
              if (isAsyncWrapper(vnode)) {
                let subTree;
                if (isFragmentStart) {
                  subTree = createVNode(Fragment);
                  subTree.anchor = nextNode ? nextNode.previousSibling : container.lastChild;
                } else {
                  subTree = node.nodeType === 3 ? createTextVNode("") : createVNode("div");
                }
                subTree.el = node;
                vnode.component.subTree = subTree;
              }
            } else if (shapeFlag & 64) {
              if (domType !== 8) {
                nextNode = onMismatch();
              } else {
                nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, rendererInternals, hydrateChildren);
              }
            } else if (shapeFlag & 128) {
              nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, isSVGContainer(parentNode(node)), slotScopeIds, optimized, rendererInternals, hydrateNode);
            } else
              ;
        }
        if (ref2 != null) {
          setRef(ref2, null, parentSuspense, vnode);
        }
        return nextNode;
      };
      const hydrateElement = (el, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {
        optimized = optimized || !!vnode.dynamicChildren;
        const { type: type2, props, patchFlag, shapeFlag, dirs } = vnode;
        const forcePatchValue = type2 === "input" && dirs || type2 === "option";
        if (forcePatchValue || patchFlag !== -1) {
          if (dirs) {
            invokeDirectiveHook(vnode, null, parentComponent, "created");
          }
          if (props) {
            if (forcePatchValue || !optimized || patchFlag & (16 | 32)) {
              for (const key in props) {
                if (forcePatchValue && key.endsWith("value") || isOn(key) && !isReservedProp(key)) {
                  patchProp2(el, key, null, props[key], false, void 0, parentComponent);
                }
              }
            } else if (props.onClick) {
              patchProp2(el, "onClick", null, props.onClick, false, void 0, parentComponent);
            }
          }
          let vnodeHooks;
          if (vnodeHooks = props && props.onVnodeBeforeMount) {
            invokeVNodeHook(vnodeHooks, parentComponent, vnode);
          }
          if (dirs) {
            invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
          }
          if ((vnodeHooks = props && props.onVnodeMounted) || dirs) {
            queueEffectWithSuspense(() => {
              vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);
              dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
            }, parentSuspense);
          }
          if (shapeFlag & 16 && !(props && (props.innerHTML || props.textContent))) {
            let next = hydrateChildren(el.firstChild, vnode, el, parentComponent, parentSuspense, slotScopeIds, optimized);
            while (next) {
              hasMismatch = true;
              const cur = next;
              next = next.nextSibling;
              remove2(cur);
            }
          } else if (shapeFlag & 8) {
            if (el.textContent !== vnode.children) {
              hasMismatch = true;
              el.textContent = vnode.children;
            }
          }
        }
        return el.nextSibling;
      };
      const hydrateChildren = (node, parentVNode, container, parentComponent, parentSuspense, slotScopeIds, optimized) => {
        optimized = optimized || !!parentVNode.dynamicChildren;
        const children = parentVNode.children;
        const l2 = children.length;
        for (let i2 = 0; i2 < l2; i2++) {
          const vnode = optimized ? children[i2] : children[i2] = normalizeVNode(children[i2]);
          if (node) {
            node = hydrateNode(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
          } else if (vnode.type === Text && !vnode.children) {
            continue;
          } else {
            hasMismatch = true;
            patch(null, vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);
          }
        }
        return node;
      };
      const hydrateFragment = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {
        const { slotScopeIds: fragmentSlotScopeIds } = vnode;
        if (fragmentSlotScopeIds) {
          slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
        }
        const container = parentNode(node);
        const next = hydrateChildren(nextSibling(node), vnode, container, parentComponent, parentSuspense, slotScopeIds, optimized);
        if (next && isComment$1(next) && next.data === "]") {
          return nextSibling(vnode.anchor = next);
        } else {
          hasMismatch = true;
          insert(vnode.anchor = createComment(`]`), container, next);
          return next;
        }
      };
      const handleMismatch = (node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragment2) => {
        hasMismatch = true;
        vnode.el = null;
        if (isFragment2) {
          const end2 = locateClosingAsyncAnchor(node);
          while (true) {
            const next2 = nextSibling(node);
            if (next2 && next2 !== end2) {
              remove2(next2);
            } else {
              break;
            }
          }
        }
        const next = nextSibling(node);
        const container = parentNode(node);
        remove2(node);
        patch(null, vnode, container, next, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);
        return next;
      };
      const locateClosingAsyncAnchor = (node) => {
        let match = 0;
        while (node) {
          node = nextSibling(node);
          if (node && isComment$1(node)) {
            if (node.data === "[")
              match++;
            if (node.data === "]") {
              if (match === 0) {
                return nextSibling(node);
              } else {
                match--;
              }
            }
          }
        }
        return node;
      };
      return [hydrate2, hydrateNode];
    }
    const queuePostRenderEffect = queueEffectWithSuspense;
    function createRenderer(options) {
      return baseCreateRenderer(options);
    }
    function createHydrationRenderer(options) {
      return baseCreateRenderer(options, createHydrationFunctions);
    }
    function baseCreateRenderer(options, createHydrationFns) {
      const target = getGlobalThis$1();
      target.__VUE__ = true;
      const { insert: hostInsert, remove: hostRemove, patchProp: hostPatchProp, createElement: hostCreateElement, createText: hostCreateText, createComment: hostCreateComment, setText: hostSetText, setElementText: hostSetElementText, parentNode: hostParentNode, nextSibling: hostNextSibling, setScopeId: hostSetScopeId = NOOP, cloneNode: hostCloneNode, insertStaticContent: hostInsertStaticContent } = options;
      const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized = !!n2.dynamicChildren) => {
        if (n1 === n2) {
          return;
        }
        if (n1 && !isSameVNodeType(n1, n2)) {
          anchor = getNextHostNode(n1);
          unmount(n1, parentComponent, parentSuspense, true);
          n1 = null;
        }
        if (n2.patchFlag === -2) {
          optimized = false;
          n2.dynamicChildren = null;
        }
        const { type: type2, ref: ref2, shapeFlag } = n2;
        switch (type2) {
          case Text:
            processText(n1, n2, container, anchor);
            break;
          case Comment:
            processCommentNode(n1, n2, container, anchor);
            break;
          case Static:
            if (n1 == null) {
              mountStaticNode(n2, container, anchor, isSVG);
            }
            break;
          case Fragment:
            processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            break;
          default:
            if (shapeFlag & 1) {
              processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            } else if (shapeFlag & 6) {
              processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            } else if (shapeFlag & 64) {
              type2.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
            } else if (shapeFlag & 128) {
              type2.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
            } else
              ;
        }
        if (ref2 != null && parentComponent) {
          setRef(ref2, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
        }
      };
      const processText = (n1, n2, container, anchor) => {
        if (n1 == null) {
          hostInsert(n2.el = hostCreateText(n2.children), container, anchor);
        } else {
          const el = n2.el = n1.el;
          if (n2.children !== n1.children) {
            hostSetText(el, n2.children);
          }
        }
      };
      const processCommentNode = (n1, n2, container, anchor) => {
        if (n1 == null) {
          hostInsert(n2.el = hostCreateComment(n2.children || ""), container, anchor);
        } else {
          n2.el = n1.el;
        }
      };
      const mountStaticNode = (n2, container, anchor, isSVG) => {
        [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG, n2.el, n2.anchor);
      };
      const moveStaticNode = ({ el, anchor }, container, nextSibling) => {
        let next;
        while (el && el !== anchor) {
          next = hostNextSibling(el);
          hostInsert(el, container, nextSibling);
          el = next;
        }
        hostInsert(anchor, container, nextSibling);
      };
      const removeStaticNode = ({ el, anchor }) => {
        let next;
        while (el && el !== anchor) {
          next = hostNextSibling(el);
          hostRemove(el);
          el = next;
        }
        hostRemove(anchor);
      };
      const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        isSVG = isSVG || n2.type === "svg";
        if (n1 == null) {
          mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else {
          patchElement(n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
      };
      const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        let el;
        let vnodeHook;
        const { type: type2, props, shapeFlag, transition, patchFlag, dirs } = vnode;
        if (vnode.el && hostCloneNode !== void 0 && patchFlag === -1) {
          el = vnode.el = hostCloneNode(vnode.el);
        } else {
          el = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is, props);
          if (shapeFlag & 8) {
            hostSetElementText(el, vnode.children);
          } else if (shapeFlag & 16) {
            mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG && type2 !== "foreignObject", slotScopeIds, optimized);
          }
          if (dirs) {
            invokeDirectiveHook(vnode, null, parentComponent, "created");
          }
          if (props) {
            for (const key in props) {
              if (key !== "value" && !isReservedProp(key)) {
                hostPatchProp(el, key, null, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
              }
            }
            if ("value" in props) {
              hostPatchProp(el, "value", null, props.value);
            }
            if (vnodeHook = props.onVnodeBeforeMount) {
              invokeVNodeHook(vnodeHook, parentComponent, vnode);
            }
          }
          setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);
        }
        if (dirs) {
          invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
        }
        const needCallTransitionHooks = (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
        if (needCallTransitionHooks) {
          transition.beforeEnter(el);
        }
        hostInsert(el, container, anchor);
        if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) {
          queuePostRenderEffect(() => {
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
            needCallTransitionHooks && transition.enter(el);
            dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
          }, parentSuspense);
        }
      };
      const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent) => {
        if (scopeId) {
          hostSetScopeId(el, scopeId);
        }
        if (slotScopeIds) {
          for (let i2 = 0; i2 < slotScopeIds.length; i2++) {
            hostSetScopeId(el, slotScopeIds[i2]);
          }
        }
        if (parentComponent) {
          let subTree = parentComponent.subTree;
          if (vnode === subTree) {
            const parentVNode = parentComponent.vnode;
            setScopeId(el, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);
          }
        }
      };
      const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start = 0) => {
        for (let i2 = start; i2 < children.length; i2++) {
          const child = children[i2] = optimized ? cloneIfMounted(children[i2]) : normalizeVNode(children[i2]);
          patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
      };
      const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        const el = n2.el = n1.el;
        let { patchFlag, dynamicChildren, dirs } = n2;
        patchFlag |= n1.patchFlag & 16;
        const oldProps = n1.props || EMPTY_OBJ;
        const newProps = n2.props || EMPTY_OBJ;
        let vnodeHook;
        parentComponent && toggleRecurse(parentComponent, false);
        if (vnodeHook = newProps.onVnodeBeforeUpdate) {
          invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        }
        if (dirs) {
          invokeDirectiveHook(n2, n1, parentComponent, "beforeUpdate");
        }
        parentComponent && toggleRecurse(parentComponent, true);
        const areChildrenSVG = isSVG && n2.type !== "foreignObject";
        if (dynamicChildren) {
          patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds);
        } else if (!optimized) {
          patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds, false);
        }
        if (patchFlag > 0) {
          if (patchFlag & 16) {
            patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
          } else {
            if (patchFlag & 2) {
              if (oldProps.class !== newProps.class) {
                hostPatchProp(el, "class", null, newProps.class, isSVG);
              }
            }
            if (patchFlag & 4) {
              hostPatchProp(el, "style", oldProps.style, newProps.style, isSVG);
            }
            if (patchFlag & 8) {
              const propsToUpdate = n2.dynamicProps;
              for (let i2 = 0; i2 < propsToUpdate.length; i2++) {
                const key = propsToUpdate[i2];
                const prev = oldProps[key];
                const next = newProps[key];
                if (next !== prev || key === "value") {
                  hostPatchProp(el, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);
                }
              }
            }
          }
          if (patchFlag & 1) {
            if (n1.children !== n2.children) {
              hostSetElementText(el, n2.children);
            }
          }
        } else if (!optimized && dynamicChildren == null) {
          patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
        }
        if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
          queuePostRenderEffect(() => {
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
            dirs && invokeDirectiveHook(n2, n1, parentComponent, "updated");
          }, parentSuspense);
        }
      };
      const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds) => {
        for (let i2 = 0; i2 < newChildren.length; i2++) {
          const oldVNode = oldChildren[i2];
          const newVNode = newChildren[i2];
          const container = oldVNode.el && (oldVNode.type === Fragment || !isSameVNodeType(oldVNode, newVNode) || oldVNode.shapeFlag & (6 | 64)) ? hostParentNode(oldVNode.el) : fallbackContainer;
          patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, true);
        }
      };
      const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {
        if (oldProps !== newProps) {
          for (const key in newProps) {
            if (isReservedProp(key))
              continue;
            const next = newProps[key];
            const prev = oldProps[key];
            if (next !== prev && key !== "value") {
              hostPatchProp(el, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
            }
          }
          if (oldProps !== EMPTY_OBJ) {
            for (const key in oldProps) {
              if (!isReservedProp(key) && !(key in newProps)) {
                hostPatchProp(el, key, oldProps[key], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
              }
            }
          }
          if ("value" in newProps) {
            hostPatchProp(el, "value", oldProps.value, newProps.value);
          }
        }
      };
      const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
        const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
        let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;
        if (fragmentSlotScopeIds) {
          slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
        }
        if (n1 == null) {
          hostInsert(fragmentStartAnchor, container, anchor);
          hostInsert(fragmentEndAnchor, container, anchor);
          mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else {
          if (patchFlag > 0 && patchFlag & 64 && dynamicChildren && n1.dynamicChildren) {
            patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG, slotScopeIds);
            if (n2.key != null || parentComponent && n2 === parentComponent.subTree) {
              traverseStaticChildren(n1, n2, true);
            }
          } else {
            patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          }
        }
      };
      const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        n2.slotScopeIds = slotScopeIds;
        if (n1 == null) {
          if (n2.shapeFlag & 512) {
            parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);
          } else {
            mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
          }
        } else {
          updateComponent(n1, n2, optimized);
        }
      };
      const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
        const instance = initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense);
        if (isKeepAlive(initialVNode)) {
          instance.ctx.renderer = internals;
        }
        {
          setupComponent(instance);
        }
        if (instance.asyncDep) {
          parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);
          if (!initialVNode.el) {
            const placeholder = instance.subTree = createVNode(Comment);
            processCommentNode(null, placeholder, container, anchor);
          }
          return;
        }
        setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);
      };
      const updateComponent = (n1, n2, optimized) => {
        const instance = n2.component = n1.component;
        if (shouldUpdateComponent(n1, n2, optimized)) {
          if (instance.asyncDep && !instance.asyncResolved) {
            updateComponentPreRender(instance, n2, optimized);
            return;
          } else {
            instance.next = n2;
            invalidateJob(instance.update);
            instance.update();
          }
        } else {
          n2.el = n1.el;
          instance.vnode = n2;
        }
      };
      const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {
        const componentUpdateFn = () => {
          if (!instance.isMounted) {
            let vnodeHook;
            const { el, props } = initialVNode;
            const { bm, m: m2, parent } = instance;
            const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
            toggleRecurse(instance, false);
            if (bm) {
              invokeArrayFns(bm);
            }
            if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeBeforeMount)) {
              invokeVNodeHook(vnodeHook, parent, initialVNode);
            }
            toggleRecurse(instance, true);
            if (el && hydrateNode) {
              const hydrateSubTree = () => {
                instance.subTree = renderComponentRoot(instance);
                hydrateNode(el, instance.subTree, instance, parentSuspense, null);
              };
              if (isAsyncWrapperVNode) {
                initialVNode.type.__asyncLoader().then(
                  () => !instance.isUnmounted && hydrateSubTree()
                );
              } else {
                hydrateSubTree();
              }
            } else {
              const subTree = instance.subTree = renderComponentRoot(instance);
              patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);
              initialVNode.el = subTree.el;
            }
            if (m2) {
              queuePostRenderEffect(m2, parentSuspense);
            }
            if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeMounted)) {
              const scopedInitialVNode = initialVNode;
              queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, scopedInitialVNode), parentSuspense);
            }
            if (initialVNode.shapeFlag & 256 || parent && isAsyncWrapper(parent.vnode) && parent.vnode.shapeFlag & 256) {
              instance.a && queuePostRenderEffect(instance.a, parentSuspense);
            }
            instance.isMounted = true;
            initialVNode = container = anchor = null;
          } else {
            let { next, bu, u: u2, parent, vnode } = instance;
            let originNext = next;
            let vnodeHook;
            toggleRecurse(instance, false);
            if (next) {
              next.el = vnode.el;
              updateComponentPreRender(instance, next, optimized);
            } else {
              next = vnode;
            }
            if (bu) {
              invokeArrayFns(bu);
            }
            if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) {
              invokeVNodeHook(vnodeHook, parent, next, vnode);
            }
            toggleRecurse(instance, true);
            const nextTree = renderComponentRoot(instance);
            const prevTree = instance.subTree;
            instance.subTree = nextTree;
            patch(
              prevTree,
              nextTree,
              hostParentNode(prevTree.el),
              getNextHostNode(prevTree),
              instance,
              parentSuspense,
              isSVG
            );
            next.el = nextTree.el;
            if (originNext === null) {
              updateHOCHostEl(instance, nextTree.el);
            }
            if (u2) {
              queuePostRenderEffect(u2, parentSuspense);
            }
            if (vnodeHook = next.props && next.props.onVnodeUpdated) {
              queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, next, vnode), parentSuspense);
            }
          }
        };
        const effect2 = instance.effect = new ReactiveEffect(
          componentUpdateFn,
          () => queueJob(update),
          instance.scope
        );
        const update = instance.update = () => effect2.run();
        update.id = instance.uid;
        toggleRecurse(instance, true);
        update();
      };
      const updateComponentPreRender = (instance, nextVNode, optimized) => {
        nextVNode.component = instance;
        const prevProps = instance.vnode.props;
        instance.vnode = nextVNode;
        instance.next = null;
        updateProps(instance, nextVNode.props, prevProps, optimized);
        updateSlots(instance, nextVNode.children, optimized);
        pauseTracking();
        flushPreFlushCbs(void 0, instance.update);
        resetTracking();
      };
      const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false) => {
        const c1 = n1 && n1.children;
        const prevShapeFlag = n1 ? n1.shapeFlag : 0;
        const c2 = n2.children;
        const { patchFlag, shapeFlag } = n2;
        if (patchFlag > 0) {
          if (patchFlag & 128) {
            patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            return;
          } else if (patchFlag & 256) {
            patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            return;
          }
        }
        if (shapeFlag & 8) {
          if (prevShapeFlag & 16) {
            unmountChildren(c1, parentComponent, parentSuspense);
          }
          if (c2 !== c1) {
            hostSetElementText(container, c2);
          }
        } else {
          if (prevShapeFlag & 16) {
            if (shapeFlag & 16) {
              patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            } else {
              unmountChildren(c1, parentComponent, parentSuspense, true);
            }
          } else {
            if (prevShapeFlag & 8) {
              hostSetElementText(container, "");
            }
            if (shapeFlag & 16) {
              mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            }
          }
        }
      };
      const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        c1 = c1 || EMPTY_ARR;
        c2 = c2 || EMPTY_ARR;
        const oldLength = c1.length;
        const newLength = c2.length;
        const commonLength = Math.min(oldLength, newLength);
        let i2;
        for (i2 = 0; i2 < commonLength; i2++) {
          const nextChild = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
          patch(c1[i2], nextChild, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
        if (oldLength > newLength) {
          unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);
        } else {
          mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, commonLength);
        }
      };
      const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        let i2 = 0;
        const l2 = c2.length;
        let e1 = c1.length - 1;
        let e2 = l2 - 1;
        while (i2 <= e1 && i2 <= e2) {
          const n1 = c1[i2];
          const n2 = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
          if (isSameVNodeType(n1, n2)) {
            patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          } else {
            break;
          }
          i2++;
        }
        while (i2 <= e1 && i2 <= e2) {
          const n1 = c1[e1];
          const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
          if (isSameVNodeType(n1, n2)) {
            patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          } else {
            break;
          }
          e1--;
          e2--;
        }
        if (i2 > e1) {
          if (i2 <= e2) {
            const nextPos = e2 + 1;
            const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
            while (i2 <= e2) {
              patch(null, c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]), container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
              i2++;
            }
          }
        } else if (i2 > e2) {
          while (i2 <= e1) {
            unmount(c1[i2], parentComponent, parentSuspense, true);
            i2++;
          }
        } else {
          const s1 = i2;
          const s2 = i2;
          const keyToNewIndexMap = /* @__PURE__ */ new Map();
          for (i2 = s2; i2 <= e2; i2++) {
            const nextChild = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
            if (nextChild.key != null) {
              keyToNewIndexMap.set(nextChild.key, i2);
            }
          }
          let j2;
          let patched = 0;
          const toBePatched = e2 - s2 + 1;
          let moved = false;
          let maxNewIndexSoFar = 0;
          const newIndexToOldIndexMap = new Array(toBePatched);
          for (i2 = 0; i2 < toBePatched; i2++)
            newIndexToOldIndexMap[i2] = 0;
          for (i2 = s1; i2 <= e1; i2++) {
            const prevChild = c1[i2];
            if (patched >= toBePatched) {
              unmount(prevChild, parentComponent, parentSuspense, true);
              continue;
            }
            let newIndex;
            if (prevChild.key != null) {
              newIndex = keyToNewIndexMap.get(prevChild.key);
            } else {
              for (j2 = s2; j2 <= e2; j2++) {
                if (newIndexToOldIndexMap[j2 - s2] === 0 && isSameVNodeType(prevChild, c2[j2])) {
                  newIndex = j2;
                  break;
                }
              }
            }
            if (newIndex === void 0) {
              unmount(prevChild, parentComponent, parentSuspense, true);
            } else {
              newIndexToOldIndexMap[newIndex - s2] = i2 + 1;
              if (newIndex >= maxNewIndexSoFar) {
                maxNewIndexSoFar = newIndex;
              } else {
                moved = true;
              }
              patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
              patched++;
            }
          }
          const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : EMPTY_ARR;
          j2 = increasingNewIndexSequence.length - 1;
          for (i2 = toBePatched - 1; i2 >= 0; i2--) {
            const nextIndex = s2 + i2;
            const nextChild = c2[nextIndex];
            const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
            if (newIndexToOldIndexMap[i2] === 0) {
              patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            } else if (moved) {
              if (j2 < 0 || i2 !== increasingNewIndexSequence[j2]) {
                move(nextChild, container, anchor, 2);
              } else {
                j2--;
              }
            }
          }
        }
      };
      const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
        const { el, type: type2, transition, children, shapeFlag } = vnode;
        if (shapeFlag & 6) {
          move(vnode.component.subTree, container, anchor, moveType);
          return;
        }
        if (shapeFlag & 128) {
          vnode.suspense.move(container, anchor, moveType);
          return;
        }
        if (shapeFlag & 64) {
          type2.move(vnode, container, anchor, internals);
          return;
        }
        if (type2 === Fragment) {
          hostInsert(el, container, anchor);
          for (let i2 = 0; i2 < children.length; i2++) {
            move(children[i2], container, anchor, moveType);
          }
          hostInsert(vnode.anchor, container, anchor);
          return;
        }
        if (type2 === Static) {
          moveStaticNode(vnode, container, anchor);
          return;
        }
        const needTransition = moveType !== 2 && shapeFlag & 1 && transition;
        if (needTransition) {
          if (moveType === 0) {
            transition.beforeEnter(el);
            hostInsert(el, container, anchor);
            queuePostRenderEffect(() => transition.enter(el), parentSuspense);
          } else {
            const { leave, delayLeave, afterLeave } = transition;
            const remove3 = () => hostInsert(el, container, anchor);
            const performLeave = () => {
              leave(el, () => {
                remove3();
                afterLeave && afterLeave();
              });
            };
            if (delayLeave) {
              delayLeave(el, remove3, performLeave);
            } else {
              performLeave();
            }
          }
        } else {
          hostInsert(el, container, anchor);
        }
      };
      const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
        const { type: type2, props, ref: ref2, children, dynamicChildren, shapeFlag, patchFlag, dirs } = vnode;
        if (ref2 != null) {
          setRef(ref2, null, parentSuspense, vnode, true);
        }
        if (shapeFlag & 256) {
          parentComponent.ctx.deactivate(vnode);
          return;
        }
        const shouldInvokeDirs = shapeFlag & 1 && dirs;
        const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
        let vnodeHook;
        if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeBeforeUnmount)) {
          invokeVNodeHook(vnodeHook, parentComponent, vnode);
        }
        if (shapeFlag & 6) {
          unmountComponent(vnode.component, parentSuspense, doRemove);
        } else {
          if (shapeFlag & 128) {
            vnode.suspense.unmount(parentSuspense, doRemove);
            return;
          }
          if (shouldInvokeDirs) {
            invokeDirectiveHook(vnode, null, parentComponent, "beforeUnmount");
          }
          if (shapeFlag & 64) {
            vnode.type.remove(vnode, parentComponent, parentSuspense, optimized, internals, doRemove);
          } else if (dynamicChildren && (type2 !== Fragment || patchFlag > 0 && patchFlag & 64)) {
            unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);
          } else if (type2 === Fragment && patchFlag & (128 | 256) || !optimized && shapeFlag & 16) {
            unmountChildren(children, parentComponent, parentSuspense);
          }
          if (doRemove) {
            remove2(vnode);
          }
        }
        if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {
          queuePostRenderEffect(() => {
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
            shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, "unmounted");
          }, parentSuspense);
        }
      };
      const remove2 = (vnode) => {
        const { type: type2, el, anchor, transition } = vnode;
        if (type2 === Fragment) {
          {
            removeFragment(el, anchor);
          }
          return;
        }
        if (type2 === Static) {
          removeStaticNode(vnode);
          return;
        }
        const performRemove = () => {
          hostRemove(el);
          if (transition && !transition.persisted && transition.afterLeave) {
            transition.afterLeave();
          }
        };
        if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
          const { leave, delayLeave } = transition;
          const performLeave = () => leave(el, performRemove);
          if (delayLeave) {
            delayLeave(vnode.el, performRemove, performLeave);
          } else {
            performLeave();
          }
        } else {
          performRemove();
        }
      };
      const removeFragment = (cur, end2) => {
        let next;
        while (cur !== end2) {
          next = hostNextSibling(cur);
          hostRemove(cur);
          cur = next;
        }
        hostRemove(end2);
      };
      const unmountComponent = (instance, parentSuspense, doRemove) => {
        const { bum, scope, update, subTree, um } = instance;
        if (bum) {
          invokeArrayFns(bum);
        }
        scope.stop();
        if (update) {
          update.active = false;
          unmount(subTree, instance, parentSuspense, doRemove);
        }
        if (um) {
          queuePostRenderEffect(um, parentSuspense);
        }
        queuePostRenderEffect(() => {
          instance.isUnmounted = true;
        }, parentSuspense);
        if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
          parentSuspense.deps--;
          if (parentSuspense.deps === 0) {
            parentSuspense.resolve();
          }
        }
      };
      const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {
        for (let i2 = start; i2 < children.length; i2++) {
          unmount(children[i2], parentComponent, parentSuspense, doRemove, optimized);
        }
      };
      const getNextHostNode = (vnode) => {
        if (vnode.shapeFlag & 6) {
          return getNextHostNode(vnode.component.subTree);
        }
        if (vnode.shapeFlag & 128) {
          return vnode.suspense.next();
        }
        return hostNextSibling(vnode.anchor || vnode.el);
      };
      const render2 = (vnode, container, isSVG) => {
        if (vnode == null) {
          if (container._vnode) {
            unmount(container._vnode, null, null, true);
          }
        } else {
          patch(container._vnode || null, vnode, container, null, null, null, isSVG);
        }
        flushPostFlushCbs();
        container._vnode = vnode;
      };
      const internals = {
        p: patch,
        um: unmount,
        m: move,
        r: remove2,
        mt: mountComponent,
        mc: mountChildren,
        pc: patchChildren,
        pbc: patchBlockChildren,
        n: getNextHostNode,
        o: options
      };
      let hydrate2;
      let hydrateNode;
      if (createHydrationFns) {
        [hydrate2, hydrateNode] = createHydrationFns(internals);
      }
      return {
        render: render2,
        hydrate: hydrate2,
        createApp: createAppAPI(render2, hydrate2)
      };
    }
    function toggleRecurse({ effect: effect2, update }, allowed) {
      effect2.allowRecurse = update.allowRecurse = allowed;
    }
    function traverseStaticChildren(n1, n2, shallow = false) {
      const ch1 = n1.children;
      const ch2 = n2.children;
      if (isArray$6(ch1) && isArray$6(ch2)) {
        for (let i2 = 0; i2 < ch1.length; i2++) {
          const c1 = ch1[i2];
          let c2 = ch2[i2];
          if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
            if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
              c2 = ch2[i2] = cloneIfMounted(ch2[i2]);
              c2.el = c1.el;
            }
            if (!shallow)
              traverseStaticChildren(c1, c2);
          }
        }
      }
    }
    function getSequence(arr) {
      const p2 = arr.slice();
      const result = [0];
      let i2, j2, u2, v2, c2;
      const len = arr.length;
      for (i2 = 0; i2 < len; i2++) {
        const arrI = arr[i2];
        if (arrI !== 0) {
          j2 = result[result.length - 1];
          if (arr[j2] < arrI) {
            p2[i2] = j2;
            result.push(i2);
            continue;
          }
          u2 = 0;
          v2 = result.length - 1;
          while (u2 < v2) {
            c2 = u2 + v2 >> 1;
            if (arr[result[c2]] < arrI) {
              u2 = c2 + 1;
            } else {
              v2 = c2;
            }
          }
          if (arrI < arr[result[u2]]) {
            if (u2 > 0) {
              p2[i2] = result[u2 - 1];
            }
            result[u2] = i2;
          }
        }
      }
      u2 = result.length;
      v2 = result[u2 - 1];
      while (u2-- > 0) {
        result[u2] = v2;
        v2 = p2[v2];
      }
      return result;
    }
    const isTeleport = (type2) => type2.__isTeleport;
    const isTeleportDisabled = (props) => props && (props.disabled || props.disabled === "");
    const isTargetSVG = (target) => typeof SVGElement !== "undefined" && target instanceof SVGElement;
    const resolveTarget = (props, select) => {
      const targetSelector = props && props.to;
      if (isString$3(targetSelector)) {
        if (!select) {
          return null;
        } else {
          const target = select(targetSelector);
          return target;
        }
      } else {
        return targetSelector;
      }
    };
    const TeleportImpl = {
      __isTeleport: true,
      process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals) {
        const { mc: mountChildren, pc: patchChildren, pbc: patchBlockChildren, o: { insert, querySelector, createText, createComment } } = internals;
        const disabled = isTeleportDisabled(n2.props);
        let { shapeFlag, children, dynamicChildren } = n2;
        if (n1 == null) {
          const placeholder = n2.el = createText("");
          const mainAnchor = n2.anchor = createText("");
          insert(placeholder, container, anchor);
          insert(mainAnchor, container, anchor);
          const target = n2.target = resolveTarget(n2.props, querySelector);
          const targetAnchor = n2.targetAnchor = createText("");
          if (target) {
            insert(targetAnchor, target);
            isSVG = isSVG || isTargetSVG(target);
          }
          const mount = (container2, anchor2) => {
            if (shapeFlag & 16) {
              mountChildren(children, container2, anchor2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            }
          };
          if (disabled) {
            mount(container, mainAnchor);
          } else if (target) {
            mount(target, targetAnchor);
          }
        } else {
          n2.el = n1.el;
          const mainAnchor = n2.anchor = n1.anchor;
          const target = n2.target = n1.target;
          const targetAnchor = n2.targetAnchor = n1.targetAnchor;
          const wasDisabled = isTeleportDisabled(n1.props);
          const currentContainer = wasDisabled ? container : target;
          const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
          isSVG = isSVG || isTargetSVG(target);
          if (dynamicChildren) {
            patchBlockChildren(n1.dynamicChildren, dynamicChildren, currentContainer, parentComponent, parentSuspense, isSVG, slotScopeIds);
            traverseStaticChildren(n1, n2, true);
          } else if (!optimized) {
            patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, false);
          }
          if (disabled) {
            if (!wasDisabled) {
              moveTeleport(n2, container, mainAnchor, internals, 1);
            }
          } else {
            if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
              const nextTarget = n2.target = resolveTarget(n2.props, querySelector);
              if (nextTarget) {
                moveTeleport(n2, nextTarget, null, internals, 0);
              }
            } else if (wasDisabled) {
              moveTeleport(n2, target, targetAnchor, internals, 1);
            }
          }
        }
      },
      remove(vnode, parentComponent, parentSuspense, optimized, { um: unmount, o: { remove: hostRemove } }, doRemove) {
        const { shapeFlag, children, anchor, targetAnchor, target, props } = vnode;
        if (target) {
          hostRemove(targetAnchor);
        }
        if (doRemove || !isTeleportDisabled(props)) {
          hostRemove(anchor);
          if (shapeFlag & 16) {
            for (let i2 = 0; i2 < children.length; i2++) {
              const child = children[i2];
              unmount(child, parentComponent, parentSuspense, true, !!child.dynamicChildren);
            }
          }
        }
      },
      move: moveTeleport,
      hydrate: hydrateTeleport
    };
    function moveTeleport(vnode, container, parentAnchor, { o: { insert }, m: move }, moveType = 2) {
      if (moveType === 0) {
        insert(vnode.targetAnchor, container, parentAnchor);
      }
      const { el, anchor, shapeFlag, children, props } = vnode;
      const isReorder = moveType === 2;
      if (isReorder) {
        insert(el, container, parentAnchor);
      }
      if (!isReorder || isTeleportDisabled(props)) {
        if (shapeFlag & 16) {
          for (let i2 = 0; i2 < children.length; i2++) {
            move(children[i2], container, parentAnchor, 2);
          }
        }
      }
      if (isReorder) {
        insert(anchor, container, parentAnchor);
      }
    }
    function hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, { o: { nextSibling, parentNode, querySelector } }, hydrateChildren) {
      const target = vnode.target = resolveTarget(vnode.props, querySelector);
      if (target) {
        const targetNode = target._lpa || target.firstChild;
        if (vnode.shapeFlag & 16) {
          if (isTeleportDisabled(vnode.props)) {
            vnode.anchor = hydrateChildren(nextSibling(node), vnode, parentNode(node), parentComponent, parentSuspense, slotScopeIds, optimized);
            vnode.targetAnchor = targetNode;
          } else {
            vnode.anchor = nextSibling(node);
            let targetAnchor = targetNode;
            while (targetAnchor) {
              targetAnchor = nextSibling(targetAnchor);
              if (targetAnchor && targetAnchor.nodeType === 8 && targetAnchor.data === "teleport anchor") {
                vnode.targetAnchor = targetAnchor;
                target._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);
                break;
              }
            }
            hydrateChildren(targetNode, vnode, target, parentComponent, parentSuspense, slotScopeIds, optimized);
          }
        }
      }
      return vnode.anchor && nextSibling(vnode.anchor);
    }
    const Teleport = TeleportImpl;
    const Fragment = Symbol(void 0);
    const Text = Symbol(void 0);
    const Comment = Symbol(void 0);
    const Static = Symbol(void 0);
    const blockStack = [];
    let currentBlock = null;
    function openBlock(disableTracking = false) {
      blockStack.push(currentBlock = disableTracking ? null : []);
    }
    function closeBlock() {
      blockStack.pop();
      currentBlock = blockStack[blockStack.length - 1] || null;
    }
    let isBlockTreeEnabled = 1;
    function setBlockTracking(value) {
      isBlockTreeEnabled += value;
    }
    function setupBlock(vnode) {
      vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || EMPTY_ARR : null;
      closeBlock();
      if (isBlockTreeEnabled > 0 && currentBlock) {
        currentBlock.push(vnode);
      }
      return vnode;
    }
    function createElementBlock(type2, props, children, patchFlag, dynamicProps, shapeFlag) {
      return setupBlock(createBaseVNode(type2, props, children, patchFlag, dynamicProps, shapeFlag, true));
    }
    function createBlock(type2, props, children, patchFlag, dynamicProps) {
      return setupBlock(createVNode(type2, props, children, patchFlag, dynamicProps, true));
    }
    function isVNode(value) {
      return value ? value.__v_isVNode === true : false;
    }
    function isSameVNodeType(n1, n2) {
      return n1.type === n2.type && n1.key === n2.key;
    }
    function transformVNodeArgs(transformer) {
    }
    const InternalObjectKey = `__vInternal`;
    const normalizeKey = ({ key }) => key != null ? key : null;
    const normalizeRef = ({ ref: ref2, ref_key, ref_for }) => {
      return ref2 != null ? isString$3(ref2) || isRef(ref2) || isFunction$4(ref2) ? { i: currentRenderingInstance, r: ref2, k: ref_key, f: !!ref_for } : ref2 : null;
    };
    function createBaseVNode(type2, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type2 === Fragment ? 0 : 1, isBlockNode = false, needFullChildrenNormalization = false) {
      const vnode = {
        __v_isVNode: true,
        __v_skip: true,
        type: type2,
        props,
        key: props && normalizeKey(props),
        ref: props && normalizeRef(props),
        scopeId: currentScopeId,
        slotScopeIds: null,
        children,
        component: null,
        suspense: null,
        ssContent: null,
        ssFallback: null,
        dirs: null,
        transition: null,
        el: null,
        anchor: null,
        target: null,
        targetAnchor: null,
        staticCount: 0,
        shapeFlag,
        patchFlag,
        dynamicProps,
        dynamicChildren: null,
        appContext: null
      };
      if (needFullChildrenNormalization) {
        normalizeChildren(vnode, children);
        if (shapeFlag & 128) {
          type2.normalize(vnode);
        }
      } else if (children) {
        vnode.shapeFlag |= isString$3(children) ? 8 : 16;
      }
      if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock && (vnode.patchFlag > 0 || shapeFlag & 6) && vnode.patchFlag !== 32) {
        currentBlock.push(vnode);
      }
      return vnode;
    }
    const createVNode = _createVNode;
    function _createVNode(type2, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
      if (!type2 || type2 === NULL_DYNAMIC_COMPONENT) {
        type2 = Comment;
      }
      if (isVNode(type2)) {
        const cloned = cloneVNode(type2, props, true);
        if (children) {
          normalizeChildren(cloned, children);
        }
        if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock) {
          if (cloned.shapeFlag & 6) {
            currentBlock[currentBlock.indexOf(type2)] = cloned;
          } else {
            currentBlock.push(cloned);
          }
        }
        cloned.patchFlag |= -2;
        return cloned;
      }
      if (isClassComponent(type2)) {
        type2 = type2.__vccOpts;
      }
      if (props) {
        props = guardReactiveProps(props);
        let { class: klass, style: style2 } = props;
        if (klass && !isString$3(klass)) {
          props.class = normalizeClass(klass);
        }
        if (isObject$7(style2)) {
          if (isProxy(style2) && !isArray$6(style2)) {
            style2 = extend$1({}, style2);
          }
          props.style = normalizeStyle(style2);
        }
      }
      const shapeFlag = isString$3(type2) ? 1 : isSuspense(type2) ? 128 : isTeleport(type2) ? 64 : isObject$7(type2) ? 4 : isFunction$4(type2) ? 2 : 0;
      return createBaseVNode(type2, props, children, patchFlag, dynamicProps, shapeFlag, isBlockNode, true);
    }
    function guardReactiveProps(props) {
      if (!props)
        return null;
      return isProxy(props) || InternalObjectKey in props ? extend$1({}, props) : props;
    }
    function cloneVNode(vnode, extraProps, mergeRef = false) {
      const { props, ref: ref2, patchFlag, children } = vnode;
      const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;
      const cloned = {
        __v_isVNode: true,
        __v_skip: true,
        type: vnode.type,
        props: mergedProps,
        key: mergedProps && normalizeKey(mergedProps),
        ref: extraProps && extraProps.ref ? mergeRef && ref2 ? isArray$6(ref2) ? ref2.concat(normalizeRef(extraProps)) : [ref2, normalizeRef(extraProps)] : normalizeRef(extraProps) : ref2,
        scopeId: vnode.scopeId,
        slotScopeIds: vnode.slotScopeIds,
        children,
        target: vnode.target,
        targetAnchor: vnode.targetAnchor,
        staticCount: vnode.staticCount,
        shapeFlag: vnode.shapeFlag,
        patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
        dynamicProps: vnode.dynamicProps,
        dynamicChildren: vnode.dynamicChildren,
        appContext: vnode.appContext,
        dirs: vnode.dirs,
        transition: vnode.transition,
        component: vnode.component,
        suspense: vnode.suspense,
        ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
        ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
        el: vnode.el,
        anchor: vnode.anchor
      };
      return cloned;
    }
    function createTextVNode(text = " ", flag = 0) {
      return createVNode(Text, null, text, flag);
    }
    function createStaticVNode(content, numberOfNodes) {
      const vnode = createVNode(Static, null, content);
      vnode.staticCount = numberOfNodes;
      return vnode;
    }
    function createCommentVNode(text = "", asBlock = false) {
      return asBlock ? (openBlock(), createBlock(Comment, null, text)) : createVNode(Comment, null, text);
    }
    function normalizeVNode(child) {
      if (child == null || typeof child === "boolean") {
        return createVNode(Comment);
      } else if (isArray$6(child)) {
        return createVNode(
          Fragment,
          null,
          child.slice()
        );
      } else if (typeof child === "object") {
        return cloneIfMounted(child);
      } else {
        return createVNode(Text, null, String(child));
      }
    }
    function cloneIfMounted(child) {
      return child.el === null || child.memo ? child : cloneVNode(child);
    }
    function normalizeChildren(vnode, children) {
      let type2 = 0;
      const { shapeFlag } = vnode;
      if (children == null) {
        children = null;
      } else if (isArray$6(children)) {
        type2 = 16;
      } else if (typeof children === "object") {
        if (shapeFlag & (1 | 64)) {
          const slot = children.default;
          if (slot) {
            slot._c && (slot._d = false);
            normalizeChildren(vnode, slot());
            slot._c && (slot._d = true);
          }
          return;
        } else {
          type2 = 32;
          const slotFlag = children._;
          if (!slotFlag && !(InternalObjectKey in children)) {
            children._ctx = currentRenderingInstance;
          } else if (slotFlag === 3 && currentRenderingInstance) {
            if (currentRenderingInstance.slots._ === 1) {
              children._ = 1;
            } else {
              children._ = 2;
              vnode.patchFlag |= 1024;
            }
          }
        }
      } else if (isFunction$4(children)) {
        children = { default: children, _ctx: currentRenderingInstance };
        type2 = 32;
      } else {
        children = String(children);
        if (shapeFlag & 64) {
          type2 = 16;
          children = [createTextVNode(children)];
        } else {
          type2 = 8;
        }
      }
      vnode.children = children;
      vnode.shapeFlag |= type2;
    }
    function mergeProps(...args) {
      const ret = {};
      for (let i2 = 0; i2 < args.length; i2++) {
        const toMerge = args[i2];
        for (const key in toMerge) {
          if (key === "class") {
            if (ret.class !== toMerge.class) {
              ret.class = normalizeClass([ret.class, toMerge.class]);
            }
          } else if (key === "style") {
            ret.style = normalizeStyle([ret.style, toMerge.style]);
          } else if (isOn(key)) {
            const existing = ret[key];
            const incoming = toMerge[key];
            if (incoming && existing !== incoming && !(isArray$6(existing) && existing.includes(incoming))) {
              ret[key] = existing ? [].concat(existing, incoming) : incoming;
            }
          } else if (key !== "") {
            ret[key] = toMerge[key];
          }
        }
      }
      return ret;
    }
    function invokeVNodeHook(hook2, instance, vnode, prevVNode = null) {
      callWithAsyncErrorHandling(hook2, instance, 7, [
        vnode,
        prevVNode
      ]);
    }
    const emptyAppContext = createAppContext();
    let uid$1$1 = 0;
    function createComponentInstance(vnode, parent, suspense) {
      const type2 = vnode.type;
      const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
      const instance = {
        uid: uid$1$1++,
        vnode,
        type: type2,
        parent,
        appContext,
        root: null,
        next: null,
        subTree: null,
        effect: null,
        update: null,
        scope: new EffectScope(true),
        render: null,
        proxy: null,
        exposed: null,
        exposeProxy: null,
        withProxy: null,
        provides: parent ? parent.provides : Object.create(appContext.provides),
        accessCache: null,
        renderCache: [],
        components: null,
        directives: null,
        propsOptions: normalizePropsOptions(type2, appContext),
        emitsOptions: normalizeEmitsOptions(type2, appContext),
        emit: null,
        emitted: null,
        propsDefaults: EMPTY_OBJ,
        inheritAttrs: type2.inheritAttrs,
        ctx: EMPTY_OBJ,
        data: EMPTY_OBJ,
        props: EMPTY_OBJ,
        attrs: EMPTY_OBJ,
        slots: EMPTY_OBJ,
        refs: EMPTY_OBJ,
        setupState: EMPTY_OBJ,
        setupContext: null,
        suspense,
        suspenseId: suspense ? suspense.pendingId : 0,
        asyncDep: null,
        asyncResolved: false,
        isMounted: false,
        isUnmounted: false,
        isDeactivated: false,
        bc: null,
        c: null,
        bm: null,
        m: null,
        bu: null,
        u: null,
        um: null,
        bum: null,
        da: null,
        a: null,
        rtg: null,
        rtc: null,
        ec: null,
        sp: null
      };
      {
        instance.ctx = { _: instance };
      }
      instance.root = parent ? parent.root : instance;
      instance.emit = emit$1.bind(null, instance);
      if (vnode.ce) {
        vnode.ce(instance);
      }
      return instance;
    }
    let currentInstance = null;
    const getCurrentInstance = () => currentInstance || currentRenderingInstance;
    const setCurrentInstance = (instance) => {
      currentInstance = instance;
      instance.scope.on();
    };
    const unsetCurrentInstance = () => {
      currentInstance && currentInstance.scope.off();
      currentInstance = null;
    };
    function isStatefulComponent(instance) {
      return instance.vnode.shapeFlag & 4;
    }
    let isInSSRComponentSetup = false;
    function setupComponent(instance, isSSR = false) {
      isInSSRComponentSetup = isSSR;
      const { props, children } = instance.vnode;
      const isStateful = isStatefulComponent(instance);
      initProps(instance, props, isStateful, isSSR);
      initSlots(instance, children);
      const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : void 0;
      isInSSRComponentSetup = false;
      return setupResult;
    }
    function setupStatefulComponent(instance, isSSR) {
      const Component = instance.type;
      instance.accessCache = /* @__PURE__ */ Object.create(null);
      instance.proxy = markRaw(new Proxy(instance.ctx, PublicInstanceProxyHandlers));
      const { setup } = Component;
      if (setup) {
        const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
        setCurrentInstance(instance);
        pauseTracking();
        const setupResult = callWithErrorHandling(setup, instance, 0, [instance.props, setupContext]);
        resetTracking();
        unsetCurrentInstance();
        if (isPromise$1(setupResult)) {
          setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
          if (isSSR) {
            return setupResult.then((resolvedResult) => {
              handleSetupResult(instance, resolvedResult, isSSR);
            }).catch((e2) => {
              handleError(e2, instance, 0);
            });
          } else {
            instance.asyncDep = setupResult;
          }
        } else {
          handleSetupResult(instance, setupResult, isSSR);
        }
      } else {
        finishComponentSetup(instance, isSSR);
      }
    }
    function handleSetupResult(instance, setupResult, isSSR) {
      if (isFunction$4(setupResult)) {
        if (instance.type.__ssrInlineRender) {
          instance.ssrRender = setupResult;
        } else {
          instance.render = setupResult;
        }
      } else if (isObject$7(setupResult)) {
        instance.setupState = proxyRefs(setupResult);
      } else
        ;
      finishComponentSetup(instance, isSSR);
    }
    let compile$1;
    let installWithProxy;
    function registerRuntimeCompiler(_compile) {
      compile$1 = _compile;
      installWithProxy = (i2) => {
        if (i2.render._rc) {
          i2.withProxy = new Proxy(i2.ctx, RuntimeCompiledPublicInstanceProxyHandlers);
        }
      };
    }
    const isRuntimeOnly = () => !compile$1;
    function finishComponentSetup(instance, isSSR, skipOptions) {
      const Component = instance.type;
      if (!instance.render) {
        if (!isSSR && compile$1 && !Component.render) {
          const template = Component.template;
          if (template) {
            const { isCustomElement, compilerOptions } = instance.appContext.config;
            const { delimiters, compilerOptions: componentCompilerOptions } = Component;
            const finalCompilerOptions = extend$1(extend$1({
              isCustomElement,
              delimiters
            }, compilerOptions), componentCompilerOptions);
            Component.render = compile$1(template, finalCompilerOptions);
          }
        }
        instance.render = Component.render || NOOP;
        if (installWithProxy) {
          installWithProxy(instance);
        }
      }
      {
        setCurrentInstance(instance);
        pauseTracking();
        applyOptions(instance);
        resetTracking();
        unsetCurrentInstance();
      }
    }
    function createAttrsProxy(instance) {
      return new Proxy(instance.attrs, {
        get(target, key) {
          track(instance, "get", "$attrs");
          return target[key];
        }
      });
    }
    function createSetupContext(instance) {
      const expose = (exposed) => {
        instance.exposed = exposed || {};
      };
      let attrs;
      {
        return {
          get attrs() {
            return attrs || (attrs = createAttrsProxy(instance));
          },
          slots: instance.slots,
          emit: instance.emit,
          expose
        };
      }
    }
    function getExposeProxy(instance) {
      if (instance.exposed) {
        return instance.exposeProxy || (instance.exposeProxy = new Proxy(proxyRefs(markRaw(instance.exposed)), {
          get(target, key) {
            if (key in target) {
              return target[key];
            } else if (key in publicPropertiesMap) {
              return publicPropertiesMap[key](instance);
            }
          }
        }));
      }
    }
    const classifyRE = /(?:^|[-_])(\w)/g;
    const classify = (str2) => str2.replace(classifyRE, (c2) => c2.toUpperCase()).replace(/[-_]/g, "");
    function getComponentName(Component, includeInferred = true) {
      return isFunction$4(Component) ? Component.displayName || Component.name : Component.name || includeInferred && Component.__name;
    }
    function formatComponentName(instance, Component, isRoot = false) {
      let name = getComponentName(Component);
      if (!name && Component.__file) {
        const match = Component.__file.match(/([^/\\]+)\.\w+$/);
        if (match) {
          name = match[1];
        }
      }
      if (!name && instance && instance.parent) {
        const inferFromRegistry = (registry) => {
          for (const key in registry) {
            if (registry[key] === Component) {
              return key;
            }
          }
        };
        name = inferFromRegistry(instance.components || instance.parent.type.components) || inferFromRegistry(instance.appContext.components);
      }
      return name ? classify(name) : isRoot ? `App` : `Anonymous`;
    }
    function isClassComponent(value) {
      return isFunction$4(value) && "__vccOpts" in value;
    }
    const computed = (getterOrOptions, debugOptions) => {
      return computed$1(getterOrOptions, debugOptions, isInSSRComponentSetup);
    };
    function defineProps() {
      return null;
    }
    function defineEmits() {
      return null;
    }
    function defineExpose(exposed) {
    }
    function withDefaults$3(props, defaults) {
      return null;
    }
    function useSlots() {
      return getContext().slots;
    }
    function useAttrs$1() {
      return getContext().attrs;
    }
    function getContext() {
      const i2 = getCurrentInstance();
      return i2.setupContext || (i2.setupContext = createSetupContext(i2));
    }
    function mergeDefaults(raw, defaults) {
      const props = isArray$6(raw) ? raw.reduce((normalized, p2) => (normalized[p2] = {}, normalized), {}) : raw;
      for (const key in defaults) {
        const opt = props[key];
        if (opt) {
          if (isArray$6(opt) || isFunction$4(opt)) {
            props[key] = { type: opt, default: defaults[key] };
          } else {
            opt.default = defaults[key];
          }
        } else if (opt === null) {
          props[key] = { default: defaults[key] };
        } else
          ;
      }
      return props;
    }
    function createPropsRestProxy(props, excludedKeys) {
      const ret = {};
      for (const key in props) {
        if (!excludedKeys.includes(key)) {
          Object.defineProperty(ret, key, {
            enumerable: true,
            get: () => props[key]
          });
        }
      }
      return ret;
    }
    function withAsyncContext(getAwaitable) {
      const ctx = getCurrentInstance();
      let awaitable = getAwaitable();
      unsetCurrentInstance();
      if (isPromise$1(awaitable)) {
        awaitable = awaitable.catch((e2) => {
          setCurrentInstance(ctx);
          throw e2;
        });
      }
      return [awaitable, () => setCurrentInstance(ctx)];
    }
    function h$2(type2, propsOrChildren, children) {
      const l2 = arguments.length;
      if (l2 === 2) {
        if (isObject$7(propsOrChildren) && !isArray$6(propsOrChildren)) {
          if (isVNode(propsOrChildren)) {
            return createVNode(type2, null, [propsOrChildren]);
          }
          return createVNode(type2, propsOrChildren);
        } else {
          return createVNode(type2, null, propsOrChildren);
        }
      } else {
        if (l2 > 3) {
          children = Array.prototype.slice.call(arguments, 2);
        } else if (l2 === 3 && isVNode(children)) {
          children = [children];
        }
        return createVNode(type2, propsOrChildren, children);
      }
    }
    const ssrContextKey = Symbol(``);
    const useSSRContext = () => {
      {
        const ctx = inject(ssrContextKey);
        if (!ctx) {
          warn$1(`Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build.`);
        }
        return ctx;
      }
    };
    function initCustomFormatter() {
      {
        return;
      }
    }
    function withMemo(memo, render2, cache2, index2) {
      const cached = cache2[index2];
      if (cached && isMemoSame(cached, memo)) {
        return cached;
      }
      const ret = render2();
      ret.memo = memo.slice();
      return cache2[index2] = ret;
    }
    function isMemoSame(cached, memo) {
      const prev = cached.memo;
      if (prev.length != memo.length) {
        return false;
      }
      for (let i2 = 0; i2 < prev.length; i2++) {
        if (hasChanged(prev[i2], memo[i2])) {
          return false;
        }
      }
      if (isBlockTreeEnabled > 0 && currentBlock) {
        currentBlock.push(cached);
      }
      return true;
    }
    const version$3 = "3.2.37";
    const _ssrUtils = {
      createComponentInstance,
      setupComponent,
      renderComponentRoot,
      setCurrentRenderingInstance,
      isVNode,
      normalizeVNode
    };
    const ssrUtils = _ssrUtils;
    const resolveFilter = null;
    const compatUtils = null;
    const svgNS = "http://www.w3.org/2000/svg";
    const doc = typeof document !== "undefined" ? document : null;
    const templateContainer = doc && /* @__PURE__ */ doc.createElement("template");
    const nodeOps = {
      insert: (child, parent, anchor) => {
        parent.insertBefore(child, anchor || null);
      },
      remove: (child) => {
        const parent = child.parentNode;
        if (parent) {
          parent.removeChild(child);
        }
      },
      createElement: (tag, isSVG, is, props) => {
        const el = isSVG ? doc.createElementNS(svgNS, tag) : doc.createElement(tag, is ? { is } : void 0);
        if (tag === "select" && props && props.multiple != null) {
          el.setAttribute("multiple", props.multiple);
        }
        return el;
      },
      createText: (text) => doc.createTextNode(text),
      createComment: (text) => doc.createComment(text),
      setText: (node, text) => {
        node.nodeValue = text;
      },
      setElementText: (el, text) => {
        el.textContent = text;
      },
      parentNode: (node) => node.parentNode,
      nextSibling: (node) => node.nextSibling,
      querySelector: (selector) => doc.querySelector(selector),
      setScopeId(el, id2) {
        el.setAttribute(id2, "");
      },
      cloneNode(el) {
        const cloned = el.cloneNode(true);
        if (`_value` in el) {
          cloned._value = el._value;
        }
        return cloned;
      },
      insertStaticContent(content, parent, anchor, isSVG, start, end2) {
        const before = anchor ? anchor.previousSibling : parent.lastChild;
        if (start && (start === end2 || start.nextSibling)) {
          while (true) {
            parent.insertBefore(start.cloneNode(true), anchor);
            if (start === end2 || !(start = start.nextSibling))
              break;
          }
        } else {
          templateContainer.innerHTML = isSVG ? `<svg>${content}</svg>` : content;
          const template = templateContainer.content;
          if (isSVG) {
            const wrapper = template.firstChild;
            while (wrapper.firstChild) {
              template.appendChild(wrapper.firstChild);
            }
            template.removeChild(wrapper);
          }
          parent.insertBefore(template, anchor);
        }
        return [
          before ? before.nextSibling : parent.firstChild,
          anchor ? anchor.previousSibling : parent.lastChild
        ];
      }
    };
    function patchClass(el, value, isSVG) {
      const transitionClasses = el._vtc;
      if (transitionClasses) {
        value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(" ");
      }
      if (value == null) {
        el.removeAttribute("class");
      } else if (isSVG) {
        el.setAttribute("class", value);
      } else {
        el.className = value;
      }
    }
    function patchStyle(el, prev, next) {
      const style2 = el.style;
      const isCssString = isString$3(next);
      if (next && !isCssString) {
        for (const key in next) {
          setStyle(style2, key, next[key]);
        }
        if (prev && !isString$3(prev)) {
          for (const key in prev) {
            if (next[key] == null) {
              setStyle(style2, key, "");
            }
          }
        }
      } else {
        const currentDisplay = style2.display;
        if (isCssString) {
          if (prev !== next) {
            style2.cssText = next;
          }
        } else if (prev) {
          el.removeAttribute("style");
        }
        if ("_vod" in el) {
          style2.display = currentDisplay;
        }
      }
    }
    const importantRE = /\s*!important$/;
    function setStyle(style2, name, val) {
      if (isArray$6(val)) {
        val.forEach((v2) => setStyle(style2, name, v2));
      } else {
        if (val == null)
          val = "";
        if (name.startsWith("--")) {
          style2.setProperty(name, val);
        } else {
          const prefixed = autoPrefix(style2, name);
          if (importantRE.test(val)) {
            style2.setProperty(hyphenate(prefixed), val.replace(importantRE, ""), "important");
          } else {
            style2[prefixed] = val;
          }
        }
      }
    }
    const prefixes = ["Webkit", "Moz", "ms"];
    const prefixCache = {};
    function autoPrefix(style2, rawName) {
      const cached = prefixCache[rawName];
      if (cached) {
        return cached;
      }
      let name = camelize(rawName);
      if (name !== "filter" && name in style2) {
        return prefixCache[rawName] = name;
      }
      name = capitalize(name);
      for (let i2 = 0; i2 < prefixes.length; i2++) {
        const prefixed = prefixes[i2] + name;
        if (prefixed in style2) {
          return prefixCache[rawName] = prefixed;
        }
      }
      return rawName;
    }
    const xlinkNS = "http://www.w3.org/1999/xlink";
    function patchAttr(el, key, value, isSVG, instance) {
      if (isSVG && key.startsWith("xlink:")) {
        if (value == null) {
          el.removeAttributeNS(xlinkNS, key.slice(6, key.length));
        } else {
          el.setAttributeNS(xlinkNS, key, value);
        }
      } else {
        const isBoolean2 = isSpecialBooleanAttr(key);
        if (value == null || isBoolean2 && !includeBooleanAttr(value)) {
          el.removeAttribute(key);
        } else {
          el.setAttribute(key, isBoolean2 ? "" : value);
        }
      }
    }
    function patchDOMProp(el, key, value, prevChildren, parentComponent, parentSuspense, unmountChildren) {
      if (key === "innerHTML" || key === "textContent") {
        if (prevChildren) {
          unmountChildren(prevChildren, parentComponent, parentSuspense);
        }
        el[key] = value == null ? "" : value;
        return;
      }
      if (key === "value" && el.tagName !== "PROGRESS" && !el.tagName.includes("-")) {
        el._value = value;
        const newValue = value == null ? "" : value;
        if (el.value !== newValue || el.tagName === "OPTION") {
          el.value = newValue;
        }
        if (value == null) {
          el.removeAttribute(key);
        }
        return;
      }
      let needRemove = false;
      if (value === "" || value == null) {
        const type2 = typeof el[key];
        if (type2 === "boolean") {
          value = includeBooleanAttr(value);
        } else if (value == null && type2 === "string") {
          value = "";
          needRemove = true;
        } else if (type2 === "number") {
          value = 0;
          needRemove = true;
        }
      }
      try {
        el[key] = value;
      } catch (e2) {
      }
      needRemove && el.removeAttribute(key);
    }
    const [_getNow, skipTimestampCheck] = /* @__PURE__ */ (() => {
      let _getNow2 = Date.now;
      let skipTimestampCheck2 = false;
      if (typeof window !== "undefined") {
        if (Date.now() > document.createEvent("Event").timeStamp) {
          _getNow2 = performance.now.bind(performance);
        }
        const ffMatch = navigator.userAgent.match(/firefox\/(\d+)/i);
        skipTimestampCheck2 = !!(ffMatch && Number(ffMatch[1]) <= 53);
      }
      return [_getNow2, skipTimestampCheck2];
    })();
    let cachedNow = 0;
    const p$1 = /* @__PURE__ */ Promise.resolve();
    const reset = () => {
      cachedNow = 0;
    };
    const getNow = () => cachedNow || (p$1.then(reset), cachedNow = _getNow());
    function addEventListener(el, event, handler, options) {
      el.addEventListener(event, handler, options);
    }
    function removeEventListener(el, event, handler, options) {
      el.removeEventListener(event, handler, options);
    }
    function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
      const invokers = el._vei || (el._vei = {});
      const existingInvoker = invokers[rawName];
      if (nextValue && existingInvoker) {
        existingInvoker.value = nextValue;
      } else {
        const [name, options] = parseName(rawName);
        if (nextValue) {
          const invoker = invokers[rawName] = createInvoker(nextValue, instance);
          addEventListener(el, name, invoker, options);
        } else if (existingInvoker) {
          removeEventListener(el, name, existingInvoker, options);
          invokers[rawName] = void 0;
        }
      }
    }
    const optionsModifierRE = /(?:Once|Passive|Capture)$/;
    function parseName(name) {
      let options;
      if (optionsModifierRE.test(name)) {
        options = {};
        let m2;
        while (m2 = name.match(optionsModifierRE)) {
          name = name.slice(0, name.length - m2[0].length);
          options[m2[0].toLowerCase()] = true;
        }
      }
      return [hyphenate(name.slice(2)), options];
    }
    function createInvoker(initialValue, instance) {
      const invoker = (e2) => {
        const timeStamp = e2.timeStamp || _getNow();
        if (skipTimestampCheck || timeStamp >= invoker.attached - 1) {
          callWithAsyncErrorHandling(patchStopImmediatePropagation(e2, invoker.value), instance, 5, [e2]);
        }
      };
      invoker.value = initialValue;
      invoker.attached = getNow();
      return invoker;
    }
    function patchStopImmediatePropagation(e2, value) {
      if (isArray$6(value)) {
        const originalStop = e2.stopImmediatePropagation;
        e2.stopImmediatePropagation = () => {
          originalStop.call(e2);
          e2._stopped = true;
        };
        return value.map((fn2) => (e3) => !e3._stopped && fn2 && fn2(e3));
      } else {
        return value;
      }
    }
    const nativeOnRE = /^on[a-z]/;
    const patchProp = (el, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {
      if (key === "class") {
        patchClass(el, nextValue, isSVG);
      } else if (key === "style") {
        patchStyle(el, prevValue, nextValue);
      } else if (isOn(key)) {
        if (!isModelListener(key)) {
          patchEvent(el, key, prevValue, nextValue, parentComponent);
        }
      } else if (key[0] === "." ? (key = key.slice(1), true) : key[0] === "^" ? (key = key.slice(1), false) : shouldSetAsProp(el, key, nextValue, isSVG)) {
        patchDOMProp(el, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);
      } else {
        if (key === "true-value") {
          el._trueValue = nextValue;
        } else if (key === "false-value") {
          el._falseValue = nextValue;
        }
        patchAttr(el, key, nextValue, isSVG);
      }
    };
    function shouldSetAsProp(el, key, value, isSVG) {
      if (isSVG) {
        if (key === "innerHTML" || key === "textContent") {
          return true;
        }
        if (key in el && nativeOnRE.test(key) && isFunction$4(value)) {
          return true;
        }
        return false;
      }
      if (key === "spellcheck" || key === "draggable" || key === "translate") {
        return false;
      }
      if (key === "form") {
        return false;
      }
      if (key === "list" && el.tagName === "INPUT") {
        return false;
      }
      if (key === "type" && el.tagName === "TEXTAREA") {
        return false;
      }
      if (nativeOnRE.test(key) && isString$3(value)) {
        return false;
      }
      return key in el;
    }
    function defineCustomElement(options, hydrate2) {
      const Comp = defineComponent(options);
      class VueCustomElement extends VueElement {
        constructor(initialProps) {
          super(Comp, initialProps, hydrate2);
        }
      }
      VueCustomElement.def = Comp;
      return VueCustomElement;
    }
    const defineSSRCustomElement = (options) => {
      return defineCustomElement(options, hydrate);
    };
    const BaseClass = typeof HTMLElement !== "undefined" ? HTMLElement : class {
    };
    class VueElement extends BaseClass {
      constructor(_def, _props = {}, hydrate2) {
        super();
        this._def = _def;
        this._props = _props;
        this._instance = null;
        this._connected = false;
        this._resolved = false;
        this._numberProps = null;
        if (this.shadowRoot && hydrate2) {
          hydrate2(this._createVNode(), this.shadowRoot);
        } else {
          this.attachShadow({ mode: "open" });
        }
      }
      connectedCallback() {
        this._connected = true;
        if (!this._instance) {
          this._resolveDef();
        }
      }
      disconnectedCallback() {
        this._connected = false;
        nextTick$1(() => {
          if (!this._connected) {
            render$1(null, this.shadowRoot);
            this._instance = null;
          }
        });
      }
      _resolveDef() {
        if (this._resolved) {
          return;
        }
        this._resolved = true;
        for (let i2 = 0; i2 < this.attributes.length; i2++) {
          this._setAttr(this.attributes[i2].name);
        }
        new MutationObserver((mutations) => {
          for (const m2 of mutations) {
            this._setAttr(m2.attributeName);
          }
        }).observe(this, { attributes: true });
        const resolve2 = (def2) => {
          const { props, styles } = def2;
          const hasOptions = !isArray$6(props);
          const rawKeys = props ? hasOptions ? Object.keys(props) : props : [];
          let numberProps;
          if (hasOptions) {
            for (const key in this._props) {
              const opt = props[key];
              if (opt === Number || opt && opt.type === Number) {
                this._props[key] = toNumber$1(this._props[key]);
                (numberProps || (numberProps = /* @__PURE__ */ Object.create(null)))[key] = true;
              }
            }
          }
          this._numberProps = numberProps;
          for (const key of Object.keys(this)) {
            if (key[0] !== "_") {
              this._setProp(key, this[key], true, false);
            }
          }
          for (const key of rawKeys.map(camelize)) {
            Object.defineProperty(this, key, {
              get() {
                return this._getProp(key);
              },
              set(val) {
                this._setProp(key, val);
              }
            });
          }
          this._applyStyles(styles);
          this._update();
        };
        const asyncDef = this._def.__asyncLoader;
        if (asyncDef) {
          asyncDef().then(resolve2);
        } else {
          resolve2(this._def);
        }
      }
      _setAttr(key) {
        let value = this.getAttribute(key);
        if (this._numberProps && this._numberProps[key]) {
          value = toNumber$1(value);
        }
        this._setProp(camelize(key), value, false);
      }
      _getProp(key) {
        return this._props[key];
      }
      _setProp(key, val, shouldReflect = true, shouldUpdate = true) {
        if (val !== this._props[key]) {
          this._props[key] = val;
          if (shouldUpdate && this._instance) {
            this._update();
          }
          if (shouldReflect) {
            if (val === true) {
              this.setAttribute(hyphenate(key), "");
            } else if (typeof val === "string" || typeof val === "number") {
              this.setAttribute(hyphenate(key), val + "");
            } else if (!val) {
              this.removeAttribute(hyphenate(key));
            }
          }
        }
      }
      _update() {
        render$1(this._createVNode(), this.shadowRoot);
      }
      _createVNode() {
        const vnode = createVNode(this._def, extend$1({}, this._props));
        if (!this._instance) {
          vnode.ce = (instance) => {
            this._instance = instance;
            instance.isCE = true;
            instance.emit = (event, ...args) => {
              this.dispatchEvent(new CustomEvent(event, {
                detail: args
              }));
            };
            let parent = this;
            while (parent = parent && (parent.parentNode || parent.host)) {
              if (parent instanceof VueElement) {
                instance.parent = parent._instance;
                break;
              }
            }
          };
        }
        return vnode;
      }
      _applyStyles(styles) {
        if (styles) {
          styles.forEach((css) => {
            const s2 = document.createElement("style");
            s2.textContent = css;
            this.shadowRoot.appendChild(s2);
          });
        }
      }
    }
    function useCssModule(name = "$style") {
      {
        const instance = getCurrentInstance();
        if (!instance) {
          return EMPTY_OBJ;
        }
        const modules = instance.type.__cssModules;
        if (!modules) {
          return EMPTY_OBJ;
        }
        const mod = modules[name];
        if (!mod) {
          return EMPTY_OBJ;
        }
        return mod;
      }
    }
    function useCssVars(getter) {
      const instance = getCurrentInstance();
      if (!instance) {
        return;
      }
      const setVars = () => setVarsOnVNode(instance.subTree, getter(instance.proxy));
      watchPostEffect(setVars);
      onMounted(() => {
        const ob = new MutationObserver(setVars);
        ob.observe(instance.subTree.el.parentNode, { childList: true });
        onUnmounted(() => ob.disconnect());
      });
    }
    function setVarsOnVNode(vnode, vars) {
      if (vnode.shapeFlag & 128) {
        const suspense = vnode.suspense;
        vnode = suspense.activeBranch;
        if (suspense.pendingBranch && !suspense.isHydrating) {
          suspense.effects.push(() => {
            setVarsOnVNode(suspense.activeBranch, vars);
          });
        }
      }
      while (vnode.component) {
        vnode = vnode.component.subTree;
      }
      if (vnode.shapeFlag & 1 && vnode.el) {
        setVarsOnNode(vnode.el, vars);
      } else if (vnode.type === Fragment) {
        vnode.children.forEach((c2) => setVarsOnVNode(c2, vars));
      } else if (vnode.type === Static) {
        let { el, anchor } = vnode;
        while (el) {
          setVarsOnNode(el, vars);
          if (el === anchor)
            break;
          el = el.nextSibling;
        }
      }
    }
    function setVarsOnNode(el, vars) {
      if (el.nodeType === 1) {
        const style2 = el.style;
        for (const key in vars) {
          style2.setProperty(`--${key}`, vars[key]);
        }
      }
    }
    const TRANSITION = "transition";
    const ANIMATION = "animation";
    const Transition = (props, { slots }) => h$2(BaseTransition, resolveTransitionProps(props), slots);
    Transition.displayName = "Transition";
    const DOMTransitionPropsValidators = {
      name: String,
      type: String,
      css: {
        type: Boolean,
        default: true
      },
      duration: [String, Number, Object],
      enterFromClass: String,
      enterActiveClass: String,
      enterToClass: String,
      appearFromClass: String,
      appearActiveClass: String,
      appearToClass: String,
      leaveFromClass: String,
      leaveActiveClass: String,
      leaveToClass: String
    };
    const TransitionPropsValidators = Transition.props = /* @__PURE__ */ extend$1({}, BaseTransition.props, DOMTransitionPropsValidators);
    const callHook = (hook2, args = []) => {
      if (isArray$6(hook2)) {
        hook2.forEach((h2) => h2(...args));
      } else if (hook2) {
        hook2(...args);
      }
    };
    const hasExplicitCallback = (hook2) => {
      return hook2 ? isArray$6(hook2) ? hook2.some((h2) => h2.length > 1) : hook2.length > 1 : false;
    };
    function resolveTransitionProps(rawProps) {
      const baseProps = {};
      for (const key in rawProps) {
        if (!(key in DOMTransitionPropsValidators)) {
          baseProps[key] = rawProps[key];
        }
      }
      if (rawProps.css === false) {
        return baseProps;
      }
      const { name = "v", type: type2, duration, enterFromClass = `${name}-enter-from`, enterActiveClass = `${name}-enter-active`, enterToClass = `${name}-enter-to`, appearFromClass = enterFromClass, appearActiveClass = enterActiveClass, appearToClass = enterToClass, leaveFromClass = `${name}-leave-from`, leaveActiveClass = `${name}-leave-active`, leaveToClass = `${name}-leave-to` } = rawProps;
      const durations = normalizeDuration(duration);
      const enterDuration = durations && durations[0];
      const leaveDuration = durations && durations[1];
      const { onBeforeEnter, onEnter, onEnterCancelled, onLeave, onLeaveCancelled, onBeforeAppear = onBeforeEnter, onAppear = onEnter, onAppearCancelled = onEnterCancelled } = baseProps;
      const finishEnter = (el, isAppear, done2) => {
        removeTransitionClass(el, isAppear ? appearToClass : enterToClass);
        removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);
        done2 && done2();
      };
      const finishLeave = (el, done2) => {
        el._isLeaving = false;
        removeTransitionClass(el, leaveFromClass);
        removeTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveActiveClass);
        done2 && done2();
      };
      const makeEnterHook = (isAppear) => {
        return (el, done2) => {
          const hook2 = isAppear ? onAppear : onEnter;
          const resolve2 = () => finishEnter(el, isAppear, done2);
          callHook(hook2, [el, resolve2]);
          nextFrame(() => {
            removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);
            addTransitionClass(el, isAppear ? appearToClass : enterToClass);
            if (!hasExplicitCallback(hook2)) {
              whenTransitionEnds(el, type2, enterDuration, resolve2);
            }
          });
        };
      };
      return extend$1(baseProps, {
        onBeforeEnter(el) {
          callHook(onBeforeEnter, [el]);
          addTransitionClass(el, enterFromClass);
          addTransitionClass(el, enterActiveClass);
        },
        onBeforeAppear(el) {
          callHook(onBeforeAppear, [el]);
          addTransitionClass(el, appearFromClass);
          addTransitionClass(el, appearActiveClass);
        },
        onEnter: makeEnterHook(false),
        onAppear: makeEnterHook(true),
        onLeave(el, done2) {
          el._isLeaving = true;
          const resolve2 = () => finishLeave(el, done2);
          addTransitionClass(el, leaveFromClass);
          forceReflow();
          addTransitionClass(el, leaveActiveClass);
          nextFrame(() => {
            if (!el._isLeaving) {
              return;
            }
            removeTransitionClass(el, leaveFromClass);
            addTransitionClass(el, leaveToClass);
            if (!hasExplicitCallback(onLeave)) {
              whenTransitionEnds(el, type2, leaveDuration, resolve2);
            }
          });
          callHook(onLeave, [el, resolve2]);
        },
        onEnterCancelled(el) {
          finishEnter(el, false);
          callHook(onEnterCancelled, [el]);
        },
        onAppearCancelled(el) {
          finishEnter(el, true);
          callHook(onAppearCancelled, [el]);
        },
        onLeaveCancelled(el) {
          finishLeave(el);
          callHook(onLeaveCancelled, [el]);
        }
      });
    }
    function normalizeDuration(duration) {
      if (duration == null) {
        return null;
      } else if (isObject$7(duration)) {
        return [NumberOf(duration.enter), NumberOf(duration.leave)];
      } else {
        const n2 = NumberOf(duration);
        return [n2, n2];
      }
    }
    function NumberOf(val) {
      const res = toNumber$1(val);
      return res;
    }
    function addTransitionClass(el, cls) {
      cls.split(/\s+/).forEach((c2) => c2 && el.classList.add(c2));
      (el._vtc || (el._vtc = /* @__PURE__ */ new Set())).add(cls);
    }
    function removeTransitionClass(el, cls) {
      cls.split(/\s+/).forEach((c2) => c2 && el.classList.remove(c2));
      const { _vtc } = el;
      if (_vtc) {
        _vtc.delete(cls);
        if (!_vtc.size) {
          el._vtc = void 0;
        }
      }
    }
    function nextFrame(cb) {
      requestAnimationFrame(() => {
        requestAnimationFrame(cb);
      });
    }
    let endId = 0;
    function whenTransitionEnds(el, expectedType, explicitTimeout, resolve2) {
      const id2 = el._endId = ++endId;
      const resolveIfNotStale = () => {
        if (id2 === el._endId) {
          resolve2();
        }
      };
      if (explicitTimeout) {
        return setTimeout(resolveIfNotStale, explicitTimeout);
      }
      const { type: type2, timeout, propCount } = getTransitionInfo(el, expectedType);
      if (!type2) {
        return resolve2();
      }
      const endEvent = type2 + "end";
      let ended = 0;
      const end2 = () => {
        el.removeEventListener(endEvent, onEnd);
        resolveIfNotStale();
      };
      const onEnd = (e2) => {
        if (e2.target === el && ++ended >= propCount) {
          end2();
        }
      };
      setTimeout(() => {
        if (ended < propCount) {
          end2();
        }
      }, timeout + 1);
      el.addEventListener(endEvent, onEnd);
    }
    function getTransitionInfo(el, expectedType) {
      const styles = window.getComputedStyle(el);
      const getStyleProperties = (key) => (styles[key] || "").split(", ");
      const transitionDelays = getStyleProperties(TRANSITION + "Delay");
      const transitionDurations = getStyleProperties(TRANSITION + "Duration");
      const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
      const animationDelays = getStyleProperties(ANIMATION + "Delay");
      const animationDurations = getStyleProperties(ANIMATION + "Duration");
      const animationTimeout = getTimeout(animationDelays, animationDurations);
      let type2 = null;
      let timeout = 0;
      let propCount = 0;
      if (expectedType === TRANSITION) {
        if (transitionTimeout > 0) {
          type2 = TRANSITION;
          timeout = transitionTimeout;
          propCount = transitionDurations.length;
        }
      } else if (expectedType === ANIMATION) {
        if (animationTimeout > 0) {
          type2 = ANIMATION;
          timeout = animationTimeout;
          propCount = animationDurations.length;
        }
      } else {
        timeout = Math.max(transitionTimeout, animationTimeout);
        type2 = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
        propCount = type2 ? type2 === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
      }
      const hasTransform = type2 === TRANSITION && /\b(transform|all)(,|$)/.test(styles[TRANSITION + "Property"]);
      return {
        type: type2,
        timeout,
        propCount,
        hasTransform
      };
    }
    function getTimeout(delays, durations) {
      while (delays.length < durations.length) {
        delays = delays.concat(delays);
      }
      return Math.max(...durations.map((d2, i2) => toMs(d2) + toMs(delays[i2])));
    }
    function toMs(s2) {
      return Number(s2.slice(0, -1).replace(",", ".")) * 1e3;
    }
    function forceReflow() {
      return document.body.offsetHeight;
    }
    const positionMap = /* @__PURE__ */ new WeakMap();
    const newPositionMap = /* @__PURE__ */ new WeakMap();
    const TransitionGroupImpl = {
      name: "TransitionGroup",
      props: /* @__PURE__ */ extend$1({}, TransitionPropsValidators, {
        tag: String,
        moveClass: String
      }),
      setup(props, { slots }) {
        const instance = getCurrentInstance();
        const state = useTransitionState();
        let prevChildren;
        let children;
        onUpdated(() => {
          if (!prevChildren.length) {
            return;
          }
          const moveClass = props.moveClass || `${props.name || "v"}-move`;
          if (!hasCSSTransform(prevChildren[0].el, instance.vnode.el, moveClass)) {
            return;
          }
          prevChildren.forEach(callPendingCbs);
          prevChildren.forEach(recordPosition);
          const movedChildren = prevChildren.filter(applyTranslation);
          forceReflow();
          movedChildren.forEach((c2) => {
            const el = c2.el;
            const style2 = el.style;
            addTransitionClass(el, moveClass);
            style2.transform = style2.webkitTransform = style2.transitionDuration = "";
            const cb = el._moveCb = (e2) => {
              if (e2 && e2.target !== el) {
                return;
              }
              if (!e2 || /transform$/.test(e2.propertyName)) {
                el.removeEventListener("transitionend", cb);
                el._moveCb = null;
                removeTransitionClass(el, moveClass);
              }
            };
            el.addEventListener("transitionend", cb);
          });
        });
        return () => {
          const rawProps = toRaw(props);
          const cssTransitionProps = resolveTransitionProps(rawProps);
          let tag = rawProps.tag || Fragment;
          prevChildren = children;
          children = slots.default ? getTransitionRawChildren(slots.default()) : [];
          for (let i2 = 0; i2 < children.length; i2++) {
            const child = children[i2];
            if (child.key != null) {
              setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));
            }
          }
          if (prevChildren) {
            for (let i2 = 0; i2 < prevChildren.length; i2++) {
              const child = prevChildren[i2];
              setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));
              positionMap.set(child, child.el.getBoundingClientRect());
            }
          }
          return createVNode(tag, null, children);
        };
      }
    };
    const TransitionGroup = TransitionGroupImpl;
    function callPendingCbs(c2) {
      const el = c2.el;
      if (el._moveCb) {
        el._moveCb();
      }
      if (el._enterCb) {
        el._enterCb();
      }
    }
    function recordPosition(c2) {
      newPositionMap.set(c2, c2.el.getBoundingClientRect());
    }
    function applyTranslation(c2) {
      const oldPos = positionMap.get(c2);
      const newPos = newPositionMap.get(c2);
      const dx = oldPos.left - newPos.left;
      const dy = oldPos.top - newPos.top;
      if (dx || dy) {
        const s2 = c2.el.style;
        s2.transform = s2.webkitTransform = `translate(${dx}px,${dy}px)`;
        s2.transitionDuration = "0s";
        return c2;
      }
    }
    function hasCSSTransform(el, root2, moveClass) {
      const clone2 = el.cloneNode();
      if (el._vtc) {
        el._vtc.forEach((cls) => {
          cls.split(/\s+/).forEach((c2) => c2 && clone2.classList.remove(c2));
        });
      }
      moveClass.split(/\s+/).forEach((c2) => c2 && clone2.classList.add(c2));
      clone2.style.display = "none";
      const container = root2.nodeType === 1 ? root2 : root2.parentNode;
      container.appendChild(clone2);
      const { hasTransform } = getTransitionInfo(clone2);
      container.removeChild(clone2);
      return hasTransform;
    }
    const getModelAssigner = (vnode) => {
      const fn2 = vnode.props["onUpdate:modelValue"] || false;
      return isArray$6(fn2) ? (value) => invokeArrayFns(fn2, value) : fn2;
    };
    function onCompositionStart(e2) {
      e2.target.composing = true;
    }
    function onCompositionEnd(e2) {
      const target = e2.target;
      if (target.composing) {
        target.composing = false;
        target.dispatchEvent(new Event("input"));
      }
    }
    const vModelText = {
      created(el, { modifiers: { lazy, trim, number: number2 } }, vnode) {
        el._assign = getModelAssigner(vnode);
        const castToNumber = number2 || vnode.props && vnode.props.type === "number";
        addEventListener(el, lazy ? "change" : "input", (e2) => {
          if (e2.target.composing)
            return;
          let domValue = el.value;
          if (trim) {
            domValue = domValue.trim();
          }
          if (castToNumber) {
            domValue = toNumber$1(domValue);
          }
          el._assign(domValue);
        });
        if (trim) {
          addEventListener(el, "change", () => {
            el.value = el.value.trim();
          });
        }
        if (!lazy) {
          addEventListener(el, "compositionstart", onCompositionStart);
          addEventListener(el, "compositionend", onCompositionEnd);
          addEventListener(el, "change", onCompositionEnd);
        }
      },
      mounted(el, { value }) {
        el.value = value == null ? "" : value;
      },
      beforeUpdate(el, { value, modifiers: { lazy, trim, number: number2 } }, vnode) {
        el._assign = getModelAssigner(vnode);
        if (el.composing)
          return;
        if (document.activeElement === el && el.type !== "range") {
          if (lazy) {
            return;
          }
          if (trim && el.value.trim() === value) {
            return;
          }
          if ((number2 || el.type === "number") && toNumber$1(el.value) === value) {
            return;
          }
        }
        const newValue = value == null ? "" : value;
        if (el.value !== newValue) {
          el.value = newValue;
        }
      }
    };
    const vModelCheckbox = {
      deep: true,
      created(el, _2, vnode) {
        el._assign = getModelAssigner(vnode);
        addEventListener(el, "change", () => {
          const modelValue = el._modelValue;
          const elementValue = getValue$2(el);
          const checked2 = el.checked;
          const assign2 = el._assign;
          if (isArray$6(modelValue)) {
            const index2 = looseIndexOf(modelValue, elementValue);
            const found = index2 !== -1;
            if (checked2 && !found) {
              assign2(modelValue.concat(elementValue));
            } else if (!checked2 && found) {
              const filtered = [...modelValue];
              filtered.splice(index2, 1);
              assign2(filtered);
            }
          } else if (isSet$2(modelValue)) {
            const cloned = new Set(modelValue);
            if (checked2) {
              cloned.add(elementValue);
            } else {
              cloned.delete(elementValue);
            }
            assign2(cloned);
          } else {
            assign2(getCheckboxValue(el, checked2));
          }
        });
      },
      mounted: setChecked,
      beforeUpdate(el, binding2, vnode) {
        el._assign = getModelAssigner(vnode);
        setChecked(el, binding2, vnode);
      }
    };
    function setChecked(el, { value, oldValue }, vnode) {
      el._modelValue = value;
      if (isArray$6(value)) {
        el.checked = looseIndexOf(value, vnode.props.value) > -1;
      } else if (isSet$2(value)) {
        el.checked = value.has(vnode.props.value);
      } else if (value !== oldValue) {
        el.checked = looseEqual(value, getCheckboxValue(el, true));
      }
    }
    const vModelRadio = {
      created(el, { value }, vnode) {
        el.checked = looseEqual(value, vnode.props.value);
        el._assign = getModelAssigner(vnode);
        addEventListener(el, "change", () => {
          el._assign(getValue$2(el));
        });
      },
      beforeUpdate(el, { value, oldValue }, vnode) {
        el._assign = getModelAssigner(vnode);
        if (value !== oldValue) {
          el.checked = looseEqual(value, vnode.props.value);
        }
      }
    };
    const vModelSelect = {
      deep: true,
      created(el, { value, modifiers: { number: number2 } }, vnode) {
        const isSetModel = isSet$2(value);
        addEventListener(el, "change", () => {
          const selectedVal = Array.prototype.filter.call(el.options, (o2) => o2.selected).map((o2) => number2 ? toNumber$1(getValue$2(o2)) : getValue$2(o2));
          el._assign(el.multiple ? isSetModel ? new Set(selectedVal) : selectedVal : selectedVal[0]);
        });
        el._assign = getModelAssigner(vnode);
      },
      mounted(el, { value }) {
        setSelected(el, value);
      },
      beforeUpdate(el, _binding, vnode) {
        el._assign = getModelAssigner(vnode);
      },
      updated(el, { value }) {
        setSelected(el, value);
      }
    };
    function setSelected(el, value) {
      const isMultiple = el.multiple;
      if (isMultiple && !isArray$6(value) && !isSet$2(value)) {
        return;
      }
      for (let i2 = 0, l2 = el.options.length; i2 < l2; i2++) {
        const option = el.options[i2];
        const optionValue = getValue$2(option);
        if (isMultiple) {
          if (isArray$6(value)) {
            option.selected = looseIndexOf(value, optionValue) > -1;
          } else {
            option.selected = value.has(optionValue);
          }
        } else {
          if (looseEqual(getValue$2(option), value)) {
            if (el.selectedIndex !== i2)
              el.selectedIndex = i2;
            return;
          }
        }
      }
      if (!isMultiple && el.selectedIndex !== -1) {
        el.selectedIndex = -1;
      }
    }
    function getValue$2(el) {
      return "_value" in el ? el._value : el.value;
    }
    function getCheckboxValue(el, checked2) {
      const key = checked2 ? "_trueValue" : "_falseValue";
      return key in el ? el[key] : checked2;
    }
    const vModelDynamic = {
      created(el, binding2, vnode) {
        callModelHook(el, binding2, vnode, null, "created");
      },
      mounted(el, binding2, vnode) {
        callModelHook(el, binding2, vnode, null, "mounted");
      },
      beforeUpdate(el, binding2, vnode, prevVNode) {
        callModelHook(el, binding2, vnode, prevVNode, "beforeUpdate");
      },
      updated(el, binding2, vnode, prevVNode) {
        callModelHook(el, binding2, vnode, prevVNode, "updated");
      }
    };
    function resolveDynamicModel(tagName, type2) {
      switch (tagName) {
        case "SELECT":
          return vModelSelect;
        case "TEXTAREA":
          return vModelText;
        default:
          switch (type2) {
            case "checkbox":
              return vModelCheckbox;
            case "radio":
              return vModelRadio;
            default:
              return vModelText;
          }
      }
    }
    function callModelHook(el, binding2, vnode, prevVNode, hook2) {
      const modelToUse = resolveDynamicModel(el.tagName, vnode.props && vnode.props.type);
      const fn2 = modelToUse[hook2];
      fn2 && fn2(el, binding2, vnode, prevVNode);
    }
    function initVModelForSSR() {
      vModelText.getSSRProps = ({ value }) => ({ value });
      vModelRadio.getSSRProps = ({ value }, vnode) => {
        if (vnode.props && looseEqual(vnode.props.value, value)) {
          return { checked: true };
        }
      };
      vModelCheckbox.getSSRProps = ({ value }, vnode) => {
        if (isArray$6(value)) {
          if (vnode.props && looseIndexOf(value, vnode.props.value) > -1) {
            return { checked: true };
          }
        } else if (isSet$2(value)) {
          if (vnode.props && value.has(vnode.props.value)) {
            return { checked: true };
          }
        } else if (value) {
          return { checked: true };
        }
      };
      vModelDynamic.getSSRProps = (binding2, vnode) => {
        if (typeof vnode.type !== "string") {
          return;
        }
        const modelToUse = resolveDynamicModel(
          vnode.type.toUpperCase(),
          vnode.props && vnode.props.type
        );
        if (modelToUse.getSSRProps) {
          return modelToUse.getSSRProps(binding2, vnode);
        }
      };
    }
    const systemModifiers = ["ctrl", "shift", "alt", "meta"];
    const modifierGuards = {
      stop: (e2) => e2.stopPropagation(),
      prevent: (e2) => e2.preventDefault(),
      self: (e2) => e2.target !== e2.currentTarget,
      ctrl: (e2) => !e2.ctrlKey,
      shift: (e2) => !e2.shiftKey,
      alt: (e2) => !e2.altKey,
      meta: (e2) => !e2.metaKey,
      left: (e2) => "button" in e2 && e2.button !== 0,
      middle: (e2) => "button" in e2 && e2.button !== 1,
      right: (e2) => "button" in e2 && e2.button !== 2,
      exact: (e2, modifiers) => systemModifiers.some((m2) => e2[`${m2}Key`] && !modifiers.includes(m2))
    };
    const withModifiers = (fn2, modifiers) => {
      return (event, ...args) => {
        for (let i2 = 0; i2 < modifiers.length; i2++) {
          const guard = modifierGuards[modifiers[i2]];
          if (guard && guard(event, modifiers))
            return;
        }
        return fn2(event, ...args);
      };
    };
    const keyNames = {
      esc: "escape",
      space: " ",
      up: "arrow-up",
      left: "arrow-left",
      right: "arrow-right",
      down: "arrow-down",
      delete: "backspace"
    };
    const withKeys = (fn2, modifiers) => {
      return (event) => {
        if (!("key" in event)) {
          return;
        }
        const eventKey = hyphenate(event.key);
        if (modifiers.some((k) => k === eventKey || keyNames[k] === eventKey)) {
          return fn2(event);
        }
      };
    };
    const vShow = {
      beforeMount(el, { value }, { transition }) {
        el._vod = el.style.display === "none" ? "" : el.style.display;
        if (transition && value) {
          transition.beforeEnter(el);
        } else {
          setDisplay(el, value);
        }
      },
      mounted(el, { value }, { transition }) {
        if (transition && value) {
          transition.enter(el);
        }
      },
      updated(el, { value, oldValue }, { transition }) {
        if (!value === !oldValue)
          return;
        if (transition) {
          if (value) {
            transition.beforeEnter(el);
            setDisplay(el, true);
            transition.enter(el);
          } else {
            transition.leave(el, () => {
              setDisplay(el, false);
            });
          }
        } else {
          setDisplay(el, value);
        }
      },
      beforeUnmount(el, { value }) {
        setDisplay(el, value);
      }
    };
    function setDisplay(el, value) {
      el.style.display = value ? el._vod : "none";
    }
    function initVShowForSSR() {
      vShow.getSSRProps = ({ value }) => {
        if (!value) {
          return { style: { display: "none" } };
        }
      };
    }
    const rendererOptions = /* @__PURE__ */ extend$1({ patchProp }, nodeOps);
    let renderer;
    let enabledHydration = false;
    function ensureRenderer() {
      return renderer || (renderer = createRenderer(rendererOptions));
    }
    function ensureHydrationRenderer() {
      renderer = enabledHydration ? renderer : createHydrationRenderer(rendererOptions);
      enabledHydration = true;
      return renderer;
    }
    const render$1 = (...args) => {
      ensureRenderer().render(...args);
    };
    const hydrate = (...args) => {
      ensureHydrationRenderer().hydrate(...args);
    };
    const createApp = (...args) => {
      const app2 = ensureRenderer().createApp(...args);
      const { mount } = app2;
      app2.mount = (containerOrSelector) => {
        const container = normalizeContainer(containerOrSelector);
        if (!container)
          return;
        const component2 = app2._component;
        if (!isFunction$4(component2) && !component2.render && !component2.template) {
          component2.template = container.innerHTML;
        }
        container.innerHTML = "";
        const proxy = mount(container, false, container instanceof SVGElement);
        if (container instanceof Element) {
          container.removeAttribute("v-cloak");
          container.setAttribute("data-v-app", "");
        }
        return proxy;
      };
      return app2;
    };
    const createSSRApp = (...args) => {
      const app2 = ensureHydrationRenderer().createApp(...args);
      const { mount } = app2;
      app2.mount = (containerOrSelector) => {
        const container = normalizeContainer(containerOrSelector);
        if (container) {
          return mount(container, true, container instanceof SVGElement);
        }
      };
      return app2;
    };
    function normalizeContainer(container) {
      if (isString$3(container)) {
        const res = document.querySelector(container);
        return res;
      }
      return container;
    }
    let ssrDirectiveInitialized = false;
    const initDirectivesForSSR = () => {
      if (!ssrDirectiveInitialized) {
        ssrDirectiveInitialized = true;
        initVModelForSSR();
        initVShowForSSR();
      }
    };
    const compile = () => {
    };
    const vue_runtime_esmBundler = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      compile,
      EffectScope,
      ReactiveEffect,
      customRef,
      effect,
      effectScope,
      getCurrentScope,
      isProxy,
      isReactive,
      isReadonly,
      isRef,
      isShallow,
      markRaw,
      onScopeDispose,
      proxyRefs,
      reactive,
      readonly,
      ref,
      shallowReactive,
      shallowReadonly,
      shallowRef,
      stop,
      toRaw,
      toRef,
      toRefs,
      triggerRef,
      unref,
      camelize,
      capitalize,
      normalizeClass,
      normalizeProps,
      normalizeStyle,
      toDisplayString: toDisplayString$1,
      toHandlerKey,
      BaseTransition,
      Comment,
      Fragment,
      KeepAlive,
      Static,
      Suspense,
      Teleport,
      Text,
      callWithAsyncErrorHandling,
      callWithErrorHandling,
      cloneVNode,
      compatUtils,
      computed,
      createBlock,
      createCommentVNode,
      createElementBlock,
      createElementVNode: createBaseVNode,
      createHydrationRenderer,
      createPropsRestProxy,
      createRenderer,
      createSlots,
      createStaticVNode,
      createTextVNode,
      createVNode,
      defineAsyncComponent,
      defineComponent,
      defineEmits,
      defineExpose,
      defineProps,
      get devtools() {
        return devtools$1;
      },
      getCurrentInstance,
      getTransitionRawChildren,
      guardReactiveProps,
      h: h$2,
      handleError,
      initCustomFormatter,
      inject,
      isMemoSame,
      isRuntimeOnly,
      isVNode,
      mergeDefaults,
      mergeProps,
      nextTick: nextTick$1,
      onActivated,
      onBeforeMount,
      onBeforeUnmount,
      onBeforeUpdate,
      onDeactivated,
      onErrorCaptured,
      onMounted,
      onRenderTracked,
      onRenderTriggered,
      onServerPrefetch,
      onUnmounted,
      onUpdated,
      openBlock,
      popScopeId,
      provide,
      pushScopeId,
      queuePostFlushCb,
      registerRuntimeCompiler,
      renderList,
      renderSlot,
      resolveComponent,
      resolveDirective,
      resolveDynamicComponent,
      resolveFilter,
      resolveTransitionHooks,
      setBlockTracking,
      setDevtoolsHook,
      setTransitionHooks,
      ssrContextKey,
      ssrUtils,
      toHandlers,
      transformVNodeArgs,
      useAttrs: useAttrs$1,
      useSSRContext,
      useSlots,
      useTransitionState,
      version: version$3,
      warn: warn$1,
      watch,
      watchEffect,
      watchPostEffect,
      watchSyncEffect,
      withAsyncContext,
      withCtx,
      withDefaults: withDefaults$3,
      withDirectives,
      withMemo,
      withScopeId,
      Transition,
      TransitionGroup,
      VueElement,
      createApp,
      createSSRApp,
      defineCustomElement,
      defineSSRCustomElement,
      hydrate,
      initDirectivesForSSR,
      render: render$1,
      useCssModule,
      useCssVars,
      vModelCheckbox,
      vModelDynamic,
      vModelRadio,
      vModelSelect,
      vModelText,
      vShow,
      withKeys,
      withModifiers
    }, Symbol.toStringTag, { value: "Module" }));
    var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
    function getDefaultExportFromCjs(x2) {
      return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
    }
    function getAugmentedNamespace(n2) {
      var f2 = n2.default;
      if (typeof f2 == "function") {
        var a2 = function() {
          return f2.apply(this, arguments);
        };
        a2.prototype = f2.prototype;
      } else
        a2 = {};
      Object.defineProperty(a2, "__esModule", { value: true });
      Object.keys(n2).forEach(function(k) {
        var d2 = Object.getOwnPropertyDescriptor(n2, k);
        Object.defineProperty(a2, k, d2.get ? d2 : {
          enumerable: true,
          get: function() {
            return n2[k];
          }
        });
      });
      return a2;
    }
    var vueI18n_cjs = {};
    /*!
      * @intlify/shared v9.1.10
      * (c) 2022 kazuya kawaguchi
      * Released under the MIT License.
      */
    const inBrowser$1 = typeof window !== "undefined";
    let mark;
    let measure;
    const RE_ARGS = /\{([0-9a-zA-Z]+)\}/g;
    function format$4(message2, ...args) {
      if (args.length === 1 && isObject$6(args[0])) {
        args = args[0];
      }
      if (!args || !args.hasOwnProperty) {
        args = {};
      }
      return message2.replace(RE_ARGS, (match, identifier) => {
        return args.hasOwnProperty(identifier) ? args[identifier] : "";
      });
    }
    const hasSymbol = typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol";
    const makeSymbol = (name) => hasSymbol ? Symbol(name) : name;
    const generateFormatCacheKey = (locale, key, source) => friendlyJSONstringify({ l: locale, k: key, s: source });
    const friendlyJSONstringify = (json2) => JSON.stringify(json2).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029").replace(/\u0027/g, "\\u0027");
    const isNumber$2 = (val) => typeof val === "number" && isFinite(val);
    const isDate$1 = (val) => toTypeString(val) === "[object Date]";
    const isRegExp$1 = (val) => toTypeString(val) === "[object RegExp]";
    const isEmptyObject$1 = (val) => isPlainObject$1(val) && Object.keys(val).length === 0;
    function warn(msg, err) {
      if (typeof console !== "undefined") {
        console.warn(`[intlify] ` + msg);
        if (err) {
          console.warn(err.stack);
        }
      }
    }
    const assign = Object.assign;
    let _globalThis;
    const getGlobalThis = () => {
      return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global$1 !== "undefined" ? global$1 : {});
    };
    function escapeHtml$1(rawText) {
      return rawText.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;");
    }
    const hasOwnProperty$f = Object.prototype.hasOwnProperty;
    function hasOwn$1(obj, key) {
      return hasOwnProperty$f.call(obj, key);
    }
    const isArray$5 = Array.isArray;
    const isFunction$3 = (val) => typeof val === "function";
    const isString$2 = (val) => typeof val === "string";
    const isBoolean$3 = (val) => typeof val === "boolean";
    const isSymbol$1 = (val) => typeof val === "symbol";
    const isObject$6 = (val) => val !== null && typeof val === "object";
    const isPromise = (val) => {
      return isObject$6(val) && isFunction$3(val.then) && isFunction$3(val.catch);
    };
    const objectToString$2 = Object.prototype.toString;
    const toTypeString = (value) => objectToString$2.call(value);
    const isPlainObject$1 = (val) => toTypeString(val) === "[object Object]";
    const toDisplayString = (val) => {
      return val == null ? "" : isArray$5(val) || isPlainObject$1(val) && val.toString === objectToString$2 ? JSON.stringify(val, null, 2) : String(val);
    };
    const RANGE = 2;
    function generateCodeFrame(source, start = 0, end2 = source.length) {
      const lines = source.split(/\r?\n/);
      let count = 0;
      const res = [];
      for (let i2 = 0; i2 < lines.length; i2++) {
        count += lines[i2].length + 1;
        if (count >= start) {
          for (let j2 = i2 - RANGE; j2 <= i2 + RANGE || end2 > count; j2++) {
            if (j2 < 0 || j2 >= lines.length)
              continue;
            const line = j2 + 1;
            res.push(`${line}${" ".repeat(3 - String(line).length)}|  ${lines[j2]}`);
            const lineLength = lines[j2].length;
            if (j2 === i2) {
              const pad = start - (count - lineLength) + 1;
              const length = Math.max(1, end2 > count ? lineLength - pad : end2 - start);
              res.push(`   |  ` + " ".repeat(pad) + "^".repeat(length));
            } else if (j2 > i2) {
              if (end2 > count) {
                const length = Math.max(Math.min(end2 - count, lineLength), 1);
                res.push(`   |  ` + "^".repeat(length));
              }
              count += lineLength + 1;
            }
          }
          break;
        }
      }
      return res.join("\n");
    }
    function createEmitter() {
      const events2 = /* @__PURE__ */ new Map();
      const emitter = {
        events: events2,
        on(event, handler) {
          const handlers = events2.get(event);
          const added = handlers && handlers.push(handler);
          if (!added) {
            events2.set(event, [handler]);
          }
        },
        off(event, handler) {
          const handlers = events2.get(event);
          if (handlers) {
            handlers.splice(handlers.indexOf(handler) >>> 0, 1);
          }
        },
        emit(event, payload) {
          (events2.get(event) || []).slice().map((handler) => handler(payload));
          (events2.get("*") || []).slice().map((handler) => handler(event, payload));
        }
      };
      return emitter;
    }
    const shared_esmBundler = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      assign,
      createEmitter,
      escapeHtml: escapeHtml$1,
      format: format$4,
      friendlyJSONstringify,
      generateCodeFrame,
      generateFormatCacheKey,
      getGlobalThis,
      hasOwn: hasOwn$1,
      inBrowser: inBrowser$1,
      isArray: isArray$5,
      isBoolean: isBoolean$3,
      isDate: isDate$1,
      isEmptyObject: isEmptyObject$1,
      isFunction: isFunction$3,
      isNumber: isNumber$2,
      isObject: isObject$6,
      isPlainObject: isPlainObject$1,
      isPromise,
      isRegExp: isRegExp$1,
      isString: isString$2,
      isSymbol: isSymbol$1,
      makeSymbol,
      mark,
      measure,
      objectToString: objectToString$2,
      toDisplayString,
      toTypeString,
      warn
    }, Symbol.toStringTag, { value: "Module" }));
    const require$$0$1 = /* @__PURE__ */ getAugmentedNamespace(shared_esmBundler);
    /*!
      * @intlify/message-resolver v9.1.10
      * (c) 2022 kazuya kawaguchi
      * Released under the MIT License.
      */
    const hasOwnProperty$e = Object.prototype.hasOwnProperty;
    function hasOwn(obj, key) {
      return hasOwnProperty$e.call(obj, key);
    }
    const isObject$5 = (val) => val !== null && typeof val === "object";
    const pathStateMachine = [];
    pathStateMachine[0] = {
      ["w"]: [0],
      ["i"]: [3, 0],
      ["["]: [4],
      ["o"]: [7]
    };
    pathStateMachine[1] = {
      ["w"]: [1],
      ["."]: [2],
      ["["]: [4],
      ["o"]: [7]
    };
    pathStateMachine[2] = {
      ["w"]: [2],
      ["i"]: [3, 0],
      ["0"]: [3, 0]
    };
    pathStateMachine[3] = {
      ["i"]: [3, 0],
      ["0"]: [3, 0],
      ["w"]: [1, 1],
      ["."]: [2, 1],
      ["["]: [4, 1],
      ["o"]: [7, 1]
    };
    pathStateMachine[4] = {
      ["'"]: [5, 0],
      ['"']: [6, 0],
      ["["]: [
        4,
        2
      ],
      ["]"]: [1, 3],
      ["o"]: 8,
      ["l"]: [4, 0]
    };
    pathStateMachine[5] = {
      ["'"]: [4, 0],
      ["o"]: 8,
      ["l"]: [5, 0]
    };
    pathStateMachine[6] = {
      ['"']: [4, 0],
      ["o"]: 8,
      ["l"]: [6, 0]
    };
    const literalValueRE = /^\s?(?:true|false|-?[\d.]+|'[^']*'|"[^"]*")\s?$/;
    function isLiteral(exp) {
      return literalValueRE.test(exp);
    }
    function stripQuotes(str2) {
      const a2 = str2.charCodeAt(0);
      const b2 = str2.charCodeAt(str2.length - 1);
      return a2 === b2 && (a2 === 34 || a2 === 39) ? str2.slice(1, -1) : str2;
    }
    function getPathCharType(ch) {
      if (ch === void 0 || ch === null) {
        return "o";
      }
      const code = ch.charCodeAt(0);
      switch (code) {
        case 91:
        case 93:
        case 46:
        case 34:
        case 39:
          return ch;
        case 95:
        case 36:
        case 45:
          return "i";
        case 9:
        case 10:
        case 13:
        case 160:
        case 65279:
        case 8232:
        case 8233:
          return "w";
      }
      return "i";
    }
    function formatSubPath(path) {
      const trimmed = path.trim();
      if (path.charAt(0) === "0" && isNaN(parseInt(path))) {
        return false;
      }
      return isLiteral(trimmed) ? stripQuotes(trimmed) : "*" + trimmed;
    }
    function parse$3(path) {
      const keys2 = [];
      let index2 = -1;
      let mode = 0;
      let subPathDepth = 0;
      let c2;
      let key;
      let newChar;
      let type2;
      let transition;
      let action;
      let typeMap;
      const actions = [];
      actions[0] = () => {
        if (key === void 0) {
          key = newChar;
        } else {
          key += newChar;
        }
      };
      actions[1] = () => {
        if (key !== void 0) {
          keys2.push(key);
          key = void 0;
        }
      };
      actions[2] = () => {
        actions[0]();
        subPathDepth++;
      };
      actions[3] = () => {
        if (subPathDepth > 0) {
          subPathDepth--;
          mode = 4;
          actions[0]();
        } else {
          subPathDepth = 0;
          if (key === void 0) {
            return false;
          }
          key = formatSubPath(key);
          if (key === false) {
            return false;
          } else {
            actions[1]();
          }
        }
      };
      function maybeUnescapeQuote() {
        const nextChar = path[index2 + 1];
        if (mode === 5 && nextChar === "'" || mode === 6 && nextChar === '"') {
          index2++;
          newChar = "\\" + nextChar;
          actions[0]();
          return true;
        }
      }
      while (mode !== null) {
        index2++;
        c2 = path[index2];
        if (c2 === "\\" && maybeUnescapeQuote()) {
          continue;
        }
        type2 = getPathCharType(c2);
        typeMap = pathStateMachine[mode];
        transition = typeMap[type2] || typeMap["l"] || 8;
        if (transition === 8) {
          return;
        }
        mode = transition[0];
        if (transition[1] !== void 0) {
          action = actions[transition[1]];
          if (action) {
            newChar = c2;
            if (action() === false) {
              return;
            }
          }
        }
        if (mode === 7) {
          return keys2;
        }
      }
    }
    const cache$1 = /* @__PURE__ */ new Map();
    function resolveValue(obj, path) {
      if (!isObject$5(obj)) {
        return null;
      }
      let hit = cache$1.get(path);
      if (!hit) {
        hit = parse$3(path);
        if (hit) {
          cache$1.set(path, hit);
        }
      }
      if (!hit) {
        return null;
      }
      const len = hit.length;
      let last = obj;
      let i2 = 0;
      while (i2 < len) {
        const val = last[hit[i2]];
        if (val === void 0) {
          return null;
        }
        last = val;
        i2++;
      }
      return last;
    }
    function handleFlatJson(obj) {
      if (!isObject$5(obj)) {
        return obj;
      }
      for (const key in obj) {
        if (!hasOwn(obj, key)) {
          continue;
        }
        if (!key.includes(".")) {
          if (isObject$5(obj[key])) {
            handleFlatJson(obj[key]);
          }
        } else {
          const subKeys = key.split(".");
          const lastIndex = subKeys.length - 1;
          let currentObj = obj;
          for (let i2 = 0; i2 < lastIndex; i2++) {
            if (!(subKeys[i2] in currentObj)) {
              currentObj[subKeys[i2]] = {};
            }
            currentObj = currentObj[subKeys[i2]];
          }
          currentObj[subKeys[lastIndex]] = obj[key];
          delete obj[key];
          if (isObject$5(currentObj[subKeys[lastIndex]])) {
            handleFlatJson(currentObj[subKeys[lastIndex]]);
          }
        }
      }
      return obj;
    }
    /*!
      * @intlify/runtime v9.1.10
      * (c) 2022 kazuya kawaguchi
      * Released under the MIT License.
      */
    const DEFAULT_MODIFIER = (str2) => str2;
    const DEFAULT_MESSAGE = (ctx) => "";
    const DEFAULT_MESSAGE_DATA_TYPE = "text";
    const DEFAULT_NORMALIZE = (values) => values.length === 0 ? "" : values.join("");
    const DEFAULT_INTERPOLATE = toDisplayString;
    function pluralDefault(choice, choicesLength) {
      choice = Math.abs(choice);
      if (choicesLength === 2) {
        return choice ? choice > 1 ? 1 : 0 : 1;
      }
      return choice ? Math.min(choice, 2) : 0;
    }
    function getPluralIndex(options) {
      const index2 = isNumber$2(options.pluralIndex) ? options.pluralIndex : -1;
      return options.named && (isNumber$2(options.named.count) || isNumber$2(options.named.n)) ? isNumber$2(options.named.count) ? options.named.count : isNumber$2(options.named.n) ? options.named.n : index2 : index2;
    }
    function normalizeNamed(pluralIndex, props) {
      if (!props.count) {
        props.count = pluralIndex;
      }
      if (!props.n) {
        props.n = pluralIndex;
      }
    }
    function createMessageContext(options = {}) {
      const locale = options.locale;
      const pluralIndex = getPluralIndex(options);
      const pluralRule = isObject$6(options.pluralRules) && isString$2(locale) && isFunction$3(options.pluralRules[locale]) ? options.pluralRules[locale] : pluralDefault;
      const orgPluralRule = isObject$6(options.pluralRules) && isString$2(locale) && isFunction$3(options.pluralRules[locale]) ? pluralDefault : void 0;
      const plural = (messages2) => messages2[pluralRule(pluralIndex, messages2.length, orgPluralRule)];
      const _list = options.list || [];
      const list = (index2) => _list[index2];
      const _named = options.named || {};
      isNumber$2(options.pluralIndex) && normalizeNamed(pluralIndex, _named);
      const named = (key) => _named[key];
      function message2(key) {
        const msg = isFunction$3(options.messages) ? options.messages(key) : isObject$6(options.messages) ? options.messages[key] : false;
        return !msg ? options.parent ? options.parent.message(key) : DEFAULT_MESSAGE : msg;
      }
      const _modifier = (name) => options.modifiers ? options.modifiers[name] : DEFAULT_MODIFIER;
      const normalize = isPlainObject$1(options.processor) && isFunction$3(options.processor.normalize) ? options.processor.normalize : DEFAULT_NORMALIZE;
      const interpolate = isPlainObject$1(options.processor) && isFunction$3(options.processor.interpolate) ? options.processor.interpolate : DEFAULT_INTERPOLATE;
      const type2 = isPlainObject$1(options.processor) && isString$2(options.processor.type) ? options.processor.type : DEFAULT_MESSAGE_DATA_TYPE;
      const ctx = {
        ["list"]: list,
        ["named"]: named,
        ["plural"]: plural,
        ["linked"]: (key, modifier) => {
          const msg = message2(key)(ctx);
          return isString$2(modifier) ? _modifier(modifier)(msg) : msg;
        },
        ["message"]: message2,
        ["type"]: type2,
        ["interpolate"]: interpolate,
        ["normalize"]: normalize
      };
      return ctx;
    }
    /*!
      * @intlify/message-compiler v9.1.10
      * (c) 2022 kazuya kawaguchi
      * Released under the MIT License.
      */
    function createCompileError(code, loc, options = {}) {
      const { domain: domain2, messages: messages2, args } = options;
      const msg = code;
      const error2 = new SyntaxError(String(msg));
      error2.code = code;
      if (loc) {
        error2.location = loc;
      }
      error2.domain = domain2;
      return error2;
    }
    function defaultOnError(error2) {
      throw error2;
    }
    function createPosition(line, column, offset2) {
      return { line, column, offset: offset2 };
    }
    function createLocation(start, end2, source) {
      const loc = { start, end: end2 };
      if (source != null) {
        loc.source = source;
      }
      return loc;
    }
    const CHAR_SP = " ";
    const CHAR_CR = "\r";
    const CHAR_LF = "\n";
    const CHAR_LS = String.fromCharCode(8232);
    const CHAR_PS = String.fromCharCode(8233);
    function createScanner(str2) {
      const _buf = str2;
      let _index = 0;
      let _line = 1;
      let _column = 1;
      let _peekOffset = 0;
      const isCRLF = (index3) => _buf[index3] === CHAR_CR && _buf[index3 + 1] === CHAR_LF;
      const isLF = (index3) => _buf[index3] === CHAR_LF;
      const isPS = (index3) => _buf[index3] === CHAR_PS;
      const isLS = (index3) => _buf[index3] === CHAR_LS;
      const isLineEnd = (index3) => isCRLF(index3) || isLF(index3) || isPS(index3) || isLS(index3);
      const index2 = () => _index;
      const line = () => _line;
      const column = () => _column;
      const peekOffset = () => _peekOffset;
      const charAt = (offset2) => isCRLF(offset2) || isPS(offset2) || isLS(offset2) ? CHAR_LF : _buf[offset2];
      const currentChar = () => charAt(_index);
      const currentPeek = () => charAt(_index + _peekOffset);
      function next() {
        _peekOffset = 0;
        if (isLineEnd(_index)) {
          _line++;
          _column = 0;
        }
        if (isCRLF(_index)) {
          _index++;
        }
        _index++;
        _column++;
        return _buf[_index];
      }
      function peek() {
        if (isCRLF(_index + _peekOffset)) {
          _peekOffset++;
        }
        _peekOffset++;
        return _buf[_index + _peekOffset];
      }
      function reset2() {
        _index = 0;
        _line = 1;
        _column = 1;
        _peekOffset = 0;
      }
      function resetPeek(offset2 = 0) {
        _peekOffset = offset2;
      }
      function skipToPeek() {
        const target = _index + _peekOffset;
        while (target !== _index) {
          next();
        }
        _peekOffset = 0;
      }
      return {
        index: index2,
        line,
        column,
        peekOffset,
        charAt,
        currentChar,
        currentPeek,
        next,
        peek,
        reset: reset2,
        resetPeek,
        skipToPeek
      };
    }
    const EOF = void 0;
    const LITERAL_DELIMITER = "'";
    const ERROR_DOMAIN$1 = "tokenizer";
    function createTokenizer(source, options = {}) {
      const location = options.location !== false;
      const _scnr = createScanner(source);
      const currentOffset = () => _scnr.index();
      const currentPosition = () => createPosition(_scnr.line(), _scnr.column(), _scnr.index());
      const _initLoc = currentPosition();
      const _initOffset = currentOffset();
      const _context = {
        currentType: 14,
        offset: _initOffset,
        startLoc: _initLoc,
        endLoc: _initLoc,
        lastType: 14,
        lastOffset: _initOffset,
        lastStartLoc: _initLoc,
        lastEndLoc: _initLoc,
        braceNest: 0,
        inLinked: false,
        text: ""
      };
      const context = () => _context;
      const { onError } = options;
      function emitError(code, pos, offset2, ...args) {
        const ctx = context();
        pos.column += offset2;
        pos.offset += offset2;
        if (onError) {
          const loc = createLocation(ctx.startLoc, pos);
          const err = createCompileError(code, loc, {
            domain: ERROR_DOMAIN$1,
            args
          });
          onError(err);
        }
      }
      function getToken(context2, type2, value) {
        context2.endLoc = currentPosition();
        context2.currentType = type2;
        const token = { type: type2 };
        if (location) {
          token.loc = createLocation(context2.startLoc, context2.endLoc);
        }
        if (value != null) {
          token.value = value;
        }
        return token;
      }
      const getEndToken = (context2) => getToken(context2, 14);
      function eat(scnr, ch) {
        if (scnr.currentChar() === ch) {
          scnr.next();
          return ch;
        } else {
          emitError(0, currentPosition(), 0, ch);
          return "";
        }
      }
      function peekSpaces(scnr) {
        let buf = "";
        while (scnr.currentPeek() === CHAR_SP || scnr.currentPeek() === CHAR_LF) {
          buf += scnr.currentPeek();
          scnr.peek();
        }
        return buf;
      }
      function skipSpaces(scnr) {
        const buf = peekSpaces(scnr);
        scnr.skipToPeek();
        return buf;
      }
      function isIdentifierStart(ch) {
        if (ch === EOF) {
          return false;
        }
        const cc = ch.charCodeAt(0);
        return cc >= 97 && cc <= 122 || cc >= 65 && cc <= 90 || cc === 95;
      }
      function isNumberStart(ch) {
        if (ch === EOF) {
          return false;
        }
        const cc = ch.charCodeAt(0);
        return cc >= 48 && cc <= 57;
      }
      function isNamedIdentifierStart(scnr, context2) {
        const { currentType } = context2;
        if (currentType !== 2) {
          return false;
        }
        peekSpaces(scnr);
        const ret = isIdentifierStart(scnr.currentPeek());
        scnr.resetPeek();
        return ret;
      }
      function isListIdentifierStart(scnr, context2) {
        const { currentType } = context2;
        if (currentType !== 2) {
          return false;
        }
        peekSpaces(scnr);
        const ch = scnr.currentPeek() === "-" ? scnr.peek() : scnr.currentPeek();
        const ret = isNumberStart(ch);
        scnr.resetPeek();
        return ret;
      }
      function isLiteralStart(scnr, context2) {
        const { currentType } = context2;
        if (currentType !== 2) {
          return false;
        }
        peekSpaces(scnr);
        const ret = scnr.currentPeek() === LITERAL_DELIMITER;
        scnr.resetPeek();
        return ret;
      }
      function isLinkedDotStart(scnr, context2) {
        const { currentType } = context2;
        if (currentType !== 8) {
          return false;
        }
        peekSpaces(scnr);
        const ret = scnr.currentPeek() === ".";
        scnr.resetPeek();
        return ret;
      }
      function isLinkedModifierStart(scnr, context2) {
        const { currentType } = context2;
        if (currentType !== 9) {
          return false;
        }
        peekSpaces(scnr);
        const ret = isIdentifierStart(scnr.currentPeek());
        scnr.resetPeek();
        return ret;
      }
      function isLinkedDelimiterStart(scnr, context2) {
        const { currentType } = context2;
        if (!(currentType === 8 || currentType === 12)) {
          return false;
        }
        peekSpaces(scnr);
        const ret = scnr.currentPeek() === ":";
        scnr.resetPeek();
        return ret;
      }
      function isLinkedReferStart(scnr, context2) {
        const { currentType } = context2;
        if (currentType !== 10) {
          return false;
        }
        const fn2 = () => {
          const ch = scnr.currentPeek();
          if (ch === "{") {
            return isIdentifierStart(scnr.peek());
          } else if (ch === "@" || ch === "%" || ch === "|" || ch === ":" || ch === "." || ch === CHAR_SP || !ch) {
            return false;
          } else if (ch === CHAR_LF) {
            scnr.peek();
            return fn2();
          } else {
            return isIdentifierStart(ch);
          }
        };
        const ret = fn2();
        scnr.resetPeek();
        return ret;
      }
      function isPluralStart(scnr) {
        peekSpaces(scnr);
        const ret = scnr.currentPeek() === "|";
        scnr.resetPeek();
        return ret;
      }
      function isTextStart(scnr, reset2 = true) {
        const fn2 = (hasSpace = false, prev = "", detectModulo = false) => {
          const ch = scnr.currentPeek();
          if (ch === "{") {
            return prev === "%" ? false : hasSpace;
          } else if (ch === "@" || !ch) {
            return prev === "%" ? true : hasSpace;
          } else if (ch === "%") {
            scnr.peek();
            return fn2(hasSpace, "%", true);
          } else if (ch === "|") {
            return prev === "%" || detectModulo ? true : !(prev === CHAR_SP || prev === CHAR_LF);
          } else if (ch === CHAR_SP) {
            scnr.peek();
            return fn2(true, CHAR_SP, detectModulo);
          } else if (ch === CHAR_LF) {
            scnr.peek();
            return fn2(true, CHAR_LF, detectModulo);
          } else {
            return true;
          }
        };
        const ret = fn2();
        reset2 && scnr.resetPeek();
        return ret;
      }
      function takeChar(scnr, fn2) {
        const ch = scnr.currentChar();
        if (ch === EOF) {
          return EOF;
        }
        if (fn2(ch)) {
          scnr.next();
          return ch;
        }
        return null;
      }
      function takeIdentifierChar(scnr) {
        const closure = (ch) => {
          const cc = ch.charCodeAt(0);
          return cc >= 97 && cc <= 122 || cc >= 65 && cc <= 90 || cc >= 48 && cc <= 57 || cc === 95 || cc === 36;
        };
        return takeChar(scnr, closure);
      }
      function takeDigit(scnr) {
        const closure = (ch) => {
          const cc = ch.charCodeAt(0);
          return cc >= 48 && cc <= 57;
        };
        return takeChar(scnr, closure);
      }
      function takeHexDigit(scnr) {
        const closure = (ch) => {
          const cc = ch.charCodeAt(0);
          return cc >= 48 && cc <= 57 || cc >= 65 && cc <= 70 || cc >= 97 && cc <= 102;
        };
        return takeChar(scnr, closure);
      }
      function getDigits(scnr) {
        let ch = "";
        let num = "";
        while (ch = takeDigit(scnr)) {
          num += ch;
        }
        return num;
      }
      function readText(scnr) {
        let buf = "";
        while (true) {
          const ch = scnr.currentChar();
          if (ch === "{" || ch === "}" || ch === "@" || ch === "|" || !ch) {
            break;
          } else if (ch === "%") {
            if (isTextStart(scnr)) {
              buf += ch;
              scnr.next();
            } else {
              break;
            }
          } else if (ch === CHAR_SP || ch === CHAR_LF) {
            if (isTextStart(scnr)) {
              buf += ch;
              scnr.next();
            } else if (isPluralStart(scnr)) {
              break;
            } else {
              buf += ch;
              scnr.next();
            }
          } else {
            buf += ch;
            scnr.next();
          }
        }
        return buf;
      }
      function readNamedIdentifier(scnr) {
        skipSpaces(scnr);
        let ch = "";
        let name = "";
        while (ch = takeIdentifierChar(scnr)) {
          name += ch;
        }
        if (scnr.currentChar() === EOF) {
          emitError(6, currentPosition(), 0);
        }
        return name;
      }
      function readListIdentifier(scnr) {
        skipSpaces(scnr);
        let value = "";
        if (scnr.currentChar() === "-") {
          scnr.next();
          value += `-${getDigits(scnr)}`;
        } else {
          value += getDigits(scnr);
        }
        if (scnr.currentChar() === EOF) {
          emitError(6, currentPosition(), 0);
        }
        return value;
      }
      function readLiteral(scnr) {
        skipSpaces(scnr);
        eat(scnr, `'`);
        let ch = "";
        let literal = "";
        const fn2 = (x2) => x2 !== LITERAL_DELIMITER && x2 !== CHAR_LF;
        while (ch = takeChar(scnr, fn2)) {
          if (ch === "\\") {
            literal += readEscapeSequence(scnr);
          } else {
            literal += ch;
          }
        }
        const current = scnr.currentChar();
        if (current === CHAR_LF || current === EOF) {
          emitError(2, currentPosition(), 0);
          if (current === CHAR_LF) {
            scnr.next();
            eat(scnr, `'`);
          }
          return literal;
        }
        eat(scnr, `'`);
        return literal;
      }
      function readEscapeSequence(scnr) {
        const ch = scnr.currentChar();
        switch (ch) {
          case "\\":
          case `'`:
            scnr.next();
            return `\\${ch}`;
          case "u":
            return readUnicodeEscapeSequence(scnr, ch, 4);
          case "U":
            return readUnicodeEscapeSequence(scnr, ch, 6);
          default:
            emitError(3, currentPosition(), 0, ch);
            return "";
        }
      }
      function readUnicodeEscapeSequence(scnr, unicode, digits) {
        eat(scnr, unicode);
        let sequence = "";
        for (let i2 = 0; i2 < digits; i2++) {
          const ch = takeHexDigit(scnr);
          if (!ch) {
            emitError(4, currentPosition(), 0, `\\${unicode}${sequence}${scnr.currentChar()}`);
            break;
          }
          sequence += ch;
        }
        return `\\${unicode}${sequence}`;
      }
      function readInvalidIdentifier(scnr) {
        skipSpaces(scnr);
        let ch = "";
        let identifiers = "";
        const closure = (ch2) => ch2 !== "{" && ch2 !== "}" && ch2 !== CHAR_SP && ch2 !== CHAR_LF;
        while (ch = takeChar(scnr, closure)) {
          identifiers += ch;
        }
        return identifiers;
      }
      function readLinkedModifier(scnr) {
        let ch = "";
        let name = "";
        while (ch = takeIdentifierChar(scnr)) {
          name += ch;
        }
        return name;
      }
      function readLinkedRefer(scnr) {
        const fn2 = (detect = false, buf) => {
          const ch = scnr.currentChar();
          if (ch === "{" || ch === "%" || ch === "@" || ch === "|" || !ch) {
            return buf;
          } else if (ch === CHAR_SP) {
            return buf;
          } else if (ch === CHAR_LF) {
            buf += ch;
            scnr.next();
            return fn2(detect, buf);
          } else {
            buf += ch;
            scnr.next();
            return fn2(true, buf);
          }
        };
        return fn2(false, "");
      }
      function readPlural(scnr) {
        skipSpaces(scnr);
        const plural = eat(scnr, "|");
        skipSpaces(scnr);
        return plural;
      }
      function readTokenInPlaceholder(scnr, context2) {
        let token = null;
        const ch = scnr.currentChar();
        switch (ch) {
          case "{":
            if (context2.braceNest >= 1) {
              emitError(8, currentPosition(), 0);
            }
            scnr.next();
            token = getToken(context2, 2, "{");
            skipSpaces(scnr);
            context2.braceNest++;
            return token;
          case "}":
            if (context2.braceNest > 0 && context2.currentType === 2) {
              emitError(7, currentPosition(), 0);
            }
            scnr.next();
            token = getToken(context2, 3, "}");
            context2.braceNest--;
            context2.braceNest > 0 && skipSpaces(scnr);
            if (context2.inLinked && context2.braceNest === 0) {
              context2.inLinked = false;
            }
            return token;
          case "@":
            if (context2.braceNest > 0) {
              emitError(6, currentPosition(), 0);
            }
            token = readTokenInLinked(scnr, context2) || getEndToken(context2);
            context2.braceNest = 0;
            return token;
          default:
            let validNamedIdentifier = true;
            let validListIdentifier = true;
            let validLiteral = true;
            if (isPluralStart(scnr)) {
              if (context2.braceNest > 0) {
                emitError(6, currentPosition(), 0);
              }
              token = getToken(context2, 1, readPlural(scnr));
              context2.braceNest = 0;
              context2.inLinked = false;
              return token;
            }
            if (context2.braceNest > 0 && (context2.currentType === 5 || context2.currentType === 6 || context2.currentType === 7)) {
              emitError(6, currentPosition(), 0);
              context2.braceNest = 0;
              return readToken(scnr, context2);
            }
            if (validNamedIdentifier = isNamedIdentifierStart(scnr, context2)) {
              token = getToken(context2, 5, readNamedIdentifier(scnr));
              skipSpaces(scnr);
              return token;
            }
            if (validListIdentifier = isListIdentifierStart(scnr, context2)) {
              token = getToken(context2, 6, readListIdentifier(scnr));
              skipSpaces(scnr);
              return token;
            }
            if (validLiteral = isLiteralStart(scnr, context2)) {
              token = getToken(context2, 7, readLiteral(scnr));
              skipSpaces(scnr);
              return token;
            }
            if (!validNamedIdentifier && !validListIdentifier && !validLiteral) {
              token = getToken(context2, 13, readInvalidIdentifier(scnr));
              emitError(1, currentPosition(), 0, token.value);
              skipSpaces(scnr);
              return token;
            }
            break;
        }
        return token;
      }
      function readTokenInLinked(scnr, context2) {
        const { currentType } = context2;
        let token = null;
        const ch = scnr.currentChar();
        if ((currentType === 8 || currentType === 9 || currentType === 12 || currentType === 10) && (ch === CHAR_LF || ch === CHAR_SP)) {
          emitError(9, currentPosition(), 0);
        }
        switch (ch) {
          case "@":
            scnr.next();
            token = getToken(context2, 8, "@");
            context2.inLinked = true;
            return token;
          case ".":
            skipSpaces(scnr);
            scnr.next();
            return getToken(context2, 9, ".");
          case ":":
            skipSpaces(scnr);
            scnr.next();
            return getToken(context2, 10, ":");
          default:
            if (isPluralStart(scnr)) {
              token = getToken(context2, 1, readPlural(scnr));
              context2.braceNest = 0;
              context2.inLinked = false;
              return token;
            }
            if (isLinkedDotStart(scnr, context2) || isLinkedDelimiterStart(scnr, context2)) {
              skipSpaces(scnr);
              return readTokenInLinked(scnr, context2);
            }
            if (isLinkedModifierStart(scnr, context2)) {
              skipSpaces(scnr);
              return getToken(context2, 12, readLinkedModifier(scnr));
            }
            if (isLinkedReferStart(scnr, context2)) {
              skipSpaces(scnr);
              if (ch === "{") {
                return readTokenInPlaceholder(scnr, context2) || token;
              } else {
                return getToken(context2, 11, readLinkedRefer(scnr));
              }
            }
            if (currentType === 8) {
              emitError(9, currentPosition(), 0);
            }
            context2.braceNest = 0;
            context2.inLinked = false;
            return readToken(scnr, context2);
        }
      }
      function readToken(scnr, context2) {
        let token = { type: 14 };
        if (context2.braceNest > 0) {
          return readTokenInPlaceholder(scnr, context2) || getEndToken(context2);
        }
        if (context2.inLinked) {
          return readTokenInLinked(scnr, context2) || getEndToken(context2);
        }
        const ch = scnr.currentChar();
        switch (ch) {
          case "{":
            return readTokenInPlaceholder(scnr, context2) || getEndToken(context2);
          case "}":
            emitError(5, currentPosition(), 0);
            scnr.next();
            return getToken(context2, 3, "}");
          case "@":
            return readTokenInLinked(scnr, context2) || getEndToken(context2);
          default:
            if (isPluralStart(scnr)) {
              token = getToken(context2, 1, readPlural(scnr));
              context2.braceNest = 0;
              context2.inLinked = false;
              return token;
            }
            if (isTextStart(scnr)) {
              return getToken(context2, 0, readText(scnr));
            }
            if (ch === "%") {
              scnr.next();
              return getToken(context2, 4, "%");
            }
            break;
        }
        return token;
      }
      function nextToken() {
        const { currentType, offset: offset2, startLoc, endLoc } = _context;
        _context.lastType = currentType;
        _context.lastOffset = offset2;
        _context.lastStartLoc = startLoc;
        _context.lastEndLoc = endLoc;
        _context.offset = currentOffset();
        _context.startLoc = currentPosition();
        if (_scnr.currentChar() === EOF) {
          return getToken(_context, 14);
        }
        return readToken(_scnr, _context);
      }
      return {
        nextToken,
        currentOffset,
        currentPosition,
        context
      };
    }
    const ERROR_DOMAIN = "parser";
    const KNOWN_ESCAPES = /(?:\\\\|\\'|\\u([0-9a-fA-F]{4})|\\U([0-9a-fA-F]{6}))/g;
    function fromEscapeSequence(match, codePoint4, codePoint6) {
      switch (match) {
        case `\\\\`:
          return `\\`;
        case `\\'`:
          return `'`;
        default: {
          const codePoint = parseInt(codePoint4 || codePoint6, 16);
          if (codePoint <= 55295 || codePoint >= 57344) {
            return String.fromCodePoint(codePoint);
          }
          return "\uFFFD";
        }
      }
    }
    function createParser(options = {}) {
      const location = options.location !== false;
      const { onError } = options;
      function emitError(tokenzer, code, start, offset2, ...args) {
        const end2 = tokenzer.currentPosition();
        end2.offset += offset2;
        end2.column += offset2;
        if (onError) {
          const loc = createLocation(start, end2);
          const err = createCompileError(code, loc, {
            domain: ERROR_DOMAIN,
            args
          });
          onError(err);
        }
      }
      function startNode(type2, offset2, loc) {
        const node = {
          type: type2,
          start: offset2,
          end: offset2
        };
        if (location) {
          node.loc = { start: loc, end: loc };
        }
        return node;
      }
      function endNode(node, offset2, pos, type2) {
        node.end = offset2;
        if (type2) {
          node.type = type2;
        }
        if (location && node.loc) {
          node.loc.end = pos;
        }
      }
      function parseText(tokenizer, value) {
        const context = tokenizer.context();
        const node = startNode(3, context.offset, context.startLoc);
        node.value = value;
        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
        return node;
      }
      function parseList(tokenizer, index2) {
        const context = tokenizer.context();
        const { lastOffset: offset2, lastStartLoc: loc } = context;
        const node = startNode(5, offset2, loc);
        node.index = parseInt(index2, 10);
        tokenizer.nextToken();
        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
        return node;
      }
      function parseNamed(tokenizer, key) {
        const context = tokenizer.context();
        const { lastOffset: offset2, lastStartLoc: loc } = context;
        const node = startNode(4, offset2, loc);
        node.key = key;
        tokenizer.nextToken();
        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
        return node;
      }
      function parseLiteral(tokenizer, value) {
        const context = tokenizer.context();
        const { lastOffset: offset2, lastStartLoc: loc } = context;
        const node = startNode(9, offset2, loc);
        node.value = value.replace(KNOWN_ESCAPES, fromEscapeSequence);
        tokenizer.nextToken();
        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
        return node;
      }
      function parseLinkedModifier(tokenizer) {
        const token = tokenizer.nextToken();
        const context = tokenizer.context();
        const { lastOffset: offset2, lastStartLoc: loc } = context;
        const node = startNode(8, offset2, loc);
        if (token.type !== 12) {
          emitError(tokenizer, 11, context.lastStartLoc, 0);
          node.value = "";
          endNode(node, offset2, loc);
          return {
            nextConsumeToken: token,
            node
          };
        }
        if (token.value == null) {
          emitError(tokenizer, 13, context.lastStartLoc, 0, getTokenCaption(token));
        }
        node.value = token.value || "";
        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
        return {
          node
        };
      }
      function parseLinkedKey(tokenizer, value) {
        const context = tokenizer.context();
        const node = startNode(7, context.offset, context.startLoc);
        node.value = value;
        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
        return node;
      }
      function parseLinked(tokenizer) {
        const context = tokenizer.context();
        const linkedNode = startNode(6, context.offset, context.startLoc);
        let token = tokenizer.nextToken();
        if (token.type === 9) {
          const parsed = parseLinkedModifier(tokenizer);
          linkedNode.modifier = parsed.node;
          token = parsed.nextConsumeToken || tokenizer.nextToken();
        }
        if (token.type !== 10) {
          emitError(tokenizer, 13, context.lastStartLoc, 0, getTokenCaption(token));
        }
        token = tokenizer.nextToken();
        if (token.type === 2) {
          token = tokenizer.nextToken();
        }
        switch (token.type) {
          case 11:
            if (token.value == null) {
              emitError(tokenizer, 13, context.lastStartLoc, 0, getTokenCaption(token));
            }
            linkedNode.key = parseLinkedKey(tokenizer, token.value || "");
            break;
          case 5:
            if (token.value == null) {
              emitError(tokenizer, 13, context.lastStartLoc, 0, getTokenCaption(token));
            }
            linkedNode.key = parseNamed(tokenizer, token.value || "");
            break;
          case 6:
            if (token.value == null) {
              emitError(tokenizer, 13, context.lastStartLoc, 0, getTokenCaption(token));
            }
            linkedNode.key = parseList(tokenizer, token.value || "");
            break;
          case 7:
            if (token.value == null) {
              emitError(tokenizer, 13, context.lastStartLoc, 0, getTokenCaption(token));
            }
            linkedNode.key = parseLiteral(tokenizer, token.value || "");
            break;
          default:
            emitError(tokenizer, 12, context.lastStartLoc, 0);
            const nextContext = tokenizer.context();
            const emptyLinkedKeyNode = startNode(7, nextContext.offset, nextContext.startLoc);
            emptyLinkedKeyNode.value = "";
            endNode(emptyLinkedKeyNode, nextContext.offset, nextContext.startLoc);
            linkedNode.key = emptyLinkedKeyNode;
            endNode(linkedNode, nextContext.offset, nextContext.startLoc);
            return {
              nextConsumeToken: token,
              node: linkedNode
            };
        }
        endNode(linkedNode, tokenizer.currentOffset(), tokenizer.currentPosition());
        return {
          node: linkedNode
        };
      }
      function parseMessage(tokenizer) {
        const context = tokenizer.context();
        const startOffset = context.currentType === 1 ? tokenizer.currentOffset() : context.offset;
        const startLoc = context.currentType === 1 ? context.endLoc : context.startLoc;
        const node = startNode(2, startOffset, startLoc);
        node.items = [];
        let nextToken = null;
        do {
          const token = nextToken || tokenizer.nextToken();
          nextToken = null;
          switch (token.type) {
            case 0:
              if (token.value == null) {
                emitError(tokenizer, 13, context.lastStartLoc, 0, getTokenCaption(token));
              }
              node.items.push(parseText(tokenizer, token.value || ""));
              break;
            case 6:
              if (token.value == null) {
                emitError(tokenizer, 13, context.lastStartLoc, 0, getTokenCaption(token));
              }
              node.items.push(parseList(tokenizer, token.value || ""));
              break;
            case 5:
              if (token.value == null) {
                emitError(tokenizer, 13, context.lastStartLoc, 0, getTokenCaption(token));
              }
              node.items.push(parseNamed(tokenizer, token.value || ""));
              break;
            case 7:
              if (token.value == null) {
                emitError(tokenizer, 13, context.lastStartLoc, 0, getTokenCaption(token));
              }
              node.items.push(parseLiteral(tokenizer, token.value || ""));
              break;
            case 8:
              const parsed = parseLinked(tokenizer);
              node.items.push(parsed.node);
              nextToken = parsed.nextConsumeToken || null;
              break;
          }
        } while (context.currentType !== 14 && context.currentType !== 1);
        const endOffset = context.currentType === 1 ? context.lastOffset : tokenizer.currentOffset();
        const endLoc = context.currentType === 1 ? context.lastEndLoc : tokenizer.currentPosition();
        endNode(node, endOffset, endLoc);
        return node;
      }
      function parsePlural(tokenizer, offset2, loc, msgNode) {
        const context = tokenizer.context();
        let hasEmptyMessage = msgNode.items.length === 0;
        const node = startNode(1, offset2, loc);
        node.cases = [];
        node.cases.push(msgNode);
        do {
          const msg = parseMessage(tokenizer);
          if (!hasEmptyMessage) {
            hasEmptyMessage = msg.items.length === 0;
          }
          node.cases.push(msg);
        } while (context.currentType !== 14);
        if (hasEmptyMessage) {
          emitError(tokenizer, 10, loc, 0);
        }
        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
        return node;
      }
      function parseResource(tokenizer) {
        const context = tokenizer.context();
        const { offset: offset2, startLoc } = context;
        const msgNode = parseMessage(tokenizer);
        if (context.currentType === 14) {
          return msgNode;
        } else {
          return parsePlural(tokenizer, offset2, startLoc, msgNode);
        }
      }
      function parse2(source) {
        const tokenizer = createTokenizer(source, assign({}, options));
        const context = tokenizer.context();
        const node = startNode(0, context.offset, context.startLoc);
        if (location && node.loc) {
          node.loc.source = source;
        }
        node.body = parseResource(tokenizer);
        if (context.currentType !== 14) {
          emitError(tokenizer, 13, context.lastStartLoc, 0, source[context.offset] || "");
        }
        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
        return node;
      }
      return { parse: parse2 };
    }
    function getTokenCaption(token) {
      if (token.type === 14) {
        return "EOF";
      }
      const name = (token.value || "").replace(/\r?\n/gu, "\\n");
      return name.length > 10 ? name.slice(0, 9) + "\u2026" : name;
    }
    function createTransformer(ast, options = {}) {
      const _context = {
        ast,
        helpers: /* @__PURE__ */ new Set()
      };
      const context = () => _context;
      const helper = (name) => {
        _context.helpers.add(name);
        return name;
      };
      return { context, helper };
    }
    function traverseNodes(nodes, transformer) {
      for (let i2 = 0; i2 < nodes.length; i2++) {
        traverseNode(nodes[i2], transformer);
      }
    }
    function traverseNode(node, transformer) {
      switch (node.type) {
        case 1:
          traverseNodes(node.cases, transformer);
          transformer.helper("plural");
          break;
        case 2:
          traverseNodes(node.items, transformer);
          break;
        case 6:
          const linked = node;
          traverseNode(linked.key, transformer);
          transformer.helper("linked");
          break;
        case 5:
          transformer.helper("interpolate");
          transformer.helper("list");
          break;
        case 4:
          transformer.helper("interpolate");
          transformer.helper("named");
          break;
      }
    }
    function transform(ast, options = {}) {
      const transformer = createTransformer(ast);
      transformer.helper("normalize");
      ast.body && traverseNode(ast.body, transformer);
      const context = transformer.context();
      ast.helpers = Array.from(context.helpers);
    }
    function createCodeGenerator(ast, options) {
      const { sourceMap, filename, breakLineCode, needIndent: _needIndent } = options;
      const _context = {
        source: ast.loc.source,
        filename,
        code: "",
        column: 1,
        line: 1,
        offset: 0,
        map: void 0,
        breakLineCode,
        needIndent: _needIndent,
        indentLevel: 0
      };
      const context = () => _context;
      function push(code, node) {
        _context.code += code;
      }
      function _newline(n2, withBreakLine = true) {
        const _breakLineCode = withBreakLine ? breakLineCode : "";
        push(_needIndent ? _breakLineCode + `  `.repeat(n2) : _breakLineCode);
      }
      function indent(withNewLine = true) {
        const level = ++_context.indentLevel;
        withNewLine && _newline(level);
      }
      function deindent(withNewLine = true) {
        const level = --_context.indentLevel;
        withNewLine && _newline(level);
      }
      function newline() {
        _newline(_context.indentLevel);
      }
      const helper = (key) => `_${key}`;
      const needIndent = () => _context.needIndent;
      return {
        context,
        push,
        indent,
        deindent,
        newline,
        helper,
        needIndent
      };
    }
    function generateLinkedNode(generator, node) {
      const { helper } = generator;
      generator.push(`${helper("linked")}(`);
      generateNode(generator, node.key);
      if (node.modifier) {
        generator.push(`, `);
        generateNode(generator, node.modifier);
      }
      generator.push(`)`);
    }
    function generateMessageNode(generator, node) {
      const { helper, needIndent } = generator;
      generator.push(`${helper("normalize")}([`);
      generator.indent(needIndent());
      const length = node.items.length;
      for (let i2 = 0; i2 < length; i2++) {
        generateNode(generator, node.items[i2]);
        if (i2 === length - 1) {
          break;
        }
        generator.push(", ");
      }
      generator.deindent(needIndent());
      generator.push("])");
    }
    function generatePluralNode(generator, node) {
      const { helper, needIndent } = generator;
      if (node.cases.length > 1) {
        generator.push(`${helper("plural")}([`);
        generator.indent(needIndent());
        const length = node.cases.length;
        for (let i2 = 0; i2 < length; i2++) {
          generateNode(generator, node.cases[i2]);
          if (i2 === length - 1) {
            break;
          }
          generator.push(", ");
        }
        generator.deindent(needIndent());
        generator.push(`])`);
      }
    }
    function generateResource(generator, node) {
      if (node.body) {
        generateNode(generator, node.body);
      } else {
        generator.push("null");
      }
    }
    function generateNode(generator, node) {
      const { helper } = generator;
      switch (node.type) {
        case 0:
          generateResource(generator, node);
          break;
        case 1:
          generatePluralNode(generator, node);
          break;
        case 2:
          generateMessageNode(generator, node);
          break;
        case 6:
          generateLinkedNode(generator, node);
          break;
        case 8:
          generator.push(JSON.stringify(node.value), node);
          break;
        case 7:
          generator.push(JSON.stringify(node.value), node);
          break;
        case 5:
          generator.push(`${helper("interpolate")}(${helper("list")}(${node.index}))`, node);
          break;
        case 4:
          generator.push(`${helper("interpolate")}(${helper("named")}(${JSON.stringify(node.key)}))`, node);
          break;
        case 9:
          generator.push(JSON.stringify(node.value), node);
          break;
        case 3:
          generator.push(JSON.stringify(node.value), node);
          break;
      }
    }
    const generate = (ast, options = {}) => {
      const mode = isString$2(options.mode) ? options.mode : "normal";
      const filename = isString$2(options.filename) ? options.filename : "message.intl";
      const sourceMap = !!options.sourceMap;
      const breakLineCode = options.breakLineCode != null ? options.breakLineCode : mode === "arrow" ? ";" : "\n";
      const needIndent = options.needIndent ? options.needIndent : mode !== "arrow";
      const helpers = ast.helpers || [];
      const generator = createCodeGenerator(ast, {
        mode,
        filename,
        sourceMap,
        breakLineCode,
        needIndent
      });
      generator.push(mode === "normal" ? `function __msg__ (ctx) {` : `(ctx) => {`);
      generator.indent(needIndent);
      if (helpers.length > 0) {
        generator.push(`const { ${helpers.map((s2) => `${s2}: _${s2}`).join(", ")} } = ctx`);
        generator.newline();
      }
      generator.push(`return `);
      generateNode(generator, ast);
      generator.deindent(needIndent);
      generator.push(`}`);
      const { code, map: map2 } = generator.context();
      return {
        ast,
        code,
        map: map2 ? map2.toJSON() : void 0
      };
    };
    function baseCompile(source, options = {}) {
      const assignedOptions = assign({}, options);
      const parser = createParser(assignedOptions);
      const ast = parser.parse(source);
      transform(ast, assignedOptions);
      return generate(ast, assignedOptions);
    }
    /*!
      * @intlify/devtools-if v9.1.10
      * (c) 2022 kazuya kawaguchi
      * Released under the MIT License.
      */
    const IntlifyDevToolsHooks = {
      I18nInit: "i18n:init",
      FunctionTranslate: "function:translate"
    };
    /*!
      * @intlify/core-base v9.1.10
      * (c) 2022 kazuya kawaguchi
      * Released under the MIT License.
      */
    let devtools = null;
    function setDevToolsHook(hook2) {
      devtools = hook2;
    }
    function getDevToolsHook() {
      return devtools;
    }
    function initI18nDevTools(i18n2, version2, meta) {
      devtools && devtools.emit(IntlifyDevToolsHooks.I18nInit, {
        timestamp: Date.now(),
        i18n: i18n2,
        version: version2,
        meta
      });
    }
    const translateDevTools = /* @__PURE__ */ createDevToolsHook(IntlifyDevToolsHooks.FunctionTranslate);
    function createDevToolsHook(hook2) {
      return (payloads) => devtools && devtools.emit(hook2, payloads);
    }
    const warnMessages$1 = {
      [0]: `Not found '{key}' key in '{locale}' locale messages.`,
      [1]: `Fall back to translate '{key}' key with '{target}' locale.`,
      [2]: `Cannot format a number value due to not supported Intl.NumberFormat.`,
      [3]: `Fall back to number format '{key}' key with '{target}' locale.`,
      [4]: `Cannot format a date value due to not supported Intl.DateTimeFormat.`,
      [5]: `Fall back to datetime format '{key}' key with '{target}' locale.`
    };
    function getWarnMessage$1(code, ...args) {
      return format$4(warnMessages$1[code], ...args);
    }
    const VERSION$6 = "9.1.10";
    const NOT_REOSLVED = -1;
    const MISSING_RESOLVE_VALUE = "";
    function getDefaultLinkedModifiers() {
      return {
        upper: (val) => isString$2(val) ? val.toUpperCase() : val,
        lower: (val) => isString$2(val) ? val.toLowerCase() : val,
        capitalize: (val) => isString$2(val) ? `${val.charAt(0).toLocaleUpperCase()}${val.substr(1)}` : val
      };
    }
    let _compiler;
    function registerMessageCompiler(compiler) {
      _compiler = compiler;
    }
    let _additionalMeta = null;
    const setAdditionalMeta = (meta) => {
      _additionalMeta = meta;
    };
    const getAdditionalMeta = () => _additionalMeta;
    let _cid = 0;
    function createCoreContext(options = {}) {
      const version2 = isString$2(options.version) ? options.version : VERSION$6;
      const locale = isString$2(options.locale) ? options.locale : "en-US";
      const fallbackLocale = isArray$5(options.fallbackLocale) || isPlainObject$1(options.fallbackLocale) || isString$2(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : locale;
      const messages2 = isPlainObject$1(options.messages) ? options.messages : { [locale]: {} };
      const datetimeFormats = isPlainObject$1(options.datetimeFormats) ? options.datetimeFormats : { [locale]: {} };
      const numberFormats = isPlainObject$1(options.numberFormats) ? options.numberFormats : { [locale]: {} };
      const modifiers = assign({}, options.modifiers || {}, getDefaultLinkedModifiers());
      const pluralRules = options.pluralRules || {};
      const missing = isFunction$3(options.missing) ? options.missing : null;
      const missingWarn = isBoolean$3(options.missingWarn) || isRegExp$1(options.missingWarn) ? options.missingWarn : true;
      const fallbackWarn = isBoolean$3(options.fallbackWarn) || isRegExp$1(options.fallbackWarn) ? options.fallbackWarn : true;
      const fallbackFormat = !!options.fallbackFormat;
      const unresolving = !!options.unresolving;
      const postTranslation = isFunction$3(options.postTranslation) ? options.postTranslation : null;
      const processor = isPlainObject$1(options.processor) ? options.processor : null;
      const warnHtmlMessage = isBoolean$3(options.warnHtmlMessage) ? options.warnHtmlMessage : true;
      const escapeParameter = !!options.escapeParameter;
      const messageCompiler = isFunction$3(options.messageCompiler) ? options.messageCompiler : _compiler;
      const onWarn = isFunction$3(options.onWarn) ? options.onWarn : warn;
      const internalOptions = options;
      const __datetimeFormatters = isObject$6(internalOptions.__datetimeFormatters) ? internalOptions.__datetimeFormatters : /* @__PURE__ */ new Map();
      const __numberFormatters = isObject$6(internalOptions.__numberFormatters) ? internalOptions.__numberFormatters : /* @__PURE__ */ new Map();
      const __meta = isObject$6(internalOptions.__meta) ? internalOptions.__meta : {};
      _cid++;
      const context = {
        version: version2,
        cid: _cid,
        locale,
        fallbackLocale,
        messages: messages2,
        datetimeFormats,
        numberFormats,
        modifiers,
        pluralRules,
        missing,
        missingWarn,
        fallbackWarn,
        fallbackFormat,
        unresolving,
        postTranslation,
        processor,
        warnHtmlMessage,
        escapeParameter,
        messageCompiler,
        onWarn,
        __datetimeFormatters,
        __numberFormatters,
        __meta
      };
      if (__INTLIFY_PROD_DEVTOOLS__) {
        initI18nDevTools(context, version2, __meta);
      }
      return context;
    }
    function isTranslateFallbackWarn(fallback, key) {
      return fallback instanceof RegExp ? fallback.test(key) : fallback;
    }
    function isTranslateMissingWarn(missing, key) {
      return missing instanceof RegExp ? missing.test(key) : missing;
    }
    function handleMissing(context, key, locale, missingWarn, type2) {
      const { missing, onWarn } = context;
      if (missing !== null) {
        const ret = missing(context, locale, key, type2);
        return isString$2(ret) ? ret : key;
      } else {
        return key;
      }
    }
    function getLocaleChain(ctx, fallback, start) {
      const context = ctx;
      if (!context.__localeChainCache) {
        context.__localeChainCache = /* @__PURE__ */ new Map();
      }
      let chain = context.__localeChainCache.get(start);
      if (!chain) {
        chain = [];
        let block = [start];
        while (isArray$5(block)) {
          block = appendBlockToChain(chain, block, fallback);
        }
        const defaults = isArray$5(fallback) ? fallback : isPlainObject$1(fallback) ? fallback["default"] ? fallback["default"] : null : fallback;
        block = isString$2(defaults) ? [defaults] : defaults;
        if (isArray$5(block)) {
          appendBlockToChain(chain, block, false);
        }
        context.__localeChainCache.set(start, chain);
      }
      return chain;
    }
    function appendBlockToChain(chain, block, blocks) {
      let follow = true;
      for (let i2 = 0; i2 < block.length && isBoolean$3(follow); i2++) {
        const locale = block[i2];
        if (isString$2(locale)) {
          follow = appendLocaleToChain(chain, block[i2], blocks);
        }
      }
      return follow;
    }
    function appendLocaleToChain(chain, locale, blocks) {
      let follow;
      const tokens = locale.split("-");
      do {
        const target = tokens.join("-");
        follow = appendItemToChain(chain, target, blocks);
        tokens.splice(-1, 1);
      } while (tokens.length && follow === true);
      return follow;
    }
    function appendItemToChain(chain, target, blocks) {
      let follow = false;
      if (!chain.includes(target)) {
        follow = true;
        if (target) {
          follow = target[target.length - 1] !== "!";
          const locale = target.replace(/!/g, "");
          chain.push(locale);
          if ((isArray$5(blocks) || isPlainObject$1(blocks)) && blocks[locale]) {
            follow = blocks[locale];
          }
        }
      }
      return follow;
    }
    function updateFallbackLocale(ctx, locale, fallback) {
      const context = ctx;
      context.__localeChainCache = /* @__PURE__ */ new Map();
      getLocaleChain(ctx, fallback, locale);
    }
    const defaultOnCacheKey = (source) => source;
    let compileCache = /* @__PURE__ */ Object.create(null);
    function clearCompileCache() {
      compileCache = /* @__PURE__ */ Object.create(null);
    }
    function compileToFunction(source, options = {}) {
      {
        const onCacheKey = options.onCacheKey || defaultOnCacheKey;
        const key = onCacheKey(source);
        const cached = compileCache[key];
        if (cached) {
          return cached;
        }
        let occurred = false;
        const onError = options.onError || defaultOnError;
        options.onError = (err) => {
          occurred = true;
          onError(err);
        };
        const { code } = baseCompile(source, options);
        const msg = new Function(`return ${code}`)();
        return !occurred ? compileCache[key] = msg : msg;
      }
    }
    function createCoreError(code) {
      return createCompileError(code, null, void 0);
    }
    const NOOP_MESSAGE_FUNCTION = () => "";
    const isMessageFunction = (val) => isFunction$3(val);
    function translate$1(context, ...args) {
      const { fallbackFormat, postTranslation, unresolving, fallbackLocale, messages: messages2 } = context;
      const [key, options] = parseTranslateArgs(...args);
      const missingWarn = isBoolean$3(options.missingWarn) ? options.missingWarn : context.missingWarn;
      const fallbackWarn = isBoolean$3(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;
      const escapeParameter = isBoolean$3(options.escapeParameter) ? options.escapeParameter : context.escapeParameter;
      const resolvedMessage = !!options.resolvedMessage;
      const defaultMsgOrKey = isString$2(options.default) || isBoolean$3(options.default) ? !isBoolean$3(options.default) ? options.default : key : fallbackFormat ? key : "";
      const enableDefaultMsg = fallbackFormat || defaultMsgOrKey !== "";
      const locale = isString$2(options.locale) ? options.locale : context.locale;
      escapeParameter && escapeParams(options);
      let [format2, targetLocale, message2] = !resolvedMessage ? resolveMessageFormat(context, key, locale, fallbackLocale, fallbackWarn, missingWarn) : [
        key,
        locale,
        messages2[locale] || {}
      ];
      let cacheBaseKey = key;
      if (!resolvedMessage && !(isString$2(format2) || isMessageFunction(format2))) {
        if (enableDefaultMsg) {
          format2 = defaultMsgOrKey;
          cacheBaseKey = format2;
        }
      }
      if (!resolvedMessage && (!(isString$2(format2) || isMessageFunction(format2)) || !isString$2(targetLocale))) {
        return unresolving ? NOT_REOSLVED : key;
      }
      let occurred = false;
      const errorDetector = () => {
        occurred = true;
      };
      const msg = !isMessageFunction(format2) ? compileMessageFormat(context, key, targetLocale, format2, cacheBaseKey, errorDetector) : format2;
      if (occurred) {
        return format2;
      }
      const ctxOptions = getMessageContextOptions(context, targetLocale, message2, options);
      const msgContext = createMessageContext(ctxOptions);
      const messaged = evaluateMessage(context, msg, msgContext);
      const ret = postTranslation ? postTranslation(messaged) : messaged;
      if (__INTLIFY_PROD_DEVTOOLS__) {
        const payloads = {
          timestamp: Date.now(),
          key: isString$2(key) ? key : isMessageFunction(format2) ? format2.key : "",
          locale: targetLocale || (isMessageFunction(format2) ? format2.locale : ""),
          format: isString$2(format2) ? format2 : isMessageFunction(format2) ? format2.source : "",
          message: ret
        };
        payloads.meta = assign({}, context.__meta, getAdditionalMeta() || {});
        translateDevTools(payloads);
      }
      return ret;
    }
    function escapeParams(options) {
      if (isArray$5(options.list)) {
        options.list = options.list.map((item) => isString$2(item) ? escapeHtml$1(item) : item);
      } else if (isObject$6(options.named)) {
        Object.keys(options.named).forEach((key) => {
          if (isString$2(options.named[key])) {
            options.named[key] = escapeHtml$1(options.named[key]);
          }
        });
      }
    }
    function resolveMessageFormat(context, key, locale, fallbackLocale, fallbackWarn, missingWarn) {
      const { messages: messages2, onWarn } = context;
      const locales = getLocaleChain(context, fallbackLocale, locale);
      let message2 = {};
      let targetLocale;
      let format2 = null;
      const type2 = "translate";
      for (let i2 = 0; i2 < locales.length; i2++) {
        targetLocale = locales[i2];
        message2 = messages2[targetLocale] || {};
        if ((format2 = resolveValue(message2, key)) === null) {
          format2 = message2[key];
        }
        if (isString$2(format2) || isFunction$3(format2))
          break;
        const missingRet = handleMissing(context, key, targetLocale, missingWarn, type2);
        if (missingRet !== key) {
          format2 = missingRet;
        }
      }
      return [format2, targetLocale, message2];
    }
    function compileMessageFormat(context, key, targetLocale, format2, cacheBaseKey, errorDetector) {
      const { messageCompiler, warnHtmlMessage } = context;
      if (isMessageFunction(format2)) {
        const msg2 = format2;
        msg2.locale = msg2.locale || targetLocale;
        msg2.key = msg2.key || key;
        return msg2;
      }
      const msg = messageCompiler(format2, getCompileOptions(context, targetLocale, cacheBaseKey, format2, warnHtmlMessage, errorDetector));
      msg.locale = targetLocale;
      msg.key = key;
      msg.source = format2;
      return msg;
    }
    function evaluateMessage(context, msg, msgCtx) {
      const messaged = msg(msgCtx);
      return messaged;
    }
    function parseTranslateArgs(...args) {
      const [arg1, arg2, arg3] = args;
      const options = {};
      if (!isString$2(arg1) && !isNumber$2(arg1) && !isMessageFunction(arg1)) {
        throw createCoreError(14);
      }
      const key = isNumber$2(arg1) ? String(arg1) : isMessageFunction(arg1) ? arg1 : arg1;
      if (isNumber$2(arg2)) {
        options.plural = arg2;
      } else if (isString$2(arg2)) {
        options.default = arg2;
      } else if (isPlainObject$1(arg2) && !isEmptyObject$1(arg2)) {
        options.named = arg2;
      } else if (isArray$5(arg2)) {
        options.list = arg2;
      }
      if (isNumber$2(arg3)) {
        options.plural = arg3;
      } else if (isString$2(arg3)) {
        options.default = arg3;
      } else if (isPlainObject$1(arg3)) {
        assign(options, arg3);
      }
      return [key, options];
    }
    function getCompileOptions(context, locale, key, source, warnHtmlMessage, errorDetector) {
      return {
        warnHtmlMessage,
        onError: (err) => {
          errorDetector && errorDetector(err);
          {
            throw err;
          }
        },
        onCacheKey: (source2) => generateFormatCacheKey(locale, key, source2)
      };
    }
    function getMessageContextOptions(context, locale, message2, options) {
      const { modifiers, pluralRules } = context;
      const resolveMessage = (key) => {
        const val = resolveValue(message2, key);
        if (isString$2(val)) {
          let occurred = false;
          const errorDetector = () => {
            occurred = true;
          };
          const msg = compileMessageFormat(context, key, locale, val, key, errorDetector);
          return !occurred ? msg : NOOP_MESSAGE_FUNCTION;
        } else if (isMessageFunction(val)) {
          return val;
        } else {
          return NOOP_MESSAGE_FUNCTION;
        }
      };
      const ctxOptions = {
        locale,
        modifiers,
        pluralRules,
        messages: resolveMessage
      };
      if (context.processor) {
        ctxOptions.processor = context.processor;
      }
      if (options.list) {
        ctxOptions.list = options.list;
      }
      if (options.named) {
        ctxOptions.named = options.named;
      }
      if (isNumber$2(options.plural)) {
        ctxOptions.pluralIndex = options.plural;
      }
      return ctxOptions;
    }
    function datetime(context, ...args) {
      const { datetimeFormats, unresolving, fallbackLocale, onWarn } = context;
      const { __datetimeFormatters } = context;
      const [key, value, options, overrides] = parseDateTimeArgs(...args);
      const missingWarn = isBoolean$3(options.missingWarn) ? options.missingWarn : context.missingWarn;
      isBoolean$3(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;
      const part = !!options.part;
      const locale = isString$2(options.locale) ? options.locale : context.locale;
      const locales = getLocaleChain(context, fallbackLocale, locale);
      if (!isString$2(key) || key === "") {
        return new Intl.DateTimeFormat(locale).format(value);
      }
      let datetimeFormat = {};
      let targetLocale;
      let format2 = null;
      const type2 = "datetime format";
      for (let i2 = 0; i2 < locales.length; i2++) {
        targetLocale = locales[i2];
        datetimeFormat = datetimeFormats[targetLocale] || {};
        format2 = datetimeFormat[key];
        if (isPlainObject$1(format2))
          break;
        handleMissing(context, key, targetLocale, missingWarn, type2);
      }
      if (!isPlainObject$1(format2) || !isString$2(targetLocale)) {
        return unresolving ? NOT_REOSLVED : key;
      }
      let id2 = `${targetLocale}__${key}`;
      if (!isEmptyObject$1(overrides)) {
        id2 = `${id2}__${JSON.stringify(overrides)}`;
      }
      let formatter2 = __datetimeFormatters.get(id2);
      if (!formatter2) {
        formatter2 = new Intl.DateTimeFormat(targetLocale, assign({}, format2, overrides));
        __datetimeFormatters.set(id2, formatter2);
      }
      return !part ? formatter2.format(value) : formatter2.formatToParts(value);
    }
    function parseDateTimeArgs(...args) {
      const [arg1, arg2, arg3, arg4] = args;
      let options = {};
      let overrides = {};
      let value;
      if (isString$2(arg1)) {
        if (!/\d{4}-\d{2}-\d{2}(T.*)?/.test(arg1)) {
          throw createCoreError(16);
        }
        value = new Date(arg1);
        try {
          value.toISOString();
        } catch (e2) {
          throw createCoreError(16);
        }
      } else if (isDate$1(arg1)) {
        if (isNaN(arg1.getTime())) {
          throw createCoreError(15);
        }
        value = arg1;
      } else if (isNumber$2(arg1)) {
        value = arg1;
      } else {
        throw createCoreError(14);
      }
      if (isString$2(arg2)) {
        options.key = arg2;
      } else if (isPlainObject$1(arg2)) {
        options = arg2;
      }
      if (isString$2(arg3)) {
        options.locale = arg3;
      } else if (isPlainObject$1(arg3)) {
        overrides = arg3;
      }
      if (isPlainObject$1(arg4)) {
        overrides = arg4;
      }
      return [options.key || "", value, options, overrides];
    }
    function clearDateTimeFormat(ctx, locale, format2) {
      const context = ctx;
      for (const key in format2) {
        const id2 = `${locale}__${key}`;
        if (!context.__datetimeFormatters.has(id2)) {
          continue;
        }
        context.__datetimeFormatters.delete(id2);
      }
    }
    function number$1(context, ...args) {
      const { numberFormats, unresolving, fallbackLocale, onWarn } = context;
      const { __numberFormatters } = context;
      const [key, value, options, overrides] = parseNumberArgs(...args);
      const missingWarn = isBoolean$3(options.missingWarn) ? options.missingWarn : context.missingWarn;
      isBoolean$3(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;
      const part = !!options.part;
      const locale = isString$2(options.locale) ? options.locale : context.locale;
      const locales = getLocaleChain(context, fallbackLocale, locale);
      if (!isString$2(key) || key === "") {
        return new Intl.NumberFormat(locale).format(value);
      }
      let numberFormat = {};
      let targetLocale;
      let format2 = null;
      const type2 = "number format";
      for (let i2 = 0; i2 < locales.length; i2++) {
        targetLocale = locales[i2];
        numberFormat = numberFormats[targetLocale] || {};
        format2 = numberFormat[key];
        if (isPlainObject$1(format2))
          break;
        handleMissing(context, key, targetLocale, missingWarn, type2);
      }
      if (!isPlainObject$1(format2) || !isString$2(targetLocale)) {
        return unresolving ? NOT_REOSLVED : key;
      }
      let id2 = `${targetLocale}__${key}`;
      if (!isEmptyObject$1(overrides)) {
        id2 = `${id2}__${JSON.stringify(overrides)}`;
      }
      let formatter2 = __numberFormatters.get(id2);
      if (!formatter2) {
        formatter2 = new Intl.NumberFormat(targetLocale, assign({}, format2, overrides));
        __numberFormatters.set(id2, formatter2);
      }
      return !part ? formatter2.format(value) : formatter2.formatToParts(value);
    }
    function parseNumberArgs(...args) {
      const [arg1, arg2, arg3, arg4] = args;
      let options = {};
      let overrides = {};
      if (!isNumber$2(arg1)) {
        throw createCoreError(14);
      }
      const value = arg1;
      if (isString$2(arg2)) {
        options.key = arg2;
      } else if (isPlainObject$1(arg2)) {
        options = arg2;
      }
      if (isString$2(arg3)) {
        options.locale = arg3;
      } else if (isPlainObject$1(arg3)) {
        overrides = arg3;
      }
      if (isPlainObject$1(arg4)) {
        overrides = arg4;
      }
      return [options.key || "", value, options, overrides];
    }
    function clearNumberFormat(ctx, locale, format2) {
      const context = ctx;
      for (const key in format2) {
        const id2 = `${locale}__${key}`;
        if (!context.__numberFormatters.has(id2)) {
          continue;
        }
        context.__numberFormatters.delete(id2);
      }
    }
    {
      if (typeof __INTLIFY_PROD_DEVTOOLS__ !== "boolean") {
        getGlobalThis().__INTLIFY_PROD_DEVTOOLS__ = false;
      }
    }
    const coreBase_esmBundler = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      MISSING_RESOLVE_VALUE,
      NOT_REOSLVED,
      VERSION: VERSION$6,
      clearCompileCache,
      clearDateTimeFormat,
      clearNumberFormat,
      compileToFunction,
      createCoreContext,
      createCoreError,
      datetime,
      getAdditionalMeta,
      getDevToolsHook,
      getLocaleChain,
      getWarnMessage: getWarnMessage$1,
      handleMissing,
      initI18nDevTools,
      isMessageFunction,
      isTranslateFallbackWarn,
      isTranslateMissingWarn,
      number: number$1,
      parseDateTimeArgs,
      parseNumberArgs,
      parseTranslateArgs,
      registerMessageCompiler,
      setAdditionalMeta,
      setDevToolsHook,
      translate: translate$1,
      translateDevTools,
      updateFallbackLocale,
      createCompileError,
      handleFlatJson,
      parse: parse$3,
      resolveValue,
      DEFAULT_MESSAGE_DATA_TYPE,
      createMessageContext
    }, Symbol.toStringTag, { value: "Module" }));
    const require$$1$2 = /* @__PURE__ */ getAugmentedNamespace(coreBase_esmBundler);
    const require$$2$1 = /* @__PURE__ */ getAugmentedNamespace(vue_runtime_esmBundler);
    /*!
      * vue-i18n v9.1.10
      * (c) 2022 kazuya kawaguchi
      * Released under the MIT License.
      */
    Object.defineProperty(vueI18n_cjs, "__esModule", { value: true });
    var shared = require$$0$1;
    var coreBase = require$$1$2;
    var vue = require$$2$1;
    const VERSION$5 = "9.1.10";
    const warnMessages = {
      [6]: `Fall back to {type} '{key}' with root locale.`,
      [7]: `Not supported 'preserve'.`,
      [8]: `Not supported 'formatter'.`,
      [9]: `Not supported 'preserveDirectiveContent'.`,
      [10]: `Not supported 'getChoiceIndex'.`,
      [11]: `Component name legacy compatible: '{name}' -> 'i18n'`,
      [12]: `Not found parent scope. use the global scope.`
    };
    function getWarnMessage(code, ...args) {
      return shared.format(warnMessages[code], ...args);
    }
    function createI18nError(code, ...args) {
      return coreBase.createCompileError(code, null, { messages: errorMessages, args });
    }
    const errorMessages = {
      [14]: "Unexpected return type in composer",
      [15]: "Invalid argument",
      [16]: "Must be called at the top of a `setup` function",
      [17]: "Need to install with `app.use` function",
      [22]: "Unexpected error",
      [18]: "Not available in legacy mode",
      [19]: `Required in value: {0}`,
      [20]: `Invalid value`,
      [21]: `Cannot setup vue-devtools plugin`
    };
    const DEVTOOLS_META = "__INTLIFY_META__";
    const TransrateVNodeSymbol = shared.makeSymbol("__transrateVNode");
    const DatetimePartsSymbol = shared.makeSymbol("__datetimeParts");
    const NumberPartsSymbol = shared.makeSymbol("__numberParts");
    const EnableEmitter = shared.makeSymbol("__enableEmitter");
    const DisableEmitter = shared.makeSymbol("__disableEmitter");
    const SetPluralRulesSymbol = shared.makeSymbol("__setPluralRules");
    shared.makeSymbol("__intlifyMeta");
    const InejctWithOption = shared.makeSymbol("__injectWithOption");
    let composerID = 0;
    function defineCoreMissingHandler(missing) {
      return (ctx, locale, key, type2) => {
        return missing(locale, key, vue.getCurrentInstance() || void 0, type2);
      };
    }
    function getLocaleMessages(locale, options) {
      const { messages: messages2, __i18n } = options;
      const ret = shared.isPlainObject(messages2) ? messages2 : shared.isArray(__i18n) ? {} : { [locale]: {} };
      if (shared.isArray(__i18n)) {
        __i18n.forEach(({ locale: locale2, resource }) => {
          if (locale2) {
            ret[locale2] = ret[locale2] || {};
            deepCopy(resource, ret[locale2]);
          } else {
            deepCopy(resource, ret);
          }
        });
      }
      if (options.flatJson) {
        for (const key in ret) {
          if (shared.hasOwn(ret, key)) {
            coreBase.handleFlatJson(ret[key]);
          }
        }
      }
      return ret;
    }
    const isNotObjectOrIsArray = (val) => !shared.isObject(val) || shared.isArray(val);
    function deepCopy(src, des) {
      if (isNotObjectOrIsArray(src) || isNotObjectOrIsArray(des)) {
        throw createI18nError(20);
      }
      for (const key in src) {
        if (shared.hasOwn(src, key)) {
          if (isNotObjectOrIsArray(src[key]) || isNotObjectOrIsArray(des[key])) {
            des[key] = src[key];
          } else {
            deepCopy(src[key], des[key]);
          }
        }
      }
    }
    const getMetaInfo = () => {
      const instance = vue.getCurrentInstance();
      return instance && instance.type[DEVTOOLS_META] ? { [DEVTOOLS_META]: instance.type[DEVTOOLS_META] } : null;
    };
    function createComposer(options = {}) {
      const { __root } = options;
      const _isGlobal = __root === void 0;
      let _inheritLocale = shared.isBoolean(options.inheritLocale) ? options.inheritLocale : true;
      const _locale = vue.ref(
        __root && _inheritLocale ? __root.locale.value : shared.isString(options.locale) ? options.locale : "en-US"
      );
      const _fallbackLocale = vue.ref(
        __root && _inheritLocale ? __root.fallbackLocale.value : shared.isString(options.fallbackLocale) || shared.isArray(options.fallbackLocale) || shared.isPlainObject(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : _locale.value
      );
      const _messages = vue.ref(getLocaleMessages(_locale.value, options));
      const _datetimeFormats = vue.ref(shared.isPlainObject(options.datetimeFormats) ? options.datetimeFormats : { [_locale.value]: {} });
      const _numberFormats = vue.ref(shared.isPlainObject(options.numberFormats) ? options.numberFormats : { [_locale.value]: {} });
      let _missingWarn = __root ? __root.missingWarn : shared.isBoolean(options.missingWarn) || shared.isRegExp(options.missingWarn) ? options.missingWarn : true;
      let _fallbackWarn = __root ? __root.fallbackWarn : shared.isBoolean(options.fallbackWarn) || shared.isRegExp(options.fallbackWarn) ? options.fallbackWarn : true;
      let _fallbackRoot = __root ? __root.fallbackRoot : shared.isBoolean(options.fallbackRoot) ? options.fallbackRoot : true;
      let _fallbackFormat = !!options.fallbackFormat;
      let _missing = shared.isFunction(options.missing) ? options.missing : null;
      let _runtimeMissing = shared.isFunction(options.missing) ? defineCoreMissingHandler(options.missing) : null;
      let _postTranslation = shared.isFunction(options.postTranslation) ? options.postTranslation : null;
      let _warnHtmlMessage = shared.isBoolean(options.warnHtmlMessage) ? options.warnHtmlMessage : true;
      let _escapeParameter = !!options.escapeParameter;
      const _modifiers = __root ? __root.modifiers : shared.isPlainObject(options.modifiers) ? options.modifiers : {};
      let _pluralRules = options.pluralRules || __root && __root.pluralRules;
      let _context;
      function getCoreContext() {
        return coreBase.createCoreContext({
          version: VERSION$5,
          locale: _locale.value,
          fallbackLocale: _fallbackLocale.value,
          messages: _messages.value,
          datetimeFormats: _datetimeFormats.value,
          numberFormats: _numberFormats.value,
          modifiers: _modifiers,
          pluralRules: _pluralRules,
          missing: _runtimeMissing === null ? void 0 : _runtimeMissing,
          missingWarn: _missingWarn,
          fallbackWarn: _fallbackWarn,
          fallbackFormat: _fallbackFormat,
          unresolving: true,
          postTranslation: _postTranslation === null ? void 0 : _postTranslation,
          warnHtmlMessage: _warnHtmlMessage,
          escapeParameter: _escapeParameter,
          __datetimeFormatters: shared.isPlainObject(_context) ? _context.__datetimeFormatters : void 0,
          __numberFormatters: shared.isPlainObject(_context) ? _context.__numberFormatters : void 0,
          __v_emitter: shared.isPlainObject(_context) ? _context.__v_emitter : void 0,
          __meta: { framework: "vue" }
        });
      }
      _context = getCoreContext();
      coreBase.updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
      function trackReactivityValues() {
        return [
          _locale.value,
          _fallbackLocale.value,
          _messages.value,
          _datetimeFormats.value,
          _numberFormats.value
        ];
      }
      const locale = vue.computed({
        get: () => _locale.value,
        set: (val) => {
          _locale.value = val;
          _context.locale = _locale.value;
        }
      });
      const fallbackLocale = vue.computed({
        get: () => _fallbackLocale.value,
        set: (val) => {
          _fallbackLocale.value = val;
          _context.fallbackLocale = _fallbackLocale.value;
          coreBase.updateFallbackLocale(_context, _locale.value, val);
        }
      });
      const messages2 = vue.computed(() => _messages.value);
      const datetimeFormats = vue.computed(() => _datetimeFormats.value);
      const numberFormats = vue.computed(() => _numberFormats.value);
      function getPostTranslationHandler() {
        return shared.isFunction(_postTranslation) ? _postTranslation : null;
      }
      function setPostTranslationHandler(handler) {
        _postTranslation = handler;
        _context.postTranslation = handler;
      }
      function getMissingHandler() {
        return _missing;
      }
      function setMissingHandler(handler) {
        if (handler !== null) {
          _runtimeMissing = defineCoreMissingHandler(handler);
        }
        _missing = handler;
        _context.missing = _runtimeMissing;
      }
      function isResolvedTranslateMessage(type2, arg) {
        return type2 !== "translate" || !!arg.resolvedMessage === false;
      }
      function wrapWithDeps(fn2, argumentParser, warnType, fallbackSuccess, fallbackFail, successCondition) {
        trackReactivityValues();
        let ret;
        {
          try {
            coreBase.setAdditionalMeta(getMetaInfo());
            ret = fn2(_context);
          } finally {
            coreBase.setAdditionalMeta(null);
          }
        }
        if (shared.isNumber(ret) && ret === coreBase.NOT_REOSLVED) {
          const [key, arg2] = argumentParser();
          if (__root && shared.isString(key) && isResolvedTranslateMessage(warnType, arg2)) {
            if (_fallbackRoot && (coreBase.isTranslateFallbackWarn(_fallbackWarn, key) || coreBase.isTranslateMissingWarn(_missingWarn, key))) {
              shared.warn(getWarnMessage(6, {
                key,
                type: warnType
              }));
            }
            {
              const { __v_emitter: emitter } = _context;
              if (emitter && _fallbackRoot) {
                emitter.emit("fallback", {
                  type: warnType,
                  key,
                  to: "global",
                  groupId: `${warnType}:${key}`
                });
              }
            }
          }
          return __root && _fallbackRoot ? fallbackSuccess(__root) : fallbackFail(key);
        } else if (successCondition(ret)) {
          return ret;
        } else {
          throw createI18nError(14);
        }
      }
      function t(...args) {
        return wrapWithDeps((context) => coreBase.translate(context, ...args), () => coreBase.parseTranslateArgs(...args), "translate", (root2) => root2.t(...args), (key) => key, (val) => shared.isString(val));
      }
      function rt2(...args) {
        const [arg1, arg2, arg3] = args;
        if (arg3 && !shared.isObject(arg3)) {
          throw createI18nError(15);
        }
        return t(...[arg1, arg2, shared.assign({ resolvedMessage: true }, arg3 || {})]);
      }
      function d2(...args) {
        return wrapWithDeps((context) => coreBase.datetime(context, ...args), () => coreBase.parseDateTimeArgs(...args), "datetime format", (root2) => root2.d(...args), () => coreBase.MISSING_RESOLVE_VALUE, (val) => shared.isString(val));
      }
      function n2(...args) {
        return wrapWithDeps((context) => coreBase.number(context, ...args), () => coreBase.parseNumberArgs(...args), "number format", (root2) => root2.n(...args), () => coreBase.MISSING_RESOLVE_VALUE, (val) => shared.isString(val));
      }
      function normalize(values) {
        return values.map((val) => shared.isString(val) ? vue.createVNode(vue.Text, null, val, 0) : val);
      }
      const interpolate = (val) => val;
      const processor = {
        normalize,
        interpolate,
        type: "vnode"
      };
      function transrateVNode(...args) {
        return wrapWithDeps(
          (context) => {
            let ret;
            const _context2 = context;
            try {
              _context2.processor = processor;
              ret = coreBase.translate(_context2, ...args);
            } finally {
              _context2.processor = null;
            }
            return ret;
          },
          () => coreBase.parseTranslateArgs(...args),
          "translate",
          (root2) => root2[TransrateVNodeSymbol](...args),
          (key) => [vue.createVNode(vue.Text, null, key, 0)],
          (val) => shared.isArray(val)
        );
      }
      function numberParts(...args) {
        return wrapWithDeps(
          (context) => coreBase.number(context, ...args),
          () => coreBase.parseNumberArgs(...args),
          "number format",
          (root2) => root2[NumberPartsSymbol](...args),
          () => [],
          (val) => shared.isString(val) || shared.isArray(val)
        );
      }
      function datetimeParts(...args) {
        return wrapWithDeps(
          (context) => coreBase.datetime(context, ...args),
          () => coreBase.parseDateTimeArgs(...args),
          "datetime format",
          (root2) => root2[DatetimePartsSymbol](...args),
          () => [],
          (val) => shared.isString(val) || shared.isArray(val)
        );
      }
      function setPluralRules(rules2) {
        _pluralRules = rules2;
        _context.pluralRules = _pluralRules;
      }
      function te2(key, locale2) {
        const targetLocale = shared.isString(locale2) ? locale2 : _locale.value;
        const message2 = getLocaleMessage(targetLocale);
        return coreBase.resolveValue(message2, key) !== null;
      }
      function resolveMessages(key) {
        let messages3 = null;
        const locales = coreBase.getLocaleChain(_context, _fallbackLocale.value, _locale.value);
        for (let i2 = 0; i2 < locales.length; i2++) {
          const targetLocaleMessages = _messages.value[locales[i2]] || {};
          const messageValue = coreBase.resolveValue(targetLocaleMessages, key);
          if (messageValue != null) {
            messages3 = messageValue;
            break;
          }
        }
        return messages3;
      }
      function tm(key) {
        const messages3 = resolveMessages(key);
        return messages3 != null ? messages3 : __root ? __root.tm(key) || {} : {};
      }
      function getLocaleMessage(locale2) {
        return _messages.value[locale2] || {};
      }
      function setLocaleMessage(locale2, message2) {
        _messages.value[locale2] = message2;
        _context.messages = _messages.value;
      }
      function mergeLocaleMessage(locale2, message2) {
        _messages.value[locale2] = _messages.value[locale2] || {};
        deepCopy(message2, _messages.value[locale2]);
        _context.messages = _messages.value;
      }
      function getDateTimeFormat(locale2) {
        return _datetimeFormats.value[locale2] || {};
      }
      function setDateTimeFormat(locale2, format2) {
        _datetimeFormats.value[locale2] = format2;
        _context.datetimeFormats = _datetimeFormats.value;
        coreBase.clearDateTimeFormat(_context, locale2, format2);
      }
      function mergeDateTimeFormat(locale2, format2) {
        _datetimeFormats.value[locale2] = shared.assign(_datetimeFormats.value[locale2] || {}, format2);
        _context.datetimeFormats = _datetimeFormats.value;
        coreBase.clearDateTimeFormat(_context, locale2, format2);
      }
      function getNumberFormat(locale2) {
        return _numberFormats.value[locale2] || {};
      }
      function setNumberFormat(locale2, format2) {
        _numberFormats.value[locale2] = format2;
        _context.numberFormats = _numberFormats.value;
        coreBase.clearNumberFormat(_context, locale2, format2);
      }
      function mergeNumberFormat(locale2, format2) {
        _numberFormats.value[locale2] = shared.assign(_numberFormats.value[locale2] || {}, format2);
        _context.numberFormats = _numberFormats.value;
        coreBase.clearNumberFormat(_context, locale2, format2);
      }
      composerID++;
      if (__root) {
        vue.watch(__root.locale, (val) => {
          if (_inheritLocale) {
            _locale.value = val;
            _context.locale = val;
            coreBase.updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
          }
        });
        vue.watch(__root.fallbackLocale, (val) => {
          if (_inheritLocale) {
            _fallbackLocale.value = val;
            _context.fallbackLocale = val;
            coreBase.updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
          }
        });
      }
      const composer = {
        id: composerID,
        locale,
        fallbackLocale,
        get inheritLocale() {
          return _inheritLocale;
        },
        set inheritLocale(val) {
          _inheritLocale = val;
          if (val && __root) {
            _locale.value = __root.locale.value;
            _fallbackLocale.value = __root.fallbackLocale.value;
            coreBase.updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
          }
        },
        get availableLocales() {
          return Object.keys(_messages.value).sort();
        },
        messages: messages2,
        datetimeFormats,
        numberFormats,
        get modifiers() {
          return _modifiers;
        },
        get pluralRules() {
          return _pluralRules || {};
        },
        get isGlobal() {
          return _isGlobal;
        },
        get missingWarn() {
          return _missingWarn;
        },
        set missingWarn(val) {
          _missingWarn = val;
          _context.missingWarn = _missingWarn;
        },
        get fallbackWarn() {
          return _fallbackWarn;
        },
        set fallbackWarn(val) {
          _fallbackWarn = val;
          _context.fallbackWarn = _fallbackWarn;
        },
        get fallbackRoot() {
          return _fallbackRoot;
        },
        set fallbackRoot(val) {
          _fallbackRoot = val;
        },
        get fallbackFormat() {
          return _fallbackFormat;
        },
        set fallbackFormat(val) {
          _fallbackFormat = val;
          _context.fallbackFormat = _fallbackFormat;
        },
        get warnHtmlMessage() {
          return _warnHtmlMessage;
        },
        set warnHtmlMessage(val) {
          _warnHtmlMessage = val;
          _context.warnHtmlMessage = val;
        },
        get escapeParameter() {
          return _escapeParameter;
        },
        set escapeParameter(val) {
          _escapeParameter = val;
          _context.escapeParameter = val;
        },
        t,
        rt: rt2,
        d: d2,
        n: n2,
        te: te2,
        tm,
        getLocaleMessage,
        setLocaleMessage,
        mergeLocaleMessage,
        getDateTimeFormat,
        setDateTimeFormat,
        mergeDateTimeFormat,
        getNumberFormat,
        setNumberFormat,
        mergeNumberFormat,
        getPostTranslationHandler,
        setPostTranslationHandler,
        getMissingHandler,
        setMissingHandler,
        [TransrateVNodeSymbol]: transrateVNode,
        [NumberPartsSymbol]: numberParts,
        [DatetimePartsSymbol]: datetimeParts,
        [SetPluralRulesSymbol]: setPluralRules,
        [InejctWithOption]: options.__injectWithOption
      };
      {
        composer[EnableEmitter] = (emitter) => {
          _context.__v_emitter = emitter;
        };
        composer[DisableEmitter] = () => {
          _context.__v_emitter = void 0;
        };
      }
      return composer;
    }
    function convertComposerOptions(options) {
      const locale = shared.isString(options.locale) ? options.locale : "en-US";
      const fallbackLocale = shared.isString(options.fallbackLocale) || shared.isArray(options.fallbackLocale) || shared.isPlainObject(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : locale;
      const missing = shared.isFunction(options.missing) ? options.missing : void 0;
      const missingWarn = shared.isBoolean(options.silentTranslationWarn) || shared.isRegExp(options.silentTranslationWarn) ? !options.silentTranslationWarn : true;
      const fallbackWarn = shared.isBoolean(options.silentFallbackWarn) || shared.isRegExp(options.silentFallbackWarn) ? !options.silentFallbackWarn : true;
      const fallbackRoot = shared.isBoolean(options.fallbackRoot) ? options.fallbackRoot : true;
      const fallbackFormat = !!options.formatFallbackMessages;
      const modifiers = shared.isPlainObject(options.modifiers) ? options.modifiers : {};
      const pluralizationRules = options.pluralizationRules;
      const postTranslation = shared.isFunction(options.postTranslation) ? options.postTranslation : void 0;
      const warnHtmlMessage = shared.isString(options.warnHtmlInMessage) ? options.warnHtmlInMessage !== "off" : true;
      const escapeParameter = !!options.escapeParameterHtml;
      const inheritLocale = shared.isBoolean(options.sync) ? options.sync : true;
      if (options.formatter) {
        shared.warn(getWarnMessage(8));
      }
      if (options.preserveDirectiveContent) {
        shared.warn(getWarnMessage(9));
      }
      let messages2 = options.messages;
      if (shared.isPlainObject(options.sharedMessages)) {
        const sharedMessages = options.sharedMessages;
        const locales = Object.keys(sharedMessages);
        messages2 = locales.reduce((messages3, locale2) => {
          const message2 = messages3[locale2] || (messages3[locale2] = {});
          shared.assign(message2, sharedMessages[locale2]);
          return messages3;
        }, messages2 || {});
      }
      const { __i18n, __root, __injectWithOption } = options;
      const datetimeFormats = options.datetimeFormats;
      const numberFormats = options.numberFormats;
      const flatJson = options.flatJson;
      return {
        locale,
        fallbackLocale,
        messages: messages2,
        flatJson,
        datetimeFormats,
        numberFormats,
        missing,
        missingWarn,
        fallbackWarn,
        fallbackRoot,
        fallbackFormat,
        modifiers,
        pluralRules: pluralizationRules,
        postTranslation,
        warnHtmlMessage,
        escapeParameter,
        inheritLocale,
        __i18n,
        __root,
        __injectWithOption
      };
    }
    function createVueI18n(options = {}) {
      const composer = createComposer(convertComposerOptions(options));
      const vueI18n = {
        id: composer.id,
        get locale() {
          return composer.locale.value;
        },
        set locale(val) {
          composer.locale.value = val;
        },
        get fallbackLocale() {
          return composer.fallbackLocale.value;
        },
        set fallbackLocale(val) {
          composer.fallbackLocale.value = val;
        },
        get messages() {
          return composer.messages.value;
        },
        get datetimeFormats() {
          return composer.datetimeFormats.value;
        },
        get numberFormats() {
          return composer.numberFormats.value;
        },
        get availableLocales() {
          return composer.availableLocales;
        },
        get formatter() {
          shared.warn(getWarnMessage(8));
          return {
            interpolate() {
              return [];
            }
          };
        },
        set formatter(val) {
          shared.warn(getWarnMessage(8));
        },
        get missing() {
          return composer.getMissingHandler();
        },
        set missing(handler) {
          composer.setMissingHandler(handler);
        },
        get silentTranslationWarn() {
          return shared.isBoolean(composer.missingWarn) ? !composer.missingWarn : composer.missingWarn;
        },
        set silentTranslationWarn(val) {
          composer.missingWarn = shared.isBoolean(val) ? !val : val;
        },
        get silentFallbackWarn() {
          return shared.isBoolean(composer.fallbackWarn) ? !composer.fallbackWarn : composer.fallbackWarn;
        },
        set silentFallbackWarn(val) {
          composer.fallbackWarn = shared.isBoolean(val) ? !val : val;
        },
        get modifiers() {
          return composer.modifiers;
        },
        get formatFallbackMessages() {
          return composer.fallbackFormat;
        },
        set formatFallbackMessages(val) {
          composer.fallbackFormat = val;
        },
        get postTranslation() {
          return composer.getPostTranslationHandler();
        },
        set postTranslation(handler) {
          composer.setPostTranslationHandler(handler);
        },
        get sync() {
          return composer.inheritLocale;
        },
        set sync(val) {
          composer.inheritLocale = val;
        },
        get warnHtmlInMessage() {
          return composer.warnHtmlMessage ? "warn" : "off";
        },
        set warnHtmlInMessage(val) {
          composer.warnHtmlMessage = val !== "off";
        },
        get escapeParameterHtml() {
          return composer.escapeParameter;
        },
        set escapeParameterHtml(val) {
          composer.escapeParameter = val;
        },
        get preserveDirectiveContent() {
          shared.warn(getWarnMessage(9));
          return true;
        },
        set preserveDirectiveContent(val) {
          shared.warn(getWarnMessage(9));
        },
        get pluralizationRules() {
          return composer.pluralRules || {};
        },
        __composer: composer,
        t(...args) {
          const [arg1, arg2, arg3] = args;
          const options2 = {};
          let list = null;
          let named = null;
          if (!shared.isString(arg1)) {
            throw createI18nError(15);
          }
          const key = arg1;
          if (shared.isString(arg2)) {
            options2.locale = arg2;
          } else if (shared.isArray(arg2)) {
            list = arg2;
          } else if (shared.isPlainObject(arg2)) {
            named = arg2;
          }
          if (shared.isArray(arg3)) {
            list = arg3;
          } else if (shared.isPlainObject(arg3)) {
            named = arg3;
          }
          return composer.t(key, list || named || {}, options2);
        },
        rt(...args) {
          return composer.rt(...args);
        },
        tc(...args) {
          const [arg1, arg2, arg3] = args;
          const options2 = { plural: 1 };
          let list = null;
          let named = null;
          if (!shared.isString(arg1)) {
            throw createI18nError(15);
          }
          const key = arg1;
          if (shared.isString(arg2)) {
            options2.locale = arg2;
          } else if (shared.isNumber(arg2)) {
            options2.plural = arg2;
          } else if (shared.isArray(arg2)) {
            list = arg2;
          } else if (shared.isPlainObject(arg2)) {
            named = arg2;
          }
          if (shared.isString(arg3)) {
            options2.locale = arg3;
          } else if (shared.isArray(arg3)) {
            list = arg3;
          } else if (shared.isPlainObject(arg3)) {
            named = arg3;
          }
          return composer.t(key, list || named || {}, options2);
        },
        te(key, locale) {
          return composer.te(key, locale);
        },
        tm(key) {
          return composer.tm(key);
        },
        getLocaleMessage(locale) {
          return composer.getLocaleMessage(locale);
        },
        setLocaleMessage(locale, message2) {
          composer.setLocaleMessage(locale, message2);
        },
        mergeLocaleMessage(locale, message2) {
          composer.mergeLocaleMessage(locale, message2);
        },
        d(...args) {
          return composer.d(...args);
        },
        getDateTimeFormat(locale) {
          return composer.getDateTimeFormat(locale);
        },
        setDateTimeFormat(locale, format2) {
          composer.setDateTimeFormat(locale, format2);
        },
        mergeDateTimeFormat(locale, format2) {
          composer.mergeDateTimeFormat(locale, format2);
        },
        n(...args) {
          return composer.n(...args);
        },
        getNumberFormat(locale) {
          return composer.getNumberFormat(locale);
        },
        setNumberFormat(locale, format2) {
          composer.setNumberFormat(locale, format2);
        },
        mergeNumberFormat(locale, format2) {
          composer.mergeNumberFormat(locale, format2);
        },
        getChoiceIndex(choice, choicesLength) {
          shared.warn(getWarnMessage(10));
          return -1;
        },
        __onComponentInstanceCreated(target) {
          const { componentInstanceCreatedListener } = options;
          if (componentInstanceCreatedListener) {
            componentInstanceCreatedListener(target, vueI18n);
          }
        }
      };
      {
        vueI18n.__enableEmitter = (emitter) => {
          const __composer = composer;
          __composer[EnableEmitter] && __composer[EnableEmitter](emitter);
        };
        vueI18n.__disableEmitter = () => {
          const __composer = composer;
          __composer[DisableEmitter] && __composer[DisableEmitter]();
        };
      }
      return vueI18n;
    }
    const baseFormatProps = {
      tag: {
        type: [String, Object]
      },
      locale: {
        type: String
      },
      scope: {
        type: String,
        validator: (val) => val === "parent" || val === "global",
        default: "parent"
      },
      i18n: {
        type: Object
      }
    };
    const Translation = {
      name: "i18n-t",
      props: shared.assign({
        keypath: {
          type: String,
          required: true
        },
        plural: {
          type: [Number, String],
          validator: (val) => shared.isNumber(val) || !isNaN(val)
        }
      }, baseFormatProps),
      setup(props, context) {
        const { slots, attrs } = context;
        const i18n2 = props.i18n || useI18n({
          useScope: props.scope,
          __useComponent: true
        });
        const keys2 = Object.keys(slots).filter((key) => key !== "_");
        return () => {
          const options = {};
          if (props.locale) {
            options.locale = props.locale;
          }
          if (props.plural !== void 0) {
            options.plural = shared.isString(props.plural) ? +props.plural : props.plural;
          }
          const arg = getInterpolateArg(context, keys2);
          const children = i18n2[TransrateVNodeSymbol](props.keypath, arg, options);
          const assignedAttrs = shared.assign({}, attrs);
          return shared.isString(props.tag) ? vue.h(props.tag, assignedAttrs, children) : shared.isObject(props.tag) ? vue.h(props.tag, assignedAttrs, children) : vue.h(vue.Fragment, assignedAttrs, children);
        };
      }
    };
    function getInterpolateArg({ slots }, keys2) {
      if (keys2.length === 1 && keys2[0] === "default") {
        return slots.default ? slots.default() : [];
      } else {
        return keys2.reduce((arg, key) => {
          const slot = slots[key];
          if (slot) {
            arg[key] = slot();
          }
          return arg;
        }, {});
      }
    }
    function renderFormatter(props, context, slotKeys, partFormatter) {
      const { slots, attrs } = context;
      return () => {
        const options = { part: true };
        let overrides = {};
        if (props.locale) {
          options.locale = props.locale;
        }
        if (shared.isString(props.format)) {
          options.key = props.format;
        } else if (shared.isObject(props.format)) {
          if (shared.isString(props.format.key)) {
            options.key = props.format.key;
          }
          overrides = Object.keys(props.format).reduce((options2, prop) => {
            return slotKeys.includes(prop) ? shared.assign({}, options2, { [prop]: props.format[prop] }) : options2;
          }, {});
        }
        const parts = partFormatter(...[props.value, options, overrides]);
        let children = [options.key];
        if (shared.isArray(parts)) {
          children = parts.map((part, index2) => {
            const slot = slots[part.type];
            return slot ? slot({ [part.type]: part.value, index: index2, parts }) : [part.value];
          });
        } else if (shared.isString(parts)) {
          children = [parts];
        }
        const assignedAttrs = shared.assign({}, attrs);
        return shared.isString(props.tag) ? vue.h(props.tag, assignedAttrs, children) : shared.isObject(props.tag) ? vue.h(props.tag, assignedAttrs, children) : vue.h(vue.Fragment, assignedAttrs, children);
      };
    }
    const NUMBER_FORMAT_KEYS = [
      "localeMatcher",
      "style",
      "unit",
      "unitDisplay",
      "currency",
      "currencyDisplay",
      "useGrouping",
      "numberingSystem",
      "minimumIntegerDigits",
      "minimumFractionDigits",
      "maximumFractionDigits",
      "minimumSignificantDigits",
      "maximumSignificantDigits",
      "notation",
      "formatMatcher"
    ];
    const NumberFormat = {
      name: "i18n-n",
      props: shared.assign({
        value: {
          type: Number,
          required: true
        },
        format: {
          type: [String, Object]
        }
      }, baseFormatProps),
      setup(props, context) {
        const i18n2 = props.i18n || useI18n({ useScope: "parent", __useComponent: true });
        return renderFormatter(props, context, NUMBER_FORMAT_KEYS, (...args) => i18n2[NumberPartsSymbol](...args));
      }
    };
    const DATETIME_FORMAT_KEYS = [
      "dateStyle",
      "timeStyle",
      "fractionalSecondDigits",
      "calendar",
      "dayPeriod",
      "numberingSystem",
      "localeMatcher",
      "timeZone",
      "hour12",
      "hourCycle",
      "formatMatcher",
      "weekday",
      "era",
      "year",
      "month",
      "day",
      "hour",
      "minute",
      "second",
      "timeZoneName"
    ];
    const DatetimeFormat = {
      name: "i18n-d",
      props: shared.assign({
        value: {
          type: [Number, Date],
          required: true
        },
        format: {
          type: [String, Object]
        }
      }, baseFormatProps),
      setup(props, context) {
        const i18n2 = props.i18n || useI18n({ useScope: "parent", __useComponent: true });
        return renderFormatter(props, context, DATETIME_FORMAT_KEYS, (...args) => i18n2[DatetimePartsSymbol](...args));
      }
    };
    function getComposer$1(i18n2, instance) {
      const i18nInternal = i18n2;
      if (i18n2.mode === "composition") {
        return i18nInternal.__getInstance(instance) || i18n2.global;
      } else {
        const vueI18n = i18nInternal.__getInstance(instance);
        return vueI18n != null ? vueI18n.__composer : i18n2.global.__composer;
      }
    }
    function vTDirective(i18n2) {
      const bind2 = (el, { instance, value, modifiers }) => {
        if (!instance || !instance.$) {
          throw createI18nError(22);
        }
        const composer = getComposer$1(i18n2, instance.$);
        if (modifiers.preserve) {
          shared.warn(getWarnMessage(7));
        }
        const parsedValue2 = parseValue(value);
        el.textContent = composer.t(...makeParams(parsedValue2));
      };
      return {
        beforeMount: bind2,
        beforeUpdate: bind2
      };
    }
    function parseValue(value) {
      if (shared.isString(value)) {
        return { path: value };
      } else if (shared.isPlainObject(value)) {
        if (!("path" in value)) {
          throw createI18nError(19, "path");
        }
        return value;
      } else {
        throw createI18nError(20);
      }
    }
    function makeParams(value) {
      const { path, locale, args, choice, plural } = value;
      const options = {};
      const named = args || {};
      if (shared.isString(locale)) {
        options.locale = locale;
      }
      if (shared.isNumber(choice)) {
        options.plural = choice;
      }
      if (shared.isNumber(plural)) {
        options.plural = plural;
      }
      return [path, named, options];
    }
    function apply$1(app2, i18n2, ...options) {
      const pluginOptions = shared.isPlainObject(options[0]) ? options[0] : {};
      const useI18nComponentName = !!pluginOptions.useI18nComponentName;
      const globalInstall = shared.isBoolean(pluginOptions.globalInstall) ? pluginOptions.globalInstall : true;
      if (globalInstall && useI18nComponentName) {
        shared.warn(getWarnMessage(11, {
          name: Translation.name
        }));
      }
      if (globalInstall) {
        app2.component(!useI18nComponentName ? Translation.name : "i18n", Translation);
        app2.component(NumberFormat.name, NumberFormat);
        app2.component(DatetimeFormat.name, DatetimeFormat);
      }
      app2.directive("t", vTDirective(i18n2));
    }
    function defineMixin(vuei18n, composer, i18n2) {
      return {
        beforeCreate() {
          const instance = vue.getCurrentInstance();
          if (!instance) {
            throw createI18nError(22);
          }
          const options = this.$options;
          if (options.i18n) {
            const optionsI18n = options.i18n;
            if (options.__i18n) {
              optionsI18n.__i18n = options.__i18n;
            }
            optionsI18n.__root = composer;
            if (this === this.$root) {
              this.$i18n = mergeToRoot(vuei18n, optionsI18n);
            } else {
              optionsI18n.__injectWithOption = true;
              this.$i18n = createVueI18n(optionsI18n);
            }
          } else if (options.__i18n) {
            if (this === this.$root) {
              this.$i18n = mergeToRoot(vuei18n, options);
            } else {
              this.$i18n = createVueI18n({
                __i18n: options.__i18n,
                __injectWithOption: true,
                __root: composer
              });
            }
          } else {
            this.$i18n = vuei18n;
          }
          vuei18n.__onComponentInstanceCreated(this.$i18n);
          i18n2.__setInstance(instance, this.$i18n);
          this.$t = (...args) => this.$i18n.t(...args);
          this.$rt = (...args) => this.$i18n.rt(...args);
          this.$tc = (...args) => this.$i18n.tc(...args);
          this.$te = (key, locale) => this.$i18n.te(key, locale);
          this.$d = (...args) => this.$i18n.d(...args);
          this.$n = (...args) => this.$i18n.n(...args);
          this.$tm = (key) => this.$i18n.tm(key);
        },
        mounted() {
        },
        beforeUnmount() {
          const instance = vue.getCurrentInstance();
          if (!instance) {
            throw createI18nError(22);
          }
          delete this.$t;
          delete this.$rt;
          delete this.$tc;
          delete this.$te;
          delete this.$d;
          delete this.$n;
          delete this.$tm;
          i18n2.__deleteInstance(instance);
          delete this.$i18n;
        }
      };
    }
    function mergeToRoot(root2, options) {
      root2.locale = options.locale || root2.locale;
      root2.fallbackLocale = options.fallbackLocale || root2.fallbackLocale;
      root2.missing = options.missing || root2.missing;
      root2.silentTranslationWarn = options.silentTranslationWarn || root2.silentFallbackWarn;
      root2.silentFallbackWarn = options.silentFallbackWarn || root2.silentFallbackWarn;
      root2.formatFallbackMessages = options.formatFallbackMessages || root2.formatFallbackMessages;
      root2.postTranslation = options.postTranslation || root2.postTranslation;
      root2.warnHtmlInMessage = options.warnHtmlInMessage || root2.warnHtmlInMessage;
      root2.escapeParameterHtml = options.escapeParameterHtml || root2.escapeParameterHtml;
      root2.sync = options.sync || root2.sync;
      root2.__composer[SetPluralRulesSymbol](options.pluralizationRules || root2.pluralizationRules);
      const messages2 = getLocaleMessages(root2.locale, {
        messages: options.messages,
        __i18n: options.__i18n
      });
      Object.keys(messages2).forEach((locale) => root2.mergeLocaleMessage(locale, messages2[locale]));
      if (options.datetimeFormats) {
        Object.keys(options.datetimeFormats).forEach((locale) => root2.mergeDateTimeFormat(locale, options.datetimeFormats[locale]));
      }
      if (options.numberFormats) {
        Object.keys(options.numberFormats).forEach((locale) => root2.mergeNumberFormat(locale, options.numberFormats[locale]));
      }
      return root2;
    }
    function createI18n(options = {}) {
      const __legacyMode = shared.isBoolean(options.legacy) ? options.legacy : true;
      const __globalInjection = !!options.globalInjection;
      const __instances = /* @__PURE__ */ new Map();
      const __global = __legacyMode ? createVueI18n(options) : createComposer(options);
      const symbol = shared.makeSymbol("vue-i18n");
      const i18n2 = {
        get mode() {
          return __legacyMode ? "legacy" : "composition";
        },
        async install(app2, ...options2) {
          app2.__VUE_I18N_SYMBOL__ = symbol;
          app2.provide(app2.__VUE_I18N_SYMBOL__, i18n2);
          if (!__legacyMode && __globalInjection) {
            injectGlobalFields(app2, i18n2.global);
          }
          {
            apply$1(app2, i18n2, ...options2);
          }
          if (__legacyMode) {
            app2.mixin(defineMixin(__global, __global.__composer, i18n2));
          }
        },
        get global() {
          return __global;
        },
        __instances,
        __getInstance(component2) {
          return __instances.get(component2) || null;
        },
        __setInstance(component2, instance) {
          __instances.set(component2, instance);
        },
        __deleteInstance(component2) {
          __instances.delete(component2);
        }
      };
      return i18n2;
    }
    function useI18n(options = {}) {
      const instance = vue.getCurrentInstance();
      if (instance == null) {
        throw createI18nError(16);
      }
      if (!instance.appContext.app.__VUE_I18N_SYMBOL__) {
        throw createI18nError(17);
      }
      const i18n2 = vue.inject(instance.appContext.app.__VUE_I18N_SYMBOL__);
      if (!i18n2) {
        throw createI18nError(22);
      }
      const global2 = i18n2.mode === "composition" ? i18n2.global : i18n2.global.__composer;
      const scope = shared.isEmptyObject(options) ? "__i18n" in instance.type ? "local" : "global" : !options.useScope ? "local" : options.useScope;
      if (scope === "global") {
        let messages2 = shared.isObject(options.messages) ? options.messages : {};
        if ("__i18nGlobal" in instance.type) {
          messages2 = getLocaleMessages(global2.locale.value, {
            messages: messages2,
            __i18n: instance.type.__i18nGlobal
          });
        }
        const locales = Object.keys(messages2);
        if (locales.length) {
          locales.forEach((locale) => {
            global2.mergeLocaleMessage(locale, messages2[locale]);
          });
        }
        if (shared.isObject(options.datetimeFormats)) {
          const locales2 = Object.keys(options.datetimeFormats);
          if (locales2.length) {
            locales2.forEach((locale) => {
              global2.mergeDateTimeFormat(locale, options.datetimeFormats[locale]);
            });
          }
        }
        if (shared.isObject(options.numberFormats)) {
          const locales2 = Object.keys(options.numberFormats);
          if (locales2.length) {
            locales2.forEach((locale) => {
              global2.mergeNumberFormat(locale, options.numberFormats[locale]);
            });
          }
        }
        return global2;
      }
      if (scope === "parent") {
        let composer2 = getComposer(i18n2, instance, options.__useComponent);
        if (composer2 == null) {
          {
            shared.warn(getWarnMessage(12));
          }
          composer2 = global2;
        }
        return composer2;
      }
      if (i18n2.mode === "legacy") {
        throw createI18nError(18);
      }
      const i18nInternal = i18n2;
      let composer = i18nInternal.__getInstance(instance);
      if (composer == null) {
        const type2 = instance.type;
        const composerOptions = shared.assign({}, options);
        if (type2.__i18n) {
          composerOptions.__i18n = type2.__i18n;
        }
        if (global2) {
          composerOptions.__root = global2;
        }
        composer = createComposer(composerOptions);
        setupLifeCycle(i18nInternal, instance);
        i18nInternal.__setInstance(instance, composer);
      }
      return composer;
    }
    function getComposer(i18n2, target, useComponent = false) {
      let composer = null;
      const root2 = target.root;
      let current = target.parent;
      while (current != null) {
        const i18nInternal = i18n2;
        if (i18n2.mode === "composition") {
          composer = i18nInternal.__getInstance(current);
        } else {
          const vueI18n = i18nInternal.__getInstance(current);
          if (vueI18n != null) {
            composer = vueI18n.__composer;
          }
          if (useComponent && composer && !composer[InejctWithOption]) {
            composer = null;
          }
        }
        if (composer != null) {
          break;
        }
        if (root2 === current) {
          break;
        }
        current = current.parent;
      }
      return composer;
    }
    function setupLifeCycle(i18n2, target, composer) {
      vue.onMounted(() => {
      }, target);
      vue.onUnmounted(() => {
        i18n2.__deleteInstance(target);
      }, target);
    }
    const globalExportProps = [
      "locale",
      "fallbackLocale",
      "availableLocales"
    ];
    const globalExportMethods = ["t", "rt", "d", "n", "tm"];
    function injectGlobalFields(app2, composer) {
      const i18n2 = /* @__PURE__ */ Object.create(null);
      globalExportProps.forEach((prop) => {
        const desc = Object.getOwnPropertyDescriptor(composer, prop);
        if (!desc) {
          throw createI18nError(22);
        }
        const wrap = vue.isRef(desc.value) ? {
          get() {
            return desc.value.value;
          },
          set(val) {
            desc.value.value = val;
          }
        } : {
          get() {
            return desc.get && desc.get();
          }
        };
        Object.defineProperty(i18n2, prop, wrap);
      });
      app2.config.globalProperties.$i18n = i18n2;
      globalExportMethods.forEach((method2) => {
        const desc = Object.getOwnPropertyDescriptor(composer, method2);
        if (!desc || !desc.value) {
          throw createI18nError(22);
        }
        Object.defineProperty(app2.config.globalProperties, `$${method2}`, desc);
      });
    }
    coreBase.registerMessageCompiler(coreBase.compileToFunction);
    {
      const target = shared.getGlobalThis();
      target.__INTLIFY__ = true;
      coreBase.setDevToolsHook(target.__INTLIFY_DEVTOOLS_GLOBAL_HOOK__);
    }
    vueI18n_cjs.DatetimeFormat = DatetimeFormat;
    vueI18n_cjs.NumberFormat = NumberFormat;
    vueI18n_cjs.Translation = Translation;
    vueI18n_cjs.VERSION = VERSION$5;
    var createI18n_1 = vueI18n_cjs.createI18n = createI18n;
    var useI18n_1 = vueI18n_cjs.useI18n = useI18n;
    vueI18n_cjs.vTDirective = vTDirective;
    function getBooleanEnv(key) {
      let env2 = false;
      if (getEnv(key)) {
        env2 = getEnv(key).toLowerCase() === "true";
      }
      return env2;
    }
    function getEnv(key) {
      let env2 = "";
      try {
        if ({ "VITE_LOG_INFO_ENABLED": "false", "VITE_SIYUAN_API_URL": "http://127.0.0.1:6806", "VITE_SIYUAN_CONFIG_TOKEN": "", "VITE_OPT_PWD": "123456", "VITE_SIYUAN_DEV_PAGE_ID": "20220723100458-kqacgb2", "VITE_DEBUG_MODE": "false", "BASE_URL": "./", "MODE": "production", "DEV": false, "PROD": true }[key]) {
          env2 = { "VITE_LOG_INFO_ENABLED": "false", "VITE_SIYUAN_API_URL": "http://127.0.0.1:6806", "VITE_SIYUAN_CONFIG_TOKEN": "", "VITE_OPT_PWD": "123456", "VITE_SIYUAN_DEV_PAGE_ID": "20220723100458-kqacgb2", "VITE_DEBUG_MODE": "false", "BASE_URL": "./", "MODE": "production", "DEV": false, "PROD": true }[key];
        }
      } catch (e2) {
        logUtil.logWarn(e2);
      }
      return env2;
    }
    const LOG_INFO_ENABLED = getBooleanEnv("VITE_LOG_INFO_ENABLED");
    const logInfo = (msg, param) => {
      if (LOG_INFO_ENABLED) {
        if (param) {
          console.log(msg);
          console.log(param);
        } else {
          console.log(msg);
        }
      }
    };
    const logWarn = (msg, param) => {
      {
        if (param) {
          console.warn(msg);
          console.warn(param);
        } else {
          console.warn(msg);
        }
      }
    };
    const logError = (msg, param) => {
      {
        if (param) {
          console.error(msg);
          console.error(param);
        } else {
          console.error(msg);
        }
      }
    };
    const logUtil = {
      logInfo,
      logWarn,
      logError
    };
    const _hoisted_1$1b = {
      class: "locale-changer"
    };
    const __default__$1S = {
      name: "locale-changer"
    };
    const _sfc_main$2I = /* @__PURE__ */ defineComponent({
      ...__default__$1S,
      setup(__props) {
        const {
          locale
        } = useI18n_1();
        const langs = [{
          value: "zh_CN",
          label: "\u7B80\u4F53\u4E2D\u6587"
        }, {
          value: "en_US",
          label: "English"
        }];
        const langChanged = (lang) => {
          logUtil.logInfo("langChanged=>", lang);
          localStorage.Lang = lang;
          locale.value = lang;
        };
        onMounted(() => {
          if (localStorage.Lang != null)
            locale.value = localStorage.Lang;
        });
        return (_ctx, _cache) => {
          const _component_el_option = resolveComponent("el-option");
          const _component_el_select = resolveComponent("el-select");
          const _component_el_form_item = resolveComponent("el-form-item");
          const _component_el_form = resolveComponent("el-form");
          return openBlock(), createElementBlock("div", _hoisted_1$1b, [createVNode(_component_el_form, {
            "label-width": "120px"
          }, {
            default: withCtx(() => [createVNode(_component_el_form_item, {
              label: _ctx.$t("lang.choose")
            }, {
              default: withCtx(() => [createVNode(_component_el_select, {
                placeholder: _ctx.$t("lang.choose.placeholder"),
                modelValue: _ctx.$i18n.locale,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.$i18n.locale = $event),
                onChange: langChanged
              }, {
                default: withCtx(() => [(openBlock(), createElementBlock(Fragment, null, renderList(langs, (lang, i2) => {
                  return createVNode(_component_el_option, {
                    key: i2,
                    label: lang.label,
                    value: lang.value
                  }, null, 8, ["label", "value"]);
                }), 64))]),
                _: 1
              }, 8, ["placeholder", "modelValue"])]),
              _: 1
            }, 8, ["label"])]),
            _: 1
          })]);
        };
      }
    });
    let a$1 = [["\0", "", "", "", "", "", "", "\x07", "\b", "	", "\n", "\v", "\f", "\r", "", "", "", "", "", "", "", "", "", "", "", "", "", "\x1B", "", "", "", "", " ", "!", '"', "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "/", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ":", ";", "<", "=", ">", "?", "@", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "[", "\\", "]", "^", "_", "`", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "{", "|", "}", "~", "\x7F", , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , " ", "!", "C/", "PS", "$?", "Y=", "|", "SS", '"', "(c)", "a", "<<", "!", , "(r)", "-", "deg", "+-", "2", "3", "'", "u", "P", "*", ",", "1", "o", ">>", "1/4", "1/2", "3/4", "?", "A", "A", "A", "A", "A", "A", "AE", "C", "E", "E", "E", "E", "I", "I", "I", "I", "D", "N", "O", "O", "O", "O", "O", "x", "O", "U", "U", "U", "U", "U", "Th", "ss", "a", "a", "a", "a", "a", "a", "ae", "c", "e", "e", "e", "e", "i", "i", "i", "i", "d", "n", "o", "o", "o", "o", "o", "/", "o", "u", "u", "u", "u", "y", "th", "y"], ["A", "a", "A", "a", "A", "a", "C", "c", "C", "c", "C", "c", "C", "c", "D", "d", "D", "d", "E", "e", "E", "e", "E", "e", "E", "e", "E", "e", "G", "g", "G", "g", "G", "g", "G", "g", "H", "h", "H", "h", "I", "i", "I", "i", "I", "i", "I", "i", "I", "i", "IJ", "ij", "J", "j", "K", "k", "k", "L", "l", "L", "l", "L", "l", "L", "l", "L", "l", "N", "n", "N", "n", "N", "n", "'n", "NG", "ng", "O", "o", "O", "o", "O", "o", "OE", "oe", "R", "r", "R", "r", "R", "r", "S", "s", "S", "s", "S", "s", "S", "s", "T", "t", "T", "t", "T", "t", "U", "u", "U", "u", "U", "u", "U", "u", "U", "u", "U", "u", "W", "w", "Y", "y", "Y", "Z", "z", "Z", "z", "Z", "z", "s", "b", "B", "B", "b", "6", "6", "O", "C", "c", "D", "D", "D", "d", "d", "3", "@", "E", "F", "f", "G", "G", "hv", "I", "I", "K", "k", "l", "l", "W", "N", "n", "O", "O", "o", "OI", "oi", "P", "p", "YR", "2", "2", "SH", "sh", "t", "T", "t", "T", "U", "u", "Y", "V", "Y", "y", "Z", "z", "ZH", "ZH", "zh", "zh", "2", "5", "5", "ts", "w", "|", "||", "|=", "!", "DZ", "Dz", "dz", "LJ", "Lj", "lj", "NJ", "Nj", "nj", "A", "a", "I", "i", "O", "o", "U", "u", "U", "u", "U", "u", "U", "u", "U", "u", "@", "A", "a", "A", "a", "AE", "ae", "G", "g", "G", "g", "K", "k", "O", "o", "O", "o", "ZH", "zh", "j", "DZ", "D", "dz", "G", "g", "HV", "W", "N", "n", "A", "a", "AE", "ae", "O", "o"], ["A", "a", "A", "a", "E", "e", "E", "e", "I", "i", "I", "i", "O", "o", "O", "o", "R", "r", "R", "r", "U", "u", "U", "u", "S", "s", "T", "t", "Y", "y", "H", "h", "N", "d", "OU", "ou", "Z", "z", "A", "a", "E", "e", "O", "o", "O", "o", "O", "o", "O", "o", "Y", "y", "l", "n", "t", "j", "db", "qp", "A", "C", "c", "L", "T", "s", "z", "?", "?", "B", "U", "V", "E", "e", "J", "j", "Q", "q", "R", "r", "Y", "y", "a", "a", "a", "b", "o", "c", "d", "d", "e", "@", "@", "e", "e", "e", "e", "j", "g", "g", "g", "g", "u", "Y", "h", "h", "i", "i", "I", "l", "l", "l", "lZ", "W", "W", "m", "n", "n", "n", "o", "OE", "O", "F", "R", "R", "R", "R", "r", "r", "R", "R", "R", "s", "S", "j", "S", "S", "t", "t", "U", "U", "v", "^", "W", "Y", "Y", "z", "z", "Z", "Z", "?", "?", "?", "C", "@", "B", "E", "G", "H", "j", "k", "L", "q", "?", "?", "dz", "dZ", "dz", "ts", "tS", "tC", "fN", "ls", "lz", "WW", "]]", "h", "h", "k", "h", "j", "r", "r", "r", "r", "w", "y", "'", '"', "`", "'", "`", "`", "'", "?", "?", "<", ">", "^", "V", "^", "V", "'", "-", "/", "\\", ",", "_", "\\", "/", ":", ".", "`", "'", "^", "V", "+", "-", "V", ".", "@", ",", "~", '"', "R", "X", "G", "l", "s", "x", "?", , , , , , , , "V", "=", '"'], [, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , "'", ",", , , , , , , , , "?", , , , , , , , "A", ";", "E", "I", "I", , "O", , "U", "O", "I", "A", "V", "G", "D", "E", "Z", "I", "Th", "I", "K", "L", "M", "N", "X", "O", "P", "R", , "S", "T", "Y", "F", "H", "Ps", "O", "I", "Y", "a", "e", "i", "i", "y", "a", "v", "g", "d", "e", "z", "i", "th", "i", "k", "l", "m", "n", "x", "o", "p", "r", "s", "s", "t", "y", "f", "h", "ps", "o", "i", "y", "o", "y", "o", , "b", "th", "U", "U", "U", "ph", "p", "&", , , "St", "st", "W", "w", "Q", "q", "Sp", "sp", "Sh", "sh", "F", "f", "Kh", "kh", "H", "h", "G", "g", "CH", "ch", "Ti", "ti", "k", "r", "c", "j"], ["Jo", "Yo", "Dj", "Gj", "Ie", "Dz", "I", "Yi", "J", "Lj", "Nj", "Tsh", "Kj", "I", "U", "Dzh", "A", "B", "V", "G", "D", "E", "Zh", "Z", "I", "Y", "K", "L", "M", "N", "O", "P", "R", "S", "T", "U", "F", "H", "C", "Ch", "Sh", "Shch", , "Y", , "E", "Yu", "Ya", "a", "b", "v", "g", "d", "e", "zh", "z", "i", "y", "k", "l", "m", "n", "o", "p", "r", "s", "t", "u", "f", "h", "c", "ch", "sh", "shch", , "y", , "e", "yu", "ya", "je", "yo", "dj", "gj", "ie", "dz", "i", "yi", "j", "lj", "nj", "tsh", "kj", "i", "u", "dzh", "O", "o", "E", "e", "Ie", "ie", "E", "e", "Ie", "ie", "O", "o", "Io", "io", "Ks", "ks", "Ps", "ps", "F", "f", "Y", "y", "Y", "y", "u", "u", "O", "o", "O", "o", "Ot", "ot", "Q", "q", "*1000*", , , , , , "*100.000*", "*1.000.000*", , , '"', '"', "R'", "r'", "G'", "g'", "G'", "g'", "G'", "g'", "Zh'", "zh'", "Z'", "z'", "K'", "k'", "K'", "k'", "K'", "k'", "K'", "k'", "N'", "n'", "Ng", "ng", "P'", "p'", "Kh", "kh", "S'", "s'", "T'", "t'", "U", "u", "U'", "u'", "Kh'", "kh'", "Tts", "tts", "Ch'", "ch'", "Ch'", "ch'", "H", "h", "Ch", "ch", "Ch'", "ch'", "`", "Zh", "zh", "K'", "k'", , , "N'", "n'", , , "Ch", "ch", , , , "a", "a", "A", "a", "Ae", "ae", "Ie", "ie", "@", "@", "@", "@", "Zh", "zh", "Z", "z", "Dz", "dz", "I", "i", "I", "i", "O", "o", "O", "o", "O", "o", "E", "e", "U", "u", "U", "u", "U", "u", "Ch", "ch", , , "Y", "y"], [, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , "A", "B", "G", "D", "E", "Z", "E", "E", "T`", "Zh", "I", "L", "Kh", "Ts", "K", "H", "Dz", "Gh", "Ch", "M", "Y", "N", "Sh", "O", "Ch`", "P", "J", "Rh", "S", "V", "T", "R", "Ts`", "W", "P`", "K`", "O", "F", , , "<", "'", "/", "!", ",", "?", ".", , "a", "b", "g", "d", "e", "z", "e", "e", "t`", "zh", "i", "l", "kh", "ts", "k", "h", "dz", "gh", "ch", "m", "y", "n", "sh", "o", "ch`", "p", "j", "rh", "s", "v", "t", "r", "ts`", "w", "p`", "k`", "o", "f", "ew", , ".", "-", , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , "@", "e", "a", "o", "i", "e", "e", "a", "a", "o", , "u", "'", , , , , , , ":", , , , , , , , , , , , , , "b", "g", "d", "h", "v", "z", "kh", "t", "y", "k", "k", "l", "m", "m", "n", "n", "s", "`", "p", "p", "ts", "ts", "q", "r", "sh", "t", , , , , , "V", "oy", "i", "'", '"'], [, , , , , , , , , , , , ",", , , , , , , , , , , , , , , ";", , , , "?", , , "a", "'", "w'", , "y'", , "b", "@", "t", "th", "j", "H", "kh", "d", "dh", "r", "z", "s", "sh", "S", "D", "T", "Z", "aa", "G", , , , , , , "f", "q", "k", "l", "m", "n", "h", "w", "~", "y", "an", "un", "in", "a", "u", "i", "W", , , "'", "'", , , , , , , , , , , "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "%", ".", ",", "*", , , , "'", "'", "'", , "'", "'w", "'u", "'y", "tt", "tth", "b", "t", "T", "p", "th", "bh", "'h", "H", "ny", "dy", "H", "ch", "cch", "dd", "D", "D", "Dt", "dh", "ddh", "d", "D", "D", "rr", "R", "R", "R", "R", "R", "R", "j", "R", "S", "S", "S", "S", "S", "T", "GH", "F", "F", "F", "v", "f", "ph", "Q", "Q", "kh", "k", "K", "K", "ng", "K", "g", "G", "N", "G", "G", "G", "L", "L", "L", "L", "N", "N", "N", "N", "N", "h", "Ch", "hy", "h", "H", "@", "W", "oe", "oe", "u", "yu", "yu", "W", "v", "y", "Y", "Y", "W", , , "y", "y'", ".", "ae", , , , , , , , "@", "#", , , , , , , , , , , "^", , , , , , , "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "Sh", "D", "Gh", "&", "+m"], ["//", "/", ",", "!", "!", "-", ",", ",", ";", "?", "~", "{", "}", "*", , , "'", , "b", "g", "g", "d", "d", "h", "w", "z", "H", "t", "t", "y", "yh", "k", "l", "m", "n", "s", "s", "`", "p", "p", "S", "q", "r", "sh", "t", , , , "a", "a", "a", "A", "A", "A", "e", "e", "e", "E", "i", "i", "u", "u", "u", "o", , "`", "'", , , "X", "Q", "@", "@", "|", "+", , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , "h", "sh", "n", "r", "b", "L", "k", "'", "v", "m", "f", "dh", "th", "l", "g", "ny", "s", "d", "z", "t", "y", "p", "j", "ch", "tt", "hh", "kh", "th", "z", "sh", "s", "d", "t", "z", "`", "gh", "q", "w", "a", "aa", "i", "ee", "u", "oo", "e", "ey", "o", "oa"], [], [, "N", "N", "H", , "a", "aa", "i", "ii", "u", "uu", "R", "L", "eN", "e", "e", "ai", "oN", "o", "o", "au", "k", "kh", "g", "gh", "ng", "c", "ch", "j", "jh", "ny", "tt", "tth", "dd", "ddh", "nn", "t", "th", "d", "dh", "n", "nnn", "p", "ph", "b", "bh", "m", "y", "r", "rr", "l", "l", "lll", "v", "sh", "ss", "s", "h", , , "'", "'", "aa", "i", "ii", "u", "uu", "R", "RR", "eN", "e", "e", "ai", "oN", "o", "o", "au", , , , "AUM", "'", "'", "`", "'", , , , "q", "khh", "ghh", "z", "dddh", "rh", "f", "yy", "RR", "LL", "L", "LL", " / ", " // ", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ".", , , , , , , , , , , , , , , , , "N", "N", "H", , "a", "aa", "i", "ii", "u", "uu", "R", "RR", , , "e", "ai", , , "o", "au", "k", "kh", "g", "gh", "ng", "c", "ch", "j", "jh", "ny", "tt", "tth", "dd", "ddh", "nn", "t", "th", "d", "dh", "n", , "p", "ph", "b", "bh", "m", "y", "r", , "l", , , , "sh", "ss", "s", "h", , , "'", , "aa", "i", "ii", "u", "uu", "R", "RR", , , "e", "ai", , , "o", "au", , , , , , , , , , , "+", , , , , "rr", "rh", , "yy", "RR", "LL", "L", "LL", , , "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "r'", "r`", "Rs", "Rs", "1/", "2/", "3/", "4/", " 1 - 1/", "/16"], [, , "N", , , "a", "aa", "i", "ii", "u", "uu", , , , , "ee", "ai", , , "oo", "au", "k", "kh", "g", "gh", "ng", "c", "ch", "j", "jh", "ny", "tt", "tth", "dd", "ddh", "nn", "t", "th", "d", "dh", "n", , "p", "ph", "b", "bb", "m", "y", "r", , "l", "ll", , "v", "sh", , "s", "h", , , "'", , "aa", "i", "ii", "u", "uu", , , , , "ee", "ai", , , "oo", "au", , , , , , , , , , , , , "khh", "ghh", "z", "rr", , "f", , , , , , , , "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "N", "H", , , "G.E.O.", , , , , , , , , , , , , "N", "N", "H", , "a", "aa", "i", "ii", "u", "uu", "R", , "eN", , "e", "ai", "oN", , "o", "au", "k", "kh", "g", "gh", "ng", "c", "ch", "j", "jh", "ny", "tt", "tth", "dd", "ddh", "nn", "t", "th", "d", "dh", "n", , "p", "ph", "b", "bh", "m", "ya", "r", , "l", "ll", , "v", "sh", "ss", "s", "h", , , "'", "'", "aa", "i", "ii", "u", "uu", "R", "RR", "eN", , "e", "ai", "oN", , "o", "au", , , , "AUM", , , , , , , , , , , , , , , , "RR", , , , , , "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"], [, "N", "N", "H", , "a", "aa", "i", "ii", "u", "uu", "R", "L", , , "e", "ai", , , "o", "au", "k", "kh", "g", "gh", "ng", "c", "ch", "j", "jh", "ny", "tt", "tth", "dd", "ddh", "nn", "t", "th", "d", "dh", "n", , "p", "ph", "b", "bh", "m", "y", "r", , "l", "ll", , , "sh", "ss", "s", "h", , , "'", "'", "aa", "i", "ii", "u", "uu", "R", , , , "e", "ai", , , "o", "au", , , , , , , , , , "+", "+", , , , , "rr", "rh", , "yy", "RR", "LL", , , , , "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", , , , , , , , , , , , , , , , , , , "N", "H", , "a", "aa", "i", "ii", "u", "uu", , , , "e", "ee", "ai", , "o", "oo", "au", "k", , , , "ng", "c", , "j", , "ny", "tt", , , , "nn", "t", , , , "n", "nnn", "p", , , , "m", "y", "r", "rr", "l", "ll", "lll", "v", , "ss", "s", "h", , , , , "aa", "i", "ii", "u", "uu", , , , "e", "ee", "ai", , "o", "oo", "au", , , , , , , , , , , "+", , , , , , , , , , , , , , , "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "+10+", "+100+", "+1000+"], [, "N", "N", "H", , "a", "aa", "i", "ii", "u", "uu", "R", "L", , "e", "ee", "ai", , "o", "oo", "au", "k", "kh", "g", "gh", "ng", "c", "ch", "j", "jh", "ny", "tt", "tth", "dd", "ddh", "nn", "t", "th", "d", "dh", "n", , "p", "ph", "b", "bh", "m", "y", "r", "rr", "l", "ll", , "v", "sh", "ss", "s", "h", , , , , "aa", "i", "ii", "u", "uu", "R", "RR", , "e", "ee", "ai", , "o", "oo", "au", , , , , , , , , "+", "+", , , , , , , , , , "RR", "LL", , , , , "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", , , , , , , , , , , , , , , , , , , "N", "H", , "a", "aa", "i", "ii", "u", "uu", "R", "L", , "e", "ee", "ai", , "o", "oo", "au", "k", "kh", "g", "gh", "ng", "c", "ch", "j", "jh", "ny", "tt", "tth", "dd", "ddh", "nn", "t", "th", "d", "dh", "n", , "p", "ph", "b", "bh", "m", "y", "r", "rr", "l", "ll", , "v", "sh", "ss", "s", "h", , , , , "aa", "i", "ii", "u", "uu", "R", "RR", , "e", "ee", "ai", , "o", "oo", "au", , , , , , , , , "+", "+", , , , , , , , "lll", , "RR", "LL", , , , , "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"], [, , "N", "H", , "a", "aa", "i", "ii", "u", "uu", "R", "L", , "e", "ee", "ai", , "o", "oo", "au", "k", "kh", "g", "gh", "ng", "c", "ch", "j", "jh", "ny", "tt", "tth", "dd", "ddh", "nn", "t", "th", "d", "dh", "n", , "p", "ph", "b", "bh", "m", "y", "r", "rr", "l", "ll", "lll", "v", "sh", "ss", "s", "h", , , , , "aa", "i", "ii", "u", "uu", "R", , , "e", "ee", "ai", , "o", "oo", "au", , , , , , , , , , , "+", , , , , , , , , "RR", "LL", , , , , "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", , , , , , , , , , , , , , , , , , , "N", "H", , "a", "aa", "ae", "aae", "i", "ii", "u", "uu", "R", "RR", "L", "LL", "e", "ee", "ai", "o", "oo", "au", , , , "k", "kh", "g", "gh", "ng", "nng", "c", "ch", "j", "jh", "ny", "jny", "nyj", "tt", "tth", "dd", "ddh", "nn", "nndd", "t", "th", "d", "dh", "n", , "nd", "p", "ph", "b", "bh", "m", "mb", "y", "r", , "l", , , "v", "sh", "ss", "s", "h", "ll", "f", , , , , , , , , "aa", "ae", "aae", "i", "ii", "u", , "uu", , "R", "e", "ee", "ai", "o", "oo", "au", "L", , , , , , , , , , , , , , , , , , , "RR", "LL", " . "], [, "k", "kh", "kh", "kh", "kh", "kh", "ng", "cch", "ch", "ch", "ch", "ch", "y", "d", "t", "th", "th", "th", "n", "d", "t", "th", "th", "th", "n", "b", "p", "ph", "f", "ph", "f", "ph", "m", "y", "r", "R", "l", "L", "w", "s", "s", "s", "h", "l", "`", "h", "~", "a", "a", "aa", "am", "i", "ii", "ue", "uue", "u", "uu", "'", , , , , "Bh.", "e", "ae", "o", "ai", "ai", "ao", "+", , , , , , , "M", , " * ", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " // ", " /// ", , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , "k", "kh", , "kh", , , "ng", "ch", , "s", , , "ny", , , , , , , "d", "h", "th", "th", , "n", "b", "p", "ph", "f", "ph", "f", , "m", "y", "r", , "l", , "w", , , "s", "h", , "`", , "~", "a", , "aa", "am", "i", "ii", "y", "yy", "u", "uu", , "o", "l", "ny", , , "e", "ei", "o", "ay", "ai", , "+", , , , , , , "M", , , "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", , , "hn", "hm"], ["AUM", , , , , , , , " // ", " * ", , "-", " / ", " / ", " // ", " -/ ", " +/ ", " X/ ", " /XX/ ", " /X/ ", ",", , , , , , , , , , , , "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ".5", "1.5", "2.5", "3.5", "4.5", "5.5", "6.5", "7.5", "8.5", "-.5", "+", "*", "^", "_", , "~", , "]", "[[", "]]", , , "k", "kh", "g", "gh", "ng", "c", "ch", "j", , "ny", "tt", "tth", "dd", "ddh", "nn", "t", "th", "d", "dh", "n", "p", "ph", "b", "bh", "m", "ts", "tsh", "dz", "dzh", "w", "zh", "z", "'", "y", "r", "l", "sh", "ssh", "s", "h", "a", "kss", "r", , , , , , , "aa", "i", "ii", "u", "uu", "R", "RR", "L", "LL", "e", "ee", "o", "oo", "M", "H", "i", "ii", , , , , , , , , , , , , , , "k", "kh", "g", "gh", "ng", "c", "ch", "j", , "ny", "tt", "tth", "dd", "ddh", "nn", "t", "th", "d", "dh", "n", "p", "ph", "b", "bh", "m", "ts", "tsh", "dz", "dzh", "w", "zh", "z", "'", "y", "r", "l", "sh", "ss", "s", "h", "a", "kss", "w", "y", "r", , "X", " :X: ", " /O/ ", " /o/ ", " \\o\\ ", " (O) "], ["k", "kh", "g", "gh", "ng", "c", "ch", "j", "jh", "ny", "nny", "tt", "tth", "dd", "ddh", "nn", "tt", "th", "d", "dh", "n", "p", "ph", "b", "bh", "m", "y", "r", "l", "w", "s", "h", "ll", "a", , "i", "ii", "u", "uu", "e", , "o", "au", , "aa", "i", "ii", "u", "uu", "e", "ai", , , , "N", "'", ":", , , , , , , , "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " / ", " // ", "n*", "r*", "l*", "e*", "sh", "ss", "R", "RR", "L", "LL", "R", "RR", "L", "LL", , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , "A", "B", "G", "D", "E", "V", "Z", "T`", "I", "K", "L", "M", "N", "O", "P", "Zh", "R", "S", "T", "U", "P`", "K`", "G'", "Q", "Sh", "Ch`", "C`", "Z'", "C", "Ch", "X", "J", "H", "E", "Y", "W", "Xh", "OE", , , , , , , , , , , "a", "b", "g", "d", "e", "v", "z", "t`", "i", "k", "l", "m", "n", "o", "p", "zh", "r", "s", "t", "u", "p`", "k`", "g'", "q", "sh", "ch`", "c`", "z'", "c", "ch", "x", "j", "h", "e", "y", "w", "xh", "oe", "f", , , , , " // "], ["g", "gg", "n", "d", "dd", "r", "m", "b", "bb", "s", "ss", , "j", "jj", "c", "k", "t", "p", "h", "ng", "nn", "nd", "nb", "dg", "rn", "rr", "rh", "rN", "mb", "mN", "bg", "bn", , "bs", "bsg", "bst", "bsb", "bss", "bsj", "bj", "bc", "bt", "bp", "bN", "bbN", "sg", "sn", "sd", "sr", "sm", "sb", "sbg", "sss", "s", "sj", "sc", "sk", "st", "sp", "sh", , , , , "Z", "g", "d", "m", "b", "s", "Z", , "j", "c", "t", "p", "N", "j", , , , , "ck", "ch", , , "pb", "pN", "hh", "Q", , , , , , , , "a", "ae", "ya", "yae", "eo", "e", "yeo", "ye", "o", "wa", "wae", "oe", "yo", "u", "weo", "we", "wi", "yu", "eu", "yi", "i", "a-o", "a-u", "ya-o", "ya-yo", "eo-o", "eo-u", "eo-eu", "yeo-o", "yeo-u", "o-eo", "o-e", "o-ye", "o-o", "o-u", "yo-ya", "yo-yae", "yo-yeo", "yo-o", "yo-i", "u-a", "u-ae", "u-eo-eu", "u-ye", "u-u", "yu-a", "yu-eo", "yu-e", "yu-yeo", "yu-ye", "yu-u", "yu-i", "eu-u", "eu-eu", "yi-u", "i-a", "i-ya", "i-o", "i-u", "i-eu", "i-U", "U", "U-eo", "U-u", "U-i", "UU", , , , , , "g", "gg", "gs", "n", "nj", "nh", "d", "l", "lg", "lm", "lb", "ls", "lt", "lp", "lh", "m", "b", "bs", "s", "ss", "ng", "j", "c", "k", "t", "p", "h", "gl", "gsg", "ng", "nd", "ns", "nZ", "nt", "dg", "tl", "lgs", "ln", "ld", "lth", "ll", "lmg", "lms", "lbs", "lbh", "rNp", "lss", "lZ", "lk", "lQ", "mg", "ml", "mb", "ms", "mss", "mZ", "mc", "mh", "mN", "bl", "bp", "ph", "pN", "sg", "sd", "sl", "sb", "Z", "g", "ss", , "kh", "N", "Ns", "NZ", "pb", "pN", "hn", "hl", "hm", "hb", "Q"], ["ha", "hu", "hi", "haa", "hee", "he", "ho", , "la", "lu", "li", "laa", "lee", "le", "lo", "lwa", "hha", "hhu", "hhi", "hhaa", "hhee", "hhe", "hho", "hhwa", "ma", "mu", "mi", "maa", "mee", "me", "mo", "mwa", "sza", "szu", "szi", "szaa", "szee", "sze", "szo", "szwa", "ra", "ru", "ri", "raa", "ree", "re", "ro", "rwa", "sa", "su", "si", "saa", "see", "se", "so", "swa", "sha", "shu", "shi", "shaa", "shee", "she", "sho", "shwa", "qa", "qu", "qi", "qaa", "qee", "qe", "qo", , "qwa", , "qwi", "qwaa", "qwee", "qwe", , , "qha", "qhu", "qhi", "qhaa", "qhee", "qhe", "qho", , "qhwa", , "qhwi", "qhwaa", "qhwee", "qhwe", , , "ba", "bu", "bi", "baa", "bee", "be", "bo", "bwa", "va", "vu", "vi", "vaa", "vee", "ve", "vo", "vwa", "ta", "tu", "ti", "taa", "tee", "te", "to", "twa", "ca", "cu", "ci", "caa", "cee", "ce", "co", "cwa", "xa", "xu", "xi", "xaa", "xee", "xe", "xo", , "xwa", , "xwi", "xwaa", "xwee", "xwe", , , "na", "nu", "ni", "naa", "nee", "ne", "no", "nwa", "nya", "nyu", "nyi", "nyaa", "nyee", "nye", "nyo", "nywa", "'a", "'u", , "'aa", "'ee", "'e", "'o", "'wa", "ka", "ku", "ki", "kaa", "kee", "ke", "ko", , "kwa", , "kwi", "kwaa", "kwee", "kwe", , , "kxa", "kxu", "kxi", "kxaa", "kxee", "kxe", "kxo", , "kxwa", , "kxwi", "kxwaa", "kxwee", "kxwe", , , "wa", "wu", "wi", "waa", "wee", "we", "wo", , "`a", "`u", "`i", "`aa", "`ee", "`e", "`o", , "za", "zu", "zi", "zaa", "zee", "ze", "zo", "zwa", "zha", "zhu", "zhi", "zhaa", "zhee", "zhe", "zho", "zhwa", "ya", "yu", "yi", "yaa", "yee", "ye", "yo", , "da", "du", "di", "daa", "dee", "de", "do", "dwa", "dda", "ddu", "ddi", "ddaa", "ddee", "dde", "ddo", "ddwa"], ["ja", "ju", "ji", "jaa", "jee", "je", "jo", "jwa", "ga", "gu", "gi", "gaa", "gee", "ge", "go", , "gwa", , "gwi", "gwaa", "gwee", "gwe", , , "gga", "ggu", "ggi", "ggaa", "ggee", "gge", "ggo", , "tha", "thu", "thi", "thaa", "thee", "the", "tho", "thwa", "cha", "chu", "chi", "chaa", "chee", "che", "cho", "chwa", "pha", "phu", "phi", "phaa", "phee", "phe", "pho", "phwa", "tsa", "tsu", "tsi", "tsaa", "tsee", "tse", "tso", "tswa", "tza", "tzu", "tzi", "tzaa", "tzee", "tze", "tzo", , "fa", "fu", "fi", "faa", "fee", "fe", "fo", "fwa", "pa", "pu", "pi", "paa", "pee", "pe", "po", "pwa", "rya", "mya", "fya", , , , , , , " ", ".", ",", ";", ":", ":: ", "?", "//", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10+", "20+", "30+", "40+", "50+", "60+", "70+", "80+", "90+", "100+", "10,000+", , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , "a", "e", "i", "o", "u", "v", "ga", "ka", "ge", "gi", "go", "gu", "gv", "ha", "he", "hi", "ho", "hu", "hv", "la", "le", "li", "lo", "lu", "lv", "ma", "me", "mi", "mo", "mu", "na", "hna", "nah", "ne", "ni", "no", "nu", "nv", "qua", "que", "qui", "quo", "quu", "quv", "sa", "s", "se", "si", "so", "su", "sv", "da", "ta", "de", "te", "di", "ti", "do", "du", "dv", "dla", "tla", "tle", "tli", "tlo", "tlu", "tlv", "tsa", "tse", "tsi", "tso", "tsu", "tsv", "wa", "we", "wi", "wo", "wu", "wv", "ya", "ye", "yi", "yo", "yu", "yv"], [, "ai", "aai", "i", "ii", "u", "uu", "oo", "ee", "i", "a", "aa", "we", "we", "wi", "wi", "wii", "wii", "wo", "wo", "woo", "woo", "woo", "wa", "wa", "waa", "waa", "waa", "ai", "w", "'", "t", "k", "sh", "s", "n", "w", "n", , "w", "c", "?", "l", "en", "in", "on", "an", "pai", "paai", "pi", "pii", "pu", "puu", "poo", "hee", "hi", "pa", "paa", "pwe", "pwe", "pwi", "pwi", "pwii", "pwii", "pwo", "pwo", "pwoo", "pwoo", "pwa", "pwa", "pwaa", "pwaa", "pwaa", "p", "p", "h", "tai", "taai", "ti", "tii", "tu", "tuu", "too", "dee", "di", "ta", "taa", "twe", "twe", "twi", "twi", "twii", "twii", "two", "two", "twoo", "twoo", "twa", "twa", "twaa", "twaa", "twaa", "t", "tte", "tti", "tto", "tta", "kai", "kaai", "ki", "kii", "ku", "kuu", "koo", "ka", "kaa", "kwe", "kwe", "kwi", "kwi", "kwii", "kwii", "kwo", "kwo", "kwoo", "kwoo", "kwa", "kwa", "kwaa", "kwaa", "kwaa", "k", "kw", "keh", "kih", "koh", "kah", "gai", "caai", "gi", "gii", "gu", "guu", "coo", "ga", "gaa", "cwe", "cwe", "cwi", "cwi", "cwii", "cwii", "cwo", "cwo", "cwoo", "cwoo", "cwa", "cwa", "cwaa", "cwaa", "cwaa", "g", "th", "mai", "maai", "mi", "mii", "mu", "muu", "moo", "ma", "maa", "mwe", "mwe", "mwi", "mwi", "mwii", "mwii", "mwo", "mwo", "mwoo", "mwoo", "mwa", "mwa", "mwaa", "mwaa", "mwaa", "m", "m", "mh", "m", "m", "nai", "naai", "ni", "nii", "nu", "nuu", "noo", "na", "naa", "nwe", "nwe", "nwa", "nwa", "nwaa", "nwaa", "nwaa", "n", "ng", "nh", "lai", "laai", "li", "lii", "lu", "luu", "loo", "la", "laa", "lwe", "lwe", "lwi", "lwi", "lwii", "lwii", "lwo", "lwo", "lwoo", "lwoo", "lwa", "lwa", "lwaa", "lwaa", "l", "l", "l", "sai", "saai", "si", "sii", "su", "suu", "soo", "sa", "saa", "swe", "swe", "swi", "swi", "swii", "swii", "swo", "swo", "swoo", "swoo"], ["swa", "swa", "swaa", "swaa", "swaa", "s", "s", "sw", "s", "sk", "skw", "sW", "spwa", "stwa", "skwa", "scwa", "she", "shi", "shii", "sho", "shoo", "sha", "shaa", "shwe", "shwe", "shwi", "shwi", "shwii", "shwii", "shwo", "shwo", "shwoo", "shwoo", "shwa", "shwa", "shwaa", "shwaa", "sh", "jai", "yaai", "ji", "jii", "ju", "juu", "yoo", "ja", "jaa", "ywe", "ywe", "ywi", "ywi", "ywii", "ywii", "ywo", "ywo", "ywoo", "ywoo", "ywa", "ywa", "ywaa", "ywaa", "ywaa", "j", "y", "y", "yi", "re", "rai", "le", "raai", "ri", "rii", "ru", "ruu", "lo", "ra", "raa", "la", "rwaa", "rwaa", "r", "r", "r", "vai", "faai", "vi", "vii", "vu", "vuu", "va", "vaa", "fwaa", "fwaa", "v", "the", "the", "thi", "thi", "thii", "thii", "tho", "thoo", "tha", "thaa", "thwaa", "thwaa", "th", "tthe", "tthi", "ttho", "ttha", "tth", "tye", "tyi", "tyo", "tya", "he", "hi", "hii", "ho", "hoo", "ha", "haa", "h", "h", "hk", "qaai", "qi", "qii", "qu", "quu", "qa", "qaa", "q", "tlhe", "tlhi", "tlho", "tlha", "re", "ri", "ro", "ra", "ngaai", "ngi", "ngii", "ngu", "nguu", "nga", "ngaa", "ng", "nng", "she", "shi", "sho", "sha", "the", "thi", "tho", "tha", "th", "lhi", "lhii", "lho", "lhoo", "lha", "lhaa", "lh", "the", "thi", "thii", "tho", "thoo", "tha", "thaa", "th", "b", "e", "i", "o", "a", "we", "wi", "wo", "wa", "ne", "ni", "no", "na", "ke", "ki", "ko", "ka", "he", "hi", "ho", "ha", "ghu", "gho", "ghe", "ghee", "ghi", "gha", "ru", "ro", "re", "ree", "ri", "ra", "wu", "wo", "we", "wee", "wi", "wa", "hwu", "hwo", "hwe", "hwee", "hwi", "hwa", "thu", "tho", "the", "thee", "thi", "tha", "ttu", "tto", "tte", "ttee", "tti", "tta", "pu", "po", "pe", "pee", "pi", "pa", "p", "gu", "go", "ge", "gee", "gi", "ga", "khu", "kho", "khe", "khee", "khi", "kha", "kku", "kko", "kke", "kkee", "kki"], ["kka", "kk", "nu", "no", "ne", "nee", "ni", "na", "mu", "mo", "me", "mee", "mi", "ma", "yu", "yo", "ye", "yee", "yi", "ya", "ju", "ju", "jo", "je", "jee", "ji", "ji", "ja", "jju", "jjo", "jje", "jjee", "jji", "jja", "lu", "lo", "le", "lee", "li", "la", "dlu", "dlo", "dle", "dlee", "dli", "dla", "lhu", "lho", "lhe", "lhee", "lhi", "lha", "tlhu", "tlho", "tlhe", "tlhee", "tlhi", "tlha", "tlu", "tlo", "tle", "tlee", "tli", "tla", "zu", "zo", "ze", "zee", "zi", "za", "z", "z", "dzu", "dzo", "dze", "dzee", "dzi", "dza", "su", "so", "se", "see", "si", "sa", "shu", "sho", "she", "shee", "shi", "sha", "sh", "tsu", "tso", "tse", "tsee", "tsi", "tsa", "chu", "cho", "che", "chee", "chi", "cha", "ttsu", "ttso", "ttse", "ttsee", "ttsi", "ttsa", "X", ".", "qai", "ngai", "nngi", "nngii", "nngo", "nngoo", "nnga", "nngaa", , , , , , , , , , " ", "b", "l", "f", "s", "n", "h", "d", "t", "c", "q", "m", "g", "ng", "z", "r", "a", "o", "u", "e", "i", "ch", "th", "ph", "p", "x", "p", "<", ">", , , , "f", "v", "u", "yr", "y", "w", "th", "th", "a", "o", "ac", "ae", "o", "o", "o", "oe", "on", "r", "k", "c", "k", "g", "ng", "g", "g", "w", "h", "h", "h", "h", "n", "n", "n", "i", "e", "j", "g", "ae", "a", "eo", "p", "z", "s", "s", "s", "c", "z", "t", "t", "d", "b", "b", "p", "p", "e", "m", "m", "m", "l", "l", "ng", "ng", "d", "o", "ear", "ior", "qu", "qu", "qu", "s", "yr", "yr", "yr", "q", "x", ".", ":", "+", "17", "18", "19"], [, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , "k", "kh", "g", "gh", "ng", "c", "ch", "j", "jh", "ny", "t", "tth", "d", "ddh", "nn", "t", "th", "d", "dh", "n", "p", "ph", "b", "bh", "m", "y", "r", "l", "v", "sh", "ss", "s", "h", "l", "q", "a", "aa", "i", "ii", "u", "uk", "uu", "uuv", "ry", "ryy", "ly", "lyy", "e", "ai", "oo", "oo", "au", "a", "aa", "aa", "i", "ii", "y", "yy", "u", "uu", "ua", "oe", "ya", "ie", "e", "ae", "ai", "oo", "au", "M", "H", "a`", , , , "r", , "!", , , , , , ".", " // ", ":", "+", "++", " * ", " /// ", "KR", "'", , , , "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"], [" @ ", " ... ", ",", ". ", ": ", " // ", , "-", ",", ". ", , , , , , , "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", , , , , , , "a", "e", "i", "o", "u", "O", "U", "ee", "n", "ng", "b", "p", "q", "g", "m", "l", "s", "sh", "t", "d", "ch", "j", "y", "r", "w", "f", "k", "kha", "ts", "z", "h", "zr", "lh", "zh", "ch", "-", "e", "i", "o", "u", "O", "U", "ng", "b", "p", "q", "g", "m", "t", "d", "ch", "j", "ts", "y", "w", "k", "g", "h", "jy", "ny", "dz", "e", "i", "iy", "U", "u", "ng", "k", "g", "h", "p", "sh", "t", "d", "j", "f", "g", "h", "ts", "z", "r", "ch", "zh", "i", "k", "r", "f", "zh", , , , , , , , , , "H", "X", "W", "M", " 3 ", " 333 ", "a", "i", "k", "ng", "c", "tt", "tth", "dd", "nn", "t", "d", "p", "ph", "ss", "zh", "z", "a", "t", "zh", "gh", "ng", "c", "jh", "tta", "ddh", "t", "dh", "ss", "cy", "zh", "z", "u", "y", "bh", "'"], [], [], [], [], [], ["A", "a", "B", "b", "B", "b", "B", "b", "C", "c", "D", "d", "D", "d", "D", "d", "D", "d", "D", "d", "E", "e", "E", "e", "E", "e", "E", "e", "E", "e", "F", "f", "G", "g", "H", "h", "H", "h", "H", "h", "H", "h", "H", "h", "I", "i", "I", "i", "K", "k", "K", "k", "K", "k", "L", "l", "L", "l", "L", "l", "L", "l", "M", "m", "M", "m", "M", "m", "N", "n", "N", "n", "N", "n", "N", "n", "O", "o", "O", "o", "O", "o", "O", "o", "P", "p", "P", "p", "R", "r", "R", "r", "R", "r", "R", "r", "S", "s", "S", "s", "S", "s", "S", "s", "S", "s", "T", "t", "T", "t", "T", "t", "T", "t", "U", "u", "U", "u", "U", "u", "U", "u", "U", "u", "V", "v", "V", "v", "W", "w", "W", "w", "W", "w", "W", "w", "W", "w", "X", "x", "X", "x", "Y", "y", "Z", "z", "Z", "z", "Z", "z", "h", "t", "w", "y", "a", "S", , , , , "A", "a", "A", "a", "A", "a", "A", "a", "A", "a", "A", "a", "A", "a", "A", "a", "A", "a", "A", "a", "A", "a", "A", "a", "E", "e", "E", "e", "E", "e", "E", "e", "E", "e", "E", "e", "E", "e", "E", "e", "I", "i", "I", "i", "O", "o", "O", "o", "O", "o", "O", "o", "O", "o", "O", "o", "O", "o", "O", "o", "O", "o", "O", "o", "O", "o", "O", "o", "U", "u", "U", "u", "U", "u", "U", "u", "U", "u", "U", "u", "U", "u", "Y", "y", "Y", "y", "Y", "y", "Y", "y"], ["a", "a", "a", "a", "a", "a", "a", "a", "A", "A", "A", "A", "A", "A", "A", "A", "e", "e", "e", "e", "e", "e", , , "E", "E", "E", "E", "E", "E", , , "e", "e", "e", "e", "e", "e", "e", "e", "E", "E", "E", "E", "E", "E", "E", "E", "i", "i", "i", "i", "i", "i", "i", "i", "I", "I", "I", "I", "I", "I", "I", "I", "o", "o", "o", "o", "o", "o", , , "O", "O", "O", "O", "O", "O", , , "u", "u", "u", "u", "u", "u", "u", "u", , "U", , "U", , "U", , "U", "o", "o", "o", "o", "o", "o", "o", "o", "O", "O", "O", "O", "O", "O", "O", "O", "a", "a", "e", "e", "e", "e", "i", "i", "o", "o", "u", "u", "o", "o", , , "a", "a", "a", "a", "a", "a", "a", "a", "A", "A", "A", "A", "A", "A", "A", "A", "e", "e", "e", "e", "e", "e", "e", "e", "E", "E", "E", "E", "E", "E", "E", "E", "o", "o", "o", "o", "o", "o", "o", "o", "O", "O", "O", "O", "O", "O", "O", "O", "a", "a", "a", "a", "a", , "a", "a", "A", "A", "A", "A", "A", "'", "i", "'", "~", '"~', "e", "e", "e", , "e", "e", "E", "E", "E", "E", "E", "'`", "''", "'~", "i", "i", "i", "i", , , "i", "i", "I", "I", "I", "I", , "`'", "`'", "`~", "u", "u", "u", "u", "R", "R", "u", "u", "U", "U", "U", "U", "R", '"`', `"'`, "`", , , "o", "o", "o", , "o", "o", "O", "O", "O", "O", "O", "'", "`"], [" ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", , , , , "-", "-", "-", "-", "--", "--", "||", "_", "'", "'", ",", "'", '"', '"', ",,", '"', "+", "++", "*", "*>", ".", "..", "...", ".", "\n", "\n\n", , , , , , " ", "%0", "%00", "'", "''", "'''", "`", "``", "```", "^", "<", ">", "*", "!!", "!?", "-", "_", "-", "^", "***", "--", "/", "-[", "]-", , "?!", "!?", "7", "PP", "(]", "[)", , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , "0", , , , "4", "5", "6", "7", "8", "9", "+", "-", "=", "(", ")", "n", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "+", "-", "=", "(", ")", , , , , , , , , , , , , , , , , , "ECU", "CL", "Cr", "FF", "L", "mil", "N", "Pts", "Rs", "W", "NS", "D", "EU", "K", "T", "Dr"], [, , "C", , , , , , , , "g", "H", "H", "H", "h", , "I", "I", "L", "l", "lb", "N", "no", "(p)", "P", "P", "Q", "R", "R", "R", , , "(sm)", "(tel)", "(tm)", , "Z", , , "mho", "Z", , , , "B", "C", "e", "e", , "F", , "M", "o", , , , , "i", "Q", "(fax)", "pi", , , "Pi", , "G", "L", "L", "Y", "D", "d", "e", "i", "j", , , "per", , , , , , , " 1/3 ", " 2/3 ", " 1/5 ", " 2/5 ", " 3/5 ", " 4/5 ", " 1/6 ", " 5/6 ", " 1/8 ", " 3/8 ", " 5/8 ", " 7/8 ", " 1/", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", "L", "C", "D", "M", "i", "ii", "iii", "iv", "v", "vi", "vii", "viii", "ix", "x", "xi", "xii", "l", "c", "d", "m", "(D", "D)", "((|))", ")", , , , , , , , , , , , , "-", "|", "-", "|", "-", "|", "\\", "/", "\\", "/", "-", "-", "~", "~", "-", "|", "-", "|", "-", "-", "-", "|", "-", "|", "|", "-", "-", "-", "-", "-", "-", "|", "|", "|", "|", "|", "|", "|", "^", "V", "\\", "=", "V", "^", "-", "-", "|", "|", "-", "-", "|", "|", "=", "|", "=", "=", "|", "=", "|", "=", "=", "=", "=", "=", "=", "|", "=", "|", "=", "|", "\\", "/", "\\", "/", "=", "=", "~", "~", "|", "|", "-", "|", "-", "|", "-", "-", "-", "|", "-", "|", "|", "|", "|", "|", "|", "|", "-", "\\", "\\", "|"], [], [], [], ["-", "-", "|", "|", "-", "-", "|", "|", "-", "-", "|", "|", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "-", "-", "|", "|", "-", "|", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "/", "\\", "X", "-", "|", "-", "|", "-", "|", "-", "|", "-", "|", "-", "|", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "-", "|", , , , , , , , , , , "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "^", "^", "^", "^", ">", ">", ">", ">", ">", ">", "V", "V", "V", "V", "<", "<", "<", "<", "<", "<", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "#", "#", "#", "#", "#", "^", "^", "^", "O", "#", "#", "#", "#", "#", "#", "#", "#"], [], [], [" ", "a", "1", "b", "'", "k", "2", "l", "@", "c", "i", "f", "/", "m", "s", "p", '"', "e", "3", "h", "9", "o", "6", "r", "^", "d", "j", "g", ">", "n", "t", "q", ",", "*", "5", "<", "-", "u", "8", "v", ".", "%", "[", "$", "+", "x", "!", "&", ";", ":", "4", "\\", "0", "z", "7", "(", "_", "?", "w", "]", "#", "y", ")", "=", "[d7]", "[d17]", "[d27]", "[d127]", "[d37]", "[d137]", "[d237]", "[d1237]", "[d47]", "[d147]", "[d247]", "[d1247]", "[d347]", "[d1347]", "[d2347]", "[d12347]", "[d57]", "[d157]", "[d257]", "[d1257]", "[d357]", "[d1357]", "[d2357]", "[d12357]", "[d457]", "[d1457]", "[d2457]", "[d12457]", "[d3457]", "[d13457]", "[d23457]", "[d123457]", "[d67]", "[d167]", "[d267]", "[d1267]", "[d367]", "[d1367]", "[d2367]", "[d12367]", "[d467]", "[d1467]", "[d2467]", "[d12467]", "[d3467]", "[d13467]", "[d23467]", "[d123467]", "[d567]", "[d1567]", "[d2567]", "[d12567]", "[d3567]", "[d13567]", "[d23567]", "[d123567]", "[d4567]", "[d14567]", "[d24567]", "[d124567]", "[d34567]", "[d134567]", "[d234567]", "[d1234567]", "[d8]", "[d18]", "[d28]", "[d128]", "[d38]", "[d138]", "[d238]", "[d1238]", "[d48]", "[d148]", "[d248]", "[d1248]", "[d348]", "[d1348]", "[d2348]", "[d12348]", "[d58]", "[d158]", "[d258]", "[d1258]", "[d358]", "[d1358]", "[d2358]", "[d12358]", "[d458]", "[d1458]", "[d2458]", "[d12458]", "[d3458]", "[d13458]", "[d23458]", "[d123458]", "[d68]", "[d168]", "[d268]", "[d1268]", "[d368]", "[d1368]", "[d2368]", "[d12368]", "[d468]", "[d1468]", "[d2468]", "[d12468]", "[d3468]", "[d13468]", "[d23468]", "[d123468]", "[d568]", "[d1568]", "[d2568]", "[d12568]", "[d3568]", "[d13568]", "[d23568]", "[d123568]", "[d4568]", "[d14568]", "[d24568]", "[d124568]", "[d34568]", "[d134568]", "[d234568]", "[d1234568]", "[d78]", "[d178]", "[d278]", "[d1278]", "[d378]", "[d1378]", "[d2378]", "[d12378]", "[d478]", "[d1478]", "[d2478]", "[d12478]", "[d3478]", "[d13478]", "[d23478]", "[d123478]", "[d578]", "[d1578]", "[d2578]", "[d12578]", "[d3578]", "[d13578]", "[d23578]", "[d123578]", "[d4578]", "[d14578]", "[d24578]", "[d124578]", "[d34578]", "[d134578]", "[d234578]", "[d1234578]", "[d678]", "[d1678]", "[d2678]", "[d12678]", "[d3678]", "[d13678]", "[d23678]", "[d123678]", "[d4678]", "[d14678]", "[d24678]", "[d124678]", "[d34678]", "[d134678]", "[d234678]", "[d1234678]", "[d5678]", "[d15678]", "[d25678]", "[d125678]", "[d35678]", "[d135678]", "[d235678]", "[d1235678]", "[d45678]", "[d145678]", "[d245678]", "[d1245678]", "[d345678]", "[d1345678]", "[d2345678]", "[d12345678]"], [], [], [], [], [], [], [], [" ", ",", ". ", '"', "[JIS]", '"', "/", "0", "<", "> ", "<<", ">> ", "[", "] ", "{", "} ", "[(", ")] ", "@", "X ", "[", "] ", "[[", "]] ", "((", ")) ", "[[", "]] ", "~ ", "``", "''", ",,", "@", "1", "2", "3", "4", "5", "6", "7", "8", "9", , , , , , , "~", "+", "+", "+", "+", , "@", " // ", "+10+", "+20+", "+30+", , , , , , , "a", "a", "i", "i", "u", "u", "e", "e", "o", "o", "ka", "ga", "ki", "gi", "ku", "gu", "ke", "ge", "ko", "go", "sa", "za", "si", "zi", "su", "zu", "se", "ze", "so", "zo", "ta", "da", "ti", "di", "tu", "tu", "du", "te", "de", "to", "do", "na", "ni", "nu", "ne", "no", "ha", "ba", "pa", "hi", "bi", "pi", "hu", "bu", "pu", "he", "be", "pe", "ho", "bo", "po", "ma", "mi", "mu", "me", "mo", "ya", "ya", "yu", "yu", "yo", "yo", "ra", "ri", "ru", "re", "ro", "wa", "wa", "wi", "we", "wo", "n", "vu", , , , , , , , , '"', '"', , , "a", "a", "i", "i", "u", "u", "e", "e", "o", "o", "ka", "ga", "ki", "gi", "ku", "gu", "ke", "ge", "ko", "go", "sa", "za", "si", "zi", "su", "zu", "se", "ze", "so", "zo", "ta", "da", "ti", "di", "tu", "tu", "du", "te", "de", "to", "do", "na", "ni", "nu", "ne", "no", "ha", "ba", "pa", "hi", "bi", "pi", "hu", "bu", "pu", "he", "be", "pe", "ho", "bo", "po", "ma", "mi", "mu", "me", "mo", "ya", "ya", "yu", "yu", "yo", "yo", "ra", "ri", "ru", "re", "ro", "wa", "wa", "wi", "we", "wo", "n", "vu", "ka", "ke", "va", "vi", "ve", "vo", , , '"', '"'], [, , , , , "B", "P", "M", "F", "D", "T", "N", "L", "G", "K", "H", "J", "Q", "X", "ZH", "CH", "SH", "R", "Z", "C", "S", "A", "O", "E", "EH", "AI", "EI", "AU", "OU", "AN", "EN", "ANG", "ENG", "ER", "I", "U", "IU", "V", "NG", "GN", , , , , "g", "gg", "gs", "n", "nj", "nh", "d", "dd", "r", "lg", "lm", "lb", "ls", "lt", "lp", "rh", "m", "b", "bb", "bs", "s", "ss", , "j", "jj", "c", "k", "t", "p", "h", "a", "ae", "ya", "yae", "eo", "e", "yeo", "ye", "o", "wa", "wae", "oe", "yo", "u", "weo", "we", "wi", "yu", "eu", "yi", "i", , "nn", "nd", "ns", "nZ", "lgs", "ld", "lbs", "lZ", "lQ", "mb", "ms", "mZ", "mN", "bg", , "bsg", "bst", "bj", "bt", "bN", "bbN", "sg", "sn", "sd", "sb", "sj", "Z", , "N", "Ns", "NZ", "pN", "hh", "Q", "yo-ya", "yo-yae", "yo-i", "yu-yeo", "yu-ye", "yu-i", "U", "U-i", , , , , , , , , , , , , , , , , , "BU", "ZI", "JI", "GU", "EE", "ENN", "OO", "ONN", "IR", "ANN", "INN", "UNN", "IM", "NGG", "AINN", "AUNN", "AM", "OM", "ONG", "INNN", "P", "T", "K", "H"], ["(g)", "(n)", "(d)", "(r)", "(m)", "(b)", "(s)", "()", "(j)", "(c)", "(k)", "(t)", "(p)", "(h)", "(ga)", "(na)", "(da)", "(ra)", "(ma)", "(ba)", "(sa)", "(a)", "(ja)", "(ca)", "(ka)", "(ta)", "(pa)", "(ha)", "(ju)", , , , "(1) ", "(2) ", "(3) ", "(4) ", "(5) ", "(6) ", "(7) ", "(8) ", "(9) ", "(10) ", "(Yue) ", "(Huo) ", "(Shui) ", "(Mu) ", "(Jin) ", "(Tu) ", "(Ri) ", "(Zhu) ", "(You) ", "(She) ", "(Ming) ", "(Te) ", "(Cai) ", "(Zhu) ", "(Lao) ", "(Dai) ", "(Hu) ", "(Xue) ", "(Jian) ", "(Qi) ", "(Zi) ", "(Xie) ", "(Ji) ", "(Xiu) ", "<<", ">>", , , , , , , , , , , , , , , , , , , , , , , , , , , , , "(g)", "(n)", "(d)", "(r)", "(m)", "(b)", "(s)", "()", "(j)", "(c)", "(k)", "(t)", "(p)", "(h)", "(ga)", "(na)", "(da)", "(ra)", "(ma)", "(ba)", "(sa)", "(a)", "(ja)", "(ca)", "(ka)", "(ta)", "(pa)", "(ha)", , , , "KIS ", "(1) ", "(2) ", "(3) ", "(4) ", "(5) ", "(6) ", "(7) ", "(8) ", "(9) ", "(10) ", "(Yue) ", "(Huo) ", "(Shui) ", "(Mu) ", "(Jin) ", "(Tu) ", "(Ri) ", "(Zhu) ", "(You) ", "(She) ", "(Ming) ", "(Te) ", "(Cai) ", "(Zhu) ", "(Lao) ", "(Mi) ", "(Nan) ", "(Nu) ", "(Shi) ", "(You) ", "(Yin) ", "(Zhu) ", "(Xiang) ", "(Xiu) ", "(Xie) ", "(Zheng) ", "(Shang) ", "(Zhong) ", "(Xia) ", "(Zuo) ", "(You) ", "(Yi) ", "(Zong) ", "(Xue) ", "(Jian) ", "(Qi) ", "(Zi) ", "(Xie) ", "(Ye) ", , , , , , , , , , , , , , , , "1M", "2M", "3M", "4M", "5M", "6M", "7M", "8M", "9M", "10M", "11M", "12M", , , , , "a", "i", "u", "u", "o", "ka", "ki", "ku", "ke", "ko", "sa", "si", "su", "se", "so", "ta", "ti", "tu", "te", "to", "na", "ni", "nu", "ne", "no", "ha", "hi", "hu", "he", "ho", "ma", "mi", "mu", "me", "mo", "ya", "yu", "yo", "ra", "ri", "ru", "re", "ro", "wa", "wi", "we", "wo"], ["apartment", "alpha", "ampere", "are", "inning", "inch", "won", "escudo", "acre", "ounce", "ohm", "kai-ri", "carat", "calorie", "gallon", "gamma", "giga", "guinea", "curie", "guilder", "kilo", "kilogram", "kilometer", "kilowatt", "gram", "gram ton", "cruzeiro", "krone", "case", "koruna", "co-op", "cycle", "centime", "shilling", "centi", "cent", "dozen", "desi", "dollar", "ton", "nano", "knot", "heights", "percent", "parts", "barrel", "piaster", "picul", "pico", "building", "farad", "feet", "bushel", "franc", "hectare", "peso", "pfennig", "hertz", "pence", "page", "beta", "point", "volt", "hon", "pound", "hall", "horn", "micro", "mile", "mach", "mark", "mansion", "micron", "milli", "millibar", "mega", "megaton", "meter", "yard", "yard", "yuan", "liter", "lira", "rupee", "ruble", "rem", "roentgen", "watt", "0h", "1h", "2h", "3h", "4h", "5h", "6h", "7h", "8h", "9h", "10h", "11h", "12h", "13h", "14h", "15h", "16h", "17h", "18h", "19h", "20h", "21h", "22h", "23h", "24h", "HPA", "da", "AU", "bar", "oV", "pc", , , , , "Heisei", "Syouwa", "Taisyou", "Meiji", "Inc.", "pA", "nA", "microamp", "mA", "kA", "kB", "MB", "GB", "cal", "kcal", "pF", "nF", "microFarad", "microgram", "mg", "kg", "Hz", "kHz", "MHz", "GHz", "THz", "microliter", "ml", "dl", "kl", "fm", "nm", "micrometer", "mm", "cm", "km", "mm^2", "cm^2", "m^2", "km^2", "mm^4", "cm^3", "m^3", "km^3", "m/s", "m/s^2", "Pa", "kPa", "MPa", "GPa", "rad", "rad/s", "rad/s^2", "ps", "ns", "microsecond", "ms", "pV", "nV", "microvolt", "mV", "kV", "MV", "pW", "nW", "microwatt", "mW", "kW", "MW", "kOhm", "MOhm", "a.m.", "Bq", "cc", "cd", "C/kg", "Co.", "dB", "Gy", "ha", "HP", "in", "K.K.", "KM", "kt", "lm", "ln", "log", "lx", "mb", "mil", "mol", "pH", "p.m.", "PPM", "PR", "sr", "Sv", "Wb", , , "1d", "2d", "3d", "4d", "5d", "6d", "7d", "8d", "9d", "10d", "11d", "12d", "13d", "14d", "15d", "16d", "17d", "18d", "19d", "20d", "21d", "22d", "23d", "24d", "25d", "26d", "27d", "28d", "29d", "30d", "31d"], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], ["Yi", "Ding", "Kao", "Qi", "Shang", "Xia", , "Wan", "Zhang", "San", "Shang", "Xia", "Ji", "Bu", "Yu", "Mian", "Gai", "Chou", "Chou", "Zhuan", "Qie", "Pi", "Shi", "Shi", "Qiu", "Bing", "Ye", "Cong", "Dong", "Si", "Cheng", "Diu", "Qiu", "Liang", "Diu", "You", "Liang", "Yan", "Bing", "Sang", "Gun", "Jiu", "Ge", "Ya", "Qiang", "Zhong", "Ji", "Jie", "Feng", "Guan", "Chuan", "Chan", "Lin", "Zhuo", "Zhu", "Ha", "Wan", "Dan", "Wei", "Zhu", "Jing", "Li", "Ju", "Pie", "Fu", "Yi", "Yi", "Nai", "Shime", "Jiu", "Jiu", "Zhe", "Me", "Yi", , "Zhi", "Wu", "Zha", "Hu", "Fa", "Le", "Zhong", "Ping", "Pang", "Qiao", "Hu", "Guai", "Cheng", "Cheng", "Yi", "Yin", , "Mie", "Jiu", "Qi", "Ye", "Xi", "Xiang", "Gai", "Diu", "Hal", , "Shu", "Twul", "Shi", "Ji", "Nang", "Jia", "Kel", "Shi", , "Ol", "Mai", "Luan", "Cal", "Ru", "Xue", "Yan", "Fu", "Sha", "Na", "Gan", "Sol", "El", "Cwul", , "Gan", "Chi", "Gui", "Gan", "Luan", "Lin", "Yi", "Jue", "Liao", "Ma", "Yu", "Zheng", "Shi", "Shi", "Er", "Chu", "Yu", "Yu", "Yu", "Yun", "Hu", "Qi", "Wu", "Jing", "Si", "Sui", "Gen", "Gen", "Ya", "Xie", "Ya", "Qi", "Ya", "Ji", "Tou", "Wang", "Kang", "Ta", "Jiao", "Hai", "Yi", "Chan", "Heng", "Mu", , "Xiang", "Jing", "Ting", "Liang", "Xiang", "Jing", "Ye", "Qin", "Bo", "You", "Xie", "Dan", "Lian", "Duo", "Wei", "Ren", "Ren", "Ji", "La", "Wang", "Yi", "Shi", "Ren", "Le", "Ding", "Ze", "Jin", "Pu", "Chou", "Ba", "Zhang", "Jin", "Jie", "Bing", "Reng", "Cong", "Fo", "San", "Lun", "Sya", "Cang", "Zi", "Shi", "Ta", "Zhang", "Fu", "Xian", "Xian", "Tuo", "Hong", "Tong", "Ren", "Qian", "Gan", "Yi", "Di", "Dai", "Ling", "Yi", "Chao", "Chang", "Sa", , "Yi", "Mu", "Men", "Ren", "Jia", "Chao", "Yang", "Qian", "Zhong", "Pi", "Wan", "Wu", "Jian", "Jie", "Yao", "Feng", "Cang", "Ren", "Wang", "Fen", "Di", "Fang"], ["Zhong", "Qi", "Pei", "Yu", "Diao", "Dun", "Wen", "Yi", "Xin", "Kang", "Yi", "Ji", "Ai", "Wu", "Ji", "Fu", "Fa", "Xiu", "Jin", "Bei", "Dan", "Fu", "Tang", "Zhong", "You", "Huo", "Hui", "Yu", "Cui", "Chuan", "San", "Wei", "Chuan", "Che", "Ya", "Xian", "Shang", "Chang", "Lun", "Cang", "Xun", "Xin", "Wei", "Zhu", , "Xuan", "Nu", "Bo", "Gu", "Ni", "Ni", "Xie", "Ban", "Xu", "Ling", "Zhou", "Shen", "Qu", "Si", "Beng", "Si", "Jia", "Pi", "Yi", "Si", "Ai", "Zheng", "Dian", "Han", "Mai", "Dan", "Zhu", "Bu", "Qu", "Bi", "Shao", "Ci", "Wei", "Di", "Zhu", "Zuo", "You", "Yang", "Ti", "Zhan", "He", "Bi", "Tuo", "She", "Yu", "Yi", "Fo", "Zuo", "Kou", "Ning", "Tong", "Ni", "Xuan", "Qu", "Yong", "Wa", "Qian", , "Ka", , "Pei", "Huai", "He", "Lao", "Xiang", "Ge", "Yang", "Bai", "Fa", "Ming", "Jia", "Er", "Bing", "Ji", "Hen", "Huo", "Gui", "Quan", "Tiao", "Jiao", "Ci", "Yi", "Shi", "Xing", "Shen", "Tuo", "Kan", "Zhi", "Gai", "Lai", "Yi", "Chi", "Kua", "Guang", "Li", "Yin", "Shi", "Mi", "Zhu", "Xu", "You", "An", "Lu", "Mou", "Er", "Lun", "Tong", "Cha", "Chi", "Xun", "Gong", "Zhou", "Yi", "Ru", "Jian", "Xia", "Jia", "Zai", "Lu", "Ko", "Jiao", "Zhen", "Ce", "Qiao", "Kuai", "Chai", "Ning", "Nong", "Jin", "Wu", "Hou", "Jiong", "Cheng", "Zhen", "Zuo", "Chou", "Qin", "Lu", "Ju", "Shu", "Ting", "Shen", "Tuo", "Bo", "Nan", "Hao", "Bian", "Tui", "Yu", "Xi", "Cu", "E", "Qiu", "Xu", "Kuang", "Ku", "Wu", "Jun", "Yi", "Fu", "Lang", "Zu", "Qiao", "Li", "Yong", "Hun", "Jing", "Xian", "San", "Pai", "Su", "Fu", "Xi", "Li", "Fu", "Ping", "Bao", "Yu", "Si", "Xia", "Xin", "Xiu", "Yu", "Ti", "Che", "Chou", , "Yan", "Lia", "Li", "Lai", , "Jian", "Xiu", "Fu", "He", "Ju", "Xiao", "Pai", "Jian", "Biao", "Chu", "Fei", "Feng", "Ya", "An", "Bei", "Yu", "Xin", "Bi", "Jian"], ["Chang", "Chi", "Bing", "Zan", "Yao", "Cui", "Lia", "Wan", "Lai", "Cang", "Zong", "Ge", "Guan", "Bei", "Tian", "Shu", "Shu", "Men", "Dao", "Tan", "Jue", "Chui", "Xing", "Peng", "Tang", "Hou", "Yi", "Qi", "Ti", "Gan", "Jing", "Jie", "Sui", "Chang", "Jie", "Fang", "Zhi", "Kong", "Juan", "Zong", "Ju", "Qian", "Ni", "Lun", "Zhuo", "Wei", "Luo", "Song", "Leng", "Hun", "Dong", "Zi", "Ben", "Wu", "Ju", "Nai", "Cai", "Jian", "Zhai", "Ye", "Zhi", "Sha", "Qing", , "Ying", "Cheng", "Jian", "Yan", "Nuan", "Zhong", "Chun", "Jia", "Jie", "Wei", "Yu", "Bing", "Ruo", "Ti", "Wei", "Pian", "Yan", "Feng", "Tang", "Wo", "E", "Xie", "Che", "Sheng", "Kan", "Di", "Zuo", "Cha", "Ting", "Bei", "Ye", "Huang", "Yao", "Zhan", "Chou", "Yan", "You", "Jian", "Xu", "Zha", "Ci", "Fu", "Bi", "Zhi", "Zong", "Mian", "Ji", "Yi", "Xie", "Xun", "Si", "Duan", "Ce", "Zhen", "Ou", "Tou", "Tou", "Bei", "Za", "Lu", "Jie", "Wei", "Fen", "Chang", "Gui", "Sou", "Zhi", "Su", "Xia", "Fu", "Yuan", "Rong", "Li", "Ru", "Yun", "Gou", "Ma", "Bang", "Dian", "Tang", "Hao", "Jie", "Xi", "Shan", "Qian", "Jue", "Cang", "Chu", "San", "Bei", "Xiao", "Yong", "Yao", "Tan", "Suo", "Yang", "Fa", "Bing", "Jia", "Dai", "Zai", "Tang", , "Bin", "Chu", "Nuo", "Can", "Lei", "Cui", "Yong", "Zao", "Zong", "Peng", "Song", "Ao", "Chuan", "Yu", "Zhai", "Cou", "Shang", "Qiang", "Jing", "Chi", "Sha", "Han", "Zhang", "Qing", "Yan", "Di", "Xi", "Lu", "Bei", "Piao", "Jin", "Lian", "Lu", "Man", "Qian", "Xian", "Tan", "Ying", "Dong", "Zhuan", "Xiang", "Shan", "Qiao", "Jiong", "Tui", "Zun", "Pu", "Xi", "Lao", "Chang", "Guang", "Liao", "Qi", "Deng", "Chan", "Wei", "Ji", "Fan", "Hui", "Chuan", "Jian", "Dan", "Jiao", "Jiu", "Seng", "Fen", "Xian", "Jue", "E", "Jiao", "Jian", "Tong", "Lin", "Bo", "Gu", , "Su", "Xian", "Jiang", "Min", "Ye", "Jin", "Jia", "Qiao", "Pi", "Feng", "Zhou", "Ai", "Sai"], ["Yi", "Jun", "Nong", "Chan", "Yi", "Dang", "Jing", "Xuan", "Kuai", "Jian", "Chu", "Dan", "Jiao", "Sha", "Zai", , "Bin", "An", "Ru", "Tai", "Chou", "Chai", "Lan", "Ni", "Jin", "Qian", "Meng", "Wu", "Ning", "Qiong", "Ni", "Chang", "Lie", "Lei", "Lu", "Kuang", "Bao", "Du", "Biao", "Zan", "Zhi", "Si", "You", "Hao", "Chen", "Chen", "Li", "Teng", "Wei", "Long", "Chu", "Chan", "Rang", "Shu", "Hui", "Li", "Luo", "Zan", "Nuo", "Tang", "Yan", "Lei", "Nang", "Er", "Wu", "Yun", "Zan", "Yuan", "Xiong", "Chong", "Zhao", "Xiong", "Xian", "Guang", "Dui", "Ke", "Dui", "Mian", "Tu", "Chang", "Er", "Dui", "Er", "Xin", "Tu", "Si", "Yan", "Yan", "Shi", "Shi", "Dang", "Qian", "Dou", "Fen", "Mao", "Shen", "Dou", "Bai", "Jing", "Li", "Huang", "Ru", "Wang", "Nei", "Quan", "Liang", "Yu", "Ba", "Gong", "Liu", "Xi", , "Lan", "Gong", "Tian", "Guan", "Xing", "Bing", "Qi", "Ju", "Dian", "Zi", "Ppwun", "Yang", "Jian", "Shou", "Ji", "Yi", "Ji", "Chan", "Jiong", "Mao", "Ran", "Nei", "Yuan", "Mao", "Gang", "Ran", "Ce", "Jiong", "Ce", "Zai", "Gua", "Jiong", "Mao", "Zhou", "Mou", "Gou", "Xu", "Mian", "Mi", "Rong", "Yin", "Xie", "Kan", "Jun", "Nong", "Yi", "Mi", "Shi", "Guan", "Meng", "Zhong", "Ju", "Yuan", "Ming", "Kou", "Lam", "Fu", "Xie", "Mi", "Bing", "Dong", "Tai", "Gang", "Feng", "Bing", "Hu", "Chong", "Jue", "Hu", "Kuang", "Ye", "Leng", "Pan", "Fu", "Min", "Dong", "Xian", "Lie", "Xia", "Jian", "Jing", "Shu", "Mei", "Tu", "Qi", "Gu", "Zhun", "Song", "Jing", "Liang", "Qing", "Diao", "Ling", "Dong", "Gan", "Jian", "Yin", "Cou", "Yi", "Li", "Cang", "Ming", "Zhuen", "Cui", "Si", "Duo", "Jin", "Lin", "Lin", "Ning", "Xi", "Du", "Ji", "Fan", "Fan", "Fan", "Feng", "Ju", "Chu", "Tako", "Feng", "Mok", "Ci", "Fu", "Feng", "Ping", "Feng", "Kai", "Huang", "Kai", "Gan", "Deng", "Ping", "Qu", "Xiong", "Kuai", "Tu", "Ao", "Chu", "Ji", "Dang", "Han", "Han", "Zao"], ["Dao", "Diao", "Dao", "Ren", "Ren", "Chuang", "Fen", "Qie", "Yi", "Ji", "Kan", "Qian", "Cun", "Chu", "Wen", "Ji", "Dan", "Xing", "Hua", "Wan", "Jue", "Li", "Yue", "Lie", "Liu", "Ze", "Gang", "Chuang", "Fu", "Chu", "Qu", "Ju", "Shan", "Min", "Ling", "Zhong", "Pan", "Bie", "Jie", "Jie", "Bao", "Li", "Shan", "Bie", "Chan", "Jing", "Gua", "Gen", "Dao", "Chuang", "Kui", "Ku", "Duo", "Er", "Zhi", "Shua", "Quan", "Cha", "Ci", "Ke", "Jie", "Gui", "Ci", "Gui", "Kai", "Duo", "Ji", "Ti", "Jing", "Lou", "Gen", "Ze", "Yuan", "Cuo", "Xue", "Ke", "La", "Qian", "Cha", "Chuang", "Gua", "Jian", "Cuo", "Li", "Ti", "Fei", "Pou", "Chan", "Qi", "Chuang", "Zi", "Gang", "Wan", "Bo", "Ji", "Duo", "Qing", "Yan", "Zhuo", "Jian", "Ji", "Bo", "Yan", "Ju", "Huo", "Sheng", "Jian", "Duo", "Duan", "Wu", "Gua", "Fu", "Sheng", "Jian", "Ge", "Zha", "Kai", "Chuang", "Juan", "Chan", "Tuan", "Lu", "Li", "Fou", "Shan", "Piao", "Kou", "Jiao", "Gua", "Qiao", "Jue", "Hua", "Zha", "Zhuo", "Lian", "Ju", "Pi", "Liu", "Gui", "Jiao", "Gui", "Jian", "Jian", "Tang", "Huo", "Ji", "Jian", "Yi", "Jian", "Zhi", "Chan", "Cuan", "Mo", "Li", "Zhu", "Li", "Ya", "Quan", "Ban", "Gong", "Jia", "Wu", "Mai", "Lie", "Jin", "Keng", "Xie", "Zhi", "Dong", "Zhu", "Nu", "Jie", "Qu", "Shao", "Yi", "Zhu", "Miao", "Li", "Jing", "Lao", "Lao", "Juan", "Kou", "Yang", "Wa", "Xiao", "Mou", "Kuang", "Jie", "Lie", "He", "Shi", "Ke", "Jing", "Hao", "Bo", "Min", "Chi", "Lang", "Yong", "Yong", "Mian", "Ke", "Xun", "Juan", "Qing", "Lu", "Pou", "Meng", "Lai", "Le", "Kai", "Mian", "Dong", "Xu", "Xu", "Kan", "Wu", "Yi", "Xun", "Weng", "Sheng", "Lao", "Mu", "Lu", "Piao", "Shi", "Ji", "Qin", "Qiang", "Jiao", "Quan", "Yang", "Yi", "Jue", "Fan", "Juan", "Tong", "Ju", "Dan", "Xie", "Mai", "Xun", "Xun", "Lu", "Li", "Che", "Rang", "Quan", "Bao", "Shao", "Yun", "Jiu", "Bao", "Gou", "Wu"], ["Yun", "Mwun", "Nay", "Gai", "Gai", "Bao", "Cong", , "Xiong", "Peng", "Ju", "Tao", "Ge", "Pu", "An", "Pao", "Fu", "Gong", "Da", "Jiu", "Qiong", "Bi", "Hua", "Bei", "Nao", "Chi", "Fang", "Jiu", "Yi", "Za", "Jiang", "Kang", "Jiang", "Kuang", "Hu", "Xia", "Qu", "Bian", "Gui", "Qie", "Zang", "Kuang", "Fei", "Hu", "Tou", "Gui", "Gui", "Hui", "Dan", "Gui", "Lian", "Lian", "Suan", "Du", "Jiu", "Qu", "Xi", "Pi", "Qu", "Yi", "Qia", "Yan", "Bian", "Ni", "Qu", "Shi", "Xin", "Qian", "Nian", "Sa", "Zu", "Sheng", "Wu", "Hui", "Ban", "Shi", "Xi", "Wan", "Hua", "Xie", "Wan", "Bei", "Zu", "Zhuo", "Xie", "Dan", "Mai", "Nan", "Dan", "Ji", "Bo", "Shuai", "Bu", "Kuang", "Bian", "Bu", "Zhan", "Qia", "Lu", "You", "Lu", "Xi", "Gua", "Wo", "Xie", "Jie", "Jie", "Wei", "Ang", "Qiong", "Zhi", "Mao", "Yin", "Wei", "Shao", "Ji", "Que", "Luan", "Shi", "Juan", "Xie", "Xu", "Jin", "Que", "Wu", "Ji", "E", "Qing", "Xi", , "Han", "Zhan", "E", "Ting", "Li", "Zhe", "Han", "Li", "Ya", "Ya", "Yan", "She", "Zhi", "Zha", "Pang", , "He", "Ya", "Zhi", "Ce", "Pang", "Ti", "Li", "She", "Hou", "Ting", "Zui", "Cuo", "Fei", "Yuan", "Ce", "Yuan", "Xiang", "Yan", "Li", "Jue", "Sha", "Dian", "Chu", "Jiu", "Qin", "Ao", "Gui", "Yan", "Si", "Li", "Chang", "Lan", "Li", "Yan", "Yan", "Yuan", "Si", "Gong", "Lin", "Qiu", "Qu", "Qu", "Uk", "Lei", "Du", "Xian", "Zhuan", "San", "Can", "Can", "Can", "Can", "Ai", "Dai", "You", "Cha", "Ji", "You", "Shuang", "Fan", "Shou", "Guai", "Ba", "Fa", "Ruo", "Shi", "Shu", "Zhuo", "Qu", "Shou", "Bian", "Xu", "Jia", "Pan", "Sou", "Gao", "Wei", "Sou", "Die", "Rui", "Cong", "Kou", "Gu", "Ju", "Ling", "Gua", "Tao", "Kou", "Zhi", "Jiao", "Zhao", "Ba", "Ding", "Ke", "Tai", "Chi", "Shi", "You", "Qiu", "Po", "Ye", "Hao", "Si", "Tan", "Chi", "Le", "Diao", "Ji", , "Hong"], ["Mie", "Xu", "Mang", "Chi", "Ge", "Xuan", "Yao", "Zi", "He", "Ji", "Diao", "Cun", "Tong", "Ming", "Hou", "Li", "Tu", "Xiang", "Zha", "Xia", "Ye", "Lu", "A", "Ma", "Ou", "Xue", "Yi", "Jun", "Chou", "Lin", "Tun", "Yin", "Fei", "Bi", "Qin", "Qin", "Jie", "Bu", "Fou", "Ba", "Dun", "Fen", "E", "Han", "Ting", "Hang", "Shun", "Qi", "Hong", "Zhi", "Shen", "Wu", "Wu", "Chao", "Ne", "Xue", "Xi", "Chui", "Dou", "Wen", "Hou", "Ou", "Wu", "Gao", "Ya", "Jun", "Lu", "E", "Ge", "Mei", "Ai", "Qi", "Cheng", "Wu", "Gao", "Fu", "Jiao", "Hong", "Chi", "Sheng", "Ne", "Tun", "Fu", "Yi", "Dai", "Ou", "Li", "Bai", "Yuan", "Kuai", , "Qiang", "Wu", "E", "Shi", "Quan", "Pen", "Wen", "Ni", "M", "Ling", "Ran", "You", "Di", "Zhou", "Shi", "Zhou", "Tie", "Xi", "Yi", "Qi", "Ping", "Zi", "Gu", "Zi", "Wei", "Xu", "He", "Nao", "Xia", "Pei", "Yi", "Xiao", "Shen", "Hu", "Ming", "Da", "Qu", "Ju", "Gem", "Za", "Tuo", "Duo", "Pou", "Pao", "Bi", "Fu", "Yang", "He", "Zha", "He", "Hai", "Jiu", "Yong", "Fu", "Que", "Zhou", "Wa", "Ka", "Gu", "Ka", "Zuo", "Bu", "Long", "Dong", "Ning", "Tha", "Si", "Xian", "Huo", "Qi", "Er", "E", "Guang", "Zha", "Xi", "Yi", "Lie", "Zi", "Mie", "Mi", "Zhi", "Yao", "Ji", "Zhou", "Ge", "Shuai", "Zan", "Xiao", "Ke", "Hui", "Kua", "Huai", "Tao", "Xian", "E", "Xuan", "Xiu", "Wai", "Yan", "Lao", "Yi", "Ai", "Pin", "Shen", "Tong", "Hong", "Xiong", "Chi", "Wa", "Ha", "Zai", "Yu", "Di", "Pai", "Xiang", "Ai", "Hen", "Kuang", "Ya", "Da", "Xiao", "Bi", "Yue", , "Hua", "Sasou", "Kuai", "Duo", , "Ji", "Nong", "Mou", "Yo", "Hao", "Yuan", "Long", "Pou", "Mang", "Ge", "E", "Chi", "Shao", "Li", "Na", "Zu", "He", "Ku", "Xiao", "Xian", "Lao", "Bo", "Zhe", "Zha", "Liang", "Ba", "Mie", "Le", "Sui", "Fou", "Bu", "Han", "Heng", "Geng", "Shuo", "Ge"], ["You", "Yan", "Gu", "Gu", "Bai", "Han", "Suo", "Chun", "Yi", "Ai", "Jia", "Tu", "Xian", "Huan", "Li", "Xi", "Tang", "Zuo", "Qiu", "Che", "Wu", "Zao", "Ya", "Dou", "Qi", "Di", "Qin", "Ma", "Mal", "Hong", "Dou", "Kes", "Lao", "Liang", "Suo", "Zao", "Huan", "Lang", "Sha", "Ji", "Zuo", "Wo", "Feng", "Yin", "Hu", "Qi", "Shou", "Wei", "Shua", "Chang", "Er", "Li", "Qiang", "An", "Jie", "Yo", "Nian", "Yu", "Tian", "Lai", "Sha", "Xi", "Tuo", "Hu", "Ai", "Zhou", "Nou", "Ken", "Zhuo", "Zhuo", "Shang", "Di", "Heng", "Lan", "A", "Xiao", "Xiang", "Tun", "Wu", "Wen", "Cui", "Sha", "Hu", "Qi", "Qi", "Tao", "Dan", "Dan", "Ye", "Zi", "Bi", "Cui", "Chuo", "He", "Ya", "Qi", "Zhe", "Pei", "Liang", "Xian", "Pi", "Sha", "La", "Ze", "Qing", "Gua", "Pa", "Zhe", "Se", "Zhuan", "Nie", "Guo", "Luo", "Yan", "Di", "Quan", "Tan", "Bo", "Ding", "Lang", "Xiao", , "Tang", "Chi", "Ti", "An", "Jiu", "Dan", "Ke", "Yong", "Wei", "Nan", "Shan", "Yu", "Zhe", "La", "Jie", "Hou", "Han", "Die", "Zhou", "Chai", "Wai", "Re", "Yu", "Yin", "Zan", "Yao", "Wo", "Mian", "Hu", "Yun", "Chuan", "Hui", "Huan", "Huan", "Xi", "He", "Ji", "Kui", "Zhong", "Wei", "Sha", "Xu", "Huang", "Du", "Nie", "Xuan", "Liang", "Yu", "Sang", "Chi", "Qiao", "Yan", "Dan", "Pen", "Can", "Li", "Yo", "Zha", "Wei", "Miao", "Ying", "Pen", "Phos", "Kui", "Xi", "Yu", "Jie", "Lou", "Ku", "Sao", "Huo", "Ti", "Yao", "He", "A", "Xiu", "Qiang", "Se", "Yong", "Su", "Hong", "Xie", "Yi", "Suo", "Ma", "Cha", "Hai", "Ke", "Ta", "Sang", "Tian", "Ru", "Sou", "Wa", "Ji", "Pang", "Wu", "Xian", "Shi", "Ge", "Zi", "Jie", "Luo", "Weng", "Wa", "Si", "Chi", "Hao", "Suo", "Jia", "Hai", "Suo", "Qin", "Nie", "He", "Cis", "Sai", "Ng", "Ge", "Na", "Dia", "Ai", , "Tong", "Bi", "Ao", "Ao", "Lian", "Cui", "Zhe", "Mo", "Sou", "Sou", "Tan"], ["Di", "Qi", "Jiao", "Chong", "Jiao", "Kai", "Tan", "San", "Cao", "Jia", "Ai", "Xiao", "Piao", "Lou", "Ga", "Gu", "Xiao", "Hu", "Hui", "Guo", "Ou", "Xian", "Ze", "Chang", "Xu", "Po", "De", "Ma", "Ma", "Hu", "Lei", "Du", "Ga", "Tang", "Ye", "Beng", "Ying", "Saai", "Jiao", "Mi", "Xiao", "Hua", "Mai", "Ran", "Zuo", "Peng", "Lao", "Xiao", "Ji", "Zhu", "Chao", "Kui", "Zui", "Xiao", "Si", "Hao", "Fu", "Liao", "Qiao", "Xi", "Xiu", "Tan", "Tan", "Mo", "Xun", "E", "Zun", "Fan", "Chi", "Hui", "Zan", "Chuang", "Cu", "Dan", "Yu", "Tun", "Cheng", "Jiao", "Ye", "Xi", "Qi", "Hao", "Lian", "Xu", "Deng", "Hui", "Yin", "Pu", "Jue", "Qin", "Xun", "Nie", "Lu", "Si", "Yan", "Ying", "Da", "Dan", "Yu", "Zhou", "Jin", "Nong", "Yue", "Hui", "Qi", "E", "Zao", "Yi", "Shi", "Jiao", "Yuan", "Ai", "Yong", "Jue", "Kuai", "Yu", "Pen", "Dao", "Ge", "Xin", "Dun", "Dang", "Sin", "Sai", "Pi", "Pi", "Yin", "Zui", "Ning", "Di", "Lan", "Ta", "Huo", "Ru", "Hao", "Xia", "Ya", "Duo", "Xi", "Chou", "Ji", "Jin", "Hao", "Ti", "Chang", , , "Ca", "Ti", "Lu", "Hui", "Bo", "You", "Nie", "Yin", "Hu", "Mo", "Huang", "Zhe", "Li", "Liu", "Haai", "Nang", "Xiao", "Mo", "Yan", "Li", "Lu", "Long", "Fu", "Dan", "Chen", "Pin", "Pi", "Xiang", "Huo", "Mo", "Xi", "Duo", "Ku", "Yan", "Chan", "Ying", "Rang", "Dian", "La", "Ta", "Xiao", "Jiao", "Chuo", "Huan", "Huo", "Zhuan", "Nie", "Xiao", "Ca", "Li", "Chan", "Chai", "Li", "Yi", "Luo", "Nang", "Zan", "Su", "Xi", "So", "Jian", "Za", "Zhu", "Lan", "Nie", "Nang", , , "Wei", "Hui", "Yin", "Qiu", "Si", "Nin", "Jian", "Hui", "Xin", "Yin", "Nan", "Tuan", "Tuan", "Dun", "Kang", "Yuan", "Jiong", "Pian", "Yun", "Cong", "Hu", "Hui", "Yuan", "You", "Guo", "Kun", "Cong", "Wei", "Tu", "Wei", "Lun", "Guo", "Qun", "Ri", "Ling", "Gu", "Guo", "Tai", "Guo", "Tu", "You"], ["Guo", "Yin", "Hun", "Pu", "Yu", "Han", "Yuan", "Lun", "Quan", "Yu", "Qing", "Guo", "Chuan", "Wei", "Yuan", "Quan", "Ku", "Fu", "Yuan", "Yuan", "E", "Tu", "Tu", "Tu", "Tuan", "Lue", "Hui", "Yi", "Yuan", "Luan", "Luan", "Tu", "Ya", "Tu", "Ting", "Sheng", "Pu", "Lu", "Iri", "Ya", "Zai", "Wei", "Ge", "Yu", "Wu", "Gui", "Pi", "Yi", "Di", "Qian", "Qian", "Zhen", "Zhuo", "Dang", "Qia", "Akutsu", "Yama", "Kuang", "Chang", "Qi", "Nie", "Mo", "Ji", "Jia", "Zhi", "Zhi", "Ban", "Xun", "Tou", "Qin", "Fen", "Jun", "Keng", "Tun", "Fang", "Fen", "Ben", "Tan", "Kan", "Pi", "Zuo", "Keng", "Bi", "Xing", "Di", "Jing", "Ji", "Kuai", "Di", "Jing", "Jian", "Tan", "Li", "Ba", "Wu", "Fen", "Zhui", "Po", "Pan", "Tang", "Kun", "Qu", "Tan", "Zhi", "Tuo", "Gan", "Ping", "Dian", "Gua", "Ni", "Tai", "Pi", "Jiong", "Yang", "Fo", "Ao", "Liu", "Qiu", "Mu", "Ke", "Gou", "Xue", "Ba", "Chi", "Che", "Ling", "Zhu", "Fu", "Hu", "Zhi", "Chui", "La", "Long", "Long", "Lu", "Ao", "Tay", "Pao", , "Xing", "Dong", "Ji", "Ke", "Lu", "Ci", "Chi", "Lei", "Gai", "Yin", "Hou", "Dui", "Zhao", "Fu", "Guang", "Yao", "Duo", "Duo", "Gui", "Cha", "Yang", "Yin", "Fa", "Gou", "Yuan", "Die", "Xie", "Ken", "Jiong", "Shou", "E", "Ha", "Dian", "Hong", "Wu", "Kua", , "Tao", "Dang", "Kai", "Gake", "Nao", "An", "Xing", "Xian", "Huan", "Bang", "Pei", "Ba", "Yi", "Yin", "Han", "Xu", "Chui", "Cen", "Geng", "Ai", "Peng", "Fang", "Que", "Yong", "Xun", "Jia", "Di", "Mai", "Lang", "Xuan", "Cheng", "Yan", "Jin", "Zhe", "Lei", "Lie", "Bu", "Cheng", "Gomi", "Bu", "Shi", "Xun", "Guo", "Jiong", "Ye", "Nian", "Di", "Yu", "Bu", "Ya", "Juan", "Sui", "Pi", "Cheng", "Wan", "Ju", "Lun", "Zheng", "Kong", "Chong", "Dong", "Dai", "Tan", "An", "Cai", "Shu", "Beng", "Kan", "Zhi", "Duo", "Yi", "Zhi", "Yi", "Pei", "Ji", "Zhun", "Qi", "Sao", "Ju", "Ni"], ["Ku", "Ke", "Tang", "Kun", "Ni", "Jian", "Dui", "Jin", "Gang", "Yu", "E", "Peng", "Gu", "Tu", "Leng", , "Ya", "Qian", , "An", , "Duo", "Nao", "Tu", "Cheng", "Yin", "Hun", "Bi", "Lian", "Guo", "Die", "Zhuan", "Hou", "Bao", "Bao", "Yu", "Di", "Mao", "Jie", "Ruan", "E", "Geng", "Kan", "Zong", "Yu", "Huang", "E", "Yao", "Yan", "Bao", "Ji", "Mei", "Chang", "Du", "Tuo", "Yin", "Feng", "Zhong", "Jie", "Zhen", "Feng", "Gang", "Chuan", "Jian", "Pyeng", "Toride", "Xiang", "Huang", "Leng", "Duan", , "Xuan", "Ji", "Ji", "Kuai", "Ying", "Ta", "Cheng", "Yong", "Kai", "Su", "Su", "Shi", "Mi", "Ta", "Weng", "Cheng", "Tu", "Tang", "Que", "Zhong", "Li", "Peng", "Bang", "Sai", "Zang", "Dui", "Tian", "Wu", "Cheng", "Xun", "Ge", "Zhen", "Ai", "Gong", "Yan", "Kan", "Tian", "Yuan", "Wen", "Xie", "Liu", "Ama", "Lang", "Chang", "Peng", "Beng", "Chen", "Cu", "Lu", "Ou", "Qian", "Mei", "Mo", "Zhuan", "Shuang", "Shu", "Lou", "Chi", "Man", "Biao", "Jing", "Qi", "Shu", "Di", "Zhang", "Kan", "Yong", "Dian", "Chen", "Zhi", "Xi", "Guo", "Qiang", "Jin", "Di", "Shang", "Mu", "Cui", "Yan", "Ta", "Zeng", "Qi", "Qiang", "Liang", , "Zhui", "Qiao", "Zeng", "Xu", "Shan", "Shan", "Ba", "Pu", "Kuai", "Dong", "Fan", "Que", "Mo", "Dun", "Dun", "Dun", "Di", "Sheng", "Duo", "Duo", "Tan", "Deng", "Wu", "Fen", "Huang", "Tan", "Da", "Ye", "Sho", "Mama", "Yu", "Qiang", "Ji", "Qiao", "Ken", "Yi", "Pi", "Bi", "Dian", "Jiang", "Ye", "Yong", "Bo", "Tan", "Lan", "Ju", "Huai", "Dang", "Rang", "Qian", "Xun", "Lan", "Xi", "He", "Ai", "Ya", "Dao", "Hao", "Ruan", "Mama", "Lei", "Kuang", "Lu", "Yan", "Tan", "Wei", "Huai", "Long", "Long", "Rui", "Li", "Lin", "Rang", "Ten", "Xun", "Yan", "Lei", "Ba", , "Shi", "Ren", , "Zhuang", "Zhuang", "Sheng", "Yi", "Mai", "Ke", "Zhu", "Zhuang", "Hu", "Hu", "Kun", "Yi", "Hu", "Xu", "Kun", "Shou", "Mang", "Zun"], ["Shou", "Yi", "Zhi", "Gu", "Chu", "Jiang", "Feng", "Bei", "Cay", "Bian", "Sui", "Qun", "Ling", "Fu", "Zuo", "Xia", "Xiong", , "Nao", "Xia", "Kui", "Xi", "Wai", "Yuan", "Mao", "Su", "Duo", "Duo", "Ye", "Qing", "Uys", "Gou", "Gou", "Qi", "Meng", "Meng", "Yin", "Huo", "Chen", "Da", "Ze", "Tian", "Tai", "Fu", "Guai", "Yao", "Yang", "Hang", "Gao", "Shi", "Ben", "Tai", "Tou", "Yan", "Bi", "Yi", "Kua", "Jia", "Duo", "Kwu", "Kuang", "Yun", "Jia", "Pa", "En", "Lian", "Huan", "Di", "Yan", "Pao", "Quan", "Qi", "Nai", "Feng", "Xie", "Fen", "Dian", , "Kui", "Zou", "Huan", "Qi", "Kai", "Zha", "Ben", "Yi", "Jiang", "Tao", "Zang", "Ben", "Xi", "Xiang", "Fei", "Diao", "Xun", "Keng", "Dian", "Ao", "She", "Weng", "Pan", "Ao", "Wu", "Ao", "Jiang", "Lian", "Duo", "Yun", "Jiang", "Shi", "Fen", "Huo", "Bi", "Lian", "Duo", "Nu", "Nu", "Ding", "Nai", "Qian", "Jian", "Ta", "Jiu", "Nan", "Cha", "Hao", "Xian", "Fan", "Ji", "Shuo", "Ru", "Fei", "Wang", "Hong", "Zhuang", "Fu", "Ma", "Dan", "Ren", "Fu", "Jing", "Yan", "Xie", "Wen", "Zhong", "Pa", "Du", "Ji", "Keng", "Zhong", "Yao", "Jin", "Yun", "Miao", "Pei", "Shi", "Yue", "Zhuang", "Niu", "Yan", "Na", "Xin", "Fen", "Bi", "Yu", "Tuo", "Feng", "Yuan", "Fang", "Wu", "Yu", "Gui", "Du", "Ba", "Ni", "Zhou", "Zhuo", "Zhao", "Da", "Nai", "Yuan", "Tou", "Xuan", "Zhi", "E", "Mei", "Mo", "Qi", "Bi", "Shen", "Qie", "E", "He", "Xu", "Fa", "Zheng", "Min", "Ban", "Mu", "Fu", "Ling", "Zi", "Zi", "Shi", "Ran", "Shan", "Yang", "Man", "Jie", "Gu", "Si", "Xing", "Wei", "Zi", "Ju", "Shan", "Pin", "Ren", "Yao", "Tong", "Jiang", "Shu", "Ji", "Gai", "Shang", "Kuo", "Juan", "Jiao", "Gou", "Mu", "Jian", "Jian", "Yi", "Nian", "Zhi", "Ji", "Ji", "Xian", "Heng", "Guang", "Jun", "Kua", "Yan", "Ming", "Lie", "Pei", "Yan", "You", "Yan", "Cha", "Shen", "Yin", "Chi", "Gui", "Quan", "Zi"], ["Song", "Wei", "Hong", "Wa", "Lou", "Ya", "Rao", "Jiao", "Luan", "Ping", "Xian", "Shao", "Li", "Cheng", "Xiao", "Mang", "Fu", "Suo", "Wu", "Wei", "Ke", "Lai", "Chuo", "Ding", "Niang", "Xing", "Nan", "Yu", "Nuo", "Pei", "Nei", "Juan", "Shen", "Zhi", "Han", "Di", "Zhuang", "E", "Pin", "Tui", "Han", "Mian", "Wu", "Yan", "Wu", "Xi", "Yan", "Yu", "Si", "Yu", "Wa", , "Xian", "Ju", "Qu", "Shui", "Qi", "Xian", "Zhui", "Dong", "Chang", "Lu", "Ai", "E", "E", "Lou", "Mian", "Cong", "Pou", "Ju", "Po", "Cai", "Ding", "Wan", "Biao", "Xiao", "Shu", "Qi", "Hui", "Fu", "E", "Wo", "Tan", "Fei", "Wei", "Jie", "Tian", "Ni", "Quan", "Jing", "Hun", "Jing", "Qian", "Dian", "Xing", "Hu", "Wa", "Lai", "Bi", "Yin", "Chou", "Chuo", "Fu", "Jing", "Lun", "Yan", "Lan", "Kun", "Yin", "Ya", "Ju", "Li", "Dian", "Xian", "Hwa", "Hua", "Ying", "Chan", "Shen", "Ting", "Dang", "Yao", "Wu", "Nan", "Ruo", "Jia", "Tou", "Xu", "Yu", "Wei", "Ti", "Rou", "Mei", "Dan", "Ruan", "Qin", "Hui", "Wu", "Qian", "Chun", "Mao", "Fu", "Jie", "Duan", "Xi", "Zhong", "Mei", "Huang", "Mian", "An", "Ying", "Xuan", "Jie", "Wei", "Mei", "Yuan", "Zhen", "Qiu", "Ti", "Xie", "Tuo", "Lian", "Mao", "Ran", "Si", "Pian", "Wei", "Wa", "Jiu", "Hu", "Ao", , "Bou", "Xu", "Tou", "Gui", "Zou", "Yao", "Pi", "Xi", "Yuan", "Ying", "Rong", "Ru", "Chi", "Liu", "Mei", "Pan", "Ao", "Ma", "Gou", "Kui", "Qin", "Jia", "Sao", "Zhen", "Yuan", "Cha", "Yong", "Ming", "Ying", "Ji", "Su", "Niao", "Xian", "Tao", "Pang", "Lang", "Nao", "Bao", "Ai", "Pi", "Pin", "Yi", "Piao", "Yu", "Lei", "Xuan", "Man", "Yi", "Zhang", "Kang", "Yong", "Ni", "Li", "Di", "Gui", "Yan", "Jin", "Zhuan", "Chang", "Ce", "Han", "Nen", "Lao", "Mo", "Zhe", "Hu", "Hu", "Ao", "Nen", "Qiang", "Ma", "Pie", "Gu", "Wu", "Jiao", "Tuo", "Zhan", "Mao", "Xian", "Xian", "Mo", "Liao", "Lian", "Hua"], ["Gui", "Deng", "Zhi", "Xu", "Yi", "Hua", "Xi", "Hui", "Rao", "Xi", "Yan", "Chan", "Jiao", "Mei", "Fan", "Fan", "Xian", "Yi", "Wei", "Jiao", "Fu", "Shi", "Bi", "Shan", "Sui", "Qiang", "Lian", "Huan", "Xin", "Niao", "Dong", "Yi", "Can", "Ai", "Niang", "Neng", "Ma", "Tiao", "Chou", "Jin", "Ci", "Yu", "Pin", "Yong", "Xu", "Nai", "Yan", "Tai", "Ying", "Can", "Niao", "Wo", "Ying", "Mian", "Kaka", "Ma", "Shen", "Xing", "Ni", "Du", "Liu", "Yuan", "Lan", "Yan", "Shuang", "Ling", "Jiao", "Niang", "Lan", "Xian", "Ying", "Shuang", "Shuai", "Quan", "Mi", "Li", "Luan", "Yan", "Zhu", "Lan", "Zi", "Jie", "Jue", "Jue", "Kong", "Yun", "Zi", "Zi", "Cun", "Sun", "Fu", "Bei", "Zi", "Xiao", "Xin", "Meng", "Si", "Tai", "Bao", "Ji", "Gu", "Nu", "Xue", , "Zhuan", "Hai", "Luan", "Sun", "Huai", "Mie", "Cong", "Qian", "Shu", "Chan", "Ya", "Zi", "Ni", "Fu", "Zi", "Li", "Xue", "Bo", "Ru", "Lai", "Nie", "Nie", "Ying", "Luan", "Mian", "Ning", "Rong", "Ta", "Gui", "Zhai", "Qiong", "Yu", "Shou", "An", "Tu", "Song", "Wan", "Rou", "Yao", "Hong", "Yi", "Jing", "Zhun", "Mi", "Zhu", "Dang", "Hong", "Zong", "Guan", "Zhou", "Ding", "Wan", "Yi", "Bao", "Shi", "Shi", "Chong", "Shen", "Ke", "Xuan", "Shi", "You", "Huan", "Yi", "Tiao", "Shi", "Xian", "Gong", "Cheng", "Qun", "Gong", "Xiao", "Zai", "Zha", "Bao", "Hai", "Yan", "Xiao", "Jia", "Shen", "Chen", "Rong", "Huang", "Mi", "Kou", "Kuan", "Bin", "Su", "Cai", "Zan", "Ji", "Yuan", "Ji", "Yin", "Mi", "Kou", "Qing", "Que", "Zhen", "Jian", "Fu", "Ning", "Bing", "Huan", "Mei", "Qin", "Han", "Yu", "Shi", "Ning", "Qin", "Ning", "Zhi", "Yu", "Bao", "Kuan", "Ning", "Qin", "Mo", "Cha", "Ju", "Gua", "Qin", "Hu", "Wu", "Liao", "Shi", "Zhu", "Zhai", "Shen", "Wei", "Xie", "Kuan", "Hui", "Liao", "Jun", "Huan", "Yi", "Yi", "Bao", "Qin", "Chong", "Bao", "Feng", "Cun", "Dui", "Si", "Xun", "Dao", "Lu", "Dui", "Shou"], ["Po", "Feng", "Zhuan", "Fu", "She", "Ke", "Jiang", "Jiang", "Zhuan", "Wei", "Zun", "Xun", "Shu", "Dui", "Dao", "Xiao", "Ji", "Shao", "Er", "Er", "Er", "Ga", "Jian", "Shu", "Chen", "Shang", "Shang", "Mo", "Ga", "Chang", "Liao", "Xian", "Xian", , "Wang", "Wang", "You", "Liao", "Liao", "Yao", "Mang", "Wang", "Wang", "Wang", "Ga", "Yao", "Duo", "Kui", "Zhong", "Jiu", "Gan", "Gu", "Gan", "Tui", "Gan", "Gan", "Shi", "Yin", "Chi", "Kao", "Ni", "Jin", "Wei", "Niao", "Ju", "Pi", "Ceng", "Xi", "Bi", "Ju", "Jie", "Tian", "Qu", "Ti", "Jie", "Wu", "Diao", "Shi", "Shi", "Ping", "Ji", "Xie", "Chen", "Xi", "Ni", "Zhan", "Xi", , "Man", "E", "Lou", "Ping", "Ti", "Fei", "Shu", "Xie", "Tu", "Lu", "Lu", "Xi", "Ceng", "Lu", "Ju", "Xie", "Ju", "Jue", "Liao", "Jue", "Shu", "Xi", "Che", "Tun", "Ni", "Shan", , "Xian", "Li", "Xue", "Nata", , "Long", "Yi", "Qi", "Ren", "Wu", "Han", "Shen", "Yu", "Chu", "Sui", "Qi", , "Yue", "Ban", "Yao", "Ang", "Ya", "Wu", "Jie", "E", "Ji", "Qian", "Fen", "Yuan", "Qi", "Cen", "Qian", "Qi", "Cha", "Jie", "Qu", "Gang", "Xian", "Ao", "Lan", "Dao", "Ba", "Zuo", "Zuo", "Yang", "Ju", "Gang", "Ke", "Gou", "Xue", "Bei", "Li", "Tiao", "Ju", "Yan", "Fu", "Xiu", "Jia", "Ling", "Tuo", "Pei", "You", "Dai", "Kuang", "Yue", "Qu", "Hu", "Po", "Min", "An", "Tiao", "Ling", "Chi", "Yuri", "Dong", "Cem", "Kui", "Xiu", "Mao", "Tong", "Xue", "Yi", "Kura", "He", "Ke", "Luo", "E", "Fu", "Xun", "Die", "Lu", "An", "Er", "Gai", "Quan", "Tong", "Yi", "Mu", "Shi", "An", "Wei", "Hu", "Zhi", "Mi", "Li", "Ji", "Tong", "Wei", "You", "Sang", "Xia", "Li", "Yao", "Jiao", "Zheng", "Luan", "Jiao", "E", "E", "Yu", "Ye", "Bu", "Qiao", "Qun", "Feng", "Feng", "Nao", "Li", "You", "Xian", "Hong", "Dao", "Shen", "Cheng", "Tu", "Geng", "Jun", "Hao", "Xia", "Yin", "Yu"], ["Lang", "Kan", "Lao", "Lai", "Xian", "Que", "Kong", "Chong", "Chong", "Ta", "Lin", "Hua", "Ju", "Lai", "Qi", "Min", "Kun", "Kun", "Zu", "Gu", "Cui", "Ya", "Ya", "Gang", "Lun", "Lun", "Leng", "Jue", "Duo", "Zheng", "Guo", "Yin", "Dong", "Han", "Zheng", "Wei", "Yao", "Pi", "Yan", "Song", "Jie", "Beng", "Zu", "Jue", "Dong", "Zhan", "Gu", "Yin", , "Ze", "Huang", "Yu", "Wei", "Yang", "Feng", "Qiu", "Dun", "Ti", "Yi", "Zhi", "Shi", "Zai", "Yao", "E", "Zhu", "Kan", "Lu", "Yan", "Mei", "Gan", "Ji", "Ji", "Huan", "Ting", "Sheng", "Mei", "Qian", "Wu", "Yu", "Zong", "Lan", "Jue", "Yan", "Yan", "Wei", "Zong", "Cha", "Sui", "Rong", "Yamashina", "Qin", "Yu", "Kewashii", "Lou", "Tu", "Dui", "Xi", "Weng", "Cang", "Dang", "Hong", "Jie", "Ai", "Liu", "Wu", "Song", "Qiao", "Zi", "Wei", "Beng", "Dian", "Cuo", "Qian", "Yong", "Nie", "Cuo", "Ji", , "Tao", "Song", "Zong", "Jiang", "Liao", "Kang", "Chan", "Die", "Cen", "Ding", "Tu", "Lou", "Zhang", "Zhan", "Zhan", "Ao", "Cao", "Qu", "Qiang", "Zui", "Zui", "Dao", "Dao", "Xi", "Yu", "Bo", "Long", "Xiang", "Ceng", "Bo", "Qin", "Jiao", "Yan", "Lao", "Zhan", "Lin", "Liao", "Liao", "Jin", "Deng", "Duo", "Zun", "Jiao", "Gui", "Yao", "Qiao", "Yao", "Jue", "Zhan", "Yi", "Xue", "Nao", "Ye", "Ye", "Yi", "E", "Xian", "Ji", "Xie", "Ke", "Xi", "Di", "Ao", "Zui", , "Ni", "Rong", "Dao", "Ling", "Za", "Yu", "Yue", "Yin", , "Jie", "Li", "Sui", "Long", "Long", "Dian", "Ying", "Xi", "Ju", "Chan", "Ying", "Kui", "Yan", "Wei", "Nao", "Quan", "Chao", "Cuan", "Luan", "Dian", "Dian", , "Yan", "Yan", "Yan", "Nao", "Yan", "Chuan", "Gui", "Chuan", "Zhou", "Huang", "Jing", "Xun", "Chao", "Chao", "Lie", "Gong", "Zuo", "Qiao", "Ju", "Gong", "Kek", "Wu", "Pwu", "Pwu", "Chai", "Qiu", "Qiu", "Ji", "Yi", "Si", "Ba", "Zhi", "Zhao", "Xiang", "Yi", "Jin", "Xun", "Juan", "Phas", "Xun", "Jin", "Fu"], ["Za", "Bi", "Shi", "Bu", "Ding", "Shuai", "Fan", "Nie", "Shi", "Fen", "Pa", "Zhi", "Xi", "Hu", "Dan", "Wei", "Zhang", "Tang", "Dai", "Ma", "Pei", "Pa", "Tie", "Fu", "Lian", "Zhi", "Zhou", "Bo", "Zhi", "Di", "Mo", "Yi", "Yi", "Ping", "Qia", "Juan", "Ru", "Shuai", "Dai", "Zheng", "Shui", "Qiao", "Zhen", "Shi", "Qun", "Xi", "Bang", "Dai", "Gui", "Chou", "Ping", "Zhang", "Sha", "Wan", "Dai", "Wei", "Chang", "Sha", "Qi", "Ze", "Guo", "Mao", "Du", "Hou", "Zheng", "Xu", "Mi", "Wei", "Wo", "Fu", "Yi", "Bang", "Ping", "Tazuna", "Gong", "Pan", "Huang", "Dao", "Mi", "Jia", "Teng", "Hui", "Zhong", "Shan", "Man", "Mu", "Biao", "Guo", "Ze", "Mu", "Bang", "Zhang", "Jiong", "Chan", "Fu", "Zhi", "Hu", "Fan", "Chuang", "Bi", "Hei", , "Mi", "Qiao", "Chan", "Fen", "Meng", "Bang", "Chou", "Mie", "Chu", "Jie", "Xian", "Lan", "Gan", "Ping", "Nian", "Qian", "Bing", "Bing", "Xing", "Gan", "Yao", "Huan", "You", "You", "Ji", "Guang", "Pi", "Ting", "Ze", "Guang", "Zhuang", "Mo", "Qing", "Bi", "Qin", "Dun", "Chuang", "Gui", "Ya", "Bai", "Jie", "Xu", "Lu", "Wu", , "Ku", "Ying", "Di", "Pao", "Dian", "Ya", "Miao", "Geng", "Ci", "Fu", "Tong", "Pang", "Fei", "Xiang", "Yi", "Zhi", "Tiao", "Zhi", "Xiu", "Du", "Zuo", "Xiao", "Tu", "Gui", "Ku", "Pang", "Ting", "You", "Bu", "Ding", "Cheng", "Lai", "Bei", "Ji", "An", "Shu", "Kang", "Yong", "Tuo", "Song", "Shu", "Qing", "Yu", "Yu", "Miao", "Sou", "Ce", "Xiang", "Fei", "Jiu", "He", "Hui", "Liu", "Sha", "Lian", "Lang", "Sou", "Jian", "Pou", "Qing", "Jiu", "Jiu", "Qin", "Ao", "Kuo", "Lou", "Yin", "Liao", "Dai", "Lu", "Yi", "Chu", "Chan", "Tu", "Si", "Xin", "Miao", "Chang", "Wu", "Fei", "Guang", "Koc", "Kuai", "Bi", "Qiang", "Xie", "Lin", "Lin", "Liao", "Lu", , "Ying", "Xian", "Ting", "Yong", "Li", "Ting", "Yin", "Xun", "Yan", "Ting", "Di", "Po", "Jian", "Hui", "Nai", "Hui", "Gong", "Nian"], ["Kai", "Bian", "Yi", "Qi", "Nong", "Fen", "Ju", "Yan", "Yi", "Zang", "Bi", "Yi", "Yi", "Er", "San", "Shi", "Er", "Shi", "Shi", "Gong", "Diao", "Yin", "Hu", "Fu", "Hong", "Wu", "Tui", "Chi", "Jiang", "Ba", "Shen", "Di", "Zhang", "Jue", "Tao", "Fu", "Di", "Mi", "Xian", "Hu", "Chao", "Nu", "Jing", "Zhen", "Yi", "Mi", "Quan", "Wan", "Shao", "Ruo", "Xuan", "Jing", "Dun", "Zhang", "Jiang", "Qiang", "Peng", "Dan", "Qiang", "Bi", "Bi", "She", "Dan", "Jian", "Gou", "Sei", "Fa", "Bi", "Kou", "Nagi", "Bie", "Xiao", "Dan", "Kuo", "Qiang", "Hong", "Mi", "Kuo", "Wan", "Jue", "Ji", "Ji", "Gui", "Dang", "Lu", "Lu", "Tuan", "Hui", "Zhi", "Hui", "Hui", "Yi", "Yi", "Yi", "Yi", "Huo", "Huo", "Shan", "Xing", "Wen", "Tong", "Yan", "Yan", "Yu", "Chi", "Cai", "Biao", "Diao", "Bin", "Peng", "Yong", "Piao", "Zhang", "Ying", "Chi", "Chi", "Zhuo", "Tuo", "Ji", "Pang", "Zhong", "Yi", "Wang", "Che", "Bi", "Chi", "Ling", "Fu", "Wang", "Zheng", "Cu", "Wang", "Jing", "Dai", "Xi", "Xun", "Hen", "Yang", "Huai", "Lu", "Hou", "Wa", "Cheng", "Zhi", "Xu", "Jing", "Tu", "Cong", , "Lai", "Cong", "De", "Pai", "Xi", , "Qi", "Chang", "Zhi", "Cong", "Zhou", "Lai", "Yu", "Xie", "Jie", "Jian", "Chi", "Jia", "Bian", "Huang", "Fu", "Xun", "Wei", "Pang", "Yao", "Wei", "Xi", "Zheng", "Piao", "Chi", "De", "Zheng", "Zheng", "Bie", "De", "Chong", "Che", "Jiao", "Wei", "Jiao", "Hui", "Mei", "Long", "Xiang", "Bao", "Qu", "Xin", "Shu", "Bi", "Yi", "Le", "Ren", "Dao", "Ding", "Gai", "Ji", "Ren", "Ren", "Chan", "Tan", "Te", "Te", "Gan", "Qi", "Shi", "Cun", "Zhi", "Wang", "Mang", "Xi", "Fan", "Ying", "Tian", "Min", "Min", "Zhong", "Chong", "Wu", "Ji", "Wu", "Xi", "Ye", "You", "Wan", "Cong", "Zhong", "Kuai", "Yu", "Bian", "Zhi", "Qi", "Cui", "Chen", "Tai", "Tun", "Qian", "Nian", "Hun", "Xiong", "Niu", "Wang", "Xian", "Xin", "Kang", "Hu", "Kai", "Fen"], ["Huai", "Tai", "Song", "Wu", "Ou", "Chang", "Chuang", "Ju", "Yi", "Bao", "Chao", "Min", "Pei", "Zuo", "Zen", "Yang", "Kou", "Ban", "Nu", "Nao", "Zheng", "Pa", "Bu", "Tie", "Gu", "Hu", "Ju", "Da", "Lian", "Si", "Chou", "Di", "Dai", "Yi", "Tu", "You", "Fu", "Ji", "Peng", "Xing", "Yuan", "Ni", "Guai", "Fu", "Xi", "Bi", "You", "Qie", "Xuan", "Cong", "Bing", "Huang", "Xu", "Chu", "Pi", "Xi", "Xi", "Tan", "Koraeru", "Zong", "Dui", , "Ki", "Yi", "Chi", "Ren", "Xun", "Shi", "Xi", "Lao", "Heng", "Kuang", "Mu", "Zhi", "Xie", "Lian", "Tiao", "Huang", "Die", "Hao", "Kong", "Gui", "Heng", "Xi", "Xiao", "Shu", "S", "Kua", "Qiu", "Yang", "Hui", "Hui", "Chi", "Jia", "Yi", "Xiong", "Guai", "Lin", "Hui", "Zi", "Xu", "Chi", "Xiang", "Nu", "Hen", "En", "Ke", "Tong", "Tian", "Gong", "Quan", "Xi", "Qia", "Yue", "Peng", "Ken", "De", "Hui", "E", "Kyuu", "Tong", "Yan", "Kai", "Ce", "Nao", "Yun", "Mang", "Yong", "Yong", "Yuan", "Pi", "Kun", "Qiao", "Yue", "Yu", "Yu", "Jie", "Xi", "Zhe", "Lin", "Ti", "Han", "Hao", "Qie", "Ti", "Bu", "Yi", "Qian", "Hui", "Xi", "Bei", "Man", "Yi", "Heng", "Song", "Quan", "Cheng", "Hui", "Wu", "Wu", "You", "Li", "Liang", "Huan", "Cong", "Yi", "Yue", "Li", "Nin", "Nao", "E", "Que", "Xuan", "Qian", "Wu", "Min", "Cong", "Fei", "Bei", "Duo", "Cui", "Chang", "Men", "Li", "Ji", "Guan", "Guan", "Xing", "Dao", "Qi", "Kong", "Tian", "Lun", "Xi", "Kan", "Kun", "Ni", "Qing", "Chou", "Dun", "Guo", "Chan", "Liang", "Wan", "Yuan", "Jin", "Ji", "Lin", "Yu", "Huo", "He", "Quan", "Tan", "Ti", "Ti", "Nie", "Wang", "Chuo", "Bu", "Hun", "Xi", "Tang", "Xin", "Wei", "Hui", "E", "Rui", "Zong", "Jian", "Yong", "Dian", "Ju", "Can", "Cheng", "De", "Bei", "Qie", "Can", "Dan", "Guan", "Duo", "Nao", "Yun", "Xiang", "Zhui", "Die", "Huang", "Chun", "Qiong", "Re", "Xing", "Ce", "Bian", "Hun", "Zong", "Ti"], ["Qiao", "Chou", "Bei", "Xuan", "Wei", "Ge", "Qian", "Wei", "Yu", "Yu", "Bi", "Xuan", "Huan", "Min", "Bi", "Yi", "Mian", "Yong", "Kai", "Dang", "Yin", "E", "Chen", "Mou", "Ke", "Ke", "Yu", "Ai", "Qie", "Yan", "Nuo", "Gan", "Yun", "Zong", "Sai", "Leng", "Fen", , "Kui", "Kui", "Que", "Gong", "Yun", "Su", "Su", "Qi", "Yao", "Song", "Huang", "Ji", "Gu", "Ju", "Chuang", "Ni", "Xie", "Kai", "Zheng", "Yong", "Cao", "Sun", "Shen", "Bo", "Kai", "Yuan", "Xie", "Hun", "Yong", "Yang", "Li", "Sao", "Tao", "Yin", "Ci", "Xu", "Qian", "Tai", "Huang", "Yun", "Shen", "Ming", , "She", "Cong", "Piao", "Mo", "Mu", "Guo", "Chi", "Can", "Can", "Can", "Cui", "Min", "Te", "Zhang", "Tong", "Ao", "Shuang", "Man", "Guan", "Que", "Zao", "Jiu", "Hui", "Kai", "Lian", "Ou", "Song", "Jin", "Yin", "Lu", "Shang", "Wei", "Tuan", "Man", "Qian", "She", "Yong", "Qing", "Kang", "Di", "Zhi", "Lou", "Juan", "Qi", "Qi", "Yu", "Ping", "Liao", "Cong", "You", "Chong", "Zhi", "Tong", "Cheng", "Qi", "Qu", "Peng", "Bei", "Bie", "Chun", "Jiao", "Zeng", "Chi", "Lian", "Ping", "Kui", "Hui", "Qiao", "Cheng", "Yin", "Yin", "Xi", "Xi", "Dan", "Tan", "Duo", "Dui", "Dui", "Su", "Jue", "Ce", "Xiao", "Fan", "Fen", "Lao", "Lao", "Chong", "Han", "Qi", "Xian", "Min", "Jing", "Liao", "Wu", "Can", "Jue", "Cu", "Xian", "Tan", "Sheng", "Pi", "Yi", "Chu", "Xian", "Nao", "Dan", "Tan", "Jing", "Song", "Han", "Jiao", "Wai", "Huan", "Dong", "Qin", "Qin", "Qu", "Cao", "Ken", "Xie", "Ying", "Ao", "Mao", "Yi", "Lin", "Se", "Jun", "Huai", "Men", "Lan", "Ai", "Lin", "Yan", "Gua", "Xia", "Chi", "Yu", "Yin", "Dai", "Meng", "Ai", "Meng", "Dui", "Qi", "Mo", "Lan", "Men", "Chou", "Zhi", "Nuo", "Nuo", "Yan", "Yang", "Bo", "Zhi", "Kuang", "Kuang", "You", "Fu", "Liu", "Mie", "Cheng", , "Chan", "Meng", "Lan", "Huai", "Xuan", "Rang", "Chan", "Ji", "Ju", "Huan", "She", "Yi"], ["Lian", "Nan", "Mi", "Tang", "Jue", "Gang", "Gang", "Gang", "Ge", "Yue", "Wu", "Jian", "Xu", "Shu", "Rong", "Xi", "Cheng", "Wo", "Jie", "Ge", "Jian", "Qiang", "Huo", "Qiang", "Zhan", "Dong", "Qi", "Jia", "Die", "Zei", "Jia", "Ji", "Shi", "Kan", "Ji", "Kui", "Gai", "Deng", "Zhan", "Chuang", "Ge", "Jian", "Jie", "Yu", "Jian", "Yan", "Lu", "Xi", "Zhan", "Xi", "Xi", "Chuo", "Dai", "Qu", "Hu", "Hu", "Hu", "E", "Shi", "Li", "Mao", "Hu", "Li", "Fang", "Suo", "Bian", "Dian", "Jiong", "Shang", "Yi", "Yi", "Shan", "Hu", "Fei", "Yan", "Shou", "T", "Cai", "Zha", "Qiu", "Le", "Bu", "Ba", "Da", "Reng", "Fu", "Hameru", "Zai", "Tuo", "Zhang", "Diao", "Kang", "Yu", "Ku", "Han", "Shen", "Cha", "Yi", "Gu", "Kou", "Wu", "Tuo", "Qian", "Zhi", "Ren", "Kuo", "Men", "Sao", "Yang", "Niu", "Ban", "Che", "Rao", "Xi", "Qian", "Ban", "Jia", "Yu", "Fu", "Ao", "Xi", "Pi", "Zhi", "Zi", "E", "Dun", "Zhao", "Cheng", "Ji", "Yan", "Kuang", "Bian", "Chao", "Ju", "Wen", "Hu", "Yue", "Jue", "Ba", "Qin", "Zhen", "Zheng", "Yun", "Wan", "Nu", "Yi", "Shu", "Zhua", "Pou", "Tou", "Dou", "Kang", "Zhe", "Pou", "Fu", "Pao", "Ba", "Ao", "Ze", "Tuan", "Kou", "Lun", "Qiang", , "Hu", "Bao", "Bing", "Zhi", "Peng", "Tan", "Pu", "Pi", "Tai", "Yao", "Zhen", "Zha", "Yang", "Bao", "He", "Ni", "Yi", "Di", "Chi", "Pi", "Za", "Mo", "Mo", "Shen", "Ya", "Chou", "Qu", "Min", "Chu", "Jia", "Fu", "Zhan", "Zhu", "Dan", "Chai", "Mu", "Nian", "La", "Fu", "Pao", "Ban", "Pai", "Ling", "Na", "Guai", "Qian", "Ju", "Tuo", "Ba", "Tuo", "Tuo", "Ao", "Ju", "Zhuo", "Pan", "Zhao", "Bai", "Bai", "Di", "Ni", "Ju", "Kuo", "Long", "Jian", , "Yong", "Lan", "Ning", "Bo", "Ze", "Qian", "Hen", "Gua", "Shi", "Jie", "Zheng", "Nin", "Gong", "Gong", "Quan", "Shuan", "Cun", "Zan", "Kao", "Chi", "Xie", "Ce", "Hui", "Pin", "Zhuai", "Shi", "Na"], ["Bo", "Chi", "Gua", "Zhi", "Kuo", "Duo", "Duo", "Zhi", "Qie", "An", "Nong", "Zhen", "Ge", "Jiao", "Ku", "Dong", "Ru", "Tiao", "Lie", "Zha", "Lu", "Die", "Wa", "Jue", "Mushiru", "Ju", "Zhi", "Luan", "Ya", "Zhua", "Ta", "Xie", "Nao", "Dang", "Jiao", "Zheng", "Ji", "Hui", "Xun", "Ku", "Ai", "Tuo", "Nuo", "Cuo", "Bo", "Geng", "Ti", "Zhen", "Cheng", "Suo", "Suo", "Keng", "Mei", "Long", "Ju", "Peng", "Jian", "Yi", "Ting", "Shan", "Nuo", "Wan", "Xie", "Cha", "Feng", "Jiao", "Wu", "Jun", "Jiu", "Tong", "Kun", "Huo", "Tu", "Zhuo", "Pou", "Le", "Ba", "Han", "Shao", "Nie", "Juan", "Ze", "Song", "Ye", "Jue", "Bu", "Huan", "Bu", "Zun", "Yi", "Zhai", "Lu", "Sou", "Tuo", "Lao", "Sun", "Bang", "Jian", "Huan", "Dao", , "Wan", "Qin", "Peng", "She", "Lie", "Min", "Men", "Fu", "Bai", "Ju", "Dao", "Wo", "Ai", "Juan", "Yue", "Zong", "Chen", "Chui", "Jie", "Tu", "Ben", "Na", "Nian", "Nuo", "Zu", "Wo", "Xi", "Xian", "Cheng", "Dian", "Sao", "Lun", "Qing", "Gang", "Duo", "Shou", "Diao", "Pou", "Di", "Zhang", "Gun", "Ji", "Tao", "Qia", "Qi", "Pai", "Shu", "Qian", "Ling", "Yi", "Ya", "Jue", "Zheng", "Liang", "Gua", "Yi", "Huo", "Shan", "Zheng", "Lue", "Cai", "Tan", "Che", "Bing", "Jie", "Ti", "Kong", "Tui", "Yan", "Cuo", "Zou", "Ju", "Tian", "Qian", "Ken", "Bai", "Shou", "Jie", "Lu", "Guo", "Haba", , "Zhi", "Dan", "Mang", "Xian", "Sao", "Guan", "Peng", "Yuan", "Nuo", "Jian", "Zhen", "Jiu", "Jian", "Yu", "Yan", "Kui", "Nan", "Hong", "Rou", "Pi", "Wei", "Sai", "Zou", "Xuan", "Miao", "Ti", "Nie", "Cha", "Shi", "Zong", "Zhen", "Yi", "Shun", "Heng", "Bian", "Yang", "Huan", "Yan", "Zuan", "An", "Xu", "Ya", "Wo", "Ke", "Chuai", "Ji", "Ti", "La", "La", "Cheng", "Kai", "Jiu", "Jiu", "Tu", "Jie", "Hui", "Geng", "Chong", "Shuo", "She", "Xie", "Yuan", "Qian", "Ye", "Cha", "Zha", "Bei", "Yao", , , "Lan", "Wen", "Qin"], ["Chan", "Ge", "Lou", "Zong", "Geng", "Jiao", "Gou", "Qin", "Yong", "Que", "Chou", "Chi", "Zhan", "Sun", "Sun", "Bo", "Chu", "Rong", "Beng", "Cuo", "Sao", "Ke", "Yao", "Dao", "Zhi", "Nu", "Xie", "Jian", "Sou", "Qiu", "Gao", "Xian", "Shuo", "Sang", "Jin", "Mie", "E", "Chui", "Nuo", "Shan", "Ta", "Jie", "Tang", "Pan", "Ban", "Da", "Li", "Tao", "Hu", "Zhi", "Wa", "Xia", "Qian", "Wen", "Qiang", "Tian", "Zhen", "E", "Xi", "Nuo", "Quan", "Cha", "Zha", "Ge", "Wu", "En", "She", "Kang", "She", "Shu", "Bai", "Yao", "Bin", "Sou", "Tan", "Sa", "Chan", "Suo", "Liao", "Chong", "Chuang", "Guo", "Bing", "Feng", "Shuai", "Di", "Qi", "Sou", "Zhai", "Lian", "Tang", "Chi", "Guan", "Lu", "Luo", "Lou", "Zong", "Gai", "Hu", "Zha", "Chuang", "Tang", "Hua", "Cui", "Nai", "Mo", "Jiang", "Gui", "Ying", "Zhi", "Ao", "Zhi", "Nie", "Man", "Shan", "Kou", "Shu", "Suo", "Tuan", "Jiao", "Mo", "Mo", "Zhe", "Xian", "Keng", "Piao", "Jiang", "Yin", "Gou", "Qian", "Lue", "Ji", "Ying", "Jue", "Pie", "Pie", "Lao", "Dun", "Xian", "Ruan", "Kui", "Zan", "Yi", "Xun", "Cheng", "Cheng", "Sa", "Nao", "Heng", "Si", "Qian", "Huang", "Da", "Zun", "Nian", "Lin", "Zheng", "Hui", "Zhuang", "Jiao", "Ji", "Cao", "Dan", "Dan", "Che", "Bo", "Che", "Jue", "Xiao", "Liao", "Ben", "Fu", "Qiao", "Bo", "Cuo", "Zhuo", "Zhuan", "Tuo", "Pu", "Qin", "Dun", "Nian", , "Xie", "Lu", "Jiao", "Cuan", "Ta", "Han", "Qiao", "Zhua", "Jian", "Gan", "Yong", "Lei", "Kuo", "Lu", "Shan", "Zhuo", "Ze", "Pu", "Chuo", "Ji", "Dang", "Suo", "Cao", "Qing", "Jing", "Huan", "Jie", "Qin", "Kuai", "Dan", "Xi", "Ge", "Pi", "Bo", "Ao", "Ju", "Ye", , "Mang", "Sou", "Mi", "Ji", "Tai", "Zhuo", "Dao", "Xing", "Lan", "Ca", "Ju", "Ye", "Ru", "Ye", "Ye", "Ni", "Hu", "Ji", "Bin", "Ning", "Ge", "Zhi", "Jie", "Kuo", "Mo", "Jian", "Xie", "Lie", "Tan", "Bai", "Sou", "Lu", "Lue", "Rao", "Zhi"], ["Pan", "Yang", "Lei", "Sa", "Shu", "Zan", "Nian", "Xian", "Jun", "Huo", "Li", "La", "Han", "Ying", "Lu", "Long", "Qian", "Qian", "Zan", "Qian", "Lan", "San", "Ying", "Mei", "Rang", "Chan", , "Cuan", "Xi", "She", "Luo", "Jun", "Mi", "Li", "Zan", "Luan", "Tan", "Zuan", "Li", "Dian", "Wa", "Dang", "Jiao", "Jue", "Lan", "Li", "Nang", "Zhi", "Gui", "Gui", "Qi", "Xin", "Pu", "Sui", "Shou", "Kao", "You", "Gai", "Yi", "Gong", "Gan", "Ban", "Fang", "Zheng", "Bo", "Dian", "Kou", "Min", "Wu", "Gu", "He", "Ce", "Xiao", "Mi", "Chu", "Ge", "Di", "Xu", "Jiao", "Min", "Chen", "Jiu", "Zhen", "Duo", "Yu", "Chi", "Ao", "Bai", "Xu", "Jiao", "Duo", "Lian", "Nie", "Bi", "Chang", "Dian", "Duo", "Yi", "Gan", "San", "Ke", "Yan", "Dun", "Qi", "Dou", "Xiao", "Duo", "Jiao", "Jing", "Yang", "Xia", "Min", "Shu", "Ai", "Qiao", "Ai", "Zheng", "Di", "Zhen", "Fu", "Shu", "Liao", "Qu", "Xiong", "Xi", "Jiao", "Sen", "Jiao", "Zhuo", "Yi", "Lian", "Bi", "Li", "Xiao", "Xiao", "Wen", "Xue", "Qi", "Qi", "Zhai", "Bin", "Jue", "Zhai", , "Fei", "Ban", "Ban", "Lan", "Yu", "Lan", "Wei", "Dou", "Sheng", "Liao", "Jia", "Hu", "Xie", "Jia", "Yu", "Zhen", "Jiao", "Wo", "Tou", "Chu", "Jin", "Chi", "Yin", "Fu", "Qiang", "Zhan", "Qu", "Zhuo", "Zhan", "Duan", "Zhuo", "Si", "Xin", "Zhuo", "Zhuo", "Qin", "Lin", "Zhuo", "Chu", "Duan", "Zhu", "Fang", "Xie", "Hang", "Yu", "Shi", "Pei", "You", "Mye", "Pang", "Qi", "Zhan", "Mao", "Lu", "Pei", "Pi", "Liu", "Fu", "Fang", "Xuan", "Jing", "Jing", "Ni", "Zu", "Zhao", "Yi", "Liu", "Shao", "Jian", "Es", "Yi", "Qi", "Zhi", "Fan", "Piao", "Fan", "Zhan", "Guai", "Sui", "Yu", "Wu", "Ji", "Ji", "Ji", "Huo", "Ri", "Dan", "Jiu", "Zhi", "Zao", "Xie", "Tiao", "Xun", "Xu", "Xu", "Xu", "Gan", "Han", "Tai", "Di", "Xu", "Chan", "Shi", "Kuang", "Yang", "Shi", "Wang", "Min", "Min", "Tun", "Chun", "Wu"], ["Yun", "Bei", "Ang", "Ze", "Ban", "Jie", "Kun", "Sheng", "Hu", "Fang", "Hao", "Gui", "Chang", "Xuan", "Ming", "Hun", "Fen", "Qin", "Hu", "Yi", "Xi", "Xin", "Yan", "Ze", "Fang", "Tan", "Shen", "Ju", "Yang", "Zan", "Bing", "Xing", "Ying", "Xuan", "Pei", "Zhen", "Ling", "Chun", "Hao", "Mei", "Zuo", "Mo", "Bian", "Xu", "Hun", "Zhao", "Zong", "Shi", "Shi", "Yu", "Fei", "Die", "Mao", "Ni", "Chang", "Wen", "Dong", "Ai", "Bing", "Ang", "Zhou", "Long", "Xian", "Kuang", "Tiao", "Chao", "Shi", "Huang", "Huang", "Xuan", "Kui", "Xu", "Jiao", "Jin", "Zhi", "Jin", "Shang", "Tong", "Hong", "Yan", "Gai", "Xiang", "Shai", "Xiao", "Ye", "Yun", "Hui", "Han", "Han", "Jun", "Wan", "Xian", "Kun", "Zhou", "Xi", "Cheng", "Sheng", "Bu", "Zhe", "Zhe", "Wu", "Han", "Hui", "Hao", "Chen", "Wan", "Tian", "Zhuo", "Zui", "Zhou", "Pu", "Jing", "Xi", "Shan", "Yi", "Xi", "Qing", "Qi", "Jing", "Gui", "Zhen", "Yi", "Zhi", "An", "Wan", "Lin", "Liang", "Chang", "Wang", "Xiao", "Zan", "Hi", "Xuan", "Xuan", "Yi", "Xia", "Yun", "Hui", "Fu", "Min", "Kui", "He", "Ying", "Du", "Wei", "Shu", "Qing", "Mao", "Nan", "Jian", "Nuan", "An", "Yang", "Chun", "Yao", "Suo", "Jin", "Ming", "Jiao", "Kai", "Gao", "Weng", "Chang", "Qi", "Hao", "Yan", "Li", "Ai", "Ji", "Gui", "Men", "Zan", "Xie", "Hao", "Mu", "Mo", "Cong", "Ni", "Zhang", "Hui", "Bao", "Han", "Xuan", "Chuan", "Liao", "Xian", "Dan", "Jing", "Pie", "Lin", "Tun", "Xi", "Yi", "Ji", "Huang", "Tai", "Ye", "Ye", "Li", "Tan", "Tong", "Xiao", "Fei", "Qin", "Zhao", "Hao", "Yi", "Xiang", "Xing", "Sen", "Jiao", "Bao", "Jing", "Yian", "Ai", "Ye", "Ru", "Shu", "Meng", "Xun", "Yao", "Pu", "Li", "Chen", "Kuang", "Die", , "Yan", "Huo", "Lu", "Xi", "Rong", "Long", "Nang", "Luo", "Luan", "Shai", "Tang", "Yan", "Chu", "Yue", "Yue", "Qu", "Yi", "Geng", "Ye", "Hu", "He", "Shu", "Cao", "Cao", "Noboru", "Man", "Ceng", "Ceng", "Ti"], ["Zui", "Can", "Xu", "Hui", "Yin", "Qie", "Fen", "Pi", "Yue", "You", "Ruan", "Peng", "Ban", "Fu", "Ling", "Fei", "Qu", , "Nu", "Tiao", "Shuo", "Zhen", "Lang", "Lang", "Juan", "Ming", "Huang", "Wang", "Tun", "Zhao", "Ji", "Qi", "Ying", "Zong", "Wang", "Tong", "Lang", , "Meng", "Long", "Mu", "Deng", "Wei", "Mo", "Ben", "Zha", "Zhu", "Shu", , "Zhu", "Ren", "Ba", "Po", "Duo", "Duo", "Dao", "Li", "Qiu", "Ji", "Jiu", "Bi", "Xiu", "Ting", "Ci", "Sha", "Eburi", "Za", "Quan", "Qian", "Yu", "Gan", "Wu", "Cha", "Shan", "Xun", "Fan", "Wu", "Zi", "Li", "Xing", "Cai", "Cun", "Ren", "Shao", "Tuo", "Di", "Zhang", "Mang", "Chi", "Yi", "Gu", "Gong", "Du", "Yi", "Qi", "Shu", "Gang", "Tiao", "Moku", "Soma", "Tochi", "Lai", "Sugi", "Mang", "Yang", "Ma", "Miao", "Si", "Yuan", "Hang", "Fei", "Bei", "Jie", "Dong", "Gao", "Yao", "Xian", "Chu", "Qun", "Pa", "Shu", "Hua", "Xin", "Chou", "Zhu", "Chou", "Song", "Ban", "Song", "Ji", "Yue", "Jin", "Gou", "Ji", "Mao", "Pi", "Bi", "Wang", "Ang", "Fang", "Fen", "Yi", "Fu", "Nan", "Xi", "Hu", "Ya", "Dou", "Xun", "Zhen", "Yao", "Lin", "Rui", "E", "Mei", "Zhao", "Guo", "Zhi", "Cong", "Yun", "Waku", "Dou", "Shu", "Zao", , "Li", "Haze", "Jian", "Cheng", "Matsu", "Qiang", "Feng", "Nan", "Xiao", "Xian", "Ku", "Ping", "Yi", "Xi", "Zhi", "Guai", "Xiao", "Jia", "Jia", "Gou", "Fu", "Mo", "Yi", "Ye", "Ye", "Shi", "Nie", "Bi", "Duo", "Yi", "Ling", "Bing", "Ni", "La", "He", "Pan", "Fan", "Zhong", "Dai", "Ci", "Yang", "Fu", "Bo", "Mou", "Gan", "Qi", "Ran", "Rou", "Mao", "Zhao", "Song", "Zhe", "Xia", "You", "Shen", "Ju", "Tuo", "Zuo", "Nan", "Ning", "Yong", "Di", "Zhi", "Zha", "Cha", "Dan", "Gu", "Pu", "Jiu", "Ao", "Fu", "Jian", "Bo", "Duo", "Ke", "Nai", "Zhu", "Bi", "Liu", "Chai", "Zha", "Si", "Zhu", "Pei", "Shi", "Guai", "Cha", "Yao", "Jue", "Jiu", "Shi"], ["Zhi", "Liu", "Mei", "Hoy", "Rong", "Zha", , "Biao", "Zhan", "Jie", "Long", "Dong", "Lu", "Sayng", "Li", "Lan", "Yong", "Shu", "Xun", "Shuan", "Qi", "Zhen", "Qi", "Li", "Yi", "Xiang", "Zhen", "Li", "Su", "Gua", "Kan", "Bing", "Ren", "Xiao", "Bo", "Ren", "Bing", "Zi", "Chou", "Yi", "Jie", "Xu", "Zhu", "Jian", "Zui", "Er", "Er", "You", "Fa", "Gong", "Kao", "Lao", "Zhan", "Li", "Yin", "Yang", "He", "Gen", "Zhi", "Chi", "Ge", "Zai", "Luan", "Fu", "Jie", "Hang", "Gui", "Tao", "Guang", "Wei", "Kuang", "Ru", "An", "An", "Juan", "Yi", "Zhuo", "Ku", "Zhi", "Qiong", "Tong", "Sang", "Sang", "Huan", "Jie", "Jiu", "Xue", "Duo", "Zhui", "Yu", "Zan", "Kasei", "Ying", "Masu", , "Zhan", "Ya", "Nao", "Zhen", "Dang", "Qi", "Qiao", "Hua", "Kuai", "Jiang", "Zhuang", "Xun", "Suo", "Sha", "Zhen", "Bei", "Ting", "Gua", "Jing", "Bo", "Ben", "Fu", "Rui", "Tong", "Jue", "Xi", "Lang", "Liu", "Feng", "Qi", "Wen", "Jun", "Gan", "Cu", "Liang", "Qiu", "Ting", "You", "Mei", "Bang", "Long", "Peng", "Zhuang", "Di", "Xuan", "Tu", "Zao", "Ao", "Gu", "Bi", "Di", "Han", "Zi", "Zhi", "Ren", "Bei", "Geng", "Jian", "Huan", "Wan", "Nuo", "Jia", "Tiao", "Ji", "Xiao", "Lu", "Huan", "Shao", "Cen", "Fen", "Song", "Meng", "Wu", "Li", "Li", "Dou", "Cen", "Ying", "Suo", "Ju", "Ti", "Jie", "Kun", "Zhuo", "Shu", "Chan", "Fan", "Wei", "Jing", "Li", "Bing", "Fumoto", "Shikimi", "Tao", "Zhi", "Lai", "Lian", "Jian", "Zhuo", "Ling", "Li", "Qi", "Bing", "Zhun", "Cong", "Qian", "Mian", "Qi", "Qi", "Cai", "Gun", "Chan", "Te", "Fei", "Pai", "Bang", "Pou", "Hun", "Zong", "Cheng", "Zao", "Ji", "Li", "Peng", "Yu", "Yu", "Gu", "Hun", "Dong", "Tang", "Gang", "Wang", "Di", "Xi", "Fan", "Cheng", "Zhan", "Qi", "Yuan", "Yan", "Yu", "Quan", "Yi", "Sen", "Ren", "Chui", "Leng", "Qi", "Zhuo", "Fu", "Ke", "Lai", "Zou", "Zou", "Zhuo", "Guan", "Fen", "Fen", "Chen", "Qiong", "Nie"], ["Wan", "Guo", "Lu", "Hao", "Jie", "Yi", "Chou", "Ju", "Ju", "Cheng", "Zuo", "Liang", "Qiang", "Zhi", "Zhui", "Ya", "Ju", "Bei", "Jiao", "Zhuo", "Zi", "Bin", "Peng", "Ding", "Chu", "Chang", "Kunugi", "Momiji", "Jian", "Gui", "Xi", "Du", "Qian", "Kunugi", "Soko", "Shide", "Luo", "Zhi", "Ken", "Myeng", "Tafu", , "Peng", "Zhan", , "Tuo", "Sen", "Duo", "Ye", "Fou", "Wei", "Wei", "Duan", "Jia", "Zong", "Jian", "Yi", "Shen", "Xi", "Yan", "Yan", "Chuan", "Zhan", "Chun", "Yu", "He", "Zha", "Wo", "Pian", "Bi", "Yao", "Huo", "Xu", "Ruo", "Yang", "La", "Yan", "Ben", "Hun", "Kui", "Jie", "Kui", "Si", "Feng", "Xie", "Tuo", "Zhi", "Jian", "Mu", "Mao", "Chu", "Hu", "Hu", "Lian", "Leng", "Ting", "Nan", "Yu", "You", "Mei", "Song", "Xuan", "Xuan", "Ying", "Zhen", "Pian", "Ye", "Ji", "Jie", "Ye", "Chu", "Shun", "Yu", "Cou", "Wei", "Mei", "Di", "Ji", "Jie", "Kai", "Qiu", "Ying", "Rou", "Heng", "Lou", "Le", "Hazou", "Katsura", "Pin", "Muro", "Gai", "Tan", "Lan", "Yun", "Yu", "Chen", "Lu", "Ju", "Sakaki", , "Pi", "Xie", "Jia", "Yi", "Zhan", "Fu", "Nai", "Mi", "Lang", "Rong", "Gu", "Jian", "Ju", "Ta", "Yao", "Zhen", "Bang", "Sha", "Yuan", "Zi", "Ming", "Su", "Jia", "Yao", "Jie", "Huang", "Gan", "Fei", "Zha", "Qian", "Ma", "Sun", "Yuan", "Xie", "Rong", "Shi", "Zhi", "Cui", "Yun", "Ting", "Liu", "Rong", "Tang", "Que", "Zhai", "Si", "Sheng", "Ta", "Ke", "Xi", "Gu", "Qi", "Kao", "Gao", "Sun", "Pan", "Tao", "Ge", "Xun", "Dian", "Nou", "Ji", "Shuo", "Gou", "Chui", "Qiang", "Cha", "Qian", "Huai", "Mei", "Xu", "Gang", "Gao", "Zhuo", "Tuo", "Hashi", "Yang", "Dian", "Jia", "Jian", "Zui", "Kashi", "Ori", "Bin", "Zhu", , "Xi", "Qi", "Lian", "Hui", "Yong", "Qian", "Guo", "Gai", "Gai", "Tuan", "Hua", "Cu", "Sen", "Cui", "Beng", "You", "Hu", "Jiang", "Hu", "Huan", "Kui", "Yi", "Nie", "Gao", "Kang", "Gui", "Gui", "Cao", "Man", "Jin"], ["Di", "Zhuang", "Le", "Lang", "Chen", "Cong", "Li", "Xiu", "Qing", "Shuang", "Fan", "Tong", "Guan", "Ji", "Suo", "Lei", "Lu", "Liang", "Mi", "Lou", "Chao", "Su", "Ke", "Shu", "Tang", "Biao", "Lu", "Jiu", "Shu", "Zha", "Shu", "Zhang", "Men", "Mo", "Niao", "Yang", "Tiao", "Peng", "Zhu", "Sha", "Xi", "Quan", "Heng", "Jian", "Cong", , "Hokuso", "Qiang", "Tara", "Ying", "Er", "Xin", "Zhi", "Qiao", "Zui", "Cong", "Pu", "Shu", "Hua", "Kui", "Zhen", "Zun", "Yue", "Zhan", "Xi", "Xun", "Dian", "Fa", "Gan", "Mo", "Wu", "Qiao", "Nao", "Lin", "Liu", "Qiao", "Xian", "Run", "Fan", "Zhan", "Tuo", "Lao", "Yun", "Shun", "Tui", "Cheng", "Tang", "Meng", "Ju", "Cheng", "Su", "Jue", "Jue", "Tan", "Hui", "Ji", "Nuo", "Xiang", "Tuo", "Ning", "Rui", "Zhu", "Chuang", "Zeng", "Fen", "Qiong", "Ran", "Heng", "Cen", "Gu", "Liu", "Lao", "Gao", "Chu", "Zusa", "Nude", "Ca", "San", "Ji", "Dou", "Shou", "Lu", , , "Yuan", "Ta", "Shu", "Jiang", "Tan", "Lin", "Nong", "Yin", "Xi", "Sui", "Shan", "Zui", "Xuan", "Cheng", "Gan", "Ju", "Zui", "Yi", "Qin", "Pu", "Yan", "Lei", "Feng", "Hui", "Dang", "Ji", "Sui", "Bo", "Bi", "Ding", "Chu", "Zhua", "Kuai", "Ji", "Jie", "Jia", "Qing", "Zhe", "Jian", "Qiang", "Dao", "Yi", "Biao", "Song", "She", "Lin", "Kunugi", "Cha", "Meng", "Yin", "Tao", "Tai", "Mian", "Qi", "Toan", "Bin", "Huo", "Ji", "Qian", "Mi", "Ning", "Yi", "Gao", "Jian", "Yin", "Er", "Qing", "Yan", "Qi", "Mi", "Zhao", "Gui", "Chun", "Ji", "Kui", "Po", "Deng", "Chu", , "Mian", "You", "Zhi", "Guang", "Qian", "Lei", "Lei", "Sa", "Lu", "Li", "Cuan", "Lu", "Mie", "Hui", "Ou", "Lu", "Jie", "Gao", "Du", "Yuan", "Li", "Fei", "Zhuo", "Sou", "Lian", "Tamo", "Chu", , "Zhu", "Lu", "Yan", "Li", "Zhu", "Chen", "Jie", "E", "Su", "Huai", "Nie", "Yu", "Long", "Lai", , "Xian", "Kwi", "Ju", "Xiao", "Ling", "Ying", "Jian", "Yin", "You", "Ying"], ["Xiang", "Nong", "Bo", "Chan", "Lan", "Ju", "Shuang", "She", "Wei", "Cong", "Quan", "Qu", "Cang", , "Yu", "Luo", "Li", "Zan", "Luan", "Dang", "Jue", "Em", "Lan", "Lan", "Zhu", "Lei", "Li", "Ba", "Nang", "Yu", "Ling", "Tsuki", "Qian", "Ci", "Huan", "Xin", "Yu", "Yu", "Qian", "Ou", "Xu", "Chao", "Chu", "Chi", "Kai", "Yi", "Jue", "Xi", "Xu", "Xia", "Yu", "Kuai", "Lang", "Kuan", "Shuo", "Xi", "Ai", "Yi", "Qi", "Hu", "Chi", "Qin", "Kuan", "Kan", "Kuan", "Kan", "Chuan", "Sha", "Gua", "Yin", "Xin", "Xie", "Yu", "Qian", "Xiao", "Yi", "Ge", "Wu", "Tan", "Jin", "Ou", "Hu", "Ti", "Huan", "Xu", "Pen", "Xi", "Xiao", "Xu", "Xi", "Sen", "Lian", "Chu", "Yi", "Kan", "Yu", "Chuo", "Huan", "Zhi", "Zheng", "Ci", "Bu", "Wu", "Qi", "Bu", "Bu", "Wai", "Ju", "Qian", "Chi", "Se", "Chi", "Se", "Zhong", "Sui", "Sui", "Li", "Cuo", "Yu", "Li", "Gui", "Dai", "Dai", "Si", "Jian", "Zhe", "Mo", "Mo", "Yao", "Mo", "Cu", "Yang", "Tian", "Sheng", "Dai", "Shang", "Xu", "Xun", "Shu", "Can", "Jue", "Piao", "Qia", "Qiu", "Su", "Qing", "Yun", "Lian", "Yi", "Fou", "Zhi", "Ye", "Can", "Hun", "Dan", "Ji", "Ye", "Zhen", "Yun", "Wen", "Chou", "Bin", "Ti", "Jin", "Shang", "Yin", "Diao", "Cu", "Hui", "Cuan", "Yi", "Dan", "Du", "Jiang", "Lian", "Bin", "Du", "Tsukusu", "Jian", "Shu", "Ou", "Duan", "Zhu", "Yin", "Qing", "Yi", "Sha", "Que", "Ke", "Yao", "Jun", "Dian", "Hui", "Hui", "Gu", "Que", "Ji", "Yi", "Ou", "Hui", "Duan", "Yi", "Xiao", "Wu", "Guan", "Mu", "Mei", "Mei", "Ai", "Zuo", "Du", "Yu", "Bi", "Bi", "Bi", "Pi", "Pi", "Bi", "Chan", "Mao", , , "Pu", "Mushiru", "Jia", "Zhan", "Sai", "Mu", "Tuo", "Xun", "Er", "Rong", "Xian", "Ju", "Mu", "Hao", "Qiu", "Dou", "Mushiru", "Tan", "Pei", "Ju", "Duo", "Cui", "Bi", "San", , "Mao", "Sui", "Yu", "Yu", "Tuo", "He", "Jian", "Ta", "San"], ["Lu", "Mu", "Li", "Tong", "Rong", "Chang", "Pu", "Luo", "Zhan", "Sao", "Zhan", "Meng", "Luo", "Qu", "Die", "Shi", "Di", "Min", "Jue", "Mang", "Qi", "Pie", "Nai", "Qi", "Dao", "Xian", "Chuan", "Fen", "Ri", "Nei", , "Fu", "Shen", "Dong", "Qing", "Qi", "Yin", "Xi", "Hai", "Yang", "An", "Ya", "Ke", "Qing", "Ya", "Dong", "Dan", "Lu", "Qing", "Yang", "Yun", "Yun", "Shui", "San", "Zheng", "Bing", "Yong", "Dang", "Shitamizu", "Le", "Ni", "Tun", "Fan", "Gui", "Ting", "Zhi", "Qiu", "Bin", "Ze", "Mian", "Cuan", "Hui", "Diao", "Han", "Cha", "Zhuo", "Chuan", "Wan", "Fan", "Dai", "Xi", "Tuo", "Mang", "Qiu", "Qi", "Shan", "Pai", "Han", "Qian", "Wu", "Wu", "Xun", "Si", "Ru", "Gong", "Jiang", "Chi", "Wu", "Tsuchi", , "Tang", "Zhi", "Chi", "Qian", "Mi", "Yu", "Wang", "Qing", "Jing", "Rui", "Jun", "Hong", "Tai", "Quan", "Ji", "Bian", "Bian", "Gan", "Wen", "Zhong", "Fang", "Xiong", "Jue", "Hang", "Niou", "Qi", "Fen", "Xu", "Xu", "Qin", "Yi", "Wo", "Yun", "Yuan", "Hang", "Yan", "Shen", "Chen", "Dan", "You", "Dun", "Hu", "Huo", "Qie", "Mu", "Rou", "Mei", "Ta", "Mian", "Wu", "Chong", "Tian", "Bi", "Sha", "Zhi", "Pei", "Pan", "Zhui", "Za", "Gou", "Liu", "Mei", "Ze", "Feng", "Ou", "Li", "Lun", "Cang", "Feng", "Wei", "Hu", "Mo", "Mei", "Shu", "Ju", "Zan", "Tuo", "Tuo", "Tuo", "He", "Li", "Mi", "Yi", "Fa", "Fei", "You", "Tian", "Zhi", "Zhao", "Gu", "Zhan", "Yan", "Si", "Kuang", "Jiong", "Ju", "Xie", "Qiu", "Yi", "Jia", "Zhong", "Quan", "Bo", "Hui", "Mi", "Ben", "Zhuo", "Chu", "Le", "You", "Gu", "Hong", "Gan", "Fa", "Mao", "Si", "Hu", "Ping", "Ci", "Fan", "Chi", "Su", "Ning", "Cheng", "Ling", "Pao", "Bo", "Qi", "Si", "Ni", "Ju", "Yue", "Zhu", "Sheng", "Lei", "Xuan", "Xue", "Fu", "Pan", "Min", "Tai", "Yang", "Ji", "Yong", "Guan", "Beng", "Xue", "Long", "Lu", , "Bo", "Xie", "Po", "Ze", "Jing", "Yin"], ["Zhou", "Ji", "Yi", "Hui", "Hui", "Zui", "Cheng", "Yin", "Wei", "Hou", "Jian", "Yang", "Lie", "Si", "Ji", "Er", "Xing", "Fu", "Sa", "Suo", "Zhi", "Yin", "Wu", "Xi", "Kao", "Zhu", "Jiang", "Luo", , "An", "Dong", "Yi", "Mou", "Lei", "Yi", "Mi", "Quan", "Jin", "Mo", "Wei", "Xiao", "Xie", "Hong", "Xu", "Shuo", "Kuang", "Tao", "Qie", "Ju", "Er", "Zhou", "Ru", "Ping", "Xun", "Xiong", "Zhi", "Guang", "Huan", "Ming", "Huo", "Wa", "Qia", "Pai", "Wu", "Qu", "Liu", "Yi", "Jia", "Jing", "Qian", "Jiang", "Jiao", "Cheng", "Shi", "Zhuo", "Ce", "Pal", "Kuai", "Ji", "Liu", "Chan", "Hun", "Hu", "Nong", "Xun", "Jin", "Lie", "Qiu", "Wei", "Zhe", "Jun", "Han", "Bang", "Mang", "Zhuo", "You", "Xi", "Bo", "Dou", "Wan", "Hong", "Yi", "Pu", "Ying", "Lan", "Hao", "Lang", "Han", "Li", "Geng", "Fu", "Wu", "Lian", "Chun", "Feng", "Yi", "Yu", "Tong", "Lao", "Hai", "Jin", "Jia", "Chong", "Weng", "Mei", "Sui", "Cheng", "Pei", "Xian", "Shen", "Tu", "Kun", "Pin", "Nie", "Han", "Jing", "Xiao", "She", "Nian", "Tu", "Yong", "Xiao", "Xian", "Ting", "E", "Su", "Tun", "Juan", "Cen", "Ti", "Li", "Shui", "Si", "Lei", "Shui", "Tao", "Du", "Lao", "Lai", "Lian", "Wei", "Wo", "Yun", "Huan", "Di", , "Run", "Jian", "Zhang", "Se", "Fu", "Guan", "Xing", "Shou", "Shuan", "Ya", "Chuo", "Zhang", "Ye", "Kong", "Wo", "Han", "Tuo", "Dong", "He", "Wo", "Ju", "Gan", "Liang", "Hun", "Ta", "Zhuo", "Dian", "Qie", "De", "Juan", "Zi", "Xi", "Yao", "Qi", "Gu", "Guo", "Han", "Lin", "Tang", "Zhou", "Peng", "Hao", "Chang", "Shu", "Qi", "Fang", "Chi", "Lu", "Nao", "Ju", "Tao", "Cong", "Lei", "Zhi", "Peng", "Fei", "Song", "Tian", "Pi", "Dan", "Yu", "Ni", "Yu", "Lu", "Gan", "Mi", "Jing", "Ling", "Lun", "Yin", "Cui", "Qu", "Huai", "Yu", "Nian", "Shen", "Piao", "Chun", "Wa", "Yuan", "Lai", "Hun", "Qing", "Yan", "Qian", "Tian", "Miao", "Zhi", "Yin", "Mi"], ["Ben", "Yuan", "Wen", "Re", "Fei", "Qing", "Yuan", "Ke", "Ji", "She", "Yuan", "Shibui", "Lu", "Zi", "Du", , "Jian", "Min", "Pi", "Tani", "Yu", "Yuan", "Shen", "Shen", "Rou", "Huan", "Zhu", "Jian", "Nuan", "Yu", "Qiu", "Ting", "Qu", "Du", "Feng", "Zha", "Bo", "Wo", "Wo", "Di", "Wei", "Wen", "Ru", "Xie", "Ce", "Wei", "Ge", "Gang", "Yan", "Hong", "Xuan", "Mi", "Ke", "Mao", "Ying", "Yan", "You", "Hong", "Miao", "Xing", "Mei", "Zai", "Hun", "Nai", "Kui", "Shi", "E", "Pai", "Mei", "Lian", "Qi", "Qi", "Mei", "Tian", "Cou", "Wei", "Can", "Tuan", "Mian", "Hui", "Mo", "Xu", "Ji", "Pen", "Jian", "Jian", "Hu", "Feng", "Xiang", "Yi", "Yin", "Zhan", "Shi", "Jie", "Cheng", "Huang", "Tan", "Yu", "Bi", "Min", "Shi", "Tu", "Sheng", "Yong", "Qu", "Zhong", "Suei", "Jiu", "Jiao", "Qiou", "Yin", "Tang", "Long", "Huo", "Yuan", "Nan", "Ban", "You", "Quan", "Chui", "Liang", "Chan", "Yan", "Chun", "Nie", "Zi", "Wan", "Shi", "Man", "Ying", "Ratsu", "Kui", , "Jian", "Xu", "Lu", "Gui", "Gai", , , "Po", "Jin", "Gui", "Tang", "Yuan", "Suo", "Yuan", "Lian", "Yao", "Meng", "Zhun", "Sheng", "Ke", "Tai", "Da", "Wa", "Liu", "Gou", "Sao", "Ming", "Zha", "Shi", "Yi", "Lun", "Ma", "Pu", "Wei", "Li", "Cai", "Wu", "Xi", "Wen", "Qiang", "Ze", "Shi", "Su", "Yi", "Zhen", "Sou", "Yun", "Xiu", "Yin", "Rong", "Hun", "Su", "Su", "Ni", "Ta", "Shi", "Ru", "Wei", "Pan", "Chu", "Chu", "Pang", "Weng", "Cang", "Mie", "He", "Dian", "Hao", "Huang", "Xi", "Zi", "Di", "Zhi", "Ying", "Fu", "Jie", "Hua", "Ge", "Zi", "Tao", "Teng", "Sui", "Bi", "Jiao", "Hui", "Gun", "Yin", "Gao", "Long", "Zhi", "Yan", "She", "Man", "Ying", "Chun", "Lu", "Lan", "Luan", , "Bin", "Tan", "Yu", "Sou", "Hu", "Bi", "Biao", "Zhi", "Jiang", "Kou", "Shen", "Shang", "Di", "Mi", "Ao", "Lu", "Hu", "Hu", "You", "Chan", "Fan", "Yong", "Gun", "Man"], ["Qing", "Yu", "Piao", "Ji", "Ya", "Jiao", "Qi", "Xi", "Ji", "Lu", "Lu", "Long", "Jin", "Guo", "Cong", "Lou", "Zhi", "Gai", "Qiang", "Li", "Yan", "Cao", "Jiao", "Cong", "Qun", "Tuan", "Ou", "Teng", "Ye", "Xi", "Mi", "Tang", "Mo", "Shang", "Han", "Lian", "Lan", "Wa", "Li", "Qian", "Feng", "Xuan", "Yi", "Man", "Zi", "Mang", "Kang", "Lei", "Peng", "Shu", "Zhang", "Zhang", "Chong", "Xu", "Huan", "Kuo", "Jian", "Yan", "Chuang", "Liao", "Cui", "Ti", "Yang", "Jiang", "Cong", "Ying", "Hong", "Xun", "Shu", "Guan", "Ying", "Xiao", , , "Xu", "Lian", "Zhi", "Wei", "Pi", "Jue", "Jiao", "Po", "Dang", "Hui", "Jie", "Wu", "Pa", "Ji", "Pan", "Gui", "Xiao", "Qian", "Qian", "Xi", "Lu", "Xi", "Xuan", "Dun", "Huang", "Min", "Run", "Su", "Liao", "Zhen", "Zhong", "Yi", "Di", "Wan", "Dan", "Tan", "Chao", "Xun", "Kui", "Yie", "Shao", "Tu", "Zhu", "San", "Hei", "Bi", "Shan", "Chan", "Chan", "Shu", "Tong", "Pu", "Lin", "Wei", "Se", "Se", "Cheng", "Jiong", "Cheng", "Hua", "Jiao", "Lao", "Che", "Gan", "Cun", "Heng", "Si", "Shu", "Peng", "Han", "Yun", "Liu", "Hong", "Fu", "Hao", "He", "Xian", "Jian", "Shan", "Xi", "Oki", , "Lan", , "Yu", "Lin", "Min", "Zao", "Dang", "Wan", "Ze", "Xie", "Yu", "Li", "Shi", "Xue", "Ling", "Man", "Zi", "Yong", "Kuai", "Can", "Lian", "Dian", "Ye", "Ao", "Huan", "Zhen", "Chan", "Man", "Dan", "Dan", "Yi", "Sui", "Pi", "Ju", "Ta", "Qin", "Ji", "Zhuo", "Lian", "Nong", "Guo", "Jin", "Fen", "Se", "Ji", "Sui", "Hui", "Chu", "Ta", "Song", "Ding", , "Zhu", "Lai", "Bin", "Lian", "Mi", "Shi", "Shu", "Mi", "Ning", "Ying", "Ying", "Meng", "Jin", "Qi", "Pi", "Ji", "Hao", "Ru", "Zui", "Wo", "Tao", "Yin", "Yin", "Dui", "Ci", "Huo", "Jing", "Lan", "Jun", "Ai", "Pu", "Zhuo", "Wei", "Bin", "Gu", "Qian", "Xing", "Hama", "Kuo", "Fei", , "Boku", "Jian", "Wei", "Luo", "Zan", "Lu", "Li"], ["You", "Yang", "Lu", "Si", "Jie", "Ying", "Du", "Wang", "Hui", "Xie", "Pan", "Shen", "Biao", "Chan", "Mo", "Liu", "Jian", "Pu", "Se", "Cheng", "Gu", "Bin", "Huo", "Xian", "Lu", "Qin", "Han", "Ying", "Yong", "Li", "Jing", "Xiao", "Ying", "Sui", "Wei", "Xie", "Huai", "Hao", "Zhu", "Long", "Lai", "Dui", "Fan", "Hu", "Lai", , , "Ying", "Mi", "Ji", "Lian", "Jian", "Ying", "Fen", "Lin", "Yi", "Jian", "Yue", "Chan", "Dai", "Rang", "Jian", "Lan", "Fan", "Shuang", "Yuan", "Zhuo", "Feng", "She", "Lei", "Lan", "Cong", "Qu", "Yong", "Qian", "Fa", "Guan", "Que", "Yan", "Hao", "Hyeng", "Sa", "Zan", "Luan", "Yan", "Li", "Mi", "Shan", "Tan", "Dang", "Jiao", "Chan", , "Hao", "Ba", "Zhu", "Lan", "Lan", "Nang", "Wan", "Luan", "Xun", "Xian", "Yan", "Gan", "Yan", "Yu", "Huo", "Si", "Mie", "Guang", "Deng", "Hui", "Xiao", "Xiao", "Hu", "Hong", "Ling", "Zao", "Zhuan", "Jiu", "Zha", "Xie", "Chi", "Zhuo", "Zai", "Zai", "Can", "Yang", "Qi", "Zhong", "Fen", "Niu", "Jiong", "Wen", "Po", "Yi", "Lu", "Chui", "Pi", "Kai", "Pan", "Yan", "Kai", "Pang", "Mu", "Chao", "Liao", "Gui", "Kang", "Tun", "Guang", "Xin", "Zhi", "Guang", "Guang", "Wei", "Qiang", , "Da", "Xia", "Zheng", "Zhu", "Ke", "Zhao", "Fu", "Ba", "Duo", "Duo", "Ling", "Zhuo", "Xuan", "Ju", "Tan", "Pao", "Jiong", "Pao", "Tai", "Tai", "Bing", "Yang", "Tong", "Han", "Zhu", "Zha", "Dian", "Wei", "Shi", "Lian", "Chi", "Huang", , "Hu", "Shuo", "Lan", "Jing", "Jiao", "Xu", "Xing", "Quan", "Lie", "Huan", "Yang", "Xiao", "Xiu", "Xian", "Yin", "Wu", "Zhou", "Yao", "Shi", "Wei", "Tong", "Xue", "Zai", "Kai", "Hong", "Luo", "Xia", "Zhu", "Xuan", "Zheng", "Po", "Yan", "Hui", "Guang", "Zhe", "Hui", "Kao", , "Fan", "Shao", "Ye", "Hui", , "Tang", "Jin", "Re", , "Xi", "Fu", "Jiong", "Che", "Pu", "Jing", "Zhuo", "Ting", "Wan", "Hai", "Peng", "Lang", "Shan", "Hu", "Feng", "Chi", "Rong"], ["Hu", "Xi", "Shu", "He", "Xun", "Ku", "Jue", "Xiao", "Xi", "Yan", "Han", "Zhuang", "Jun", "Di", "Xie", "Ji", "Wu", , , "Han", "Yan", "Huan", "Men", "Ju", "Chou", "Bei", "Fen", "Lin", "Kun", "Hun", "Tun", "Xi", "Cui", "Wu", "Hong", "Ju", "Fu", "Wo", "Jiao", "Cong", "Feng", "Ping", "Qiong", "Ruo", "Xi", "Qiong", "Xin", "Zhuo", "Yan", "Yan", "Yi", "Jue", "Yu", "Gang", "Ran", "Pi", "Gu", , "Sheng", "Chang", "Shao", , , , , "Chen", "He", "Kui", "Zhong", "Duan", "Xia", "Hui", "Feng", "Lian", "Xuan", "Xing", "Huang", "Jiao", "Jian", "Bi", "Ying", "Zhu", "Wei", "Tuan", "Tian", "Xi", "Nuan", "Nuan", "Chan", "Yan", "Jiong", "Jiong", "Yu", "Mei", "Sha", "Wei", "Ye", "Xin", "Qiong", "Rou", "Mei", "Huan", "Xu", "Zhao", "Wei", "Fan", "Qiu", "Sui", "Yang", "Lie", "Zhu", "Jie", "Gao", "Gua", "Bao", "Hu", "Yun", "Xia", , , "Bian", "Gou", "Tui", "Tang", "Chao", "Shan", "N", "Bo", "Huang", "Xie", "Xi", "Wu", "Xi", "Yun", "He", "He", "Xi", "Yun", "Xiong", "Nai", "Shan", "Qiong", "Yao", "Xun", "Mi", "Lian", "Ying", "Wen", "Rong", "Oozutsu", , "Qiang", "Liu", "Xi", "Bi", "Biao", "Zong", "Lu", "Jian", "Shou", "Yi", "Lou", "Feng", "Sui", "Yi", "Tong", "Jue", "Zong", "Yun", "Hu", "Yi", "Zhi", "Ao", "Wei", "Liao", "Han", "Ou", "Re", "Jiong", "Man", , "Shang", "Cuan", "Zeng", "Jian", "Xi", "Xi", "Xi", "Yi", "Xiao", "Chi", "Huang", "Chan", "Ye", "Qian", "Ran", "Yan", "Xian", "Qiao", "Zun", "Deng", "Dun", "Shen", "Jiao", "Fen", "Si", "Liao", "Yu", "Lin", "Tong", "Shao", "Fen", "Fan", "Yan", "Xun", "Lan", "Mei", "Tang", "Yi", "Jing", "Men", , , "Ying", "Yu", "Yi", "Xue", "Lan", "Tai", "Zao", "Can", "Sui", "Xi", "Que", "Cong", "Lian", "Hui", "Zhu", "Xie", "Ling", "Wei", "Yi", "Xie", "Zhao", "Hui", "Tatsu", "Nung", "Lan", "Ru", "Xian", "Kao", "Xun", "Jin", "Chou", "Chou", "Yao"], ["He", "Lan", "Biao", "Rong", "Li", "Mo", "Bao", "Ruo", "Lu", "La", "Ao", "Xun", "Kuang", "Shuo", , "Li", "Lu", "Jue", "Liao", "Yan", "Xi", "Xie", "Long", "Ye", , "Rang", "Yue", "Lan", "Cong", "Jue", "Tong", "Guan", , "Che", "Mi", "Tang", "Lan", "Zhu", , "Ling", "Cuan", "Yu", "Zhua", "Tsumekanmuri", "Pa", "Zheng", "Pao", "Cheng", "Yuan", "Ai", "Wei", , "Jue", "Jue", "Fu", "Ye", "Ba", "Die", "Ye", "Yao", "Zu", "Shuang", "Er", "Qiang", "Chuang", "Ge", "Zang", "Die", "Qiang", "Yong", "Qiang", "Pian", "Ban", "Pan", "Shao", "Jian", "Pai", "Du", "Chuang", "Tou", "Zha", "Bian", "Die", "Bang", "Bo", "Chuang", "You", , "Du", "Ya", "Cheng", "Niu", "Ushihen", "Pin", "Jiu", "Mou", "Tuo", "Mu", "Lao", "Ren", "Mang", "Fang", "Mao", "Mu", "Gang", "Wu", "Yan", "Ge", "Bei", "Si", "Jian", "Gu", "You", "Ge", "Sheng", "Mu", "Di", "Qian", "Quan", "Quan", "Zi", "Te", "Xi", "Mang", "Keng", "Qian", "Wu", "Gu", "Xi", "Li", "Li", "Pou", "Ji", "Gang", "Zhi", "Ben", "Quan", "Run", "Du", "Ju", "Jia", "Jian", "Feng", "Pian", "Ke", "Ju", "Kao", "Chu", "Xi", "Bei", "Luo", "Jie", "Ma", "San", "Wei", "Li", "Dun", "Tong", , "Jiang", "Ikenie", "Li", "Du", "Lie", "Pi", "Piao", "Bao", "Xi", "Chou", "Wei", "Kui", "Chou", "Quan", "Fan", "Ba", "Fan", "Qiu", "Ji", "Cai", "Chuo", "An", "Jie", "Zhuang", "Guang", "Ma", "You", "Kang", "Bo", "Hou", "Ya", "Yin", "Huan", "Zhuang", "Yun", "Kuang", "Niu", "Di", "Qing", "Zhong", "Mu", "Bei", "Pi", "Ju", "Ni", "Sheng", "Pao", "Xia", "Tuo", "Hu", "Ling", "Fei", "Pi", "Ni", "Ao", "You", "Gou", "Yue", "Ju", "Dan", "Po", "Gu", "Xian", "Ning", "Huan", "Hen", "Jiao", "He", "Zhao", "Ji", "Xun", "Shan", "Ta", "Rong", "Shou", "Tong", "Lao", "Du", "Xia", "Shi", "Hua", "Zheng", "Yu", "Sun", "Yu", "Bi", "Mang", "Xi", "Juan", "Li", "Xia", "Yin", "Suan", "Lang", "Bei", "Zhi", "Yan"], ["Sha", "Li", "Han", "Xian", "Jing", "Pai", "Fei", "Yao", "Ba", "Qi", "Ni", "Biao", "Yin", "Lai", "Xi", "Jian", "Qiang", "Kun", "Yan", "Guo", "Zong", "Mi", "Chang", "Yi", "Zhi", "Zheng", "Ya", "Meng", "Cai", "Cu", "She", "Kari", "Cen", "Luo", "Hu", "Zong", "Ji", "Wei", "Feng", "Wo", "Yuan", "Xing", "Zhu", "Mao", "Wei", "Yuan", "Xian", "Tuan", "Ya", "Nao", "Xie", "Jia", "Hou", "Bian", "You", "You", "Mei", "Zha", "Yao", "Sun", "Bo", "Ming", "Hua", "Yuan", "Sou", "Ma", "Yuan", "Dai", "Yu", "Shi", "Hao", , "Yi", "Zhen", "Chuang", "Hao", "Man", "Jing", "Jiang", "Mu", "Zhang", "Chan", "Ao", "Ao", "Hao", "Cui", "Fen", "Jue", "Bi", "Bi", "Huang", "Pu", "Lin", "Yu", "Tong", "Yao", "Liao", "Shuo", "Xiao", "Swu", "Ton", "Xi", "Ge", "Juan", "Du", "Hui", "Kuai", "Xian", "Xie", "Ta", "Xian", "Xun", "Ning", "Pin", "Huo", "Nou", "Meng", "Lie", "Nao", "Guang", "Shou", "Lu", "Ta", "Xian", "Mi", "Rang", "Huan", "Nao", "Luo", "Xian", "Qi", "Jue", "Xuan", "Miao", "Zi", "Lu", "Lu", "Yu", "Su", "Wang", "Qiu", "Ga", "Ding", "Le", "Ba", "Ji", "Hong", "Di", "Quan", "Gan", "Jiu", "Yu", "Ji", "Yu", "Yang", "Ma", "Gong", "Wu", "Fu", "Wen", "Jie", "Ya", "Fen", "Bian", "Beng", "Yue", "Jue", "Yun", "Jue", "Wan", "Jian", "Mei", "Dan", "Pi", "Wei", "Huan", "Xian", "Qiang", "Ling", "Dai", "Yi", "An", "Ping", "Dian", "Fu", "Xuan", "Xi", "Bo", "Ci", "Gou", "Jia", "Shao", "Po", "Ci", "Ke", "Ran", "Sheng", "Shen", "Yi", "Zu", "Jia", "Min", "Shan", "Liu", "Bi", "Zhen", "Zhen", "Jue", "Fa", "Long", "Jin", "Jiao", "Jian", "Li", "Guang", "Xian", "Zhou", "Gong", "Yan", "Xiu", "Yang", "Xu", "Luo", "Su", "Zhu", "Qin", "Ken", "Xun", "Bao", "Er", "Xiang", "Yao", "Xia", "Heng", "Gui", "Chong", "Xu", "Ban", "Pei", , "Dang", "Ei", "Hun", "Wen", "E", "Cheng", "Ti", "Wu", "Wu", "Cheng", "Jun", "Mei", "Bei", "Ting", "Xian", "Chuo"], ["Han", "Xuan", "Yan", "Qiu", "Quan", "Lang", "Li", "Xiu", "Fu", "Liu", "Ye", "Xi", "Ling", "Li", "Jin", "Lian", "Suo", "Chiisai", , "Wan", "Dian", "Pin", "Zhan", "Cui", "Min", "Yu", "Ju", "Chen", "Lai", "Wen", "Sheng", "Wei", "Dian", "Chu", "Zhuo", "Pei", "Cheng", "Hu", "Qi", "E", "Kun", "Chang", "Qi", "Beng", "Wan", "Lu", "Cong", "Guan", "Yan", "Diao", "Bei", "Lin", "Qin", "Pi", "Pa", "Que", "Zhuo", "Qin", "Fa", , "Qiong", "Du", "Jie", "Hun", "Yu", "Mao", "Mei", "Chun", "Xuan", "Ti", "Xing", "Dai", "Rou", "Min", "Zhen", "Wei", "Ruan", "Huan", "Jie", "Chuan", "Jian", "Zhuan", "Yang", "Lian", "Quan", "Xia", "Duan", "Yuan", "Ye", "Nao", "Hu", "Ying", "Yu", "Huang", "Rui", "Se", "Liu", "Shi", "Rong", "Suo", "Yao", "Wen", "Wu", "Jin", "Jin", "Ying", "Ma", "Tao", "Liu", "Tang", "Li", "Lang", "Gui", "Zhen", "Qiang", "Cuo", "Jue", "Zhao", "Yao", "Ai", "Bin", "Tu", "Chang", "Kun", "Zhuan", "Cong", "Jin", "Yi", "Cui", "Cong", "Qi", "Li", "Ying", "Suo", "Qiu", "Xuan", "Ao", "Lian", "Man", "Zhang", "Yin", , "Ying", "Zhi", "Lu", "Wu", "Deng", "Xiou", "Zeng", "Xun", "Qu", "Dang", "Lin", "Liao", "Qiong", "Su", "Huang", "Gui", "Pu", "Jing", "Fan", "Jin", "Liu", "Ji", , "Jing", "Ai", "Bi", "Can", "Qu", "Zao", "Dang", "Jiao", "Gun", "Tan", "Hui", "Huan", "Se", "Sui", "Tian", , "Yu", "Jin", "Lu", "Bin", "Shou", "Wen", "Zui", "Lan", "Xi", "Ji", "Xuan", "Ruan", "Huo", "Gai", "Lei", "Du", "Li", "Zhi", "Rou", "Li", "Zan", "Qiong", "Zhe", "Gui", "Sui", "La", "Long", "Lu", "Li", "Zan", "Lan", "Ying", "Mi", "Xiang", "Xi", "Guan", "Dao", "Zan", "Huan", "Gua", "Bo", "Die", "Bao", "Hu", "Zhi", "Piao", "Ban", "Rang", "Li", "Wa", "Dekaguramu", "Jiang", "Qian", "Fan", "Pen", "Fang", "Dan", "Weng", "Ou", "Deshiguramu", "Miriguramu", "Thon", "Hu", "Ling", "Yi", "Ping", "Ci", "Hekutogura", "Juan", "Chang", "Chi", "Sarake", "Dang", "Meng", "Pou"], ["Zhui", "Ping", "Bian", "Zhou", "Zhen", "Senchigura", "Ci", "Ying", "Qi", "Xian", "Lou", "Di", "Ou", "Meng", "Zhuan", "Peng", "Lin", "Zeng", "Wu", "Pi", "Dan", "Weng", "Ying", "Yan", "Gan", "Dai", "Shen", "Tian", "Tian", "Han", "Chang", "Sheng", "Qing", "Sheng", "Chan", "Chan", "Rui", "Sheng", "Su", "Sen", "Yong", "Shuai", "Lu", "Fu", "Yong", "Beng", "Feng", "Ning", "Tian", "You", "Jia", "Shen", "Zha", "Dian", "Fu", "Nan", "Dian", "Ping", "Ting", "Hua", "Ting", "Quan", "Zi", "Meng", "Bi", "Qi", "Liu", "Xun", "Liu", "Chang", "Mu", "Yun", "Fan", "Fu", "Geng", "Tian", "Jie", "Jie", "Quan", "Wei", "Fu", "Tian", "Mu", "Tap", "Pan", "Jiang", "Wa", "Da", "Nan", "Liu", "Ben", "Zhen", "Chu", "Mu", "Mu", "Ce", "Cen", "Gai", "Bi", "Da", "Zhi", "Lue", "Qi", "Lue", "Pan", "Kesa", "Fan", "Hua", "Yu", "Yu", "Mu", "Jun", "Yi", "Liu", "Yu", "Die", "Chou", "Hua", "Dang", "Chuo", "Ji", "Wan", "Jiang", "Sheng", "Chang", "Tuan", "Lei", "Ji", "Cha", "Liu", "Tatamu", "Tuan", "Lin", "Jiang", "Jiang", "Chou", "Bo", "Die", "Die", "Pi", "Nie", "Dan", "Shu", "Shu", "Zhi", "Yi", "Chuang", "Nai", "Ding", "Bi", "Jie", "Liao", "Gong", "Ge", "Jiu", "Zhou", "Xia", "Shan", "Xu", "Nue", "Li", "Yang", "Chen", "You", "Ba", "Jie", "Jue", "Zhi", "Xia", "Cui", "Bi", "Yi", "Li", "Zong", "Chuang", "Feng", "Zhu", "Pao", "Pi", "Gan", "Ke", "Ci", "Xie", "Qi", "Dan", "Zhen", "Fa", "Zhi", "Teng", "Ju", "Ji", "Fei", "Qu", "Dian", "Jia", "Xian", "Cha", "Bing", "Ni", "Zheng", "Yong", "Jing", "Quan", "Chong", "Tong", "Yi", "Kai", "Wei", "Hui", "Duo", "Yang", "Chi", "Zhi", "Hen", "Ya", "Mei", "Dou", "Jing", "Xiao", "Tong", "Tu", "Mang", "Pi", "Xiao", "Suan", "Pu", "Li", "Zhi", "Cuo", "Duo", "Wu", "Sha", "Lao", "Shou", "Huan", "Xian", "Yi", "Peng", "Zhang", "Guan", "Tan", "Fei", "Ma", "Lin", "Chi", "Ji", "Dian", "An", "Chi", "Bi", "Bei", "Min", "Gu", "Dui", "E", "Wei"], ["Yu", "Cui", "Ya", "Zhu", "Cu", "Dan", "Shen", "Zhung", "Ji", "Yu", "Hou", "Feng", "La", "Yang", "Shen", "Tu", "Yu", "Gua", "Wen", "Huan", "Ku", "Jia", "Yin", "Yi", "Lu", "Sao", "Jue", "Chi", "Xi", "Guan", "Yi", "Wen", "Ji", "Chuang", "Ban", "Lei", "Liu", "Chai", "Shou", "Nue", "Dian", "Da", "Pie", "Tan", "Zhang", "Biao", "Shen", "Cu", "Luo", "Yi", "Zong", "Chou", "Zhang", "Zhai", "Sou", "Suo", "Que", "Diao", "Lou", "Lu", "Mo", "Jin", "Yin", "Ying", "Huang", "Fu", "Liao", "Long", "Qiao", "Liu", "Lao", "Xian", "Fei", "Dan", "Yin", "He", "Ai", "Ban", "Xian", "Guan", "Guai", "Nong", "Yu", "Wei", "Yi", "Yong", "Pi", "Lei", "Li", "Shu", "Dan", "Lin", "Dian", "Lin", "Lai", "Pie", "Ji", "Chi", "Yang", "Xian", "Jie", "Zheng", , "Li", "Huo", "Lai", "Shaku", "Dian", "Xian", "Ying", "Yin", "Qu", "Yong", "Tan", "Dian", "Luo", "Luan", "Luan", "Bo", , "Gui", "Po", "Fa", "Deng", "Fa", "Bai", "Bai", "Qie", "Bi", "Zao", "Zao", "Mao", "De", "Pa", "Jie", "Huang", "Gui", "Ci", "Ling", "Gao", "Mo", "Ji", "Jiao", "Peng", "Gao", "Ai", "E", "Hao", "Han", "Bi", "Wan", "Chou", "Qian", "Xi", "Ai", "Jiong", "Hao", "Huang", "Hao", "Ze", "Cui", "Hao", "Xiao", "Ye", "Po", "Hao", "Jiao", "Ai", "Xing", "Huang", "Li", "Piao", "He", "Jiao", "Pi", "Gan", "Pao", "Zhou", "Jun", "Qiu", "Cun", "Que", "Zha", "Gu", "Jun", "Jun", "Zhou", "Zha", "Gu", "Zhan", "Du", "Min", "Qi", "Ying", "Yu", "Bei", "Zhao", "Zhong", "Pen", "He", "Ying", "He", "Yi", "Bo", "Wan", "He", "Ang", "Zhan", "Yan", "Jian", "He", "Yu", "Kui", "Fan", "Gai", "Dao", "Pan", "Fu", "Qiu", "Sheng", "Dao", "Lu", "Zhan", "Meng", "Li", "Jin", "Xu", "Jian", "Pan", "Guan", "An", "Lu", "Shu", "Zhou", "Dang", "An", "Gu", "Li", "Mu", "Cheng", "Gan", "Xu", "Mang", "Mang", "Zhi", "Qi", "Ruan", "Tian", "Xiang", "Dun", "Xin", "Xi", "Pan", "Feng", "Dun", "Min"], ["Ming", "Sheng", "Shi", "Yun", "Mian", "Pan", "Fang", "Miao", "Dan", "Mei", "Mao", "Kan", "Xian", "Ou", "Shi", "Yang", "Zheng", "Yao", "Shen", "Huo", "Da", "Zhen", "Kuang", "Ju", "Shen", "Chi", "Sheng", "Mei", "Mo", "Zhu", "Zhen", "Zhen", "Mian", "Di", "Yuan", "Die", "Yi", "Zi", "Zi", "Chao", "Zha", "Xuan", "Bing", "Mi", "Long", "Sui", "Dong", "Mi", "Die", "Yi", "Er", "Ming", "Xuan", "Chi", "Kuang", "Juan", "Mou", "Zhen", "Tiao", "Yang", "Yan", "Mo", "Zhong", "Mai", "Zhao", "Zheng", "Mei", "Jun", "Shao", "Han", "Huan", "Di", "Cheng", "Cuo", "Juan", "E", "Wan", "Xian", "Xi", "Kun", "Lai", "Jian", "Shan", "Tian", "Hun", "Wan", "Ling", "Shi", "Qiong", "Lie", "Yai", "Jing", "Zheng", "Li", "Lai", "Sui", "Juan", "Shui", "Sui", "Du", "Bi", "Bi", "Mu", "Hun", "Ni", "Lu", "Yi", "Jie", "Cai", "Zhou", "Yu", "Hun", "Ma", "Xia", "Xing", "Xi", "Gun", "Cai", "Chun", "Jian", "Mei", "Du", "Hou", "Xuan", "Ti", "Kui", "Gao", "Rui", "Mou", "Xu", "Fa", "Wen", "Miao", "Chou", "Kui", "Mi", "Weng", "Kou", "Dang", "Chen", "Ke", "Sou", "Xia", "Qiong", "Mao", "Ming", "Man", "Shui", "Ze", "Zhang", "Yi", "Diao", "Ou", "Mo", "Shun", "Cong", "Lou", "Chi", "Man", "Piao", "Cheng", "Ji", "Meng", , "Run", "Pie", "Xi", "Qiao", "Pu", "Zhu", "Deng", "Shen", "Shun", "Liao", "Che", "Xian", "Kan", "Ye", "Xu", "Tong", "Mou", "Lin", "Kui", "Xian", "Ye", "Ai", "Hui", "Zhan", "Jian", "Gu", "Zhao", "Qu", "Wei", "Chou", "Sao", "Ning", "Xun", "Yao", "Huo", "Meng", "Mian", "Bin", "Mian", "Li", "Kuang", "Jue", "Xuan", "Mian", "Huo", "Lu", "Meng", "Long", "Guan", "Man", "Xi", "Chu", "Tang", "Kan", "Zhu", "Mao", "Jin", "Lin", "Yu", "Shuo", "Ce", "Jue", "Shi", "Yi", "Shen", "Zhi", "Hou", "Shen", "Ying", "Ju", "Zhou", "Jiao", "Cuo", "Duan", "Ai", "Jiao", "Zeng", "Huo", "Bai", "Shi", "Ding", "Qi", "Ji", "Zi", "Gan", "Wu", "Tuo", "Ku", "Qiang", "Xi", "Fan", "Kuang"], ["Dang", "Ma", "Sha", "Dan", "Jue", "Li", "Fu", "Min", "Nuo", "Huo", "Kang", "Zhi", "Qi", "Kan", "Jie", "Fen", "E", "Ya", "Pi", "Zhe", "Yan", "Sui", "Zhuan", "Che", "Dun", "Pan", "Yan", , "Feng", "Fa", "Mo", "Zha", "Qu", "Yu", "Luo", "Tuo", "Tuo", "Di", "Zhai", "Zhen", "Ai", "Fei", "Mu", "Zhu", "Li", "Bian", "Nu", "Ping", "Peng", "Ling", "Pao", "Le", "Po", "Bo", "Po", "Shen", "Za", "Nuo", "Li", "Long", "Tong", , "Li", "Aragane", "Chu", "Keng", "Quan", "Zhu", "Kuang", "Huo", "E", "Nao", "Jia", "Lu", "Wei", "Ai", "Luo", "Ken", "Xing", "Yan", "Tong", "Peng", "Xi", , "Hong", "Shuo", "Xia", "Qiao", , "Wei", "Qiao", , "Keng", "Xiao", "Que", "Chan", "Lang", "Hong", "Yu", "Xiao", "Xia", "Mang", "Long", "Iong", "Che", "Che", "E", "Liu", "Ying", "Mang", "Que", "Yan", "Sha", "Kun", "Yu", , "Kaki", "Lu", "Chen", "Jian", "Nue", "Song", "Zhuo", "Keng", "Peng", "Yan", "Zhui", "Kong", "Ceng", "Qi", "Zong", "Qing", "Lin", "Jun", "Bo", "Ding", "Min", "Diao", "Jian", "He", "Lu", "Ai", "Sui", "Que", "Ling", "Bei", "Yin", "Dui", "Wu", "Qi", "Lun", "Wan", "Dian", "Gang", "Pei", "Qi", "Chen", "Ruan", "Yan", "Die", "Ding", "Du", "Tuo", "Jie", "Ying", "Bian", "Ke", "Bi", "Wei", "Shuo", "Zhen", "Duan", "Xia", "Dang", "Ti", "Nao", "Peng", "Jian", "Di", "Tan", "Cha", "Seki", "Qi", , "Feng", "Xuan", "Que", "Que", "Ma", "Gong", "Nian", "Su", "E", "Ci", "Liu", "Si", "Tang", "Bang", "Hua", "Pi", "Wei", "Sang", "Lei", "Cuo", "Zhen", "Xia", "Qi", "Lian", "Pan", "Wei", "Yun", "Dui", "Zhe", "Ke", "La", , "Qing", "Gun", "Zhuan", "Chan", "Qi", "Ao", "Peng", "Lu", "Lu", "Kan", "Qiang", "Chen", "Yin", "Lei", "Biao", "Qi", "Mo", "Qi", "Cui", "Zong", "Qing", "Chuo", , "Ji", "Shan", "Lao", "Qu", "Zeng", "Deng", "Jian", "Xi", "Lin", "Ding", "Dian", "Huang", "Pan", "Za", "Qiao", "Di", "Li"], ["Tani", "Jiao", , "Zhang", "Qiao", "Dun", "Xian", "Yu", "Zhui", "He", "Huo", "Zhai", "Lei", "Ke", "Chu", "Ji", "Que", "Dang", "Yi", "Jiang", "Pi", "Pi", "Yu", "Pin", "Qi", "Ai", "Kai", "Jian", "Yu", "Ruan", "Meng", "Pao", "Ci", , , "Mie", "Ca", "Xian", "Kuang", "Lei", "Lei", "Zhi", "Li", "Li", "Fan", "Que", "Pao", "Ying", "Li", "Long", "Long", "Mo", "Bo", "Shuang", "Guan", "Lan", "Zan", "Yan", "Shi", "Shi", "Li", "Reng", "She", "Yue", "Si", "Qi", "Ta", "Ma", "Xie", "Xian", "Xian", "Zhi", "Qi", "Zhi", "Beng", "Dui", "Zhong", , "Yi", "Shi", "You", "Zhi", "Tiao", "Fu", "Fu", "Mi", "Zu", "Zhi", "Suan", "Mei", "Zuo", "Qu", "Hu", "Zhu", "Shen", "Sui", "Ci", "Chai", "Mi", "Lu", "Yu", "Xiang", "Wu", "Tiao", "Piao", "Zhu", "Gui", "Xia", "Zhi", "Ji", "Gao", "Zhen", "Gao", "Shui", "Jin", "Chen", "Gai", "Kun", "Di", "Dao", "Huo", "Tao", "Qi", "Gu", "Guan", "Zui", "Ling", "Lu", "Bing", "Jin", "Dao", "Zhi", "Lu", "Shan", "Bei", "Zhe", "Hui", "You", "Xi", "Yin", "Zi", "Huo", "Zhen", "Fu", "Yuan", "Wu", "Xian", "Yang", "Ti", "Yi", "Mei", "Si", "Di", , "Zhuo", "Zhen", "Yong", "Ji", "Gao", "Tang", "Si", "Ma", "Ta", , "Xuan", "Qi", "Yu", "Xi", "Ji", "Si", "Chan", "Tan", "Kuai", "Sui", "Li", "Nong", "Ni", "Dao", "Li", "Rang", "Yue", "Ti", "Zan", "Lei", "Rou", "Yu", "Yu", "Chi", "Xie", "Qin", "He", "Tu", "Xiu", "Si", "Ren", "Tu", "Zi", "Cha", "Gan", "Yi", "Xian", "Bing", "Nian", "Qiu", "Qiu", "Zhong", "Fen", "Hao", "Yun", "Ke", "Miao", "Zhi", "Geng", "Bi", "Zhi", "Yu", "Mi", "Ku", "Ban", "Pi", "Ni", "Li", "You", "Zu", "Pi", "Ba", "Ling", "Mo", "Cheng", "Nian", "Qin", "Yang", "Zuo", "Zhi", "Zhi", "Shu", "Ju", "Zi", "Huo", "Ji", "Cheng", "Tong", "Zhi", "Huo", "He", "Yin", "Zi", "Zhi", "Jie", "Ren", "Du", "Yi", "Zhu", "Hui", "Nong", "Fu"], ["Xi", "Kao", "Lang", "Fu", "Ze", "Shui", "Lu", "Kun", "Gan", "Geng", "Ti", "Cheng", "Tu", "Shao", "Shui", "Ya", "Lun", "Lu", "Gu", "Zuo", "Ren", "Zhun", "Bang", "Bai", "Ji", "Zhi", "Zhi", "Kun", "Leng", "Peng", "Ke", "Bing", "Chou", "Zu", "Yu", "Su", "Lue", , "Yi", "Xi", "Bian", "Ji", "Fu", "Bi", "Nuo", "Jie", "Zhong", "Zong", "Xu", "Cheng", "Dao", "Wen", "Lian", "Zi", "Yu", "Ji", "Xu", "Zhen", "Zhi", "Dao", "Jia", "Ji", "Gao", "Gao", "Gu", "Rong", "Sui", "You", "Ji", "Kang", "Mu", "Shan", "Men", "Zhi", "Ji", "Lu", "Su", "Ji", "Ying", "Wen", "Qiu", "Se", , "Yi", "Huang", "Qie", "Ji", "Sui", "Xiao", "Pu", "Jiao", "Zhuo", "Tong", "Sai", "Lu", "Sui", "Nong", "Se", "Hui", "Rang", "Nuo", "Yu", "Bin", "Ji", "Tui", "Wen", "Cheng", "Huo", "Gong", "Lu", "Biao", , "Rang", "Zhuo", "Li", "Zan", "Xue", "Wa", "Jiu", "Qiong", "Xi", "Qiong", "Kong", "Yu", "Sen", "Jing", "Yao", "Chuan", "Zhun", "Tu", "Lao", "Qie", "Zhai", "Yao", "Bian", "Bao", "Yao", "Bing", "Wa", "Zhu", "Jiao", "Qiao", "Diao", "Wu", "Gui", "Yao", "Zhi", "Chuang", "Yao", "Tiao", "Jiao", "Chuang", "Jiong", "Xiao", "Cheng", "Kou", "Cuan", "Wo", "Dan", "Ku", "Ke", "Zhui", "Xu", "Su", "Guan", "Kui", "Dou", , "Yin", "Wo", "Wa", "Ya", "Yu", "Ju", "Qiong", "Yao", "Yao", "Tiao", "Chao", "Yu", "Tian", "Diao", "Ju", "Liao", "Xi", "Wu", "Kui", "Chuang", "Zhao", , "Kuan", "Long", "Cheng", "Cui", "Piao", "Zao", "Cuan", "Qiao", "Qiong", "Dou", "Zao", "Long", "Qie", "Li", "Chu", "Shi", "Fou", "Qian", "Chu", "Hong", "Qi", "Qian", "Gong", "Shi", "Shu", "Miao", "Ju", "Zhan", "Zhu", "Ling", "Long", "Bing", "Jing", "Jing", "Zhang", "Yi", "Si", "Jun", "Hong", "Tong", "Song", "Jing", "Diao", "Yi", "Shu", "Jing", "Qu", "Jie", "Ping", "Duan", "Shao", "Zhuan", "Ceng", "Deng", "Cui", "Huai", "Jing", "Kan", "Jing", "Zhu", "Zhu", "Le", "Peng", "Yu", "Chi", "Gan"], ["Mang", "Zhu", "Utsubo", "Du", "Ji", "Xiao", "Ba", "Suan", "Ji", "Zhen", "Zhao", "Sun", "Ya", "Zhui", "Yuan", "Hu", "Gang", "Xiao", "Cen", "Pi", "Bi", "Jian", "Yi", "Dong", "Shan", "Sheng", "Xia", "Di", "Zhu", "Na", "Chi", "Gu", "Li", "Qie", "Min", "Bao", "Tiao", "Si", "Fu", "Ce", "Ben", "Pei", "Da", "Zi", "Di", "Ling", "Ze", "Nu", "Fu", "Gou", "Fan", "Jia", "Ge", "Fan", "Shi", "Mao", "Po", "Sey", "Jian", "Qiong", "Long", "Souke", "Bian", "Luo", "Gui", "Qu", "Chi", "Yin", "Yao", "Xian", "Bi", "Qiong", "Gua", "Deng", "Jiao", "Jin", "Quan", "Sun", "Ru", "Fa", "Kuang", "Zhu", "Tong", "Ji", "Da", "Xing", "Ce", "Zhong", "Kou", "Lai", "Bi", "Shai", "Dang", "Zheng", "Ce", "Fu", "Yun", "Tu", "Pa", "Li", "Lang", "Ju", "Guan", "Jian", "Han", "Tong", "Xia", "Zhi", "Cheng", "Suan", "Shi", "Zhu", "Zuo", "Xiao", "Shao", "Ting", "Ce", "Yan", "Gao", "Kuai", "Gan", "Chou", "Kago", "Gang", "Yun", "O", "Qian", "Xiao", "Jian", "Pu", "Lai", "Zou", "Bi", "Bi", "Bi", "Ge", "Chi", "Guai", "Yu", "Jian", "Zhao", "Gu", "Chi", "Zheng", "Jing", "Sha", "Zhou", "Lu", "Bo", "Ji", "Lin", "Suan", "Jun", "Fu", "Zha", "Gu", "Kong", "Qian", "Quan", "Jun", "Chui", "Guan", "Yuan", "Ce", "Ju", "Bo", "Ze", "Qie", "Tuo", "Luo", "Dan", "Xiao", "Ruo", "Jian", "Xuan", "Bian", "Sun", "Xiang", "Xian", "Ping", "Zhen", "Sheng", "Hu", "Shi", "Zhu", "Yue", "Chun", "Lu", "Wu", "Dong", "Xiao", "Ji", "Jie", "Huang", "Xing", "Mei", "Fan", "Chui", "Zhuan", "Pian", "Feng", "Zhu", "Hong", "Qie", "Hou", "Qiu", "Miao", "Qian", , "Kui", "Sik", "Lou", "Yun", "He", "Tang", "Yue", "Chou", "Gao", "Fei", "Ruo", "Zheng", "Gou", "Nie", "Qian", "Xiao", "Cuan", "Gong", "Pang", "Du", "Li", "Bi", "Zhuo", "Chu", "Shai", "Chi", "Zhu", "Qiang", "Long", "Lan", "Jian", "Bu", "Li", "Hui", "Bi", "Di", "Cong", "Yan", "Peng", "Sen", "Zhuan", "Pai", "Piao", "Dou", "Yu", "Mie", "Zhuan"], ["Ze", "Xi", "Guo", "Yi", "Hu", "Chan", "Kou", "Cu", "Ping", "Chou", "Ji", "Gui", "Su", "Lou", "Zha", "Lu", "Nian", "Suo", "Cuan", "Sasara", "Suo", "Le", "Duan", "Yana", "Xiao", "Bo", "Mi", "Si", "Dang", "Liao", "Dan", "Dian", "Fu", "Jian", "Min", "Kui", "Dai", "Qiao", "Deng", "Huang", "Sun", "Lao", "Zan", "Xiao", "Du", "Shi", "Zan", , "Pai", "Hata", "Pai", "Gan", "Ju", "Du", "Lu", "Yan", "Bo", "Dang", "Sai", "Ke", "Long", "Qian", "Lian", "Bo", "Zhou", "Lai", , "Lan", "Kui", "Yu", "Yue", "Hao", "Zhen", "Tai", "Ti", "Mi", "Chou", "Ji", , "Hata", "Teng", "Zhuan", "Zhou", "Fan", "Sou", "Zhou", "Kuji", "Zhuo", "Teng", "Lu", "Lu", "Jian", "Tuo", "Ying", "Yu", "Lai", "Long", "Shinshi", "Lian", "Lan", "Qian", "Yue", "Zhong", "Qu", "Lian", "Bian", "Duan", "Zuan", "Li", "Si", "Luo", "Ying", "Yue", "Zhuo", "Xu", "Mi", "Di", "Fan", "Shen", "Zhe", "Shen", "Nu", "Xie", "Lei", "Xian", "Zi", "Ni", "Cun", , "Qian", "Kume", "Bi", "Ban", "Wu", "Sha", "Kang", "Rou", "Fen", "Bi", "Cui", , "Li", "Chi", "Nukamiso", "Ro", "Ba", "Li", "Gan", "Ju", "Po", "Mo", "Cu", "Nian", "Zhou", "Li", "Su", "Tiao", "Li", "Qi", "Su", "Hong", "Tong", "Zi", "Ce", "Yue", "Zhou", "Lin", "Zhuang", "Bai", , "Fen", "Ji", , "Sukumo", "Liang", "Xian", "Fu", "Liang", "Can", "Geng", "Li", "Yue", "Lu", "Ju", "Qi", "Cui", "Bai", "Zhang", "Lin", "Zong", "Jing", "Guo", "Kouji", "San", "San", "Tang", "Bian", "Rou", "Mian", "Hou", "Xu", "Zong", "Hu", "Jian", "Zan", "Ci", "Li", "Xie", "Fu", "Ni", "Bei", "Gu", "Xiu", "Gao", "Tang", "Qiu", "Sukumo", "Cao", "Zhuang", "Tang", "Mi", "San", "Fen", "Zao", "Kang", "Jiang", "Mo", "San", "San", "Nuo", "Xi", "Liang", "Jiang", "Kuai", "Bo", "Huan", , "Zong", "Xian", "Nuo", "Tuan", "Nie", "Li", "Zuo", "Di", "Nie", "Tiao", "Lan", "Mi", "Jiao", "Jiu", "Xi", "Gong", "Zheng", "Jiu", "You"], ["Ji", "Cha", "Zhou", "Xun", "Yue", "Hong", "Yu", "He", "Wan", "Ren", "Wen", "Wen", "Qiu", "Na", "Zi", "Tou", "Niu", "Fou", "Jie", "Shu", "Chun", "Pi", "Yin", "Sha", "Hong", "Zhi", "Ji", "Fen", "Yun", "Ren", "Dan", "Jin", "Su", "Fang", "Suo", "Cui", "Jiu", "Zha", "Kinu", "Jin", "Fu", "Zhi", "Ci", "Zi", "Chou", "Hong", "Zha", "Lei", "Xi", "Fu", "Xie", "Shen", "Bei", "Zhu", "Qu", "Ling", "Zhu", "Shao", "Gan", "Yang", "Fu", "Tuo", "Zhen", "Dai", "Zhuo", "Shi", "Zhong", "Xian", "Zu", "Jiong", "Ban", "Ju", "Mo", "Shu", "Zui", "Wata", "Jing", "Ren", "Heng", "Xie", "Jie", "Zhu", "Chou", "Gua", "Bai", "Jue", "Kuang", "Hu", "Ci", "Geng", "Geng", "Tao", "Xie", "Ku", "Jiao", "Quan", "Gai", "Luo", "Xuan", "Bing", "Xian", "Fu", "Gei", "Tong", "Rong", "Tiao", "Yin", "Lei", "Xie", "Quan", "Xu", "Lun", "Die", "Tong", "Si", "Jiang", "Xiang", "Hui", "Jue", "Zhi", "Jian", "Juan", "Chi", "Mian", "Zhen", "Lu", "Cheng", "Qiu", "Shu", "Bang", "Tong", "Xiao", "Wan", "Qin", "Geng", "Xiu", "Ti", "Xiu", "Xie", "Hong", "Xi", "Fu", "Ting", "Sui", "Dui", "Kun", "Fu", "Jing", "Hu", "Zhi", "Yan", "Jiong", "Feng", "Ji", "Sok", "Kase", "Zong", "Lin", "Duo", "Li", "Lu", "Liang", "Chou", "Quan", "Shao", "Qi", "Qi", "Zhun", "Qi", "Wan", "Qian", "Xian", "Shou", "Wei", "Qi", "Tao", "Wan", "Gang", "Wang", "Beng", "Zhui", "Cai", "Guo", "Cui", "Lun", "Liu", "Qi", "Zhan", "Bei", "Chuo", "Ling", "Mian", "Qi", "Qie", "Tan", "Zong", "Gun", "Zou", "Yi", "Zi", "Xing", "Liang", "Jin", "Fei", "Rui", "Min", "Yu", "Zong", "Fan", "Lu", "Xu", "Yingl", "Zhang", "Kasuri", "Xu", "Xiang", "Jian", "Ke", "Xian", "Ruan", "Mian", "Qi", "Duan", "Zhong", "Di", "Min", "Miao", "Yuan", "Xie", "Bao", "Si", "Qiu", "Bian", "Huan", "Geng", "Cong", "Mian", "Wei", "Fu", "Wei", "Yu", "Gou", "Miao", "Xie", "Lian", "Zong", "Bian", "Yun", "Yin", "Ti", "Gua", "Zhi", "Yun", "Cheng", "Chan", "Dai"], ["Xia", "Yuan", "Zong", "Xu", "Nawa", "Odoshi", "Geng", "Sen", "Ying", "Jin", "Yi", "Zhui", "Ni", "Bang", "Gu", "Pan", "Zhou", "Jian", "Cuo", "Quan", "Shuang", "Yun", "Xia", "Shuai", "Xi", "Rong", "Tao", "Fu", "Yun", "Zhen", "Gao", "Ru", "Hu", "Zai", "Teng", "Xian", "Su", "Zhen", "Zong", "Tao", "Horo", "Cai", "Bi", "Feng", "Cu", "Li", "Suo", "Yin", "Xi", "Zong", "Lei", "Zhuan", "Qian", "Man", "Zhi", "Lu", "Mo", "Piao", "Lian", "Mi", "Xuan", "Zong", "Ji", "Shan", "Sui", "Fan", "Shuai", "Beng", "Yi", "Sao", "Mou", "Zhou", "Qiang", "Hun", "Sem", "Xi", "Jung", "Xiu", "Ran", "Xuan", "Hui", "Qiao", "Zeng", "Zuo", "Zhi", "Shan", "San", "Lin", "Yu", "Fan", "Liao", "Chuo", "Zun", "Jian", "Rao", "Chan", "Rui", "Xiu", "Hui", "Hua", "Zuan", "Xi", "Qiang", "Un", "Da", "Sheng", "Hui", "Xi", "Se", "Jian", "Jiang", "Huan", "Zao", "Cong", "Jie", "Jiao", "Bo", "Chan", "Yi", "Nao", "Sui", "Yi", "Shai", "Xu", "Ji", "Bin", "Qian", "Lan", "Pu", "Xun", "Zuan", "Qi", "Peng", "Li", "Mo", "Lei", "Xie", "Zuan", "Kuang", "You", "Xu", "Lei", "Xian", "Chan", "Kou", "Lu", "Chan", "Ying", "Cai", "Xiang", "Xian", "Zui", "Zuan", "Luo", "Xi", "Dao", "Lan", "Lei", "Lian", "Si", "Jiu", "Yu", "Hong", "Zhou", "Xian", "He", "Yue", "Ji", "Wan", "Kuang", "Ji", "Ren", "Wei", "Yun", "Hong", "Chun", "Pi", "Sha", "Gang", "Na", "Ren", "Zong", "Lun", "Fen", "Zhi", "Wen", "Fang", "Zhu", "Yin", "Niu", "Shu", "Xian", "Gan", "Xie", "Fu", "Lian", "Zu", "Shen", "Xi", "Zhi", "Zhong", "Zhou", "Ban", "Fu", "Zhuo", "Shao", "Yi", "Jing", "Dai", "Bang", "Rong", "Jie", "Ku", "Rao", "Die", "Heng", "Hui", "Gei", "Xuan", "Jiang", "Luo", "Jue", "Jiao", "Tong", "Geng", "Xiao", "Juan", "Xiu", "Xi", "Sui", "Tao", "Ji", "Ti", "Ji", "Xu", "Ling", , "Xu", "Qi", "Fei", "Chuo", "Zhang", "Gun", "Sheng", "Wei", "Mian", "Shou", "Beng", "Chou", "Tao", "Liu", "Quan", "Zong", "Zhan", "Wan", "Lu"], ["Zhui", "Zi", "Ke", "Xiang", "Jian", "Mian", "Lan", "Ti", "Miao", "Qi", "Yun", "Hui", "Si", "Duo", "Duan", "Bian", "Xian", "Gou", "Zhui", "Huan", "Di", "Lu", "Bian", "Min", "Yuan", "Jin", "Fu", "Ru", "Zhen", "Feng", "Shuai", "Gao", "Chan", "Li", "Yi", "Jian", "Bin", "Piao", "Man", "Lei", "Ying", "Suo", "Mou", "Sao", "Xie", "Liao", "Shan", "Zeng", "Jiang", "Qian", "Zao", "Huan", "Jiao", "Zuan", "Fou", "Xie", "Gang", "Fou", "Que", "Fou", "Kaakeru", "Bo", "Ping", "Hou", , "Gang", "Ying", "Ying", "Qing", "Xia", "Guan", "Zun", "Tan", "Chang", "Qi", "Weng", "Ying", "Lei", "Tan", "Lu", "Guan", "Wang", "Wang", "Gang", "Wang", "Han", , "Luo", "Fu", "Mi", "Fa", "Gu", "Zhu", "Ju", "Mao", "Gu", "Min", "Gang", "Ba", "Gua", "Ti", "Juan", "Fu", "Lin", "Yan", "Zhao", "Zui", "Gua", "Zhuo", "Yu", "Zhi", "An", "Fa", "Nan", "Shu", "Si", "Pi", "Ma", "Liu", "Ba", "Fa", "Li", "Chao", "Wei", "Bi", "Ji", "Zeng", "Tong", "Liu", "Ji", "Juan", "Mi", "Zhao", "Luo", "Pi", "Ji", "Ji", "Luan", "Yang", "Mie", "Qiang", "Ta", "Mei", "Yang", "You", "You", "Fen", "Ba", "Gao", "Yang", "Gu", "Qiang", "Zang", "Gao", "Ling", "Yi", "Zhu", "Di", "Xiu", "Qian", "Yi", "Xian", "Rong", "Qun", "Qun", "Qian", "Huan", "Zui", "Xian", "Yi", "Yashinau", "Qiang", "Xian", "Yu", "Geng", "Jie", "Tang", "Yuan", "Xi", "Fan", "Shan", "Fen", "Shan", "Lian", "Lei", "Geng", "Nou", "Qiang", "Chan", "Yu", "Gong", "Yi", "Chong", "Weng", "Fen", "Hong", "Chi", "Chi", "Cui", "Fu", "Xia", "Pen", "Yi", "La", "Yi", "Pi", "Ling", "Liu", "Zhi", "Qu", "Xi", "Xie", "Xiang", "Xi", "Xi", "Qi", "Qiao", "Hui", "Hui", "Xiao", "Se", "Hong", "Jiang", "Di", "Cui", "Fei", "Tao", "Sha", "Chi", "Zhu", "Jian", "Xuan", "Shi", "Pian", "Zong", "Wan", "Hui", "Hou", "He", "He", "Han", "Ao", "Piao", "Yi", "Lian", "Qu", , "Lin", "Pen", "Qiao", "Ao", "Fan", "Yi", "Hui", "Xuan", "Dao"], ["Yao", "Lao", , "Kao", "Mao", "Zhe", "Qi", "Gou", "Gou", "Gou", "Die", "Die", "Er", "Shua", "Ruan", "Er", "Nai", "Zhuan", "Lei", "Ting", "Zi", "Geng", "Chao", "Hao", "Yun", "Pa", "Pi", "Chi", "Si", "Chu", "Jia", "Ju", "He", "Chu", "Lao", "Lun", "Ji", "Tang", "Ou", "Lou", "Nou", "Gou", "Pang", "Ze", "Lou", "Ji", "Lao", "Huo", "You", "Mo", "Huai", "Er", "Zhe", "Ting", "Ye", "Da", "Song", "Qin", "Yun", "Chi", "Dan", "Dan", "Hong", "Geng", "Zhi", , "Nie", "Dan", "Zhen", "Che", "Ling", "Zheng", "You", "Wa", "Liao", "Long", "Zhi", "Ning", "Tiao", "Er", "Ya", "Die", "Gua", , "Lian", "Hao", "Sheng", "Lie", "Pin", "Jing", "Ju", "Bi", "Di", "Guo", "Wen", "Xu", "Ping", "Cong", "Shikato", , "Ting", "Yu", "Cong", "Kui", "Tsuraneru", "Kui", "Cong", "Lian", "Weng", "Kui", "Lian", "Lian", "Cong", "Ao", "Sheng", "Song", "Ting", "Kui", "Nie", "Zhi", "Dan", "Ning", "Qie", "Ji", "Ting", "Ting", "Long", "Yu", "Yu", "Zhao", "Si", "Su", "Yi", "Su", "Si", "Zhao", "Zhao", "Rou", "Yi", "Le", "Ji", "Qiu", "Ken", "Cao", "Ge", "Di", "Huan", "Huang", "Yi", "Ren", "Xiao", "Ru", "Zhou", "Yuan", "Du", "Gang", "Rong", "Gan", "Cha", "Wo", "Chang", "Gu", "Zhi", "Han", "Fu", "Fei", "Fen", "Pei", "Pang", "Jian", "Fang", "Zhun", "You", "Na", "Hang", "Ken", "Ran", "Gong", "Yu", "Wen", "Yao", "Jin", "Pi", "Qian", "Xi", "Xi", "Fei", "Ken", "Jing", "Tai", "Shen", "Zhong", "Zhang", "Xie", "Shen", "Wei", "Zhou", "Die", "Dan", "Fei", "Ba", "Bo", "Qu", "Tian", "Bei", "Gua", "Tai", "Zi", "Ku", "Zhi", "Ni", "Ping", "Zi", "Fu", "Pang", "Zhen", "Xian", "Zuo", "Pei", "Jia", "Sheng", "Zhi", "Bao", "Mu", "Qu", "Hu", "Ke", "Yi", "Yin", "Xu", "Yang", "Long", "Dong", "Ka", "Lu", "Jing", "Nu", "Yan", "Pang", "Kua", "Yi", "Guang", "Gai", "Ge", "Dong", "Zhi", "Xiao", "Xiong", "Xiong", "Er", "E", "Xing", "Pian", "Neng", "Zi", "Gui"], ["Cheng", "Tiao", "Zhi", "Cui", "Mei", "Xie", "Cui", "Xie", "Mo", "Mai", "Ji", "Obiyaakasu", , "Kuai", "Sa", "Zang", "Qi", "Nao", "Mi", "Nong", "Luan", "Wan", "Bo", "Wen", "Guan", "Qiu", "Jiao", "Jing", "Rou", "Heng", "Cuo", "Lie", "Shan", "Ting", "Mei", "Chun", "Shen", "Xie", "De", "Zui", "Cu", "Xiu", "Xin", "Tuo", "Pao", "Cheng", "Nei", "Fu", "Dou", "Tuo", "Niao", "Noy", "Pi", "Gu", "Gua", "Li", "Lian", "Zhang", "Cui", "Jie", "Liang", "Zhou", "Pi", "Biao", "Lun", "Pian", "Guo", "Kui", "Chui", "Dan", "Tian", "Nei", "Jing", "Jie", "La", "Yi", "An", "Ren", "Shen", "Chuo", "Fu", "Fu", "Ju", "Fei", "Qiang", "Wan", "Dong", "Pi", "Guo", "Zong", "Ding", "Wu", "Mei", "Ruan", "Zhuan", "Zhi", "Cou", "Gua", "Ou", "Di", "An", "Xing", "Nao", "Yu", "Chuan", "Nan", "Yun", "Zhong", "Rou", "E", "Sai", "Tu", "Yao", "Jian", "Wei", "Jiao", "Yu", "Jia", "Duan", "Bi", "Chang", "Fu", "Xian", "Ni", "Mian", "Wa", "Teng", "Tui", "Bang", "Qian", "Lu", "Wa", "Sou", "Tang", "Su", "Zhui", "Ge", "Yi", "Bo", "Liao", "Ji", "Pi", "Xie", "Gao", "Lu", "Bin", "Ou", "Chang", "Lu", "Guo", "Pang", "Chuai", "Piao", "Jiang", "Fu", "Tang", "Mo", "Xi", "Zhuan", "Lu", "Jiao", "Ying", "Lu", "Zhi", "Tara", "Chun", "Lian", "Tong", "Peng", "Ni", "Zha", "Liao", "Cui", "Gui", "Xiao", "Teng", "Fan", "Zhi", "Jiao", "Shan", "Wu", "Cui", "Run", "Xiang", "Sui", "Fen", "Ying", "Tan", "Zhua", "Dan", "Kuai", "Nong", "Tun", "Lian", "Bi", "Yong", "Jue", "Chu", "Yi", "Juan", "La", "Lian", "Sao", "Tun", "Gu", "Qi", "Cui", "Bin", "Xun", "Ru", "Huo", "Zang", "Xian", "Biao", "Xing", "Kuan", "La", "Yan", "Lu", "Huo", "Zang", "Luo", "Qu", "Zang", "Luan", "Ni", "Zang", "Chen", "Qian", "Wo", "Guang", "Zang", "Lin", "Guang", "Zi", "Jiao", "Nie", "Chou", "Ji", "Gao", "Chou", "Mian", "Nie", "Zhi", "Zhi", "Ge", "Jian", "Die", "Zhi", "Xiu", "Tai", "Zhen", "Jiu", "Xian", "Yu", "Cha"], ["Yao", "Yu", "Chong", "Xi", "Xi", "Jiu", "Yu", "Yu", "Xing", "Ju", "Jiu", "Xin", "She", "She", "Yadoru", "Jiu", "Shi", "Tan", "Shu", "Shi", "Tian", "Dan", "Pu", "Pu", "Guan", "Hua", "Tan", "Chuan", "Shun", "Xia", "Wu", "Zhou", "Dao", "Gang", "Shan", "Yi", , "Pa", "Tai", "Fan", "Ban", "Chuan", "Hang", "Fang", "Ban", "Que", "Hesaki", "Zhong", "Jian", "Cang", "Ling", "Zhu", "Ze", "Duo", "Bo", "Xian", "Ge", "Chuan", "Jia", "Lu", "Hong", "Pang", "Xi", , "Fu", "Zao", "Feng", "Li", "Shao", "Yu", "Lang", "Ting", , "Wei", "Bo", "Meng", "Nian", "Ju", "Huang", "Shou", "Zong", "Bian", "Mao", "Die", , "Bang", "Cha", "Yi", "Sao", "Cang", "Cao", "Lou", "Dai", "Sori", "Yao", "Tong", "Yofune", "Dang", "Tan", "Lu", "Yi", "Jie", "Jian", "Huo", "Meng", "Qi", "Lu", "Lu", "Chan", "Shuang", "Gen", "Liang", "Jian", "Jian", "Se", "Yan", "Fu", "Ping", "Yan", "Yan", "Cao", "Cao", "Yi", "Le", "Ting", "Qiu", "Ai", "Nai", "Tiao", "Jiao", "Jie", "Peng", "Wan", "Yi", "Chai", "Mian", "Mie", "Gan", "Qian", "Yu", "Yu", "Shuo", "Qiong", "Tu", "Xia", "Qi", "Mang", "Zi", "Hui", "Sui", "Zhi", "Xiang", "Bi", "Fu", "Tun", "Wei", "Wu", "Zhi", "Qi", "Shan", "Wen", "Qian", "Ren", "Fou", "Kou", "Jie", "Lu", "Xu", "Ji", "Qin", "Qi", "Yuan", "Fen", "Ba", "Rui", "Xin", "Ji", "Hua", "Hua", "Fang", "Wu", "Jue", "Gou", "Zhi", "Yun", "Qin", "Ao", "Chu", "Mao", "Ya", "Fei", "Reng", "Hang", "Cong", "Yin", "You", "Bian", "Yi", "Susa", "Wei", "Li", "Pi", "E", "Xian", "Chang", "Cang", "Meng", "Su", "Yi", "Yuan", "Ran", "Ling", "Tai", "Tiao", "Di", "Miao", "Qiong", "Li", "Yong", "Ke", "Mu", "Pei", "Bao", "Gou", "Min", "Yi", "Yi", "Ju", "Pi", "Ruo", "Ku", "Zhu", "Ni", "Bo", "Bing", "Shan", "Qiu", "Yao", "Xian", "Ben", "Hong", "Ying", "Zha", "Dong", "Ju", "Die", "Nie", "Gan", "Hu", "Ping", "Mei", "Fu", "Sheng", "Gu", "Bi", "Wei"], ["Fu", "Zhuo", "Mao", "Fan", "Qie", "Mao", "Mao", "Ba", "Zi", "Mo", "Zi", "Di", "Chi", "Ji", "Jing", "Long", , "Niao", , "Xue", "Ying", "Qiong", "Ge", "Ming", "Li", "Rong", "Yin", "Gen", "Qian", "Chai", "Chen", "Yu", "Xiu", "Zi", "Lie", "Wu", "Ji", "Kui", "Ce", "Chong", "Ci", "Gou", "Guang", "Mang", "Chi", "Jiao", "Jiao", "Fu", "Yu", "Zhu", "Zi", "Jiang", "Hui", "Yin", "Cha", "Fa", "Rong", "Ru", "Chong", "Mang", "Tong", "Zhong", , "Zhu", "Xun", "Huan", "Kua", "Quan", "Gai", "Da", "Jing", "Xing", "Quan", "Cao", "Jing", "Er", "An", "Shou", "Chi", "Ren", "Jian", "Ti", "Huang", "Ping", "Li", "Jin", "Lao", "Shu", "Zhuang", "Da", "Jia", "Rao", "Bi", "Ze", "Qiao", "Hui", "Qi", "Dang", , "Rong", "Hun", "Ying", "Luo", "Ying", "Xun", "Jin", "Sun", "Yin", "Mai", "Hong", "Zhou", "Yao", "Du", "Wei", "Chu", "Dou", "Fu", "Ren", "Yin", "He", "Bi", "Bu", "Yun", "Di", "Tu", "Sui", "Sui", "Cheng", "Chen", "Wu", "Bie", "Xi", "Geng", "Li", "Fu", "Zhu", "Mo", "Li", "Zhuang", "Ji", "Duo", "Qiu", "Sha", "Suo", "Chen", "Feng", "Ju", "Mei", "Meng", "Xing", "Jing", "Che", "Xin", "Jun", "Yan", "Ting", "Diao", "Cuo", "Wan", "Han", "You", "Cuo", "Jia", "Wang", "You", "Niu", "Shao", "Xian", "Lang", "Fu", "E", "Mo", "Wen", "Jie", "Nan", "Mu", "Kan", "Lai", "Lian", "Shi", "Wo", "Usagi", "Lian", "Huo", "You", "Ying", "Ying", "Nuc", "Chun", "Mang", "Mang", "Ci", "Wan", "Jing", "Di", "Qu", "Dong", "Jian", "Zou", "Gu", "La", "Lu", "Ju", "Wei", "Jun", "Nie", "Kun", "He", "Pu", "Zi", "Gao", "Guo", "Fu", "Lun", "Chang", "Chou", "Song", "Chui", "Zhan", "Men", "Cai", "Ba", "Li", "Tu", "Bo", "Han", "Bao", "Qin", "Juan", "Xi", "Qin", "Di", "Jie", "Pu", "Dang", "Jin", "Zhao", "Tai", "Geng", "Hua", "Gu", "Ling", "Fei", "Jin", "An", "Wang", "Beng", "Zhou", "Yan", "Ju", "Jian", "Lin", "Tan", "Shu", "Tian", "Dao"], ["Hu", "Qi", "He", "Cui", "Tao", "Chun", "Bei", "Chang", "Huan", "Fei", "Lai", "Qi", "Meng", "Ping", "Wei", "Dan", "Sha", "Huan", "Yan", "Yi", "Tiao", "Qi", "Wan", "Ce", "Nai", "Kutabireru", "Tuo", "Jiu", "Tie", "Luo", , , "Meng", , "Yaji", , "Ying", "Ying", "Ying", "Xiao", "Sa", "Qiu", "Ke", "Xiang", "Wan", "Yu", "Yu", "Fu", "Lian", "Xuan", "Yuan", "Nan", "Ze", "Wo", "Chun", "Xiao", "Yu", "Pian", "Mao", "An", "E", "Luo", "Ying", "Huo", "Gua", "Jiang", "Mian", "Zuo", "Zuo", "Ju", "Bao", "Rou", "Xi", "Xie", "An", "Qu", "Jian", "Fu", "Lu", "Jing", "Pen", "Feng", "Hong", "Hong", "Hou", "Yan", "Tu", "Zhu", "Zi", "Xiang", "Shen", "Ge", "Jie", "Jing", "Mi", "Huang", "Shen", "Pu", "Gai", "Dong", "Zhou", "Qian", "Wei", "Bo", "Wei", "Pa", "Ji", "Hu", "Zang", "Jia", "Duan", "Yao", "Jun", "Cong", "Quan", "Wei", "Xian", "Kui", "Ting", "Hun", "Xi", "Shi", "Qi", "Lan", "Zong", "Yao", "Yuan", "Mei", "Yun", "Shu", "Di", "Zhuan", "Guan", "Sukumo", "Xue", "Chan", "Kai", "Kui", , "Jiang", "Lou", "Wei", "Pai", , "Sou", "Yin", "Shi", "Chun", "Shi", "Yun", "Zhen", "Lang", "Nu", "Meng", "He", "Que", "Suan", "Yuan", "Li", "Ju", "Xi", "Pang", "Chu", "Xu", "Tu", "Liu", "Wo", "Zhen", "Qian", "Zu", "Po", "Cuo", "Yuan", "Chu", "Yu", "Kuai", "Pan", "Pu", "Pu", "Na", "Shuo", "Xi", "Fen", "Yun", "Zheng", "Jian", "Ji", "Ruo", "Cang", "En", "Mi", "Hao", "Sun", "Zhen", "Ming", "Sou", "Xu", "Liu", "Xi", "Gu", "Lang", "Rong", "Weng", "Gai", "Cuo", "Shi", "Tang", "Luo", "Ru", "Suo", "Xian", "Bei", "Yao", "Gui", "Bi", "Zong", "Gun", "Za", "Xiu", "Ce", "Hai", "Lan", , "Ji", "Li", "Can", "Lang", "Yu", , "Ying", "Mo", "Diao", "Tiao", "Mao", "Tong", "Zhu", "Peng", "An", "Lian", "Cong", "Xi", "Ping", "Qiu", "Jin", "Chun", "Jie", "Wei", "Tui", "Cao", "Yu", "Yi", "Ji", "Liao", "Bi", "Lu", "Su"], ["Bu", "Zhang", "Luo", "Jiang", "Man", "Yan", "Ling", "Ji", "Piao", "Gun", "Han", "Di", "Su", "Lu", "She", "Shang", "Di", "Mie", "Xun", "Man", "Bo", "Di", "Cuo", "Zhe", "Sen", "Xuan", "Wei", "Hu", "Ao", "Mi", "Lou", "Cu", "Zhong", "Cai", "Po", "Jiang", "Mi", "Cong", "Niao", "Hui", "Jun", "Yin", "Jian", "Yan", "Shu", "Yin", "Kui", "Chen", "Hu", "Sha", "Kou", "Qian", "Ma", "Zang", "Sonoko", "Qiang", "Dou", "Lian", "Lin", "Kou", "Ai", "Bi", "Li", "Wei", "Ji", "Xun", "Sheng", "Fan", "Meng", "Ou", "Chan", "Dian", "Xun", "Jiao", "Rui", "Rui", "Lei", "Yu", "Qiao", "Chu", "Hua", "Jian", "Mai", "Yun", "Bao", "You", "Qu", "Lu", "Rao", "Hui", "E", "Teng", "Fei", "Jue", "Zui", "Fa", "Ru", "Fen", "Kui", "Shun", "Rui", "Ya", "Xu", "Fu", "Jue", "Dang", "Wu", "Tong", "Si", "Xiao", "Xi", "Long", "Yun", , "Qi", "Jian", "Yun", "Sun", "Ling", "Yu", "Xia", "Yong", "Ji", "Hong", "Si", "Nong", "Lei", "Xuan", "Yun", "Yu", "Xi", "Hao", "Bo", "Hao", "Ai", "Wei", "Hui", "Wei", "Ji", "Ci", "Xiang", "Luan", "Mie", "Yi", "Leng", "Jiang", "Can", "Shen", "Qiang", "Lian", "Ke", "Yuan", "Da", "Ti", "Tang", "Xie", "Bi", "Zhan", "Sun", "Lian", "Fan", "Ding", "Jie", "Gu", "Xie", "Shu", "Jian", "Kao", "Hong", "Sa", "Xin", "Xun", "Yao", "Hie", "Sou", "Shu", "Xun", "Dui", "Pin", "Wei", "Neng", "Chou", "Mai", "Ru", "Piao", "Tai", "Qi", "Zao", "Chen", "Zhen", "Er", "Ni", "Ying", "Gao", "Cong", "Xiao", "Qi", "Fa", "Jian", "Xu", "Kui", "Jie", "Bian", "Diao", "Mi", "Lan", "Jin", "Cang", "Miao", "Qiong", "Qie", "Xian", , "Ou", "Xian", "Su", "Lu", "Yi", "Xu", "Xie", "Li", "Yi", "La", "Lei", "Xiao", "Di", "Zhi", "Bei", "Teng", "Yao", "Mo", "Huan", "Piao", "Fan", "Sou", "Tan", "Tui", "Qiong", "Qiao", "Wei", "Liu", "Hui", , "Gao", "Yun", , "Li", "Shu", "Chu", "Ai", "Lin", "Zao", "Xuan", "Chen", "Lai", "Huo"], ["Tuo", "Wu", "Rui", "Rui", "Qi", "Heng", "Lu", "Su", "Tui", "Mang", "Yun", "Pin", "Yu", "Xun", "Ji", "Jiong", "Xian", "Mo", "Hagi", "Su", "Jiong", , "Nie", "Bo", "Rang", "Yi", "Xian", "Yu", "Ju", "Lian", "Lian", "Yin", "Qiang", "Ying", "Long", "Tong", "Wei", "Yue", "Ling", "Qu", "Yao", "Fan", "Mi", "Lan", "Kui", "Lan", "Ji", "Dang", "Katsura", "Lei", "Lei", "Hua", "Feng", "Zhi", "Wei", "Kui", "Zhan", "Huai", "Li", "Ji", "Mi", "Lei", "Huai", "Luo", "Ji", "Kui", "Lu", "Jian", "San", , "Lei", "Quan", "Xiao", "Yi", "Luan", "Men", "Bie", "Hu", "Hu", "Lu", "Nue", "Lu", "Si", "Xiao", "Qian", "Chu", "Hu", "Xu", "Cuo", "Fu", "Xu", "Xu", "Lu", "Hu", "Yu", "Hao", "Jiao", "Ju", "Guo", "Bao", "Yan", "Zhan", "Zhan", "Kui", "Ban", "Xi", "Shu", "Chong", "Qiu", "Diao", "Ji", "Qiu", "Cheng", "Shi", , "Di", "Zhe", "She", "Yu", "Gan", "Zi", "Hong", "Hui", "Meng", "Ge", "Sui", "Xia", "Chai", "Shi", "Yi", "Ma", "Xiang", "Fang", "E", "Pa", "Chi", "Qian", "Wen", "Wen", "Rui", "Bang", "Bi", "Yue", "Yue", "Jun", "Qi", "Ran", "Yin", "Qi", "Tian", "Yuan", "Jue", "Hui", "Qin", "Qi", "Zhong", "Ya", "Ci", "Mu", "Wang", "Fen", "Fen", "Hang", "Gong", "Zao", "Fu", "Ran", "Jie", "Fu", "Chi", "Dou", "Piao", "Xian", "Ni", "Te", "Qiu", "You", "Zha", "Ping", "Chi", "You", "He", "Han", "Ju", "Li", "Fu", "Ran", "Zha", "Gou", "Pi", "Bo", "Xian", "Zhu", "Diao", "Bie", "Bing", "Gu", "Ran", "Qu", "She", "Tie", "Ling", "Gu", "Dan", "Gu", "Ying", "Li", "Cheng", "Qu", "Mou", "Ge", "Ci", "Hui", "Hui", "Mang", "Fu", "Yang", "Wa", "Lie", "Zhu", "Yi", "Xian", "Kuo", "Jiao", "Li", "Yi", "Ping", "Ji", "Ha", "She", "Yi", "Wang", "Mo", "Qiong", "Qie", "Gui", "Gong", "Zhi", "Man", "Ebi", "Zhi", "Jia", "Rao", "Si", "Qi", "Xing", "Lie", "Qiu", "Shao", "Yong", "Jia", "Shui", "Che", "Bai", "E", "Han"], ["Shu", "Xuan", "Feng", "Shen", "Zhen", "Fu", "Xian", "Zhe", "Wu", "Fu", "Li", "Lang", "Bi", "Chu", "Yuan", "You", "Jie", "Dan", "Yan", "Ting", "Dian", "Shui", "Hui", "Gua", "Zhi", "Song", "Fei", "Ju", "Mi", "Qi", "Qi", "Yu", "Jun", "Zha", "Meng", "Qiang", "Si", "Xi", "Lun", "Li", "Die", "Tiao", "Tao", "Kun", "Gan", "Han", "Yu", "Bang", "Fei", "Pi", "Wei", "Dun", "Yi", "Yuan", "Su", "Quan", "Qian", "Rui", "Ni", "Qing", "Wei", "Liang", "Guo", "Wan", "Dong", "E", "Ban", "Di", "Wang", "Can", "Yang", "Ying", "Guo", "Chan", , "La", "Ke", "Ji", "He", "Ting", "Mai", "Xu", "Mian", "Yu", "Jie", "Shi", "Xuan", "Huang", "Yan", "Bian", "Rou", "Wei", "Fu", "Yuan", "Mei", "Wei", "Fu", "Ruan", "Xie", "You", "Qiu", "Mao", "Xia", "Ying", "Shi", "Chong", "Tang", "Zhu", "Zong", "Ti", "Fu", "Yuan", "Hui", "Meng", "La", "Du", "Hu", "Qiu", "Die", "Li", "Gua", "Yun", "Ju", "Nan", "Lou", "Qun", "Rong", "Ying", "Jiang", , "Lang", "Pang", "Si", "Xi", "Ci", "Xi", "Yuan", "Weng", "Lian", "Sou", "Ban", "Rong", "Rong", "Ji", "Wu", "Qiu", "Han", "Qin", "Yi", "Bi", "Hua", "Tang", "Yi", "Du", "Nai", "He", "Hu", "Hui", "Ma", "Ming", "Yi", "Wen", "Ying", "Teng", "Yu", "Cang", "So", "Ebi", "Man", , "Shang", "Zhe", "Cao", "Chi", "Di", "Ao", "Lu", "Wei", "Zhi", "Tang", "Chen", "Piao", "Qu", "Pi", "Yu", "Jian", "Luo", "Lou", "Qin", "Zhong", "Yin", "Jiang", "Shuai", "Wen", "Jiao", "Wan", "Zhi", "Zhe", "Ma", "Ma", "Guo", "Liu", "Mao", "Xi", "Cong", "Li", "Man", "Xiao", "Kamakiri", "Zhang", "Mang", "Xiang", "Mo", "Zui", "Si", "Qiu", "Te", "Zhi", "Peng", "Peng", "Jiao", "Qu", "Bie", "Liao", "Pan", "Gui", "Xi", "Ji", "Zhuan", "Huang", "Fei", "Lao", "Jue", "Jue", "Hui", "Yin", "Chan", "Jiao", "Shan", "Rao", "Xiao", "Mou", "Chong", "Xun", "Si", , "Cheng", "Dang", "Li", "Xie", "Shan", "Yi", "Jing", "Da", "Chan", "Qi"], ["Ci", "Xiang", "She", "Luo", "Qin", "Ying", "Chai", "Li", "Ze", "Xuan", "Lian", "Zhu", "Ze", "Xie", "Mang", "Xie", "Qi", "Rong", "Jian", "Meng", "Hao", "Ruan", "Huo", "Zhuo", "Jie", "Bin", "He", "Mie", "Fan", "Lei", "Jie", "La", "Mi", "Li", "Chun", "Li", "Qiu", "Nie", "Lu", "Du", "Xiao", "Zhu", "Long", "Li", "Long", "Feng", "Ye", "Beng", "Shang", "Gu", "Juan", "Ying", , "Xi", "Can", "Qu", "Quan", "Du", "Can", "Man", "Jue", "Jie", "Zhu", "Zha", "Xie", "Huang", "Niu", "Pei", "Nu", "Xin", "Zhong", "Mo", "Er", "Ke", "Mie", "Xi", "Xing", "Yan", "Kan", "Yuan", , "Ling", "Xuan", "Shu", "Xian", "Tong", "Long", "Jie", "Xian", "Ya", "Hu", "Wei", "Dao", "Chong", "Wei", "Dao", "Zhun", "Heng", "Qu", "Yi", "Yi", "Bu", "Gan", "Yu", "Biao", "Cha", "Yi", "Shan", "Chen", "Fu", "Gun", "Fen", "Shuai", "Jie", "Na", "Zhong", "Dan", "Ri", "Zhong", "Zhong", "Xie", "Qi", "Xie", "Ran", "Zhi", "Ren", "Qin", "Jin", "Jun", "Yuan", "Mei", "Chai", "Ao", "Niao", "Hui", "Ran", "Jia", "Tuo", "Ling", "Dai", "Bao", "Pao", "Yao", "Zuo", "Bi", "Shao", "Tan", "Ju", "He", "Shu", "Xiu", "Zhen", "Yi", "Pa", "Bo", "Di", "Wa", "Fu", "Gun", "Zhi", "Zhi", "Ran", "Pan", "Yi", "Mao", "Tuo", "Na", "Kou", "Xian", "Chan", "Qu", "Bei", "Gun", "Xi", "Ne", "Bo", "Horo", "Fu", "Yi", "Chi", "Ku", "Ren", "Jiang", "Jia", "Cun", "Mo", "Jie", "Er", "Luo", "Ru", "Zhu", "Gui", "Yin", "Cai", "Lie", "Kamishimo", "Yuki", "Zhuang", "Dang", , "Kun", "Ken", "Niao", "Shu", "Jia", "Kun", "Cheng", "Li", "Juan", "Shen", "Pou", "Ge", "Yi", "Yu", "Zhen", "Liu", "Qiu", "Qun", "Ji", "Yi", "Bu", "Zhuang", "Shui", "Sha", "Qun", "Li", "Lian", "Lian", "Ku", "Jian", "Fou", "Chan", "Bi", "Gun", "Tao", "Yuan", "Ling", "Chi", "Chang", "Chou", "Duo", "Biao", "Liang", "Chang", "Pei", "Pei", "Fei", "Yuan", "Luo", "Guo", "Yan", "Du", "Xi", "Zhi", "Ju", "Qi"], ["Ji", "Zhi", "Gua", "Ken", "Che", "Ti", "Ti", "Fu", "Chong", "Xie", "Bian", "Die", "Kun", "Duan", "Xiu", "Xiu", "He", "Yuan", "Bao", "Bao", "Fu", "Yu", "Tuan", "Yan", "Hui", "Bei", "Chu", "Lu", "Ena", "Hitoe", "Yun", "Da", "Gou", "Da", "Huai", "Rong", "Yuan", "Ru", "Nai", "Jiong", "Suo", "Ban", "Tun", "Chi", "Sang", "Niao", "Ying", "Jie", "Qian", "Huai", "Ku", "Lian", "Bao", "Li", "Zhe", "Shi", "Lu", "Yi", "Die", "Xie", "Xian", "Wei", "Biao", "Cao", "Ji", "Jiang", "Sen", "Bao", "Xiang", "Chihaya", "Pu", "Jian", "Zhuan", "Jian", "Zui", "Ji", "Dan", "Za", "Fan", "Bo", "Xiang", "Xin", "Bie", "Rao", "Man", "Lan", "Ao", "Duo", "Gui", "Cao", "Sui", "Nong", "Chan", "Lian", "Bi", "Jin", "Dang", "Shu", "Tan", "Bi", "Lan", "Pu", "Ru", "Zhi", , "Shu", "Wa", "Shi", "Bai", "Xie", "Bo", "Chen", "Lai", "Long", "Xi", "Xian", "Lan", "Zhe", "Dai", "Tasuki", "Zan", "Shi", "Jian", "Pan", "Yi", "Ran", "Ya", "Xi", "Xi", "Yao", "Feng", "Tan", , "Biao", "Fu", "Ba", "He", "Ji", "Ji", "Jian", "Guan", "Bian", "Yan", "Gui", "Jue", "Pian", "Mao", "Mi", "Mi", "Mie", "Shi", "Si", "Zhan", "Luo", "Jue", "Mi", "Tiao", "Lian", "Yao", "Zhi", "Jun", "Xi", "Shan", "Wei", "Xi", "Tian", "Yu", "Lan", "E", "Du", "Qin", "Pang", "Ji", "Ming", "Ying", "Gou", "Qu", "Zhan", "Jin", "Guan", "Deng", "Jian", "Luo", "Qu", "Jian", "Wei", "Jue", "Qu", "Luo", "Lan", "Shen", "Di", "Guan", "Jian", "Guan", "Yan", "Gui", "Mi", "Shi", "Zhan", "Lan", "Jue", "Ji", "Xi", "Di", "Tian", "Yu", "Gou", "Jin", "Qu", "Jiao", "Jiu", "Jin", "Cu", "Jue", "Zhi", "Chao", "Ji", "Gu", "Dan", "Zui", "Di", "Shang", "Hua", "Quan", "Ge", "Chi", "Jie", "Gui", "Gong", "Chu", "Jie", "Hun", "Qiu", "Xing", "Su", "Ni", "Ji", "Lu", "Zhi", "Zha", "Bi", "Xing", "Hu", "Shang", "Gong", "Zhi", "Xue", "Chu", "Xi", "Yi", "Lu", "Jue", "Xi", "Yan", "Xi"], ["Yan", "Yan", "Ding", "Fu", "Qiu", "Qiu", "Jiao", "Hong", "Ji", "Fan", "Xun", "Diao", "Hong", "Cha", "Tao", "Xu", "Jie", "Yi", "Ren", "Xun", "Yin", "Shan", "Qi", "Tuo", "Ji", "Xun", "Yin", "E", "Fen", "Ya", "Yao", "Song", "Shen", "Yin", "Xin", "Jue", "Xiao", "Ne", "Chen", "You", "Zhi", "Xiong", "Fang", "Xin", "Chao", "She", "Xian", "Sha", "Tun", "Xu", "Yi", "Yi", "Su", "Chi", "He", "Shen", "He", "Xu", "Zhen", "Zhu", "Zheng", "Gou", "Zi", "Zi", "Zhan", "Gu", "Fu", "Quan", "Die", "Ling", "Di", "Yang", "Li", "Nao", "Pan", "Zhou", "Gan", "Yi", "Ju", "Ao", "Zha", "Tuo", "Yi", "Qu", "Zhao", "Ping", "Bi", "Xiong", "Qu", "Ba", "Da", "Zu", "Tao", "Zhu", "Ci", "Zhe", "Yong", "Xu", "Xun", "Yi", "Huang", "He", "Shi", "Cha", "Jiao", "Shi", "Hen", "Cha", "Gou", "Gui", "Quan", "Hui", "Jie", "Hua", "Gai", "Xiang", "Wei", "Shen", "Chou", "Tong", "Mi", "Zhan", "Ming", "E", "Hui", "Yan", "Xiong", "Gua", "Er", "Beng", "Tiao", "Chi", "Lei", "Zhu", "Kuang", "Kua", "Wu", "Yu", "Teng", "Ji", "Zhi", "Ren", "Su", "Lang", "E", "Kuang", "E", "Shi", "Ting", "Dan", "Bo", "Chan", "You", "Heng", "Qiao", "Qin", "Shua", "An", "Yu", "Xiao", "Cheng", "Jie", "Xian", "Wu", "Wu", "Gao", "Song", "Pu", "Hui", "Jing", "Shuo", "Zhen", "Shuo", "Du", "Yasashi", "Chang", "Shui", "Jie", "Ke", "Qu", "Cong", "Xiao", "Sui", "Wang", "Xuan", "Fei", "Chi", "Ta", "Yi", "Na", "Yin", "Diao", "Pi", "Chuo", "Chan", "Chen", "Zhun", "Ji", "Qi", "Tan", "Zhui", "Wei", "Ju", "Qing", "Jian", "Zheng", "Ze", "Zou", "Qian", "Zhuo", "Liang", "Jian", "Zhu", "Hao", "Lun", "Shen", "Biao", "Huai", "Pian", "Yu", "Die", "Xu", "Pian", "Shi", "Xuan", "Shi", "Hun", "Hua", "E", "Zhong", "Di", "Xie", "Fu", "Pu", "Ting", "Jian", "Qi", "Yu", "Zi", "Chuan", "Xi", "Hui", "Yin", "An", "Xian", "Nan", "Chen", "Feng", "Zhu", "Yang", "Yan", "Heng", "Xuan", "Ge", "Nuo", "Qi"], ["Mou", "Ye", "Wei", , "Teng", "Zou", "Shan", "Jian", "Bo", "Ku", "Huang", "Huo", "Ge", "Ying", "Mi", "Xiao", "Mi", "Xi", "Qiang", "Chen", "Nue", "Ti", "Su", "Bang", "Chi", "Qian", "Shi", "Jiang", "Yuan", "Xie", "Xue", "Tao", "Yao", "Yao", , "Yu", "Biao", "Cong", "Qing", "Li", "Mo", "Mo", "Shang", "Zhe", "Miu", "Jian", "Ze", "Jie", "Lian", "Lou", "Can", "Ou", "Guan", "Xi", "Zhuo", "Ao", "Ao", "Jin", "Zhe", "Yi", "Hu", "Jiang", "Man", "Chao", "Han", "Hua", "Chan", "Xu", "Zeng", "Se", "Xi", "She", "Dui", "Zheng", "Nao", "Lan", "E", "Ying", "Jue", "Ji", "Zun", "Jiao", "Bo", "Hui", "Zhuan", "Mu", "Zen", "Zha", "Shi", "Qiao", "Tan", "Zen", "Pu", "Sheng", "Xuan", "Zao", "Tan", "Dang", "Sui", "Qian", "Ji", "Jiao", "Jing", "Lian", "Nou", "Yi", "Ai", "Zhan", "Pi", "Hui", "Hua", "Yi", "Yi", "Shan", "Rang", "Nou", "Qian", "Zhui", "Ta", "Hu", "Zhou", "Hao", "Ye", "Ying", "Jian", "Yu", "Jian", "Hui", "Du", "Zhe", "Xuan", "Zan", "Lei", "Shen", "Wei", "Chan", "Li", "Yi", "Bian", "Zhe", "Yan", "E", "Chou", "Wei", "Chou", "Yao", "Chan", "Rang", "Yin", "Lan", "Chen", "Huo", "Zhe", "Huan", "Zan", "Yi", "Dang", "Zhan", "Yan", "Du", "Yan", "Ji", "Ding", "Fu", "Ren", "Ji", "Jie", "Hong", "Tao", "Rang", "Shan", "Qi", "Tuo", "Xun", "Yi", "Xun", "Ji", "Ren", "Jiang", "Hui", "Ou", "Ju", "Ya", "Ne", "Xu", "E", "Lun", "Xiong", "Song", "Feng", "She", "Fang", "Jue", "Zheng", "Gu", "He", "Ping", "Zu", "Shi", "Xiong", "Zha", "Su", "Zhen", "Di", "Zou", "Ci", "Qu", "Zhao", "Bi", "Yi", "Yi", "Kuang", "Lei", "Shi", "Gua", "Shi", "Jie", "Hui", "Cheng", "Zhu", "Shen", "Hua", "Dan", "Gou", "Quan", "Gui", "Xun", "Yi", "Zheng", "Gai", "Xiang", "Cha", "Hun", "Xu", "Zhou", "Jie", "Wu", "Yu", "Qiao", "Wu", "Gao", "You", "Hui", "Kuang", "Shuo", "Song", "Ai", "Qing", "Zhu", "Zou", "Nuo", "Du", "Zhuo", "Fei", "Ke", "Wei"], ["Yu", "Shui", "Shen", "Diao", "Chan", "Liang", "Zhun", "Sui", "Tan", "Shen", "Yi", "Mou", "Chen", "Die", "Huang", "Jian", "Xie", "Nue", "Ye", "Wei", "E", "Yu", "Xuan", "Chan", "Zi", "An", "Yan", "Di", "Mi", "Pian", "Xu", "Mo", "Dang", "Su", "Xie", "Yao", "Bang", "Shi", "Qian", "Mi", "Jin", "Man", "Zhe", "Jian", "Miu", "Tan", "Zen", "Qiao", "Lan", "Pu", "Jue", "Yan", "Qian", "Zhan", "Chen", "Gu", "Qian", "Hong", "Xia", "Jue", "Hong", "Han", "Hong", "Xi", "Xi", "Huo", "Liao", "Han", "Du", "Long", "Dou", "Jiang", "Qi", "Shi", "Li", "Deng", "Wan", "Bi", "Shu", "Xian", "Feng", "Zhi", "Zhi", "Yan", "Yan", "Shi", "Chu", "Hui", "Tun", "Yi", "Tun", "Yi", "Jian", "Ba", "Hou", "E", "Cu", "Xiang", "Huan", "Jian", "Ken", "Gai", "Qu", "Fu", "Xi", "Bin", "Hao", "Yu", "Zhu", "Jia", , "Xi", "Bo", "Wen", "Huan", "Bin", "Di", "Zong", "Fen", "Yi", "Zhi", "Bao", "Chai", "Han", "Pi", "Na", "Pi", "Gou", "Na", "You", "Diao", "Mo", "Si", "Xiu", "Huan", "Kun", "He", "He", "Mo", "Han", "Mao", "Li", "Ni", "Bi", "Yu", "Jia", "Tuan", "Mao", "Pi", "Xi", "E", "Ju", "Mo", "Chu", "Tan", "Huan", "Jue", "Bei", "Zhen", "Yuan", "Fu", "Cai", "Gong", "Te", "Yi", "Hang", "Wan", "Pin", "Huo", "Fan", "Tan", "Guan", "Ze", "Zhi", "Er", "Zhu", "Shi", "Bi", "Zi", "Er", "Gui", "Pian", "Bian", "Mai", "Dai", "Sheng", "Kuang", "Fei", "Tie", "Yi", "Chi", "Mao", "He", "Bi", "Lu", "Ren", "Hui", "Gai", "Pian", "Zi", "Jia", "Xu", "Zei", "Jiao", "Gai", "Zang", "Jian", "Ying", "Xun", "Zhen", "She", "Bin", "Bin", "Qiu", "She", "Chuan", "Zang", "Zhou", "Lai", "Zan", "Si", "Chen", "Shang", "Tian", "Pei", "Geng", "Xian", "Mai", "Jian", "Sui", "Fu", "Tan", "Cong", "Cong", "Zhi", "Ji", "Zhang", "Du", "Jin", "Xiong", "Shun", "Yun", "Bao", "Zai", "Lai", "Feng", "Cang", "Ji", "Sheng", "Ai", "Zhuan", "Fu", "Gou", "Sai", "Ze", "Liao"], ["Wei", "Bai", "Chen", "Zhuan", "Zhi", "Zhui", "Biao", "Yun", "Zeng", "Tan", "Zan", "Yan", , "Shan", "Wan", "Ying", "Jin", "Gan", "Xian", "Zang", "Bi", "Du", "Shu", "Yan", , "Xuan", "Long", "Gan", "Zang", "Bei", "Zhen", "Fu", "Yuan", "Gong", "Cai", "Ze", "Xian", "Bai", "Zhang", "Huo", "Zhi", "Fan", "Tan", "Pin", "Bian", "Gou", "Zhu", "Guan", "Er", "Jian", "Bi", "Shi", "Tie", "Gui", "Kuang", "Dai", "Mao", "Fei", "He", "Yi", "Zei", "Zhi", "Jia", "Hui", "Zi", "Ren", "Lu", "Zang", "Zi", "Gai", "Jin", "Qiu", "Zhen", "Lai", "She", "Fu", "Du", "Ji", "Shu", "Shang", "Si", "Bi", "Zhou", "Geng", "Pei", "Tan", "Lai", "Feng", "Zhui", "Fu", "Zhuan", "Sai", "Ze", "Yan", "Zan", "Yun", "Zeng", "Shan", "Ying", "Gan", "Chi", "Xi", "She", "Nan", "Xiong", "Xi", "Cheng", "He", "Cheng", "Zhe", "Xia", "Tang", "Zou", "Zou", "Li", "Jiu", "Fu", "Zhao", "Gan", "Qi", "Shan", "Qiong", "Qin", "Xian", "Ci", "Jue", "Qin", "Chi", "Ci", "Chen", "Chen", "Die", "Ju", "Chao", "Di", "Se", "Zhan", "Zhu", "Yue", "Qu", "Jie", "Chi", "Chu", "Gua", "Xue", "Ci", "Tiao", "Duo", "Lie", "Gan", "Suo", "Cu", "Xi", "Zhao", "Su", "Yin", "Ju", "Jian", "Que", "Tang", "Chuo", "Cui", "Lu", "Qu", "Dang", "Qiu", "Zi", "Ti", "Qu", "Chi", "Huang", "Qiao", "Qiao", "Yao", "Zao", "Ti", , "Zan", "Zan", "Zu", "Pa", "Bao", "Ku", "Ke", "Dun", "Jue", "Fu", "Chen", "Jian", "Fang", "Zhi", "Sa", "Yue", "Pa", "Qi", "Yue", "Qiang", "Tuo", "Tai", "Yi", "Nian", "Ling", "Mei", "Ba", "Die", "Ku", "Tuo", "Jia", "Ci", "Pao", "Qia", "Zhu", "Ju", "Die", "Zhi", "Fu", "Pan", "Ju", "Shan", "Bo", "Ni", "Ju", "Li", "Gen", "Yi", "Ji", "Dai", "Xian", "Jiao", "Duo", "Zhu", "Zhuan", "Kua", "Zhuai", "Gui", "Qiong", "Kui", "Xiang", "Chi", "Lu", "Beng", "Zhi", "Jia", "Tiao", "Cai", "Jian", "Ta", "Qiao", "Bi", "Xian", "Duo", "Ji", "Ju", "Ji", "Shu", "Tu"], ["Chu", "Jing", "Nie", "Xiao", "Bo", "Chi", "Qun", "Mou", "Shu", "Lang", "Yong", "Jiao", "Chou", "Qiao", , "Ta", "Jian", "Qi", "Wo", "Wei", "Zhuo", "Jie", "Ji", "Nie", "Ju", "Ju", "Lun", "Lu", "Leng", "Huai", "Ju", "Chi", "Wan", "Quan", "Ti", "Bo", "Zu", "Qie", "Ji", "Cu", "Zong", "Cai", "Zong", "Peng", "Zhi", "Zheng", "Dian", "Zhi", "Yu", "Duo", "Dun", "Chun", "Yong", "Zhong", "Di", "Zhe", "Chen", "Chuai", "Jian", "Gua", "Tang", "Ju", "Fu", "Zu", "Die", "Pian", "Rou", "Nuo", "Ti", "Cha", "Tui", "Jian", "Dao", "Cuo", "Xi", "Ta", "Qiang", "Zhan", "Dian", "Ti", "Ji", "Nie", "Man", "Liu", "Zhan", "Bi", "Chong", "Lu", "Liao", "Cu", "Tang", "Dai", "Suo", "Xi", "Kui", "Ji", "Zhi", "Qiang", "Di", "Man", "Zong", "Lian", "Beng", "Zao", "Nian", "Bie", "Tui", "Ju", "Deng", "Ceng", "Xian", "Fan", "Chu", "Zhong", "Dun", "Bo", "Cu", "Zu", "Jue", "Jue", "Lin", "Ta", "Qiao", "Qiao", "Pu", "Liao", "Dun", "Cuan", "Kuang", "Zao", "Ta", "Bi", "Bi", "Zhu", "Ju", "Chu", "Qiao", "Dun", "Chou", "Ji", "Wu", "Yue", "Nian", "Lin", "Lie", "Zhi", "Li", "Zhi", "Chan", "Chu", "Duan", "Wei", "Long", "Lin", "Xian", "Wei", "Zuan", "Lan", "Xie", "Rang", "Xie", "Nie", "Ta", "Qu", "Jie", "Cuan", "Zuan", "Xi", "Kui", "Jue", "Lin", "Shen", "Gong", "Dan", "Segare", "Qu", "Ti", "Duo", "Duo", "Gong", "Lang", "Nerau", "Luo", "Ai", "Ji", "Ju", "Tang", "Utsuke", , "Yan", "Shitsuke", "Kang", "Qu", "Lou", "Lao", "Tuo", "Zhi", "Yagate", "Ti", "Dao", "Yagate", "Yu", "Che", "Ya", "Gui", "Jun", "Wei", "Yue", "Xin", "Di", "Xuan", "Fan", "Ren", "Shan", "Qiang", "Shu", "Tun", "Chen", "Dai", "E", "Na", "Qi", "Mao", "Ruan", "Ren", "Fan", "Zhuan", "Hong", "Hu", "Qu", "Huang", "Di", "Ling", "Dai", "Ao", "Zhen", "Fan", "Kuang", "Ang", "Peng", "Bei", "Gu", "Ku", "Pao", "Zhu", "Rong", "E", "Ba", "Zhou", "Zhi", "Yao", "Ke", "Yi", "Qing", "Shi", "Ping"], ["Er", "Qiong", "Ju", "Jiao", "Guang", "Lu", "Kai", "Quan", "Zhou", "Zai", "Zhi", "She", "Liang", "Yu", "Shao", "You", "Huan", "Yun", "Zhe", "Wan", "Fu", "Qing", "Zhou", "Ni", "Ling", "Zhe", "Zhan", "Liang", "Zi", "Hui", "Wang", "Chuo", "Guo", "Kan", "Yi", "Peng", "Qian", "Gun", "Nian", "Pian", "Guan", "Bei", "Lun", "Pai", "Liang", "Ruan", "Rou", "Ji", "Yang", "Xian", "Chuan", "Cou", "Qun", "Ge", "You", "Hong", "Shu", "Fu", "Zi", "Fu", "Wen", "Ben", "Zhan", "Yu", "Wen", "Tao", "Gu", "Zhen", "Xia", "Yuan", "Lu", "Jiu", "Chao", "Zhuan", "Wei", "Hun", "Sori", "Che", "Jiao", "Zhan", "Pu", "Lao", "Fen", "Fan", "Lin", "Ge", "Se", "Kan", "Huan", "Yi", "Ji", "Dui", "Er", "Yu", "Xian", "Hong", "Lei", "Pei", "Li", "Li", "Lu", "Lin", "Che", "Ya", "Gui", "Xuan", "Di", "Ren", "Zhuan", "E", "Lun", "Ruan", "Hong", "Ku", "Ke", "Lu", "Zhou", "Zhi", "Yi", "Hu", "Zhen", "Li", "Yao", "Qing", "Shi", "Zai", "Zhi", "Jiao", "Zhou", "Quan", "Lu", "Jiao", "Zhe", "Fu", "Liang", "Nian", "Bei", "Hui", "Gun", "Wang", "Liang", "Chuo", "Zi", "Cou", "Fu", "Ji", "Wen", "Shu", "Pei", "Yuan", "Xia", "Zhan", "Lu", "Che", "Lin", "Xin", "Gu", "Ci", "Ci", "Pi", "Zui", "Bian", "La", "La", "Ci", "Xue", "Ban", "Bian", "Bian", "Bian", , "Bian", "Ban", "Ci", "Bian", "Bian", "Chen", "Ru", "Nong", "Nong", "Zhen", "Chuo", "Chuo", "Suberu", "Reng", "Bian", "Bian", "Sip", "Ip", "Liao", "Da", "Chan", "Gan", "Qian", "Yu", "Yu", "Qi", "Xun", "Yi", "Guo", "Mai", "Qi", "Za", "Wang", "Jia", "Zhun", "Ying", "Ti", "Yun", "Jin", "Hang", "Ya", "Fan", "Wu", "Da", "E", "Huan", "Zhe", "Totemo", "Jin", "Yuan", "Wei", "Lian", "Chi", "Che", "Ni", "Tiao", "Zhi", "Yi", "Jiong", "Jia", "Chen", "Dai", "Er", "Di", "Po", "Wang", "Die", "Ze", "Tao", "Shu", "Tuo", "Kep", "Jing", "Hui", "Tong", "You", "Mi", "Beng", "Ji", "Nai", "Yi", "Jie", "Zhui", "Lie", "Xun"], ["Tui", "Song", "Gua", "Tao", "Pang", "Hou", "Ni", "Dun", "Jiong", "Xuan", "Xun", "Bu", "You", "Xiao", "Qiu", "Tou", "Zhu", "Qiu", "Di", "Di", "Tu", "Jing", "Ti", "Dou", "Yi", "Zhe", "Tong", "Guang", "Wu", "Shi", "Cheng", "Su", "Zao", "Qun", "Feng", "Lian", "Suo", "Hui", "Li", "Sako", "Lai", "Ben", "Cuo", "Jue", "Beng", "Huan", "Dai", "Lu", "You", "Zhou", "Jin", "Yu", "Chuo", "Kui", "Wei", "Ti", "Yi", "Da", "Yuan", "Luo", "Bi", "Nuo", "Yu", "Dang", "Sui", "Dun", "Sui", "Yan", "Chuan", "Chi", "Ti", "Yu", "Shi", "Zhen", "You", "Yun", "E", "Bian", "Guo", "E", "Xia", "Huang", "Qiu", "Dao", "Da", "Wei", "Appare", "Yi", "Gou", "Yao", "Chu", "Liu", "Xun", "Ta", "Di", "Chi", "Yuan", "Su", "Ta", "Qian", , "Yao", "Guan", "Zhang", "Ao", "Shi", "Ce", "Chi", "Su", "Zao", "Zhe", "Dun", "Di", "Lou", "Chi", "Cuo", "Lin", "Zun", "Rao", "Qian", "Xuan", "Yu", "Yi", "Wu", "Liao", "Ju", "Shi", "Bi", "Yao", "Mai", "Xie", "Sui", "Huan", "Zhan", "Teng", "Er", "Miao", "Bian", "Bian", "La", "Li", "Yuan", "Yao", "Luo", "Li", "Yi", "Ting", "Deng", "Qi", "Yong", "Shan", "Han", "Yu", "Mang", "Ru", "Qiong", , "Kuang", "Fu", "Kang", "Bin", "Fang", "Xing", "Na", "Xin", "Shen", "Bang", "Yuan", "Cun", "Huo", "Xie", "Bang", "Wu", "Ju", "You", "Han", "Tai", "Qiu", "Bi", "Pei", "Bing", "Shao", "Bei", "Wa", "Di", "Zou", "Ye", "Lin", "Kuang", "Gui", "Zhu", "Shi", "Ku", "Yu", "Gai", "Ge", "Xi", "Zhi", "Ji", "Xun", "Hou", "Xing", "Jiao", "Xi", "Gui", "Nuo", "Lang", "Jia", "Kuai", "Zheng", "Otoko", "Yun", "Yan", "Cheng", "Dou", "Chi", "Lu", "Fu", "Wu", "Fu", "Gao", "Hao", "Lang", "Jia", "Geng", "Jun", "Ying", "Bo", "Xi", "Bei", "Li", "Yun", "Bu", "Xiao", "Qi", "Pi", "Qing", "Guo", "Zhou", "Tan", "Zou", "Ping", "Lai", "Ni", "Chen", "You", "Bu", "Xiang", "Dan", "Ju", "Yong", "Qiao", "Yi", "Du", "Yan", "Mei"], ["Ruo", "Bei", "E", "Yu", "Juan", "Yu", "Yun", "Hou", "Kui", "Xiang", "Xiang", "Sou", "Tang", "Ming", "Xi", "Ru", "Chu", "Zi", "Zou", "Ju", "Wu", "Xiang", "Yun", "Hao", "Yong", "Bi", "Mo", "Chao", "Fu", "Liao", "Yin", "Zhuan", "Hu", "Qiao", "Yan", "Zhang", "Fan", "Qiao", "Xu", "Deng", "Bi", "Xin", "Bi", "Ceng", "Wei", "Zheng", "Mao", "Shan", "Lin", "Po", "Dan", "Meng", "Ye", "Cao", "Kuai", "Feng", "Meng", "Zou", "Kuang", "Lian", "Zan", "Chan", "You", "Qi", "Yan", "Chan", "Zan", "Ling", "Huan", "Xi", "Feng", "Zan", "Li", "You", "Ding", "Qiu", "Zhuo", "Pei", "Zhou", "Yi", "Hang", "Yu", "Jiu", "Yan", "Zui", "Mao", "Dan", "Xu", "Tou", "Zhen", "Fen", "Sakenomoto", , "Yun", "Tai", "Tian", "Qia", "Tuo", "Zuo", "Han", "Gu", "Su", "Po", "Chou", "Zai", "Ming", "Luo", "Chuo", "Chou", "You", "Tong", "Zhi", "Xian", "Jiang", "Cheng", "Yin", "Tu", "Xiao", "Mei", "Ku", "Suan", "Lei", "Pu", "Zui", "Hai", "Yan", "Xi", "Niang", "Wei", "Lu", "Lan", "Yan", "Tao", "Pei", "Zhan", "Chun", "Tan", "Zui", "Chuo", "Cu", "Kun", "Ti", "Mian", "Du", "Hu", "Xu", "Xing", "Tan", "Jiu", "Chun", "Yun", "Po", "Ke", "Sou", "Mi", "Quan", "Chou", "Cuo", "Yun", "Yong", "Ang", "Zha", "Hai", "Tang", "Jiang", "Piao", "Shan", "Yu", "Li", "Zao", "Lao", "Yi", "Jiang", "Pu", "Jiao", "Xi", "Tan", "Po", "Nong", "Yi", "Li", "Ju", "Jiao", "Yi", "Niang", "Ru", "Xun", "Chou", "Yan", "Ling", "Mi", "Mi", "Niang", "Xin", "Jiao", "Xi", "Mi", "Yan", "Bian", "Cai", "Shi", "You", "Shi", "Shi", "Li", "Chong", "Ye", "Liang", "Li", "Jin", "Jin", "Qiu", "Yi", "Diao", "Dao", "Zhao", "Ding", "Po", "Qiu", "He", "Fu", "Zhen", "Zhi", "Ba", "Luan", "Fu", "Nai", "Diao", "Shan", "Qiao", "Kou", "Chuan", "Zi", "Fan", "Yu", "Hua", "Han", "Gong", "Qi", "Mang", "Ri", "Di", "Si", "Xi", "Yi", "Chai", "Shi", "Tu", "Xi", "Nu", "Qian", "Ishiyumi", "Jian", "Pi", "Ye", "Yin"], ["Ba", "Fang", "Chen", "Xing", "Tou", "Yue", "Yan", "Fu", "Pi", "Na", "Xin", "E", "Jue", "Dun", "Gou", "Yin", "Qian", "Ban", "Ji", "Ren", "Chao", "Niu", "Fen", "Yun", "Ji", "Qin", "Pi", "Guo", "Hong", "Yin", "Jun", "Shi", "Yi", "Zhong", "Nie", "Gai", "Ri", "Huo", "Tai", "Kang", "Habaki", "Irori", "Ngaak", , "Duo", "Zi", "Ni", "Tu", "Shi", "Min", "Gu", "E", "Ling", "Bing", "Yi", "Gu", "Ba", "Pi", "Yu", "Si", "Zuo", "Bu", "You", "Dian", "Jia", "Zhen", "Shi", "Shi", "Tie", "Ju", "Zhan", "Shi", "She", "Xuan", "Zhao", "Bao", "He", "Bi", "Sheng", "Chu", "Shi", "Bo", "Zhu", "Chi", "Za", "Po", "Tong", "Qian", "Fu", "Zhai", "Liu", "Qian", "Fu", "Li", "Yue", "Pi", "Yang", "Ban", "Bo", "Jie", "Gou", "Shu", "Zheng", "Mu", "Ni", "Nie", "Di", "Jia", "Mu", "Dan", "Shen", "Yi", "Si", "Kuang", "Ka", "Bei", "Jian", "Tong", "Xing", "Hong", "Jiao", "Chi", "Er", "Ge", "Bing", "Shi", "Mou", "Jia", "Yin", "Jun", "Zhou", "Chong", "Shang", "Tong", "Mo", "Lei", "Ji", "Yu", "Xu", "Ren", "Zun", "Zhi", "Qiong", "Shan", "Chi", "Xian", "Xing", "Quan", "Pi", "Tie", "Zhu", "Hou", "Ming", "Kua", "Yao", "Xian", "Xian", "Xiu", "Jun", "Cha", "Lao", "Ji", "Pi", "Ru", "Mi", "Yi", "Yin", "Guang", "An", "Diou", "You", "Se", "Kao", "Qian", "Luan", "Kasugai", "Ai", "Diao", "Han", "Rui", "Shi", "Keng", "Qiu", "Xiao", "Zhe", "Xiu", "Zang", "Ti", "Cuo", "Gua", "Gong", "Zhong", "Dou", "Lu", "Mei", "Lang", "Wan", "Xin", "Yun", "Bei", "Wu", "Su", "Yu", "Chan", "Ting", "Bo", "Han", "Jia", "Hong", "Cuan", "Feng", "Chan", "Wan", "Zhi", "Si", "Xuan", "Wu", "Wu", "Tiao", "Gong", "Zhuo", "Lue", "Xing", "Qian", "Shen", "Han", "Lue", "Xie", "Chu", "Zheng", "Ju", "Xian", "Tie", "Mang", "Pu", "Li", "Pan", "Rui", "Cheng", "Gao", "Li", "Te", "Pyeng", "Zhu", , "Tu", "Liu", "Zui", "Ju", "Chang", "Yuan", "Jian", "Gang", "Diao", "Tao", "Chang"], ["Lun", "Kua", "Ling", "Bei", "Lu", "Li", "Qiang", "Pou", "Juan", "Min", "Zui", "Peng", "An", "Pi", "Xian", "Ya", "Zhui", "Lei", "A", "Kong", "Ta", "Kun", "Du", "Wei", "Chui", "Zi", "Zheng", "Ben", "Nie", "Cong", "Qun", "Tan", "Ding", "Qi", "Qian", "Zhuo", "Qi", "Yu", "Jin", "Guan", "Mao", "Chang", "Tian", "Xi", "Lian", "Tao", "Gu", "Cuo", "Shu", "Zhen", "Lu", "Meng", "Lu", "Hua", "Biao", "Ga", "Lai", "Ken", "Kazari", "Bu", "Nai", "Wan", "Zan", , "De", "Xian", , "Huo", "Liang", , "Men", "Kai", "Ying", "Di", "Lian", "Guo", "Xian", "Du", "Tu", "Wei", "Cong", "Fu", "Rou", "Ji", "E", "Rou", "Chen", "Ti", "Zha", "Hong", "Yang", "Duan", "Xia", "Yu", "Keng", "Xing", "Huang", "Wei", "Fu", "Zhao", "Cha", "Qie", "She", "Hong", "Kui", "Tian", "Mou", "Qiao", "Qiao", "Hou", "Tou", "Cong", "Huan", "Ye", "Min", "Jian", "Duan", "Jian", "Song", "Kui", "Hu", "Xuan", "Duo", "Jie", "Zhen", "Bian", "Zhong", "Zi", "Xiu", "Ye", "Mei", "Pai", "Ai", "Jie", , "Mei", "Chuo", "Ta", "Bang", "Xia", "Lian", "Suo", "Xi", "Liu", "Zu", "Ye", "Nou", "Weng", "Rong", "Tang", "Suo", "Qiang", "Ge", "Shuo", "Chui", "Bo", "Pan", "Sa", "Bi", "Sang", "Gang", "Zi", "Wu", "Ying", "Huang", "Tiao", "Liu", "Kai", "Sun", "Sha", "Sou", "Wan", "Hao", "Zhen", "Zhen", "Luo", "Yi", "Yuan", "Tang", "Nie", "Xi", "Jia", "Ge", "Ma", "Juan", "Kasugai", "Habaki", "Suo", , , , "Na", "Lu", "Suo", "Ou", "Zu", "Tuan", "Xiu", "Guan", "Xuan", "Lian", "Shou", "Ao", "Man", "Mo", "Luo", "Bi", "Wei", "Liu", "Di", "Qiao", "Cong", "Yi", "Lu", "Ao", "Keng", "Qiang", "Cui", "Qi", "Chang", "Tang", "Man", "Yong", "Chan", "Feng", "Jing", "Biao", "Shu", "Lou", "Xiu", "Cong", "Long", "Zan", "Jian", "Cao", "Li", "Xia", "Xi", "Kang", , "Beng", , , "Zheng", "Lu", "Hua", "Ji", "Pu", "Hui", "Qiang", "Po", "Lin", "Suo", "Xiu", "San", "Cheng"], ["Kui", "Si", "Liu", "Nao", "Heng", "Pie", "Sui", "Fan", "Qiao", "Quan", "Yang", "Tang", "Xiang", "Jue", "Jiao", "Zun", "Liao", "Jie", "Lao", "Dui", "Tan", "Zan", "Ji", "Jian", "Zhong", "Deng", "Ya", "Ying", "Dui", "Jue", "Nou", "Ti", "Pu", "Tie", , , "Ding", "Shan", "Kai", "Jian", "Fei", "Sui", "Lu", "Juan", "Hui", "Yu", "Lian", "Zhuo", "Qiao", "Qian", "Zhuo", "Lei", "Bi", "Tie", "Huan", "Ye", "Duo", "Guo", "Dang", "Ju", "Fen", "Da", "Bei", "Yi", "Ai", "Zong", "Xun", "Diao", "Zhu", "Heng", "Zhui", "Ji", "Nie", "Ta", "Huo", "Qing", "Bin", "Ying", "Kui", "Ning", "Xu", "Jian", "Jian", "Yari", "Cha", "Zhi", "Mie", "Li", "Lei", "Ji", "Zuan", "Kuang", "Shang", "Peng", "La", "Du", "Shuo", "Chuo", "Lu", "Biao", "Bao", "Lu", , , "Long", "E", "Lu", "Xin", "Jian", "Lan", "Bo", "Jian", "Yao", "Chan", "Xiang", "Jian", "Xi", "Guan", "Cang", "Nie", "Lei", "Cuan", "Qu", "Pan", "Luo", "Zuan", "Luan", "Zao", "Nie", "Jue", "Tang", "Shu", "Lan", "Jin", "Qiu", "Yi", "Zhen", "Ding", "Zhao", "Po", "Diao", "Tu", "Qian", "Chuan", "Shan", "Ji", "Fan", "Diao", "Men", "Nu", "Xi", "Chai", "Xing", "Gai", "Bu", "Tai", "Ju", "Dun", "Chao", "Zhong", "Na", "Bei", "Gang", "Ban", "Qian", "Yao", "Qin", "Jun", "Wu", "Gou", "Kang", "Fang", "Huo", "Tou", "Niu", "Ba", "Yu", "Qian", "Zheng", "Qian", "Gu", "Bo", "E", "Po", "Bu", "Ba", "Yue", "Zuan", "Mu", "Dan", "Jia", "Dian", "You", "Tie", "Bo", "Ling", "Shuo", "Qian", "Liu", "Bao", "Shi", "Xuan", "She", "Bi", "Ni", "Pi", "Duo", "Xing", "Kao", "Lao", "Er", "Mang", "Ya", "You", "Cheng", "Jia", "Ye", "Nao", "Zhi", "Dang", "Tong", "Lu", "Diao", "Yin", "Kai", "Zha", "Zhu", "Xian", "Ting", "Diu", "Xian", "Hua", "Quan", "Sha", "Jia", "Yao", "Ge", "Ming", "Zheng", "Se", "Jiao", "Yi", "Chan", "Chong", "Tang", "An", "Yin", "Ru", "Zhu", "Lao", "Pu", "Wu", "Lai", "Te", "Lian", "Keng"], ["Xiao", "Suo", "Li", "Zheng", "Chu", "Guo", "Gao", "Tie", "Xiu", "Cuo", "Lue", "Feng", "Xin", "Liu", "Kai", "Jian", "Rui", "Ti", "Lang", "Qian", "Ju", "A", "Qiang", "Duo", "Tian", "Cuo", "Mao", "Ben", "Qi", "De", "Kua", "Kun", "Chang", "Xi", "Gu", "Luo", "Chui", "Zhui", "Jin", "Zhi", "Xian", "Juan", "Huo", "Pou", "Tan", "Ding", "Jian", "Ju", "Meng", "Zi", "Qie", "Ying", "Kai", "Qiang", "Song", "E", "Cha", "Qiao", "Zhong", "Duan", "Sou", "Huang", "Huan", "Ai", "Du", "Mei", "Lou", "Zi", "Fei", "Mei", "Mo", "Zhen", "Bo", "Ge", "Nie", "Tang", "Juan", "Nie", "Na", "Liu", "Hao", "Bang", "Yi", "Jia", "Bin", "Rong", "Biao", "Tang", "Man", "Luo", "Beng", "Yong", "Jing", "Di", "Zu", "Xuan", "Liu", "Tan", "Jue", "Liao", "Pu", "Lu", "Dui", "Lan", "Pu", "Cuan", "Qiang", "Deng", "Huo", "Lei", "Huan", "Zhuo", "Lian", "Yi", "Cha", "Biao", "La", "Chan", "Xiang", "Chang", "Chang", "Jiu", "Ao", "Die", "Qu", "Liao", "Mi", "Chang", "Men", "Ma", "Shuan", "Shan", "Huo", "Men", "Yan", "Bi", "Han", "Bi", "San", "Kai", "Kang", "Beng", "Hong", "Run", "San", "Xian", "Xian", "Jian", "Min", "Xia", "Yuru", "Dou", "Zha", "Nao", "Jian", "Peng", "Xia", "Ling", "Bian", "Bi", "Run", "He", "Guan", "Ge", "Ge", "Fa", "Chu", "Hong", "Gui", "Min", "Se", "Kun", "Lang", "Lu", "Ting", "Sha", "Ju", "Yue", "Yue", "Chan", "Qu", "Lin", "Chang", "Shai", "Kun", "Yan", "Min", "Yan", "E", "Hun", "Yu", "Wen", "Xiang", "Bao", "Xiang", "Qu", "Yao", "Wen", "Ban", "An", "Wei", "Yin", "Kuo", "Que", "Lan", "Du", , "Phwung", "Tian", "Nie", "Ta", "Kai", "He", "Que", "Chuang", "Guan", "Dou", "Qi", "Kui", "Tang", "Guan", "Piao", "Kan", "Xi", "Hui", "Chan", "Pi", "Dang", "Huan", "Ta", "Wen", , "Men", "Shuan", "Shan", "Yan", "Han", "Bi", "Wen", "Chuang", "Run", "Wei", "Xian", "Hong", "Jian", "Min", "Kang", "Men", "Zha", "Nao", "Gui", "Wen", "Ta", "Min", "Lu", "Kai"], ["Fa", "Ge", "He", "Kun", "Jiu", "Yue", "Lang", "Du", "Yu", "Yan", "Chang", "Xi", "Wen", "Hun", "Yan", "E", "Chan", "Lan", "Qu", "Hui", "Kuo", "Que", "Ge", "Tian", "Ta", "Que", "Kan", "Huan", "Fu", "Fu", "Le", "Dui", "Xin", "Qian", "Wu", "Yi", "Tuo", "Yin", "Yang", "Dou", "E", "Sheng", "Ban", "Pei", "Keng", "Yun", "Ruan", "Zhi", "Pi", "Jing", "Fang", "Yang", "Yin", "Zhen", "Jie", "Cheng", "E", "Qu", "Di", "Zu", "Zuo", "Dian", "Ling", "A", "Tuo", "Tuo", "Po", "Bing", "Fu", "Ji", "Lu", "Long", "Chen", "Xing", "Duo", "Lou", "Mo", "Jiang", "Shu", "Duo", "Xian", "Er", "Gui", "Yu", "Gai", "Shan", "Xun", "Qiao", "Xing", "Chun", "Fu", "Bi", "Xia", "Shan", "Sheng", "Zhi", "Pu", "Dou", "Yuan", "Zhen", "Chu", "Xian", "Tou", "Nie", "Yun", "Xian", "Pei", "Pei", "Zou", "Yi", "Dui", "Lun", "Yin", "Ju", "Chui", "Chen", "Pi", "Ling", "Tao", "Xian", "Lu", "Sheng", "Xian", "Yin", "Zhu", "Yang", "Reng", "Shan", "Chong", "Yan", "Yin", "Yu", "Ti", "Yu", "Long", "Wei", "Wei", "Nie", "Dui", "Sui", "An", "Huang", "Jie", "Sui", "Yin", "Gai", "Yan", "Hui", "Ge", "Yun", "Wu", "Wei", "Ai", "Xi", "Tang", "Ji", "Zhang", "Dao", "Ao", "Xi", "Yin", , "Rao", "Lin", "Tui", "Deng", "Pi", "Sui", "Sui", "Yu", "Xian", "Fen", "Ni", "Er", "Ji", "Dao", "Xi", "Yin", "E", "Hui", "Long", "Xi", "Li", "Li", "Li", "Zhui", "He", "Zhi", "Zhun", "Jun", "Nan", "Yi", "Que", "Yan", "Qian", "Ya", "Xiong", "Ya", "Ji", "Gu", "Huan", "Zhi", "Gou", "Jun", "Ci", "Yong", "Ju", "Chu", "Hu", "Za", "Luo", "Yu", "Chou", "Diao", "Sui", "Han", "Huo", "Shuang", "Guan", "Chu", "Za", "Yong", "Ji", "Xi", "Chou", "Liu", "Li", "Nan", "Xue", "Za", "Ji", "Ji", "Yu", "Yu", "Xue", "Na", "Fou", "Se", "Mu", "Wen", "Fen", "Pang", "Yun", "Li", "Li", "Ang", "Ling", "Lei", "An", "Bao", "Meng", "Dian", "Dang", "Xing", "Wu", "Zhao"], ["Xu", "Ji", "Mu", "Chen", "Xiao", "Zha", "Ting", "Zhen", "Pei", "Mei", "Ling", "Qi", "Chou", "Huo", "Sha", "Fei", "Weng", "Zhan", "Yin", "Ni", "Chou", "Tun", "Lin", , "Dong", "Ying", "Wu", "Ling", "Shuang", "Ling", "Xia", "Hong", "Yin", "Mo", "Mai", "Yun", "Liu", "Meng", "Bin", "Wu", "Wei", "Huo", "Yin", "Xi", "Yi", "Ai", "Dan", "Deng", "Xian", "Yu", "Lu", "Long", "Dai", "Ji", "Pang", "Yang", "Ba", "Pi", "Wei", , "Xi", "Ji", "Mai", "Meng", "Meng", "Lei", "Li", "Huo", "Ai", "Fei", "Dai", "Long", "Ling", "Ai", "Feng", "Li", "Bao", , "He", "He", "Bing", "Qing", "Qing", "Jing", "Tian", "Zhen", "Jing", "Cheng", "Qing", "Jing", "Jing", "Dian", "Jing", "Tian", "Fei", "Fei", "Kao", "Mi", "Mian", "Mian", "Pao", "Ye", "Tian", "Hui", "Ye", "Ge", "Ding", "Cha", "Jian", "Ren", "Di", "Du", "Wu", "Ren", "Qin", "Jin", "Xue", "Niu", "Ba", "Yin", "Sa", "Na", "Mo", "Zu", "Da", "Ban", "Yi", "Yao", "Tao", "Tuo", "Jia", "Hong", "Pao", "Yang", "Tomo", "Yin", "Jia", "Tao", "Ji", "Xie", "An", "An", "Hen", "Gong", "Kohaze", "Da", "Qiao", "Ting", "Wan", "Ying", "Sui", "Tiao", "Qiao", "Xuan", "Kong", "Beng", "Ta", "Zhang", "Bing", "Kuo", "Ju", "La", "Xie", "Rou", "Bang", "Yi", "Qiu", "Qiu", "He", "Xiao", "Mu", "Ju", "Jian", "Bian", "Di", "Jian", "On", "Tao", "Gou", "Ta", "Bei", "Xie", "Pan", "Ge", "Bi", "Kuo", "Tang", "Lou", "Gui", "Qiao", "Xue", "Ji", "Jian", "Jiang", "Chan", "Da", "Huo", "Xian", "Qian", "Du", "Wa", "Jian", "Lan", "Wei", "Ren", "Fu", "Mei", "Juan", "Ge", "Wei", "Qiao", "Han", "Chang", , "Rou", "Xun", "She", "Wei", "Ge", "Bei", "Tao", "Gou", "Yun", , "Bi", "Wei", "Hui", "Du", "Wa", "Du", "Wei", "Ren", "Fu", "Han", "Wei", "Yun", "Tao", "Jiu", "Jiu", "Xian", "Xie", "Xian", "Ji", "Yin", "Za", "Yun", "Shao", "Le", "Peng", "Heng", "Ying", "Yun", "Peng", "Yin", "Yin", "Xiang"], ["Hu", "Ye", "Ding", "Qing", "Pan", "Xiang", "Shun", "Han", "Xu", "Yi", "Xu", "Gu", "Song", "Kui", "Qi", "Hang", "Yu", "Wan", "Ban", "Dun", "Di", "Dan", "Pan", "Po", "Ling", "Ce", "Jing", "Lei", "He", "Qiao", "E", "E", "Wei", "Jie", "Gua", "Shen", "Yi", "Shen", "Hai", "Dui", "Pian", "Ping", "Lei", "Fu", "Jia", "Tou", "Hui", "Kui", "Jia", "Le", "Tian", "Cheng", "Ying", "Jun", "Hu", "Han", "Jing", "Tui", "Tui", "Pin", "Lai", "Tui", "Zi", "Zi", "Chui", "Ding", "Lai", "Yan", "Han", "Jian", "Ke", "Cui", "Jiong", "Qin", "Yi", "Sai", "Ti", "E", "E", "Yan", "Hun", "Kan", "Yong", "Zhuan", "Yan", "Xian", "Xin", "Yi", "Yuan", "Sang", "Dian", "Dian", "Jiang", "Ku", "Lei", "Liao", "Piao", "Yi", "Man", "Qi", "Rao", "Hao", "Qiao", "Gu", "Xun", "Qian", "Hui", "Zhan", "Ru", "Hong", "Bin", "Xian", "Pin", "Lu", "Lan", "Nie", "Quan", "Ye", "Ding", "Qing", "Han", "Xiang", "Shun", "Xu", "Xu", "Wan", "Gu", "Dun", "Qi", "Ban", "Song", "Hang", "Yu", "Lu", "Ling", "Po", "Jing", "Jie", "Jia", "Tian", "Han", "Ying", "Jiong", "Hai", "Yi", "Pin", "Hui", "Tui", "Han", "Ying", "Ying", "Ke", "Ti", "Yong", "E", "Zhuan", "Yan", "E", "Nie", "Man", "Dian", "Sang", "Hao", "Lei", "Zhan", "Ru", "Pin", "Quan", "Feng", "Biao", "Oroshi", "Fu", "Xia", "Zhan", "Biao", "Sa", "Ba", "Tai", "Lie", "Gua", "Xuan", "Shao", "Ju", "Bi", "Si", "Wei", "Yang", "Yao", "Sou", "Kai", "Sao", "Fan", "Liu", "Xi", "Liao", "Piao", "Piao", "Liu", "Biao", "Biao", "Biao", "Liao", , "Se", "Feng", "Biao", "Feng", "Yang", "Zhan", "Biao", "Sa", "Ju", "Si", "Sou", "Yao", "Liu", "Piao", "Biao", "Biao", "Fei", "Fan", "Fei", "Fei", "Shi", "Shi", "Can", "Ji", "Ding", "Si", "Tuo", "Zhan", "Sun", "Xiang", "Tun", "Ren", "Yu", "Juan", "Chi", "Yin", "Fan", "Fan", "Sun", "Yin", "Zhu", "Yi", "Zhai", "Bi", "Jie", "Tao", "Liu", "Ci", "Tie", "Si", "Bao", "Shi", "Duo"], ["Hai", "Ren", "Tian", "Jiao", "Jia", "Bing", "Yao", "Tong", "Ci", "Xiang", "Yang", "Yang", "Er", "Yan", "Le", "Yi", "Can", "Bo", "Nei", "E", "Bu", "Jun", "Dou", "Su", "Yu", "Shi", "Yao", "Hun", "Guo", "Shi", "Jian", "Zhui", "Bing", "Xian", "Bu", "Ye", "Tan", "Fei", "Zhang", "Wei", "Guan", "E", "Nuan", "Hun", "Hu", "Huang", "Tie", "Hui", "Jian", "Hou", "He", "Xing", "Fen", "Wei", "Gu", "Cha", "Song", "Tang", "Bo", "Gao", "Xi", "Kui", "Liu", "Sou", "Tao", "Ye", "Yun", "Mo", "Tang", "Man", "Bi", "Yu", "Xiu", "Jin", "San", "Kui", "Zhuan", "Shan", "Chi", "Dan", "Yi", "Ji", "Rao", "Cheng", "Yong", "Tao", "Hui", "Xiang", "Zhan", "Fen", "Hai", "Meng", "Yan", "Mo", "Chan", "Xiang", "Luo", "Zuan", "Nang", "Shi", "Ding", "Ji", "Tuo", "Xing", "Tun", "Xi", "Ren", "Yu", "Chi", "Fan", "Yin", "Jian", "Shi", "Bao", "Si", "Duo", "Yi", "Er", "Rao", "Xiang", "Jia", "Le", "Jiao", "Yi", "Bing", "Bo", "Dou", "E", "Yu", "Nei", "Jun", "Guo", "Hun", "Xian", "Guan", "Cha", "Kui", "Gu", "Sou", "Chan", "Ye", "Mo", "Bo", "Liu", "Xiu", "Jin", "Man", "San", "Zhuan", "Nang", "Shou", "Kui", "Guo", "Xiang", "Fen", "Ba", "Ni", "Bi", "Bo", "Tu", "Han", "Fei", "Jian", "An", "Ai", "Fu", "Xian", "Wen", "Xin", "Fen", "Bin", "Xing", "Ma", "Yu", "Feng", "Han", "Di", "Tuo", "Tuo", "Chi", "Xun", "Zhu", "Zhi", "Pei", "Xin", "Ri", "Sa", "Yin", "Wen", "Zhi", "Dan", "Lu", "You", "Bo", "Bao", "Kuai", "Tuo", "Yi", "Qu", , "Qu", "Jiong", "Bo", "Zhao", "Yuan", "Peng", "Zhou", "Ju", "Zhu", "Nu", "Ju", "Pi", "Zang", "Jia", "Ling", "Zhen", "Tai", "Fu", "Yang", "Shi", "Bi", "Tuo", "Tuo", "Si", "Liu", "Ma", "Pian", "Tao", "Zhi", "Rong", "Teng", "Dong", "Xun", "Quan", "Shen", "Jiong", "Er", "Hai", "Bo", "Zhu", "Yin", "Luo", "Shuu", "Dan", "Xie", "Liu", "Ju", "Song", "Qin", "Mang", "Liang", "Han", "Tu", "Xuan", "Tui", "Jun"], ["E", "Cheng", "Xin", "Ai", "Lu", "Zhui", "Zhou", "She", "Pian", "Kun", "Tao", "Lai", "Zong", "Ke", "Qi", "Qi", "Yan", "Fei", "Sao", "Yan", "Jie", "Yao", "Wu", "Pian", "Cong", "Pian", "Qian", "Fei", "Huang", "Jian", "Huo", "Yu", "Ti", "Quan", "Xia", "Zong", "Kui", "Rou", "Si", "Gua", "Tuo", "Kui", "Sou", "Qian", "Cheng", "Zhi", "Liu", "Pang", "Teng", "Xi", "Cao", "Du", "Yan", "Yuan", "Zou", "Sao", "Shan", "Li", "Zhi", "Shuang", "Lu", "Xi", "Luo", "Zhang", "Mo", "Ao", "Can", "Piao", "Cong", "Qu", "Bi", "Zhi", "Yu", "Xu", "Hua", "Bo", "Su", "Xiao", "Lin", "Chan", "Dun", "Liu", "Tuo", "Zeng", "Tan", "Jiao", "Tie", "Yan", "Luo", "Zhan", "Jing", "Yi", "Ye", "Tuo", "Bin", "Zou", "Yan", "Peng", "Lu", "Teng", "Xiang", "Ji", "Shuang", "Ju", "Xi", "Huan", "Li", "Biao", "Ma", "Yu", "Tuo", "Xun", "Chi", "Qu", "Ri", "Bo", "Lu", "Zang", "Shi", "Si", "Fu", "Ju", "Zou", "Zhu", "Tuo", "Nu", "Jia", "Yi", "Tai", "Xiao", "Ma", "Yin", "Jiao", "Hua", "Luo", "Hai", "Pian", "Biao", "Li", "Cheng", "Yan", "Xin", "Qin", "Jun", "Qi", "Qi", "Ke", "Zhui", "Zong", "Su", "Can", "Pian", "Zhi", "Kui", "Sao", "Wu", "Ao", "Liu", "Qian", "Shan", "Piao", "Luo", "Cong", "Chan", "Zou", "Ji", "Shuang", "Xiang", "Gu", "Wei", "Wei", "Wei", "Yu", "Gan", "Yi", "Ang", "Tou", "Xie", "Bao", "Bi", "Chi", "Ti", "Di", "Ku", "Hai", "Qiao", "Gou", "Kua", "Ge", "Tui", "Geng", "Pian", "Bi", "Ke", "Ka", "Yu", "Sui", "Lou", "Bo", "Xiao", "Pang", "Bo", "Ci", "Kuan", "Bin", "Mo", "Liao", "Lou", "Nao", "Du", "Zang", "Sui", "Ti", "Bin", "Kuan", "Lu", "Gao", "Gao", "Qiao", "Kao", "Qiao", "Lao", "Zao", "Biao", "Kun", "Kun", "Ti", "Fang", "Xiu", "Ran", "Mao", "Dan", "Kun", "Bin", "Fa", "Tiao", "Peng", "Zi", "Fa", "Ran", "Ti", "Pao", "Pi", "Mao", "Fu", "Er", "Rong", "Qu", "Gong", "Xiu", "Gua", "Ji", "Peng", "Zhua", "Shao", "Sha"], ["Ti", "Li", "Bin", "Zong", "Ti", "Peng", "Song", "Zheng", "Quan", "Zong", "Shun", "Jian", "Duo", "Hu", "La", "Jiu", "Qi", "Lian", "Zhen", "Bin", "Peng", "Mo", "San", "Man", "Man", "Seng", "Xu", "Lie", "Qian", "Qian", "Nong", "Huan", "Kuai", "Ning", "Bin", "Lie", "Rang", "Dou", "Dou", "Nao", "Hong", "Xi", "Dou", "Han", "Dou", "Dou", "Jiu", "Chang", "Yu", "Yu", "Li", "Juan", "Fu", "Qian", "Gui", "Zong", "Liu", "Gui", "Shang", "Yu", "Gui", "Mei", "Ji", "Qi", "Jie", "Kui", "Hun", "Ba", "Po", "Mei", "Xu", "Yan", "Xiao", "Liang", "Yu", "Tui", "Qi", "Wang", "Liang", "Wei", "Jian", "Chi", "Piao", "Bi", "Mo", "Ji", "Xu", "Chou", "Yan", "Zhan", "Yu", "Dao", "Ren", "Ji", "Eri", "Gong", "Tuo", "Diao", "Ji", "Xu", "E", "E", "Sha", "Hang", "Tun", "Mo", "Jie", "Shen", "Fan", "Yuan", "Bi", "Lu", "Wen", "Hu", "Lu", "Za", "Fang", "Fen", "Na", "You", "Namazu", "Todo", "He", "Xia", "Qu", "Han", "Pi", "Ling", "Tuo", "Bo", "Qiu", "Ping", "Fu", "Bi", "Ji", "Wei", "Ju", "Diao", "Bo", "You", "Gun", "Pi", "Nian", "Xing", "Tai", "Bao", "Fu", "Zha", "Ju", "Gu", "Kajika", "Tong", , "Ta", "Jie", "Shu", "Hou", "Xiang", "Er", "An", "Wei", "Tiao", "Zhu", "Yin", "Lie", "Luo", "Tong", "Yi", "Qi", "Bing", "Wei", "Jiao", "Bu", "Gui", "Xian", "Ge", "Hui", "Bora", "Mate", "Kao", "Gori", "Duo", "Jun", "Ti", "Man", "Xiao", "Za", "Sha", "Qin", "Yu", "Nei", "Zhe", "Gun", "Geng", "Su", "Wu", "Qiu", "Ting", "Fu", "Wan", "You", "Li", "Sha", "Sha", "Gao", "Meng", "Ugui", "Asari", "Subashiri", "Kazunoko", "Yong", "Ni", "Zi", "Qi", "Qing", "Xiang", "Nei", "Chun", "Ji", "Diao", "Qie", "Gu", "Zhou", "Dong", "Lai", "Fei", "Ni", "Yi", "Kun", "Lu", "Jiu", "Chang", "Jing", "Lun", "Ling", "Zou", "Li", "Meng", "Zong", "Zhi", "Nian", "Shachi", "Dojou", "Sukesou", "Shi", "Shen", "Hun", "Shi", "Hou", "Xing", "Zhu", "La", "Zong", "Ji", "Bian", "Bian"], ["Huan", "Quan", "Ze", "Wei", "Wei", "Yu", "Qun", "Rou", "Die", "Huang", "Lian", "Yan", "Qiu", "Qiu", "Jian", "Bi", "E", "Yang", "Fu", "Sai", "Jian", "Xia", "Tuo", "Hu", "Muroaji", "Ruo", "Haraka", "Wen", "Jian", "Hao", "Wu", "Fang", "Sao", "Liu", "Ma", "Shi", "Shi", "Yin", "Z", "Teng", "Ta", "Yao", "Ge", "Rong", "Qian", "Qi", "Wen", "Ruo", "Hatahata", "Lian", "Ao", "Le", "Hui", "Min", "Ji", "Tiao", "Qu", "Jian", "Sao", "Man", "Xi", "Qiu", "Biao", "Ji", "Ji", "Zhu", "Jiang", "Qiu", "Zhuan", "Yong", "Zhang", "Kang", "Xue", "Bie", "Jue", "Qu", "Xiang", "Bo", "Jiao", "Xun", "Su", "Huang", "Zun", "Shan", "Shan", "Fan", "Jue", "Lin", "Xun", "Miao", "Xi", "Eso", "Kyou", "Fen", "Guan", "Hou", "Kuai", "Zei", "Sao", "Zhan", "Gan", "Gui", "Sheng", "Li", "Chang", "Hatahata", "Shiira", "Mutsu", "Ru", "Ji", "Xu", "Huo", "Shiira", "Li", "Lie", "Li", "Mie", "Zhen", "Xiang", "E", "Lu", "Guan", "Li", "Xian", "Yu", "Dao", "Ji", "You", "Tun", "Lu", "Fang", "Ba", "He", "Bo", "Ping", "Nian", "Lu", "You", "Zha", "Fu", "Bo", "Bao", "Hou", "Pi", "Tai", "Gui", "Jie", "Kao", "Wei", "Er", "Tong", "Ze", "Hou", "Kuai", "Ji", "Jiao", "Xian", "Za", "Xiang", "Xun", "Geng", "Li", "Lian", "Jian", "Li", "Shi", "Tiao", "Gun", "Sha", "Wan", "Jun", "Ji", "Yong", "Qing", "Ling", "Qi", "Zou", "Fei", "Kun", "Chang", "Gu", "Ni", "Nian", "Diao", "Jing", "Shen", "Shi", "Zi", "Fen", "Die", "Bi", "Chang", "Shi", "Wen", "Wei", "Sai", "E", "Qiu", "Fu", "Huang", "Quan", "Jiang", "Bian", "Sao", "Ao", "Qi", "Ta", "Yin", "Yao", "Fang", "Jian", "Le", "Biao", "Xue", "Bie", "Man", "Min", "Yong", "Wei", "Xi", "Jue", "Shan", "Lin", "Zun", "Huo", "Gan", "Li", "Zhan", "Guan", "Niao", "Yi", "Fu", "Li", "Jiu", "Bu", "Yan", "Fu", "Diao", "Ji", "Feng", "Nio", "Gan", "Shi", "Feng", "Ming", "Bao", "Yuan", "Zhi", "Hu", "Qin", "Fu", "Fen", "Wen", "Jian", "Shi", "Yu"], ["Fou", "Yiao", "Jue", "Jue", "Pi", "Huan", "Zhen", "Bao", "Yan", "Ya", "Zheng", "Fang", "Feng", "Wen", "Ou", "Te", "Jia", "Nu", "Ling", "Mie", "Fu", "Tuo", "Wen", "Li", "Bian", "Zhi", "Ge", "Yuan", "Zi", "Qu", "Xiao", "Zhi", "Dan", "Ju", "You", "Gu", "Zhong", "Yu", "Yang", "Rong", "Ya", "Tie", "Yu", "Shigi", "Ying", "Zhui", "Wu", "Er", "Gua", "Ai", "Zhi", "Yan", "Heng", "Jiao", "Ji", "Lie", "Zhu", "Ren", "Yi", "Hong", "Luo", "Ru", "Mou", "Ge", "Ren", "Jiao", "Xiu", "Zhou", "Zhi", "Luo", "Chidori", "Toki", "Ten", "Luan", "Jia", "Ji", "Yu", "Huan", "Tuo", "Bu", "Wu", "Juan", "Yu", "Bo", "Xun", "Xun", "Bi", "Xi", "Jun", "Ju", "Tu", "Jing", "Ti", "E", "E", "Kuang", "Hu", "Wu", "Shen", "Lai", "Ikaruga", "Kakesu", "Lu", "Ping", "Shu", "Fu", "An", "Zhao", "Peng", "Qin", "Qian", "Bei", "Diao", "Lu", "Que", "Jian", "Ju", "Tu", "Ya", "Yuan", "Qi", "Li", "Ye", "Zhui", "Kong", "Zhui", "Kun", "Sheng", "Qi", "Jing", "Yi", "Yi", "Jing", "Zi", "Lai", "Dong", "Qi", "Chun", "Geng", "Ju", "Qu", "Isuka", "Kikuitadaki", "Ji", "Shu", , "Chi", "Miao", "Rou", "An", "Qiu", "Ti", "Hu", "Ti", "E", "Jie", "Mao", "Fu", "Chun", "Tu", "Yan", "He", "Yuan", "Pian", "Yun", "Mei", "Hu", "Ying", "Dun", "Mu", "Ju", "Tsugumi", "Cang", "Fang", "Gu", "Ying", "Yuan", "Xuan", "Weng", "Shi", "He", "Chu", "Tang", "Xia", "Ruo", "Liu", "Ji", "Gu", "Jian", "Zhun", "Han", "Zi", "Zi", "Ni", "Yao", "Yan", "Ji", "Li", "Tian", "Kou", "Ti", "Ti", "Ni", "Tu", "Ma", "Jiao", "Gao", "Tian", "Chen", "Li", "Zhuan", "Zhe", "Ao", "Yao", "Yi", "Ou", "Chi", "Zhi", "Liao", "Rong", "Lou", "Bi", "Shuang", "Zhuo", "Yu", "Wu", "Jue", "Yin", "Quan", "Si", "Jiao", "Yi", "Hua", "Bi", "Ying", "Su", "Huang", "Fan", "Jiao", "Liao", "Yan", "Kao", "Jiu", "Xian", "Xian", "Tu", "Mai", "Zun", "Yu", "Ying", "Lu", "Tuan", "Xian", "Xue", "Yi", "Pi"], ["Shu", "Luo", "Qi", "Yi", "Ji", "Zhe", "Yu", "Zhan", "Ye", "Yang", "Pi", "Ning", "Huo", "Mi", "Ying", "Meng", "Di", "Yue", "Yu", "Lei", "Bao", "Lu", "He", "Long", "Shuang", "Yue", "Ying", "Guan", "Qu", "Li", "Luan", "Niao", "Jiu", "Ji", "Yuan", "Ming", "Shi", "Ou", "Ya", "Cang", "Bao", "Zhen", "Gu", "Dong", "Lu", "Ya", "Xiao", "Yang", "Ling", "Zhi", "Qu", "Yuan", "Xue", "Tuo", "Si", "Zhi", "Er", "Gua", "Xiu", "Heng", "Zhou", "Ge", "Luan", "Hong", "Wu", "Bo", "Li", "Juan", "Hu", "E", "Yu", "Xian", "Ti", "Wu", "Que", "Miao", "An", "Kun", "Bei", "Peng", "Qian", "Chun", "Geng", "Yuan", "Su", "Hu", "He", "E", "Gu", "Qiu", "Zi", "Mei", "Mu", "Ni", "Yao", "Weng", "Liu", "Ji", "Ni", "Jian", "He", "Yi", "Ying", "Zhe", "Liao", "Liao", "Jiao", "Jiu", "Yu", "Lu", "Xuan", "Zhan", "Ying", "Huo", "Meng", "Guan", "Shuang", "Lu", "Jin", "Ling", "Jian", "Xian", "Cuo", "Jian", "Jian", "Yan", "Cuo", "Lu", "You", "Cu", "Ji", "Biao", "Cu", "Biao", "Zhu", "Jun", "Zhu", "Jian", "Mi", "Mi", "Wu", "Liu", "Chen", "Jun", "Lin", "Ni", "Qi", "Lu", "Jiu", "Jun", "Jing", "Li", "Xiang", "Yan", "Jia", "Mi", "Li", "She", "Zhang", "Lin", "Jing", "Ji", "Ling", "Yan", "Cu", "Mai", "Mai", "Ge", "Chao", "Fu", "Mian", "Mian", "Fu", "Pao", "Qu", "Qu", "Mou", "Fu", "Xian", "Lai", "Qu", "Mian", , "Feng", "Fu", "Qu", "Mian", "Ma", "Mo", "Mo", "Hui", "Ma", "Zou", "Nen", "Fen", "Huang", "Huang", "Jin", "Guang", "Tian", "Tou", "Heng", "Xi", "Kuang", "Heng", "Shu", "Li", "Nian", "Chi", "Hei", "Hei", "Yi", "Qian", "Dan", "Xi", "Tuan", "Mo", "Mo", "Qian", "Dai", "Chu", "You", "Dian", "Yi", "Xia", "Yan", "Qu", "Mei", "Yan", "Jing", "Yu", "Li", "Dang", "Du", "Can", "Yin", "An", "Yan", "Tan", "An", "Zhen", "Dai", "Can", "Yi", "Mei", "Dan", "Yan", "Du", "Lu", "Zhi", "Fen", "Fu", "Fu", "Min", "Min", "Yuan"], ["Cu", "Qu", "Chao", "Wa", "Zhu", "Zhi", "Mang", "Ao", "Bie", "Tuo", "Bi", "Yuan", "Chao", "Tuo", "Ding", "Mi", "Nai", "Ding", "Zi", "Gu", "Gu", "Dong", "Fen", "Tao", "Yuan", "Pi", "Chang", "Gao", "Qi", "Yuan", "Tang", "Teng", "Shu", "Shu", "Fen", "Fei", "Wen", "Ba", "Diao", "Tuo", "Tong", "Qu", "Sheng", "Shi", "You", "Shi", "Ting", "Wu", "Nian", "Jing", "Hun", "Ju", "Yan", "Tu", "Ti", "Xi", "Xian", "Yan", "Lei", "Bi", "Yao", "Qiu", "Han", "Wu", "Wu", "Hou", "Xi", "Ge", "Zha", "Xiu", "Weng", "Zha", "Nong", "Nang", "Qi", "Zhai", "Ji", "Zi", "Ji", "Ji", "Qi", "Ji", "Chi", "Chen", "Chen", "He", "Ya", "Ken", "Xie", "Pao", "Cuo", "Shi", "Zi", "Chi", "Nian", "Ju", "Tiao", "Ling", "Ling", "Chu", "Quan", "Xie", "Ken", "Nie", "Jiu", "Yao", "Chuo", "Kun", "Yu", "Chu", "Yi", "Ni", "Cuo", "Zou", "Qu", "Nen", "Xian", "Ou", "E", "Wo", "Yi", "Chuo", "Zou", "Dian", "Chu", "Jin", "Ya", "Chi", "Chen", "He", "Ken", "Ju", "Ling", "Pao", "Tiao", "Zi", "Ken", "Yu", "Chuo", "Qu", "Wo", "Long", "Pang", "Gong", "Pang", "Yan", "Long", "Long", "Gong", "Kan", "Ta", "Ling", "Ta", "Long", "Gong", "Kan", "Gui", "Qiu", "Bie", "Gui", "Yue", "Chui", "He", "Jue", "Xie", "Yu"], ["it", "ix", "i", "ip", "iet", "iex", "ie", "iep", "at", "ax", "a", "ap", "uox", "uo", "uop", "ot", "ox", "o", "op", "ex", "e", "wu", "bit", "bix", "bi", "bip", "biet", "biex", "bie", "biep", "bat", "bax", "ba", "bap", "buox", "buo", "buop", "bot", "box", "bo", "bop", "bex", "be", "bep", "but", "bux", "bu", "bup", "burx", "bur", "byt", "byx", "by", "byp", "byrx", "byr", "pit", "pix", "pi", "pip", "piex", "pie", "piep", "pat", "pax", "pa", "pap", "puox", "puo", "puop", "pot", "pox", "po", "pop", "put", "pux", "pu", "pup", "purx", "pur", "pyt", "pyx", "py", "pyp", "pyrx", "pyr", "bbit", "bbix", "bbi", "bbip", "bbiet", "bbiex", "bbie", "bbiep", "bbat", "bbax", "bba", "bbap", "bbuox", "bbuo", "bbuop", "bbot", "bbox", "bbo", "bbop", "bbex", "bbe", "bbep", "bbut", "bbux", "bbu", "bbup", "bburx", "bbur", "bbyt", "bbyx", "bby", "bbyp", "nbit", "nbix", "nbi", "nbip", "nbiex", "nbie", "nbiep", "nbat", "nbax", "nba", "nbap", "nbot", "nbox", "nbo", "nbop", "nbut", "nbux", "nbu", "nbup", "nburx", "nbur", "nbyt", "nbyx", "nby", "nbyp", "nbyrx", "nbyr", "hmit", "hmix", "hmi", "hmip", "hmiex", "hmie", "hmiep", "hmat", "hmax", "hma", "hmap", "hmuox", "hmuo", "hmuop", "hmot", "hmox", "hmo", "hmop", "hmut", "hmux", "hmu", "hmup", "hmurx", "hmur", "hmyx", "hmy", "hmyp", "hmyrx", "hmyr", "mit", "mix", "mi", "mip", "miex", "mie", "miep", "mat", "max", "ma", "map", "muot", "muox", "muo", "muop", "mot", "mox", "mo", "mop", "mex", "me", "mut", "mux", "mu", "mup", "murx", "mur", "myt", "myx", "my", "myp", "fit", "fix", "fi", "fip", "fat", "fax", "fa", "fap", "fox", "fo", "fop", "fut", "fux", "fu", "fup", "furx", "fur", "fyt", "fyx", "fy", "fyp", "vit", "vix", "vi", "vip", "viet", "viex", "vie", "viep", "vat", "vax", "va", "vap", "vot", "vox", "vo", "vop", "vex", "vep", "vut", "vux", "vu", "vup", "vurx", "vur", "vyt", "vyx", "vy", "vyp", "vyrx", "vyr"], ["dit", "dix", "di", "dip", "diex", "die", "diep", "dat", "dax", "da", "dap", "duox", "duo", "dot", "dox", "do", "dop", "dex", "de", "dep", "dut", "dux", "du", "dup", "durx", "dur", "tit", "tix", "ti", "tip", "tiex", "tie", "tiep", "tat", "tax", "ta", "tap", "tuot", "tuox", "tuo", "tuop", "tot", "tox", "to", "top", "tex", "te", "tep", "tut", "tux", "tu", "tup", "turx", "tur", "ddit", "ddix", "ddi", "ddip", "ddiex", "ddie", "ddiep", "ddat", "ddax", "dda", "ddap", "dduox", "dduo", "dduop", "ddot", "ddox", "ddo", "ddop", "ddex", "dde", "ddep", "ddut", "ddux", "ddu", "ddup", "ddurx", "ddur", "ndit", "ndix", "ndi", "ndip", "ndiex", "ndie", "ndat", "ndax", "nda", "ndap", "ndot", "ndox", "ndo", "ndop", "ndex", "nde", "ndep", "ndut", "ndux", "ndu", "ndup", "ndurx", "ndur", "hnit", "hnix", "hni", "hnip", "hniet", "hniex", "hnie", "hniep", "hnat", "hnax", "hna", "hnap", "hnuox", "hnuo", "hnot", "hnox", "hnop", "hnex", "hne", "hnep", "hnut", "nit", "nix", "ni", "nip", "niex", "nie", "niep", "nax", "na", "nap", "nuox", "nuo", "nuop", "not", "nox", "no", "nop", "nex", "ne", "nep", "nut", "nux", "nu", "nup", "nurx", "nur", "hlit", "hlix", "hli", "hlip", "hliex", "hlie", "hliep", "hlat", "hlax", "hla", "hlap", "hluox", "hluo", "hluop", "hlox", "hlo", "hlop", "hlex", "hle", "hlep", "hlut", "hlux", "hlu", "hlup", "hlurx", "hlur", "hlyt", "hlyx", "hly", "hlyp", "hlyrx", "hlyr", "lit", "lix", "li", "lip", "liet", "liex", "lie", "liep", "lat", "lax", "la", "lap", "luot", "luox", "luo", "luop", "lot", "lox", "lo", "lop", "lex", "le", "lep", "lut", "lux", "lu", "lup", "lurx", "lur", "lyt", "lyx", "ly", "lyp", "lyrx", "lyr", "git", "gix", "gi", "gip", "giet", "giex", "gie", "giep", "gat", "gax", "ga", "gap", "guot", "guox", "guo", "guop", "got", "gox", "go", "gop", "get", "gex", "ge", "gep", "gut", "gux", "gu", "gup", "gurx", "gur", "kit", "kix", "ki", "kip", "kiex", "kie", "kiep", "kat"], ["kax", "ka", "kap", "kuox", "kuo", "kuop", "kot", "kox", "ko", "kop", "ket", "kex", "ke", "kep", "kut", "kux", "ku", "kup", "kurx", "kur", "ggit", "ggix", "ggi", "ggiex", "ggie", "ggiep", "ggat", "ggax", "gga", "ggap", "gguot", "gguox", "gguo", "gguop", "ggot", "ggox", "ggo", "ggop", "gget", "ggex", "gge", "ggep", "ggut", "ggux", "ggu", "ggup", "ggurx", "ggur", "mgiex", "mgie", "mgat", "mgax", "mga", "mgap", "mguox", "mguo", "mguop", "mgot", "mgox", "mgo", "mgop", "mgex", "mge", "mgep", "mgut", "mgux", "mgu", "mgup", "mgurx", "mgur", "hxit", "hxix", "hxi", "hxip", "hxiet", "hxiex", "hxie", "hxiep", "hxat", "hxax", "hxa", "hxap", "hxuot", "hxuox", "hxuo", "hxuop", "hxot", "hxox", "hxo", "hxop", "hxex", "hxe", "hxep", "ngiex", "ngie", "ngiep", "ngat", "ngax", "nga", "ngap", "nguot", "nguox", "nguo", "ngot", "ngox", "ngo", "ngop", "ngex", "nge", "ngep", "hit", "hiex", "hie", "hat", "hax", "ha", "hap", "huot", "huox", "huo", "huop", "hot", "hox", "ho", "hop", "hex", "he", "hep", "wat", "wax", "wa", "wap", "wuox", "wuo", "wuop", "wox", "wo", "wop", "wex", "we", "wep", "zit", "zix", "zi", "zip", "ziex", "zie", "ziep", "zat", "zax", "za", "zap", "zuox", "zuo", "zuop", "zot", "zox", "zo", "zop", "zex", "ze", "zep", "zut", "zux", "zu", "zup", "zurx", "zur", "zyt", "zyx", "zy", "zyp", "zyrx", "zyr", "cit", "cix", "ci", "cip", "ciet", "ciex", "cie", "ciep", "cat", "cax", "ca", "cap", "cuox", "cuo", "cuop", "cot", "cox", "co", "cop", "cex", "ce", "cep", "cut", "cux", "cu", "cup", "curx", "cur", "cyt", "cyx", "cy", "cyp", "cyrx", "cyr", "zzit", "zzix", "zzi", "zzip", "zziet", "zziex", "zzie", "zziep", "zzat", "zzax", "zza", "zzap", "zzox", "zzo", "zzop", "zzex", "zze", "zzep", "zzux", "zzu", "zzup", "zzurx", "zzur", "zzyt", "zzyx", "zzy", "zzyp", "zzyrx", "zzyr", "nzit", "nzix", "nzi", "nzip", "nziex", "nzie", "nziep", "nzat", "nzax", "nza", "nzap", "nzuox", "nzuo", "nzox", "nzop", "nzex", "nze", "nzux", "nzu"], ["nzup", "nzurx", "nzur", "nzyt", "nzyx", "nzy", "nzyp", "nzyrx", "nzyr", "sit", "six", "si", "sip", "siex", "sie", "siep", "sat", "sax", "sa", "sap", "suox", "suo", "suop", "sot", "sox", "so", "sop", "sex", "se", "sep", "sut", "sux", "su", "sup", "surx", "sur", "syt", "syx", "sy", "syp", "syrx", "syr", "ssit", "ssix", "ssi", "ssip", "ssiex", "ssie", "ssiep", "ssat", "ssax", "ssa", "ssap", "ssot", "ssox", "sso", "ssop", "ssex", "sse", "ssep", "ssut", "ssux", "ssu", "ssup", "ssyt", "ssyx", "ssy", "ssyp", "ssyrx", "ssyr", "zhat", "zhax", "zha", "zhap", "zhuox", "zhuo", "zhuop", "zhot", "zhox", "zho", "zhop", "zhet", "zhex", "zhe", "zhep", "zhut", "zhux", "zhu", "zhup", "zhurx", "zhur", "zhyt", "zhyx", "zhy", "zhyp", "zhyrx", "zhyr", "chat", "chax", "cha", "chap", "chuot", "chuox", "chuo", "chuop", "chot", "chox", "cho", "chop", "chet", "chex", "che", "chep", "chux", "chu", "chup", "churx", "chur", "chyt", "chyx", "chy", "chyp", "chyrx", "chyr", "rrax", "rra", "rruox", "rruo", "rrot", "rrox", "rro", "rrop", "rret", "rrex", "rre", "rrep", "rrut", "rrux", "rru", "rrup", "rrurx", "rrur", "rryt", "rryx", "rry", "rryp", "rryrx", "rryr", "nrat", "nrax", "nra", "nrap", "nrox", "nro", "nrop", "nret", "nrex", "nre", "nrep", "nrut", "nrux", "nru", "nrup", "nrurx", "nrur", "nryt", "nryx", "nry", "nryp", "nryrx", "nryr", "shat", "shax", "sha", "shap", "shuox", "shuo", "shuop", "shot", "shox", "sho", "shop", "shet", "shex", "she", "shep", "shut", "shux", "shu", "shup", "shurx", "shur", "shyt", "shyx", "shy", "shyp", "shyrx", "shyr", "rat", "rax", "ra", "rap", "ruox", "ruo", "ruop", "rot", "rox", "ro", "rop", "rex", "re", "rep", "rut", "rux", "ru", "rup", "rurx", "rur", "ryt", "ryx", "ry", "ryp", "ryrx", "ryr", "jit", "jix", "ji", "jip", "jiet", "jiex", "jie", "jiep", "juot", "juox", "juo", "juop", "jot", "jox", "jo", "jop", "jut", "jux", "ju", "jup", "jurx", "jur", "jyt", "jyx", "jy", "jyp", "jyrx", "jyr", "qit", "qix", "qi", "qip"], ["qiet", "qiex", "qie", "qiep", "quot", "quox", "quo", "quop", "qot", "qox", "qo", "qop", "qut", "qux", "qu", "qup", "qurx", "qur", "qyt", "qyx", "qy", "qyp", "qyrx", "qyr", "jjit", "jjix", "jji", "jjip", "jjiet", "jjiex", "jjie", "jjiep", "jjuox", "jjuo", "jjuop", "jjot", "jjox", "jjo", "jjop", "jjut", "jjux", "jju", "jjup", "jjurx", "jjur", "jjyt", "jjyx", "jjy", "jjyp", "njit", "njix", "nji", "njip", "njiet", "njiex", "njie", "njiep", "njuox", "njuo", "njot", "njox", "njo", "njop", "njux", "nju", "njup", "njurx", "njur", "njyt", "njyx", "njy", "njyp", "njyrx", "njyr", "nyit", "nyix", "nyi", "nyip", "nyiet", "nyiex", "nyie", "nyiep", "nyuox", "nyuo", "nyuop", "nyot", "nyox", "nyo", "nyop", "nyut", "nyux", "nyu", "nyup", "xit", "xix", "xi", "xip", "xiet", "xiex", "xie", "xiep", "xuox", "xuo", "xot", "xox", "xo", "xop", "xyt", "xyx", "xy", "xyp", "xyrx", "xyr", "yit", "yix", "yi", "yip", "yiet", "yiex", "yie", "yiep", "yuot", "yuox", "yuo", "yuop", "yot", "yox", "yo", "yop", "yut", "yux", "yu", "yup", "yurx", "yur", "yyt", "yyx", "yy", "yyp", "yyrx", "yyr", , , , "Qot", "Li", "Kit", "Nyip", "Cyp", "Ssi", "Ggop", "Gep", "Mi", "Hxit", "Lyr", "Bbut", "Mop", "Yo", "Put", "Hxuo", "Tat", "Ga", , , "Ddur", "Bur", "Gguo", "Nyop", "Tu", "Op", "Jjut", "Zot", "Pyt", "Hmo", "Yit", "Vur", "Shy", "Vep", "Za", "Jo", , "Jjy", "Got", "Jjie", "Wo", "Du", "Shur", "Lie", "Cy", "Cuop", "Cip", "Hxop", "Shat", , "Shop", "Che", "Zziet", , "Ke"], [], [], [, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , "A", "a", "A", "a", "HENG", "heng", "TZ", "tz", "3", "3", "4", "4", "4", "4", "F", "S", "AA", "aa", "AO", "ao", "AU", "au", "AV", "av", "AV-", "av-", "AY", "ay", "C", "c", "K", "k", "K", "k", "K", "k", "L", "l", "L", "l", "O", "o", "O", "o", "OO", "oo", "P", "p", "P", "p", "P", "p", "Q", "q", "Q", "q", "R", "r", "R", "r", "V", "v", "VY", "vy", "Z", "z", "TH", "th", "TH", "th", "Y", "y", "ET", "et", "IS", "is", "CON", "con", "US", "us", "dum", "lum", "num", "rum", "RUM", "tum", "um", "D", "d", "F", "f", "G", "G", "g", "L", "l", "R", "r", "S", "s", "T", "t", "^", ":", "=", "'", "'", "H", "l", ".", "N", "n", "C", "c", "c", "h", "B", "b", "F", "f", "AE", "ae", "OE", "oe", "UE", "ue", "G", "g", "K", "k", "N", "n", "R", "r", "S", "s", "H", "E", "G", "L", "I", "Q", "K", "T", "J", "CHI", "B", "b", "O", "o", "U", "u", , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , "I", "H", "oe", "M", "F", "P", "M", "I", "M1"], [], [], [], [], ["ga", "gag", "gagg", "gags", "gan", "ganj", "ganh", "gad", "gal", "galg", "galm", "galb", "gals", "galt", "galp", "galh", "gam", "gab", "gabs", "gas", "gass", "gang", "gaj", "gac", "gak", "gat", "gap", "gah", "gae", "gaeg", "gaegg", "gaegs", "gaen", "gaenj", "gaenh", "gaed", "gael", "gaelg", "gaelm", "gaelb", "gaels", "gaelt", "gaelp", "gaelh", "gaem", "gaeb", "gaebs", "gaes", "gaess", "gaeng", "gaej", "gaec", "gaek", "gaet", "gaep", "gaeh", "gya", "gyag", "gyagg", "gyags", "gyan", "gyanj", "gyanh", "gyad", "gyal", "gyalg", "gyalm", "gyalb", "gyals", "gyalt", "gyalp", "gyalh", "gyam", "gyab", "gyabs", "gyas", "gyass", "gyang", "gyaj", "gyac", "gyak", "gyat", "gyap", "gyah", "gyae", "gyaeg", "gyaegg", "gyaegs", "gyaen", "gyaenj", "gyaenh", "gyaed", "gyael", "gyaelg", "gyaelm", "gyaelb", "gyaels", "gyaelt", "gyaelp", "gyaelh", "gyaem", "gyaeb", "gyaebs", "gyaes", "gyaess", "gyaeng", "gyaej", "gyaec", "gyaek", "gyaet", "gyaep", "gyaeh", "geo", "geog", "geogg", "geogs", "geon", "geonj", "geonh", "geod", "geol", "geolg", "geolm", "geolb", "geols", "geolt", "geolp", "geolh", "geom", "geob", "geobs", "geos", "geoss", "geong", "geoj", "geoc", "geok", "geot", "geop", "geoh", "ge", "geg", "gegg", "gegs", "gen", "genj", "genh", "ged", "gel", "gelg", "gelm", "gelb", "gels", "gelt", "gelp", "gelh", "gem", "geb", "gebs", "ges", "gess", "geng", "gej", "gec", "gek", "get", "gep", "geh", "gyeo", "gyeog", "gyeogg", "gyeogs", "gyeon", "gyeonj", "gyeonh", "gyeod", "gyeol", "gyeolg", "gyeolm", "gyeolb", "gyeols", "gyeolt", "gyeolp", "gyeolh", "gyeom", "gyeob", "gyeobs", "gyeos", "gyeoss", "gyeong", "gyeoj", "gyeoc", "gyeok", "gyeot", "gyeop", "gyeoh", "gye", "gyeg", "gyegg", "gyegs", "gyen", "gyenj", "gyenh", "gyed", "gyel", "gyelg", "gyelm", "gyelb", "gyels", "gyelt", "gyelp", "gyelh", "gyem", "gyeb", "gyebs", "gyes", "gyess", "gyeng", "gyej", "gyec", "gyek", "gyet", "gyep", "gyeh", "go", "gog", "gogg", "gogs", "gon", "gonj", "gonh", "god", "gol", "golg", "golm", "golb", "gols", "golt", "golp", "golh", "gom", "gob", "gobs", "gos", "goss", "gong", "goj", "goc", "gok", "got", "gop", "goh", "gwa", "gwag", "gwagg", "gwags"], ["gwan", "gwanj", "gwanh", "gwad", "gwal", "gwalg", "gwalm", "gwalb", "gwals", "gwalt", "gwalp", "gwalh", "gwam", "gwab", "gwabs", "gwas", "gwass", "gwang", "gwaj", "gwac", "gwak", "gwat", "gwap", "gwah", "gwae", "gwaeg", "gwaegg", "gwaegs", "gwaen", "gwaenj", "gwaenh", "gwaed", "gwael", "gwaelg", "gwaelm", "gwaelb", "gwaels", "gwaelt", "gwaelp", "gwaelh", "gwaem", "gwaeb", "gwaebs", "gwaes", "gwaess", "gwaeng", "gwaej", "gwaec", "gwaek", "gwaet", "gwaep", "gwaeh", "goe", "goeg", "goegg", "goegs", "goen", "goenj", "goenh", "goed", "goel", "goelg", "goelm", "goelb", "goels", "goelt", "goelp", "goelh", "goem", "goeb", "goebs", "goes", "goess", "goeng", "goej", "goec", "goek", "goet", "goep", "goeh", "gyo", "gyog", "gyogg", "gyogs", "gyon", "gyonj", "gyonh", "gyod", "gyol", "gyolg", "gyolm", "gyolb", "gyols", "gyolt", "gyolp", "gyolh", "gyom", "gyob", "gyobs", "gyos", "gyoss", "gyong", "gyoj", "gyoc", "gyok", "gyot", "gyop", "gyoh", "gu", "gug", "gugg", "gugs", "gun", "gunj", "gunh", "gud", "gul", "gulg", "gulm", "gulb", "guls", "gult", "gulp", "gulh", "gum", "gub", "gubs", "gus", "guss", "gung", "guj", "guc", "guk", "gut", "gup", "guh", "gweo", "gweog", "gweogg", "gweogs", "gweon", "gweonj", "gweonh", "gweod", "gweol", "gweolg", "gweolm", "gweolb", "gweols", "gweolt", "gweolp", "gweolh", "gweom", "gweob", "gweobs", "gweos", "gweoss", "gweong", "gweoj", "gweoc", "gweok", "gweot", "gweop", "gweoh", "gwe", "gweg", "gwegg", "gwegs", "gwen", "gwenj", "gwenh", "gwed", "gwel", "gwelg", "gwelm", "gwelb", "gwels", "gwelt", "gwelp", "gwelh", "gwem", "gweb", "gwebs", "gwes", "gwess", "gweng", "gwej", "gwec", "gwek", "gwet", "gwep", "gweh", "gwi", "gwig", "gwigg", "gwigs", "gwin", "gwinj", "gwinh", "gwid", "gwil", "gwilg", "gwilm", "gwilb", "gwils", "gwilt", "gwilp", "gwilh", "gwim", "gwib", "gwibs", "gwis", "gwiss", "gwing", "gwij", "gwic", "gwik", "gwit", "gwip", "gwih", "gyu", "gyug", "gyugg", "gyugs", "gyun", "gyunj", "gyunh", "gyud", "gyul", "gyulg", "gyulm", "gyulb", "gyuls", "gyult", "gyulp", "gyulh", "gyum", "gyub", "gyubs", "gyus", "gyuss", "gyung", "gyuj", "gyuc", "gyuk", "gyut", "gyup", "gyuh", "geu", "geug", "geugg", "geugs", "geun", "geunj", "geunh", "geud"], ["geul", "geulg", "geulm", "geulb", "geuls", "geult", "geulp", "geulh", "geum", "geub", "geubs", "geus", "geuss", "geung", "geuj", "geuc", "geuk", "geut", "geup", "geuh", "gyi", "gyig", "gyigg", "gyigs", "gyin", "gyinj", "gyinh", "gyid", "gyil", "gyilg", "gyilm", "gyilb", "gyils", "gyilt", "gyilp", "gyilh", "gyim", "gyib", "gyibs", "gyis", "gyiss", "gying", "gyij", "gyic", "gyik", "gyit", "gyip", "gyih", "gi", "gig", "gigg", "gigs", "gin", "ginj", "ginh", "gid", "gil", "gilg", "gilm", "gilb", "gils", "gilt", "gilp", "gilh", "gim", "gib", "gibs", "gis", "giss", "ging", "gij", "gic", "gik", "git", "gip", "gih", "gga", "ggag", "ggagg", "ggags", "ggan", "gganj", "gganh", "ggad", "ggal", "ggalg", "ggalm", "ggalb", "ggals", "ggalt", "ggalp", "ggalh", "ggam", "ggab", "ggabs", "ggas", "ggass", "ggang", "ggaj", "ggac", "ggak", "ggat", "ggap", "ggah", "ggae", "ggaeg", "ggaegg", "ggaegs", "ggaen", "ggaenj", "ggaenh", "ggaed", "ggael", "ggaelg", "ggaelm", "ggaelb", "ggaels", "ggaelt", "ggaelp", "ggaelh", "ggaem", "ggaeb", "ggaebs", "ggaes", "ggaess", "ggaeng", "ggaej", "ggaec", "ggaek", "ggaet", "ggaep", "ggaeh", "ggya", "ggyag", "ggyagg", "ggyags", "ggyan", "ggyanj", "ggyanh", "ggyad", "ggyal", "ggyalg", "ggyalm", "ggyalb", "ggyals", "ggyalt", "ggyalp", "ggyalh", "ggyam", "ggyab", "ggyabs", "ggyas", "ggyass", "ggyang", "ggyaj", "ggyac", "ggyak", "ggyat", "ggyap", "ggyah", "ggyae", "ggyaeg", "ggyaegg", "ggyaegs", "ggyaen", "ggyaenj", "ggyaenh", "ggyaed", "ggyael", "ggyaelg", "ggyaelm", "ggyaelb", "ggyaels", "ggyaelt", "ggyaelp", "ggyaelh", "ggyaem", "ggyaeb", "ggyaebs", "ggyaes", "ggyaess", "ggyaeng", "ggyaej", "ggyaec", "ggyaek", "ggyaet", "ggyaep", "ggyaeh", "ggeo", "ggeog", "ggeogg", "ggeogs", "ggeon", "ggeonj", "ggeonh", "ggeod", "ggeol", "ggeolg", "ggeolm", "ggeolb", "ggeols", "ggeolt", "ggeolp", "ggeolh", "ggeom", "ggeob", "ggeobs", "ggeos", "ggeoss", "ggeong", "ggeoj", "ggeoc", "ggeok", "ggeot", "ggeop", "ggeoh", "gge", "ggeg", "ggegg", "ggegs", "ggen", "ggenj", "ggenh", "gged", "ggel", "ggelg", "ggelm", "ggelb", "ggels", "ggelt", "ggelp", "ggelh", "ggem", "ggeb", "ggebs", "gges", "ggess", "ggeng", "ggej", "ggec", "ggek", "gget", "ggep", "ggeh", "ggyeo", "ggyeog", "ggyeogg", "ggyeogs", "ggyeon", "ggyeonj", "ggyeonh", "ggyeod", "ggyeol", "ggyeolg", "ggyeolm", "ggyeolb"], ["ggyeols", "ggyeolt", "ggyeolp", "ggyeolh", "ggyeom", "ggyeob", "ggyeobs", "ggyeos", "ggyeoss", "ggyeong", "ggyeoj", "ggyeoc", "ggyeok", "ggyeot", "ggyeop", "ggyeoh", "ggye", "ggyeg", "ggyegg", "ggyegs", "ggyen", "ggyenj", "ggyenh", "ggyed", "ggyel", "ggyelg", "ggyelm", "ggyelb", "ggyels", "ggyelt", "ggyelp", "ggyelh", "ggyem", "ggyeb", "ggyebs", "ggyes", "ggyess", "ggyeng", "ggyej", "ggyec", "ggyek", "ggyet", "ggyep", "ggyeh", "ggo", "ggog", "ggogg", "ggogs", "ggon", "ggonj", "ggonh", "ggod", "ggol", "ggolg", "ggolm", "ggolb", "ggols", "ggolt", "ggolp", "ggolh", "ggom", "ggob", "ggobs", "ggos", "ggoss", "ggong", "ggoj", "ggoc", "ggok", "ggot", "ggop", "ggoh", "ggwa", "ggwag", "ggwagg", "ggwags", "ggwan", "ggwanj", "ggwanh", "ggwad", "ggwal", "ggwalg", "ggwalm", "ggwalb", "ggwals", "ggwalt", "ggwalp", "ggwalh", "ggwam", "ggwab", "ggwabs", "ggwas", "ggwass", "ggwang", "ggwaj", "ggwac", "ggwak", "ggwat", "ggwap", "ggwah", "ggwae", "ggwaeg", "ggwaegg", "ggwaegs", "ggwaen", "ggwaenj", "ggwaenh", "ggwaed", "ggwael", "ggwaelg", "ggwaelm", "ggwaelb", "ggwaels", "ggwaelt", "ggwaelp", "ggwaelh", "ggwaem", "ggwaeb", "ggwaebs", "ggwaes", "ggwaess", "ggwaeng", "ggwaej", "ggwaec", "ggwaek", "ggwaet", "ggwaep", "ggwaeh", "ggoe", "ggoeg", "ggoegg", "ggoegs", "ggoen", "ggoenj", "ggoenh", "ggoed", "ggoel", "ggoelg", "ggoelm", "ggoelb", "ggoels", "ggoelt", "ggoelp", "ggoelh", "ggoem", "ggoeb", "ggoebs", "ggoes", "ggoess", "ggoeng", "ggoej", "ggoec", "ggoek", "ggoet", "ggoep", "ggoeh", "ggyo", "ggyog", "ggyogg", "ggyogs", "ggyon", "ggyonj", "ggyonh", "ggyod", "ggyol", "ggyolg", "ggyolm", "ggyolb", "ggyols", "ggyolt", "ggyolp", "ggyolh", "ggyom", "ggyob", "ggyobs", "ggyos", "ggyoss", "ggyong", "ggyoj", "ggyoc", "ggyok", "ggyot", "ggyop", "ggyoh", "ggu", "ggug", "ggugg", "ggugs", "ggun", "ggunj", "ggunh", "ggud", "ggul", "ggulg", "ggulm", "ggulb", "gguls", "ggult", "ggulp", "ggulh", "ggum", "ggub", "ggubs", "ggus", "gguss", "ggung", "gguj", "gguc", "gguk", "ggut", "ggup", "gguh", "ggweo", "ggweog", "ggweogg", "ggweogs", "ggweon", "ggweonj", "ggweonh", "ggweod", "ggweol", "ggweolg", "ggweolm", "ggweolb", "ggweols", "ggweolt", "ggweolp", "ggweolh", "ggweom", "ggweob", "ggweobs", "ggweos", "ggweoss", "ggweong", "ggweoj", "ggweoc", "ggweok", "ggweot", "ggweop", "ggweoh", "ggwe", "ggweg", "ggwegg", "ggwegs", "ggwen", "ggwenj", "ggwenh", "ggwed", "ggwel", "ggwelg", "ggwelm", "ggwelb", "ggwels", "ggwelt", "ggwelp", "ggwelh"], ["ggwem", "ggweb", "ggwebs", "ggwes", "ggwess", "ggweng", "ggwej", "ggwec", "ggwek", "ggwet", "ggwep", "ggweh", "ggwi", "ggwig", "ggwigg", "ggwigs", "ggwin", "ggwinj", "ggwinh", "ggwid", "ggwil", "ggwilg", "ggwilm", "ggwilb", "ggwils", "ggwilt", "ggwilp", "ggwilh", "ggwim", "ggwib", "ggwibs", "ggwis", "ggwiss", "ggwing", "ggwij", "ggwic", "ggwik", "ggwit", "ggwip", "ggwih", "ggyu", "ggyug", "ggyugg", "ggyugs", "ggyun", "ggyunj", "ggyunh", "ggyud", "ggyul", "ggyulg", "ggyulm", "ggyulb", "ggyuls", "ggyult", "ggyulp", "ggyulh", "ggyum", "ggyub", "ggyubs", "ggyus", "ggyuss", "ggyung", "ggyuj", "ggyuc", "ggyuk", "ggyut", "ggyup", "ggyuh", "ggeu", "ggeug", "ggeugg", "ggeugs", "ggeun", "ggeunj", "ggeunh", "ggeud", "ggeul", "ggeulg", "ggeulm", "ggeulb", "ggeuls", "ggeult", "ggeulp", "ggeulh", "ggeum", "ggeub", "ggeubs", "ggeus", "ggeuss", "ggeung", "ggeuj", "ggeuc", "ggeuk", "ggeut", "ggeup", "ggeuh", "ggyi", "ggyig", "ggyigg", "ggyigs", "ggyin", "ggyinj", "ggyinh", "ggyid", "ggyil", "ggyilg", "ggyilm", "ggyilb", "ggyils", "ggyilt", "ggyilp", "ggyilh", "ggyim", "ggyib", "ggyibs", "ggyis", "ggyiss", "ggying", "ggyij", "ggyic", "ggyik", "ggyit", "ggyip", "ggyih", "ggi", "ggig", "ggigg", "ggigs", "ggin", "gginj", "gginh", "ggid", "ggil", "ggilg", "ggilm", "ggilb", "ggils", "ggilt", "ggilp", "ggilh", "ggim", "ggib", "ggibs", "ggis", "ggiss", "gging", "ggij", "ggic", "ggik", "ggit", "ggip", "ggih", "na", "nag", "nagg", "nags", "nan", "nanj", "nanh", "nad", "nal", "nalg", "nalm", "nalb", "nals", "nalt", "nalp", "nalh", "nam", "nab", "nabs", "nas", "nass", "nang", "naj", "nac", "nak", "nat", "nap", "nah", "nae", "naeg", "naegg", "naegs", "naen", "naenj", "naenh", "naed", "nael", "naelg", "naelm", "naelb", "naels", "naelt", "naelp", "naelh", "naem", "naeb", "naebs", "naes", "naess", "naeng", "naej", "naec", "naek", "naet", "naep", "naeh", "nya", "nyag", "nyagg", "nyags", "nyan", "nyanj", "nyanh", "nyad", "nyal", "nyalg", "nyalm", "nyalb", "nyals", "nyalt", "nyalp", "nyalh", "nyam", "nyab", "nyabs", "nyas", "nyass", "nyang", "nyaj", "nyac", "nyak", "nyat", "nyap", "nyah", "nyae", "nyaeg", "nyaegg", "nyaegs", "nyaen", "nyaenj", "nyaenh", "nyaed", "nyael", "nyaelg", "nyaelm", "nyaelb", "nyaels", "nyaelt", "nyaelp", "nyaelh", "nyaem", "nyaeb", "nyaebs", "nyaes"], ["nyaess", "nyaeng", "nyaej", "nyaec", "nyaek", "nyaet", "nyaep", "nyaeh", "neo", "neog", "neogg", "neogs", "neon", "neonj", "neonh", "neod", "neol", "neolg", "neolm", "neolb", "neols", "neolt", "neolp", "neolh", "neom", "neob", "neobs", "neos", "neoss", "neong", "neoj", "neoc", "neok", "neot", "neop", "neoh", "ne", "neg", "negg", "negs", "nen", "nenj", "nenh", "ned", "nel", "nelg", "nelm", "nelb", "nels", "nelt", "nelp", "nelh", "nem", "neb", "nebs", "nes", "ness", "neng", "nej", "nec", "nek", "net", "nep", "neh", "nyeo", "nyeog", "nyeogg", "nyeogs", "nyeon", "nyeonj", "nyeonh", "nyeod", "nyeol", "nyeolg", "nyeolm", "nyeolb", "nyeols", "nyeolt", "nyeolp", "nyeolh", "nyeom", "nyeob", "nyeobs", "nyeos", "nyeoss", "nyeong", "nyeoj", "nyeoc", "nyeok", "nyeot", "nyeop", "nyeoh", "nye", "nyeg", "nyegg", "nyegs", "nyen", "nyenj", "nyenh", "nyed", "nyel", "nyelg", "nyelm", "nyelb", "nyels", "nyelt", "nyelp", "nyelh", "nyem", "nyeb", "nyebs", "nyes", "nyess", "nyeng", "nyej", "nyec", "nyek", "nyet", "nyep", "nyeh", "no", "nog", "nogg", "nogs", "non", "nonj", "nonh", "nod", "nol", "nolg", "nolm", "nolb", "nols", "nolt", "nolp", "nolh", "nom", "nob", "nobs", "nos", "noss", "nong", "noj", "noc", "nok", "not", "nop", "noh", "nwa", "nwag", "nwagg", "nwags", "nwan", "nwanj", "nwanh", "nwad", "nwal", "nwalg", "nwalm", "nwalb", "nwals", "nwalt", "nwalp", "nwalh", "nwam", "nwab", "nwabs", "nwas", "nwass", "nwang", "nwaj", "nwac", "nwak", "nwat", "nwap", "nwah", "nwae", "nwaeg", "nwaegg", "nwaegs", "nwaen", "nwaenj", "nwaenh", "nwaed", "nwael", "nwaelg", "nwaelm", "nwaelb", "nwaels", "nwaelt", "nwaelp", "nwaelh", "nwaem", "nwaeb", "nwaebs", "nwaes", "nwaess", "nwaeng", "nwaej", "nwaec", "nwaek", "nwaet", "nwaep", "nwaeh", "noe", "noeg", "noegg", "noegs", "noen", "noenj", "noenh", "noed", "noel", "noelg", "noelm", "noelb", "noels", "noelt", "noelp", "noelh", "noem", "noeb", "noebs", "noes", "noess", "noeng", "noej", "noec", "noek", "noet", "noep", "noeh", "nyo", "nyog", "nyogg", "nyogs", "nyon", "nyonj", "nyonh", "nyod", "nyol", "nyolg", "nyolm", "nyolb", "nyols", "nyolt", "nyolp", "nyolh", "nyom", "nyob", "nyobs", "nyos", "nyoss", "nyong", "nyoj", "nyoc"], ["nyok", "nyot", "nyop", "nyoh", "nu", "nug", "nugg", "nugs", "nun", "nunj", "nunh", "nud", "nul", "nulg", "nulm", "nulb", "nuls", "nult", "nulp", "nulh", "num", "nub", "nubs", "nus", "nuss", "nung", "nuj", "nuc", "nuk", "nut", "nup", "nuh", "nweo", "nweog", "nweogg", "nweogs", "nweon", "nweonj", "nweonh", "nweod", "nweol", "nweolg", "nweolm", "nweolb", "nweols", "nweolt", "nweolp", "nweolh", "nweom", "nweob", "nweobs", "nweos", "nweoss", "nweong", "nweoj", "nweoc", "nweok", "nweot", "nweop", "nweoh", "nwe", "nweg", "nwegg", "nwegs", "nwen", "nwenj", "nwenh", "nwed", "nwel", "nwelg", "nwelm", "nwelb", "nwels", "nwelt", "nwelp", "nwelh", "nwem", "nweb", "nwebs", "nwes", "nwess", "nweng", "nwej", "nwec", "nwek", "nwet", "nwep", "nweh", "nwi", "nwig", "nwigg", "nwigs", "nwin", "nwinj", "nwinh", "nwid", "nwil", "nwilg", "nwilm", "nwilb", "nwils", "nwilt", "nwilp", "nwilh", "nwim", "nwib", "nwibs", "nwis", "nwiss", "nwing", "nwij", "nwic", "nwik", "nwit", "nwip", "nwih", "nyu", "nyug", "nyugg", "nyugs", "nyun", "nyunj", "nyunh", "nyud", "nyul", "nyulg", "nyulm", "nyulb", "nyuls", "nyult", "nyulp", "nyulh", "nyum", "nyub", "nyubs", "nyus", "nyuss", "nyung", "nyuj", "nyuc", "nyuk", "nyut", "nyup", "nyuh", "neu", "neug", "neugg", "neugs", "neun", "neunj", "neunh", "neud", "neul", "neulg", "neulm", "neulb", "neuls", "neult", "neulp", "neulh", "neum", "neub", "neubs", "neus", "neuss", "neung", "neuj", "neuc", "neuk", "neut", "neup", "neuh", "nyi", "nyig", "nyigg", "nyigs", "nyin", "nyinj", "nyinh", "nyid", "nyil", "nyilg", "nyilm", "nyilb", "nyils", "nyilt", "nyilp", "nyilh", "nyim", "nyib", "nyibs", "nyis", "nyiss", "nying", "nyij", "nyic", "nyik", "nyit", "nyip", "nyih", "ni", "nig", "nigg", "nigs", "nin", "ninj", "ninh", "nid", "nil", "nilg", "nilm", "nilb", "nils", "nilt", "nilp", "nilh", "nim", "nib", "nibs", "nis", "niss", "ning", "nij", "nic", "nik", "nit", "nip", "nih", "da", "dag", "dagg", "dags", "dan", "danj", "danh", "dad", "dal", "dalg", "dalm", "dalb", "dals", "dalt", "dalp", "dalh", "dam", "dab", "dabs", "das", "dass", "dang", "daj", "dac", "dak", "dat", "dap", "dah"], ["dae", "daeg", "daegg", "daegs", "daen", "daenj", "daenh", "daed", "dael", "daelg", "daelm", "daelb", "daels", "daelt", "daelp", "daelh", "daem", "daeb", "daebs", "daes", "daess", "daeng", "daej", "daec", "daek", "daet", "daep", "daeh", "dya", "dyag", "dyagg", "dyags", "dyan", "dyanj", "dyanh", "dyad", "dyal", "dyalg", "dyalm", "dyalb", "dyals", "dyalt", "dyalp", "dyalh", "dyam", "dyab", "dyabs", "dyas", "dyass", "dyang", "dyaj", "dyac", "dyak", "dyat", "dyap", "dyah", "dyae", "dyaeg", "dyaegg", "dyaegs", "dyaen", "dyaenj", "dyaenh", "dyaed", "dyael", "dyaelg", "dyaelm", "dyaelb", "dyaels", "dyaelt", "dyaelp", "dyaelh", "dyaem", "dyaeb", "dyaebs", "dyaes", "dyaess", "dyaeng", "dyaej", "dyaec", "dyaek", "dyaet", "dyaep", "dyaeh", "deo", "deog", "deogg", "deogs", "deon", "deonj", "deonh", "deod", "deol", "deolg", "deolm", "deolb", "deols", "deolt", "deolp", "deolh", "deom", "deob", "deobs", "deos", "deoss", "deong", "deoj", "deoc", "deok", "deot", "deop", "deoh", "de", "deg", "degg", "degs", "den", "denj", "denh", "ded", "del", "delg", "delm", "delb", "dels", "delt", "delp", "delh", "dem", "deb", "debs", "des", "dess", "deng", "dej", "dec", "dek", "det", "dep", "deh", "dyeo", "dyeog", "dyeogg", "dyeogs", "dyeon", "dyeonj", "dyeonh", "dyeod", "dyeol", "dyeolg", "dyeolm", "dyeolb", "dyeols", "dyeolt", "dyeolp", "dyeolh", "dyeom", "dyeob", "dyeobs", "dyeos", "dyeoss", "dyeong", "dyeoj", "dyeoc", "dyeok", "dyeot", "dyeop", "dyeoh", "dye", "dyeg", "dyegg", "dyegs", "dyen", "dyenj", "dyenh", "dyed", "dyel", "dyelg", "dyelm", "dyelb", "dyels", "dyelt", "dyelp", "dyelh", "dyem", "dyeb", "dyebs", "dyes", "dyess", "dyeng", "dyej", "dyec", "dyek", "dyet", "dyep", "dyeh", "do", "dog", "dogg", "dogs", "don", "donj", "donh", "dod", "dol", "dolg", "dolm", "dolb", "dols", "dolt", "dolp", "dolh", "dom", "dob", "dobs", "dos", "doss", "dong", "doj", "doc", "dok", "dot", "dop", "doh", "dwa", "dwag", "dwagg", "dwags", "dwan", "dwanj", "dwanh", "dwad", "dwal", "dwalg", "dwalm", "dwalb", "dwals", "dwalt", "dwalp", "dwalh", "dwam", "dwab", "dwabs", "dwas", "dwass", "dwang", "dwaj", "dwac", "dwak", "dwat", "dwap", "dwah", "dwae", "dwaeg", "dwaegg", "dwaegs"], ["dwaen", "dwaenj", "dwaenh", "dwaed", "dwael", "dwaelg", "dwaelm", "dwaelb", "dwaels", "dwaelt", "dwaelp", "dwaelh", "dwaem", "dwaeb", "dwaebs", "dwaes", "dwaess", "dwaeng", "dwaej", "dwaec", "dwaek", "dwaet", "dwaep", "dwaeh", "doe", "doeg", "doegg", "doegs", "doen", "doenj", "doenh", "doed", "doel", "doelg", "doelm", "doelb", "doels", "doelt", "doelp", "doelh", "doem", "doeb", "doebs", "does", "doess", "doeng", "doej", "doec", "doek", "doet", "doep", "doeh", "dyo", "dyog", "dyogg", "dyogs", "dyon", "dyonj", "dyonh", "dyod", "dyol", "dyolg", "dyolm", "dyolb", "dyols", "dyolt", "dyolp", "dyolh", "dyom", "dyob", "dyobs", "dyos", "dyoss", "dyong", "dyoj", "dyoc", "dyok", "dyot", "dyop", "dyoh", "du", "dug", "dugg", "dugs", "dun", "dunj", "dunh", "dud", "dul", "dulg", "dulm", "dulb", "duls", "dult", "dulp", "dulh", "dum", "dub", "dubs", "dus", "duss", "dung", "duj", "duc", "duk", "dut", "dup", "duh", "dweo", "dweog", "dweogg", "dweogs", "dweon", "dweonj", "dweonh", "dweod", "dweol", "dweolg", "dweolm", "dweolb", "dweols", "dweolt", "dweolp", "dweolh", "dweom", "dweob", "dweobs", "dweos", "dweoss", "dweong", "dweoj", "dweoc", "dweok", "dweot", "dweop", "dweoh", "dwe", "dweg", "dwegg", "dwegs", "dwen", "dwenj", "dwenh", "dwed", "dwel", "dwelg", "dwelm", "dwelb", "dwels", "dwelt", "dwelp", "dwelh", "dwem", "dweb", "dwebs", "dwes", "dwess", "dweng", "dwej", "dwec", "dwek", "dwet", "dwep", "dweh", "dwi", "dwig", "dwigg", "dwigs", "dwin", "dwinj", "dwinh", "dwid", "dwil", "dwilg", "dwilm", "dwilb", "dwils", "dwilt", "dwilp", "dwilh", "dwim", "dwib", "dwibs", "dwis", "dwiss", "dwing", "dwij", "dwic", "dwik", "dwit", "dwip", "dwih", "dyu", "dyug", "dyugg", "dyugs", "dyun", "dyunj", "dyunh", "dyud", "dyul", "dyulg", "dyulm", "dyulb", "dyuls", "dyult", "dyulp", "dyulh", "dyum", "dyub", "dyubs", "dyus", "dyuss", "dyung", "dyuj", "dyuc", "dyuk", "dyut", "dyup", "dyuh", "deu", "deug", "deugg", "deugs", "deun", "deunj", "deunh", "deud", "deul", "deulg", "deulm", "deulb", "deuls", "deult", "deulp", "deulh", "deum", "deub", "deubs", "deus", "deuss", "deung", "deuj", "deuc", "deuk", "deut", "deup", "deuh", "dyi", "dyig", "dyigg", "dyigs", "dyin", "dyinj", "dyinh", "dyid"], ["dyil", "dyilg", "dyilm", "dyilb", "dyils", "dyilt", "dyilp", "dyilh", "dyim", "dyib", "dyibs", "dyis", "dyiss", "dying", "dyij", "dyic", "dyik", "dyit", "dyip", "dyih", "di", "dig", "digg", "digs", "din", "dinj", "dinh", "did", "dil", "dilg", "dilm", "dilb", "dils", "dilt", "dilp", "dilh", "dim", "dib", "dibs", "dis", "diss", "ding", "dij", "dic", "dik", "dit", "dip", "dih", "dda", "ddag", "ddagg", "ddags", "ddan", "ddanj", "ddanh", "ddad", "ddal", "ddalg", "ddalm", "ddalb", "ddals", "ddalt", "ddalp", "ddalh", "ddam", "ddab", "ddabs", "ddas", "ddass", "ddang", "ddaj", "ddac", "ddak", "ddat", "ddap", "ddah", "ddae", "ddaeg", "ddaegg", "ddaegs", "ddaen", "ddaenj", "ddaenh", "ddaed", "ddael", "ddaelg", "ddaelm", "ddaelb", "ddaels", "ddaelt", "ddaelp", "ddaelh", "ddaem", "ddaeb", "ddaebs", "ddaes", "ddaess", "ddaeng", "ddaej", "ddaec", "ddaek", "ddaet", "ddaep", "ddaeh", "ddya", "ddyag", "ddyagg", "ddyags", "ddyan", "ddyanj", "ddyanh", "ddyad", "ddyal", "ddyalg", "ddyalm", "ddyalb", "ddyals", "ddyalt", "ddyalp", "ddyalh", "ddyam", "ddyab", "ddyabs", "ddyas", "ddyass", "ddyang", "ddyaj", "ddyac", "ddyak", "ddyat", "ddyap", "ddyah", "ddyae", "ddyaeg", "ddyaegg", "ddyaegs", "ddyaen", "ddyaenj", "ddyaenh", "ddyaed", "ddyael", "ddyaelg", "ddyaelm", "ddyaelb", "ddyaels", "ddyaelt", "ddyaelp", "ddyaelh", "ddyaem", "ddyaeb", "ddyaebs", "ddyaes", "ddyaess", "ddyaeng", "ddyaej", "ddyaec", "ddyaek", "ddyaet", "ddyaep", "ddyaeh", "ddeo", "ddeog", "ddeogg", "ddeogs", "ddeon", "ddeonj", "ddeonh", "ddeod", "ddeol", "ddeolg", "ddeolm", "ddeolb", "ddeols", "ddeolt", "ddeolp", "ddeolh", "ddeom", "ddeob", "ddeobs", "ddeos", "ddeoss", "ddeong", "ddeoj", "ddeoc", "ddeok", "ddeot", "ddeop", "ddeoh", "dde", "ddeg", "ddegg", "ddegs", "dden", "ddenj", "ddenh", "dded", "ddel", "ddelg", "ddelm", "ddelb", "ddels", "ddelt", "ddelp", "ddelh", "ddem", "ddeb", "ddebs", "ddes", "ddess", "ddeng", "ddej", "ddec", "ddek", "ddet", "ddep", "ddeh", "ddyeo", "ddyeog", "ddyeogg", "ddyeogs", "ddyeon", "ddyeonj", "ddyeonh", "ddyeod", "ddyeol", "ddyeolg", "ddyeolm", "ddyeolb", "ddyeols", "ddyeolt", "ddyeolp", "ddyeolh", "ddyeom", "ddyeob", "ddyeobs", "ddyeos", "ddyeoss", "ddyeong", "ddyeoj", "ddyeoc", "ddyeok", "ddyeot", "ddyeop", "ddyeoh", "ddye", "ddyeg", "ddyegg", "ddyegs", "ddyen", "ddyenj", "ddyenh", "ddyed", "ddyel", "ddyelg", "ddyelm", "ddyelb"], ["ddyels", "ddyelt", "ddyelp", "ddyelh", "ddyem", "ddyeb", "ddyebs", "ddyes", "ddyess", "ddyeng", "ddyej", "ddyec", "ddyek", "ddyet", "ddyep", "ddyeh", "ddo", "ddog", "ddogg", "ddogs", "ddon", "ddonj", "ddonh", "ddod", "ddol", "ddolg", "ddolm", "ddolb", "ddols", "ddolt", "ddolp", "ddolh", "ddom", "ddob", "ddobs", "ddos", "ddoss", "ddong", "ddoj", "ddoc", "ddok", "ddot", "ddop", "ddoh", "ddwa", "ddwag", "ddwagg", "ddwags", "ddwan", "ddwanj", "ddwanh", "ddwad", "ddwal", "ddwalg", "ddwalm", "ddwalb", "ddwals", "ddwalt", "ddwalp", "ddwalh", "ddwam", "ddwab", "ddwabs", "ddwas", "ddwass", "ddwang", "ddwaj", "ddwac", "ddwak", "ddwat", "ddwap", "ddwah", "ddwae", "ddwaeg", "ddwaegg", "ddwaegs", "ddwaen", "ddwaenj", "ddwaenh", "ddwaed", "ddwael", "ddwaelg", "ddwaelm", "ddwaelb", "ddwaels", "ddwaelt", "ddwaelp", "ddwaelh", "ddwaem", "ddwaeb", "ddwaebs", "ddwaes", "ddwaess", "ddwaeng", "ddwaej", "ddwaec", "ddwaek", "ddwaet", "ddwaep", "ddwaeh", "ddoe", "ddoeg", "ddoegg", "ddoegs", "ddoen", "ddoenj", "ddoenh", "ddoed", "ddoel", "ddoelg", "ddoelm", "ddoelb", "ddoels", "ddoelt", "ddoelp", "ddoelh", "ddoem", "ddoeb", "ddoebs", "ddoes", "ddoess", "ddoeng", "ddoej", "ddoec", "ddoek", "ddoet", "ddoep", "ddoeh", "ddyo", "ddyog", "ddyogg", "ddyogs", "ddyon", "ddyonj", "ddyonh", "ddyod", "ddyol", "ddyolg", "ddyolm", "ddyolb", "ddyols", "ddyolt", "ddyolp", "ddyolh", "ddyom", "ddyob", "ddyobs", "ddyos", "ddyoss", "ddyong", "ddyoj", "ddyoc", "ddyok", "ddyot", "ddyop", "ddyoh", "ddu", "ddug", "ddugg", "ddugs", "ddun", "ddunj", "ddunh", "ddud", "ddul", "ddulg", "ddulm", "ddulb", "dduls", "ddult", "ddulp", "ddulh", "ddum", "ddub", "ddubs", "ddus", "dduss", "ddung", "dduj", "dduc", "dduk", "ddut", "ddup", "dduh", "ddweo", "ddweog", "ddweogg", "ddweogs", "ddweon", "ddweonj", "ddweonh", "ddweod", "ddweol", "ddweolg", "ddweolm", "ddweolb", "ddweols", "ddweolt", "ddweolp", "ddweolh", "ddweom", "ddweob", "ddweobs", "ddweos", "ddweoss", "ddweong", "ddweoj", "ddweoc", "ddweok", "ddweot", "ddweop", "ddweoh", "ddwe", "ddweg", "ddwegg", "ddwegs", "ddwen", "ddwenj", "ddwenh", "ddwed", "ddwel", "ddwelg", "ddwelm", "ddwelb", "ddwels", "ddwelt", "ddwelp", "ddwelh", "ddwem", "ddweb", "ddwebs", "ddwes", "ddwess", "ddweng", "ddwej", "ddwec", "ddwek", "ddwet", "ddwep", "ddweh", "ddwi", "ddwig", "ddwigg", "ddwigs", "ddwin", "ddwinj", "ddwinh", "ddwid", "ddwil", "ddwilg", "ddwilm", "ddwilb", "ddwils", "ddwilt", "ddwilp", "ddwilh"], ["ddwim", "ddwib", "ddwibs", "ddwis", "ddwiss", "ddwing", "ddwij", "ddwic", "ddwik", "ddwit", "ddwip", "ddwih", "ddyu", "ddyug", "ddyugg", "ddyugs", "ddyun", "ddyunj", "ddyunh", "ddyud", "ddyul", "ddyulg", "ddyulm", "ddyulb", "ddyuls", "ddyult", "ddyulp", "ddyulh", "ddyum", "ddyub", "ddyubs", "ddyus", "ddyuss", "ddyung", "ddyuj", "ddyuc", "ddyuk", "ddyut", "ddyup", "ddyuh", "ddeu", "ddeug", "ddeugg", "ddeugs", "ddeun", "ddeunj", "ddeunh", "ddeud", "ddeul", "ddeulg", "ddeulm", "ddeulb", "ddeuls", "ddeult", "ddeulp", "ddeulh", "ddeum", "ddeub", "ddeubs", "ddeus", "ddeuss", "ddeung", "ddeuj", "ddeuc", "ddeuk", "ddeut", "ddeup", "ddeuh", "ddyi", "ddyig", "ddyigg", "ddyigs", "ddyin", "ddyinj", "ddyinh", "ddyid", "ddyil", "ddyilg", "ddyilm", "ddyilb", "ddyils", "ddyilt", "ddyilp", "ddyilh", "ddyim", "ddyib", "ddyibs", "ddyis", "ddyiss", "ddying", "ddyij", "ddyic", "ddyik", "ddyit", "ddyip", "ddyih", "ddi", "ddig", "ddigg", "ddigs", "ddin", "ddinj", "ddinh", "ddid", "ddil", "ddilg", "ddilm", "ddilb", "ddils", "ddilt", "ddilp", "ddilh", "ddim", "ddib", "ddibs", "ddis", "ddiss", "dding", "ddij", "ddic", "ddik", "ddit", "ddip", "ddih", "ra", "rag", "ragg", "rags", "ran", "ranj", "ranh", "rad", "ral", "ralg", "ralm", "ralb", "rals", "ralt", "ralp", "ralh", "ram", "rab", "rabs", "ras", "rass", "rang", "raj", "rac", "rak", "rat", "rap", "rah", "rae", "raeg", "raegg", "raegs", "raen", "raenj", "raenh", "raed", "rael", "raelg", "raelm", "raelb", "raels", "raelt", "raelp", "raelh", "raem", "raeb", "raebs", "raes", "raess", "raeng", "raej", "raec", "raek", "raet", "raep", "raeh", "rya", "ryag", "ryagg", "ryags", "ryan", "ryanj", "ryanh", "ryad", "ryal", "ryalg", "ryalm", "ryalb", "ryals", "ryalt", "ryalp", "ryalh", "ryam", "ryab", "ryabs", "ryas", "ryass", "ryang", "ryaj", "ryac", "ryak", "ryat", "ryap", "ryah", "ryae", "ryaeg", "ryaegg", "ryaegs", "ryaen", "ryaenj", "ryaenh", "ryaed", "ryael", "ryaelg", "ryaelm", "ryaelb", "ryaels", "ryaelt", "ryaelp", "ryaelh", "ryaem", "ryaeb", "ryaebs", "ryaes", "ryaess", "ryaeng", "ryaej", "ryaec", "ryaek", "ryaet", "ryaep", "ryaeh", "reo", "reog", "reogg", "reogs", "reon", "reonj", "reonh", "reod", "reol", "reolg", "reolm", "reolb", "reols", "reolt", "reolp", "reolh", "reom", "reob", "reobs", "reos"], ["reoss", "reong", "reoj", "reoc", "reok", "reot", "reop", "reoh", "re", "reg", "regg", "regs", "ren", "renj", "renh", "red", "rel", "relg", "relm", "relb", "rels", "relt", "relp", "relh", "rem", "reb", "rebs", "res", "ress", "reng", "rej", "rec", "rek", "ret", "rep", "reh", "ryeo", "ryeog", "ryeogg", "ryeogs", "ryeon", "ryeonj", "ryeonh", "ryeod", "ryeol", "ryeolg", "ryeolm", "ryeolb", "ryeols", "ryeolt", "ryeolp", "ryeolh", "ryeom", "ryeob", "ryeobs", "ryeos", "ryeoss", "ryeong", "ryeoj", "ryeoc", "ryeok", "ryeot", "ryeop", "ryeoh", "rye", "ryeg", "ryegg", "ryegs", "ryen", "ryenj", "ryenh", "ryed", "ryel", "ryelg", "ryelm", "ryelb", "ryels", "ryelt", "ryelp", "ryelh", "ryem", "ryeb", "ryebs", "ryes", "ryess", "ryeng", "ryej", "ryec", "ryek", "ryet", "ryep", "ryeh", "ro", "rog", "rogg", "rogs", "ron", "ronj", "ronh", "rod", "rol", "rolg", "rolm", "rolb", "rols", "rolt", "rolp", "rolh", "rom", "rob", "robs", "ros", "ross", "rong", "roj", "roc", "rok", "rot", "rop", "roh", "rwa", "rwag", "rwagg", "rwags", "rwan", "rwanj", "rwanh", "rwad", "rwal", "rwalg", "rwalm", "rwalb", "rwals", "rwalt", "rwalp", "rwalh", "rwam", "rwab", "rwabs", "rwas", "rwass", "rwang", "rwaj", "rwac", "rwak", "rwat", "rwap", "rwah", "rwae", "rwaeg", "rwaegg", "rwaegs", "rwaen", "rwaenj", "rwaenh", "rwaed", "rwael", "rwaelg", "rwaelm", "rwaelb", "rwaels", "rwaelt", "rwaelp", "rwaelh", "rwaem", "rwaeb", "rwaebs", "rwaes", "rwaess", "rwaeng", "rwaej", "rwaec", "rwaek", "rwaet", "rwaep", "rwaeh", "roe", "roeg", "roegg", "roegs", "roen", "roenj", "roenh", "roed", "roel", "roelg", "roelm", "roelb", "roels", "roelt", "roelp", "roelh", "roem", "roeb", "roebs", "roes", "roess", "roeng", "roej", "roec", "roek", "roet", "roep", "roeh", "ryo", "ryog", "ryogg", "ryogs", "ryon", "ryonj", "ryonh", "ryod", "ryol", "ryolg", "ryolm", "ryolb", "ryols", "ryolt", "ryolp", "ryolh", "ryom", "ryob", "ryobs", "ryos", "ryoss", "ryong", "ryoj", "ryoc", "ryok", "ryot", "ryop", "ryoh", "ru", "rug", "rugg", "rugs", "run", "runj", "runh", "rud", "rul", "rulg", "rulm", "rulb", "ruls", "rult", "rulp", "rulh", "rum", "rub", "rubs", "rus", "russ", "rung", "ruj", "ruc"], ["ruk", "rut", "rup", "ruh", "rweo", "rweog", "rweogg", "rweogs", "rweon", "rweonj", "rweonh", "rweod", "rweol", "rweolg", "rweolm", "rweolb", "rweols", "rweolt", "rweolp", "rweolh", "rweom", "rweob", "rweobs", "rweos", "rweoss", "rweong", "rweoj", "rweoc", "rweok", "rweot", "rweop", "rweoh", "rwe", "rweg", "rwegg", "rwegs", "rwen", "rwenj", "rwenh", "rwed", "rwel", "rwelg", "rwelm", "rwelb", "rwels", "rwelt", "rwelp", "rwelh", "rwem", "rweb", "rwebs", "rwes", "rwess", "rweng", "rwej", "rwec", "rwek", "rwet", "rwep", "rweh", "rwi", "rwig", "rwigg", "rwigs", "rwin", "rwinj", "rwinh", "rwid", "rwil", "rwilg", "rwilm", "rwilb", "rwils", "rwilt", "rwilp", "rwilh", "rwim", "rwib", "rwibs", "rwis", "rwiss", "rwing", "rwij", "rwic", "rwik", "rwit", "rwip", "rwih", "ryu", "ryug", "ryugg", "ryugs", "ryun", "ryunj", "ryunh", "ryud", "ryul", "ryulg", "ryulm", "ryulb", "ryuls", "ryult", "ryulp", "ryulh", "ryum", "ryub", "ryubs", "ryus", "ryuss", "ryung", "ryuj", "ryuc", "ryuk", "ryut", "ryup", "ryuh", "reu", "reug", "reugg", "reugs", "reun", "reunj", "reunh", "reud", "reul", "reulg", "reulm", "reulb", "reuls", "reult", "reulp", "reulh", "reum", "reub", "reubs", "reus", "reuss", "reung", "reuj", "reuc", "reuk", "reut", "reup", "reuh", "ryi", "ryig", "ryigg", "ryigs", "ryin", "ryinj", "ryinh", "ryid", "ryil", "ryilg", "ryilm", "ryilb", "ryils", "ryilt", "ryilp", "ryilh", "ryim", "ryib", "ryibs", "ryis", "ryiss", "rying", "ryij", "ryic", "ryik", "ryit", "ryip", "ryih", "ri", "rig", "rigg", "rigs", "rin", "rinj", "rinh", "rid", "ril", "rilg", "rilm", "rilb", "rils", "rilt", "rilp", "rilh", "rim", "rib", "ribs", "ris", "riss", "ring", "rij", "ric", "rik", "rit", "rip", "rih", "ma", "mag", "magg", "mags", "man", "manj", "manh", "mad", "mal", "malg", "malm", "malb", "mals", "malt", "malp", "malh", "mam", "mab", "mabs", "mas", "mass", "mang", "maj", "mac", "mak", "mat", "map", "mah", "mae", "maeg", "maegg", "maegs", "maen", "maenj", "maenh", "maed", "mael", "maelg", "maelm", "maelb", "maels", "maelt", "maelp", "maelh", "maem", "maeb", "maebs", "maes", "maess", "maeng", "maej", "maec", "maek", "maet", "maep", "maeh"], ["mya", "myag", "myagg", "myags", "myan", "myanj", "myanh", "myad", "myal", "myalg", "myalm", "myalb", "myals", "myalt", "myalp", "myalh", "myam", "myab", "myabs", "myas", "myass", "myang", "myaj", "myac", "myak", "myat", "myap", "myah", "myae", "myaeg", "myaegg", "myaegs", "myaen", "myaenj", "myaenh", "myaed", "myael", "myaelg", "myaelm", "myaelb", "myaels", "myaelt", "myaelp", "myaelh", "myaem", "myaeb", "myaebs", "myaes", "myaess", "myaeng", "myaej", "myaec", "myaek", "myaet", "myaep", "myaeh", "meo", "meog", "meogg", "meogs", "meon", "meonj", "meonh", "meod", "meol", "meolg", "meolm", "meolb", "meols", "meolt", "meolp", "meolh", "meom", "meob", "meobs", "meos", "meoss", "meong", "meoj", "meoc", "meok", "meot", "meop", "meoh", "me", "meg", "megg", "megs", "men", "menj", "menh", "med", "mel", "melg", "melm", "melb", "mels", "melt", "melp", "melh", "mem", "meb", "mebs", "mes", "mess", "meng", "mej", "mec", "mek", "met", "mep", "meh", "myeo", "myeog", "myeogg", "myeogs", "myeon", "myeonj", "myeonh", "myeod", "myeol", "myeolg", "myeolm", "myeolb", "myeols", "myeolt", "myeolp", "myeolh", "myeom", "myeob", "myeobs", "myeos", "myeoss", "myeong", "myeoj", "myeoc", "myeok", "myeot", "myeop", "myeoh", "mye", "myeg", "myegg", "myegs", "myen", "myenj", "myenh", "myed", "myel", "myelg", "myelm", "myelb", "myels", "myelt", "myelp", "myelh", "myem", "myeb", "myebs", "myes", "myess", "myeng", "myej", "myec", "myek", "myet", "myep", "myeh", "mo", "mog", "mogg", "mogs", "mon", "monj", "monh", "mod", "mol", "molg", "molm", "molb", "mols", "molt", "molp", "molh", "mom", "mob", "mobs", "mos", "moss", "mong", "moj", "moc", "mok", "mot", "mop", "moh", "mwa", "mwag", "mwagg", "mwags", "mwan", "mwanj", "mwanh", "mwad", "mwal", "mwalg", "mwalm", "mwalb", "mwals", "mwalt", "mwalp", "mwalh", "mwam", "mwab", "mwabs", "mwas", "mwass", "mwang", "mwaj", "mwac", "mwak", "mwat", "mwap", "mwah", "mwae", "mwaeg", "mwaegg", "mwaegs", "mwaen", "mwaenj", "mwaenh", "mwaed", "mwael", "mwaelg", "mwaelm", "mwaelb", "mwaels", "mwaelt", "mwaelp", "mwaelh", "mwaem", "mwaeb", "mwaebs", "mwaes", "mwaess", "mwaeng", "mwaej", "mwaec", "mwaek", "mwaet", "mwaep", "mwaeh", "moe", "moeg", "moegg", "moegs"], ["moen", "moenj", "moenh", "moed", "moel", "moelg", "moelm", "moelb", "moels", "moelt", "moelp", "moelh", "moem", "moeb", "moebs", "moes", "moess", "moeng", "moej", "moec", "moek", "moet", "moep", "moeh", "myo", "myog", "myogg", "myogs", "myon", "myonj", "myonh", "myod", "myol", "myolg", "myolm", "myolb", "myols", "myolt", "myolp", "myolh", "myom", "myob", "myobs", "myos", "myoss", "myong", "myoj", "myoc", "myok", "myot", "myop", "myoh", "mu", "mug", "mugg", "mugs", "mun", "munj", "munh", "mud", "mul", "mulg", "mulm", "mulb", "muls", "mult", "mulp", "mulh", "mum", "mub", "mubs", "mus", "muss", "mung", "muj", "muc", "muk", "mut", "mup", "muh", "mweo", "mweog", "mweogg", "mweogs", "mweon", "mweonj", "mweonh", "mweod", "mweol", "mweolg", "mweolm", "mweolb", "mweols", "mweolt", "mweolp", "mweolh", "mweom", "mweob", "mweobs", "mweos", "mweoss", "mweong", "mweoj", "mweoc", "mweok", "mweot", "mweop", "mweoh", "mwe", "mweg", "mwegg", "mwegs", "mwen", "mwenj", "mwenh", "mwed", "mwel", "mwelg", "mwelm", "mwelb", "mwels", "mwelt", "mwelp", "mwelh", "mwem", "mweb", "mwebs", "mwes", "mwess", "mweng", "mwej", "mwec", "mwek", "mwet", "mwep", "mweh", "mwi", "mwig", "mwigg", "mwigs", "mwin", "mwinj", "mwinh", "mwid", "mwil", "mwilg", "mwilm", "mwilb", "mwils", "mwilt", "mwilp", "mwilh", "mwim", "mwib", "mwibs", "mwis", "mwiss", "mwing", "mwij", "mwic", "mwik", "mwit", "mwip", "mwih", "myu", "myug", "myugg", "myugs", "myun", "myunj", "myunh", "myud", "myul", "myulg", "myulm", "myulb", "myuls", "myult", "myulp", "myulh", "myum", "myub", "myubs", "myus", "myuss", "myung", "myuj", "myuc", "myuk", "myut", "myup", "myuh", "meu", "meug", "meugg", "meugs", "meun", "meunj", "meunh", "meud", "meul", "meulg", "meulm", "meulb", "meuls", "meult", "meulp", "meulh", "meum", "meub", "meubs", "meus", "meuss", "meung", "meuj", "meuc", "meuk", "meut", "meup", "meuh", "myi", "myig", "myigg", "myigs", "myin", "myinj", "myinh", "myid", "myil", "myilg", "myilm", "myilb", "myils", "myilt", "myilp", "myilh", "myim", "myib", "myibs", "myis", "myiss", "mying", "myij", "myic", "myik", "myit", "myip", "myih", "mi", "mig", "migg", "migs", "min", "minj", "minh", "mid"], ["mil", "milg", "milm", "milb", "mils", "milt", "milp", "milh", "mim", "mib", "mibs", "mis", "miss", "ming", "mij", "mic", "mik", "mit", "mip", "mih", "ba", "bag", "bagg", "bags", "ban", "banj", "banh", "bad", "bal", "balg", "balm", "balb", "bals", "balt", "balp", "balh", "bam", "bab", "babs", "bas", "bass", "bang", "baj", "bac", "bak", "bat", "bap", "bah", "bae", "baeg", "baegg", "baegs", "baen", "baenj", "baenh", "baed", "bael", "baelg", "baelm", "baelb", "baels", "baelt", "baelp", "baelh", "baem", "baeb", "baebs", "baes", "baess", "baeng", "baej", "baec", "baek", "baet", "baep", "baeh", "bya", "byag", "byagg", "byags", "byan", "byanj", "byanh", "byad", "byal", "byalg", "byalm", "byalb", "byals", "byalt", "byalp", "byalh", "byam", "byab", "byabs", "byas", "byass", "byang", "byaj", "byac", "byak", "byat", "byap", "byah", "byae", "byaeg", "byaegg", "byaegs", "byaen", "byaenj", "byaenh", "byaed", "byael", "byaelg", "byaelm", "byaelb", "byaels", "byaelt", "byaelp", "byaelh", "byaem", "byaeb", "byaebs", "byaes", "byaess", "byaeng", "byaej", "byaec", "byaek", "byaet", "byaep", "byaeh", "beo", "beog", "beogg", "beogs", "beon", "beonj", "beonh", "beod", "beol", "beolg", "beolm", "beolb", "beols", "beolt", "beolp", "beolh", "beom", "beob", "beobs", "beos", "beoss", "beong", "beoj", "beoc", "beok", "beot", "beop", "beoh", "be", "beg", "begg", "begs", "ben", "benj", "benh", "bed", "bel", "belg", "belm", "belb", "bels", "belt", "belp", "belh", "bem", "beb", "bebs", "bes", "bess", "beng", "bej", "bec", "bek", "bet", "bep", "beh", "byeo", "byeog", "byeogg", "byeogs", "byeon", "byeonj", "byeonh", "byeod", "byeol", "byeolg", "byeolm", "byeolb", "byeols", "byeolt", "byeolp", "byeolh", "byeom", "byeob", "byeobs", "byeos", "byeoss", "byeong", "byeoj", "byeoc", "byeok", "byeot", "byeop", "byeoh", "bye", "byeg", "byegg", "byegs", "byen", "byenj", "byenh", "byed", "byel", "byelg", "byelm", "byelb", "byels", "byelt", "byelp", "byelh", "byem", "byeb", "byebs", "byes", "byess", "byeng", "byej", "byec", "byek", "byet", "byep", "byeh", "bo", "bog", "bogg", "bogs", "bon", "bonj", "bonh", "bod", "bol", "bolg", "bolm", "bolb"], ["bols", "bolt", "bolp", "bolh", "bom", "bob", "bobs", "bos", "boss", "bong", "boj", "boc", "bok", "bot", "bop", "boh", "bwa", "bwag", "bwagg", "bwags", "bwan", "bwanj", "bwanh", "bwad", "bwal", "bwalg", "bwalm", "bwalb", "bwals", "bwalt", "bwalp", "bwalh", "bwam", "bwab", "bwabs", "bwas", "bwass", "bwang", "bwaj", "bwac", "bwak", "bwat", "bwap", "bwah", "bwae", "bwaeg", "bwaegg", "bwaegs", "bwaen", "bwaenj", "bwaenh", "bwaed", "bwael", "bwaelg", "bwaelm", "bwaelb", "bwaels", "bwaelt", "bwaelp", "bwaelh", "bwaem", "bwaeb", "bwaebs", "bwaes", "bwaess", "bwaeng", "bwaej", "bwaec", "bwaek", "bwaet", "bwaep", "bwaeh", "boe", "boeg", "boegg", "boegs", "boen", "boenj", "boenh", "boed", "boel", "boelg", "boelm", "boelb", "boels", "boelt", "boelp", "boelh", "boem", "boeb", "boebs", "boes", "boess", "boeng", "boej", "boec", "boek", "boet", "boep", "boeh", "byo", "byog", "byogg", "byogs", "byon", "byonj", "byonh", "byod", "byol", "byolg", "byolm", "byolb", "byols", "byolt", "byolp", "byolh", "byom", "byob", "byobs", "byos", "byoss", "byong", "byoj", "byoc", "byok", "byot", "byop", "byoh", "bu", "bug", "bugg", "bugs", "bun", "bunj", "bunh", "bud", "bul", "bulg", "bulm", "bulb", "buls", "bult", "bulp", "bulh", "bum", "bub", "bubs", "bus", "buss", "bung", "buj", "buc", "buk", "but", "bup", "buh", "bweo", "bweog", "bweogg", "bweogs", "bweon", "bweonj", "bweonh", "bweod", "bweol", "bweolg", "bweolm", "bweolb", "bweols", "bweolt", "bweolp", "bweolh", "bweom", "bweob", "bweobs", "bweos", "bweoss", "bweong", "bweoj", "bweoc", "bweok", "bweot", "bweop", "bweoh", "bwe", "bweg", "bwegg", "bwegs", "bwen", "bwenj", "bwenh", "bwed", "bwel", "bwelg", "bwelm", "bwelb", "bwels", "bwelt", "bwelp", "bwelh", "bwem", "bweb", "bwebs", "bwes", "bwess", "bweng", "bwej", "bwec", "bwek", "bwet", "bwep", "bweh", "bwi", "bwig", "bwigg", "bwigs", "bwin", "bwinj", "bwinh", "bwid", "bwil", "bwilg", "bwilm", "bwilb", "bwils", "bwilt", "bwilp", "bwilh", "bwim", "bwib", "bwibs", "bwis", "bwiss", "bwing", "bwij", "bwic", "bwik", "bwit", "bwip", "bwih", "byu", "byug", "byugg", "byugs", "byun", "byunj", "byunh", "byud", "byul", "byulg", "byulm", "byulb", "byuls", "byult", "byulp", "byulh"], ["byum", "byub", "byubs", "byus", "byuss", "byung", "byuj", "byuc", "byuk", "byut", "byup", "byuh", "beu", "beug", "beugg", "beugs", "beun", "beunj", "beunh", "beud", "beul", "beulg", "beulm", "beulb", "beuls", "beult", "beulp", "beulh", "beum", "beub", "beubs", "beus", "beuss", "beung", "beuj", "beuc", "beuk", "beut", "beup", "beuh", "byi", "byig", "byigg", "byigs", "byin", "byinj", "byinh", "byid", "byil", "byilg", "byilm", "byilb", "byils", "byilt", "byilp", "byilh", "byim", "byib", "byibs", "byis", "byiss", "bying", "byij", "byic", "byik", "byit", "byip", "byih", "bi", "big", "bigg", "bigs", "bin", "binj", "binh", "bid", "bil", "bilg", "bilm", "bilb", "bils", "bilt", "bilp", "bilh", "bim", "bib", "bibs", "bis", "biss", "bing", "bij", "bic", "bik", "bit", "bip", "bih", "bba", "bbag", "bbagg", "bbags", "bban", "bbanj", "bbanh", "bbad", "bbal", "bbalg", "bbalm", "bbalb", "bbals", "bbalt", "bbalp", "bbalh", "bbam", "bbab", "bbabs", "bbas", "bbass", "bbang", "bbaj", "bbac", "bbak", "bbat", "bbap", "bbah", "bbae", "bbaeg", "bbaegg", "bbaegs", "bbaen", "bbaenj", "bbaenh", "bbaed", "bbael", "bbaelg", "bbaelm", "bbaelb", "bbaels", "bbaelt", "bbaelp", "bbaelh", "bbaem", "bbaeb", "bbaebs", "bbaes", "bbaess", "bbaeng", "bbaej", "bbaec", "bbaek", "bbaet", "bbaep", "bbaeh", "bbya", "bbyag", "bbyagg", "bbyags", "bbyan", "bbyanj", "bbyanh", "bbyad", "bbyal", "bbyalg", "bbyalm", "bbyalb", "bbyals", "bbyalt", "bbyalp", "bbyalh", "bbyam", "bbyab", "bbyabs", "bbyas", "bbyass", "bbyang", "bbyaj", "bbyac", "bbyak", "bbyat", "bbyap", "bbyah", "bbyae", "bbyaeg", "bbyaegg", "bbyaegs", "bbyaen", "bbyaenj", "bbyaenh", "bbyaed", "bbyael", "bbyaelg", "bbyaelm", "bbyaelb", "bbyaels", "bbyaelt", "bbyaelp", "bbyaelh", "bbyaem", "bbyaeb", "bbyaebs", "bbyaes", "bbyaess", "bbyaeng", "bbyaej", "bbyaec", "bbyaek", "bbyaet", "bbyaep", "bbyaeh", "bbeo", "bbeog", "bbeogg", "bbeogs", "bbeon", "bbeonj", "bbeonh", "bbeod", "bbeol", "bbeolg", "bbeolm", "bbeolb", "bbeols", "bbeolt", "bbeolp", "bbeolh", "bbeom", "bbeob", "bbeobs", "bbeos", "bbeoss", "bbeong", "bbeoj", "bbeoc", "bbeok", "bbeot", "bbeop", "bbeoh", "bbe", "bbeg", "bbegg", "bbegs", "bben", "bbenj", "bbenh", "bbed", "bbel", "bbelg", "bbelm", "bbelb", "bbels", "bbelt", "bbelp", "bbelh", "bbem", "bbeb", "bbebs", "bbes"], ["bbess", "bbeng", "bbej", "bbec", "bbek", "bbet", "bbep", "bbeh", "bbyeo", "bbyeog", "bbyeogg", "bbyeogs", "bbyeon", "bbyeonj", "bbyeonh", "bbyeod", "bbyeol", "bbyeolg", "bbyeolm", "bbyeolb", "bbyeols", "bbyeolt", "bbyeolp", "bbyeolh", "bbyeom", "bbyeob", "bbyeobs", "bbyeos", "bbyeoss", "bbyeong", "bbyeoj", "bbyeoc", "bbyeok", "bbyeot", "bbyeop", "bbyeoh", "bbye", "bbyeg", "bbyegg", "bbyegs", "bbyen", "bbyenj", "bbyenh", "bbyed", "bbyel", "bbyelg", "bbyelm", "bbyelb", "bbyels", "bbyelt", "bbyelp", "bbyelh", "bbyem", "bbyeb", "bbyebs", "bbyes", "bbyess", "bbyeng", "bbyej", "bbyec", "bbyek", "bbyet", "bbyep", "bbyeh", "bbo", "bbog", "bbogg", "bbogs", "bbon", "bbonj", "bbonh", "bbod", "bbol", "bbolg", "bbolm", "bbolb", "bbols", "bbolt", "bbolp", "bbolh", "bbom", "bbob", "bbobs", "bbos", "bboss", "bbong", "bboj", "bboc", "bbok", "bbot", "bbop", "bboh", "bbwa", "bbwag", "bbwagg", "bbwags", "bbwan", "bbwanj", "bbwanh", "bbwad", "bbwal", "bbwalg", "bbwalm", "bbwalb", "bbwals", "bbwalt", "bbwalp", "bbwalh", "bbwam", "bbwab", "bbwabs", "bbwas", "bbwass", "bbwang", "bbwaj", "bbwac", "bbwak", "bbwat", "bbwap", "bbwah", "bbwae", "bbwaeg", "bbwaegg", "bbwaegs", "bbwaen", "bbwaenj", "bbwaenh", "bbwaed", "bbwael", "bbwaelg", "bbwaelm", "bbwaelb", "bbwaels", "bbwaelt", "bbwaelp", "bbwaelh", "bbwaem", "bbwaeb", "bbwaebs", "bbwaes", "bbwaess", "bbwaeng", "bbwaej", "bbwaec", "bbwaek", "bbwaet", "bbwaep", "bbwaeh", "bboe", "bboeg", "bboegg", "bboegs", "bboen", "bboenj", "bboenh", "bboed", "bboel", "bboelg", "bboelm", "bboelb", "bboels", "bboelt", "bboelp", "bboelh", "bboem", "bboeb", "bboebs", "bboes", "bboess", "bboeng", "bboej", "bboec", "bboek", "bboet", "bboep", "bboeh", "bbyo", "bbyog", "bbyogg", "bbyogs", "bbyon", "bbyonj", "bbyonh", "bbyod", "bbyol", "bbyolg", "bbyolm", "bbyolb", "bbyols", "bbyolt", "bbyolp", "bbyolh", "bbyom", "bbyob", "bbyobs", "bbyos", "bbyoss", "bbyong", "bbyoj", "bbyoc", "bbyok", "bbyot", "bbyop", "bbyoh", "bbu", "bbug", "bbugg", "bbugs", "bbun", "bbunj", "bbunh", "bbud", "bbul", "bbulg", "bbulm", "bbulb", "bbuls", "bbult", "bbulp", "bbulh", "bbum", "bbub", "bbubs", "bbus", "bbuss", "bbung", "bbuj", "bbuc", "bbuk", "bbut", "bbup", "bbuh", "bbweo", "bbweog", "bbweogg", "bbweogs", "bbweon", "bbweonj", "bbweonh", "bbweod", "bbweol", "bbweolg", "bbweolm", "bbweolb", "bbweols", "bbweolt", "bbweolp", "bbweolh", "bbweom", "bbweob", "bbweobs", "bbweos", "bbweoss", "bbweong", "bbweoj", "bbweoc"], ["bbweok", "bbweot", "bbweop", "bbweoh", "bbwe", "bbweg", "bbwegg", "bbwegs", "bbwen", "bbwenj", "bbwenh", "bbwed", "bbwel", "bbwelg", "bbwelm", "bbwelb", "bbwels", "bbwelt", "bbwelp", "bbwelh", "bbwem", "bbweb", "bbwebs", "bbwes", "bbwess", "bbweng", "bbwej", "bbwec", "bbwek", "bbwet", "bbwep", "bbweh", "bbwi", "bbwig", "bbwigg", "bbwigs", "bbwin", "bbwinj", "bbwinh", "bbwid", "bbwil", "bbwilg", "bbwilm", "bbwilb", "bbwils", "bbwilt", "bbwilp", "bbwilh", "bbwim", "bbwib", "bbwibs", "bbwis", "bbwiss", "bbwing", "bbwij", "bbwic", "bbwik", "bbwit", "bbwip", "bbwih", "bbyu", "bbyug", "bbyugg", "bbyugs", "bbyun", "bbyunj", "bbyunh", "bbyud", "bbyul", "bbyulg", "bbyulm", "bbyulb", "bbyuls", "bbyult", "bbyulp", "bbyulh", "bbyum", "bbyub", "bbyubs", "bbyus", "bbyuss", "bbyung", "bbyuj", "bbyuc", "bbyuk", "bbyut", "bbyup", "bbyuh", "bbeu", "bbeug", "bbeugg", "bbeugs", "bbeun", "bbeunj", "bbeunh", "bbeud", "bbeul", "bbeulg", "bbeulm", "bbeulb", "bbeuls", "bbeult", "bbeulp", "bbeulh", "bbeum", "bbeub", "bbeubs", "bbeus", "bbeuss", "bbeung", "bbeuj", "bbeuc", "bbeuk", "bbeut", "bbeup", "bbeuh", "bbyi", "bbyig", "bbyigg", "bbyigs", "bbyin", "bbyinj", "bbyinh", "bbyid", "bbyil", "bbyilg", "bbyilm", "bbyilb", "bbyils", "bbyilt", "bbyilp", "bbyilh", "bbyim", "bbyib", "bbyibs", "bbyis", "bbyiss", "bbying", "bbyij", "bbyic", "bbyik", "bbyit", "bbyip", "bbyih", "bbi", "bbig", "bbigg", "bbigs", "bbin", "bbinj", "bbinh", "bbid", "bbil", "bbilg", "bbilm", "bbilb", "bbils", "bbilt", "bbilp", "bbilh", "bbim", "bbib", "bbibs", "bbis", "bbiss", "bbing", "bbij", "bbic", "bbik", "bbit", "bbip", "bbih", "sa", "sag", "sagg", "sags", "san", "sanj", "sanh", "sad", "sal", "salg", "salm", "salb", "sals", "salt", "salp", "salh", "sam", "sab", "sabs", "sas", "sass", "sang", "saj", "sac", "sak", "sat", "sap", "sah", "sae", "saeg", "saegg", "saegs", "saen", "saenj", "saenh", "saed", "sael", "saelg", "saelm", "saelb", "saels", "saelt", "saelp", "saelh", "saem", "saeb", "saebs", "saes", "saess", "saeng", "saej", "saec", "saek", "saet", "saep", "saeh", "sya", "syag", "syagg", "syags", "syan", "syanj", "syanh", "syad", "syal", "syalg", "syalm", "syalb", "syals", "syalt", "syalp", "syalh", "syam", "syab", "syabs", "syas", "syass", "syang", "syaj", "syac", "syak", "syat", "syap", "syah"], ["syae", "syaeg", "syaegg", "syaegs", "syaen", "syaenj", "syaenh", "syaed", "syael", "syaelg", "syaelm", "syaelb", "syaels", "syaelt", "syaelp", "syaelh", "syaem", "syaeb", "syaebs", "syaes", "syaess", "syaeng", "syaej", "syaec", "syaek", "syaet", "syaep", "syaeh", "seo", "seog", "seogg", "seogs", "seon", "seonj", "seonh", "seod", "seol", "seolg", "seolm", "seolb", "seols", "seolt", "seolp", "seolh", "seom", "seob", "seobs", "seos", "seoss", "seong", "seoj", "seoc", "seok", "seot", "seop", "seoh", "se", "seg", "segg", "segs", "sen", "senj", "senh", "sed", "sel", "selg", "selm", "selb", "sels", "selt", "selp", "selh", "sem", "seb", "sebs", "ses", "sess", "seng", "sej", "sec", "sek", "set", "sep", "seh", "syeo", "syeog", "syeogg", "syeogs", "syeon", "syeonj", "syeonh", "syeod", "syeol", "syeolg", "syeolm", "syeolb", "syeols", "syeolt", "syeolp", "syeolh", "syeom", "syeob", "syeobs", "syeos", "syeoss", "syeong", "syeoj", "syeoc", "syeok", "syeot", "syeop", "syeoh", "sye", "syeg", "syegg", "syegs", "syen", "syenj", "syenh", "syed", "syel", "syelg", "syelm", "syelb", "syels", "syelt", "syelp", "syelh", "syem", "syeb", "syebs", "syes", "syess", "syeng", "syej", "syec", "syek", "syet", "syep", "syeh", "so", "sog", "sogg", "sogs", "son", "sonj", "sonh", "sod", "sol", "solg", "solm", "solb", "sols", "solt", "solp", "solh", "som", "sob", "sobs", "sos", "soss", "song", "soj", "soc", "sok", "sot", "sop", "soh", "swa", "swag", "swagg", "swags", "swan", "swanj", "swanh", "swad", "swal", "swalg", "swalm", "swalb", "swals", "swalt", "swalp", "swalh", "swam", "swab", "swabs", "swas", "swass", "swang", "swaj", "swac", "swak", "swat", "swap", "swah", "swae", "swaeg", "swaegg", "swaegs", "swaen", "swaenj", "swaenh", "swaed", "swael", "swaelg", "swaelm", "swaelb", "swaels", "swaelt", "swaelp", "swaelh", "swaem", "swaeb", "swaebs", "swaes", "swaess", "swaeng", "swaej", "swaec", "swaek", "swaet", "swaep", "swaeh", "soe", "soeg", "soegg", "soegs", "soen", "soenj", "soenh", "soed", "soel", "soelg", "soelm", "soelb", "soels", "soelt", "soelp", "soelh", "soem", "soeb", "soebs", "soes", "soess", "soeng", "soej", "soec", "soek", "soet", "soep", "soeh", "syo", "syog", "syogg", "syogs"], ["syon", "syonj", "syonh", "syod", "syol", "syolg", "syolm", "syolb", "syols", "syolt", "syolp", "syolh", "syom", "syob", "syobs", "syos", "syoss", "syong", "syoj", "syoc", "syok", "syot", "syop", "syoh", "su", "sug", "sugg", "sugs", "sun", "sunj", "sunh", "sud", "sul", "sulg", "sulm", "sulb", "suls", "sult", "sulp", "sulh", "sum", "sub", "subs", "sus", "suss", "sung", "suj", "suc", "suk", "sut", "sup", "suh", "sweo", "sweog", "sweogg", "sweogs", "sweon", "sweonj", "sweonh", "sweod", "sweol", "sweolg", "sweolm", "sweolb", "sweols", "sweolt", "sweolp", "sweolh", "sweom", "sweob", "sweobs", "sweos", "sweoss", "sweong", "sweoj", "sweoc", "sweok", "sweot", "sweop", "sweoh", "swe", "sweg", "swegg", "swegs", "swen", "swenj", "swenh", "swed", "swel", "swelg", "swelm", "swelb", "swels", "swelt", "swelp", "swelh", "swem", "sweb", "swebs", "swes", "swess", "sweng", "swej", "swec", "swek", "swet", "swep", "sweh", "swi", "swig", "swigg", "swigs", "swin", "swinj", "swinh", "swid", "swil", "swilg", "swilm", "swilb", "swils", "swilt", "swilp", "swilh", "swim", "swib", "swibs", "swis", "swiss", "swing", "swij", "swic", "swik", "swit", "swip", "swih", "syu", "syug", "syugg", "syugs", "syun", "syunj", "syunh", "syud", "syul", "syulg", "syulm", "syulb", "syuls", "syult", "syulp", "syulh", "syum", "syub", "syubs", "syus", "syuss", "syung", "syuj", "syuc", "syuk", "syut", "syup", "syuh", "seu", "seug", "seugg", "seugs", "seun", "seunj", "seunh", "seud", "seul", "seulg", "seulm", "seulb", "seuls", "seult", "seulp", "seulh", "seum", "seub", "seubs", "seus", "seuss", "seung", "seuj", "seuc", "seuk", "seut", "seup", "seuh", "syi", "syig", "syigg", "syigs", "syin", "syinj", "syinh", "syid", "syil", "syilg", "syilm", "syilb", "syils", "syilt", "syilp", "syilh", "syim", "syib", "syibs", "syis", "syiss", "sying", "syij", "syic", "syik", "syit", "syip", "syih", "si", "sig", "sigg", "sigs", "sin", "sinj", "sinh", "sid", "sil", "silg", "silm", "silb", "sils", "silt", "silp", "silh", "sim", "sib", "sibs", "sis", "siss", "sing", "sij", "sic", "sik", "sit", "sip", "sih", "ssa", "ssag", "ssagg", "ssags", "ssan", "ssanj", "ssanh", "ssad"], ["ssal", "ssalg", "ssalm", "ssalb", "ssals", "ssalt", "ssalp", "ssalh", "ssam", "ssab", "ssabs", "ssas", "ssass", "ssang", "ssaj", "ssac", "ssak", "ssat", "ssap", "ssah", "ssae", "ssaeg", "ssaegg", "ssaegs", "ssaen", "ssaenj", "ssaenh", "ssaed", "ssael", "ssaelg", "ssaelm", "ssaelb", "ssaels", "ssaelt", "ssaelp", "ssaelh", "ssaem", "ssaeb", "ssaebs", "ssaes", "ssaess", "ssaeng", "ssaej", "ssaec", "ssaek", "ssaet", "ssaep", "ssaeh", "ssya", "ssyag", "ssyagg", "ssyags", "ssyan", "ssyanj", "ssyanh", "ssyad", "ssyal", "ssyalg", "ssyalm", "ssyalb", "ssyals", "ssyalt", "ssyalp", "ssyalh", "ssyam", "ssyab", "ssyabs", "ssyas", "ssyass", "ssyang", "ssyaj", "ssyac", "ssyak", "ssyat", "ssyap", "ssyah", "ssyae", "ssyaeg", "ssyaegg", "ssyaegs", "ssyaen", "ssyaenj", "ssyaenh", "ssyaed", "ssyael", "ssyaelg", "ssyaelm", "ssyaelb", "ssyaels", "ssyaelt", "ssyaelp", "ssyaelh", "ssyaem", "ssyaeb", "ssyaebs", "ssyaes", "ssyaess", "ssyaeng", "ssyaej", "ssyaec", "ssyaek", "ssyaet", "ssyaep", "ssyaeh", "sseo", "sseog", "sseogg", "sseogs", "sseon", "sseonj", "sseonh", "sseod", "sseol", "sseolg", "sseolm", "sseolb", "sseols", "sseolt", "sseolp", "sseolh", "sseom", "sseob", "sseobs", "sseos", "sseoss", "sseong", "sseoj", "sseoc", "sseok", "sseot", "sseop", "sseoh", "sse", "sseg", "ssegg", "ssegs", "ssen", "ssenj", "ssenh", "ssed", "ssel", "sselg", "sselm", "sselb", "ssels", "sselt", "sselp", "sselh", "ssem", "sseb", "ssebs", "sses", "ssess", "sseng", "ssej", "ssec", "ssek", "sset", "ssep", "sseh", "ssyeo", "ssyeog", "ssyeogg", "ssyeogs", "ssyeon", "ssyeonj", "ssyeonh", "ssyeod", "ssyeol", "ssyeolg", "ssyeolm", "ssyeolb", "ssyeols", "ssyeolt", "ssyeolp", "ssyeolh", "ssyeom", "ssyeob", "ssyeobs", "ssyeos", "ssyeoss", "ssyeong", "ssyeoj", "ssyeoc", "ssyeok", "ssyeot", "ssyeop", "ssyeoh", "ssye", "ssyeg", "ssyegg", "ssyegs", "ssyen", "ssyenj", "ssyenh", "ssyed", "ssyel", "ssyelg", "ssyelm", "ssyelb", "ssyels", "ssyelt", "ssyelp", "ssyelh", "ssyem", "ssyeb", "ssyebs", "ssyes", "ssyess", "ssyeng", "ssyej", "ssyec", "ssyek", "ssyet", "ssyep", "ssyeh", "sso", "ssog", "ssogg", "ssogs", "sson", "ssonj", "ssonh", "ssod", "ssol", "ssolg", "ssolm", "ssolb", "ssols", "ssolt", "ssolp", "ssolh", "ssom", "ssob", "ssobs", "ssos", "ssoss", "ssong", "ssoj", "ssoc", "ssok", "ssot", "ssop", "ssoh", "sswa", "sswag", "sswagg", "sswags", "sswan", "sswanj", "sswanh", "sswad", "sswal", "sswalg", "sswalm", "sswalb"], ["sswals", "sswalt", "sswalp", "sswalh", "sswam", "sswab", "sswabs", "sswas", "sswass", "sswang", "sswaj", "sswac", "sswak", "sswat", "sswap", "sswah", "sswae", "sswaeg", "sswaegg", "sswaegs", "sswaen", "sswaenj", "sswaenh", "sswaed", "sswael", "sswaelg", "sswaelm", "sswaelb", "sswaels", "sswaelt", "sswaelp", "sswaelh", "sswaem", "sswaeb", "sswaebs", "sswaes", "sswaess", "sswaeng", "sswaej", "sswaec", "sswaek", "sswaet", "sswaep", "sswaeh", "ssoe", "ssoeg", "ssoegg", "ssoegs", "ssoen", "ssoenj", "ssoenh", "ssoed", "ssoel", "ssoelg", "ssoelm", "ssoelb", "ssoels", "ssoelt", "ssoelp", "ssoelh", "ssoem", "ssoeb", "ssoebs", "ssoes", "ssoess", "ssoeng", "ssoej", "ssoec", "ssoek", "ssoet", "ssoep", "ssoeh", "ssyo", "ssyog", "ssyogg", "ssyogs", "ssyon", "ssyonj", "ssyonh", "ssyod", "ssyol", "ssyolg", "ssyolm", "ssyolb", "ssyols", "ssyolt", "ssyolp", "ssyolh", "ssyom", "ssyob", "ssyobs", "ssyos", "ssyoss", "ssyong", "ssyoj", "ssyoc", "ssyok", "ssyot", "ssyop", "ssyoh", "ssu", "ssug", "ssugg", "ssugs", "ssun", "ssunj", "ssunh", "ssud", "ssul", "ssulg", "ssulm", "ssulb", "ssuls", "ssult", "ssulp", "ssulh", "ssum", "ssub", "ssubs", "ssus", "ssuss", "ssung", "ssuj", "ssuc", "ssuk", "ssut", "ssup", "ssuh", "ssweo", "ssweog", "ssweogg", "ssweogs", "ssweon", "ssweonj", "ssweonh", "ssweod", "ssweol", "ssweolg", "ssweolm", "ssweolb", "ssweols", "ssweolt", "ssweolp", "ssweolh", "ssweom", "ssweob", "ssweobs", "ssweos", "ssweoss", "ssweong", "ssweoj", "ssweoc", "ssweok", "ssweot", "ssweop", "ssweoh", "sswe", "ssweg", "sswegg", "sswegs", "sswen", "sswenj", "sswenh", "sswed", "sswel", "sswelg", "sswelm", "sswelb", "sswels", "sswelt", "sswelp", "sswelh", "sswem", "ssweb", "sswebs", "sswes", "sswess", "ssweng", "sswej", "sswec", "sswek", "sswet", "sswep", "ssweh", "sswi", "sswig", "sswigg", "sswigs", "sswin", "sswinj", "sswinh", "sswid", "sswil", "sswilg", "sswilm", "sswilb", "sswils", "sswilt", "sswilp", "sswilh", "sswim", "sswib", "sswibs", "sswis", "sswiss", "sswing", "sswij", "sswic", "sswik", "sswit", "sswip", "sswih", "ssyu", "ssyug", "ssyugg", "ssyugs", "ssyun", "ssyunj", "ssyunh", "ssyud", "ssyul", "ssyulg", "ssyulm", "ssyulb", "ssyuls", "ssyult", "ssyulp", "ssyulh", "ssyum", "ssyub", "ssyubs", "ssyus", "ssyuss", "ssyung", "ssyuj", "ssyuc", "ssyuk", "ssyut", "ssyup", "ssyuh", "sseu", "sseug", "sseugg", "sseugs", "sseun", "sseunj", "sseunh", "sseud", "sseul", "sseulg", "sseulm", "sseulb", "sseuls", "sseult", "sseulp", "sseulh"], ["sseum", "sseub", "sseubs", "sseus", "sseuss", "sseung", "sseuj", "sseuc", "sseuk", "sseut", "sseup", "sseuh", "ssyi", "ssyig", "ssyigg", "ssyigs", "ssyin", "ssyinj", "ssyinh", "ssyid", "ssyil", "ssyilg", "ssyilm", "ssyilb", "ssyils", "ssyilt", "ssyilp", "ssyilh", "ssyim", "ssyib", "ssyibs", "ssyis", "ssyiss", "ssying", "ssyij", "ssyic", "ssyik", "ssyit", "ssyip", "ssyih", "ssi", "ssig", "ssigg", "ssigs", "ssin", "ssinj", "ssinh", "ssid", "ssil", "ssilg", "ssilm", "ssilb", "ssils", "ssilt", "ssilp", "ssilh", "ssim", "ssib", "ssibs", "ssis", "ssiss", "ssing", "ssij", "ssic", "ssik", "ssit", "ssip", "ssih", "a", "ag", "agg", "ags", "an", "anj", "anh", "ad", "al", "alg", "alm", "alb", "als", "alt", "alp", "alh", "am", "ab", "abs", "as", "ass", "ang", "aj", "ac", "ak", "at", "ap", "ah", "ae", "aeg", "aegg", "aegs", "aen", "aenj", "aenh", "aed", "ael", "aelg", "aelm", "aelb", "aels", "aelt", "aelp", "aelh", "aem", "aeb", "aebs", "aes", "aess", "aeng", "aej", "aec", "aek", "aet", "aep", "aeh", "ya", "yag", "yagg", "yags", "yan", "yanj", "yanh", "yad", "yal", "yalg", "yalm", "yalb", "yals", "yalt", "yalp", "yalh", "yam", "yab", "yabs", "yas", "yass", "yang", "yaj", "yac", "yak", "yat", "yap", "yah", "yae", "yaeg", "yaegg", "yaegs", "yaen", "yaenj", "yaenh", "yaed", "yael", "yaelg", "yaelm", "yaelb", "yaels", "yaelt", "yaelp", "yaelh", "yaem", "yaeb", "yaebs", "yaes", "yaess", "yaeng", "yaej", "yaec", "yaek", "yaet", "yaep", "yaeh", "eo", "eog", "eogg", "eogs", "eon", "eonj", "eonh", "eod", "eol", "eolg", "eolm", "eolb", "eols", "eolt", "eolp", "eolh", "eom", "eob", "eobs", "eos", "eoss", "eong", "eoj", "eoc", "eok", "eot", "eop", "eoh", "e", "eg", "egg", "egs", "en", "enj", "enh", "ed", "el", "elg", "elm", "elb", "els", "elt", "elp", "elh", "em", "eb", "ebs", "es", "ess", "eng", "ej", "ec", "ek", "et", "ep", "eh", "yeo", "yeog", "yeogg", "yeogs", "yeon", "yeonj", "yeonh", "yeod", "yeol", "yeolg", "yeolm", "yeolb", "yeols", "yeolt", "yeolp", "yeolh", "yeom", "yeob", "yeobs", "yeos"], ["yeoss", "yeong", "yeoj", "yeoc", "yeok", "yeot", "yeop", "yeoh", "ye", "yeg", "yegg", "yegs", "yen", "yenj", "yenh", "yed", "yel", "yelg", "yelm", "yelb", "yels", "yelt", "yelp", "yelh", "yem", "yeb", "yebs", "yes", "yess", "yeng", "yej", "yec", "yek", "yet", "yep", "yeh", "o", "og", "ogg", "ogs", "on", "onj", "onh", "od", "ol", "olg", "olm", "olb", "ols", "olt", "olp", "olh", "om", "ob", "obs", "os", "oss", "ong", "oj", "oc", "ok", "ot", "op", "oh", "wa", "wag", "wagg", "wags", "wan", "wanj", "wanh", "wad", "wal", "walg", "walm", "walb", "wals", "walt", "walp", "walh", "wam", "wab", "wabs", "was", "wass", "wang", "waj", "wac", "wak", "wat", "wap", "wah", "wae", "waeg", "waegg", "waegs", "waen", "waenj", "waenh", "waed", "wael", "waelg", "waelm", "waelb", "waels", "waelt", "waelp", "waelh", "waem", "waeb", "waebs", "waes", "waess", "waeng", "waej", "waec", "waek", "waet", "waep", "waeh", "oe", "oeg", "oegg", "oegs", "oen", "oenj", "oenh", "oed", "oel", "oelg", "oelm", "oelb", "oels", "oelt", "oelp", "oelh", "oem", "oeb", "oebs", "oes", "oess", "oeng", "oej", "oec", "oek", "oet", "oep", "oeh", "yo", "yog", "yogg", "yogs", "yon", "yonj", "yonh", "yod", "yol", "yolg", "yolm", "yolb", "yols", "yolt", "yolp", "yolh", "yom", "yob", "yobs", "yos", "yoss", "yong", "yoj", "yoc", "yok", "yot", "yop", "yoh", "u", "ug", "ugg", "ugs", "un", "unj", "unh", "ud", "ul", "ulg", "ulm", "ulb", "uls", "ult", "ulp", "ulh", "um", "ub", "ubs", "us", "uss", "ung", "uj", "uc", "uk", "ut", "up", "uh", "weo", "weog", "weogg", "weogs", "weon", "weonj", "weonh", "weod", "weol", "weolg", "weolm", "weolb", "weols", "weolt", "weolp", "weolh", "weom", "weob", "weobs", "weos", "weoss", "weong", "weoj", "weoc", "weok", "weot", "weop", "weoh", "we", "weg", "wegg", "wegs", "wen", "wenj", "wenh", "wed", "wel", "welg", "welm", "welb", "wels", "welt", "welp", "welh", "wem", "web", "webs", "wes", "wess", "weng", "wej", "wec"], ["wek", "wet", "wep", "weh", "wi", "wig", "wigg", "wigs", "win", "winj", "winh", "wid", "wil", "wilg", "wilm", "wilb", "wils", "wilt", "wilp", "wilh", "wim", "wib", "wibs", "wis", "wiss", "wing", "wij", "wic", "wik", "wit", "wip", "wih", "yu", "yug", "yugg", "yugs", "yun", "yunj", "yunh", "yud", "yul", "yulg", "yulm", "yulb", "yuls", "yult", "yulp", "yulh", "yum", "yub", "yubs", "yus", "yuss", "yung", "yuj", "yuc", "yuk", "yut", "yup", "yuh", "eu", "eug", "eugg", "eugs", "eun", "eunj", "eunh", "eud", "eul", "eulg", "eulm", "eulb", "euls", "eult", "eulp", "eulh", "eum", "eub", "eubs", "eus", "euss", "eung", "euj", "euc", "euk", "eut", "eup", "euh", "yi", "yig", "yigg", "yigs", "yin", "yinj", "yinh", "yid", "yil", "yilg", "yilm", "yilb", "yils", "yilt", "yilp", "yilh", "yim", "yib", "yibs", "yis", "yiss", "ying", "yij", "yic", "yik", "yit", "yip", "yih", "i", "ig", "igg", "igs", "in", "inj", "inh", "id", "il", "ilg", "ilm", "ilb", "ils", "ilt", "ilp", "ilh", "im", "ib", "ibs", "is", "iss", "ing", "ij", "ic", "ik", "it", "ip", "ih", "ja", "jag", "jagg", "jags", "jan", "janj", "janh", "jad", "jal", "jalg", "jalm", "jalb", "jals", "jalt", "jalp", "jalh", "jam", "jab", "jabs", "jas", "jass", "jang", "jaj", "jac", "jak", "jat", "jap", "jah", "jae", "jaeg", "jaegg", "jaegs", "jaen", "jaenj", "jaenh", "jaed", "jael", "jaelg", "jaelm", "jaelb", "jaels", "jaelt", "jaelp", "jaelh", "jaem", "jaeb", "jaebs", "jaes", "jaess", "jaeng", "jaej", "jaec", "jaek", "jaet", "jaep", "jaeh", "jya", "jyag", "jyagg", "jyags", "jyan", "jyanj", "jyanh", "jyad", "jyal", "jyalg", "jyalm", "jyalb", "jyals", "jyalt", "jyalp", "jyalh", "jyam", "jyab", "jyabs", "jyas", "jyass", "jyang", "jyaj", "jyac", "jyak", "jyat", "jyap", "jyah", "jyae", "jyaeg", "jyaegg", "jyaegs", "jyaen", "jyaenj", "jyaenh", "jyaed", "jyael", "jyaelg", "jyaelm", "jyaelb", "jyaels", "jyaelt", "jyaelp", "jyaelh", "jyaem", "jyaeb", "jyaebs", "jyaes", "jyaess", "jyaeng", "jyaej", "jyaec", "jyaek", "jyaet", "jyaep", "jyaeh"], ["jeo", "jeog", "jeogg", "jeogs", "jeon", "jeonj", "jeonh", "jeod", "jeol", "jeolg", "jeolm", "jeolb", "jeols", "jeolt", "jeolp", "jeolh", "jeom", "jeob", "jeobs", "jeos", "jeoss", "jeong", "jeoj", "jeoc", "jeok", "jeot", "jeop", "jeoh", "je", "jeg", "jegg", "jegs", "jen", "jenj", "jenh", "jed", "jel", "jelg", "jelm", "jelb", "jels", "jelt", "jelp", "jelh", "jem", "jeb", "jebs", "jes", "jess", "jeng", "jej", "jec", "jek", "jet", "jep", "jeh", "jyeo", "jyeog", "jyeogg", "jyeogs", "jyeon", "jyeonj", "jyeonh", "jyeod", "jyeol", "jyeolg", "jyeolm", "jyeolb", "jyeols", "jyeolt", "jyeolp", "jyeolh", "jyeom", "jyeob", "jyeobs", "jyeos", "jyeoss", "jyeong", "jyeoj", "jyeoc", "jyeok", "jyeot", "jyeop", "jyeoh", "jye", "jyeg", "jyegg", "jyegs", "jyen", "jyenj", "jyenh", "jyed", "jyel", "jyelg", "jyelm", "jyelb", "jyels", "jyelt", "jyelp", "jyelh", "jyem", "jyeb", "jyebs", "jyes", "jyess", "jyeng", "jyej", "jyec", "jyek", "jyet", "jyep", "jyeh", "jo", "jog", "jogg", "jogs", "jon", "jonj", "jonh", "jod", "jol", "jolg", "jolm", "jolb", "jols", "jolt", "jolp", "jolh", "jom", "job", "jobs", "jos", "joss", "jong", "joj", "joc", "jok", "jot", "jop", "joh", "jwa", "jwag", "jwagg", "jwags", "jwan", "jwanj", "jwanh", "jwad", "jwal", "jwalg", "jwalm", "jwalb", "jwals", "jwalt", "jwalp", "jwalh", "jwam", "jwab", "jwabs", "jwas", "jwass", "jwang", "jwaj", "jwac", "jwak", "jwat", "jwap", "jwah", "jwae", "jwaeg", "jwaegg", "jwaegs", "jwaen", "jwaenj", "jwaenh", "jwaed", "jwael", "jwaelg", "jwaelm", "jwaelb", "jwaels", "jwaelt", "jwaelp", "jwaelh", "jwaem", "jwaeb", "jwaebs", "jwaes", "jwaess", "jwaeng", "jwaej", "jwaec", "jwaek", "jwaet", "jwaep", "jwaeh", "joe", "joeg", "joegg", "joegs", "joen", "joenj", "joenh", "joed", "joel", "joelg", "joelm", "joelb", "joels", "joelt", "joelp", "joelh", "joem", "joeb", "joebs", "joes", "joess", "joeng", "joej", "joec", "joek", "joet", "joep", "joeh", "jyo", "jyog", "jyogg", "jyogs", "jyon", "jyonj", "jyonh", "jyod", "jyol", "jyolg", "jyolm", "jyolb", "jyols", "jyolt", "jyolp", "jyolh", "jyom", "jyob", "jyobs", "jyos", "jyoss", "jyong", "jyoj", "jyoc", "jyok", "jyot", "jyop", "jyoh", "ju", "jug", "jugg", "jugs"], ["jun", "junj", "junh", "jud", "jul", "julg", "julm", "julb", "juls", "jult", "julp", "julh", "jum", "jub", "jubs", "jus", "juss", "jung", "juj", "juc", "juk", "jut", "jup", "juh", "jweo", "jweog", "jweogg", "jweogs", "jweon", "jweonj", "jweonh", "jweod", "jweol", "jweolg", "jweolm", "jweolb", "jweols", "jweolt", "jweolp", "jweolh", "jweom", "jweob", "jweobs", "jweos", "jweoss", "jweong", "jweoj", "jweoc", "jweok", "jweot", "jweop", "jweoh", "jwe", "jweg", "jwegg", "jwegs", "jwen", "jwenj", "jwenh", "jwed", "jwel", "jwelg", "jwelm", "jwelb", "jwels", "jwelt", "jwelp", "jwelh", "jwem", "jweb", "jwebs", "jwes", "jwess", "jweng", "jwej", "jwec", "jwek", "jwet", "jwep", "jweh", "jwi", "jwig", "jwigg", "jwigs", "jwin", "jwinj", "jwinh", "jwid", "jwil", "jwilg", "jwilm", "jwilb", "jwils", "jwilt", "jwilp", "jwilh", "jwim", "jwib", "jwibs", "jwis", "jwiss", "jwing", "jwij", "jwic", "jwik", "jwit", "jwip", "jwih", "jyu", "jyug", "jyugg", "jyugs", "jyun", "jyunj", "jyunh", "jyud", "jyul", "jyulg", "jyulm", "jyulb", "jyuls", "jyult", "jyulp", "jyulh", "jyum", "jyub", "jyubs", "jyus", "jyuss", "jyung", "jyuj", "jyuc", "jyuk", "jyut", "jyup", "jyuh", "jeu", "jeug", "jeugg", "jeugs", "jeun", "jeunj", "jeunh", "jeud", "jeul", "jeulg", "jeulm", "jeulb", "jeuls", "jeult", "jeulp", "jeulh", "jeum", "jeub", "jeubs", "jeus", "jeuss", "jeung", "jeuj", "jeuc", "jeuk", "jeut", "jeup", "jeuh", "jyi", "jyig", "jyigg", "jyigs", "jyin", "jyinj", "jyinh", "jyid", "jyil", "jyilg", "jyilm", "jyilb", "jyils", "jyilt", "jyilp", "jyilh", "jyim", "jyib", "jyibs", "jyis", "jyiss", "jying", "jyij", "jyic", "jyik", "jyit", "jyip", "jyih", "ji", "jig", "jigg", "jigs", "jin", "jinj", "jinh", "jid", "jil", "jilg", "jilm", "jilb", "jils", "jilt", "jilp", "jilh", "jim", "jib", "jibs", "jis", "jiss", "jing", "jij", "jic", "jik", "jit", "jip", "jih", "jja", "jjag", "jjagg", "jjags", "jjan", "jjanj", "jjanh", "jjad", "jjal", "jjalg", "jjalm", "jjalb", "jjals", "jjalt", "jjalp", "jjalh", "jjam", "jjab", "jjabs", "jjas", "jjass", "jjang", "jjaj", "jjac", "jjak", "jjat", "jjap", "jjah", "jjae", "jjaeg", "jjaegg", "jjaegs", "jjaen", "jjaenj", "jjaenh", "jjaed"], ["jjael", "jjaelg", "jjaelm", "jjaelb", "jjaels", "jjaelt", "jjaelp", "jjaelh", "jjaem", "jjaeb", "jjaebs", "jjaes", "jjaess", "jjaeng", "jjaej", "jjaec", "jjaek", "jjaet", "jjaep", "jjaeh", "jjya", "jjyag", "jjyagg", "jjyags", "jjyan", "jjyanj", "jjyanh", "jjyad", "jjyal", "jjyalg", "jjyalm", "jjyalb", "jjyals", "jjyalt", "jjyalp", "jjyalh", "jjyam", "jjyab", "jjyabs", "jjyas", "jjyass", "jjyang", "jjyaj", "jjyac", "jjyak", "jjyat", "jjyap", "jjyah", "jjyae", "jjyaeg", "jjyaegg", "jjyaegs", "jjyaen", "jjyaenj", "jjyaenh", "jjyaed", "jjyael", "jjyaelg", "jjyaelm", "jjyaelb", "jjyaels", "jjyaelt", "jjyaelp", "jjyaelh", "jjyaem", "jjyaeb", "jjyaebs", "jjyaes", "jjyaess", "jjyaeng", "jjyaej", "jjyaec", "jjyaek", "jjyaet", "jjyaep", "jjyaeh", "jjeo", "jjeog", "jjeogg", "jjeogs", "jjeon", "jjeonj", "jjeonh", "jjeod", "jjeol", "jjeolg", "jjeolm", "jjeolb", "jjeols", "jjeolt", "jjeolp", "jjeolh", "jjeom", "jjeob", "jjeobs", "jjeos", "jjeoss", "jjeong", "jjeoj", "jjeoc", "jjeok", "jjeot", "jjeop", "jjeoh", "jje", "jjeg", "jjegg", "jjegs", "jjen", "jjenj", "jjenh", "jjed", "jjel", "jjelg", "jjelm", "jjelb", "jjels", "jjelt", "jjelp", "jjelh", "jjem", "jjeb", "jjebs", "jjes", "jjess", "jjeng", "jjej", "jjec", "jjek", "jjet", "jjep", "jjeh", "jjyeo", "jjyeog", "jjyeogg", "jjyeogs", "jjyeon", "jjyeonj", "jjyeonh", "jjyeod", "jjyeol", "jjyeolg", "jjyeolm", "jjyeolb", "jjyeols", "jjyeolt", "jjyeolp", "jjyeolh", "jjyeom", "jjyeob", "jjyeobs", "jjyeos", "jjyeoss", "jjyeong", "jjyeoj", "jjyeoc", "jjyeok", "jjyeot", "jjyeop", "jjyeoh", "jjye", "jjyeg", "jjyegg", "jjyegs", "jjyen", "jjyenj", "jjyenh", "jjyed", "jjyel", "jjyelg", "jjyelm", "jjyelb", "jjyels", "jjyelt", "jjyelp", "jjyelh", "jjyem", "jjyeb", "jjyebs", "jjyes", "jjyess", "jjyeng", "jjyej", "jjyec", "jjyek", "jjyet", "jjyep", "jjyeh", "jjo", "jjog", "jjogg", "jjogs", "jjon", "jjonj", "jjonh", "jjod", "jjol", "jjolg", "jjolm", "jjolb", "jjols", "jjolt", "jjolp", "jjolh", "jjom", "jjob", "jjobs", "jjos", "jjoss", "jjong", "jjoj", "jjoc", "jjok", "jjot", "jjop", "jjoh", "jjwa", "jjwag", "jjwagg", "jjwags", "jjwan", "jjwanj", "jjwanh", "jjwad", "jjwal", "jjwalg", "jjwalm", "jjwalb", "jjwals", "jjwalt", "jjwalp", "jjwalh", "jjwam", "jjwab", "jjwabs", "jjwas", "jjwass", "jjwang", "jjwaj", "jjwac", "jjwak", "jjwat", "jjwap", "jjwah", "jjwae", "jjwaeg", "jjwaegg", "jjwaegs", "jjwaen", "jjwaenj", "jjwaenh", "jjwaed", "jjwael", "jjwaelg", "jjwaelm", "jjwaelb"], ["jjwaels", "jjwaelt", "jjwaelp", "jjwaelh", "jjwaem", "jjwaeb", "jjwaebs", "jjwaes", "jjwaess", "jjwaeng", "jjwaej", "jjwaec", "jjwaek", "jjwaet", "jjwaep", "jjwaeh", "jjoe", "jjoeg", "jjoegg", "jjoegs", "jjoen", "jjoenj", "jjoenh", "jjoed", "jjoel", "jjoelg", "jjoelm", "jjoelb", "jjoels", "jjoelt", "jjoelp", "jjoelh", "jjoem", "jjoeb", "jjoebs", "jjoes", "jjoess", "jjoeng", "jjoej", "jjoec", "jjoek", "jjoet", "jjoep", "jjoeh", "jjyo", "jjyog", "jjyogg", "jjyogs", "jjyon", "jjyonj", "jjyonh", "jjyod", "jjyol", "jjyolg", "jjyolm", "jjyolb", "jjyols", "jjyolt", "jjyolp", "jjyolh", "jjyom", "jjyob", "jjyobs", "jjyos", "jjyoss", "jjyong", "jjyoj", "jjyoc", "jjyok", "jjyot", "jjyop", "jjyoh", "jju", "jjug", "jjugg", "jjugs", "jjun", "jjunj", "jjunh", "jjud", "jjul", "jjulg", "jjulm", "jjulb", "jjuls", "jjult", "jjulp", "jjulh", "jjum", "jjub", "jjubs", "jjus", "jjuss", "jjung", "jjuj", "jjuc", "jjuk", "jjut", "jjup", "jjuh", "jjweo", "jjweog", "jjweogg", "jjweogs", "jjweon", "jjweonj", "jjweonh", "jjweod", "jjweol", "jjweolg", "jjweolm", "jjweolb", "jjweols", "jjweolt", "jjweolp", "jjweolh", "jjweom", "jjweob", "jjweobs", "jjweos", "jjweoss", "jjweong", "jjweoj", "jjweoc", "jjweok", "jjweot", "jjweop", "jjweoh", "jjwe", "jjweg", "jjwegg", "jjwegs", "jjwen", "jjwenj", "jjwenh", "jjwed", "jjwel", "jjwelg", "jjwelm", "jjwelb", "jjwels", "jjwelt", "jjwelp", "jjwelh", "jjwem", "jjweb", "jjwebs", "jjwes", "jjwess", "jjweng", "jjwej", "jjwec", "jjwek", "jjwet", "jjwep", "jjweh", "jjwi", "jjwig", "jjwigg", "jjwigs", "jjwin", "jjwinj", "jjwinh", "jjwid", "jjwil", "jjwilg", "jjwilm", "jjwilb", "jjwils", "jjwilt", "jjwilp", "jjwilh", "jjwim", "jjwib", "jjwibs", "jjwis", "jjwiss", "jjwing", "jjwij", "jjwic", "jjwik", "jjwit", "jjwip", "jjwih", "jjyu", "jjyug", "jjyugg", "jjyugs", "jjyun", "jjyunj", "jjyunh", "jjyud", "jjyul", "jjyulg", "jjyulm", "jjyulb", "jjyuls", "jjyult", "jjyulp", "jjyulh", "jjyum", "jjyub", "jjyubs", "jjyus", "jjyuss", "jjyung", "jjyuj", "jjyuc", "jjyuk", "jjyut", "jjyup", "jjyuh", "jjeu", "jjeug", "jjeugg", "jjeugs", "jjeun", "jjeunj", "jjeunh", "jjeud", "jjeul", "jjeulg", "jjeulm", "jjeulb", "jjeuls", "jjeult", "jjeulp", "jjeulh", "jjeum", "jjeub", "jjeubs", "jjeus", "jjeuss", "jjeung", "jjeuj", "jjeuc", "jjeuk", "jjeut", "jjeup", "jjeuh", "jjyi", "jjyig", "jjyigg", "jjyigs", "jjyin", "jjyinj", "jjyinh", "jjyid", "jjyil", "jjyilg", "jjyilm", "jjyilb", "jjyils", "jjyilt", "jjyilp", "jjyilh"], ["jjyim", "jjyib", "jjyibs", "jjyis", "jjyiss", "jjying", "jjyij", "jjyic", "jjyik", "jjyit", "jjyip", "jjyih", "jji", "jjig", "jjigg", "jjigs", "jjin", "jjinj", "jjinh", "jjid", "jjil", "jjilg", "jjilm", "jjilb", "jjils", "jjilt", "jjilp", "jjilh", "jjim", "jjib", "jjibs", "jjis", "jjiss", "jjing", "jjij", "jjic", "jjik", "jjit", "jjip", "jjih", "ca", "cag", "cagg", "cags", "can", "canj", "canh", "cad", "cal", "calg", "calm", "calb", "cals", "calt", "calp", "calh", "cam", "cab", "cabs", "cas", "cass", "cang", "caj", "cac", "cak", "cat", "cap", "cah", "cae", "caeg", "caegg", "caegs", "caen", "caenj", "caenh", "caed", "cael", "caelg", "caelm", "caelb", "caels", "caelt", "caelp", "caelh", "caem", "caeb", "caebs", "caes", "caess", "caeng", "caej", "caec", "caek", "caet", "caep", "caeh", "cya", "cyag", "cyagg", "cyags", "cyan", "cyanj", "cyanh", "cyad", "cyal", "cyalg", "cyalm", "cyalb", "cyals", "cyalt", "cyalp", "cyalh", "cyam", "cyab", "cyabs", "cyas", "cyass", "cyang", "cyaj", "cyac", "cyak", "cyat", "cyap", "cyah", "cyae", "cyaeg", "cyaegg", "cyaegs", "cyaen", "cyaenj", "cyaenh", "cyaed", "cyael", "cyaelg", "cyaelm", "cyaelb", "cyaels", "cyaelt", "cyaelp", "cyaelh", "cyaem", "cyaeb", "cyaebs", "cyaes", "cyaess", "cyaeng", "cyaej", "cyaec", "cyaek", "cyaet", "cyaep", "cyaeh", "ceo", "ceog", "ceogg", "ceogs", "ceon", "ceonj", "ceonh", "ceod", "ceol", "ceolg", "ceolm", "ceolb", "ceols", "ceolt", "ceolp", "ceolh", "ceom", "ceob", "ceobs", "ceos", "ceoss", "ceong", "ceoj", "ceoc", "ceok", "ceot", "ceop", "ceoh", "ce", "ceg", "cegg", "cegs", "cen", "cenj", "cenh", "ced", "cel", "celg", "celm", "celb", "cels", "celt", "celp", "celh", "cem", "ceb", "cebs", "ces", "cess", "ceng", "cej", "cec", "cek", "cet", "cep", "ceh", "cyeo", "cyeog", "cyeogg", "cyeogs", "cyeon", "cyeonj", "cyeonh", "cyeod", "cyeol", "cyeolg", "cyeolm", "cyeolb", "cyeols", "cyeolt", "cyeolp", "cyeolh", "cyeom", "cyeob", "cyeobs", "cyeos", "cyeoss", "cyeong", "cyeoj", "cyeoc", "cyeok", "cyeot", "cyeop", "cyeoh", "cye", "cyeg", "cyegg", "cyegs", "cyen", "cyenj", "cyenh", "cyed", "cyel", "cyelg", "cyelm", "cyelb", "cyels", "cyelt", "cyelp", "cyelh", "cyem", "cyeb", "cyebs", "cyes"], ["cyess", "cyeng", "cyej", "cyec", "cyek", "cyet", "cyep", "cyeh", "co", "cog", "cogg", "cogs", "con", "conj", "conh", "cod", "col", "colg", "colm", "colb", "cols", "colt", "colp", "colh", "com", "cob", "cobs", "cos", "coss", "cong", "coj", "coc", "cok", "cot", "cop", "coh", "cwa", "cwag", "cwagg", "cwags", "cwan", "cwanj", "cwanh", "cwad", "cwal", "cwalg", "cwalm", "cwalb", "cwals", "cwalt", "cwalp", "cwalh", "cwam", "cwab", "cwabs", "cwas", "cwass", "cwang", "cwaj", "cwac", "cwak", "cwat", "cwap", "cwah", "cwae", "cwaeg", "cwaegg", "cwaegs", "cwaen", "cwaenj", "cwaenh", "cwaed", "cwael", "cwaelg", "cwaelm", "cwaelb", "cwaels", "cwaelt", "cwaelp", "cwaelh", "cwaem", "cwaeb", "cwaebs", "cwaes", "cwaess", "cwaeng", "cwaej", "cwaec", "cwaek", "cwaet", "cwaep", "cwaeh", "coe", "coeg", "coegg", "coegs", "coen", "coenj", "coenh", "coed", "coel", "coelg", "coelm", "coelb", "coels", "coelt", "coelp", "coelh", "coem", "coeb", "coebs", "coes", "coess", "coeng", "coej", "coec", "coek", "coet", "coep", "coeh", "cyo", "cyog", "cyogg", "cyogs", "cyon", "cyonj", "cyonh", "cyod", "cyol", "cyolg", "cyolm", "cyolb", "cyols", "cyolt", "cyolp", "cyolh", "cyom", "cyob", "cyobs", "cyos", "cyoss", "cyong", "cyoj", "cyoc", "cyok", "cyot", "cyop", "cyoh", "cu", "cug", "cugg", "cugs", "cun", "cunj", "cunh", "cud", "cul", "culg", "culm", "culb", "culs", "cult", "culp", "culh", "cum", "cub", "cubs", "cus", "cuss", "cung", "cuj", "cuc", "cuk", "cut", "cup", "cuh", "cweo", "cweog", "cweogg", "cweogs", "cweon", "cweonj", "cweonh", "cweod", "cweol", "cweolg", "cweolm", "cweolb", "cweols", "cweolt", "cweolp", "cweolh", "cweom", "cweob", "cweobs", "cweos", "cweoss", "cweong", "cweoj", "cweoc", "cweok", "cweot", "cweop", "cweoh", "cwe", "cweg", "cwegg", "cwegs", "cwen", "cwenj", "cwenh", "cwed", "cwel", "cwelg", "cwelm", "cwelb", "cwels", "cwelt", "cwelp", "cwelh", "cwem", "cweb", "cwebs", "cwes", "cwess", "cweng", "cwej", "cwec", "cwek", "cwet", "cwep", "cweh", "cwi", "cwig", "cwigg", "cwigs", "cwin", "cwinj", "cwinh", "cwid", "cwil", "cwilg", "cwilm", "cwilb", "cwils", "cwilt", "cwilp", "cwilh", "cwim", "cwib", "cwibs", "cwis", "cwiss", "cwing", "cwij", "cwic"], ["cwik", "cwit", "cwip", "cwih", "cyu", "cyug", "cyugg", "cyugs", "cyun", "cyunj", "cyunh", "cyud", "cyul", "cyulg", "cyulm", "cyulb", "cyuls", "cyult", "cyulp", "cyulh", "cyum", "cyub", "cyubs", "cyus", "cyuss", "cyung", "cyuj", "cyuc", "cyuk", "cyut", "cyup", "cyuh", "ceu", "ceug", "ceugg", "ceugs", "ceun", "ceunj", "ceunh", "ceud", "ceul", "ceulg", "ceulm", "ceulb", "ceuls", "ceult", "ceulp", "ceulh", "ceum", "ceub", "ceubs", "ceus", "ceuss", "ceung", "ceuj", "ceuc", "ceuk", "ceut", "ceup", "ceuh", "cyi", "cyig", "cyigg", "cyigs", "cyin", "cyinj", "cyinh", "cyid", "cyil", "cyilg", "cyilm", "cyilb", "cyils", "cyilt", "cyilp", "cyilh", "cyim", "cyib", "cyibs", "cyis", "cyiss", "cying", "cyij", "cyic", "cyik", "cyit", "cyip", "cyih", "ci", "cig", "cigg", "cigs", "cin", "cinj", "cinh", "cid", "cil", "cilg", "cilm", "cilb", "cils", "cilt", "cilp", "cilh", "cim", "cib", "cibs", "cis", "ciss", "cing", "cij", "cic", "cik", "cit", "cip", "cih", "ka", "kag", "kagg", "kags", "kan", "kanj", "kanh", "kad", "kal", "kalg", "kalm", "kalb", "kals", "kalt", "kalp", "kalh", "kam", "kab", "kabs", "kas", "kass", "kang", "kaj", "kac", "kak", "kat", "kap", "kah", "kae", "kaeg", "kaegg", "kaegs", "kaen", "kaenj", "kaenh", "kaed", "kael", "kaelg", "kaelm", "kaelb", "kaels", "kaelt", "kaelp", "kaelh", "kaem", "kaeb", "kaebs", "kaes", "kaess", "kaeng", "kaej", "kaec", "kaek", "kaet", "kaep", "kaeh", "kya", "kyag", "kyagg", "kyags", "kyan", "kyanj", "kyanh", "kyad", "kyal", "kyalg", "kyalm", "kyalb", "kyals", "kyalt", "kyalp", "kyalh", "kyam", "kyab", "kyabs", "kyas", "kyass", "kyang", "kyaj", "kyac", "kyak", "kyat", "kyap", "kyah", "kyae", "kyaeg", "kyaegg", "kyaegs", "kyaen", "kyaenj", "kyaenh", "kyaed", "kyael", "kyaelg", "kyaelm", "kyaelb", "kyaels", "kyaelt", "kyaelp", "kyaelh", "kyaem", "kyaeb", "kyaebs", "kyaes", "kyaess", "kyaeng", "kyaej", "kyaec", "kyaek", "kyaet", "kyaep", "kyaeh", "keo", "keog", "keogg", "keogs", "keon", "keonj", "keonh", "keod", "keol", "keolg", "keolm", "keolb", "keols", "keolt", "keolp", "keolh", "keom", "keob", "keobs", "keos", "keoss", "keong", "keoj", "keoc", "keok", "keot", "keop", "keoh"], ["ke", "keg", "kegg", "kegs", "ken", "kenj", "kenh", "ked", "kel", "kelg", "kelm", "kelb", "kels", "kelt", "kelp", "kelh", "kem", "keb", "kebs", "kes", "kess", "keng", "kej", "kec", "kek", "ket", "kep", "keh", "kyeo", "kyeog", "kyeogg", "kyeogs", "kyeon", "kyeonj", "kyeonh", "kyeod", "kyeol", "kyeolg", "kyeolm", "kyeolb", "kyeols", "kyeolt", "kyeolp", "kyeolh", "kyeom", "kyeob", "kyeobs", "kyeos", "kyeoss", "kyeong", "kyeoj", "kyeoc", "kyeok", "kyeot", "kyeop", "kyeoh", "kye", "kyeg", "kyegg", "kyegs", "kyen", "kyenj", "kyenh", "kyed", "kyel", "kyelg", "kyelm", "kyelb", "kyels", "kyelt", "kyelp", "kyelh", "kyem", "kyeb", "kyebs", "kyes", "kyess", "kyeng", "kyej", "kyec", "kyek", "kyet", "kyep", "kyeh", "ko", "kog", "kogg", "kogs", "kon", "konj", "konh", "kod", "kol", "kolg", "kolm", "kolb", "kols", "kolt", "kolp", "kolh", "kom", "kob", "kobs", "kos", "koss", "kong", "koj", "koc", "kok", "kot", "kop", "koh", "kwa", "kwag", "kwagg", "kwags", "kwan", "kwanj", "kwanh", "kwad", "kwal", "kwalg", "kwalm", "kwalb", "kwals", "kwalt", "kwalp", "kwalh", "kwam", "kwab", "kwabs", "kwas", "kwass", "kwang", "kwaj", "kwac", "kwak", "kwat", "kwap", "kwah", "kwae", "kwaeg", "kwaegg", "kwaegs", "kwaen", "kwaenj", "kwaenh", "kwaed", "kwael", "kwaelg", "kwaelm", "kwaelb", "kwaels", "kwaelt", "kwaelp", "kwaelh", "kwaem", "kwaeb", "kwaebs", "kwaes", "kwaess", "kwaeng", "kwaej", "kwaec", "kwaek", "kwaet", "kwaep", "kwaeh", "koe", "koeg", "koegg", "koegs", "koen", "koenj", "koenh", "koed", "koel", "koelg", "koelm", "koelb", "koels", "koelt", "koelp", "koelh", "koem", "koeb", "koebs", "koes", "koess", "koeng", "koej", "koec", "koek", "koet", "koep", "koeh", "kyo", "kyog", "kyogg", "kyogs", "kyon", "kyonj", "kyonh", "kyod", "kyol", "kyolg", "kyolm", "kyolb", "kyols", "kyolt", "kyolp", "kyolh", "kyom", "kyob", "kyobs", "kyos", "kyoss", "kyong", "kyoj", "kyoc", "kyok", "kyot", "kyop", "kyoh", "ku", "kug", "kugg", "kugs", "kun", "kunj", "kunh", "kud", "kul", "kulg", "kulm", "kulb", "kuls", "kult", "kulp", "kulh", "kum", "kub", "kubs", "kus", "kuss", "kung", "kuj", "kuc", "kuk", "kut", "kup", "kuh", "kweo", "kweog", "kweogg", "kweogs"], ["kweon", "kweonj", "kweonh", "kweod", "kweol", "kweolg", "kweolm", "kweolb", "kweols", "kweolt", "kweolp", "kweolh", "kweom", "kweob", "kweobs", "kweos", "kweoss", "kweong", "kweoj", "kweoc", "kweok", "kweot", "kweop", "kweoh", "kwe", "kweg", "kwegg", "kwegs", "kwen", "kwenj", "kwenh", "kwed", "kwel", "kwelg", "kwelm", "kwelb", "kwels", "kwelt", "kwelp", "kwelh", "kwem", "kweb", "kwebs", "kwes", "kwess", "kweng", "kwej", "kwec", "kwek", "kwet", "kwep", "kweh", "kwi", "kwig", "kwigg", "kwigs", "kwin", "kwinj", "kwinh", "kwid", "kwil", "kwilg", "kwilm", "kwilb", "kwils", "kwilt", "kwilp", "kwilh", "kwim", "kwib", "kwibs", "kwis", "kwiss", "kwing", "kwij", "kwic", "kwik", "kwit", "kwip", "kwih", "kyu", "kyug", "kyugg", "kyugs", "kyun", "kyunj", "kyunh", "kyud", "kyul", "kyulg", "kyulm", "kyulb", "kyuls", "kyult", "kyulp", "kyulh", "kyum", "kyub", "kyubs", "kyus", "kyuss", "kyung", "kyuj", "kyuc", "kyuk", "kyut", "kyup", "kyuh", "keu", "keug", "keugg", "keugs", "keun", "keunj", "keunh", "keud", "keul", "keulg", "keulm", "keulb", "keuls", "keult", "keulp", "keulh", "keum", "keub", "keubs", "keus", "keuss", "keung", "keuj", "keuc", "keuk", "keut", "keup", "keuh", "kyi", "kyig", "kyigg", "kyigs", "kyin", "kyinj", "kyinh", "kyid", "kyil", "kyilg", "kyilm", "kyilb", "kyils", "kyilt", "kyilp", "kyilh", "kyim", "kyib", "kyibs", "kyis", "kyiss", "kying", "kyij", "kyic", "kyik", "kyit", "kyip", "kyih", "ki", "kig", "kigg", "kigs", "kin", "kinj", "kinh", "kid", "kil", "kilg", "kilm", "kilb", "kils", "kilt", "kilp", "kilh", "kim", "kib", "kibs", "kis", "kiss", "king", "kij", "kic", "kik", "kit", "kip", "kih", "ta", "tag", "tagg", "tags", "tan", "tanj", "tanh", "tad", "tal", "talg", "talm", "talb", "tals", "talt", "talp", "talh", "tam", "tab", "tabs", "tas", "tass", "tang", "taj", "tac", "tak", "tat", "tap", "tah", "tae", "taeg", "taegg", "taegs", "taen", "taenj", "taenh", "taed", "tael", "taelg", "taelm", "taelb", "taels", "taelt", "taelp", "taelh", "taem", "taeb", "taebs", "taes", "taess", "taeng", "taej", "taec", "taek", "taet", "taep", "taeh", "tya", "tyag", "tyagg", "tyags", "tyan", "tyanj", "tyanh", "tyad"], ["tyal", "tyalg", "tyalm", "tyalb", "tyals", "tyalt", "tyalp", "tyalh", "tyam", "tyab", "tyabs", "tyas", "tyass", "tyang", "tyaj", "tyac", "tyak", "tyat", "tyap", "tyah", "tyae", "tyaeg", "tyaegg", "tyaegs", "tyaen", "tyaenj", "tyaenh", "tyaed", "tyael", "tyaelg", "tyaelm", "tyaelb", "tyaels", "tyaelt", "tyaelp", "tyaelh", "tyaem", "tyaeb", "tyaebs", "tyaes", "tyaess", "tyaeng", "tyaej", "tyaec", "tyaek", "tyaet", "tyaep", "tyaeh", "teo", "teog", "teogg", "teogs", "teon", "teonj", "teonh", "teod", "teol", "teolg", "teolm", "teolb", "teols", "teolt", "teolp", "teolh", "teom", "teob", "teobs", "teos", "teoss", "teong", "teoj", "teoc", "teok", "teot", "teop", "teoh", "te", "teg", "tegg", "tegs", "ten", "tenj", "tenh", "ted", "tel", "telg", "telm", "telb", "tels", "telt", "telp", "telh", "tem", "teb", "tebs", "tes", "tess", "teng", "tej", "tec", "tek", "tet", "tep", "teh", "tyeo", "tyeog", "tyeogg", "tyeogs", "tyeon", "tyeonj", "tyeonh", "tyeod", "tyeol", "tyeolg", "tyeolm", "tyeolb", "tyeols", "tyeolt", "tyeolp", "tyeolh", "tyeom", "tyeob", "tyeobs", "tyeos", "tyeoss", "tyeong", "tyeoj", "tyeoc", "tyeok", "tyeot", "tyeop", "tyeoh", "tye", "tyeg", "tyegg", "tyegs", "tyen", "tyenj", "tyenh", "tyed", "tyel", "tyelg", "tyelm", "tyelb", "tyels", "tyelt", "tyelp", "tyelh", "tyem", "tyeb", "tyebs", "tyes", "tyess", "tyeng", "tyej", "tyec", "tyek", "tyet", "tyep", "tyeh", "to", "tog", "togg", "togs", "ton", "tonj", "tonh", "tod", "tol", "tolg", "tolm", "tolb", "tols", "tolt", "tolp", "tolh", "tom", "tob", "tobs", "tos", "toss", "tong", "toj", "toc", "tok", "tot", "top", "toh", "twa", "twag", "twagg", "twags", "twan", "twanj", "twanh", "twad", "twal", "twalg", "twalm", "twalb", "twals", "twalt", "twalp", "twalh", "twam", "twab", "twabs", "twas", "twass", "twang", "twaj", "twac", "twak", "twat", "twap", "twah", "twae", "twaeg", "twaegg", "twaegs", "twaen", "twaenj", "twaenh", "twaed", "twael", "twaelg", "twaelm", "twaelb", "twaels", "twaelt", "twaelp", "twaelh", "twaem", "twaeb", "twaebs", "twaes", "twaess", "twaeng", "twaej", "twaec", "twaek", "twaet", "twaep", "twaeh", "toe", "toeg", "toegg", "toegs", "toen", "toenj", "toenh", "toed", "toel", "toelg", "toelm", "toelb"], ["toels", "toelt", "toelp", "toelh", "toem", "toeb", "toebs", "toes", "toess", "toeng", "toej", "toec", "toek", "toet", "toep", "toeh", "tyo", "tyog", "tyogg", "tyogs", "tyon", "tyonj", "tyonh", "tyod", "tyol", "tyolg", "tyolm", "tyolb", "tyols", "tyolt", "tyolp", "tyolh", "tyom", "tyob", "tyobs", "tyos", "tyoss", "tyong", "tyoj", "tyoc", "tyok", "tyot", "tyop", "tyoh", "tu", "tug", "tugg", "tugs", "tun", "tunj", "tunh", "tud", "tul", "tulg", "tulm", "tulb", "tuls", "tult", "tulp", "tulh", "tum", "tub", "tubs", "tus", "tuss", "tung", "tuj", "tuc", "tuk", "tut", "tup", "tuh", "tweo", "tweog", "tweogg", "tweogs", "tweon", "tweonj", "tweonh", "tweod", "tweol", "tweolg", "tweolm", "tweolb", "tweols", "tweolt", "tweolp", "tweolh", "tweom", "tweob", "tweobs", "tweos", "tweoss", "tweong", "tweoj", "tweoc", "tweok", "tweot", "tweop", "tweoh", "twe", "tweg", "twegg", "twegs", "twen", "twenj", "twenh", "twed", "twel", "twelg", "twelm", "twelb", "twels", "twelt", "twelp", "twelh", "twem", "tweb", "twebs", "twes", "twess", "tweng", "twej", "twec", "twek", "twet", "twep", "tweh", "twi", "twig", "twigg", "twigs", "twin", "twinj", "twinh", "twid", "twil", "twilg", "twilm", "twilb", "twils", "twilt", "twilp", "twilh", "twim", "twib", "twibs", "twis", "twiss", "twing", "twij", "twic", "twik", "twit", "twip", "twih", "tyu", "tyug", "tyugg", "tyugs", "tyun", "tyunj", "tyunh", "tyud", "tyul", "tyulg", "tyulm", "tyulb", "tyuls", "tyult", "tyulp", "tyulh", "tyum", "tyub", "tyubs", "tyus", "tyuss", "tyung", "tyuj", "tyuc", "tyuk", "tyut", "tyup", "tyuh", "teu", "teug", "teugg", "teugs", "teun", "teunj", "teunh", "teud", "teul", "teulg", "teulm", "teulb", "teuls", "teult", "teulp", "teulh", "teum", "teub", "teubs", "teus", "teuss", "teung", "teuj", "teuc", "teuk", "teut", "teup", "teuh", "tyi", "tyig", "tyigg", "tyigs", "tyin", "tyinj", "tyinh", "tyid", "tyil", "tyilg", "tyilm", "tyilb", "tyils", "tyilt", "tyilp", "tyilh", "tyim", "tyib", "tyibs", "tyis", "tyiss", "tying", "tyij", "tyic", "tyik", "tyit", "tyip", "tyih", "ti", "tig", "tigg", "tigs", "tin", "tinj", "tinh", "tid", "til", "tilg", "tilm", "tilb", "tils", "tilt", "tilp", "tilh"], ["tim", "tib", "tibs", "tis", "tiss", "ting", "tij", "tic", "tik", "tit", "tip", "tih", "pa", "pag", "pagg", "pags", "pan", "panj", "panh", "pad", "pal", "palg", "palm", "palb", "pals", "palt", "palp", "palh", "pam", "pab", "pabs", "pas", "pass", "pang", "paj", "pac", "pak", "pat", "pap", "pah", "pae", "paeg", "paegg", "paegs", "paen", "paenj", "paenh", "paed", "pael", "paelg", "paelm", "paelb", "paels", "paelt", "paelp", "paelh", "paem", "paeb", "paebs", "paes", "paess", "paeng", "paej", "paec", "paek", "paet", "paep", "paeh", "pya", "pyag", "pyagg", "pyags", "pyan", "pyanj", "pyanh", "pyad", "pyal", "pyalg", "pyalm", "pyalb", "pyals", "pyalt", "pyalp", "pyalh", "pyam", "pyab", "pyabs", "pyas", "pyass", "pyang", "pyaj", "pyac", "pyak", "pyat", "pyap", "pyah", "pyae", "pyaeg", "pyaegg", "pyaegs", "pyaen", "pyaenj", "pyaenh", "pyaed", "pyael", "pyaelg", "pyaelm", "pyaelb", "pyaels", "pyaelt", "pyaelp", "pyaelh", "pyaem", "pyaeb", "pyaebs", "pyaes", "pyaess", "pyaeng", "pyaej", "pyaec", "pyaek", "pyaet", "pyaep", "pyaeh", "peo", "peog", "peogg", "peogs", "peon", "peonj", "peonh", "peod", "peol", "peolg", "peolm", "peolb", "peols", "peolt", "peolp", "peolh", "peom", "peob", "peobs", "peos", "peoss", "peong", "peoj", "peoc", "peok", "peot", "peop", "peoh", "pe", "peg", "pegg", "pegs", "pen", "penj", "penh", "ped", "pel", "pelg", "pelm", "pelb", "pels", "pelt", "pelp", "pelh", "pem", "peb", "pebs", "pes", "pess", "peng", "pej", "pec", "pek", "pet", "pep", "peh", "pyeo", "pyeog", "pyeogg", "pyeogs", "pyeon", "pyeonj", "pyeonh", "pyeod", "pyeol", "pyeolg", "pyeolm", "pyeolb", "pyeols", "pyeolt", "pyeolp", "pyeolh", "pyeom", "pyeob", "pyeobs", "pyeos", "pyeoss", "pyeong", "pyeoj", "pyeoc", "pyeok", "pyeot", "pyeop", "pyeoh", "pye", "pyeg", "pyegg", "pyegs", "pyen", "pyenj", "pyenh", "pyed", "pyel", "pyelg", "pyelm", "pyelb", "pyels", "pyelt", "pyelp", "pyelh", "pyem", "pyeb", "pyebs", "pyes", "pyess", "pyeng", "pyej", "pyec", "pyek", "pyet", "pyep", "pyeh", "po", "pog", "pogg", "pogs", "pon", "ponj", "ponh", "pod", "pol", "polg", "polm", "polb", "pols", "polt", "polp", "polh", "pom", "pob", "pobs", "pos"], ["poss", "pong", "poj", "poc", "pok", "pot", "pop", "poh", "pwa", "pwag", "pwagg", "pwags", "pwan", "pwanj", "pwanh", "pwad", "pwal", "pwalg", "pwalm", "pwalb", "pwals", "pwalt", "pwalp", "pwalh", "pwam", "pwab", "pwabs", "pwas", "pwass", "pwang", "pwaj", "pwac", "pwak", "pwat", "pwap", "pwah", "pwae", "pwaeg", "pwaegg", "pwaegs", "pwaen", "pwaenj", "pwaenh", "pwaed", "pwael", "pwaelg", "pwaelm", "pwaelb", "pwaels", "pwaelt", "pwaelp", "pwaelh", "pwaem", "pwaeb", "pwaebs", "pwaes", "pwaess", "pwaeng", "pwaej", "pwaec", "pwaek", "pwaet", "pwaep", "pwaeh", "poe", "poeg", "poegg", "poegs", "poen", "poenj", "poenh", "poed", "poel", "poelg", "poelm", "poelb", "poels", "poelt", "poelp", "poelh", "poem", "poeb", "poebs", "poes", "poess", "poeng", "poej", "poec", "poek", "poet", "poep", "poeh", "pyo", "pyog", "pyogg", "pyogs", "pyon", "pyonj", "pyonh", "pyod", "pyol", "pyolg", "pyolm", "pyolb", "pyols", "pyolt", "pyolp", "pyolh", "pyom", "pyob", "pyobs", "pyos", "pyoss", "pyong", "pyoj", "pyoc", "pyok", "pyot", "pyop", "pyoh", "pu", "pug", "pugg", "pugs", "pun", "punj", "punh", "pud", "pul", "pulg", "pulm", "pulb", "puls", "pult", "pulp", "pulh", "pum", "pub", "pubs", "pus", "puss", "pung", "puj", "puc", "puk", "put", "pup", "puh", "pweo", "pweog", "pweogg", "pweogs", "pweon", "pweonj", "pweonh", "pweod", "pweol", "pweolg", "pweolm", "pweolb", "pweols", "pweolt", "pweolp", "pweolh", "pweom", "pweob", "pweobs", "pweos", "pweoss", "pweong", "pweoj", "pweoc", "pweok", "pweot", "pweop", "pweoh", "pwe", "pweg", "pwegg", "pwegs", "pwen", "pwenj", "pwenh", "pwed", "pwel", "pwelg", "pwelm", "pwelb", "pwels", "pwelt", "pwelp", "pwelh", "pwem", "pweb", "pwebs", "pwes", "pwess", "pweng", "pwej", "pwec", "pwek", "pwet", "pwep", "pweh", "pwi", "pwig", "pwigg", "pwigs", "pwin", "pwinj", "pwinh", "pwid", "pwil", "pwilg", "pwilm", "pwilb", "pwils", "pwilt", "pwilp", "pwilh", "pwim", "pwib", "pwibs", "pwis", "pwiss", "pwing", "pwij", "pwic", "pwik", "pwit", "pwip", "pwih", "pyu", "pyug", "pyugg", "pyugs", "pyun", "pyunj", "pyunh", "pyud", "pyul", "pyulg", "pyulm", "pyulb", "pyuls", "pyult", "pyulp", "pyulh", "pyum", "pyub", "pyubs", "pyus", "pyuss", "pyung", "pyuj", "pyuc"], ["pyuk", "pyut", "pyup", "pyuh", "peu", "peug", "peugg", "peugs", "peun", "peunj", "peunh", "peud", "peul", "peulg", "peulm", "peulb", "peuls", "peult", "peulp", "peulh", "peum", "peub", "peubs", "peus", "peuss", "peung", "peuj", "peuc", "peuk", "peut", "peup", "peuh", "pyi", "pyig", "pyigg", "pyigs", "pyin", "pyinj", "pyinh", "pyid", "pyil", "pyilg", "pyilm", "pyilb", "pyils", "pyilt", "pyilp", "pyilh", "pyim", "pyib", "pyibs", "pyis", "pyiss", "pying", "pyij", "pyic", "pyik", "pyit", "pyip", "pyih", "pi", "pig", "pigg", "pigs", "pin", "pinj", "pinh", "pid", "pil", "pilg", "pilm", "pilb", "pils", "pilt", "pilp", "pilh", "pim", "pib", "pibs", "pis", "piss", "ping", "pij", "pic", "pik", "pit", "pip", "pih", "ha", "hag", "hagg", "hags", "han", "hanj", "hanh", "had", "hal", "halg", "halm", "halb", "hals", "halt", "halp", "halh", "ham", "hab", "habs", "has", "hass", "hang", "haj", "hac", "hak", "hat", "hap", "hah", "hae", "haeg", "haegg", "haegs", "haen", "haenj", "haenh", "haed", "hael", "haelg", "haelm", "haelb", "haels", "haelt", "haelp", "haelh", "haem", "haeb", "haebs", "haes", "haess", "haeng", "haej", "haec", "haek", "haet", "haep", "haeh", "hya", "hyag", "hyagg", "hyags", "hyan", "hyanj", "hyanh", "hyad", "hyal", "hyalg", "hyalm", "hyalb", "hyals", "hyalt", "hyalp", "hyalh", "hyam", "hyab", "hyabs", "hyas", "hyass", "hyang", "hyaj", "hyac", "hyak", "hyat", "hyap", "hyah", "hyae", "hyaeg", "hyaegg", "hyaegs", "hyaen", "hyaenj", "hyaenh", "hyaed", "hyael", "hyaelg", "hyaelm", "hyaelb", "hyaels", "hyaelt", "hyaelp", "hyaelh", "hyaem", "hyaeb", "hyaebs", "hyaes", "hyaess", "hyaeng", "hyaej", "hyaec", "hyaek", "hyaet", "hyaep", "hyaeh", "heo", "heog", "heogg", "heogs", "heon", "heonj", "heonh", "heod", "heol", "heolg", "heolm", "heolb", "heols", "heolt", "heolp", "heolh", "heom", "heob", "heobs", "heos", "heoss", "heong", "heoj", "heoc", "heok", "heot", "heop", "heoh", "he", "heg", "hegg", "hegs", "hen", "henj", "henh", "hed", "hel", "helg", "helm", "helb", "hels", "helt", "help", "helh", "hem", "heb", "hebs", "hes", "hess", "heng", "hej", "hec", "hek", "het", "hep", "heh"], ["hyeo", "hyeog", "hyeogg", "hyeogs", "hyeon", "hyeonj", "hyeonh", "hyeod", "hyeol", "hyeolg", "hyeolm", "hyeolb", "hyeols", "hyeolt", "hyeolp", "hyeolh", "hyeom", "hyeob", "hyeobs", "hyeos", "hyeoss", "hyeong", "hyeoj", "hyeoc", "hyeok", "hyeot", "hyeop", "hyeoh", "hye", "hyeg", "hyegg", "hyegs", "hyen", "hyenj", "hyenh", "hyed", "hyel", "hyelg", "hyelm", "hyelb", "hyels", "hyelt", "hyelp", "hyelh", "hyem", "hyeb", "hyebs", "hyes", "hyess", "hyeng", "hyej", "hyec", "hyek", "hyet", "hyep", "hyeh", "ho", "hog", "hogg", "hogs", "hon", "honj", "honh", "hod", "hol", "holg", "holm", "holb", "hols", "holt", "holp", "holh", "hom", "hob", "hobs", "hos", "hoss", "hong", "hoj", "hoc", "hok", "hot", "hop", "hoh", "hwa", "hwag", "hwagg", "hwags", "hwan", "hwanj", "hwanh", "hwad", "hwal", "hwalg", "hwalm", "hwalb", "hwals", "hwalt", "hwalp", "hwalh", "hwam", "hwab", "hwabs", "hwas", "hwass", "hwang", "hwaj", "hwac", "hwak", "hwat", "hwap", "hwah", "hwae", "hwaeg", "hwaegg", "hwaegs", "hwaen", "hwaenj", "hwaenh", "hwaed", "hwael", "hwaelg", "hwaelm", "hwaelb", "hwaels", "hwaelt", "hwaelp", "hwaelh", "hwaem", "hwaeb", "hwaebs", "hwaes", "hwaess", "hwaeng", "hwaej", "hwaec", "hwaek", "hwaet", "hwaep", "hwaeh", "hoe", "hoeg", "hoegg", "hoegs", "hoen", "hoenj", "hoenh", "hoed", "hoel", "hoelg", "hoelm", "hoelb", "hoels", "hoelt", "hoelp", "hoelh", "hoem", "hoeb", "hoebs", "hoes", "hoess", "hoeng", "hoej", "hoec", "hoek", "hoet", "hoep", "hoeh", "hyo", "hyog", "hyogg", "hyogs", "hyon", "hyonj", "hyonh", "hyod", "hyol", "hyolg", "hyolm", "hyolb", "hyols", "hyolt", "hyolp", "hyolh", "hyom", "hyob", "hyobs", "hyos", "hyoss", "hyong", "hyoj", "hyoc", "hyok", "hyot", "hyop", "hyoh", "hu", "hug", "hugg", "hugs", "hun", "hunj", "hunh", "hud", "hul", "hulg", "hulm", "hulb", "huls", "hult", "hulp", "hulh", "hum", "hub", "hubs", "hus", "huss", "hung", "huj", "huc", "huk", "hut", "hup", "huh", "hweo", "hweog", "hweogg", "hweogs", "hweon", "hweonj", "hweonh", "hweod", "hweol", "hweolg", "hweolm", "hweolb", "hweols", "hweolt", "hweolp", "hweolh", "hweom", "hweob", "hweobs", "hweos", "hweoss", "hweong", "hweoj", "hweoc", "hweok", "hweot", "hweop", "hweoh", "hwe", "hweg", "hwegg", "hwegs"], ["hwen", "hwenj", "hwenh", "hwed", "hwel", "hwelg", "hwelm", "hwelb", "hwels", "hwelt", "hwelp", "hwelh", "hwem", "hweb", "hwebs", "hwes", "hwess", "hweng", "hwej", "hwec", "hwek", "hwet", "hwep", "hweh", "hwi", "hwig", "hwigg", "hwigs", "hwin", "hwinj", "hwinh", "hwid", "hwil", "hwilg", "hwilm", "hwilb", "hwils", "hwilt", "hwilp", "hwilh", "hwim", "hwib", "hwibs", "hwis", "hwiss", "hwing", "hwij", "hwic", "hwik", "hwit", "hwip", "hwih", "hyu", "hyug", "hyugg", "hyugs", "hyun", "hyunj", "hyunh", "hyud", "hyul", "hyulg", "hyulm", "hyulb", "hyuls", "hyult", "hyulp", "hyulh", "hyum", "hyub", "hyubs", "hyus", "hyuss", "hyung", "hyuj", "hyuc", "hyuk", "hyut", "hyup", "hyuh", "heu", "heug", "heugg", "heugs", "heun", "heunj", "heunh", "heud", "heul", "heulg", "heulm", "heulb", "heuls", "heult", "heulp", "heulh", "heum", "heub", "heubs", "heus", "heuss", "heung", "heuj", "heuc", "heuk", "heut", "heup", "heuh", "hyi", "hyig", "hyigg", "hyigs", "hyin", "hyinj", "hyinh", "hyid", "hyil", "hyilg", "hyilm", "hyilb", "hyils", "hyilt", "hyilp", "hyilh", "hyim", "hyib", "hyibs", "hyis", "hyiss", "hying", "hyij", "hyic", "hyik", "hyit", "hyip", "hyih", "hi", "hig", "higg", "higs", "hin", "hinj", "hinh", "hid", "hil", "hilg", "hilm", "hilb", "hils", "hilt", "hilp", "hilh", "him", "hib", "hibs", "his", "hiss", "hing", "hij", "hic", "hik", "hit", "hip", "hih"], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], ["Kay", "Kayng", "Ke", "Ko", "Kol", "Koc", "Kwi", "Kwi", "Kyun", "Kul", "Kum", "Na", "Na", "Na", "La", "Na", "Na", "Na", "Na", "Na", "Nak", "Nak", "Nak", "Nak", "Nak", "Nak", "Nak", "Nan", "Nan", "Nan", "Nan", "Nan", "Nan", "Nam", "Nam", "Nam", "Nam", "Nap", "Nap", "Nap", "Nang", "Nang", "Nang", "Nang", "Nang", "Nay", "Nayng", "No", "No", "No", "No", "No", "No", "No", "No", "No", "No", "No", "No", "Nok", "Nok", "Nok", "Nok", "Nok", "Nok", "Non", "Nong", "Nong", "Nong", "Nong", "Noy", "Noy", "Noy", "Noy", "Nwu", "Nwu", "Nwu", "Nwu", "Nwu", "Nwu", "Nwu", "Nwu", "Nuk", "Nuk", "Num", "Nung", "Nung", "Nung", "Nung", "Nung", "Twu", "La", "Lak", "Lak", "Lan", "Lyeng", "Lo", "Lyul", "Li", "Pey", "Pen", "Pyen", "Pwu", "Pwul", "Pi", "Sak", "Sak", "Sam", "Sayk", "Sayng", "Sep", "Sey", "Sway", "Sin", "Sim", "Sip", "Ya", "Yak", "Yak", "Yang", "Yang", "Yang", "Yang", "Yang", "Yang", "Yang", "Yang", "Ye", "Ye", "Ye", "Ye", "Ye", "Ye", "Ye", "Ye", "Ye", "Ye", "Ye", "Yek", "Yek", "Yek", "Yek", "Yen", "Yen", "Yen", "Yen", "Yen", "Yen", "Yen", "Yen", "Yen", "Yen", "Yen", "Yen", "Yen", "Yen", "Yel", "Yel", "Yel", "Yel", "Yel", "Yel", "Yem", "Yem", "Yem", "Yem", "Yem", "Yep", "Yeng", "Yeng", "Yeng", "Yeng", "Yeng", "Yeng", "Yeng", "Yeng", "Yeng", "Yeng", "Yeng", "Yeng", "Yeng", "Yey", "Yey", "Yey", "Yey", "O", "Yo", "Yo", "Yo", "Yo", "Yo", "Yo", "Yo", "Yo", "Yo", "Yo", "Yong", "Wun", "Wen", "Yu", "Yu", "Yu", "Yu", "Yu", "Yu", "Yu", "Yu", "Yu", "Yu", "Yuk", "Yuk", "Yuk", "Yun", "Yun", "Yun", "Yun", "Yul", "Yul", "Yul", "Yul", "Yung", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "Ik", "Ik", "In", "In", "In", "In", "In", "In", "In", "Im", "Im", "Im", "Ip", "Ip", "Ip", "Cang", "Cek", "Ci", "Cip", "Cha", "Chek"], ["Chey", "Thak", "Thak", "Thang", "Thayk", "Thong", "Pho", "Phok", "Hang", "Hang", "Hyen", "Hwak", "Wu", "Huo", , , "Zhong", , "Qing", , , "Xi", "Zhu", "Yi", "Li", "Shen", "Xiang", "Fu", "Jing", "Jing", "Yu", , "Hagi", , "Zhu", , , "Yi", "Du", , , , "Fan", "Si", "Guan"], ["ff", "fi", "fl", "ffi", "ffl", "st", "st", , , , , , , , , , , , , "mn", "me", "mi", "vn", "mkh", , , , , , "yi", , "ay", "`", , "d", "h", "k", "l", "m", "m", "t", "+", "sh", "s", "sh", "s", "a", "a", , "b", "g", "d", "h", "v", "z", , "t", "y", "k", "k", "l", , "l", , "n", "n", , "p", "p", , "ts", "ts", "r", "sh", "t", "vo", "b", "k", "p", "l"], [], [], [, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , "~", , , , , , , , , , , , , "..", "--", "-", "_", "_", "(", ") ", "{", "} ", "[", "] ", "[(", ")] ", "<<", ">> ", "<", "> ", "[", "] ", "{", "}", , , , , , , , , , , , ",", ",", ".", , ";", ":", "?", "!", "-", "(", ")", "{", "}", "{", "}", "#", "&", "*", "+", "-", "<", ">", "=", , "\\", "$", "%", "@"], [, "!", '"', "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "/", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ":", ";", "<", "=", ">", "?", "@", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "[", "\\", "]", "^", "_", "`", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "{", "|", "}", "~", , , ".", "[", "]", ",", "*", "wo", "a", "i", "u", "e", "o", "ya", "yu", "yo", "tu", "+", "a", "i", "u", "e", "o", "ka", "ki", "ku", "ke", "ko", "sa", "si", "su", "se", "so", "ta", "ti", "tu", "te", "to", "na", "ni", "nu", "ne", "no", "ha", "hi", "hu", "he", "ho", "ma", "mi", "mu", "me", "mo", "ya", "yu", "yo", "ra", "ri", "ru", "re", "ro", "wa", "n", ":", ";", , "g", "gg", "gs", "n", "nj", "nh", "d", "dd", "r", "lg", "lm", "lb", "ls", "lt", "lp", "rh", "m", "b", "bb", "bs", "s", "ss", , "j", "jj", "c", "k", "t", "p", "h", , , , "a", "ae", "ya", "yae", "eo", "e", , , "yeo", "ye", "o", "wa", "wae", "oe", , , "yo", "u", "weo", "we", "wi", "yu", , , "eu", "yi", "i", , , , "/C", "PS", "!", "-", "|", "Y=", "W=", , "|", "-", "|", "-", "|", "#", "O", , , , , , , , , , , "{", "|", "}"]];
    const i$1 = {};
    for (let n2 = 0; n2 < a$1.length; n2++)
      for (let e2 = 0; e2 < a$1[n2].length; e2++) {
        const u2 = a$1[n2][e2];
        if ("string" == typeof u2 && u2.length) {
          const a2 = String.fromCharCode((n2 << 8) + e2);
          i$1[a2] = u2;
        }
      }
    function n(a2) {
      return (a2 || "").replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
    }
    function e(a2) {
      return /[\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u3005\u3007\u3021-\u3029\u3038-\u303B\u3400-\u4DBF\u4E00-\u9FFC\uF900-\uFA6D\uFA70-\uFAD9]|\uD81B[\uDFF0\uDFF1]|[\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]/.test(a2);
    }
    function u$1(a2) {
      return /[\s!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDEAD\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDFFF]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/.test(a2);
    }
    function o$1(a2) {
      switch (true) {
        case a2 instanceof Array:
          const i2 = [];
          for (let n3 = 0; n3 < a2.length; n3++)
            i2[n3] = o$1(a2[n3]);
          return i2;
        case a2 instanceof Date:
          return new Date(a2.valueOf());
        case a2 instanceof RegExp:
          return new RegExp(a2.source, a2.flags);
        case a2 instanceof Object:
          const n2 = {};
          for (const i3 in a2)
            Object.prototype.hasOwnProperty.call(a2, i3) && (n2[i3] = o$1(a2[i3]));
          return n2;
        default:
          return a2;
      }
    }
    function g(a2, i2) {
      if (0 === i2.length)
        return false;
      const n2 = Math.floor(i2.length / 2);
      switch (function(a3, i3) {
        switch (true) {
          case a3 < i3[0]:
            return -1;
          case a3 > i3[1]:
            return 1;
        }
        return 0;
      }(a2, i2[n2])) {
        case -1:
          return g(a2, i2.slice(0, n2));
        case 1:
          return g(a2, i2.slice(n2 + 1));
      }
      return true;
    }
    function h$1(a2, i2, e2, u2 = []) {
      const o2 = u2.length ? RegExp(u2.map(n).join("|"), "g") : null, g2 = RegExp(i2.source, i2.flags.replace("g", "") + "g");
      let h2 = "", s2 = 0;
      for (; ; ) {
        const i3 = g2.exec(a2);
        let n2 = "", u3 = 0;
        if (!i3) {
          h2 += a2.substring(s2, a2.length);
          break;
        }
        for (; ; ) {
          const a3 = o2 ? o2.exec(i3[0]) : null;
          if (!a3) {
            n2 += i3[0].length > u3 ? e2 : "";
            break;
          }
          n2 += a3.index > u3 ? e2 : "", n2 += a3[0], u3 = o2.lastIndex;
        }
        h2 += a2.substring(s2, i3.index) + n2, s2 = g2.lastIndex;
      }
      return h2;
    }
    a$1 = void 0;
    const s$1 = { ignore: [], replace: [], replaceAfter: [], trim: false, unknown: "", fixChineseSpacing: true };
    class y {
      constructor(a2 = o$1(s$1), n2 = i$1) {
        this.confOptions = a2, this.map = n2;
      }
      get options() {
        return o$1(Object.assign(Object.assign({}, s$1), this.confOptions));
      }
      config(a2, i2 = false) {
        return i2 && (this.confOptions = {}), a2 && "object" == typeof a2 && (this.confOptions = o$1(a2)), this.confOptions;
      }
      codeMapReplace(a2, i2 = [], n2) {
        let o2 = 0, h2 = "";
        const s2 = n2.fixChineseSpacing && e(a2);
        let y2 = false;
        for (let l2 = 0; l2 < a2.length; l2++) {
          const b2 = /[\uD800-\uDBFF]/.test(a2[l2]) && /[\uDC00-\uDFFF]/.test(a2[l2 + 1]) ? a2[l2] + a2[l2 + 1] : a2[l2];
          let w2, j2 = false;
          switch (true) {
            case g(o2, i2):
            case (2 === b2.length && g(o2 + 1, i2)):
              w2 = b2, i2.find((a3) => a3[1] >= o2 && a3[0] === o2) || (j2 = true);
              break;
            default:
              w2 = this.map[b2] || n2.unknown || "";
          }
          s2 && (!y2 || j2 || u$1(w2) || (w2 = " " + w2), y2 = !!w2 && e(b2)), h2 += w2, o2 += b2.length, l2 += b2.length - 1;
        }
        return h2;
      }
      formatReplaceOption(a2) {
        if (a2 instanceof Array)
          return o$1(a2);
        const i2 = [];
        for (const n2 in a2)
          Object.prototype.hasOwnProperty.call(a2, n2) && i2.push([n2, a2[n2]]);
        return i2;
      }
      replaceString(a2, i2, e2 = []) {
        const u2 = o$1(i2);
        let g2 = a2;
        for (let a3 = 0; a3 < u2.length; a3++) {
          const i3 = u2[a3];
          switch (true) {
            case i3[0] instanceof RegExp:
              i3[0] = RegExp(i3[0].source, i3[0].flags.replace("g", "") + "g");
              break;
            case ("string" == typeof i3[0] && i3[0].length > 0):
              i3[0] = RegExp(n(i3[0]), "g");
              break;
            default:
              i3[0] = /[^\s\S]/;
          }
          g2 = h$1(g2, i3[0], i3[1], e2);
        }
        return g2;
      }
      setData(a2, n2 = false) {
        if (n2 && (this.map = o$1(i$1)), a2 && "object" == typeof a2 && Object.keys(a2).length) {
          this.map = o$1(this.map);
          for (const i2 in a2)
            Object.prototype.hasOwnProperty.call(a2, i2) && i2.length < 3 && i2 <= "\u{10FFFF}" && (this.map[i2] = a2[i2]);
        }
        return this.map;
      }
      transliterate(a2, i2) {
        i2 = "object" == typeof i2 ? i2 : {};
        const n2 = o$1(Object.assign(Object.assign({}, this.options), i2));
        let e2 = "string" == typeof a2 ? a2 : String(a2);
        const u2 = this.formatReplaceOption(n2.replace);
        u2.length && (e2 = this.replaceString(e2, u2, n2.ignore));
        const g2 = n2.ignore && n2.ignore.length > 0 ? function(a3, i3) {
          let n3 = [];
          for (let e4 = 0; e4 < i3.length; e4++) {
            const u4 = i3[e4];
            let o2 = -1;
            for (; (o2 = a3.indexOf(u4, o2 + 1)) > -1; )
              n3.push([o2, o2 + u4.length - 1]);
          }
          const e3 = n3.sort((a4, i4) => a4[0] - i4[0] || a4[1] - i4[1]);
          let u3;
          return n3 = [], e3.forEach((a4) => !u3 || a4[0] > u3[1] + 1 ? n3.push(u3 = a4) : a4[1] > u3[1] && (u3[1] = a4[1])), n3;
        }(e2, n2.ignore) : [];
        e2 = this.codeMapReplace(e2, g2, n2), n2.trim && (e2 = e2.trim());
        const h2 = this.formatReplaceOption(n2.replaceAfter);
        return h2.length && (e2 = this.replaceString(e2, h2)), e2;
      }
    }
    const l$1 = Object.assign(Object.assign({}, o$1(s$1)), { allowedChars: "a-zA-Z0-9-_.~", lowercase: true, separator: "-", uppercase: false, fixChineseSpacing: true });
    const b$1 = new y(), w$1 = b$1.transliterate.bind(b$1);
    w$1.config = b$1.config.bind(b$1), w$1.setData = b$1.setData.bind(b$1);
    const j = new class extends y {
      get options() {
        return o$1(Object.assign(Object.assign({}, l$1), this.confOptions));
      }
      config(a2, i2 = false) {
        return i2 && (this.confOptions = {}), a2 && "object" == typeof a2 && (this.confOptions = o$1(a2)), this.confOptions;
      }
      slugify(a2, i2) {
        i2 = "object" == typeof i2 ? i2 : {};
        const e2 = o$1(Object.assign(Object.assign({}, this.options), i2)), u2 = e2.separator ? n(e2.separator) : "";
        let g2 = this.transliterate(a2, e2);
        return g2 = h$1(g2, RegExp(`[^${e2.allowedChars}]+`, "g"), e2.separator, e2.ignore), u2 && (g2 = g2.replace(RegExp(`^${u2}+|${u2}$`, "g"), "")), e2.lowercase && (g2 = g2.toLowerCase()), e2.uppercase && (g2 = g2.toUpperCase()), g2;
      }
    }(), d$1 = j.slugify.bind(j);
    d$1.config = j.config.bind(j), d$1.setData = j.setData.bind(j);
    /*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT */
    function isNothing(subject) {
      return typeof subject === "undefined" || subject === null;
    }
    function isObject$4(subject) {
      return typeof subject === "object" && subject !== null;
    }
    function toArray(sequence) {
      if (Array.isArray(sequence))
        return sequence;
      else if (isNothing(sequence))
        return [];
      return [sequence];
    }
    function extend(target, source) {
      var index2, length, key, sourceKeys;
      if (source) {
        sourceKeys = Object.keys(source);
        for (index2 = 0, length = sourceKeys.length; index2 < length; index2 += 1) {
          key = sourceKeys[index2];
          target[key] = source[key];
        }
      }
      return target;
    }
    function repeat(string2, count) {
      var result = "", cycle;
      for (cycle = 0; cycle < count; cycle += 1) {
        result += string2;
      }
      return result;
    }
    function isNegativeZero(number2) {
      return number2 === 0 && Number.NEGATIVE_INFINITY === 1 / number2;
    }
    var isNothing_1 = isNothing;
    var isObject_1 = isObject$4;
    var toArray_1 = toArray;
    var repeat_1 = repeat;
    var isNegativeZero_1 = isNegativeZero;
    var extend_1 = extend;
    var common = {
      isNothing: isNothing_1,
      isObject: isObject_1,
      toArray: toArray_1,
      repeat: repeat_1,
      isNegativeZero: isNegativeZero_1,
      extend: extend_1
    };
    function formatError$1(exception2, compact) {
      var where = "", message2 = exception2.reason || "(unknown reason)";
      if (!exception2.mark)
        return message2;
      if (exception2.mark.name) {
        where += 'in "' + exception2.mark.name + '" ';
      }
      where += "(" + (exception2.mark.line + 1) + ":" + (exception2.mark.column + 1) + ")";
      if (!compact && exception2.mark.snippet) {
        where += "\n\n" + exception2.mark.snippet;
      }
      return message2 + " " + where;
    }
    function YAMLException$1(reason, mark2) {
      Error.call(this);
      this.name = "YAMLException";
      this.reason = reason;
      this.mark = mark2;
      this.message = formatError$1(this, false);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack || "";
      }
    }
    YAMLException$1.prototype = Object.create(Error.prototype);
    YAMLException$1.prototype.constructor = YAMLException$1;
    YAMLException$1.prototype.toString = function toString2(compact) {
      return this.name + ": " + formatError$1(this, compact);
    };
    var exception = YAMLException$1;
    function getLine(buffer2, lineStart, lineEnd, position, maxLineLength) {
      var head = "";
      var tail = "";
      var maxHalfLength = Math.floor(maxLineLength / 2) - 1;
      if (position - lineStart > maxHalfLength) {
        head = " ... ";
        lineStart = position - maxHalfLength + head.length;
      }
      if (lineEnd - position > maxHalfLength) {
        tail = " ...";
        lineEnd = position + maxHalfLength - tail.length;
      }
      return {
        str: head + buffer2.slice(lineStart, lineEnd).replace(/\t/g, "\u2192") + tail,
        pos: position - lineStart + head.length
      };
    }
    function padStart(string2, max2) {
      return common.repeat(" ", max2 - string2.length) + string2;
    }
    function makeSnippet(mark2, options) {
      options = Object.create(options || null);
      if (!mark2.buffer)
        return null;
      if (!options.maxLength)
        options.maxLength = 79;
      if (typeof options.indent !== "number")
        options.indent = 1;
      if (typeof options.linesBefore !== "number")
        options.linesBefore = 3;
      if (typeof options.linesAfter !== "number")
        options.linesAfter = 2;
      var re = /\r?\n|\r|\0/g;
      var lineStarts = [0];
      var lineEnds = [];
      var match;
      var foundLineNo = -1;
      while (match = re.exec(mark2.buffer)) {
        lineEnds.push(match.index);
        lineStarts.push(match.index + match[0].length);
        if (mark2.position <= match.index && foundLineNo < 0) {
          foundLineNo = lineStarts.length - 2;
        }
      }
      if (foundLineNo < 0)
        foundLineNo = lineStarts.length - 1;
      var result = "", i2, line;
      var lineNoLength = Math.min(mark2.line + options.linesAfter, lineEnds.length).toString().length;
      var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);
      for (i2 = 1; i2 <= options.linesBefore; i2++) {
        if (foundLineNo - i2 < 0)
          break;
        line = getLine(
          mark2.buffer,
          lineStarts[foundLineNo - i2],
          lineEnds[foundLineNo - i2],
          mark2.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i2]),
          maxLineLength
        );
        result = common.repeat(" ", options.indent) + padStart((mark2.line - i2 + 1).toString(), lineNoLength) + " | " + line.str + "\n" + result;
      }
      line = getLine(mark2.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark2.position, maxLineLength);
      result += common.repeat(" ", options.indent) + padStart((mark2.line + 1).toString(), lineNoLength) + " | " + line.str + "\n";
      result += common.repeat("-", options.indent + lineNoLength + 3 + line.pos) + "^\n";
      for (i2 = 1; i2 <= options.linesAfter; i2++) {
        if (foundLineNo + i2 >= lineEnds.length)
          break;
        line = getLine(
          mark2.buffer,
          lineStarts[foundLineNo + i2],
          lineEnds[foundLineNo + i2],
          mark2.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i2]),
          maxLineLength
        );
        result += common.repeat(" ", options.indent) + padStart((mark2.line + i2 + 1).toString(), lineNoLength) + " | " + line.str + "\n";
      }
      return result.replace(/\n$/, "");
    }
    var snippet = makeSnippet;
    var TYPE_CONSTRUCTOR_OPTIONS = [
      "kind",
      "multi",
      "resolve",
      "construct",
      "instanceOf",
      "predicate",
      "represent",
      "representName",
      "defaultStyle",
      "styleAliases"
    ];
    var YAML_NODE_KINDS = [
      "scalar",
      "sequence",
      "mapping"
    ];
    function compileStyleAliases(map2) {
      var result = {};
      if (map2 !== null) {
        Object.keys(map2).forEach(function(style2) {
          map2[style2].forEach(function(alias) {
            result[String(alias)] = style2;
          });
        });
      }
      return result;
    }
    function Type$1(tag, options) {
      options = options || {};
      Object.keys(options).forEach(function(name) {
        if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
          throw new exception('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
        }
      });
      this.options = options;
      this.tag = tag;
      this.kind = options["kind"] || null;
      this.resolve = options["resolve"] || function() {
        return true;
      };
      this.construct = options["construct"] || function(data) {
        return data;
      };
      this.instanceOf = options["instanceOf"] || null;
      this.predicate = options["predicate"] || null;
      this.represent = options["represent"] || null;
      this.representName = options["representName"] || null;
      this.defaultStyle = options["defaultStyle"] || null;
      this.multi = options["multi"] || false;
      this.styleAliases = compileStyleAliases(options["styleAliases"] || null);
      if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
        throw new exception('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
      }
    }
    var type$2 = Type$1;
    function compileList(schema2, name) {
      var result = [];
      schema2[name].forEach(function(currentType) {
        var newIndex = result.length;
        result.forEach(function(previousType, previousIndex) {
          if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) {
            newIndex = previousIndex;
          }
        });
        result[newIndex] = currentType;
      });
      return result;
    }
    function compileMap() {
      var result = {
        scalar: {},
        sequence: {},
        mapping: {},
        fallback: {},
        multi: {
          scalar: [],
          sequence: [],
          mapping: [],
          fallback: []
        }
      }, index2, length;
      function collectType(type2) {
        if (type2.multi) {
          result.multi[type2.kind].push(type2);
          result.multi["fallback"].push(type2);
        } else {
          result[type2.kind][type2.tag] = result["fallback"][type2.tag] = type2;
        }
      }
      for (index2 = 0, length = arguments.length; index2 < length; index2 += 1) {
        arguments[index2].forEach(collectType);
      }
      return result;
    }
    function Schema$1(definition) {
      return this.extend(definition);
    }
    Schema$1.prototype.extend = function extend2(definition) {
      var implicit = [];
      var explicit = [];
      if (definition instanceof type$2) {
        explicit.push(definition);
      } else if (Array.isArray(definition)) {
        explicit = explicit.concat(definition);
      } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {
        if (definition.implicit)
          implicit = implicit.concat(definition.implicit);
        if (definition.explicit)
          explicit = explicit.concat(definition.explicit);
      } else {
        throw new exception("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");
      }
      implicit.forEach(function(type$12) {
        if (!(type$12 instanceof type$2)) {
          throw new exception("Specified list of YAML types (or a single Type object) contains a non-Type object.");
        }
        if (type$12.loadKind && type$12.loadKind !== "scalar") {
          throw new exception("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
        }
        if (type$12.multi) {
          throw new exception("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.");
        }
      });
      explicit.forEach(function(type$12) {
        if (!(type$12 instanceof type$2)) {
          throw new exception("Specified list of YAML types (or a single Type object) contains a non-Type object.");
        }
      });
      var result = Object.create(Schema$1.prototype);
      result.implicit = (this.implicit || []).concat(implicit);
      result.explicit = (this.explicit || []).concat(explicit);
      result.compiledImplicit = compileList(result, "implicit");
      result.compiledExplicit = compileList(result, "explicit");
      result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);
      return result;
    };
    var schema = Schema$1;
    var str = new type$2("tag:yaml.org,2002:str", {
      kind: "scalar",
      construct: function(data) {
        return data !== null ? data : "";
      }
    });
    var seq = new type$2("tag:yaml.org,2002:seq", {
      kind: "sequence",
      construct: function(data) {
        return data !== null ? data : [];
      }
    });
    var map$2 = new type$2("tag:yaml.org,2002:map", {
      kind: "mapping",
      construct: function(data) {
        return data !== null ? data : {};
      }
    });
    var failsafe = new schema({
      explicit: [
        str,
        seq,
        map$2
      ]
    });
    function resolveYamlNull(data) {
      if (data === null)
        return true;
      var max2 = data.length;
      return max2 === 1 && data === "~" || max2 === 4 && (data === "null" || data === "Null" || data === "NULL");
    }
    function constructYamlNull() {
      return null;
    }
    function isNull$1(object2) {
      return object2 === null;
    }
    var _null = new type$2("tag:yaml.org,2002:null", {
      kind: "scalar",
      resolve: resolveYamlNull,
      construct: constructYamlNull,
      predicate: isNull$1,
      represent: {
        canonical: function() {
          return "~";
        },
        lowercase: function() {
          return "null";
        },
        uppercase: function() {
          return "NULL";
        },
        camelcase: function() {
          return "Null";
        },
        empty: function() {
          return "";
        }
      },
      defaultStyle: "lowercase"
    });
    function resolveYamlBoolean(data) {
      if (data === null)
        return false;
      var max2 = data.length;
      return max2 === 4 && (data === "true" || data === "True" || data === "TRUE") || max2 === 5 && (data === "false" || data === "False" || data === "FALSE");
    }
    function constructYamlBoolean(data) {
      return data === "true" || data === "True" || data === "TRUE";
    }
    function isBoolean$2(object2) {
      return Object.prototype.toString.call(object2) === "[object Boolean]";
    }
    var bool = new type$2("tag:yaml.org,2002:bool", {
      kind: "scalar",
      resolve: resolveYamlBoolean,
      construct: constructYamlBoolean,
      predicate: isBoolean$2,
      represent: {
        lowercase: function(object2) {
          return object2 ? "true" : "false";
        },
        uppercase: function(object2) {
          return object2 ? "TRUE" : "FALSE";
        },
        camelcase: function(object2) {
          return object2 ? "True" : "False";
        }
      },
      defaultStyle: "lowercase"
    });
    function isHexCode(c2) {
      return 48 <= c2 && c2 <= 57 || 65 <= c2 && c2 <= 70 || 97 <= c2 && c2 <= 102;
    }
    function isOctCode(c2) {
      return 48 <= c2 && c2 <= 55;
    }
    function isDecCode(c2) {
      return 48 <= c2 && c2 <= 57;
    }
    function resolveYamlInteger(data) {
      if (data === null)
        return false;
      var max2 = data.length, index2 = 0, hasDigits = false, ch;
      if (!max2)
        return false;
      ch = data[index2];
      if (ch === "-" || ch === "+") {
        ch = data[++index2];
      }
      if (ch === "0") {
        if (index2 + 1 === max2)
          return true;
        ch = data[++index2];
        if (ch === "b") {
          index2++;
          for (; index2 < max2; index2++) {
            ch = data[index2];
            if (ch === "_")
              continue;
            if (ch !== "0" && ch !== "1")
              return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
        if (ch === "x") {
          index2++;
          for (; index2 < max2; index2++) {
            ch = data[index2];
            if (ch === "_")
              continue;
            if (!isHexCode(data.charCodeAt(index2)))
              return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
        if (ch === "o") {
          index2++;
          for (; index2 < max2; index2++) {
            ch = data[index2];
            if (ch === "_")
              continue;
            if (!isOctCode(data.charCodeAt(index2)))
              return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
      }
      if (ch === "_")
        return false;
      for (; index2 < max2; index2++) {
        ch = data[index2];
        if (ch === "_")
          continue;
        if (!isDecCode(data.charCodeAt(index2))) {
          return false;
        }
        hasDigits = true;
      }
      if (!hasDigits || ch === "_")
        return false;
      return true;
    }
    function constructYamlInteger(data) {
      var value = data, sign = 1, ch;
      if (value.indexOf("_") !== -1) {
        value = value.replace(/_/g, "");
      }
      ch = value[0];
      if (ch === "-" || ch === "+") {
        if (ch === "-")
          sign = -1;
        value = value.slice(1);
        ch = value[0];
      }
      if (value === "0")
        return 0;
      if (ch === "0") {
        if (value[1] === "b")
          return sign * parseInt(value.slice(2), 2);
        if (value[1] === "x")
          return sign * parseInt(value.slice(2), 16);
        if (value[1] === "o")
          return sign * parseInt(value.slice(2), 8);
      }
      return sign * parseInt(value, 10);
    }
    function isInteger$1(object2) {
      return Object.prototype.toString.call(object2) === "[object Number]" && (object2 % 1 === 0 && !common.isNegativeZero(object2));
    }
    var int = new type$2("tag:yaml.org,2002:int", {
      kind: "scalar",
      resolve: resolveYamlInteger,
      construct: constructYamlInteger,
      predicate: isInteger$1,
      represent: {
        binary: function(obj) {
          return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
        },
        octal: function(obj) {
          return obj >= 0 ? "0o" + obj.toString(8) : "-0o" + obj.toString(8).slice(1);
        },
        decimal: function(obj) {
          return obj.toString(10);
        },
        hexadecimal: function(obj) {
          return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
        }
      },
      defaultStyle: "decimal",
      styleAliases: {
        binary: [2, "bin"],
        octal: [8, "oct"],
        decimal: [10, "dec"],
        hexadecimal: [16, "hex"]
      }
    });
    var YAML_FLOAT_PATTERN = new RegExp(
      "^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$"
    );
    function resolveYamlFloat(data) {
      if (data === null)
        return false;
      if (!YAML_FLOAT_PATTERN.test(data) || data[data.length - 1] === "_") {
        return false;
      }
      return true;
    }
    function constructYamlFloat(data) {
      var value, sign;
      value = data.replace(/_/g, "").toLowerCase();
      sign = value[0] === "-" ? -1 : 1;
      if ("+-".indexOf(value[0]) >= 0) {
        value = value.slice(1);
      }
      if (value === ".inf") {
        return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
      } else if (value === ".nan") {
        return NaN;
      }
      return sign * parseFloat(value, 10);
    }
    var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
    function representYamlFloat(object2, style2) {
      var res;
      if (isNaN(object2)) {
        switch (style2) {
          case "lowercase":
            return ".nan";
          case "uppercase":
            return ".NAN";
          case "camelcase":
            return ".NaN";
        }
      } else if (Number.POSITIVE_INFINITY === object2) {
        switch (style2) {
          case "lowercase":
            return ".inf";
          case "uppercase":
            return ".INF";
          case "camelcase":
            return ".Inf";
        }
      } else if (Number.NEGATIVE_INFINITY === object2) {
        switch (style2) {
          case "lowercase":
            return "-.inf";
          case "uppercase":
            return "-.INF";
          case "camelcase":
            return "-.Inf";
        }
      } else if (common.isNegativeZero(object2)) {
        return "-0.0";
      }
      res = object2.toString(10);
      return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
    }
    function isFloat(object2) {
      return Object.prototype.toString.call(object2) === "[object Number]" && (object2 % 1 !== 0 || common.isNegativeZero(object2));
    }
    var float = new type$2("tag:yaml.org,2002:float", {
      kind: "scalar",
      resolve: resolveYamlFloat,
      construct: constructYamlFloat,
      predicate: isFloat,
      represent: representYamlFloat,
      defaultStyle: "lowercase"
    });
    var json = failsafe.extend({
      implicit: [
        _null,
        bool,
        int,
        float
      ]
    });
    var core = json;
    var YAML_DATE_REGEXP = new RegExp(
      "^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"
    );
    var YAML_TIMESTAMP_REGEXP = new RegExp(
      "^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$"
    );
    function resolveYamlTimestamp(data) {
      if (data === null)
        return false;
      if (YAML_DATE_REGEXP.exec(data) !== null)
        return true;
      if (YAML_TIMESTAMP_REGEXP.exec(data) !== null)
        return true;
      return false;
    }
    function constructYamlTimestamp(data) {
      var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date2;
      match = YAML_DATE_REGEXP.exec(data);
      if (match === null)
        match = YAML_TIMESTAMP_REGEXP.exec(data);
      if (match === null)
        throw new Error("Date resolve error");
      year = +match[1];
      month = +match[2] - 1;
      day = +match[3];
      if (!match[4]) {
        return new Date(Date.UTC(year, month, day));
      }
      hour = +match[4];
      minute = +match[5];
      second = +match[6];
      if (match[7]) {
        fraction = match[7].slice(0, 3);
        while (fraction.length < 3) {
          fraction += "0";
        }
        fraction = +fraction;
      }
      if (match[9]) {
        tz_hour = +match[10];
        tz_minute = +(match[11] || 0);
        delta = (tz_hour * 60 + tz_minute) * 6e4;
        if (match[9] === "-")
          delta = -delta;
      }
      date2 = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
      if (delta)
        date2.setTime(date2.getTime() - delta);
      return date2;
    }
    function representYamlTimestamp(object2) {
      return object2.toISOString();
    }
    var timestamp = new type$2("tag:yaml.org,2002:timestamp", {
      kind: "scalar",
      resolve: resolveYamlTimestamp,
      construct: constructYamlTimestamp,
      instanceOf: Date,
      represent: representYamlTimestamp
    });
    function resolveYamlMerge(data) {
      return data === "<<" || data === null;
    }
    var merge$1 = new type$2("tag:yaml.org,2002:merge", {
      kind: "scalar",
      resolve: resolveYamlMerge
    });
    var BASE64_MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
    function resolveYamlBinary(data) {
      if (data === null)
        return false;
      var code, idx, bitlen = 0, max2 = data.length, map2 = BASE64_MAP;
      for (idx = 0; idx < max2; idx++) {
        code = map2.indexOf(data.charAt(idx));
        if (code > 64)
          continue;
        if (code < 0)
          return false;
        bitlen += 6;
      }
      return bitlen % 8 === 0;
    }
    function constructYamlBinary(data) {
      var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max2 = input.length, map2 = BASE64_MAP, bits = 0, result = [];
      for (idx = 0; idx < max2; idx++) {
        if (idx % 4 === 0 && idx) {
          result.push(bits >> 16 & 255);
          result.push(bits >> 8 & 255);
          result.push(bits & 255);
        }
        bits = bits << 6 | map2.indexOf(input.charAt(idx));
      }
      tailbits = max2 % 4 * 6;
      if (tailbits === 0) {
        result.push(bits >> 16 & 255);
        result.push(bits >> 8 & 255);
        result.push(bits & 255);
      } else if (tailbits === 18) {
        result.push(bits >> 10 & 255);
        result.push(bits >> 2 & 255);
      } else if (tailbits === 12) {
        result.push(bits >> 4 & 255);
      }
      return new Uint8Array(result);
    }
    function representYamlBinary(object2) {
      var result = "", bits = 0, idx, tail, max2 = object2.length, map2 = BASE64_MAP;
      for (idx = 0; idx < max2; idx++) {
        if (idx % 3 === 0 && idx) {
          result += map2[bits >> 18 & 63];
          result += map2[bits >> 12 & 63];
          result += map2[bits >> 6 & 63];
          result += map2[bits & 63];
        }
        bits = (bits << 8) + object2[idx];
      }
      tail = max2 % 3;
      if (tail === 0) {
        result += map2[bits >> 18 & 63];
        result += map2[bits >> 12 & 63];
        result += map2[bits >> 6 & 63];
        result += map2[bits & 63];
      } else if (tail === 2) {
        result += map2[bits >> 10 & 63];
        result += map2[bits >> 4 & 63];
        result += map2[bits << 2 & 63];
        result += map2[64];
      } else if (tail === 1) {
        result += map2[bits >> 2 & 63];
        result += map2[bits << 4 & 63];
        result += map2[64];
        result += map2[64];
      }
      return result;
    }
    function isBinary(obj) {
      return Object.prototype.toString.call(obj) === "[object Uint8Array]";
    }
    var binary = new type$2("tag:yaml.org,2002:binary", {
      kind: "scalar",
      resolve: resolveYamlBinary,
      construct: constructYamlBinary,
      predicate: isBinary,
      represent: representYamlBinary
    });
    var _hasOwnProperty$3 = Object.prototype.hasOwnProperty;
    var _toString$2 = Object.prototype.toString;
    function resolveYamlOmap(data) {
      if (data === null)
        return true;
      var objectKeys2 = [], index2, length, pair, pairKey, pairHasKey, object2 = data;
      for (index2 = 0, length = object2.length; index2 < length; index2 += 1) {
        pair = object2[index2];
        pairHasKey = false;
        if (_toString$2.call(pair) !== "[object Object]")
          return false;
        for (pairKey in pair) {
          if (_hasOwnProperty$3.call(pair, pairKey)) {
            if (!pairHasKey)
              pairHasKey = true;
            else
              return false;
          }
        }
        if (!pairHasKey)
          return false;
        if (objectKeys2.indexOf(pairKey) === -1)
          objectKeys2.push(pairKey);
        else
          return false;
      }
      return true;
    }
    function constructYamlOmap(data) {
      return data !== null ? data : [];
    }
    var omap = new type$2("tag:yaml.org,2002:omap", {
      kind: "sequence",
      resolve: resolveYamlOmap,
      construct: constructYamlOmap
    });
    var _toString$1 = Object.prototype.toString;
    function resolveYamlPairs(data) {
      if (data === null)
        return true;
      var index2, length, pair, keys2, result, object2 = data;
      result = new Array(object2.length);
      for (index2 = 0, length = object2.length; index2 < length; index2 += 1) {
        pair = object2[index2];
        if (_toString$1.call(pair) !== "[object Object]")
          return false;
        keys2 = Object.keys(pair);
        if (keys2.length !== 1)
          return false;
        result[index2] = [keys2[0], pair[keys2[0]]];
      }
      return true;
    }
    function constructYamlPairs(data) {
      if (data === null)
        return [];
      var index2, length, pair, keys2, result, object2 = data;
      result = new Array(object2.length);
      for (index2 = 0, length = object2.length; index2 < length; index2 += 1) {
        pair = object2[index2];
        keys2 = Object.keys(pair);
        result[index2] = [keys2[0], pair[keys2[0]]];
      }
      return result;
    }
    var pairs = new type$2("tag:yaml.org,2002:pairs", {
      kind: "sequence",
      resolve: resolveYamlPairs,
      construct: constructYamlPairs
    });
    var _hasOwnProperty$2 = Object.prototype.hasOwnProperty;
    function resolveYamlSet(data) {
      if (data === null)
        return true;
      var key, object2 = data;
      for (key in object2) {
        if (_hasOwnProperty$2.call(object2, key)) {
          if (object2[key] !== null)
            return false;
        }
      }
      return true;
    }
    function constructYamlSet(data) {
      return data !== null ? data : {};
    }
    var set$1 = new type$2("tag:yaml.org,2002:set", {
      kind: "mapping",
      resolve: resolveYamlSet,
      construct: constructYamlSet
    });
    var _default = core.extend({
      implicit: [
        timestamp,
        merge$1
      ],
      explicit: [
        binary,
        omap,
        pairs,
        set$1
      ]
    });
    var _hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    var CONTEXT_FLOW_IN = 1;
    var CONTEXT_FLOW_OUT = 2;
    var CONTEXT_BLOCK_IN = 3;
    var CONTEXT_BLOCK_OUT = 4;
    var CHOMPING_CLIP = 1;
    var CHOMPING_STRIP = 2;
    var CHOMPING_KEEP = 3;
    var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
    var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
    var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
    var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
    var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
    function _class(obj) {
      return Object.prototype.toString.call(obj);
    }
    function is_EOL(c2) {
      return c2 === 10 || c2 === 13;
    }
    function is_WHITE_SPACE(c2) {
      return c2 === 9 || c2 === 32;
    }
    function is_WS_OR_EOL(c2) {
      return c2 === 9 || c2 === 32 || c2 === 10 || c2 === 13;
    }
    function is_FLOW_INDICATOR(c2) {
      return c2 === 44 || c2 === 91 || c2 === 93 || c2 === 123 || c2 === 125;
    }
    function fromHexCode(c2) {
      var lc;
      if (48 <= c2 && c2 <= 57) {
        return c2 - 48;
      }
      lc = c2 | 32;
      if (97 <= lc && lc <= 102) {
        return lc - 97 + 10;
      }
      return -1;
    }
    function escapedHexLen(c2) {
      if (c2 === 120) {
        return 2;
      }
      if (c2 === 117) {
        return 4;
      }
      if (c2 === 85) {
        return 8;
      }
      return 0;
    }
    function fromDecimalCode(c2) {
      if (48 <= c2 && c2 <= 57) {
        return c2 - 48;
      }
      return -1;
    }
    function simpleEscapeSequence(c2) {
      return c2 === 48 ? "\0" : c2 === 97 ? "\x07" : c2 === 98 ? "\b" : c2 === 116 ? "	" : c2 === 9 ? "	" : c2 === 110 ? "\n" : c2 === 118 ? "\v" : c2 === 102 ? "\f" : c2 === 114 ? "\r" : c2 === 101 ? "\x1B" : c2 === 32 ? " " : c2 === 34 ? '"' : c2 === 47 ? "/" : c2 === 92 ? "\\" : c2 === 78 ? "\x85" : c2 === 95 ? "\xA0" : c2 === 76 ? "\u2028" : c2 === 80 ? "\u2029" : "";
    }
    function charFromCodepoint(c2) {
      if (c2 <= 65535) {
        return String.fromCharCode(c2);
      }
      return String.fromCharCode(
        (c2 - 65536 >> 10) + 55296,
        (c2 - 65536 & 1023) + 56320
      );
    }
    var simpleEscapeCheck = new Array(256);
    var simpleEscapeMap = new Array(256);
    for (var i = 0; i < 256; i++) {
      simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
      simpleEscapeMap[i] = simpleEscapeSequence(i);
    }
    function State$1(input, options) {
      this.input = input;
      this.filename = options["filename"] || null;
      this.schema = options["schema"] || _default;
      this.onWarning = options["onWarning"] || null;
      this.legacy = options["legacy"] || false;
      this.json = options["json"] || false;
      this.listener = options["listener"] || null;
      this.implicitTypes = this.schema.compiledImplicit;
      this.typeMap = this.schema.compiledTypeMap;
      this.length = input.length;
      this.position = 0;
      this.line = 0;
      this.lineStart = 0;
      this.lineIndent = 0;
      this.firstTabInLine = -1;
      this.documents = [];
    }
    function generateError(state, message2) {
      var mark2 = {
        name: state.filename,
        buffer: state.input.slice(0, -1),
        position: state.position,
        line: state.line,
        column: state.position - state.lineStart
      };
      mark2.snippet = snippet(mark2);
      return new exception(message2, mark2);
    }
    function throwError$1(state, message2) {
      throw generateError(state, message2);
    }
    function throwWarning(state, message2) {
      if (state.onWarning) {
        state.onWarning.call(null, generateError(state, message2));
      }
    }
    var directiveHandlers = {
      YAML: function handleYamlDirective(state, name, args) {
        var match, major, minor;
        if (state.version !== null) {
          throwError$1(state, "duplication of %YAML directive");
        }
        if (args.length !== 1) {
          throwError$1(state, "YAML directive accepts exactly one argument");
        }
        match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
        if (match === null) {
          throwError$1(state, "ill-formed argument of the YAML directive");
        }
        major = parseInt(match[1], 10);
        minor = parseInt(match[2], 10);
        if (major !== 1) {
          throwError$1(state, "unacceptable YAML version of the document");
        }
        state.version = args[0];
        state.checkLineBreaks = minor < 2;
        if (minor !== 1 && minor !== 2) {
          throwWarning(state, "unsupported YAML version of the document");
        }
      },
      TAG: function handleTagDirective(state, name, args) {
        var handle, prefix;
        if (args.length !== 2) {
          throwError$1(state, "TAG directive accepts exactly two arguments");
        }
        handle = args[0];
        prefix = args[1];
        if (!PATTERN_TAG_HANDLE.test(handle)) {
          throwError$1(state, "ill-formed tag handle (first argument) of the TAG directive");
        }
        if (_hasOwnProperty$1.call(state.tagMap, handle)) {
          throwError$1(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
        }
        if (!PATTERN_TAG_URI.test(prefix)) {
          throwError$1(state, "ill-formed tag prefix (second argument) of the TAG directive");
        }
        try {
          prefix = decodeURIComponent(prefix);
        } catch (err) {
          throwError$1(state, "tag prefix is malformed: " + prefix);
        }
        state.tagMap[handle] = prefix;
      }
    };
    function captureSegment(state, start, end2, checkJson) {
      var _position, _length, _character, _result;
      if (start < end2) {
        _result = state.input.slice(start, end2);
        if (checkJson) {
          for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
            _character = _result.charCodeAt(_position);
            if (!(_character === 9 || 32 <= _character && _character <= 1114111)) {
              throwError$1(state, "expected valid JSON character");
            }
          }
        } else if (PATTERN_NON_PRINTABLE.test(_result)) {
          throwError$1(state, "the stream contains non-printable characters");
        }
        state.result += _result;
      }
    }
    function mergeMappings(state, destination, source, overridableKeys) {
      var sourceKeys, key, index2, quantity;
      if (!common.isObject(source)) {
        throwError$1(state, "cannot merge mappings; the provided source object is unacceptable");
      }
      sourceKeys = Object.keys(source);
      for (index2 = 0, quantity = sourceKeys.length; index2 < quantity; index2 += 1) {
        key = sourceKeys[index2];
        if (!_hasOwnProperty$1.call(destination, key)) {
          destination[key] = source[key];
          overridableKeys[key] = true;
        }
      }
    }
    function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {
      var index2, quantity;
      if (Array.isArray(keyNode)) {
        keyNode = Array.prototype.slice.call(keyNode);
        for (index2 = 0, quantity = keyNode.length; index2 < quantity; index2 += 1) {
          if (Array.isArray(keyNode[index2])) {
            throwError$1(state, "nested arrays are not supported inside keys");
          }
          if (typeof keyNode === "object" && _class(keyNode[index2]) === "[object Object]") {
            keyNode[index2] = "[object Object]";
          }
        }
      }
      if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") {
        keyNode = "[object Object]";
      }
      keyNode = String(keyNode);
      if (_result === null) {
        _result = {};
      }
      if (keyTag === "tag:yaml.org,2002:merge") {
        if (Array.isArray(valueNode)) {
          for (index2 = 0, quantity = valueNode.length; index2 < quantity; index2 += 1) {
            mergeMappings(state, _result, valueNode[index2], overridableKeys);
          }
        } else {
          mergeMappings(state, _result, valueNode, overridableKeys);
        }
      } else {
        if (!state.json && !_hasOwnProperty$1.call(overridableKeys, keyNode) && _hasOwnProperty$1.call(_result, keyNode)) {
          state.line = startLine || state.line;
          state.lineStart = startLineStart || state.lineStart;
          state.position = startPos || state.position;
          throwError$1(state, "duplicated mapping key");
        }
        if (keyNode === "__proto__") {
          Object.defineProperty(_result, keyNode, {
            configurable: true,
            enumerable: true,
            writable: true,
            value: valueNode
          });
        } else {
          _result[keyNode] = valueNode;
        }
        delete overridableKeys[keyNode];
      }
      return _result;
    }
    function readLineBreak(state) {
      var ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 10) {
        state.position++;
      } else if (ch === 13) {
        state.position++;
        if (state.input.charCodeAt(state.position) === 10) {
          state.position++;
        }
      } else {
        throwError$1(state, "a line break is expected");
      }
      state.line += 1;
      state.lineStart = state.position;
      state.firstTabInLine = -1;
    }
    function skipSeparationSpace(state, allowComments, checkIndent) {
      var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        while (is_WHITE_SPACE(ch)) {
          if (ch === 9 && state.firstTabInLine === -1) {
            state.firstTabInLine = state.position;
          }
          ch = state.input.charCodeAt(++state.position);
        }
        if (allowComments && ch === 35) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (ch !== 10 && ch !== 13 && ch !== 0);
        }
        if (is_EOL(ch)) {
          readLineBreak(state);
          ch = state.input.charCodeAt(state.position);
          lineBreaks++;
          state.lineIndent = 0;
          while (ch === 32) {
            state.lineIndent++;
            ch = state.input.charCodeAt(++state.position);
          }
        } else {
          break;
        }
      }
      if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
        throwWarning(state, "deficient indentation");
      }
      return lineBreaks;
    }
    function testDocumentSeparator(state) {
      var _position = state.position, ch;
      ch = state.input.charCodeAt(_position);
      if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
        _position += 3;
        ch = state.input.charCodeAt(_position);
        if (ch === 0 || is_WS_OR_EOL(ch)) {
          return true;
        }
      }
      return false;
    }
    function writeFoldedLines(state, count) {
      if (count === 1) {
        state.result += " ";
      } else if (count > 1) {
        state.result += common.repeat("\n", count - 1);
      }
    }
    function readPlainScalar(state, nodeIndent, withinFlowCollection) {
      var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
      ch = state.input.charCodeAt(state.position);
      if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
        return false;
      }
      if (ch === 63 || ch === 45) {
        following = state.input.charCodeAt(state.position + 1);
        if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
          return false;
        }
      }
      state.kind = "scalar";
      state.result = "";
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
      while (ch !== 0) {
        if (ch === 58) {
          following = state.input.charCodeAt(state.position + 1);
          if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
            break;
          }
        } else if (ch === 35) {
          preceding = state.input.charCodeAt(state.position - 1);
          if (is_WS_OR_EOL(preceding)) {
            break;
          }
        } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
          break;
        } else if (is_EOL(ch)) {
          _line = state.line;
          _lineStart = state.lineStart;
          _lineIndent = state.lineIndent;
          skipSeparationSpace(state, false, -1);
          if (state.lineIndent >= nodeIndent) {
            hasPendingContent = true;
            ch = state.input.charCodeAt(state.position);
            continue;
          } else {
            state.position = captureEnd;
            state.line = _line;
            state.lineStart = _lineStart;
            state.lineIndent = _lineIndent;
            break;
          }
        }
        if (hasPendingContent) {
          captureSegment(state, captureStart, captureEnd, false);
          writeFoldedLines(state, state.line - _line);
          captureStart = captureEnd = state.position;
          hasPendingContent = false;
        }
        if (!is_WHITE_SPACE(ch)) {
          captureEnd = state.position + 1;
        }
        ch = state.input.charCodeAt(++state.position);
      }
      captureSegment(state, captureStart, captureEnd, false);
      if (state.result) {
        return true;
      }
      state.kind = _kind;
      state.result = _result;
      return false;
    }
    function readSingleQuotedScalar(state, nodeIndent) {
      var ch, captureStart, captureEnd;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 39) {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      state.position++;
      captureStart = captureEnd = state.position;
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        if (ch === 39) {
          captureSegment(state, captureStart, state.position, true);
          ch = state.input.charCodeAt(++state.position);
          if (ch === 39) {
            captureStart = state.position;
            state.position++;
            captureEnd = state.position;
          } else {
            return true;
          }
        } else if (is_EOL(ch)) {
          captureSegment(state, captureStart, captureEnd, true);
          writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
          captureStart = captureEnd = state.position;
        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
          throwError$1(state, "unexpected end of the document within a single quoted scalar");
        } else {
          state.position++;
          captureEnd = state.position;
        }
      }
      throwError$1(state, "unexpected end of the stream within a single quoted scalar");
    }
    function readDoubleQuotedScalar(state, nodeIndent) {
      var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 34) {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      state.position++;
      captureStart = captureEnd = state.position;
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        if (ch === 34) {
          captureSegment(state, captureStart, state.position, true);
          state.position++;
          return true;
        } else if (ch === 92) {
          captureSegment(state, captureStart, state.position, true);
          ch = state.input.charCodeAt(++state.position);
          if (is_EOL(ch)) {
            skipSeparationSpace(state, false, nodeIndent);
          } else if (ch < 256 && simpleEscapeCheck[ch]) {
            state.result += simpleEscapeMap[ch];
            state.position++;
          } else if ((tmp = escapedHexLen(ch)) > 0) {
            hexLength = tmp;
            hexResult = 0;
            for (; hexLength > 0; hexLength--) {
              ch = state.input.charCodeAt(++state.position);
              if ((tmp = fromHexCode(ch)) >= 0) {
                hexResult = (hexResult << 4) + tmp;
              } else {
                throwError$1(state, "expected hexadecimal character");
              }
            }
            state.result += charFromCodepoint(hexResult);
            state.position++;
          } else {
            throwError$1(state, "unknown escape sequence");
          }
          captureStart = captureEnd = state.position;
        } else if (is_EOL(ch)) {
          captureSegment(state, captureStart, captureEnd, true);
          writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
          captureStart = captureEnd = state.position;
        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
          throwError$1(state, "unexpected end of the document within a double quoted scalar");
        } else {
          state.position++;
          captureEnd = state.position;
        }
      }
      throwError$1(state, "unexpected end of the stream within a double quoted scalar");
    }
    function readFlowCollection(state, nodeIndent) {
      var readNext = true, _line, _lineStart, _pos, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = /* @__PURE__ */ Object.create(null), keyNode, keyTag, valueNode, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 91) {
        terminator = 93;
        isMapping = false;
        _result = [];
      } else if (ch === 123) {
        terminator = 125;
        isMapping = true;
        _result = {};
      } else {
        return false;
      }
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(++state.position);
      while (ch !== 0) {
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if (ch === terminator) {
          state.position++;
          state.tag = _tag;
          state.anchor = _anchor;
          state.kind = isMapping ? "mapping" : "sequence";
          state.result = _result;
          return true;
        } else if (!readNext) {
          throwError$1(state, "missed comma between flow collection entries");
        } else if (ch === 44) {
          throwError$1(state, "expected the node content, but found ','");
        }
        keyTag = keyNode = valueNode = null;
        isPair = isExplicitPair = false;
        if (ch === 63) {
          following = state.input.charCodeAt(state.position + 1);
          if (is_WS_OR_EOL(following)) {
            isPair = isExplicitPair = true;
            state.position++;
            skipSeparationSpace(state, true, nodeIndent);
          }
        }
        _line = state.line;
        _lineStart = state.lineStart;
        _pos = state.position;
        composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
        keyTag = state.tag;
        keyNode = state.result;
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if ((isExplicitPair || state.line === _line) && ch === 58) {
          isPair = true;
          ch = state.input.charCodeAt(++state.position);
          skipSeparationSpace(state, true, nodeIndent);
          composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
          valueNode = state.result;
        }
        if (isMapping) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
        } else if (isPair) {
          _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
        } else {
          _result.push(keyNode);
        }
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if (ch === 44) {
          readNext = true;
          ch = state.input.charCodeAt(++state.position);
        } else {
          readNext = false;
        }
      }
      throwError$1(state, "unexpected end of the stream within a flow collection");
    }
    function readBlockScalar(state, nodeIndent) {
      var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 124) {
        folding = false;
      } else if (ch === 62) {
        folding = true;
      } else {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      while (ch !== 0) {
        ch = state.input.charCodeAt(++state.position);
        if (ch === 43 || ch === 45) {
          if (CHOMPING_CLIP === chomping) {
            chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
          } else {
            throwError$1(state, "repeat of a chomping mode identifier");
          }
        } else if ((tmp = fromDecimalCode(ch)) >= 0) {
          if (tmp === 0) {
            throwError$1(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
          } else if (!detectedIndent) {
            textIndent = nodeIndent + tmp - 1;
            detectedIndent = true;
          } else {
            throwError$1(state, "repeat of an indentation width identifier");
          }
        } else {
          break;
        }
      }
      if (is_WHITE_SPACE(ch)) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (is_WHITE_SPACE(ch));
        if (ch === 35) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (!is_EOL(ch) && ch !== 0);
        }
      }
      while (ch !== 0) {
        readLineBreak(state);
        state.lineIndent = 0;
        ch = state.input.charCodeAt(state.position);
        while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
          state.lineIndent++;
          ch = state.input.charCodeAt(++state.position);
        }
        if (!detectedIndent && state.lineIndent > textIndent) {
          textIndent = state.lineIndent;
        }
        if (is_EOL(ch)) {
          emptyLines++;
          continue;
        }
        if (state.lineIndent < textIndent) {
          if (chomping === CHOMPING_KEEP) {
            state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
          } else if (chomping === CHOMPING_CLIP) {
            if (didReadContent) {
              state.result += "\n";
            }
          }
          break;
        }
        if (folding) {
          if (is_WHITE_SPACE(ch)) {
            atMoreIndented = true;
            state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
          } else if (atMoreIndented) {
            atMoreIndented = false;
            state.result += common.repeat("\n", emptyLines + 1);
          } else if (emptyLines === 0) {
            if (didReadContent) {
              state.result += " ";
            }
          } else {
            state.result += common.repeat("\n", emptyLines);
          }
        } else {
          state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
        }
        didReadContent = true;
        detectedIndent = true;
        emptyLines = 0;
        captureStart = state.position;
        while (!is_EOL(ch) && ch !== 0) {
          ch = state.input.charCodeAt(++state.position);
        }
        captureSegment(state, captureStart, state.position, false);
      }
      return true;
    }
    function readBlockSequence(state, nodeIndent) {
      var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
      if (state.firstTabInLine !== -1)
        return false;
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        if (state.firstTabInLine !== -1) {
          state.position = state.firstTabInLine;
          throwError$1(state, "tab characters must not be used in indentation");
        }
        if (ch !== 45) {
          break;
        }
        following = state.input.charCodeAt(state.position + 1);
        if (!is_WS_OR_EOL(following)) {
          break;
        }
        detected = true;
        state.position++;
        if (skipSeparationSpace(state, true, -1)) {
          if (state.lineIndent <= nodeIndent) {
            _result.push(null);
            ch = state.input.charCodeAt(state.position);
            continue;
          }
        }
        _line = state.line;
        composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
        _result.push(state.result);
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
        if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
          throwError$1(state, "bad indentation of a sequence entry");
        } else if (state.lineIndent < nodeIndent) {
          break;
        }
      }
      if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = "sequence";
        state.result = _result;
        return true;
      }
      return false;
    }
    function readBlockMapping(state, nodeIndent, flowIndent) {
      var following, allowCompact, _line, _keyLine, _keyLineStart, _keyPos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = /* @__PURE__ */ Object.create(null), keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
      if (state.firstTabInLine !== -1)
        return false;
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        if (!atExplicitKey && state.firstTabInLine !== -1) {
          state.position = state.firstTabInLine;
          throwError$1(state, "tab characters must not be used in indentation");
        }
        following = state.input.charCodeAt(state.position + 1);
        _line = state.line;
        if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
          if (ch === 63) {
            if (atExplicitKey) {
              storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
              keyTag = keyNode = valueNode = null;
            }
            detected = true;
            atExplicitKey = true;
            allowCompact = true;
          } else if (atExplicitKey) {
            atExplicitKey = false;
            allowCompact = true;
          } else {
            throwError$1(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
          }
          state.position += 1;
          ch = following;
        } else {
          _keyLine = state.line;
          _keyLineStart = state.lineStart;
          _keyPos = state.position;
          if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
            break;
          }
          if (state.line === _line) {
            ch = state.input.charCodeAt(state.position);
            while (is_WHITE_SPACE(ch)) {
              ch = state.input.charCodeAt(++state.position);
            }
            if (ch === 58) {
              ch = state.input.charCodeAt(++state.position);
              if (!is_WS_OR_EOL(ch)) {
                throwError$1(state, "a whitespace character is expected after the key-value separator within a block mapping");
              }
              if (atExplicitKey) {
                storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
                keyTag = keyNode = valueNode = null;
              }
              detected = true;
              atExplicitKey = false;
              allowCompact = false;
              keyTag = state.tag;
              keyNode = state.result;
            } else if (detected) {
              throwError$1(state, "can not read an implicit mapping pair; a colon is missed");
            } else {
              state.tag = _tag;
              state.anchor = _anchor;
              return true;
            }
          } else if (detected) {
            throwError$1(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
          } else {
            state.tag = _tag;
            state.anchor = _anchor;
            return true;
          }
        }
        if (state.line === _line || state.lineIndent > nodeIndent) {
          if (atExplicitKey) {
            _keyLine = state.line;
            _keyLineStart = state.lineStart;
            _keyPos = state.position;
          }
          if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
            if (atExplicitKey) {
              keyNode = state.result;
            } else {
              valueNode = state.result;
            }
          }
          if (!atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
            keyTag = keyNode = valueNode = null;
          }
          skipSeparationSpace(state, true, -1);
          ch = state.input.charCodeAt(state.position);
        }
        if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
          throwError$1(state, "bad indentation of a mapping entry");
        } else if (state.lineIndent < nodeIndent) {
          break;
        }
      }
      if (atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
      }
      if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = "mapping";
        state.result = _result;
      }
      return detected;
    }
    function readTagProperty(state) {
      var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 33)
        return false;
      if (state.tag !== null) {
        throwError$1(state, "duplication of a tag property");
      }
      ch = state.input.charCodeAt(++state.position);
      if (ch === 60) {
        isVerbatim = true;
        ch = state.input.charCodeAt(++state.position);
      } else if (ch === 33) {
        isNamed = true;
        tagHandle = "!!";
        ch = state.input.charCodeAt(++state.position);
      } else {
        tagHandle = "!";
      }
      _position = state.position;
      if (isVerbatim) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0 && ch !== 62);
        if (state.position < state.length) {
          tagName = state.input.slice(_position, state.position);
          ch = state.input.charCodeAt(++state.position);
        } else {
          throwError$1(state, "unexpected end of the stream within a verbatim tag");
        }
      } else {
        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          if (ch === 33) {
            if (!isNamed) {
              tagHandle = state.input.slice(_position - 1, state.position + 1);
              if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
                throwError$1(state, "named tag handle cannot contain such characters");
              }
              isNamed = true;
              _position = state.position + 1;
            } else {
              throwError$1(state, "tag suffix cannot contain exclamation marks");
            }
          }
          ch = state.input.charCodeAt(++state.position);
        }
        tagName = state.input.slice(_position, state.position);
        if (PATTERN_FLOW_INDICATORS.test(tagName)) {
          throwError$1(state, "tag suffix cannot contain flow indicator characters");
        }
      }
      if (tagName && !PATTERN_TAG_URI.test(tagName)) {
        throwError$1(state, "tag name cannot contain such characters: " + tagName);
      }
      try {
        tagName = decodeURIComponent(tagName);
      } catch (err) {
        throwError$1(state, "tag name is malformed: " + tagName);
      }
      if (isVerbatim) {
        state.tag = tagName;
      } else if (_hasOwnProperty$1.call(state.tagMap, tagHandle)) {
        state.tag = state.tagMap[tagHandle] + tagName;
      } else if (tagHandle === "!") {
        state.tag = "!" + tagName;
      } else if (tagHandle === "!!") {
        state.tag = "tag:yaml.org,2002:" + tagName;
      } else {
        throwError$1(state, 'undeclared tag handle "' + tagHandle + '"');
      }
      return true;
    }
    function readAnchorProperty(state) {
      var _position, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 38)
        return false;
      if (state.anchor !== null) {
        throwError$1(state, "duplication of an anchor property");
      }
      ch = state.input.charCodeAt(++state.position);
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (state.position === _position) {
        throwError$1(state, "name of an anchor node must contain at least one character");
      }
      state.anchor = state.input.slice(_position, state.position);
      return true;
    }
    function readAlias(state) {
      var _position, alias, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 42)
        return false;
      ch = state.input.charCodeAt(++state.position);
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (state.position === _position) {
        throwError$1(state, "name of an alias node must contain at least one character");
      }
      alias = state.input.slice(_position, state.position);
      if (!_hasOwnProperty$1.call(state.anchorMap, alias)) {
        throwError$1(state, 'unidentified alias "' + alias + '"');
      }
      state.result = state.anchorMap[alias];
      skipSeparationSpace(state, true, -1);
      return true;
    }
    function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
      var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, typeList, type2, flowIndent, blockIndent;
      if (state.listener !== null) {
        state.listener("open", state);
      }
      state.tag = null;
      state.anchor = null;
      state.kind = null;
      state.result = null;
      allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
      if (allowToSeek) {
        if (skipSeparationSpace(state, true, -1)) {
          atNewLine = true;
          if (state.lineIndent > parentIndent) {
            indentStatus = 1;
          } else if (state.lineIndent === parentIndent) {
            indentStatus = 0;
          } else if (state.lineIndent < parentIndent) {
            indentStatus = -1;
          }
        }
      }
      if (indentStatus === 1) {
        while (readTagProperty(state) || readAnchorProperty(state)) {
          if (skipSeparationSpace(state, true, -1)) {
            atNewLine = true;
            allowBlockCollections = allowBlockStyles;
            if (state.lineIndent > parentIndent) {
              indentStatus = 1;
            } else if (state.lineIndent === parentIndent) {
              indentStatus = 0;
            } else if (state.lineIndent < parentIndent) {
              indentStatus = -1;
            }
          } else {
            allowBlockCollections = false;
          }
        }
      }
      if (allowBlockCollections) {
        allowBlockCollections = atNewLine || allowCompact;
      }
      if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
        if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
          flowIndent = parentIndent;
        } else {
          flowIndent = parentIndent + 1;
        }
        blockIndent = state.position - state.lineStart;
        if (indentStatus === 1) {
          if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
            hasContent = true;
          } else {
            if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
              hasContent = true;
            } else if (readAlias(state)) {
              hasContent = true;
              if (state.tag !== null || state.anchor !== null) {
                throwError$1(state, "alias node should not have any properties");
              }
            } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
              hasContent = true;
              if (state.tag === null) {
                state.tag = "?";
              }
            }
            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
          }
        } else if (indentStatus === 0) {
          hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
        }
      }
      if (state.tag === null) {
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      } else if (state.tag === "?") {
        if (state.result !== null && state.kind !== "scalar") {
          throwError$1(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
        }
        for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
          type2 = state.implicitTypes[typeIndex];
          if (type2.resolve(state.result)) {
            state.result = type2.construct(state.result);
            state.tag = type2.tag;
            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
            break;
          }
        }
      } else if (state.tag !== "!") {
        if (_hasOwnProperty$1.call(state.typeMap[state.kind || "fallback"], state.tag)) {
          type2 = state.typeMap[state.kind || "fallback"][state.tag];
        } else {
          type2 = null;
          typeList = state.typeMap.multi[state.kind || "fallback"];
          for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {
            if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
              type2 = typeList[typeIndex];
              break;
            }
          }
        }
        if (!type2) {
          throwError$1(state, "unknown tag !<" + state.tag + ">");
        }
        if (state.result !== null && type2.kind !== state.kind) {
          throwError$1(state, "unacceptable node kind for !<" + state.tag + '> tag; it should be "' + type2.kind + '", not "' + state.kind + '"');
        }
        if (!type2.resolve(state.result, state.tag)) {
          throwError$1(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
        } else {
          state.result = type2.construct(state.result, state.tag);
          if (state.anchor !== null) {
            state.anchorMap[state.anchor] = state.result;
          }
        }
      }
      if (state.listener !== null) {
        state.listener("close", state);
      }
      return state.tag !== null || state.anchor !== null || hasContent;
    }
    function readDocument(state) {
      var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
      state.version = null;
      state.checkLineBreaks = state.legacy;
      state.tagMap = /* @__PURE__ */ Object.create(null);
      state.anchorMap = /* @__PURE__ */ Object.create(null);
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
        if (state.lineIndent > 0 || ch !== 37) {
          break;
        }
        hasDirectives = true;
        ch = state.input.charCodeAt(++state.position);
        _position = state.position;
        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        directiveName = state.input.slice(_position, state.position);
        directiveArgs = [];
        if (directiveName.length < 1) {
          throwError$1(state, "directive name must not be less than one character in length");
        }
        while (ch !== 0) {
          while (is_WHITE_SPACE(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          if (ch === 35) {
            do {
              ch = state.input.charCodeAt(++state.position);
            } while (ch !== 0 && !is_EOL(ch));
            break;
          }
          if (is_EOL(ch))
            break;
          _position = state.position;
          while (ch !== 0 && !is_WS_OR_EOL(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          directiveArgs.push(state.input.slice(_position, state.position));
        }
        if (ch !== 0)
          readLineBreak(state);
        if (_hasOwnProperty$1.call(directiveHandlers, directiveName)) {
          directiveHandlers[directiveName](state, directiveName, directiveArgs);
        } else {
          throwWarning(state, 'unknown document directive "' + directiveName + '"');
        }
      }
      skipSeparationSpace(state, true, -1);
      if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
        state.position += 3;
        skipSeparationSpace(state, true, -1);
      } else if (hasDirectives) {
        throwError$1(state, "directives end mark is expected");
      }
      composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
      skipSeparationSpace(state, true, -1);
      if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
        throwWarning(state, "non-ASCII line breaks are interpreted as content");
      }
      state.documents.push(state.result);
      if (state.position === state.lineStart && testDocumentSeparator(state)) {
        if (state.input.charCodeAt(state.position) === 46) {
          state.position += 3;
          skipSeparationSpace(state, true, -1);
        }
        return;
      }
      if (state.position < state.length - 1) {
        throwError$1(state, "end of the stream or a document separator is expected");
      } else {
        return;
      }
    }
    function loadDocuments(input, options) {
      input = String(input);
      options = options || {};
      if (input.length !== 0) {
        if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
          input += "\n";
        }
        if (input.charCodeAt(0) === 65279) {
          input = input.slice(1);
        }
      }
      var state = new State$1(input, options);
      var nullpos = input.indexOf("\0");
      if (nullpos !== -1) {
        state.position = nullpos;
        throwError$1(state, "null byte is not allowed in input");
      }
      state.input += "\0";
      while (state.input.charCodeAt(state.position) === 32) {
        state.lineIndent += 1;
        state.position += 1;
      }
      while (state.position < state.length - 1) {
        readDocument(state);
      }
      return state.documents;
    }
    function loadAll$1(input, iterator, options) {
      if (iterator !== null && typeof iterator === "object" && typeof options === "undefined") {
        options = iterator;
        iterator = null;
      }
      var documents = loadDocuments(input, options);
      if (typeof iterator !== "function") {
        return documents;
      }
      for (var index2 = 0, length = documents.length; index2 < length; index2 += 1) {
        iterator(documents[index2]);
      }
    }
    function load$1(input, options) {
      var documents = loadDocuments(input, options);
      if (documents.length === 0) {
        return void 0;
      } else if (documents.length === 1) {
        return documents[0];
      }
      throw new exception("expected a single document in the stream, but found more");
    }
    var loadAll_1 = loadAll$1;
    var load_1 = load$1;
    var loader = {
      loadAll: loadAll_1,
      load: load_1
    };
    var _toString = Object.prototype.toString;
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var CHAR_BOM = 65279;
    var CHAR_TAB = 9;
    var CHAR_LINE_FEED = 10;
    var CHAR_CARRIAGE_RETURN = 13;
    var CHAR_SPACE = 32;
    var CHAR_EXCLAMATION = 33;
    var CHAR_DOUBLE_QUOTE = 34;
    var CHAR_SHARP = 35;
    var CHAR_PERCENT = 37;
    var CHAR_AMPERSAND = 38;
    var CHAR_SINGLE_QUOTE = 39;
    var CHAR_ASTERISK = 42;
    var CHAR_COMMA = 44;
    var CHAR_MINUS = 45;
    var CHAR_COLON = 58;
    var CHAR_EQUALS = 61;
    var CHAR_GREATER_THAN = 62;
    var CHAR_QUESTION = 63;
    var CHAR_COMMERCIAL_AT = 64;
    var CHAR_LEFT_SQUARE_BRACKET = 91;
    var CHAR_RIGHT_SQUARE_BRACKET = 93;
    var CHAR_GRAVE_ACCENT = 96;
    var CHAR_LEFT_CURLY_BRACKET = 123;
    var CHAR_VERTICAL_LINE = 124;
    var CHAR_RIGHT_CURLY_BRACKET = 125;
    var ESCAPE_SEQUENCES = {};
    ESCAPE_SEQUENCES[0] = "\\0";
    ESCAPE_SEQUENCES[7] = "\\a";
    ESCAPE_SEQUENCES[8] = "\\b";
    ESCAPE_SEQUENCES[9] = "\\t";
    ESCAPE_SEQUENCES[10] = "\\n";
    ESCAPE_SEQUENCES[11] = "\\v";
    ESCAPE_SEQUENCES[12] = "\\f";
    ESCAPE_SEQUENCES[13] = "\\r";
    ESCAPE_SEQUENCES[27] = "\\e";
    ESCAPE_SEQUENCES[34] = '\\"';
    ESCAPE_SEQUENCES[92] = "\\\\";
    ESCAPE_SEQUENCES[133] = "\\N";
    ESCAPE_SEQUENCES[160] = "\\_";
    ESCAPE_SEQUENCES[8232] = "\\L";
    ESCAPE_SEQUENCES[8233] = "\\P";
    var DEPRECATED_BOOLEANS_SYNTAX = [
      "y",
      "Y",
      "yes",
      "Yes",
      "YES",
      "on",
      "On",
      "ON",
      "n",
      "N",
      "no",
      "No",
      "NO",
      "off",
      "Off",
      "OFF"
    ];
    var DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;
    function compileStyleMap(schema2, map2) {
      var result, keys2, index2, length, tag, style2, type2;
      if (map2 === null)
        return {};
      result = {};
      keys2 = Object.keys(map2);
      for (index2 = 0, length = keys2.length; index2 < length; index2 += 1) {
        tag = keys2[index2];
        style2 = String(map2[tag]);
        if (tag.slice(0, 2) === "!!") {
          tag = "tag:yaml.org,2002:" + tag.slice(2);
        }
        type2 = schema2.compiledTypeMap["fallback"][tag];
        if (type2 && _hasOwnProperty.call(type2.styleAliases, style2)) {
          style2 = type2.styleAliases[style2];
        }
        result[tag] = style2;
      }
      return result;
    }
    function encodeHex(character) {
      var string2, handle, length;
      string2 = character.toString(16).toUpperCase();
      if (character <= 255) {
        handle = "x";
        length = 2;
      } else if (character <= 65535) {
        handle = "u";
        length = 4;
      } else if (character <= 4294967295) {
        handle = "U";
        length = 8;
      } else {
        throw new exception("code point within a string may not be greater than 0xFFFFFFFF");
      }
      return "\\" + handle + common.repeat("0", length - string2.length) + string2;
    }
    var QUOTING_TYPE_SINGLE = 1, QUOTING_TYPE_DOUBLE = 2;
    function State(options) {
      this.schema = options["schema"] || _default;
      this.indent = Math.max(1, options["indent"] || 2);
      this.noArrayIndent = options["noArrayIndent"] || false;
      this.skipInvalid = options["skipInvalid"] || false;
      this.flowLevel = common.isNothing(options["flowLevel"]) ? -1 : options["flowLevel"];
      this.styleMap = compileStyleMap(this.schema, options["styles"] || null);
      this.sortKeys = options["sortKeys"] || false;
      this.lineWidth = options["lineWidth"] || 80;
      this.noRefs = options["noRefs"] || false;
      this.noCompatMode = options["noCompatMode"] || false;
      this.condenseFlow = options["condenseFlow"] || false;
      this.quotingType = options["quotingType"] === '"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
      this.forceQuotes = options["forceQuotes"] || false;
      this.replacer = typeof options["replacer"] === "function" ? options["replacer"] : null;
      this.implicitTypes = this.schema.compiledImplicit;
      this.explicitTypes = this.schema.compiledExplicit;
      this.tag = null;
      this.result = "";
      this.duplicates = [];
      this.usedDuplicates = null;
    }
    function indentString(string2, spaces) {
      var ind = common.repeat(" ", spaces), position = 0, next = -1, result = "", line, length = string2.length;
      while (position < length) {
        next = string2.indexOf("\n", position);
        if (next === -1) {
          line = string2.slice(position);
          position = length;
        } else {
          line = string2.slice(position, next + 1);
          position = next + 1;
        }
        if (line.length && line !== "\n")
          result += ind;
        result += line;
      }
      return result;
    }
    function generateNextLine(state, level) {
      return "\n" + common.repeat(" ", state.indent * level);
    }
    function testImplicitResolving(state, str2) {
      var index2, length, type2;
      for (index2 = 0, length = state.implicitTypes.length; index2 < length; index2 += 1) {
        type2 = state.implicitTypes[index2];
        if (type2.resolve(str2)) {
          return true;
        }
      }
      return false;
    }
    function isWhitespace(c2) {
      return c2 === CHAR_SPACE || c2 === CHAR_TAB;
    }
    function isPrintable(c2) {
      return 32 <= c2 && c2 <= 126 || 161 <= c2 && c2 <= 55295 && c2 !== 8232 && c2 !== 8233 || 57344 <= c2 && c2 <= 65533 && c2 !== CHAR_BOM || 65536 <= c2 && c2 <= 1114111;
    }
    function isNsCharOrWhitespace(c2) {
      return isPrintable(c2) && c2 !== CHAR_BOM && c2 !== CHAR_CARRIAGE_RETURN && c2 !== CHAR_LINE_FEED;
    }
    function isPlainSafe(c2, prev, inblock) {
      var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c2);
      var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c2);
      return (inblock ? cIsNsCharOrWhitespace : cIsNsCharOrWhitespace && c2 !== CHAR_COMMA && c2 !== CHAR_LEFT_SQUARE_BRACKET && c2 !== CHAR_RIGHT_SQUARE_BRACKET && c2 !== CHAR_LEFT_CURLY_BRACKET && c2 !== CHAR_RIGHT_CURLY_BRACKET) && c2 !== CHAR_SHARP && !(prev === CHAR_COLON && !cIsNsChar) || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c2 === CHAR_SHARP || prev === CHAR_COLON && cIsNsChar;
    }
    function isPlainSafeFirst(c2) {
      return isPrintable(c2) && c2 !== CHAR_BOM && !isWhitespace(c2) && c2 !== CHAR_MINUS && c2 !== CHAR_QUESTION && c2 !== CHAR_COLON && c2 !== CHAR_COMMA && c2 !== CHAR_LEFT_SQUARE_BRACKET && c2 !== CHAR_RIGHT_SQUARE_BRACKET && c2 !== CHAR_LEFT_CURLY_BRACKET && c2 !== CHAR_RIGHT_CURLY_BRACKET && c2 !== CHAR_SHARP && c2 !== CHAR_AMPERSAND && c2 !== CHAR_ASTERISK && c2 !== CHAR_EXCLAMATION && c2 !== CHAR_VERTICAL_LINE && c2 !== CHAR_EQUALS && c2 !== CHAR_GREATER_THAN && c2 !== CHAR_SINGLE_QUOTE && c2 !== CHAR_DOUBLE_QUOTE && c2 !== CHAR_PERCENT && c2 !== CHAR_COMMERCIAL_AT && c2 !== CHAR_GRAVE_ACCENT;
    }
    function isPlainSafeLast(c2) {
      return !isWhitespace(c2) && c2 !== CHAR_COLON;
    }
    function codePointAt(string2, pos) {
      var first = string2.charCodeAt(pos), second;
      if (first >= 55296 && first <= 56319 && pos + 1 < string2.length) {
        second = string2.charCodeAt(pos + 1);
        if (second >= 56320 && second <= 57343) {
          return (first - 55296) * 1024 + second - 56320 + 65536;
        }
      }
      return first;
    }
    function needIndentIndicator(string2) {
      var leadingSpaceRe = /^\n* /;
      return leadingSpaceRe.test(string2);
    }
    var STYLE_PLAIN = 1, STYLE_SINGLE = 2, STYLE_LITERAL = 3, STYLE_FOLDED = 4, STYLE_DOUBLE = 5;
    function chooseScalarStyle(string2, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {
      var i2;
      var char = 0;
      var prevChar = null;
      var hasLineBreak = false;
      var hasFoldableLine = false;
      var shouldTrackWidth = lineWidth !== -1;
      var previousLineBreak = -1;
      var plain = isPlainSafeFirst(codePointAt(string2, 0)) && isPlainSafeLast(codePointAt(string2, string2.length - 1));
      if (singleLineOnly || forceQuotes) {
        for (i2 = 0; i2 < string2.length; char >= 65536 ? i2 += 2 : i2++) {
          char = codePointAt(string2, i2);
          if (!isPrintable(char)) {
            return STYLE_DOUBLE;
          }
          plain = plain && isPlainSafe(char, prevChar, inblock);
          prevChar = char;
        }
      } else {
        for (i2 = 0; i2 < string2.length; char >= 65536 ? i2 += 2 : i2++) {
          char = codePointAt(string2, i2);
          if (char === CHAR_LINE_FEED) {
            hasLineBreak = true;
            if (shouldTrackWidth) {
              hasFoldableLine = hasFoldableLine || i2 - previousLineBreak - 1 > lineWidth && string2[previousLineBreak + 1] !== " ";
              previousLineBreak = i2;
            }
          } else if (!isPrintable(char)) {
            return STYLE_DOUBLE;
          }
          plain = plain && isPlainSafe(char, prevChar, inblock);
          prevChar = char;
        }
        hasFoldableLine = hasFoldableLine || shouldTrackWidth && (i2 - previousLineBreak - 1 > lineWidth && string2[previousLineBreak + 1] !== " ");
      }
      if (!hasLineBreak && !hasFoldableLine) {
        if (plain && !forceQuotes && !testAmbiguousType(string2)) {
          return STYLE_PLAIN;
        }
        return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
      }
      if (indentPerLevel > 9 && needIndentIndicator(string2)) {
        return STYLE_DOUBLE;
      }
      if (!forceQuotes) {
        return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
      }
      return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
    }
    function writeScalar(state, string2, level, iskey, inblock) {
      state.dump = function() {
        if (string2.length === 0) {
          return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
        }
        if (!state.noCompatMode) {
          if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string2) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string2)) {
            return state.quotingType === QUOTING_TYPE_DOUBLE ? '"' + string2 + '"' : "'" + string2 + "'";
          }
        }
        var indent = state.indent * Math.max(1, level);
        var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
        var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
        function testAmbiguity(string3) {
          return testImplicitResolving(state, string3);
        }
        switch (chooseScalarStyle(
          string2,
          singleLineOnly,
          state.indent,
          lineWidth,
          testAmbiguity,
          state.quotingType,
          state.forceQuotes && !iskey,
          inblock
        )) {
          case STYLE_PLAIN:
            return string2;
          case STYLE_SINGLE:
            return "'" + string2.replace(/'/g, "''") + "'";
          case STYLE_LITERAL:
            return "|" + blockHeader(string2, state.indent) + dropEndingNewline(indentString(string2, indent));
          case STYLE_FOLDED:
            return ">" + blockHeader(string2, state.indent) + dropEndingNewline(indentString(foldString(string2, lineWidth), indent));
          case STYLE_DOUBLE:
            return '"' + escapeString(string2) + '"';
          default:
            throw new exception("impossible error: invalid scalar style");
        }
      }();
    }
    function blockHeader(string2, indentPerLevel) {
      var indentIndicator = needIndentIndicator(string2) ? String(indentPerLevel) : "";
      var clip = string2[string2.length - 1] === "\n";
      var keep = clip && (string2[string2.length - 2] === "\n" || string2 === "\n");
      var chomp = keep ? "+" : clip ? "" : "-";
      return indentIndicator + chomp + "\n";
    }
    function dropEndingNewline(string2) {
      return string2[string2.length - 1] === "\n" ? string2.slice(0, -1) : string2;
    }
    function foldString(string2, width) {
      var lineRe = /(\n+)([^\n]*)/g;
      var result = function() {
        var nextLF = string2.indexOf("\n");
        nextLF = nextLF !== -1 ? nextLF : string2.length;
        lineRe.lastIndex = nextLF;
        return foldLine(string2.slice(0, nextLF), width);
      }();
      var prevMoreIndented = string2[0] === "\n" || string2[0] === " ";
      var moreIndented;
      var match;
      while (match = lineRe.exec(string2)) {
        var prefix = match[1], line = match[2];
        moreIndented = line[0] === " ";
        result += prefix + (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") + foldLine(line, width);
        prevMoreIndented = moreIndented;
      }
      return result;
    }
    function foldLine(line, width) {
      if (line === "" || line[0] === " ")
        return line;
      var breakRe = / [^ ]/g;
      var match;
      var start = 0, end2, curr = 0, next = 0;
      var result = "";
      while (match = breakRe.exec(line)) {
        next = match.index;
        if (next - start > width) {
          end2 = curr > start ? curr : next;
          result += "\n" + line.slice(start, end2);
          start = end2 + 1;
        }
        curr = next;
      }
      result += "\n";
      if (line.length - start > width && curr > start) {
        result += line.slice(start, curr) + "\n" + line.slice(curr + 1);
      } else {
        result += line.slice(start);
      }
      return result.slice(1);
    }
    function escapeString(string2) {
      var result = "";
      var char = 0;
      var escapeSeq;
      for (var i2 = 0; i2 < string2.length; char >= 65536 ? i2 += 2 : i2++) {
        char = codePointAt(string2, i2);
        escapeSeq = ESCAPE_SEQUENCES[char];
        if (!escapeSeq && isPrintable(char)) {
          result += string2[i2];
          if (char >= 65536)
            result += string2[i2 + 1];
        } else {
          result += escapeSeq || encodeHex(char);
        }
      }
      return result;
    }
    function writeFlowSequence(state, level, object2) {
      var _result = "", _tag = state.tag, index2, length, value;
      for (index2 = 0, length = object2.length; index2 < length; index2 += 1) {
        value = object2[index2];
        if (state.replacer) {
          value = state.replacer.call(object2, String(index2), value);
        }
        if (writeNode(state, level, value, false, false) || typeof value === "undefined" && writeNode(state, level, null, false, false)) {
          if (_result !== "")
            _result += "," + (!state.condenseFlow ? " " : "");
          _result += state.dump;
        }
      }
      state.tag = _tag;
      state.dump = "[" + _result + "]";
    }
    function writeBlockSequence(state, level, object2, compact) {
      var _result = "", _tag = state.tag, index2, length, value;
      for (index2 = 0, length = object2.length; index2 < length; index2 += 1) {
        value = object2[index2];
        if (state.replacer) {
          value = state.replacer.call(object2, String(index2), value);
        }
        if (writeNode(state, level + 1, value, true, true, false, true) || typeof value === "undefined" && writeNode(state, level + 1, null, true, true, false, true)) {
          if (!compact || _result !== "") {
            _result += generateNextLine(state, level);
          }
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            _result += "-";
          } else {
            _result += "- ";
          }
          _result += state.dump;
        }
      }
      state.tag = _tag;
      state.dump = _result || "[]";
    }
    function writeFlowMapping(state, level, object2) {
      var _result = "", _tag = state.tag, objectKeyList = Object.keys(object2), index2, length, objectKey, objectValue, pairBuffer;
      for (index2 = 0, length = objectKeyList.length; index2 < length; index2 += 1) {
        pairBuffer = "";
        if (_result !== "")
          pairBuffer += ", ";
        if (state.condenseFlow)
          pairBuffer += '"';
        objectKey = objectKeyList[index2];
        objectValue = object2[objectKey];
        if (state.replacer) {
          objectValue = state.replacer.call(object2, objectKey, objectValue);
        }
        if (!writeNode(state, level, objectKey, false, false)) {
          continue;
        }
        if (state.dump.length > 1024)
          pairBuffer += "? ";
        pairBuffer += state.dump + (state.condenseFlow ? '"' : "") + ":" + (state.condenseFlow ? "" : " ");
        if (!writeNode(state, level, objectValue, false, false)) {
          continue;
        }
        pairBuffer += state.dump;
        _result += pairBuffer;
      }
      state.tag = _tag;
      state.dump = "{" + _result + "}";
    }
    function writeBlockMapping(state, level, object2, compact) {
      var _result = "", _tag = state.tag, objectKeyList = Object.keys(object2), index2, length, objectKey, objectValue, explicitPair, pairBuffer;
      if (state.sortKeys === true) {
        objectKeyList.sort();
      } else if (typeof state.sortKeys === "function") {
        objectKeyList.sort(state.sortKeys);
      } else if (state.sortKeys) {
        throw new exception("sortKeys must be a boolean or a function");
      }
      for (index2 = 0, length = objectKeyList.length; index2 < length; index2 += 1) {
        pairBuffer = "";
        if (!compact || _result !== "") {
          pairBuffer += generateNextLine(state, level);
        }
        objectKey = objectKeyList[index2];
        objectValue = object2[objectKey];
        if (state.replacer) {
          objectValue = state.replacer.call(object2, objectKey, objectValue);
        }
        if (!writeNode(state, level + 1, objectKey, true, true, true)) {
          continue;
        }
        explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
        if (explicitPair) {
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            pairBuffer += "?";
          } else {
            pairBuffer += "? ";
          }
        }
        pairBuffer += state.dump;
        if (explicitPair) {
          pairBuffer += generateNextLine(state, level);
        }
        if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
          continue;
        }
        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
          pairBuffer += ":";
        } else {
          pairBuffer += ": ";
        }
        pairBuffer += state.dump;
        _result += pairBuffer;
      }
      state.tag = _tag;
      state.dump = _result || "{}";
    }
    function detectType(state, object2, explicit) {
      var _result, typeList, index2, length, type2, style2;
      typeList = explicit ? state.explicitTypes : state.implicitTypes;
      for (index2 = 0, length = typeList.length; index2 < length; index2 += 1) {
        type2 = typeList[index2];
        if ((type2.instanceOf || type2.predicate) && (!type2.instanceOf || typeof object2 === "object" && object2 instanceof type2.instanceOf) && (!type2.predicate || type2.predicate(object2))) {
          if (explicit) {
            if (type2.multi && type2.representName) {
              state.tag = type2.representName(object2);
            } else {
              state.tag = type2.tag;
            }
          } else {
            state.tag = "?";
          }
          if (type2.represent) {
            style2 = state.styleMap[type2.tag] || type2.defaultStyle;
            if (_toString.call(type2.represent) === "[object Function]") {
              _result = type2.represent(object2, style2);
            } else if (_hasOwnProperty.call(type2.represent, style2)) {
              _result = type2.represent[style2](object2, style2);
            } else {
              throw new exception("!<" + type2.tag + '> tag resolver accepts not "' + style2 + '" style');
            }
            state.dump = _result;
          }
          return true;
        }
      }
      return false;
    }
    function writeNode(state, level, object2, block, compact, iskey, isblockseq) {
      state.tag = null;
      state.dump = object2;
      if (!detectType(state, object2, false)) {
        detectType(state, object2, true);
      }
      var type2 = _toString.call(state.dump);
      var inblock = block;
      var tagStr;
      if (block) {
        block = state.flowLevel < 0 || state.flowLevel > level;
      }
      var objectOrArray = type2 === "[object Object]" || type2 === "[object Array]", duplicateIndex, duplicate;
      if (objectOrArray) {
        duplicateIndex = state.duplicates.indexOf(object2);
        duplicate = duplicateIndex !== -1;
      }
      if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) {
        compact = false;
      }
      if (duplicate && state.usedDuplicates[duplicateIndex]) {
        state.dump = "*ref_" + duplicateIndex;
      } else {
        if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
          state.usedDuplicates[duplicateIndex] = true;
        }
        if (type2 === "[object Object]") {
          if (block && Object.keys(state.dump).length !== 0) {
            writeBlockMapping(state, level, state.dump, compact);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + state.dump;
            }
          } else {
            writeFlowMapping(state, level, state.dump);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + " " + state.dump;
            }
          }
        } else if (type2 === "[object Array]") {
          if (block && state.dump.length !== 0) {
            if (state.noArrayIndent && !isblockseq && level > 0) {
              writeBlockSequence(state, level - 1, state.dump, compact);
            } else {
              writeBlockSequence(state, level, state.dump, compact);
            }
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + state.dump;
            }
          } else {
            writeFlowSequence(state, level, state.dump);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + " " + state.dump;
            }
          }
        } else if (type2 === "[object String]") {
          if (state.tag !== "?") {
            writeScalar(state, state.dump, level, iskey, inblock);
          }
        } else if (type2 === "[object Undefined]") {
          return false;
        } else {
          if (state.skipInvalid)
            return false;
          throw new exception("unacceptable kind of an object to dump " + type2);
        }
        if (state.tag !== null && state.tag !== "?") {
          tagStr = encodeURI(
            state.tag[0] === "!" ? state.tag.slice(1) : state.tag
          ).replace(/!/g, "%21");
          if (state.tag[0] === "!") {
            tagStr = "!" + tagStr;
          } else if (tagStr.slice(0, 18) === "tag:yaml.org,2002:") {
            tagStr = "!!" + tagStr.slice(18);
          } else {
            tagStr = "!<" + tagStr + ">";
          }
          state.dump = tagStr + " " + state.dump;
        }
      }
      return true;
    }
    function getDuplicateReferences(object2, state) {
      var objects = [], duplicatesIndexes = [], index2, length;
      inspectNode(object2, objects, duplicatesIndexes);
      for (index2 = 0, length = duplicatesIndexes.length; index2 < length; index2 += 1) {
        state.duplicates.push(objects[duplicatesIndexes[index2]]);
      }
      state.usedDuplicates = new Array(length);
    }
    function inspectNode(object2, objects, duplicatesIndexes) {
      var objectKeyList, index2, length;
      if (object2 !== null && typeof object2 === "object") {
        index2 = objects.indexOf(object2);
        if (index2 !== -1) {
          if (duplicatesIndexes.indexOf(index2) === -1) {
            duplicatesIndexes.push(index2);
          }
        } else {
          objects.push(object2);
          if (Array.isArray(object2)) {
            for (index2 = 0, length = object2.length; index2 < length; index2 += 1) {
              inspectNode(object2[index2], objects, duplicatesIndexes);
            }
          } else {
            objectKeyList = Object.keys(object2);
            for (index2 = 0, length = objectKeyList.length; index2 < length; index2 += 1) {
              inspectNode(object2[objectKeyList[index2]], objects, duplicatesIndexes);
            }
          }
        }
      }
    }
    function dump$1(input, options) {
      options = options || {};
      var state = new State(options);
      if (!state.noRefs)
        getDuplicateReferences(input, state);
      var value = input;
      if (state.replacer) {
        value = state.replacer.call({ "": value }, "", value);
      }
      if (writeNode(state, 0, value, true, true))
        return state.dump + "\n";
      return "";
    }
    var dump_1 = dump$1;
    var dumper = {
      dump: dump_1
    };
    function renamed(from2, to) {
      return function() {
        throw new Error("Function yaml." + from2 + " is removed in js-yaml 4. Use yaml." + to + " instead, which is now safe by default.");
      };
    }
    var Type = type$2;
    var Schema$2 = schema;
    var FAILSAFE_SCHEMA = failsafe;
    var JSON_SCHEMA = json;
    var CORE_SCHEMA = core;
    var DEFAULT_SCHEMA = _default;
    var load = loader.load;
    var loadAll = loader.loadAll;
    var dump = dumper.dump;
    var YAMLException = exception;
    var types$1 = {
      binary,
      float,
      map: map$2,
      null: _null,
      pairs,
      set: set$1,
      timestamp,
      bool,
      int,
      merge: merge$1,
      omap,
      seq,
      str
    };
    var safeLoad = renamed("safeLoad", "load");
    var safeLoadAll = renamed("safeLoadAll", "loadAll");
    var safeDump = renamed("safeDump", "dump");
    var jsYaml = {
      Type,
      Schema: Schema$2,
      FAILSAFE_SCHEMA,
      JSON_SCHEMA,
      CORE_SCHEMA,
      DEFAULT_SCHEMA,
      load,
      loadAll,
      dump,
      YAMLException,
      types: types$1,
      safeLoad,
      safeLoadAll,
      safeDump
    };
    function render(md) {
      const lute = Lute.New();
      const renderers = {};
      lute.SetJSRenderers({
        renderers: {
          Md2HTML: renderers
        }
      });
      return lute.MarkdownStr("", md);
    }
    function mdToHtml(md) {
      let html = "<h1>No markdown parser,see src/lib/htmlUtil.ts</h1>";
      html = render(md);
      return removeWidgetTag(html);
    }
    function removeWidgetTag(str2) {
      const publisherRegex = /<iframe.*src="\/widgets\/publisher.*<\/iframe>/g;
      str2 = str2.replaceAll(publisherRegex, "");
      const syPublisherRegex = /<iframe.*src="\/widgets\/sy-post-publisher.*<\/iframe>/g;
      str2 = str2.replaceAll(syPublisherRegex, "");
      const noteAttrRegex = /<iframe.*\/widgets\/Note*\sAttrs.*\/iframe>/g;
      str2 = str2.replaceAll(noteAttrRegex, "");
      return str2;
    }
    function parseHtml(html, length, ignore) {
      let allText = filterHtml(html);
      if (allText.length < length) {
        return allText;
      }
      if (ignore) {
        return allText.substring(0, length);
      }
      return allText.substring(0, length) + "...";
    }
    function filterHtml(str2) {
      str2 = str2.replace(/<style((.|\n|\r)*?)<\/style>/g, "");
      str2 = str2.replace(/<script((.|\n|\r)*?)<\/script>/g, "");
      str2 = str2.replace(/<[^>]*>/g, "");
      str2 = str2.replace(/&.*;/g, "");
      str2 = str2.replace(/(^\s*)|(\s*$)/g, "");
      str2 = str2.replace(/</g, "").replace(/>/g, "");
      str2 = str2.replace(/"/g, "").replace(/'/g, "");
      str2 = str2.replace(/\*/g, "");
      str2 = str2.replace(/\$/g, "");
      str2 = str2.replace(/\./g, "");
      str2 = str2.replace(/\+/g, "");
      str2 = str2.replace(/\s+/g, "");
      str2 = str2.replace(/[:|：]/g, "_");
      str2 = str2.replace(/[;|；]/g, "_");
      const excludeWords = ["\\d*/\\d/\\d*", "[\u3001|\\\\]", "[\uFF0C|,]", "\\d", "/", "-"];
      for (let i2 = 0; i2 < excludeWords.length; i2++) {
        const regex = new RegExp(excludeWords[i2], "g");
        str2 = str2.replaceAll(regex, "");
      }
      str2 = str2.toLowerCase();
      return str2;
    }
    function mdToPlanText(md) {
      let html = mdToHtml(md);
      html = removeWidgetTag(html);
      return filterHtml(html);
    }
    function getApiParams(apiType) {
      return getJSONConf(apiType);
    }
    const API_TYPE_VUEPRESS = "vuepress";
    const API_TYPE_CNBLOGS = "cnblogs";
    const API_TYPE_WORDPRESS = "wordpress";
    const API_TYPE_CONFLUENCE = "confluence";
    const API_TYPE_JVUE = "jvue";
    const API_TYPE_YUQUE = "yuque";
    const API_TYPE_WECHAT = "wechat";
    const API_TYPE_LIANDI = "liandi";
    const API_TYPE_SIYUAN = "siyuan";
    const API_TYPE_KMS = "kms";
    const API_TYPE_CONSTANTS = {
      API_TYPE_VUEPRESS,
      API_TYPE_CNBLOGS,
      API_TYPE_WORDPRESS,
      API_TYPE_CONFLUENCE,
      API_TYPE_JVUE,
      API_TYPE_YUQUE,
      API_TYPE_WECHAT,
      API_TYPE_LIANDI,
      API_TYPE_SIYUAN,
      API_TYPE_KMS
    };
    const MAX_PREVIEW_LENGTH = 255;
    const DYNAMIC_CONFIG_KEY = "dynamic-config";
    const CONSTANTS = {
      MAX_PREVIEW_LENGTH,
      DYNAMIC_CONFIG_KEY
    };
    class DynamicConfig {
      constructor(plantformType, plantformKey, plantformName) {
        __publicField(this, "posid");
        __publicField(this, "modelValue");
        __publicField(this, "plantformType");
        __publicField(this, "plantformKey");
        __publicField(this, "plantformName");
        this.plantformType = plantformType;
        this.plantformKey = plantformKey;
        this.plantformName = plantformName;
      }
    }
    var PlantformType = /* @__PURE__ */ ((PlantformType2) => {
      PlantformType2["Metaweblog"] = "Metaweblog";
      PlantformType2["Wordpress"] = "Wordpress";
      PlantformType2["Custom"] = "Custom";
      return PlantformType2;
    })(PlantformType || {});
    function getDynamicJsonCfg() {
      return getJSONConf(CONSTANTS.DYNAMIC_CONFIG_KEY);
    }
    function setDynamicJsonCfg(dynamicConfigArray) {
      let totalCfg = dynamicConfigArray;
      const metaweblogCfg = [];
      const wordpressCfg = [];
      totalCfg.forEach((item) => {
        switch (item.plantformType) {
          case "Metaweblog":
            metaweblogCfg.push(item);
            break;
          case "Wordpress":
            wordpressCfg.push(item);
            break;
        }
      });
      const dynamicJsonCfg = {
        totalCfg,
        metaweblogCfg,
        wordpressCfg
      };
      setJSONConf(CONSTANTS.DYNAMIC_CONFIG_KEY, dynamicJsonCfg);
    }
    function getPublishStatus(apiType, meta) {
      const metaweblogTypeArray = [API_TYPE_CONSTANTS.API_TYPE_JVUE, API_TYPE_CONSTANTS.API_TYPE_CONFLUENCE, API_TYPE_CONSTANTS.API_TYPE_CNBLOGS, API_TYPE_CONSTANTS.API_TYPE_WORDPRESS];
      const commonblogTypeArray = [API_TYPE_CONSTANTS.API_TYPE_LIANDI, API_TYPE_CONSTANTS.API_TYPE_YUQUE, API_TYPE_CONSTANTS.API_TYPE_KMS];
      const dynamicJsonCfg = getDynamicJsonCfg();
      const metaweblogArray = dynamicJsonCfg.metaweblogCfg || [];
      const wordpressArray = dynamicJsonCfg.wordpressCfg || [];
      metaweblogArray.forEach((item) => {
        const apiType2 = item.plantformKey;
        const switchKey = "switch-" + item.plantformKey;
        const switchValue = getBooleanConf(switchKey);
        if (switchValue) {
          metaweblogTypeArray.push(apiType2);
        }
      });
      wordpressArray.forEach((item) => {
        const apiType2 = item.plantformKey;
        const switchKey = "switch-" + item.plantformKey;
        const switchValue = getBooleanConf(switchKey);
        if (switchValue) {
          metaweblogTypeArray.push(apiType2);
        }
      });
      if (apiType == API_TYPE_CONSTANTS.API_TYPE_VUEPRESS) {
        const postidKey = getApiParams(apiType).posidKey;
        const postId = meta[postidKey] || "";
        logUtil.logInfo("\u5E73\u53F0=>", apiType);
        logUtil.logInfo("meta=>", meta);
        logUtil.logInfo("postidKey=>", postidKey);
        logUtil.logInfo("postidKey\u7684\u503C=>", postId);
        return postId !== "";
      } else if (metaweblogTypeArray.includes(apiType)) {
        const postidKey = getApiParams(apiType).posidKey;
        const postId = meta[postidKey] || "";
        logUtil.logInfo("\u5E73\u53F0=>", apiType);
        logUtil.logInfo("meta=>", meta);
        logUtil.logInfo("postidKey=>", postidKey);
        logUtil.logInfo("postidKey\u7684\u503C=>", postId);
        return postId !== "";
      } else if (commonblogTypeArray.includes(apiType)) {
        const postidKey = getApiParams(apiType).posidKey;
        const postId = meta[postidKey || ""] || "";
        logUtil.logInfo("\u5E73\u53F0=>", apiType);
        logUtil.logInfo("meta=>", meta);
        logUtil.logInfo("postidKey=>", postidKey);
        logUtil.logInfo("postidKey\u7684\u503C=>", postId);
        return postId !== "";
      }
      return false;
    }
    async function zhSlugify(q2) {
      const v2 = await fetch("https://api.terwer.space/api/translate?q=" + q2);
      let json2 = await v2.json();
      let res = json2[0][0];
      res = res.replaceAll(/-/g, "");
      logUtil.logInfo("res=>", res);
      return d$1(res);
    }
    async function pingyinSlugify(q2) {
      return d$1(q2);
    }
    function yaml2Obj(yaml) {
      let doc2 = "";
      try {
        yaml = yaml.replace("---\n", "");
        yaml = yaml.replace("---", "");
        doc2 = jsYaml.load(yaml);
      } catch (e2) {
        console.error(e2);
      }
      return doc2;
    }
    function obj2yaml(obj) {
      let res = jsYaml.dump(obj);
      res = "---\n" + res + "---";
      return res;
    }
    const addHoursToDate = function(date2, numOfHours) {
      date2.setTime(date2.getTime() + numOfHours * 60 * 60 * 1e3);
      return date2;
    };
    const formatIsoToZhDate = (str2, isAddTimeZone) => {
      if (!str2) {
        return "";
      }
      let newstr = str2;
      const isoDateRegex = /(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})(.\d{3})Z$/gm;
      const matches2 = newstr.match(isoDateRegex);
      if (matches2 == null) {
        return "";
      }
      for (let i2 = 0; i2 < matches2.length; i2++) {
        const match = matches2[i2];
        let newmatch = match;
        if (isAddTimeZone) {
          logUtil.logInfo(addHoursToDate(new Date(match), 8));
          newmatch = addHoursToDate(new Date(match), 8).toISOString();
        }
        const dts = newmatch.split("T");
        const d2 = dts[0];
        const t = dts[1].split(".")[0];
        const result = d2 + " " + t;
        newstr = newstr.replace(match, result);
        logUtil.logInfo("formatZhDate match=>", match);
        logUtil.logInfo("formatZhDate result=>", result);
      }
      return newstr;
    };
    const formatNumToZhDate = (str2) => {
      if (!str2) {
        return "";
      }
      let newstr = str2;
      const onlyNumbers = newstr.replace(/\D/g, "");
      const year = onlyNumbers.slice(0, 4);
      const month = onlyNumbers.slice(4, 6);
      const day = onlyNumbers.slice(6, 8);
      const hour = onlyNumbers.slice(8, 10);
      const min2 = onlyNumbers.slice(10, 12);
      const sec = onlyNumbers.slice(12, 14);
      let datestr = year;
      if (!month) {
        datestr = year;
      } else if (!day) {
        datestr = year + "-" + month;
      } else if (!hour) {
        datestr = year + "-" + month + "-" + day;
      } else if (!min2) {
        datestr = year + "-" + month + "-" + day + " " + hour;
      } else if (!sec) {
        datestr = year + "-" + month + "-" + day + " " + hour + ":" + min2;
      } else {
        datestr = year + "-" + month + "-" + day + " " + hour + ":" + min2 + ":" + sec;
      }
      logUtil.logInfo("formatNumToZhDate str=>", str2);
      logUtil.logInfo("formatNumToZhDate datestr=>", datestr);
      return datestr;
    };
    function changeTimeZone(date2, timeZone) {
      if (typeof date2 === "string") {
        return new Date(new Date(date2).toLocaleString("zh-CN", {
          timeZone
        }));
      }
      return new Date(date2.toLocaleString("zh-CN", {
        timeZone
      }));
    }
    function covertStringToDate(dateString) {
      const datestr = formatNumToZhDate(dateString);
      return changeTimeZone(datestr, "Asia/Shanghai");
    }
    async function cutWords(words) {
      words = mdToPlanText(words);
      logUtil.logInfo("\u51C6\u5907\u5F00\u59CB\u5206\u8BCD\uFF0C\u539F\u6587=>", words);
      const v2 = await fetch("https://api.terwer.space/api/jieba?q=" + words);
      let json2 = await v2.json();
      logUtil.logInfo("\u5206\u8BCD\u5B8C\u6BD5\uFF0C\u7ED3\u679C=>", json2.result);
      return json2.result;
    }
    function countWords(words, len) {
      const unUseWords = ["\u9875\u9762"];
      logUtil.logInfo("\u6587\u672C\u6E05\u6D17\uFF0C\u7EDF\u8BA1\uFF0C\u6392\u5E8F\uFF0C\u53BB\u9664\u65E0\u610F\u4E49\u7684\u5355\u8BCDunUseWords=>", unUseWords);
      let wordobj = words.reduce(function(count, word) {
        if (word.length === 1 || unUseWords.includes(word)) {
          count[word] = 0;
          return count;
        }
        count[word] = count.hasOwnProperty(word) ? count[word] + 1 : 1;
        return count;
      }, {});
      const wordarr = Object.keys(wordobj).sort(function(a2, b2) {
        return wordobj[b2] - wordobj[a2];
      });
      logUtil.logInfo("\u6587\u672C\u6E05\u6D17\u7ED3\u675Fwordarr=>", wordarr);
      if (!len || len === 0) {
        return wordarr;
      }
      return wordarr.slice(0, len);
    }
    function jiebaToHotWords(words, len) {
      const res = countWords(words, len);
      return res;
    }
    function inBrowser() {
      return typeof window !== "undefined";
    }
    function getQueryString(sParam) {
      if (!inBrowser()) {
        return "";
      }
      var sPageURL = window.location.search.substring(1);
      var sURLVariables = sPageURL.split("&");
      for (var i2 = 0; i2 < sURLVariables.length; i2++) {
        var sParameterName = sURLVariables[i2].split("=");
        if (sParameterName[0] == sParam) {
          return sParameterName[1];
        }
      }
    }
    function setUrlParameter(urlstring, key, value) {
      if (!inBrowser()) {
        return "";
      }
      if (urlstring.indexOf(key) > -1) {
        return urlstring;
      }
      urlstring += (urlstring.match(/[?]/g) ? "&" : "?") + key + "=" + value;
      return urlstring;
    }
    function isEmptyObject(obj) {
      if (!obj) {
        return true;
      }
      return Object.getPrototypeOf(obj) === Object.prototype && Object.getOwnPropertyNames(obj).length === 0 && Object.getOwnPropertySymbols(obj).length === 0;
    }
    function isEmptyString(str2) {
      if (!str2) {
        return true;
      }
      if (!(typeof str2 === "string")) {
        return true;
      }
      return str2.trim().length == 0;
    }
    function pathJoin(path1, path2) {
      let path = path1;
      const path1LastIdx = path1.lastIndexOf("/");
      if (path1LastIdx + 1 == path1.length) {
        path = path1.substring(0, path1LastIdx);
      }
      const path2Idx = path2.indexOf("/");
      if (path2Idx > 0) {
        path = path + "/" + path2;
      } else {
        path = path + path2;
      }
      return path;
    }
    function getBooleanConf(key) {
      logUtil.logInfo("------------------------------");
      logUtil.logInfo("\u5C1D\u8BD5\u4ECElocalStorage\u83B7\u53D6Boolean\u6570\u636E\uFF0Ckey=>", key);
      let valueObj = false;
      let value = getConf(key);
      valueObj = value.toLowerCase() === "true";
      logUtil.logInfo("\u4ECElocalStorage\u83B7\u53D6Boolean\u6570\u636E=>");
      logUtil.logInfo(valueObj);
      logUtil.logInfo("------------------------------");
      return valueObj;
    }
    function getJSONConf(key) {
      logUtil.logInfo("------------------------------");
      logUtil.logInfo("\u5C1D\u8BD5\u4ECElocalStorage\u83B7\u53D6JSON\u6570\u636E\uFF0Ckey=>", key);
      let valueObj = {};
      let value = getConf(key);
      if (value != "") {
        try {
          valueObj = JSON.parse(value);
        } catch (e2) {
          logUtil.logInfo("JSON\u683C\u5F0F\u4E0D\u6B63\u786E", e2);
        }
      }
      logUtil.logInfo("\u4ECElocalStorage\u83B7\u53D6JSON\u6570\u636E=>");
      logUtil.logInfo(valueObj);
      logUtil.logInfo("------------------------------");
      return valueObj;
    }
    function getConf(key) {
      logUtil.logInfo("\u5C1D\u8BD5\u4ECElocalStorage\u83B7\u53D6\u6570\u636E\uFF0Ckey=>", key);
      const value = localStorage.getItem(key);
      if (!value) {
        logUtil.logWarn("\u672A\u627E\u5230\u5BF9\u5E94\u6570\u636E\uFF0Ckey=>", key);
        return "";
      }
      logUtil.logInfo("\u4ECElocalStorage\u83B7\u53D6\u6570\u636E=>", value);
      return value;
    }
    function setBooleanConf(key, value) {
      logUtil.logInfo("++++++++++++++++++++++++++++++");
      logUtil.logInfo("\u5C1D\u8BD5\u4FDD\u5B58Boolean\u6570\u636E\u5230localStorage\u91CCkey=>", key);
      logUtil.logInfo("\u4FDD\u5B58Boolean\u6570\u636E\u5230localStorage=>");
      logUtil.logInfo(value);
      const boolString = value.toString();
      setConf(key, boolString);
      logUtil.logInfo("++++++++++++++++++++++++++++++");
    }
    function setJSONConf(key, value) {
      logUtil.logInfo("++++++++++++++++++++++++++++++");
      logUtil.logInfo("\u5C1D\u8BD5\u4FDD\u5B58JSON\u6570\u636E\u5230localStorage\u91CCkey=>", key);
      logUtil.logInfo("\u4FDD\u5B58JSON\u6570\u636E\u5230localStorage=>");
      logUtil.logInfo(value);
      const valueString = JSON.stringify(value);
      setConf(key, valueString);
      logUtil.logInfo("++++++++++++++++++++++++++++++");
    }
    function setConf(key, value) {
      if (!value || value == "") {
        logUtil.logWarn("\u7A7A\u503C\uFF0C\u4E0D\u4FDD\u5B58");
        return;
      }
      logUtil.logInfo("\u5C1D\u8BD5\u4FDD\u5B58\u6570\u636E\u5230localStorage\u91CCkey=>", key);
      logUtil.logInfo("\u4FDD\u5B58\u6570\u636E\u5230localStorage=>", value);
      localStorage.setItem(key, value);
    }
    function checkKeyExists(key) {
      let flag = false;
      for (let i2 = 0; i2 < localStorage.length; i2++) {
        const getKey = localStorage.key(i2);
        if (key === getKey) {
          flag = true;
          break;
        }
      }
      return flag;
    }
    const SWITCH_VUEPRESS_KEY = "switch-wordprss";
    const SWITCH_JVUE_KEY = "switch-jvue";
    const SWITCH_CONF_KEY = "switch-conf";
    const SWITCH_CNBLOGS_KEY = "switch-cnblogs";
    const SWITCH_WORDPRESS_KEY = "switch-wordpress";
    const SWITCH_LIANDI_KEY = "switch-liandi";
    const SWITCH_YUQUE_KEY = "switch-yuque";
    const SWITCH_KMS_KEY = "switch-kms";
    const SWITCH_CONSTSNTS = {
      SWITCH_VUEPRESS_KEY,
      SWITCH_JVUE_KEY,
      SWITCH_CONF_KEY,
      SWITCH_CNBLOGS_KEY,
      SWITCH_WORDPRESS_KEY,
      SWITCH_LIANDI_KEY,
      SWITCH_YUQUE_KEY,
      SWITCH_KMS_KEY
    };
    const __default__$1R = {
      name: "ServiceSwitch"
    };
    const _sfc_main$2H = /* @__PURE__ */ defineComponent({
      ...__default__$1R,
      setup(__props) {
        useI18n_1();
        let vuepressEnabled = ref(true);
        const jvueEnabled = ref(false);
        const confEnabled = ref(false);
        const cnblogsEnabled = ref(true);
        const wordpressEnabled = ref(false);
        const liandiEnabled = ref(true);
        const yuqueEnabled = ref(true);
        const kmsEnabled = ref(false);
        let formData = reactive({
          dynamicConfigArray: []
        });
        const jvueOnChange = (val) => {
          setBooleanConf(SWITCH_CONSTSNTS.SWITCH_JVUE_KEY, val);
        };
        const confOnChange = (val) => {
          setBooleanConf(SWITCH_CONSTSNTS.SWITCH_CONF_KEY, val);
        };
        const cnblogsOnChange = (val) => {
          setBooleanConf(SWITCH_CONSTSNTS.SWITCH_CNBLOGS_KEY, val);
        };
        const wordpressOnChange = (val) => {
          setBooleanConf(SWITCH_CONSTSNTS.SWITCH_WORDPRESS_KEY, val);
        };
        const liandiOnChange = (val) => {
          setBooleanConf(SWITCH_CONSTSNTS.SWITCH_LIANDI_KEY, val);
        };
        const yuqueOnChange = (val) => {
          setBooleanConf(SWITCH_CONSTSNTS.SWITCH_YUQUE_KEY, val);
        };
        const kmsOnChange = (val) => {
          setBooleanConf(SWITCH_CONSTSNTS.SWITCH_KMS_KEY, val);
        };
        const dynamicOnChange = (val) => {
          logUtil.logInfo("dynamicOnChange,val=>", val);
          const valArr = val.split("_");
          const switchKey = "switch-" + valArr[0];
          const switchStatus = valArr[1];
          setBooleanConf(switchKey, switchStatus);
        };
        const initConf = () => {
          vuepressEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_VUEPRESS_KEY);
          jvueEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_JVUE_KEY);
          confEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_CONF_KEY);
          cnblogsEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_CNBLOGS_KEY);
          wordpressEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_WORDPRESS_KEY);
          liandiEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_LIANDI_KEY);
          yuqueEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_YUQUE_KEY);
          kmsEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_KMS_KEY);
          const dynamicJsonCfg = getDynamicJsonCfg();
          const results = dynamicJsonCfg.totalCfg || [];
          formData.dynamicConfigArray = [];
          results.forEach((item) => {
            const switchKey = "switch-" + item.plantformKey;
            const switchValue = getConf(switchKey);
            item.modelValue = item.plantformKey + "_" + switchValue;
            formData.dynamicConfigArray.push(item);
          });
          logUtil.logInfo(formData.dynamicConfigArray);
        };
        onMounted(async () => {
          setBooleanConf(SWITCH_CONSTSNTS.SWITCH_VUEPRESS_KEY, true);
          if (cnblogsEnabled.value) {
            setBooleanConf(SWITCH_CONSTSNTS.SWITCH_CNBLOGS_KEY, true);
          }
          if (liandiEnabled.value) {
            setBooleanConf(SWITCH_CONSTSNTS.SWITCH_LIANDI_KEY, true);
          }
          if (yuqueEnabled.value) {
            setBooleanConf(SWITCH_CONSTSNTS.SWITCH_YUQUE_KEY, true);
          }
          initConf();
        });
        return (_ctx, _cache) => {
          const _component_el_switch = resolveComponent("el-switch");
          const _component_el_form_item = resolveComponent("el-form-item");
          const _component_el_form = resolveComponent("el-form");
          return openBlock(), createBlock(_component_el_form, {
            "label-width": "100px",
            inline: ""
          }, {
            default: withCtx(() => [createVNode(_component_el_form_item, {
              label: _ctx.$t("service.switch.vuepress")
            }, {
              default: withCtx(() => [createVNode(_component_el_switch, {
                modelValue: unref(vuepressEnabled),
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => isRef(vuepressEnabled) ? vuepressEnabled.value = $event : vuepressEnabled = $event),
                disabled: ""
              }, null, 8, ["modelValue"])]),
              _: 1
            }, 8, ["label"]), createVNode(_component_el_form_item, {
              label: _ctx.$t("service.switch.jvue")
            }, {
              default: withCtx(() => [createVNode(_component_el_switch, {
                modelValue: jvueEnabled.value,
                "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => jvueEnabled.value = $event),
                onChange: jvueOnChange
              }, null, 8, ["modelValue"])]),
              _: 1
            }, 8, ["label"]), createVNode(_component_el_form_item, {
              label: _ctx.$t("service.switch.conf")
            }, {
              default: withCtx(() => [createVNode(_component_el_switch, {
                modelValue: confEnabled.value,
                "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => confEnabled.value = $event),
                onChange: confOnChange
              }, null, 8, ["modelValue"])]),
              _: 1
            }, 8, ["label"]), createVNode(_component_el_form_item, {
              label: _ctx.$t("service.switch.cnblogs")
            }, {
              default: withCtx(() => [createVNode(_component_el_switch, {
                modelValue: cnblogsEnabled.value,
                "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => cnblogsEnabled.value = $event),
                onChange: cnblogsOnChange
              }, null, 8, ["modelValue"])]),
              _: 1
            }, 8, ["label"]), createVNode(_component_el_form_item, {
              label: _ctx.$t("service.switch.wordpress")
            }, {
              default: withCtx(() => [createVNode(_component_el_switch, {
                modelValue: wordpressEnabled.value,
                "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => wordpressEnabled.value = $event),
                onChange: wordpressOnChange
              }, null, 8, ["modelValue"])]),
              _: 1
            }, 8, ["label"]), createVNode(_component_el_form_item, {
              label: _ctx.$t("service.switch.liandi")
            }, {
              default: withCtx(() => [createVNode(_component_el_switch, {
                modelValue: liandiEnabled.value,
                "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => liandiEnabled.value = $event),
                onChange: liandiOnChange
              }, null, 8, ["modelValue"])]),
              _: 1
            }, 8, ["label"]), createVNode(_component_el_form_item, {
              label: _ctx.$t("service.switch.yuque")
            }, {
              default: withCtx(() => [createVNode(_component_el_switch, {
                modelValue: yuqueEnabled.value,
                "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => yuqueEnabled.value = $event),
                onChange: yuqueOnChange
              }, null, 8, ["modelValue"])]),
              _: 1
            }, 8, ["label"]), createVNode(_component_el_form_item, {
              label: _ctx.$t("service.switch.kms")
            }, {
              default: withCtx(() => [createVNode(_component_el_switch, {
                modelValue: kmsEnabled.value,
                "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => kmsEnabled.value = $event),
                onChange: kmsOnChange
              }, null, 8, ["modelValue"])]),
              _: 1
            }, 8, ["label"]), (openBlock(true), createElementBlock(Fragment, null, renderList(unref(formData).dynamicConfigArray, (cfg) => {
              return openBlock(), createBlock(_component_el_form_item, {
                label: cfg.plantformName + "_" + cfg.plantformType.toUpperCase().substring(0, 1)
              }, {
                default: withCtx(() => [createVNode(_component_el_switch, {
                  modelValue: cfg.modelValue,
                  "onUpdate:modelValue": ($event) => cfg.modelValue = $event,
                  "active-value": cfg.plantformKey + "_true",
                  "inactive-value": cfg.plantformKey + "_false",
                  onChange: dynamicOnChange
                }, null, 8, ["modelValue", "onUpdate:modelValue", "active-value", "inactive-value"])]),
                _: 2
              }, 1032, ["label"]);
            }), 256))]),
            _: 1
          });
        };
      }
    });
    var freeGlobal = typeof global$1 == "object" && global$1 && global$1.Object === Object && global$1;
    const freeGlobal$1 = freeGlobal;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal$1 || freeSelf || Function("return this")();
    const root$1 = root;
    var Symbol$1 = root$1.Symbol;
    const Symbol$2 = Symbol$1;
    var objectProto$e = Object.prototype;
    var hasOwnProperty$d = objectProto$e.hasOwnProperty;
    var nativeObjectToString$1 = objectProto$e.toString;
    var symToStringTag$1 = Symbol$2 ? Symbol$2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty$d.call(value, symToStringTag$1), tag = value[symToStringTag$1];
      try {
        value[symToStringTag$1] = void 0;
        var unmasked = true;
      } catch (e2) {
      }
      var result = nativeObjectToString$1.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag$1] = tag;
        } else {
          delete value[symToStringTag$1];
        }
      }
      return result;
    }
    var objectProto$d = Object.prototype;
    var nativeObjectToString = objectProto$d.toString;
    function objectToString$1(value) {
      return nativeObjectToString.call(value);
    }
    var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol$2 ? Symbol$2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString$1(value);
    }
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    var symbolTag$3 = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag$3;
    }
    function arrayMap(array2, iteratee) {
      var index2 = -1, length = array2 == null ? 0 : array2.length, result = Array(length);
      while (++index2 < length) {
        result[index2] = iteratee(array2[index2], index2, array2);
      }
      return result;
    }
    var isArray$3 = Array.isArray;
    const isArray$4 = isArray$3;
    var INFINITY$3 = 1 / 0;
    var symbolProto$2 = Symbol$2 ? Symbol$2.prototype : void 0, symbolToString = symbolProto$2 ? symbolProto$2.toString : void 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isArray$4(value)) {
        return arrayMap(value, baseToString) + "";
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY$3 ? "-0" : result;
    }
    var reWhitespace = /\s/;
    function trimmedEndIndex(string2) {
      var index2 = string2.length;
      while (index2-- && reWhitespace.test(string2.charAt(index2))) {
      }
      return index2;
    }
    var reTrimStart = /^\s+/;
    function baseTrim(string2) {
      return string2 ? string2.slice(0, trimmedEndIndex(string2) + 1).replace(reTrimStart, "") : string2;
    }
    function isObject$3(value) {
      var type2 = typeof value;
      return value != null && (type2 == "object" || type2 == "function");
    }
    var NAN = 0 / 0;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject$3(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject$3(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary2 = reIsBinary.test(value);
      return isBinary2 || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary2 ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    function identity(value) {
      return value;
    }
    var asyncTag = "[object AsyncFunction]", funcTag$2 = "[object Function]", genTag$1 = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
    function isFunction$2(value) {
      if (!isObject$3(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
    }
    var coreJsData = root$1["__core-js_shared__"];
    const coreJsData$1 = coreJsData;
    var maskSrcKey = function() {
      var uid2 = /[^.]+$/.exec(coreJsData$1 && coreJsData$1.keys && coreJsData$1.keys.IE_PROTO || "");
      return uid2 ? "Symbol(src)_1." + uid2 : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    var funcProto$1 = Function.prototype;
    var funcToString$1 = funcProto$1.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString$1.call(func);
        } catch (e2) {
        }
        try {
          return func + "";
        } catch (e2) {
        }
      }
      return "";
    }
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto = Function.prototype, objectProto$c = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty$c = objectProto$c.hasOwnProperty;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty$c).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative(value) {
      if (!isObject$3(value) || isMasked(value)) {
        return false;
      }
      var pattern2 = isFunction$2(value) ? reIsNative : reIsHostCtor;
      return pattern2.test(toSource(value));
    }
    function getValue$1(object2, key) {
      return object2 == null ? void 0 : object2[key];
    }
    function getNative(object2, key) {
      var value = getValue$1(object2, key);
      return baseIsNative(value) ? value : void 0;
    }
    var WeakMap$1 = getNative(root$1, "WeakMap");
    const WeakMap$2 = WeakMap$1;
    var objectCreate = Object.create;
    var baseCreate = function() {
      function object2() {
      }
      return function(proto) {
        if (!isObject$3(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object2.prototype = proto;
        var result = new object2();
        object2.prototype = void 0;
        return result;
      };
    }();
    const baseCreate$1 = baseCreate;
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function noop$2() {
    }
    function copyArray(source, array2) {
      var index2 = -1, length = source.length;
      array2 || (array2 = Array(length));
      while (++index2 < length) {
        array2[index2] = source[index2];
      }
      return array2;
    }
    var HOT_COUNT = 800, HOT_SPAN = 16;
    var nativeNow = Date.now;
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    function constant(value) {
      return function() {
        return value;
      };
    }
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e2) {
      }
    }();
    const defineProperty$1 = defineProperty;
    var baseSetToString = !defineProperty$1 ? identity : function(func, string2) {
      return defineProperty$1(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string2),
        "writable": true
      });
    };
    const baseSetToString$1 = baseSetToString;
    var setToString = shortOut(baseSetToString$1);
    const setToString$1 = setToString;
    function arrayEach(array2, iteratee) {
      var index2 = -1, length = array2 == null ? 0 : array2.length;
      while (++index2 < length) {
        if (iteratee(array2[index2], index2, array2) === false) {
          break;
        }
      }
      return array2;
    }
    function baseFindIndex(array2, predicate, fromIndex, fromRight) {
      var length = array2.length, index2 = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index2-- : ++index2 < length) {
        if (predicate(array2[index2], index2, array2)) {
          return index2;
        }
      }
      return -1;
    }
    function baseIsNaN(value) {
      return value !== value;
    }
    function strictIndexOf(array2, value, fromIndex) {
      var index2 = fromIndex - 1, length = array2.length;
      while (++index2 < length) {
        if (array2[index2] === value) {
          return index2;
        }
      }
      return -1;
    }
    function baseIndexOf(array2, value, fromIndex) {
      return value === value ? strictIndexOf(array2, value, fromIndex) : baseFindIndex(array2, baseIsNaN, fromIndex);
    }
    function arrayIncludes(array2, value) {
      var length = array2 == null ? 0 : array2.length;
      return !!length && baseIndexOf(array2, value, 0) > -1;
    }
    var MAX_SAFE_INTEGER$1 = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value, length) {
      var type2 = typeof value;
      length = length == null ? MAX_SAFE_INTEGER$1 : length;
      return !!length && (type2 == "number" || type2 != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function baseAssignValue(object2, key, value) {
      if (key == "__proto__" && defineProperty$1) {
        defineProperty$1(object2, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object2[key] = value;
      }
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var objectProto$b = Object.prototype;
    var hasOwnProperty$b = objectProto$b.hasOwnProperty;
    function assignValue(object2, key, value) {
      var objValue = object2[key];
      if (!(hasOwnProperty$b.call(object2, key) && eq(objValue, value)) || value === void 0 && !(key in object2)) {
        baseAssignValue(object2, key, value);
      }
    }
    function copyObject(source, props, object2, customizer) {
      var isNew = !object2;
      object2 || (object2 = {});
      var index2 = -1, length = props.length;
      while (++index2 < length) {
        var key = props[index2];
        var newValue = customizer ? customizer(object2[key], source[key], key, object2, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object2, key, newValue);
        } else {
          assignValue(object2, key, newValue);
        }
      }
      return object2;
    }
    var nativeMax$1 = Math.max;
    function overRest(func, start, transform2) {
      start = nativeMax$1(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index2 = -1, length = nativeMax$1(args.length - start, 0), array2 = Array(length);
        while (++index2 < length) {
          array2[index2] = args[start + index2];
        }
        index2 = -1;
        var otherArgs = Array(start + 1);
        while (++index2 < start) {
          otherArgs[index2] = args[index2];
        }
        otherArgs[start] = transform2(array2);
        return apply(func, this, otherArgs);
      };
    }
    function baseRest(func, start) {
      return setToString$1(overRest(func, start, identity), func + "");
    }
    var MAX_SAFE_INTEGER = 9007199254740991;
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction$2(value);
    }
    var objectProto$a = Object.prototype;
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto$a;
      return value === proto;
    }
    function baseTimes(n2, iteratee) {
      var index2 = -1, result = Array(n2);
      while (++index2 < n2) {
        result[index2] = iteratee(index2);
      }
      return result;
    }
    var argsTag$3 = "[object Arguments]";
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag$3;
    }
    var objectProto$9 = Object.prototype;
    var hasOwnProperty$a = objectProto$9.hasOwnProperty;
    var propertyIsEnumerable$1 = objectProto$9.propertyIsEnumerable;
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty$a.call(value, "callee") && !propertyIsEnumerable$1.call(value, "callee");
    };
    const isArguments$1 = isArguments;
    function stubFalse() {
      return false;
    }
    var freeExports$2 = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule$2 = freeExports$2 && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;
    var Buffer$3 = moduleExports$2 ? root$1.Buffer : void 0;
    var nativeIsBuffer = Buffer$3 ? Buffer$3.isBuffer : void 0;
    var isBuffer$1 = nativeIsBuffer || stubFalse;
    const isBuffer$2 = isBuffer$1;
    var argsTag$2 = "[object Arguments]", arrayTag$2 = "[object Array]", boolTag$3 = "[object Boolean]", dateTag$3 = "[object Date]", errorTag$2 = "[object Error]", funcTag$1 = "[object Function]", mapTag$5 = "[object Map]", numberTag$3 = "[object Number]", objectTag$3 = "[object Object]", regexpTag$3 = "[object RegExp]", setTag$5 = "[object Set]", stringTag$3 = "[object String]", weakMapTag$2 = "[object WeakMap]";
    var arrayBufferTag$3 = "[object ArrayBuffer]", dataViewTag$4 = "[object DataView]", float32Tag$2 = "[object Float32Array]", float64Tag$2 = "[object Float64Array]", int8Tag$2 = "[object Int8Array]", int16Tag$2 = "[object Int16Array]", int32Tag$2 = "[object Int32Array]", uint8Tag$2 = "[object Uint8Array]", uint8ClampedTag$2 = "[object Uint8ClampedArray]", uint16Tag$2 = "[object Uint16Array]", uint32Tag$2 = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
    typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$3] = typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] = typedArrayTags[errorTag$2] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$5] = typedArrayTags[numberTag$3] = typedArrayTags[objectTag$3] = typedArrayTags[regexpTag$3] = typedArrayTags[setTag$5] = typedArrayTags[stringTag$3] = typedArrayTags[weakMapTag$2] = false;
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    var freeExports$1 = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule$1 = freeExports$1 && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
    var freeProcess = moduleExports$1 && freeGlobal$1.process;
    var nodeUtil = function() {
      try {
        var types2 = freeModule$1 && freeModule$1.require && freeModule$1.require("util").types;
        if (types2) {
          return types2;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e2) {
      }
    }();
    const nodeUtil$1 = nodeUtil;
    var nodeIsTypedArray = nodeUtil$1 && nodeUtil$1.isTypedArray;
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    const isTypedArray$1 = isTypedArray;
    var objectProto$8 = Object.prototype;
    var hasOwnProperty$9 = objectProto$8.hasOwnProperty;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray$4(value), isArg = !isArr && isArguments$1(value), isBuff = !isArr && !isArg && isBuffer$2(value), isType = !isArr && !isArg && !isBuff && isTypedArray$1(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty$9.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function overArg(func, transform2) {
      return function(arg) {
        return func(transform2(arg));
      };
    }
    var nativeKeys = overArg(Object.keys, Object);
    const nativeKeys$1 = nativeKeys;
    var objectProto$7 = Object.prototype;
    var hasOwnProperty$8 = objectProto$7.hasOwnProperty;
    function baseKeys(object2) {
      if (!isPrototype(object2)) {
        return nativeKeys$1(object2);
      }
      var result = [];
      for (var key in Object(object2)) {
        if (hasOwnProperty$8.call(object2, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function keys$1(object2) {
      return isArrayLike(object2) ? arrayLikeKeys(object2) : baseKeys(object2);
    }
    function nativeKeysIn(object2) {
      var result = [];
      if (object2 != null) {
        for (var key in Object(object2)) {
          result.push(key);
        }
      }
      return result;
    }
    var objectProto$6 = Object.prototype;
    var hasOwnProperty$7 = objectProto$6.hasOwnProperty;
    function baseKeysIn(object2) {
      if (!isObject$3(object2)) {
        return nativeKeysIn(object2);
      }
      var isProto = isPrototype(object2), result = [];
      for (var key in object2) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty$7.call(object2, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    function keysIn(object2) {
      return isArrayLike(object2) ? arrayLikeKeys(object2, true) : baseKeysIn(object2);
    }
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
    function isKey(value, object2) {
      if (isArray$4(value)) {
        return false;
      }
      var type2 = typeof value;
      if (type2 == "number" || type2 == "symbol" || type2 == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object2 != null && value in Object(object2);
    }
    var nativeCreate = getNative(Object, "create");
    const nativeCreate$1 = nativeCreate;
    function hashClear() {
      this.__data__ = nativeCreate$1 ? nativeCreate$1(null) : {};
      this.size = 0;
    }
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    var HASH_UNDEFINED$2 = "__lodash_hash_undefined__";
    var objectProto$5 = Object.prototype;
    var hasOwnProperty$6 = objectProto$5.hasOwnProperty;
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate$1) {
        var result = data[key];
        return result === HASH_UNDEFINED$2 ? void 0 : result;
      }
      return hasOwnProperty$6.call(data, key) ? data[key] : void 0;
    }
    var objectProto$4 = Object.prototype;
    var hasOwnProperty$5 = objectProto$4.hasOwnProperty;
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate$1 ? data[key] !== void 0 : hasOwnProperty$5.call(data, key);
    }
    var HASH_UNDEFINED$1 = "__lodash_hash_undefined__";
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate$1 && value === void 0 ? HASH_UNDEFINED$1 : value;
      return this;
    }
    function Hash(entries) {
      var index2 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index2 < length) {
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
      }
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function assocIndexOf(array2, key) {
      var length = array2.length;
      while (length--) {
        if (eq(array2[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key) {
      var data = this.__data__, index2 = assocIndexOf(data, key);
      if (index2 < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index2 == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index2, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index2 = assocIndexOf(data, key);
      return index2 < 0 ? void 0 : data[index2][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index2 = assocIndexOf(data, key);
      if (index2 < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index2][1] = value;
      }
      return this;
    }
    function ListCache(entries) {
      var index2 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index2 < length) {
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    var Map$1 = getNative(root$1, "Map");
    const Map$2 = Map$1;
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map$2 || ListCache)(),
        "string": new Hash()
      };
    }
    function isKeyable(value) {
      var type2 = typeof value;
      return type2 == "string" || type2 == "number" || type2 == "symbol" || type2 == "boolean" ? value !== "__proto__" : value === null;
    }
    function getMapData(map2, key) {
      var data = map2.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size2 = data.size;
      data.set(key, value);
      this.size += data.size == size2 ? 0 : 1;
      return this;
    }
    function MapCache(entries) {
      var index2 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index2 < length) {
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    var FUNC_ERROR_TEXT$2 = "Expected a function";
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT$2);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache2 = memoized.cache;
        if (cache2.has(key)) {
          return cache2.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache2.set(key, result) || cache2;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    var MAX_MEMOIZE_SIZE = 500;
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache2.size === MAX_MEMOIZE_SIZE) {
          cache2.clear();
        }
        return key;
      });
      var cache2 = result.cache;
      return result;
    }
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = memoizeCapped(function(string2) {
      var result = [];
      if (string2.charCodeAt(0) === 46) {
        result.push("");
      }
      string2.replace(rePropName, function(match, number2, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, "$1") : number2 || match);
      });
      return result;
    });
    const stringToPath$1 = stringToPath;
    function toString$1(value) {
      return value == null ? "" : baseToString(value);
    }
    function castPath(value, object2) {
      if (isArray$4(value)) {
        return value;
      }
      return isKey(value, object2) ? [value] : stringToPath$1(toString$1(value));
    }
    var INFINITY$2 = 1 / 0;
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY$2 ? "-0" : result;
    }
    function baseGet(object2, path) {
      path = castPath(path, object2);
      var index2 = 0, length = path.length;
      while (object2 != null && index2 < length) {
        object2 = object2[toKey(path[index2++])];
      }
      return index2 && index2 == length ? object2 : void 0;
    }
    function get$1(object2, path, defaultValue) {
      var result = object2 == null ? void 0 : baseGet(object2, path);
      return result === void 0 ? defaultValue : result;
    }
    function arrayPush(array2, values) {
      var index2 = -1, length = values.length, offset2 = array2.length;
      while (++index2 < length) {
        array2[offset2 + index2] = values[index2];
      }
      return array2;
    }
    var spreadableSymbol = Symbol$2 ? Symbol$2.isConcatSpreadable : void 0;
    function isFlattenable(value) {
      return isArray$4(value) || isArguments$1(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }
    function baseFlatten(array2, depth, predicate, isStrict, result) {
      var index2 = -1, length = array2.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index2 < length) {
        var value = array2[index2];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }
    function flatten(array2) {
      var length = array2 == null ? 0 : array2.length;
      return length ? baseFlatten(array2, 1) : [];
    }
    function flatRest(func) {
      return setToString$1(overRest(func, void 0, flatten), func + "");
    }
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    const getPrototype$1 = getPrototype;
    function castArray$1() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray$4(value) ? value : [value];
    }
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    var LARGE_ARRAY_SIZE$1 = 200;
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs2 = data.__data__;
        if (!Map$2 || pairs2.length < LARGE_ARRAY_SIZE$1 - 1) {
          pairs2.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs2);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function baseAssign(object2, source) {
      return object2 && copyObject(source, keys$1(source), object2);
    }
    function baseAssignIn(object2, source) {
      return object2 && copyObject(source, keysIn(source), object2);
    }
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer$2 = moduleExports ? root$1.Buffer : void 0, allocUnsafe$1 = Buffer$2 ? Buffer$2.allocUnsafe : void 0;
    function cloneBuffer(buffer2, isDeep) {
      if (isDeep) {
        return buffer2.slice();
      }
      var length = buffer2.length, result = allocUnsafe$1 ? allocUnsafe$1(length) : new buffer2.constructor(length);
      buffer2.copy(result);
      return result;
    }
    function arrayFilter(array2, predicate) {
      var index2 = -1, length = array2 == null ? 0 : array2.length, resIndex = 0, result = [];
      while (++index2 < length) {
        var value = array2[index2];
        if (predicate(value, index2, array2)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    function stubArray() {
      return [];
    }
    var objectProto$3 = Object.prototype;
    var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;
    var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
    var getSymbols = !nativeGetSymbols$1 ? stubArray : function(object2) {
      if (object2 == null) {
        return [];
      }
      object2 = Object(object2);
      return arrayFilter(nativeGetSymbols$1(object2), function(symbol) {
        return propertyIsEnumerable.call(object2, symbol);
      });
    };
    const getSymbols$1 = getSymbols;
    function copySymbols(source, object2) {
      return copyObject(source, getSymbols$1(source), object2);
    }
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object2) {
      var result = [];
      while (object2) {
        arrayPush(result, getSymbols$1(object2));
        object2 = getPrototype$1(object2);
      }
      return result;
    };
    const getSymbolsIn$1 = getSymbolsIn;
    function copySymbolsIn(source, object2) {
      return copyObject(source, getSymbolsIn$1(source), object2);
    }
    function baseGetAllKeys(object2, keysFunc, symbolsFunc) {
      var result = keysFunc(object2);
      return isArray$4(object2) ? result : arrayPush(result, symbolsFunc(object2));
    }
    function getAllKeys(object2) {
      return baseGetAllKeys(object2, keys$1, getSymbols$1);
    }
    function getAllKeysIn(object2) {
      return baseGetAllKeys(object2, keysIn, getSymbolsIn$1);
    }
    var DataView$1 = getNative(root$1, "DataView");
    const DataView$2 = DataView$1;
    var Promise$1 = getNative(root$1, "Promise");
    const Promise$2 = Promise$1;
    var Set$1 = getNative(root$1, "Set");
    const Set$2 = Set$1;
    var mapTag$4 = "[object Map]", objectTag$2 = "[object Object]", promiseTag = "[object Promise]", setTag$4 = "[object Set]", weakMapTag$1 = "[object WeakMap]";
    var dataViewTag$3 = "[object DataView]";
    var dataViewCtorString = toSource(DataView$2), mapCtorString = toSource(Map$2), promiseCtorString = toSource(Promise$2), setCtorString = toSource(Set$2), weakMapCtorString = toSource(WeakMap$2);
    var getTag = baseGetTag;
    if (DataView$2 && getTag(new DataView$2(new ArrayBuffer(1))) != dataViewTag$3 || Map$2 && getTag(new Map$2()) != mapTag$4 || Promise$2 && getTag(Promise$2.resolve()) != promiseTag || Set$2 && getTag(new Set$2()) != setTag$4 || WeakMap$2 && getTag(new WeakMap$2()) != weakMapTag$1) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag$2 ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag$3;
            case mapCtorString:
              return mapTag$4;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag$4;
            case weakMapCtorString:
              return weakMapTag$1;
          }
        }
        return result;
      };
    }
    const getTag$1 = getTag;
    var objectProto$2 = Object.prototype;
    var hasOwnProperty$4 = objectProto$2.hasOwnProperty;
    function initCloneArray(array2) {
      var length = array2.length, result = new array2.constructor(length);
      if (length && typeof array2[0] == "string" && hasOwnProperty$4.call(array2, "index")) {
        result.index = array2.index;
        result.input = array2.input;
      }
      return result;
    }
    var Uint8Array$1 = root$1.Uint8Array;
    const Uint8Array$2 = Uint8Array$1;
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array$2(result).set(new Uint8Array$2(arrayBuffer));
      return result;
    }
    function cloneDataView(dataView, isDeep) {
      var buffer2 = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer2, dataView.byteOffset, dataView.byteLength);
    }
    var reFlags = /\w*$/;
    function cloneRegExp(regexp2) {
      var result = new regexp2.constructor(regexp2.source, reFlags.exec(regexp2));
      result.lastIndex = regexp2.lastIndex;
      return result;
    }
    var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : void 0, symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : void 0;
    function cloneSymbol(symbol) {
      return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
    }
    function cloneTypedArray(typedArray, isDeep) {
      var buffer2 = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer2, typedArray.byteOffset, typedArray.length);
    }
    var boolTag$2 = "[object Boolean]", dateTag$2 = "[object Date]", mapTag$3 = "[object Map]", numberTag$2 = "[object Number]", regexpTag$2 = "[object RegExp]", setTag$3 = "[object Set]", stringTag$2 = "[object String]", symbolTag$2 = "[object Symbol]";
    var arrayBufferTag$2 = "[object ArrayBuffer]", dataViewTag$2 = "[object DataView]", float32Tag$1 = "[object Float32Array]", float64Tag$1 = "[object Float64Array]", int8Tag$1 = "[object Int8Array]", int16Tag$1 = "[object Int16Array]", int32Tag$1 = "[object Int32Array]", uint8Tag$1 = "[object Uint8Array]", uint8ClampedTag$1 = "[object Uint8ClampedArray]", uint16Tag$1 = "[object Uint16Array]", uint32Tag$1 = "[object Uint32Array]";
    function initCloneByTag(object2, tag, isDeep) {
      var Ctor = object2.constructor;
      switch (tag) {
        case arrayBufferTag$2:
          return cloneArrayBuffer(object2);
        case boolTag$2:
        case dateTag$2:
          return new Ctor(+object2);
        case dataViewTag$2:
          return cloneDataView(object2, isDeep);
        case float32Tag$1:
        case float64Tag$1:
        case int8Tag$1:
        case int16Tag$1:
        case int32Tag$1:
        case uint8Tag$1:
        case uint8ClampedTag$1:
        case uint16Tag$1:
        case uint32Tag$1:
          return cloneTypedArray(object2, isDeep);
        case mapTag$3:
          return new Ctor();
        case numberTag$2:
        case stringTag$2:
          return new Ctor(object2);
        case regexpTag$2:
          return cloneRegExp(object2);
        case setTag$3:
          return new Ctor();
        case symbolTag$2:
          return cloneSymbol(object2);
      }
    }
    function initCloneObject(object2) {
      return typeof object2.constructor == "function" && !isPrototype(object2) ? baseCreate$1(getPrototype$1(object2)) : {};
    }
    var mapTag$2 = "[object Map]";
    function baseIsMap(value) {
      return isObjectLike(value) && getTag$1(value) == mapTag$2;
    }
    var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
    const isMap$1 = isMap;
    var setTag$2 = "[object Set]";
    function baseIsSet(value) {
      return isObjectLike(value) && getTag$1(value) == setTag$2;
    }
    var nodeIsSet = nodeUtil$1 && nodeUtil$1.isSet;
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
    const isSet$1 = isSet;
    var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG$1 = 4;
    var argsTag$1 = "[object Arguments]", arrayTag$1 = "[object Array]", boolTag$1 = "[object Boolean]", dateTag$1 = "[object Date]", errorTag$1 = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag$1 = "[object Map]", numberTag$1 = "[object Number]", objectTag$1 = "[object Object]", regexpTag$1 = "[object RegExp]", setTag$1 = "[object Set]", stringTag$1 = "[object String]", symbolTag$1 = "[object Symbol]", weakMapTag = "[object WeakMap]";
    var arrayBufferTag$1 = "[object ArrayBuffer]", dataViewTag$1 = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
    var cloneableTags = {};
    cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] = cloneableTags[boolTag$1] = cloneableTags[dateTag$1] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag$1] = cloneableTags[numberTag$1] = cloneableTags[objectTag$1] = cloneableTags[regexpTag$1] = cloneableTags[setTag$1] = cloneableTags[stringTag$1] = cloneableTags[symbolTag$1] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag$1] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    function baseClone(value, bitmask, customizer, key, object2, stack2) {
      var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG$1;
      if (customizer) {
        result = object2 ? customizer(value, key, object2, stack2) : customizer(value);
      }
      if (result !== void 0) {
        return result;
      }
      if (!isObject$3(value)) {
        return value;
      }
      var isArr = isArray$4(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag$1(value), isFunc = tag == funcTag || tag == genTag;
        if (isBuffer$2(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag$1 || tag == argsTag$1 || isFunc && !object2) {
          result = isFlat || isFunc ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object2 ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      stack2 || (stack2 = new Stack());
      var stacked = stack2.get(value);
      if (stacked) {
        return stacked;
      }
      stack2.set(value, result);
      if (isSet$1(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack2));
        });
      } else if (isMap$1(value)) {
        value.forEach(function(subValue, key2) {
          result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack2));
        });
      }
      var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys$1;
      var props = isArr ? void 0 : keysFunc(value);
      arrayEach(props || value, function(subValue, key2) {
        if (props) {
          key2 = subValue;
          subValue = value[key2];
        }
        assignValue(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack2));
      });
      return result;
    }
    var CLONE_SYMBOLS_FLAG = 4;
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    function SetCache(values) {
      var index2 = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index2 < length) {
        this.add(values[index2]);
      }
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function arraySome(array2, predicate) {
      var index2 = -1, length = array2 == null ? 0 : array2.length;
      while (++index2 < length) {
        if (predicate(array2[index2], index2, array2)) {
          return true;
        }
      }
      return false;
    }
    function cacheHas(cache2, key) {
      return cache2.has(key);
    }
    var COMPARE_PARTIAL_FLAG$3 = 1, COMPARE_UNORDERED_FLAG$1 = 2;
    function equalArrays(array2, other, bitmask, customizer, equalFunc, stack2) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3, arrLength = array2.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var arrStacked = stack2.get(array2);
      var othStacked = stack2.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array2;
      }
      var index2 = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG$1 ? new SetCache() : void 0;
      stack2.set(array2, other);
      stack2.set(other, array2);
      while (++index2 < arrLength) {
        var arrValue = array2[index2], othValue = other[index2];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index2, other, array2, stack2) : customizer(arrValue, othValue, index2, array2, other, stack2);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack2))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack2))) {
          result = false;
          break;
        }
      }
      stack2["delete"](array2);
      stack2["delete"](other);
      return result;
    }
    function mapToArray(map2) {
      var index2 = -1, result = Array(map2.size);
      map2.forEach(function(value, key) {
        result[++index2] = [key, value];
      });
      return result;
    }
    function setToArray(set2) {
      var index2 = -1, result = Array(set2.size);
      set2.forEach(function(value) {
        result[++index2] = value;
      });
      return result;
    }
    var COMPARE_PARTIAL_FLAG$2 = 1, COMPARE_UNORDERED_FLAG = 2;
    var boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", mapTag = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]";
    var symbolProto = Symbol$2 ? Symbol$2.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function equalByTag(object2, other, tag, bitmask, customizer, equalFunc, stack2) {
      switch (tag) {
        case dataViewTag:
          if (object2.byteLength != other.byteLength || object2.byteOffset != other.byteOffset) {
            return false;
          }
          object2 = object2.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object2.byteLength != other.byteLength || !equalFunc(new Uint8Array$2(object2), new Uint8Array$2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object2, +other);
        case errorTag:
          return object2.name == other.name && object2.message == other.message;
        case regexpTag:
        case stringTag:
          return object2 == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2;
          convert || (convert = setToArray);
          if (object2.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack2.get(object2);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack2.set(object2, other);
          var result = equalArrays(convert(object2), convert(other), bitmask, customizer, equalFunc, stack2);
          stack2["delete"](object2);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object2) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    var COMPARE_PARTIAL_FLAG$1 = 1;
    var objectProto$1 = Object.prototype;
    var hasOwnProperty$3 = objectProto$1.hasOwnProperty;
    function equalObjects(object2, other, bitmask, customizer, equalFunc, stack2) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1, objProps = getAllKeys(object2), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index2 = objLength;
      while (index2--) {
        var key = objProps[index2];
        if (!(isPartial ? key in other : hasOwnProperty$3.call(other, key))) {
          return false;
        }
      }
      var objStacked = stack2.get(object2);
      var othStacked = stack2.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object2;
      }
      var result = true;
      stack2.set(object2, other);
      stack2.set(other, object2);
      var skipCtor = isPartial;
      while (++index2 < objLength) {
        key = objProps[index2];
        var objValue = object2[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object2, stack2) : customizer(objValue, othValue, key, object2, other, stack2);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack2) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object2.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object2 && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack2["delete"](object2);
      stack2["delete"](other);
      return result;
    }
    var COMPARE_PARTIAL_FLAG = 1;
    var argsTag = "[object Arguments]", arrayTag = "[object Array]", objectTag = "[object Object]";
    var objectProto = Object.prototype;
    var hasOwnProperty$2 = objectProto.hasOwnProperty;
    function baseIsEqualDeep(object2, other, bitmask, customizer, equalFunc, stack2) {
      var objIsArr = isArray$4(object2), othIsArr = isArray$4(other), objTag = objIsArr ? arrayTag : getTag$1(object2), othTag = othIsArr ? arrayTag : getTag$1(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer$2(object2)) {
        if (!isBuffer$2(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack2 || (stack2 = new Stack());
        return objIsArr || isTypedArray$1(object2) ? equalArrays(object2, other, bitmask, customizer, equalFunc, stack2) : equalByTag(object2, other, objTag, bitmask, customizer, equalFunc, stack2);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty$2.call(object2, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty$2.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object2.value() : object2, othUnwrapped = othIsWrapped ? other.value() : other;
          stack2 || (stack2 = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack2);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack2 || (stack2 = new Stack());
      return equalObjects(object2, other, bitmask, customizer, equalFunc, stack2);
    }
    function baseIsEqual(value, other, bitmask, customizer, stack2) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack2);
    }
    function baseHasIn(object2, key) {
      return object2 != null && key in Object(object2);
    }
    function hasPath(object2, path, hasFunc) {
      path = castPath(path, object2);
      var index2 = -1, length = path.length, result = false;
      while (++index2 < length) {
        var key = toKey(path[index2]);
        if (!(result = object2 != null && hasFunc(object2, key))) {
          break;
        }
        object2 = object2[key];
      }
      if (result || ++index2 != length) {
        return result;
      }
      length = object2 == null ? 0 : object2.length;
      return !!length && isLength(length) && isIndex(key, length) && (isArray$4(object2) || isArguments$1(object2));
    }
    function hasIn(object2, path) {
      return object2 != null && hasPath(object2, path, baseHasIn);
    }
    var now = function() {
      return root$1.Date.now();
    };
    const now$1 = now;
    var FUNC_ERROR_TEXT$1 = "Expected a function";
    var nativeMax = Math.max, nativeMin = Math.min;
    function debounce(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT$1);
      }
      wait = toNumber(wait) || 0;
      if (isObject$3(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
        return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now$1();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now$1());
      }
      function debounced() {
        var time = now$1(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function arrayIncludesWith(array2, value, comparator) {
      var index2 = -1, length = array2 == null ? 0 : array2.length;
      while (++index2 < length) {
        if (comparator(value, array2[index2])) {
          return true;
        }
      }
      return false;
    }
    var INFINITY$1 = 1 / 0;
    function flattenDeep(array2) {
      var length = array2 == null ? 0 : array2.length;
      return length ? baseFlatten(array2, INFINITY$1) : [];
    }
    function fromPairs(pairs2) {
      var index2 = -1, length = pairs2 == null ? 0 : pairs2.length, result = {};
      while (++index2 < length) {
        var pair = pairs2[index2];
        result[pair[0]] = pair[1];
      }
      return result;
    }
    function isEqual$1(value, other) {
      return baseIsEqual(value, other);
    }
    function isNil(value) {
      return value == null;
    }
    function baseSet(object2, path, value, customizer) {
      if (!isObject$3(object2)) {
        return object2;
      }
      path = castPath(path, object2);
      var index2 = -1, length = path.length, lastIndex = length - 1, nested = object2;
      while (nested != null && ++index2 < length) {
        var key = toKey(path[index2]), newValue = value;
        if (key === "__proto__" || key === "constructor" || key === "prototype") {
          return object2;
        }
        if (index2 != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : void 0;
          if (newValue === void 0) {
            newValue = isObject$3(objValue) ? objValue : isIndex(path[index2 + 1]) ? [] : {};
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object2;
    }
    function basePickBy(object2, paths, predicate) {
      var index2 = -1, length = paths.length, result = {};
      while (++index2 < length) {
        var path = paths[index2], value = baseGet(object2, path);
        if (predicate(value, path)) {
          baseSet(result, castPath(path, object2), value);
        }
      }
      return result;
    }
    function basePick(object2, paths) {
      return basePickBy(object2, paths, function(value, path) {
        return hasIn(object2, path);
      });
    }
    var pick = flatRest(function(object2, paths) {
      return object2 == null ? {} : basePick(object2, paths);
    });
    const pick$1 = pick;
    function set(object2, path, value) {
      return object2 == null ? object2 : baseSet(object2, path, value);
    }
    var FUNC_ERROR_TEXT = "Expected a function";
    function throttle(func, wait, options) {
      var leading = true, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject$3(options)) {
        leading = "leading" in options ? !!options.leading : leading;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        "leading": leading,
        "maxWait": wait,
        "trailing": trailing
      });
    }
    var INFINITY = 1 / 0;
    var createSet = !(Set$2 && 1 / setToArray(new Set$2([, -0]))[1] == INFINITY) ? noop$2 : function(values) {
      return new Set$2(values);
    };
    const createSet$1 = createSet;
    var LARGE_ARRAY_SIZE = 200;
    function baseUniq(array2, iteratee, comparator) {
      var index2 = -1, includes = arrayIncludes, length = array2.length, isCommon = true, result = [], seen = result;
      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      } else if (length >= LARGE_ARRAY_SIZE) {
        var set2 = iteratee ? null : createSet$1(array2);
        if (set2) {
          return setToArray(set2);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache();
      } else {
        seen = iteratee ? [] : result;
      }
      outer:
        while (++index2 < length) {
          var value = array2[index2], computed2 = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed2 === computed2) {
            var seenIndex = seen.length;
            while (seenIndex--) {
              if (seen[seenIndex] === computed2) {
                continue outer;
              }
            }
            if (iteratee) {
              seen.push(computed2);
            }
            result.push(value);
          } else if (!includes(seen, computed2, comparator)) {
            if (seen !== result) {
              seen.push(computed2);
            }
            result.push(value);
          }
        }
      return result;
    }
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });
    const union$1 = union;
    const FOCUSABLE_ELEMENT_SELECTORS = `a[href],button:not([disabled]),button:not([hidden]),:not([tabindex="-1"]),input:not([disabled]),input:not([type="hidden"]),select:not([disabled]),textarea:not([disabled])`;
    const isVisible = (element) => {
      const computed2 = getComputedStyle(element);
      return computed2.position === "fixed" ? false : element.offsetParent !== null;
    };
    const obtainAllFocusableElements$1 = (element) => {
      return Array.from(element.querySelectorAll(FOCUSABLE_ELEMENT_SELECTORS)).filter((item) => isFocusable(item) && isVisible(item));
    };
    const isFocusable = (element) => {
      if (element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute("tabIndex") !== null) {
        return true;
      }
      if (element.disabled) {
        return false;
      }
      switch (element.nodeName) {
        case "A": {
          return !!element.href && element.rel !== "ignore";
        }
        case "INPUT": {
          return !(element.type === "hidden" || element.type === "file");
        }
        case "BUTTON":
        case "SELECT":
        case "TEXTAREA": {
          return true;
        }
        default: {
          return false;
        }
      }
    };
    const triggerEvent = function(elm, name, ...opts) {
      let eventName;
      if (name.includes("mouse") || name.includes("click")) {
        eventName = "MouseEvents";
      } else if (name.includes("key")) {
        eventName = "KeyboardEvent";
      } else {
        eventName = "HTMLEvents";
      }
      const evt = document.createEvent(eventName);
      evt.initEvent(name, ...opts);
      elm.dispatchEvent(evt);
      return elm;
    };
    const isLeaf = (el) => !el.getAttribute("aria-owns");
    const getSibling = (el, distance, elClass) => {
      const { parentNode } = el;
      if (!parentNode)
        return null;
      const siblings = parentNode.querySelectorAll(elClass);
      const index2 = Array.prototype.indexOf.call(siblings, el);
      return siblings[index2 + distance] || null;
    };
    const focusNode = (el) => {
      if (!el)
        return;
      el.focus();
      !isLeaf(el) && el.click();
    };
    const composeEventHandlers = (theirsHandler, oursHandler, { checkForDefaultPrevented = true } = {}) => {
      const handleEvent = (event) => {
        const shouldPrevent = theirsHandler == null ? void 0 : theirsHandler(event);
        if (checkForDefaultPrevented === false || !shouldPrevent) {
          return oursHandler == null ? void 0 : oursHandler(event);
        }
      };
      return handleEvent;
    };
    const whenMouse = (handler) => {
      return (e2) => e2.pointerType === "mouse" ? handler(e2) : void 0;
    };
    var __defProp$9 = Object.defineProperty;
    var __defProps$6 = Object.defineProperties;
    var __getOwnPropDescs$6 = Object.getOwnPropertyDescriptors;
    var __getOwnPropSymbols$b = Object.getOwnPropertySymbols;
    var __hasOwnProp$b = Object.prototype.hasOwnProperty;
    var __propIsEnum$b = Object.prototype.propertyIsEnumerable;
    var __defNormalProp$9 = (obj, key, value) => key in obj ? __defProp$9(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues$9 = (a2, b2) => {
      for (var prop in b2 || (b2 = {}))
        if (__hasOwnProp$b.call(b2, prop))
          __defNormalProp$9(a2, prop, b2[prop]);
      if (__getOwnPropSymbols$b)
        for (var prop of __getOwnPropSymbols$b(b2)) {
          if (__propIsEnum$b.call(b2, prop))
            __defNormalProp$9(a2, prop, b2[prop]);
        }
      return a2;
    };
    var __spreadProps$6 = (a2, b2) => __defProps$6(a2, __getOwnPropDescs$6(b2));
    function computedEager(fn2, options) {
      var _a2;
      const result = shallowRef();
      watchEffect(() => {
        result.value = fn2();
      }, __spreadProps$6(__spreadValues$9({}, options), {
        flush: (_a2 = options == null ? void 0 : options.flush) != null ? _a2 : "sync"
      }));
      return readonly(result);
    }
    var _a;
    const isClient = typeof window !== "undefined";
    const isDef = (val) => typeof val !== "undefined";
    const isBoolean$1 = (val) => typeof val === "boolean";
    const isNumber$1 = (val) => typeof val === "number";
    const isString$1 = (val) => typeof val === "string";
    const noop$1 = () => {
    };
    isClient && ((_a = window == null ? void 0 : window.navigator) == null ? void 0 : _a.userAgent) && /iP(ad|hone|od)/.test(window.navigator.userAgent);
    function createFilterWrapper(filter, fn2) {
      function wrapper(...args) {
        filter(() => fn2.apply(this, args), { fn: fn2, thisArg: this, args });
      }
      return wrapper;
    }
    function debounceFilter(ms, options = {}) {
      let timer;
      let maxTimer;
      const filter = (invoke) => {
        const duration = unref(ms);
        const maxDuration = unref(options.maxWait);
        if (timer)
          clearTimeout(timer);
        if (duration <= 0 || maxDuration !== void 0 && maxDuration <= 0) {
          if (maxTimer) {
            clearTimeout(maxTimer);
            maxTimer = null;
          }
          return invoke();
        }
        if (maxDuration && !maxTimer) {
          maxTimer = setTimeout(() => {
            if (timer)
              clearTimeout(timer);
            maxTimer = null;
            invoke();
          }, maxDuration);
        }
        timer = setTimeout(() => {
          if (maxTimer)
            clearTimeout(maxTimer);
          maxTimer = null;
          invoke();
        }, duration);
      };
      return filter;
    }
    function throttleFilter(ms, trailing = true, leading = true) {
      let lastExec = 0;
      let timer;
      let isLeading = true;
      const clear2 = () => {
        if (timer) {
          clearTimeout(timer);
          timer = void 0;
        }
      };
      const filter = (invoke) => {
        const duration = unref(ms);
        const elapsed = Date.now() - lastExec;
        clear2();
        if (duration <= 0) {
          lastExec = Date.now();
          return invoke();
        }
        if (elapsed > duration && (leading || !isLeading)) {
          lastExec = Date.now();
          invoke();
        } else if (trailing) {
          timer = setTimeout(() => {
            lastExec = Date.now();
            isLeading = true;
            clear2();
            invoke();
          }, duration);
        }
        if (!leading && !timer)
          timer = setTimeout(() => isLeading = true, duration);
        isLeading = false;
      };
      return filter;
    }
    function tryOnScopeDispose(fn2) {
      if (getCurrentScope()) {
        onScopeDispose(fn2);
        return true;
      }
      return false;
    }
    function useDebounceFn(fn2, ms = 200, options = {}) {
      return createFilterWrapper(debounceFilter(ms, options), fn2);
    }
    function refDebounced(value, ms = 200, options = {}) {
      if (ms <= 0)
        return value;
      const debounced = ref(value.value);
      const updater = useDebounceFn(() => {
        debounced.value = value.value;
      }, ms, options);
      watch(value, () => updater());
      return debounced;
    }
    function useThrottleFn(fn2, ms = 200, trailing = true, leading = true) {
      return createFilterWrapper(throttleFilter(ms, trailing, leading), fn2);
    }
    function tryOnMounted(fn2, sync = true) {
      if (getCurrentInstance())
        onMounted(fn2);
      else if (sync)
        fn2();
      else
        nextTick$1(fn2);
    }
    function useTimeoutFn(cb, interval, options = {}) {
      const {
        immediate = true
      } = options;
      const isPending = ref(false);
      let timer = null;
      function clear2() {
        if (timer) {
          clearTimeout(timer);
          timer = null;
        }
      }
      function stop2() {
        isPending.value = false;
        clear2();
      }
      function start(...args) {
        clear2();
        isPending.value = true;
        timer = setTimeout(() => {
          isPending.value = false;
          timer = null;
          cb(...args);
        }, unref(interval));
      }
      if (immediate) {
        isPending.value = true;
        if (isClient)
          start();
      }
      tryOnScopeDispose(stop2);
      return {
        isPending,
        start,
        stop: stop2
      };
    }
    function unrefElement(elRef) {
      var _a2;
      const plain = unref(elRef);
      return (_a2 = plain == null ? void 0 : plain.$el) != null ? _a2 : plain;
    }
    const defaultWindow = isClient ? window : void 0;
    const defaultDocument = isClient ? window.document : void 0;
    function useEventListener(...args) {
      let target;
      let event;
      let listener;
      let options;
      if (isString$1(args[0])) {
        [event, listener, options] = args;
        target = defaultWindow;
      } else {
        [target, event, listener, options] = args;
      }
      if (!target)
        return noop$1;
      let cleanup = noop$1;
      const stopWatch = watch(() => unrefElement(target), (el) => {
        cleanup();
        if (!el)
          return;
        el.addEventListener(event, listener, options);
        cleanup = () => {
          el.removeEventListener(event, listener, options);
          cleanup = noop$1;
        };
      }, { immediate: true, flush: "post" });
      const stop2 = () => {
        stopWatch();
        cleanup();
      };
      tryOnScopeDispose(stop2);
      return stop2;
    }
    function onClickOutside(target, handler, options = {}) {
      const { window: window2 = defaultWindow, ignore, capture = true, detectIframe = false } = options;
      if (!window2)
        return;
      const shouldListen = ref(true);
      let fallback;
      const listener = (event) => {
        window2.clearTimeout(fallback);
        const el = unrefElement(target);
        const composedPath = event.composedPath();
        if (!el || el === event.target || composedPath.includes(el) || !shouldListen.value)
          return;
        if (ignore && ignore.length > 0) {
          if (ignore.some((target2) => {
            const el2 = unrefElement(target2);
            return el2 && (event.target === el2 || composedPath.includes(el2));
          }))
            return;
        }
        handler(event);
      };
      const cleanup = [
        useEventListener(window2, "click", listener, { passive: true, capture }),
        useEventListener(window2, "pointerdown", (e2) => {
          const el = unrefElement(target);
          shouldListen.value = !!el && !e2.composedPath().includes(el);
        }, { passive: true }),
        useEventListener(window2, "pointerup", (e2) => {
          if (e2.button === 0) {
            const path = e2.composedPath();
            e2.composedPath = () => path;
            fallback = window2.setTimeout(() => listener(e2), 50);
          }
        }, { passive: true }),
        detectIframe && useEventListener(window2, "blur", (event) => {
          var _a2;
          const el = unrefElement(target);
          if (((_a2 = document.activeElement) == null ? void 0 : _a2.tagName) === "IFRAME" && !(el == null ? void 0 : el.contains(document.activeElement)))
            handler(event);
        })
      ].filter(Boolean);
      const stop2 = () => cleanup.forEach((fn2) => fn2());
      return stop2;
    }
    const _global = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
    const globalKey = "__vueuse_ssr_handlers__";
    _global[globalKey] = _global[globalKey] || {};
    _global[globalKey];
    function useDocumentVisibility({ document: document2 = defaultDocument } = {}) {
      if (!document2)
        return ref("visible");
      const visibility = ref(document2.visibilityState);
      useEventListener(document2, "visibilitychange", () => {
        visibility.value = document2.visibilityState;
      });
      return visibility;
    }
    var __getOwnPropSymbols$e = Object.getOwnPropertySymbols;
    var __hasOwnProp$e = Object.prototype.hasOwnProperty;
    var __propIsEnum$e = Object.prototype.propertyIsEnumerable;
    var __objRest$2 = (source, exclude) => {
      var target = {};
      for (var prop in source)
        if (__hasOwnProp$e.call(source, prop) && exclude.indexOf(prop) < 0)
          target[prop] = source[prop];
      if (source != null && __getOwnPropSymbols$e)
        for (var prop of __getOwnPropSymbols$e(source)) {
          if (exclude.indexOf(prop) < 0 && __propIsEnum$e.call(source, prop))
            target[prop] = source[prop];
        }
      return target;
    };
    function useResizeObserver(target, callback, options = {}) {
      const _a2 = options, { window: window2 = defaultWindow } = _a2, observerOptions = __objRest$2(_a2, ["window"]);
      let observer;
      const isSupported = window2 && "ResizeObserver" in window2;
      const cleanup = () => {
        if (observer) {
          observer.disconnect();
          observer = void 0;
        }
      };
      const stopWatch = watch(() => unrefElement(target), (el) => {
        cleanup();
        if (isSupported && window2 && el) {
          observer = new ResizeObserver(callback);
          observer.observe(el, observerOptions);
        }
      }, { immediate: true, flush: "post" });
      const stop2 = () => {
        cleanup();
        stopWatch();
      };
      tryOnScopeDispose(stop2);
      return {
        isSupported,
        stop: stop2
      };
    }
    function useElementBounding(target, options = {}) {
      const {
        reset: reset2 = true,
        windowResize = true,
        windowScroll = true,
        immediate = true
      } = options;
      const height = ref(0);
      const bottom = ref(0);
      const left2 = ref(0);
      const right2 = ref(0);
      const top = ref(0);
      const width = ref(0);
      const x2 = ref(0);
      const y2 = ref(0);
      function update() {
        const el = unrefElement(target);
        if (!el) {
          if (reset2) {
            height.value = 0;
            bottom.value = 0;
            left2.value = 0;
            right2.value = 0;
            top.value = 0;
            width.value = 0;
            x2.value = 0;
            y2.value = 0;
          }
          return;
        }
        const rect = el.getBoundingClientRect();
        height.value = rect.height;
        bottom.value = rect.bottom;
        left2.value = rect.left;
        right2.value = rect.right;
        top.value = rect.top;
        width.value = rect.width;
        x2.value = rect.x;
        y2.value = rect.y;
      }
      useResizeObserver(target, update);
      watch(() => unrefElement(target), (ele) => !ele && update());
      if (windowScroll)
        useEventListener("scroll", update, { passive: true });
      if (windowResize)
        useEventListener("resize", update, { passive: true });
      tryOnMounted(() => {
        if (immediate)
          update();
      });
      return {
        height,
        bottom,
        left: left2,
        right: right2,
        top,
        width,
        x: x2,
        y: y2,
        update
      };
    }
    var SwipeDirection;
    (function(SwipeDirection2) {
      SwipeDirection2["UP"] = "UP";
      SwipeDirection2["RIGHT"] = "RIGHT";
      SwipeDirection2["DOWN"] = "DOWN";
      SwipeDirection2["LEFT"] = "LEFT";
      SwipeDirection2["NONE"] = "NONE";
    })(SwipeDirection || (SwipeDirection = {}));
    function useVModel(props, key, emit2, options = {}) {
      var _a2, _b, _c;
      const {
        passive = false,
        eventName,
        deep = false,
        defaultValue
      } = options;
      const vm = getCurrentInstance();
      const _emit = emit2 || (vm == null ? void 0 : vm.emit) || ((_a2 = vm == null ? void 0 : vm.$emit) == null ? void 0 : _a2.bind(vm)) || ((_c = (_b = vm == null ? void 0 : vm.proxy) == null ? void 0 : _b.$emit) == null ? void 0 : _c.bind(vm == null ? void 0 : vm.proxy));
      let event = eventName;
      if (!key) {
        {
          key = "modelValue";
        }
      }
      event = eventName || event || `update:${key.toString()}`;
      const getValue2 = () => isDef(props[key]) ? props[key] : defaultValue;
      if (passive) {
        const proxy = ref(getValue2());
        watch(() => props[key], (v2) => proxy.value = v2);
        watch(proxy, (v2) => {
          if (v2 !== props[key] || deep)
            _emit(event, v2);
        }, {
          deep
        });
        return proxy;
      } else {
        return computed({
          get() {
            return getValue2();
          },
          set(value) {
            _emit(event, value);
          }
        });
      }
    }
    function useWindowFocus({ window: window2 = defaultWindow } = {}) {
      if (!window2)
        return ref(false);
      const focused = ref(window2.document.hasFocus());
      useEventListener(window2, "blur", () => {
        focused.value = false;
      });
      useEventListener(window2, "focus", () => {
        focused.value = true;
      });
      return focused;
    }
    function useWindowSize(options = {}) {
      const {
        window: window2 = defaultWindow,
        initialWidth = Infinity,
        initialHeight = Infinity,
        listenOrientation = true
      } = options;
      const width = ref(initialWidth);
      const height = ref(initialHeight);
      const update = () => {
        if (window2) {
          width.value = window2.innerWidth;
          height.value = window2.innerHeight;
        }
      };
      update();
      tryOnMounted(update);
      useEventListener("resize", update, { passive: true });
      if (listenOrientation)
        useEventListener("orientationchange", update, { passive: true });
      return { width, height };
    }
    const isInContainer = (el, container) => {
      if (!isClient || !el || !container)
        return false;
      const elRect = el.getBoundingClientRect();
      let containerRect;
      if (container instanceof Element) {
        containerRect = container.getBoundingClientRect();
      } else {
        containerRect = {
          top: 0,
          right: window.innerWidth,
          bottom: window.innerHeight,
          left: 0
        };
      }
      return elRect.top < containerRect.bottom && elRect.bottom > containerRect.top && elRect.right > containerRect.left && elRect.left < containerRect.right;
    };
    const getOffsetTop = (el) => {
      let offset2 = 0;
      let parent = el;
      while (parent) {
        offset2 += parent.offsetTop;
        parent = parent.offsetParent;
      }
      return offset2;
    };
    const getOffsetTopDistance = (el, containerEl) => {
      return Math.abs(getOffsetTop(el) - getOffsetTop(containerEl));
    };
    const getClientXY = (event) => {
      let clientX;
      let clientY;
      if (event.type === "touchend") {
        clientY = event.changedTouches[0].clientY;
        clientX = event.changedTouches[0].clientX;
      } else if (event.type.startsWith("touch")) {
        clientY = event.touches[0].clientY;
        clientX = event.touches[0].clientX;
      } else {
        clientY = event.clientY;
        clientX = event.clientX;
      }
      return {
        clientX,
        clientY
      };
    };
    const isUndefined$1 = (val) => val === void 0;
    const isEmpty = (val) => !val && val !== 0 || isArray$6(val) && val.length === 0 || isObject$7(val) && !Object.keys(val).length;
    const isElement$1 = (e2) => {
      if (typeof Element === "undefined")
        return false;
      return e2 instanceof Element;
    };
    const isPropAbsent = (prop) => {
      return isNil(prop);
    };
    const escapeStringRegexp = (string2 = "") => string2.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
    const keysOf = (arr) => Object.keys(arr);
    const entriesOf = (arr) => Object.entries(arr);
    const getProp = (obj, path, defaultValue) => {
      return {
        get value() {
          return get$1(obj, path, defaultValue);
        },
        set value(val) {
          set(obj, path, val);
        }
      };
    };
    class ElementPlusError extends Error {
      constructor(m2) {
        super(m2);
        this.name = "ElementPlusError";
      }
    }
    function throwError(scope, m2) {
      throw new ElementPlusError(`[${scope}] ${m2}`);
    }
    function debugWarn(scope, message2) {
    }
    const classNameToArray = (cls = "") => cls.split(" ").filter((item) => !!item.trim());
    const hasClass = (el, cls) => {
      if (!el || !cls)
        return false;
      if (cls.includes(" "))
        throw new Error("className should not contain space.");
      return el.classList.contains(cls);
    };
    const addClass = (el, cls) => {
      if (!el || !cls.trim())
        return;
      el.classList.add(...classNameToArray(cls));
    };
    const removeClass = (el, cls) => {
      if (!el || !cls.trim())
        return;
      el.classList.remove(...classNameToArray(cls));
    };
    const getStyle = (element, styleName) => {
      var _a2;
      if (!isClient || !element || !styleName)
        return "";
      let key = camelize(styleName);
      if (key === "float")
        key = "cssFloat";
      try {
        const style2 = element.style[key];
        if (style2)
          return style2;
        const computed2 = (_a2 = document.defaultView) == null ? void 0 : _a2.getComputedStyle(element, "");
        return computed2 ? computed2[key] : "";
      } catch (e2) {
        return element.style[key];
      }
    };
    function addUnit(value, defaultUnit = "px") {
      if (!value)
        return "";
      if (isString$3(value)) {
        return value;
      } else if (isNumber$1(value)) {
        return `${value}${defaultUnit}`;
      }
    }
    const isScroll = (el, isVertical) => {
      if (!isClient)
        return false;
      const key = {
        undefined: "overflow",
        true: "overflow-y",
        false: "overflow-x"
      }[String(isVertical)];
      const overflow = getStyle(el, key);
      return ["scroll", "auto", "overlay"].some((s2) => overflow.includes(s2));
    };
    const getScrollContainer = (el, isVertical) => {
      if (!isClient)
        return;
      let parent = el;
      while (parent) {
        if ([window, document, document.documentElement].includes(parent))
          return window;
        if (isScroll(parent, isVertical))
          return parent;
        parent = parent.parentNode;
      }
      return parent;
    };
    let scrollBarWidth;
    const getScrollBarWidth = (namespace) => {
      var _a2;
      if (!isClient)
        return 0;
      if (scrollBarWidth !== void 0)
        return scrollBarWidth;
      const outer = document.createElement("div");
      outer.className = `${namespace}-scrollbar__wrap`;
      outer.style.visibility = "hidden";
      outer.style.width = "100px";
      outer.style.position = "absolute";
      outer.style.top = "-9999px";
      document.body.appendChild(outer);
      const widthNoScroll = outer.offsetWidth;
      outer.style.overflow = "scroll";
      const inner = document.createElement("div");
      inner.style.width = "100%";
      outer.appendChild(inner);
      const widthWithScroll = inner.offsetWidth;
      (_a2 = outer.parentNode) == null ? void 0 : _a2.removeChild(outer);
      scrollBarWidth = widthNoScroll - widthWithScroll;
      return scrollBarWidth;
    };
    function scrollIntoView(container, selected) {
      if (!isClient)
        return;
      if (!selected) {
        container.scrollTop = 0;
        return;
      }
      const offsetParents = [];
      let pointer = selected.offsetParent;
      while (pointer !== null && container !== pointer && container.contains(pointer)) {
        offsetParents.push(pointer);
        pointer = pointer.offsetParent;
      }
      const top = selected.offsetTop + offsetParents.reduce((prev, curr) => prev + curr.offsetTop, 0);
      const bottom = top + selected.offsetHeight;
      const viewRectTop = container.scrollTop;
      const viewRectBottom = viewRectTop + container.clientHeight;
      if (top < viewRectTop) {
        container.scrollTop = top;
      } else if (bottom > viewRectBottom) {
        container.scrollTop = bottom - container.clientHeight;
      }
    }
    /*! Element Plus Icons Vue v2.0.6 */
    var export_helper_default = (sfc, props) => {
      let target = sfc.__vccOpts || sfc;
      for (let [key, val] of props)
        target[key] = val;
      return target;
    };
    var _sfc_main6 = {
      name: "ArrowDown"
    }, _hoisted_16$1 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_26 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M831.872 340.864 512 652.672 192.128 340.864a30.592 30.592 0 0 0-42.752 0 29.12 29.12 0 0 0 0 41.6L489.664 714.24a32 32 0 0 0 44.672 0l340.288-331.712a29.12 29.12 0 0 0 0-41.728 30.592 30.592 0 0 0-42.752 0z"
    }, null, -1), _hoisted_36 = [
      _hoisted_26
    ];
    function _sfc_render6(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_16$1, _hoisted_36);
    }
    var arrow_down_default = /* @__PURE__ */ export_helper_default(_sfc_main6, [["render", _sfc_render6], ["__file", "arrow-down.vue"]]);
    var _sfc_main8 = {
      name: "ArrowLeft"
    }, _hoisted_18$1 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_28 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M609.408 149.376 277.76 489.6a32 32 0 0 0 0 44.672l331.648 340.352a29.12 29.12 0 0 0 41.728 0 30.592 30.592 0 0 0 0-42.752L339.264 511.936l311.872-319.872a30.592 30.592 0 0 0 0-42.688 29.12 29.12 0 0 0-41.728 0z"
    }, null, -1), _hoisted_38 = [
      _hoisted_28
    ];
    function _sfc_render8(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_18$1, _hoisted_38);
    }
    var arrow_left_default = /* @__PURE__ */ export_helper_default(_sfc_main8, [["render", _sfc_render8], ["__file", "arrow-left.vue"]]);
    var _sfc_main10 = {
      name: "ArrowRight"
    }, _hoisted_110 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_210 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M340.864 149.312a30.592 30.592 0 0 0 0 42.752L652.736 512 340.864 831.872a30.592 30.592 0 0 0 0 42.752 29.12 29.12 0 0 0 41.728 0L714.24 534.336a32 32 0 0 0 0-44.672L382.592 149.376a29.12 29.12 0 0 0-41.728 0z"
    }, null, -1), _hoisted_310 = [
      _hoisted_210
    ];
    function _sfc_render10(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_110, _hoisted_310);
    }
    var arrow_right_default = /* @__PURE__ */ export_helper_default(_sfc_main10, [["render", _sfc_render10], ["__file", "arrow-right.vue"]]);
    var _sfc_main12 = {
      name: "ArrowUp"
    }, _hoisted_112 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_212 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "m488.832 344.32-339.84 356.672a32 32 0 0 0 0 44.16l.384.384a29.44 29.44 0 0 0 42.688 0l320-335.872 319.872 335.872a29.44 29.44 0 0 0 42.688 0l.384-.384a32 32 0 0 0 0-44.16L535.168 344.32a32 32 0 0 0-46.336 0z"
    }, null, -1), _hoisted_312 = [
      _hoisted_212
    ];
    function _sfc_render12(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_112, _hoisted_312);
    }
    var arrow_up_default = /* @__PURE__ */ export_helper_default(_sfc_main12, [["render", _sfc_render12], ["__file", "arrow-up.vue"]]);
    var _sfc_main14 = {
      name: "Back"
    }, _hoisted_114 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_214 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z"
    }, null, -1), _hoisted_314 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z"
    }, null, -1), _hoisted_44 = [
      _hoisted_214,
      _hoisted_314
    ];
    function _sfc_render14(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_114, _hoisted_44);
    }
    var back_default = /* @__PURE__ */ export_helper_default(_sfc_main14, [["render", _sfc_render14], ["__file", "back.vue"]]);
    var _sfc_main29 = {
      name: "Calendar"
    }, _hoisted_129 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_229 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M128 384v512h768V192H768v32a32 32 0 1 1-64 0v-32H320v32a32 32 0 0 1-64 0v-32H128v128h768v64H128zm192-256h384V96a32 32 0 1 1 64 0v32h160a32 32 0 0 1 32 32v768a32 32 0 0 1-32 32H96a32 32 0 0 1-32-32V160a32 32 0 0 1 32-32h160V96a32 32 0 0 1 64 0v32zm-32 384h64a32 32 0 0 1 0 64h-64a32 32 0 0 1 0-64zm0 192h64a32 32 0 1 1 0 64h-64a32 32 0 1 1 0-64zm192-192h64a32 32 0 0 1 0 64h-64a32 32 0 0 1 0-64zm0 192h64a32 32 0 1 1 0 64h-64a32 32 0 1 1 0-64zm192-192h64a32 32 0 1 1 0 64h-64a32 32 0 1 1 0-64zm0 192h64a32 32 0 1 1 0 64h-64a32 32 0 1 1 0-64z"
    }, null, -1), _hoisted_328 = [
      _hoisted_229
    ];
    function _sfc_render29(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_129, _hoisted_328);
    }
    var calendar_default = /* @__PURE__ */ export_helper_default(_sfc_main29, [["render", _sfc_render29], ["__file", "calendar.vue"]]);
    var _sfc_main34 = {
      name: "CaretRight"
    }, _hoisted_134 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_234 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M384 192v640l384-320.064z"
    }, null, -1), _hoisted_333 = [
      _hoisted_234
    ];
    function _sfc_render34(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_134, _hoisted_333);
    }
    var caret_right_default = /* @__PURE__ */ export_helper_default(_sfc_main34, [["render", _sfc_render34], ["__file", "caret-right.vue"]]);
    var _sfc_main35 = {
      name: "CaretTop"
    }, _hoisted_135 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_235 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M512 320 192 704h639.936z"
    }, null, -1), _hoisted_334 = [
      _hoisted_235
    ];
    function _sfc_render35(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_135, _hoisted_334);
    }
    var caret_top_default = /* @__PURE__ */ export_helper_default(_sfc_main35, [["render", _sfc_render35], ["__file", "caret-top.vue"]]);
    var _sfc_main43 = {
      name: "Check"
    }, _hoisted_143 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_243 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M406.656 706.944 195.84 496.256a32 32 0 1 0-45.248 45.248l256 256 512-512a32 32 0 0 0-45.248-45.248L406.592 706.944z"
    }, null, -1), _hoisted_342 = [
      _hoisted_243
    ];
    function _sfc_render43(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_143, _hoisted_342);
    }
    var check_default = /* @__PURE__ */ export_helper_default(_sfc_main43, [["render", _sfc_render43], ["__file", "check.vue"]]);
    var _sfc_main47 = {
      name: "CircleCheckFilled"
    }, _hoisted_147 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_247 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M512 64a448 448 0 1 1 0 896 448 448 0 0 1 0-896zm-55.808 536.384-99.52-99.584a38.4 38.4 0 1 0-54.336 54.336l126.72 126.72a38.272 38.272 0 0 0 54.336 0l262.4-262.464a38.4 38.4 0 1 0-54.272-54.336L456.192 600.384z"
    }, null, -1), _hoisted_346 = [
      _hoisted_247
    ];
    function _sfc_render47(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_147, _hoisted_346);
    }
    var circle_check_filled_default = /* @__PURE__ */ export_helper_default(_sfc_main47, [["render", _sfc_render47], ["__file", "circle-check-filled.vue"]]);
    var _sfc_main48 = {
      name: "CircleCheck"
    }, _hoisted_148 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_248 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M512 896a384 384 0 1 0 0-768 384 384 0 0 0 0 768zm0 64a448 448 0 1 1 0-896 448 448 0 0 1 0 896z"
    }, null, -1), _hoisted_347 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M745.344 361.344a32 32 0 0 1 45.312 45.312l-288 288a32 32 0 0 1-45.312 0l-160-160a32 32 0 1 1 45.312-45.312L480 626.752l265.344-265.408z"
    }, null, -1), _hoisted_414 = [
      _hoisted_248,
      _hoisted_347
    ];
    function _sfc_render48(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_148, _hoisted_414);
    }
    var circle_check_default = /* @__PURE__ */ export_helper_default(_sfc_main48, [["render", _sfc_render48], ["__file", "circle-check.vue"]]);
    var _sfc_main49 = {
      name: "CircleCloseFilled"
    }, _hoisted_149 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_249 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M512 64a448 448 0 1 1 0 896 448 448 0 0 1 0-896zm0 393.664L407.936 353.6a38.4 38.4 0 1 0-54.336 54.336L457.664 512 353.6 616.064a38.4 38.4 0 1 0 54.336 54.336L512 566.336 616.064 670.4a38.4 38.4 0 1 0 54.336-54.336L566.336 512 670.4 407.936a38.4 38.4 0 1 0-54.336-54.336L512 457.664z"
    }, null, -1), _hoisted_348 = [
      _hoisted_249
    ];
    function _sfc_render49(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_149, _hoisted_348);
    }
    var circle_close_filled_default = /* @__PURE__ */ export_helper_default(_sfc_main49, [["render", _sfc_render49], ["__file", "circle-close-filled.vue"]]);
    var _sfc_main50 = {
      name: "CircleClose"
    }, _hoisted_150 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_250 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "m466.752 512-90.496-90.496a32 32 0 0 1 45.248-45.248L512 466.752l90.496-90.496a32 32 0 1 1 45.248 45.248L557.248 512l90.496 90.496a32 32 0 1 1-45.248 45.248L512 557.248l-90.496 90.496a32 32 0 0 1-45.248-45.248L466.752 512z"
    }, null, -1), _hoisted_349 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M512 896a384 384 0 1 0 0-768 384 384 0 0 0 0 768zm0 64a448 448 0 1 1 0-896 448 448 0 0 1 0 896z"
    }, null, -1), _hoisted_415 = [
      _hoisted_250,
      _hoisted_349
    ];
    function _sfc_render50(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_150, _hoisted_415);
    }
    var circle_close_default = /* @__PURE__ */ export_helper_default(_sfc_main50, [["render", _sfc_render50], ["__file", "circle-close.vue"]]);
    var _sfc_main53 = {
      name: "Clock"
    }, _hoisted_153 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_253 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M512 896a384 384 0 1 0 0-768 384 384 0 0 0 0 768zm0 64a448 448 0 1 1 0-896 448 448 0 0 1 0 896z"
    }, null, -1), _hoisted_352 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M480 256a32 32 0 0 1 32 32v256a32 32 0 0 1-64 0V288a32 32 0 0 1 32-32z"
    }, null, -1), _hoisted_417 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M480 512h256q32 0 32 32t-32 32H480q-32 0-32-32t32-32z"
    }, null, -1), _hoisted_55 = [
      _hoisted_253,
      _hoisted_352,
      _hoisted_417
    ];
    function _sfc_render53(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_153, _hoisted_55);
    }
    var clock_default = /* @__PURE__ */ export_helper_default(_sfc_main53, [["render", _sfc_render53], ["__file", "clock.vue"]]);
    var _sfc_main55 = {
      name: "Close"
    }, _hoisted_155 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_255 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M764.288 214.592 512 466.88 259.712 214.592a31.936 31.936 0 0 0-45.12 45.12L466.752 512 214.528 764.224a31.936 31.936 0 1 0 45.12 45.184L512 557.184l252.288 252.288a31.936 31.936 0 0 0 45.12-45.12L557.12 512.064l252.288-252.352a31.936 31.936 0 1 0-45.12-45.184z"
    }, null, -1), _hoisted_354 = [
      _hoisted_255
    ];
    function _sfc_render55(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_155, _hoisted_354);
    }
    var close_default = /* @__PURE__ */ export_helper_default(_sfc_main55, [["render", _sfc_render55], ["__file", "close.vue"]]);
    var _sfc_main71 = {
      name: "DArrowLeft"
    }, _hoisted_171 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_271 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M529.408 149.376a29.12 29.12 0 0 1 41.728 0 30.592 30.592 0 0 1 0 42.688L259.264 511.936l311.872 319.936a30.592 30.592 0 0 1-.512 43.264 29.12 29.12 0 0 1-41.216-.512L197.76 534.272a32 32 0 0 1 0-44.672l331.648-340.224zm256 0a29.12 29.12 0 0 1 41.728 0 30.592 30.592 0 0 1 0 42.688L515.264 511.936l311.872 319.936a30.592 30.592 0 0 1-.512 43.264 29.12 29.12 0 0 1-41.216-.512L453.76 534.272a32 32 0 0 1 0-44.672l331.648-340.224z"
    }, null, -1), _hoisted_370 = [
      _hoisted_271
    ];
    function _sfc_render71(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_171, _hoisted_370);
    }
    var d_arrow_left_default = /* @__PURE__ */ export_helper_default(_sfc_main71, [["render", _sfc_render71], ["__file", "d-arrow-left.vue"]]);
    var _sfc_main72 = {
      name: "DArrowRight"
    }, _hoisted_172 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_272 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M452.864 149.312a29.12 29.12 0 0 1 41.728.064L826.24 489.664a32 32 0 0 1 0 44.672L494.592 874.624a29.12 29.12 0 0 1-41.728 0 30.592 30.592 0 0 1 0-42.752L764.736 512 452.864 192a30.592 30.592 0 0 1 0-42.688zm-256 0a29.12 29.12 0 0 1 41.728.064L570.24 489.664a32 32 0 0 1 0 44.672L238.592 874.624a29.12 29.12 0 0 1-41.728 0 30.592 30.592 0 0 1 0-42.752L508.736 512 196.864 192a30.592 30.592 0 0 1 0-42.688z"
    }, null, -1), _hoisted_371 = [
      _hoisted_272
    ];
    function _sfc_render72(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_172, _hoisted_371);
    }
    var d_arrow_right_default = /* @__PURE__ */ export_helper_default(_sfc_main72, [["render", _sfc_render72], ["__file", "d-arrow-right.vue"]]);
    var _sfc_main79 = {
      name: "Delete"
    }, _hoisted_179 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_279 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M160 256H96a32 32 0 0 1 0-64h256V95.936a32 32 0 0 1 32-32h256a32 32 0 0 1 32 32V192h256a32 32 0 1 1 0 64h-64v672a32 32 0 0 1-32 32H192a32 32 0 0 1-32-32V256zm448-64v-64H416v64h192zM224 896h576V256H224v640zm192-128a32 32 0 0 1-32-32V416a32 32 0 0 1 64 0v320a32 32 0 0 1-32 32zm192 0a32 32 0 0 1-32-32V416a32 32 0 0 1 64 0v320a32 32 0 0 1-32 32z"
    }, null, -1), _hoisted_378 = [
      _hoisted_279
    ];
    function _sfc_render79(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_179, _hoisted_378);
    }
    var delete_default = /* @__PURE__ */ export_helper_default(_sfc_main79, [["render", _sfc_render79], ["__file", "delete.vue"]]);
    var _sfc_main89 = {
      name: "Document"
    }, _hoisted_189 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_289 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M832 384H576V128H192v768h640V384zm-26.496-64L640 154.496V320h165.504zM160 64h480l256 256v608a32 32 0 0 1-32 32H160a32 32 0 0 1-32-32V96a32 32 0 0 1 32-32zm160 448h384v64H320v-64zm0-192h160v64H320v-64zm0 384h384v64H320v-64z"
    }, null, -1), _hoisted_388 = [
      _hoisted_289
    ];
    function _sfc_render89(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_189, _hoisted_388);
    }
    var document_default = /* @__PURE__ */ export_helper_default(_sfc_main89, [["render", _sfc_render89], ["__file", "document.vue"]]);
    var _sfc_main117 = {
      name: "FullScreen"
    }, _hoisted_1117 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_2117 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "m160 96.064 192 .192a32 32 0 0 1 0 64l-192-.192V352a32 32 0 0 1-64 0V96h64v.064zm0 831.872V928H96V672a32 32 0 1 1 64 0v191.936l192-.192a32 32 0 1 1 0 64l-192 .192zM864 96.064V96h64v256a32 32 0 1 1-64 0V160.064l-192 .192a32 32 0 1 1 0-64l192-.192zm0 831.872-192-.192a32 32 0 0 1 0-64l192 .192V672a32 32 0 1 1 64 0v256h-64v-.064z"
    }, null, -1), _hoisted_3116 = [
      _hoisted_2117
    ];
    function _sfc_render117(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1117, _hoisted_3116);
    }
    var full_screen_default = /* @__PURE__ */ export_helper_default(_sfc_main117, [["render", _sfc_render117], ["__file", "full-screen.vue"]]);
    var _sfc_main130 = {
      name: "Hide"
    }, _hoisted_1130 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_2130 = /* @__PURE__ */ createBaseVNode("path", {
      d: "M876.8 156.8c0-9.6-3.2-16-9.6-22.4-6.4-6.4-12.8-9.6-22.4-9.6-9.6 0-16 3.2-22.4 9.6L736 220.8c-64-32-137.6-51.2-224-60.8-160 16-288 73.6-377.6 176C44.8 438.4 0 496 0 512s48 73.6 134.4 176c22.4 25.6 44.8 48 73.6 67.2l-86.4 89.6c-6.4 6.4-9.6 12.8-9.6 22.4 0 9.6 3.2 16 9.6 22.4 6.4 6.4 12.8 9.6 22.4 9.6 9.6 0 16-3.2 22.4-9.6l704-710.4c3.2-6.4 6.4-12.8 6.4-22.4Zm-646.4 528c-76.8-70.4-128-128-153.6-172.8 28.8-48 80-105.6 153.6-172.8C304 272 400 230.4 512 224c64 3.2 124.8 19.2 176 44.8l-54.4 54.4C598.4 300.8 560 288 512 288c-64 0-115.2 22.4-160 64s-64 96-64 160c0 48 12.8 89.6 35.2 124.8L256 707.2c-9.6-6.4-19.2-16-25.6-22.4Zm140.8-96c-12.8-22.4-19.2-48-19.2-76.8 0-44.8 16-83.2 48-112 32-28.8 67.2-48 112-48 28.8 0 54.4 6.4 73.6 19.2L371.2 588.8ZM889.599 336c-12.8-16-28.8-28.8-41.6-41.6l-48 48c73.6 67.2 124.8 124.8 150.4 169.6-28.8 48-80 105.6-153.6 172.8-73.6 67.2-172.8 108.8-284.8 115.2-51.2-3.2-99.2-12.8-140.8-28.8l-48 48c57.6 22.4 118.4 38.4 188.8 44.8 160-16 288-73.6 377.6-176C979.199 585.6 1024 528 1024 512s-48.001-73.6-134.401-176Z",
      fill: "currentColor"
    }, null, -1), _hoisted_3129 = /* @__PURE__ */ createBaseVNode("path", {
      d: "M511.998 672c-12.8 0-25.6-3.2-38.4-6.4l-51.2 51.2c28.8 12.8 57.6 19.2 89.6 19.2 64 0 115.2-22.4 160-64 41.6-41.6 64-96 64-160 0-32-6.4-64-19.2-89.6l-51.2 51.2c3.2 12.8 6.4 25.6 6.4 38.4 0 44.8-16 83.2-48 112-32 28.8-67.2 48-112 48Z",
      fill: "currentColor"
    }, null, -1), _hoisted_436 = [
      _hoisted_2130,
      _hoisted_3129
    ];
    function _sfc_render130(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1130, _hoisted_436);
    }
    var hide_default = /* @__PURE__ */ export_helper_default(_sfc_main130, [["render", _sfc_render130], ["__file", "hide.vue"]]);
    var _sfc_main140 = {
      name: "InfoFilled"
    }, _hoisted_1140 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_2140 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M512 64a448 448 0 1 1 0 896.064A448 448 0 0 1 512 64zm67.2 275.072c33.28 0 60.288-23.104 60.288-57.344s-27.072-57.344-60.288-57.344c-33.28 0-60.16 23.104-60.16 57.344s26.88 57.344 60.16 57.344zM590.912 699.2c0-6.848 2.368-24.64 1.024-34.752l-52.608 60.544c-10.88 11.456-24.512 19.392-30.912 17.28a12.992 12.992 0 0 1-8.256-14.72l87.68-276.992c7.168-35.136-12.544-67.2-54.336-71.296-44.096 0-108.992 44.736-148.48 101.504 0 6.784-1.28 23.68.064 33.792l52.544-60.608c10.88-11.328 23.552-19.328 29.952-17.152a12.8 12.8 0 0 1 7.808 16.128L388.48 728.576c-10.048 32.256 8.96 63.872 55.04 71.04 67.84 0 107.904-43.648 147.456-100.416z"
    }, null, -1), _hoisted_3139 = [
      _hoisted_2140
    ];
    function _sfc_render140(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1140, _hoisted_3139);
    }
    var info_filled_default = /* @__PURE__ */ export_helper_default(_sfc_main140, [["render", _sfc_render140], ["__file", "info-filled.vue"]]);
    var _sfc_main147 = {
      name: "Loading"
    }, _hoisted_1147 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_2147 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M512 64a32 32 0 0 1 32 32v192a32 32 0 0 1-64 0V96a32 32 0 0 1 32-32zm0 640a32 32 0 0 1 32 32v192a32 32 0 1 1-64 0V736a32 32 0 0 1 32-32zm448-192a32 32 0 0 1-32 32H736a32 32 0 1 1 0-64h192a32 32 0 0 1 32 32zm-640 0a32 32 0 0 1-32 32H96a32 32 0 0 1 0-64h192a32 32 0 0 1 32 32zM195.2 195.2a32 32 0 0 1 45.248 0L376.32 331.008a32 32 0 0 1-45.248 45.248L195.2 240.448a32 32 0 0 1 0-45.248zm452.544 452.544a32 32 0 0 1 45.248 0L828.8 783.552a32 32 0 0 1-45.248 45.248L647.744 692.992a32 32 0 0 1 0-45.248zM828.8 195.264a32 32 0 0 1 0 45.184L692.992 376.32a32 32 0 0 1-45.248-45.248l135.808-135.808a32 32 0 0 1 45.248 0zm-452.544 452.48a32 32 0 0 1 0 45.248L240.448 828.8a32 32 0 0 1-45.248-45.248l135.808-135.808a32 32 0 0 1 45.248 0z"
    }, null, -1), _hoisted_3146 = [
      _hoisted_2147
    ];
    function _sfc_render147(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1147, _hoisted_3146);
    }
    var loading_default = /* @__PURE__ */ export_helper_default(_sfc_main147, [["render", _sfc_render147], ["__file", "loading.vue"]]);
    var _sfc_main165 = {
      name: "Minus"
    }, _hoisted_1165 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_2165 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M128 544h768a32 32 0 1 0 0-64H128a32 32 0 0 0 0 64z"
    }, null, -1), _hoisted_3164 = [
      _hoisted_2165
    ];
    function _sfc_render165(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1165, _hoisted_3164);
    }
    var minus_default = /* @__PURE__ */ export_helper_default(_sfc_main165, [["render", _sfc_render165], ["__file", "minus.vue"]]);
    var _sfc_main170 = {
      name: "MoreFilled"
    }, _hoisted_1170 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_2170 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M176 416a112 112 0 1 1 0 224 112 112 0 0 1 0-224zm336 0a112 112 0 1 1 0 224 112 112 0 0 1 0-224zm336 0a112 112 0 1 1 0 224 112 112 0 0 1 0-224z"
    }, null, -1), _hoisted_3169 = [
      _hoisted_2170
    ];
    function _sfc_render170(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1170, _hoisted_3169);
    }
    var more_filled_default = /* @__PURE__ */ export_helper_default(_sfc_main170, [["render", _sfc_render170], ["__file", "more-filled.vue"]]);
    var _sfc_main171 = {
      name: "More"
    }, _hoisted_1171 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_2171 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M176 416a112 112 0 1 0 0 224 112 112 0 0 0 0-224m0 64a48 48 0 1 1 0 96 48 48 0 0 1 0-96zm336-64a112 112 0 1 1 0 224 112 112 0 0 1 0-224zm0 64a48 48 0 1 0 0 96 48 48 0 0 0 0-96zm336-64a112 112 0 1 1 0 224 112 112 0 0 1 0-224zm0 64a48 48 0 1 0 0 96 48 48 0 0 0 0-96z"
    }, null, -1), _hoisted_3170 = [
      _hoisted_2171
    ];
    function _sfc_render171(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1171, _hoisted_3170);
    }
    var more_default = /* @__PURE__ */ export_helper_default(_sfc_main171, [["render", _sfc_render171], ["__file", "more.vue"]]);
    var _sfc_main191 = {
      name: "PictureFilled"
    }, _hoisted_1191 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_2191 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M96 896a32 32 0 0 1-32-32V160a32 32 0 0 1 32-32h832a32 32 0 0 1 32 32v704a32 32 0 0 1-32 32H96zm315.52-228.48-68.928-68.928a32 32 0 0 0-45.248 0L128 768.064h778.688l-242.112-290.56a32 32 0 0 0-49.216 0L458.752 665.408a32 32 0 0 1-47.232 2.112zM256 384a96 96 0 1 0 192.064-.064A96 96 0 0 0 256 384z"
    }, null, -1), _hoisted_3190 = [
      _hoisted_2191
    ];
    function _sfc_render191(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1191, _hoisted_3190);
    }
    var picture_filled_default = /* @__PURE__ */ export_helper_default(_sfc_main191, [["render", _sfc_render191], ["__file", "picture-filled.vue"]]);
    var _sfc_main197 = {
      name: "Plus"
    }, _hoisted_1197 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_2197 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M480 480V128a32 32 0 0 1 64 0v352h352a32 32 0 1 1 0 64H544v352a32 32 0 1 1-64 0V544H128a32 32 0 0 1 0-64h352z"
    }, null, -1), _hoisted_3196 = [
      _hoisted_2197
    ];
    function _sfc_render197(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1197, _hoisted_3196);
    }
    var plus_default = /* @__PURE__ */ export_helper_default(_sfc_main197, [["render", _sfc_render197], ["__file", "plus.vue"]]);
    var _sfc_main206 = {
      name: "QuestionFilled"
    }, _hoisted_1206 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_2206 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M512 64a448 448 0 1 1 0 896 448 448 0 0 1 0-896zm23.744 191.488c-52.096 0-92.928 14.784-123.2 44.352-30.976 29.568-45.76 70.4-45.76 122.496h80.256c0-29.568 5.632-52.8 17.6-68.992 13.376-19.712 35.2-28.864 66.176-28.864 23.936 0 42.944 6.336 56.32 19.712 12.672 13.376 19.712 31.68 19.712 54.912 0 17.6-6.336 34.496-19.008 49.984l-8.448 9.856c-45.76 40.832-73.216 70.4-82.368 89.408-9.856 19.008-14.08 42.24-14.08 68.992v9.856h80.96v-9.856c0-16.896 3.52-31.68 10.56-45.76 6.336-12.672 15.488-24.64 28.16-35.2 33.792-29.568 54.208-48.576 60.544-55.616 16.896-22.528 26.048-51.392 26.048-86.592 0-42.944-14.08-76.736-42.24-101.376-28.16-25.344-65.472-37.312-111.232-37.312zm-12.672 406.208a54.272 54.272 0 0 0-38.72 14.784 49.408 49.408 0 0 0-15.488 38.016c0 15.488 4.928 28.16 15.488 38.016A54.848 54.848 0 0 0 523.072 768c15.488 0 28.16-4.928 38.72-14.784a51.52 51.52 0 0 0 16.192-38.72 51.968 51.968 0 0 0-15.488-38.016 55.936 55.936 0 0 0-39.424-14.784z"
    }, null, -1), _hoisted_3205 = [
      _hoisted_2206
    ];
    function _sfc_render206(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1206, _hoisted_3205);
    }
    var question_filled_default = /* @__PURE__ */ export_helper_default(_sfc_main206, [["render", _sfc_render206], ["__file", "question-filled.vue"]]);
    var _sfc_main210 = {
      name: "RefreshLeft"
    }, _hoisted_1210 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_2210 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M289.088 296.704h92.992a32 32 0 0 1 0 64H232.96a32 32 0 0 1-32-32V179.712a32 32 0 0 1 64 0v50.56a384 384 0 0 1 643.84 282.88 384 384 0 0 1-383.936 384 384 384 0 0 1-384-384h64a320 320 0 1 0 640 0 320 320 0 0 0-555.712-216.448z"
    }, null, -1), _hoisted_3209 = [
      _hoisted_2210
    ];
    function _sfc_render210(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1210, _hoisted_3209);
    }
    var refresh_left_default = /* @__PURE__ */ export_helper_default(_sfc_main210, [["render", _sfc_render210], ["__file", "refresh-left.vue"]]);
    var _sfc_main211 = {
      name: "RefreshRight"
    }, _hoisted_1211 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_2211 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M784.512 230.272v-50.56a32 32 0 1 1 64 0v149.056a32 32 0 0 1-32 32H667.52a32 32 0 1 1 0-64h92.992A320 320 0 1 0 524.8 833.152a320 320 0 0 0 320-320h64a384 384 0 0 1-384 384 384 384 0 0 1-384-384 384 384 0 0 1 643.712-282.88z"
    }, null, -1), _hoisted_3210 = [
      _hoisted_2211
    ];
    function _sfc_render211(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1211, _hoisted_3210);
    }
    var refresh_right_default = /* @__PURE__ */ export_helper_default(_sfc_main211, [["render", _sfc_render211], ["__file", "refresh-right.vue"]]);
    var _sfc_main217 = {
      name: "ScaleToOriginal"
    }, _hoisted_1217 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_2217 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M813.176 180.706a60.235 60.235 0 0 1 60.236 60.235v481.883a60.235 60.235 0 0 1-60.236 60.235H210.824a60.235 60.235 0 0 1-60.236-60.235V240.94a60.235 60.235 0 0 1 60.236-60.235h602.352zm0-60.235H210.824A120.47 120.47 0 0 0 90.353 240.94v481.883a120.47 120.47 0 0 0 120.47 120.47h602.353a120.47 120.47 0 0 0 120.471-120.47V240.94a120.47 120.47 0 0 0-120.47-120.47zm-120.47 180.705a30.118 30.118 0 0 0-30.118 30.118v301.177a30.118 30.118 0 0 0 60.236 0V331.294a30.118 30.118 0 0 0-30.118-30.118zm-361.412 0a30.118 30.118 0 0 0-30.118 30.118v301.177a30.118 30.118 0 1 0 60.236 0V331.294a30.118 30.118 0 0 0-30.118-30.118zM512 361.412a30.118 30.118 0 0 0-30.118 30.117v30.118a30.118 30.118 0 0 0 60.236 0V391.53A30.118 30.118 0 0 0 512 361.412zM512 512a30.118 30.118 0 0 0-30.118 30.118v30.117a30.118 30.118 0 0 0 60.236 0v-30.117A30.118 30.118 0 0 0 512 512z"
    }, null, -1), _hoisted_3216 = [
      _hoisted_2217
    ];
    function _sfc_render217(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1217, _hoisted_3216);
    }
    var scale_to_original_default = /* @__PURE__ */ export_helper_default(_sfc_main217, [["render", _sfc_render217], ["__file", "scale-to-original.vue"]]);
    var _sfc_main220 = {
      name: "Search"
    }, _hoisted_1220 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_2220 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "m795.904 750.72 124.992 124.928a32 32 0 0 1-45.248 45.248L750.656 795.904a416 416 0 1 1 45.248-45.248zM480 832a352 352 0 1 0 0-704 352 352 0 0 0 0 704z"
    }, null, -1), _hoisted_3219 = [
      _hoisted_2220
    ];
    function _sfc_render220(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1220, _hoisted_3219);
    }
    var search_default = /* @__PURE__ */ export_helper_default(_sfc_main220, [["render", _sfc_render220], ["__file", "search.vue"]]);
    var _sfc_main236 = {
      name: "SortDown"
    }, _hoisted_1236 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_2236 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M576 96v709.568L333.312 562.816A32 32 0 1 0 288 608l297.408 297.344A32 32 0 0 0 640 882.688V96a32 32 0 0 0-64 0z"
    }, null, -1), _hoisted_3235 = [
      _hoisted_2236
    ];
    function _sfc_render236(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1236, _hoisted_3235);
    }
    var sort_down_default = /* @__PURE__ */ export_helper_default(_sfc_main236, [["render", _sfc_render236], ["__file", "sort-down.vue"]]);
    var _sfc_main237 = {
      name: "SortUp"
    }, _hoisted_1237 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_2237 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M384 141.248V928a32 32 0 1 0 64 0V218.56l242.688 242.688A32 32 0 1 0 736 416L438.592 118.656A32 32 0 0 0 384 141.248z"
    }, null, -1), _hoisted_3236 = [
      _hoisted_2237
    ];
    function _sfc_render237(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1237, _hoisted_3236);
    }
    var sort_up_default = /* @__PURE__ */ export_helper_default(_sfc_main237, [["render", _sfc_render237], ["__file", "sort-up.vue"]]);
    var _sfc_main240 = {
      name: "StarFilled"
    }, _hoisted_1240 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_2240 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M283.84 867.84 512 747.776l228.16 119.936a6.4 6.4 0 0 0 9.28-6.72l-43.52-254.08 184.512-179.904a6.4 6.4 0 0 0-3.52-10.88l-255.104-37.12L517.76 147.904a6.4 6.4 0 0 0-11.52 0L392.192 379.072l-255.104 37.12a6.4 6.4 0 0 0-3.52 10.88L318.08 606.976l-43.584 254.08a6.4 6.4 0 0 0 9.28 6.72z"
    }, null, -1), _hoisted_3239 = [
      _hoisted_2240
    ];
    function _sfc_render240(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1240, _hoisted_3239);
    }
    var star_filled_default = /* @__PURE__ */ export_helper_default(_sfc_main240, [["render", _sfc_render240], ["__file", "star-filled.vue"]]);
    var _sfc_main241 = {
      name: "Star"
    }, _hoisted_1241 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_2241 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "m512 747.84 228.16 119.936a6.4 6.4 0 0 0 9.28-6.72l-43.52-254.08 184.512-179.904a6.4 6.4 0 0 0-3.52-10.88l-255.104-37.12L517.76 147.904a6.4 6.4 0 0 0-11.52 0L392.192 379.072l-255.104 37.12a6.4 6.4 0 0 0-3.52 10.88L318.08 606.976l-43.584 254.08a6.4 6.4 0 0 0 9.28 6.72L512 747.84zM313.6 924.48a70.4 70.4 0 0 1-102.144-74.24l37.888-220.928L88.96 472.96A70.4 70.4 0 0 1 128 352.896l221.76-32.256 99.2-200.96a70.4 70.4 0 0 1 126.208 0l99.2 200.96 221.824 32.256a70.4 70.4 0 0 1 39.04 120.064L774.72 629.376l37.888 220.928a70.4 70.4 0 0 1-102.144 74.24L512 820.096l-198.4 104.32z"
    }, null, -1), _hoisted_3240 = [
      _hoisted_2241
    ];
    function _sfc_render241(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1241, _hoisted_3240);
    }
    var star_default = /* @__PURE__ */ export_helper_default(_sfc_main241, [["render", _sfc_render241], ["__file", "star.vue"]]);
    var _sfc_main243 = {
      name: "SuccessFilled"
    }, _hoisted_1243 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_2243 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M512 64a448 448 0 1 1 0 896 448 448 0 0 1 0-896zm-55.808 536.384-99.52-99.584a38.4 38.4 0 1 0-54.336 54.336l126.72 126.72a38.272 38.272 0 0 0 54.336 0l262.4-262.464a38.4 38.4 0 1 0-54.272-54.336L456.192 600.384z"
    }, null, -1), _hoisted_3242 = [
      _hoisted_2243
    ];
    function _sfc_render243(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1243, _hoisted_3242);
    }
    var success_filled_default = /* @__PURE__ */ export_helper_default(_sfc_main243, [["render", _sfc_render243], ["__file", "success-filled.vue"]]);
    var _sfc_main274 = {
      name: "View"
    }, _hoisted_1274 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_2274 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M512 160c320 0 512 352 512 352S832 864 512 864 0 512 0 512s192-352 512-352zm0 64c-225.28 0-384.128 208.064-436.8 288 52.608 79.872 211.456 288 436.8 288 225.28 0 384.128-208.064 436.8-288-52.608-79.872-211.456-288-436.8-288zm0 64a224 224 0 1 1 0 448 224 224 0 0 1 0-448zm0 64a160.192 160.192 0 0 0-160 160c0 88.192 71.744 160 160 160s160-71.808 160-160-71.744-160-160-160z"
    }, null, -1), _hoisted_3273 = [
      _hoisted_2274
    ];
    function _sfc_render274(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1274, _hoisted_3273);
    }
    var view_default = /* @__PURE__ */ export_helper_default(_sfc_main274, [["render", _sfc_render274], ["__file", "view.vue"]]);
    var _sfc_main277 = {
      name: "WarningFilled"
    }, _hoisted_1277 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_2277 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "M512 64a448 448 0 1 1 0 896 448 448 0 0 1 0-896zm0 192a58.432 58.432 0 0 0-58.24 63.744l23.36 256.384a35.072 35.072 0 0 0 69.76 0l23.296-256.384A58.432 58.432 0 0 0 512 256zm0 512a51.2 51.2 0 1 0 0-102.4 51.2 51.2 0 0 0 0 102.4z"
    }, null, -1), _hoisted_3276 = [
      _hoisted_2277
    ];
    function _sfc_render277(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1277, _hoisted_3276);
    }
    var warning_filled_default = /* @__PURE__ */ export_helper_default(_sfc_main277, [["render", _sfc_render277], ["__file", "warning-filled.vue"]]);
    var _sfc_main282 = {
      name: "ZoomIn"
    }, _hoisted_1282 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_2282 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "m795.904 750.72 124.992 124.928a32 32 0 0 1-45.248 45.248L750.656 795.904a416 416 0 1 1 45.248-45.248zM480 832a352 352 0 1 0 0-704 352 352 0 0 0 0 704zm-32-384v-96a32 32 0 0 1 64 0v96h96a32 32 0 0 1 0 64h-96v96a32 32 0 0 1-64 0v-96h-96a32 32 0 0 1 0-64h96z"
    }, null, -1), _hoisted_3281 = [
      _hoisted_2282
    ];
    function _sfc_render282(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1282, _hoisted_3281);
    }
    var zoom_in_default = /* @__PURE__ */ export_helper_default(_sfc_main282, [["render", _sfc_render282], ["__file", "zoom-in.vue"]]);
    var _sfc_main283 = {
      name: "ZoomOut"
    }, _hoisted_1283 = {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg"
    }, _hoisted_2283 = /* @__PURE__ */ createBaseVNode("path", {
      fill: "currentColor",
      d: "m795.904 750.72 124.992 124.928a32 32 0 0 1-45.248 45.248L750.656 795.904a416 416 0 1 1 45.248-45.248zM480 832a352 352 0 1 0 0-704 352 352 0 0 0 0 704zM352 448h256a32 32 0 0 1 0 64H352a32 32 0 0 1 0-64z"
    }, null, -1), _hoisted_3282 = [
      _hoisted_2283
    ];
    function _sfc_render283(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1283, _hoisted_3282);
    }
    var zoom_out_default = /* @__PURE__ */ export_helper_default(_sfc_main283, [["render", _sfc_render283], ["__file", "zoom-out.vue"]]);
    const epPropKey = "__epPropKey";
    const definePropType = (val) => val;
    const isEpProp = (val) => isObject$7(val) && !!val[epPropKey];
    const buildProp = (prop, key) => {
      if (!isObject$7(prop) || isEpProp(prop))
        return prop;
      const { values, required: required2, default: defaultValue, type: type2, validator } = prop;
      const _validator = values || validator ? (val) => {
        let valid = false;
        let allowedValues = [];
        if (values) {
          allowedValues = Array.from(values);
          if (hasOwn$2(prop, "default")) {
            allowedValues.push(defaultValue);
          }
          valid || (valid = allowedValues.includes(val));
        }
        if (validator)
          valid || (valid = validator(val));
        if (!valid && allowedValues.length > 0) {
          const allowValuesText = [...new Set(allowedValues)].map((value) => JSON.stringify(value)).join(", ");
          warn$1(`Invalid prop: validation failed${key ? ` for prop "${key}"` : ""}. Expected one of [${allowValuesText}], got value ${JSON.stringify(val)}.`);
        }
        return valid;
      } : void 0;
      const epProp = {
        type: type2,
        required: !!required2,
        validator: _validator,
        [epPropKey]: true
      };
      if (hasOwn$2(prop, "default"))
        epProp.default = defaultValue;
      return epProp;
    };
    const buildProps = (props) => fromPairs(Object.entries(props).map(([key, option]) => [
      key,
      buildProp(option, key)
    ]));
    const iconPropType = definePropType([
      String,
      Object,
      Function
    ]);
    const CloseComponents = {
      Close: close_default
    };
    const TypeComponents = {
      Close: close_default,
      SuccessFilled: success_filled_default,
      InfoFilled: info_filled_default,
      WarningFilled: warning_filled_default,
      CircleCloseFilled: circle_close_filled_default
    };
    const TypeComponentsMap = {
      success: success_filled_default,
      warning: warning_filled_default,
      error: circle_close_filled_default,
      info: info_filled_default
    };
    const ValidateComponentsMap = {
      validating: loading_default,
      success: circle_check_default,
      error: circle_close_default
    };
    const withInstall = (main, extra) => {
      main.install = (app2) => {
        for (const comp of [main, ...Object.values(extra != null ? extra : {})]) {
          app2.component(comp.name, comp);
        }
      };
      if (extra) {
        for (const [key, comp] of Object.entries(extra)) {
          main[key] = comp;
        }
      }
      return main;
    };
    const withInstallFunction = (fn2, name) => {
      fn2.install = (app2) => {
        fn2._context = app2._context;
        app2.config.globalProperties[name] = fn2;
      };
      return fn2;
    };
    const withInstallDirective = (directive, name) => {
      directive.install = (app2) => {
        app2.directive(name, directive);
      };
      return directive;
    };
    const withNoopInstall = (component2) => {
      component2.install = NOOP;
      return component2;
    };
    const composeRefs = (...refs) => {
      return (el) => {
        refs.forEach((ref2) => {
          if (isFunction$4(ref2)) {
            ref2(el);
          } else {
            ref2.value = el;
          }
        });
      };
    };
    const EVENT_CODE = {
      tab: "Tab",
      enter: "Enter",
      space: "Space",
      left: "ArrowLeft",
      up: "ArrowUp",
      right: "ArrowRight",
      down: "ArrowDown",
      esc: "Escape",
      delete: "Delete",
      backspace: "Backspace",
      numpadEnter: "NumpadEnter",
      pageUp: "PageUp",
      pageDown: "PageDown",
      home: "Home",
      end: "End"
    };
    const datePickTypes = [
      "year",
      "month",
      "date",
      "dates",
      "week",
      "datetime",
      "datetimerange",
      "daterange",
      "monthrange"
    ];
    const WEEK_DAYS = [
      "sun",
      "mon",
      "tue",
      "wed",
      "thu",
      "fri",
      "sat"
    ];
    const UPDATE_MODEL_EVENT = "update:modelValue";
    const CHANGE_EVENT = "change";
    const INPUT_EVENT = "input";
    const INSTALLED_KEY = Symbol("INSTALLED_KEY");
    const componentSizes = ["", "default", "small", "large"];
    const componentSizeMap = {
      large: 40,
      default: 32,
      small: 24
    };
    const getComponentSize = (size2) => {
      return componentSizeMap[size2 || "default"];
    };
    const isValidComponentSize = (val) => ["", ...componentSizes].includes(val);
    var PatchFlags = /* @__PURE__ */ ((PatchFlags2) => {
      PatchFlags2[PatchFlags2["TEXT"] = 1] = "TEXT";
      PatchFlags2[PatchFlags2["CLASS"] = 2] = "CLASS";
      PatchFlags2[PatchFlags2["STYLE"] = 4] = "STYLE";
      PatchFlags2[PatchFlags2["PROPS"] = 8] = "PROPS";
      PatchFlags2[PatchFlags2["FULL_PROPS"] = 16] = "FULL_PROPS";
      PatchFlags2[PatchFlags2["HYDRATE_EVENTS"] = 32] = "HYDRATE_EVENTS";
      PatchFlags2[PatchFlags2["STABLE_FRAGMENT"] = 64] = "STABLE_FRAGMENT";
      PatchFlags2[PatchFlags2["KEYED_FRAGMENT"] = 128] = "KEYED_FRAGMENT";
      PatchFlags2[PatchFlags2["UNKEYED_FRAGMENT"] = 256] = "UNKEYED_FRAGMENT";
      PatchFlags2[PatchFlags2["NEED_PATCH"] = 512] = "NEED_PATCH";
      PatchFlags2[PatchFlags2["DYNAMIC_SLOTS"] = 1024] = "DYNAMIC_SLOTS";
      PatchFlags2[PatchFlags2["HOISTED"] = -1] = "HOISTED";
      PatchFlags2[PatchFlags2["BAIL"] = -2] = "BAIL";
      return PatchFlags2;
    })(PatchFlags || {});
    function isFragment(node) {
      return isVNode(node) && node.type === Fragment;
    }
    function isComment(node) {
      return isVNode(node) && node.type === Comment;
    }
    function isValidElementNode(node) {
      return isVNode(node) && !isFragment(node) && !isComment(node);
    }
    const getNormalizedProps = (node) => {
      if (!isVNode(node)) {
        return {};
      }
      const raw = node.props || {};
      const type2 = (isVNode(node.type) ? node.type.props : void 0) || {};
      const props = {};
      Object.keys(type2).forEach((key) => {
        if (hasOwn$2(type2[key], "default")) {
          props[key] = type2[key].default;
        }
      });
      Object.keys(raw).forEach((key) => {
        props[camelize(key)] = raw[key];
      });
      return props;
    };
    const ensureOnlyChild = (children) => {
      if (!isArray$6(children) || children.length > 1) {
        throw new Error("expect to receive a single Vue element child");
      }
      return children[0];
    };
    const cubic = (value) => {
      return value ** 3;
    };
    const easeInOutCubic = (value) => value < 0.5 ? cubic(value * 2) / 2 : 1 - cubic((1 - value) * 2) / 2;
    const unique = (arr) => [...new Set(arr)];
    const castArray = (arr) => {
      if (!arr && arr !== 0)
        return [];
      return Array.isArray(arr) ? arr : [arr];
    };
    const isFirefox = () => isClient && /firefox/i.test(window.navigator.userAgent);
    const isKorean = (text) => /([(\uAC00-\uD7AF)|(\u3130-\u318F)])+/gi.test(text);
    const rAF = (fn2) => isClient ? window.requestAnimationFrame(fn2) : setTimeout(fn2, 16);
    const cAF = (handle) => isClient ? window.cancelAnimationFrame(handle) : clearTimeout(handle);
    const generateId = () => Math.floor(Math.random() * 1e4);
    const mutable = (val) => val;
    const DEFAULT_EXCLUDE_KEYS = ["class", "style"];
    const LISTENER_PREFIX = /^on[A-Z]/;
    const useAttrs = (params = {}) => {
      const { excludeListeners = false, excludeKeys } = params;
      const allExcludeKeys = computed(() => {
        return ((excludeKeys == null ? void 0 : excludeKeys.value) || []).concat(DEFAULT_EXCLUDE_KEYS);
      });
      const instance = getCurrentInstance();
      if (!instance) {
        return computed(() => ({}));
      }
      return computed(() => {
        var _a2;
        return fromPairs(Object.entries((_a2 = instance.proxy) == null ? void 0 : _a2.$attrs).filter(([key]) => !allExcludeKeys.value.includes(key) && !(excludeListeners && LISTENER_PREFIX.test(key))));
      });
    };
    const breadcrumbKey = Symbol("breadcrumbKey");
    const buttonGroupContextKey = Symbol("buttonGroupContextKey");
    const carouselContextKey = Symbol("carouselContextKey");
    const collapseContextKey = Symbol("collapseContextKey");
    const configProviderContextKey = Symbol();
    const dialogInjectionKey = Symbol("dialogInjectionKey");
    const formContextKey = Symbol("formContextKey");
    const formItemContextKey = Symbol("formItemContextKey");
    const elPaginationKey = Symbol("elPaginationKey");
    const radioGroupKey = Symbol("radioGroupKey");
    const rowContextKey = Symbol("rowContextKey");
    const scrollbarContextKey = Symbol("scrollbarContextKey");
    const sliderContextKey = Symbol("sliderContextKey");
    const tabsRootContextKey = Symbol("tabsRootContextKey");
    const uploadContextKey = Symbol("uploadContextKey");
    const POPPER_INJECTION_KEY = Symbol("popper");
    const POPPER_CONTENT_INJECTION_KEY = Symbol("popperContent");
    const tooltipV2RootKey = Symbol("tooltipV2");
    const tooltipV2ContentKey = Symbol("tooltipV2Content");
    const TOOLTIP_V2_OPEN = "tooltip_v2.open";
    const ROOT_PICKER_INJECTION_KEY = Symbol();
    const useProp = (name) => {
      const vm = getCurrentInstance();
      return computed(() => {
        var _a2, _b;
        return (_b = ((_a2 = vm.proxy) == null ? void 0 : _a2.$props)[name]) != null ? _b : void 0;
      });
    };
    const globalConfig = ref();
    function useGlobalConfig(key, defaultValue = void 0) {
      const config2 = getCurrentInstance() ? inject(configProviderContextKey, globalConfig) : globalConfig;
      if (key) {
        return computed(() => {
          var _a2, _b;
          return (_b = (_a2 = config2.value) == null ? void 0 : _a2[key]) != null ? _b : defaultValue;
        });
      } else {
        return config2;
      }
    }
    const provideGlobalConfig = (config2, app2, global2 = false) => {
      var _a2;
      const inSetup = !!getCurrentInstance();
      const oldConfig = inSetup ? useGlobalConfig() : void 0;
      const provideFn = (_a2 = app2 == null ? void 0 : app2.provide) != null ? _a2 : inSetup ? provide : void 0;
      if (!provideFn) {
        return;
      }
      const context = computed(() => {
        const cfg = unref(config2);
        if (!(oldConfig == null ? void 0 : oldConfig.value))
          return cfg;
        return mergeConfig(oldConfig.value, cfg);
      });
      provideFn(configProviderContextKey, context);
      if (global2 || !globalConfig.value) {
        globalConfig.value = context.value;
      }
      return context;
    };
    const mergeConfig = (a2, b2) => {
      var _a2;
      const keys2 = [.../* @__PURE__ */ new Set([...keysOf(a2), ...keysOf(b2)])];
      const obj = {};
      for (const key of keys2) {
        obj[key] = (_a2 = b2[key]) != null ? _a2 : a2[key];
      }
      return obj;
    };
    const useSizeProp = buildProp({
      type: String,
      values: componentSizes,
      required: false
    });
    const useSize = (fallback, ignore = {}) => {
      const emptyRef = ref(void 0);
      const size2 = ignore.prop ? emptyRef : useProp("size");
      const globalConfig2 = ignore.global ? emptyRef : useGlobalConfig("size");
      const form = ignore.form ? { size: void 0 } : inject(formContextKey, void 0);
      const formItem = ignore.formItem ? { size: void 0 } : inject(formItemContextKey, void 0);
      return computed(() => size2.value || unref(fallback) || (formItem == null ? void 0 : formItem.size) || (form == null ? void 0 : form.size) || globalConfig2.value || "");
    };
    const useDisabled$1 = (fallback) => {
      const disabled = useProp("disabled");
      const form = inject(formContextKey, void 0);
      return computed(() => disabled.value || unref(fallback) || (form == null ? void 0 : form.disabled) || false);
    };
    const useDeprecated = ({ from: from2, replacement, scope, version: version2, ref: ref2, type: type2 = "API" }, condition) => {
      watch(() => unref(condition), (val) => {
      }, {
        immediate: true
      });
    };
    const useDraggable = (targetRef, dragRef, draggable2) => {
      let transform2 = {
        offsetX: 0,
        offsetY: 0
      };
      const onMousedown = (e2) => {
        const downX = e2.clientX;
        const downY = e2.clientY;
        const { offsetX, offsetY } = transform2;
        const targetRect = targetRef.value.getBoundingClientRect();
        const targetLeft = targetRect.left;
        const targetTop = targetRect.top;
        const targetWidth = targetRect.width;
        const targetHeight = targetRect.height;
        const clientWidth = document.documentElement.clientWidth;
        const clientHeight = document.documentElement.clientHeight;
        const minLeft = -targetLeft + offsetX;
        const minTop = -targetTop + offsetY;
        const maxLeft = clientWidth - targetLeft - targetWidth + offsetX;
        const maxTop = clientHeight - targetTop - targetHeight + offsetY;
        const onMousemove = (e22) => {
          const moveX = Math.min(Math.max(offsetX + e22.clientX - downX, minLeft), maxLeft);
          const moveY = Math.min(Math.max(offsetY + e22.clientY - downY, minTop), maxTop);
          transform2 = {
            offsetX: moveX,
            offsetY: moveY
          };
          targetRef.value.style.transform = `translate(${addUnit(moveX)}, ${addUnit(moveY)})`;
        };
        const onMouseup = () => {
          document.removeEventListener("mousemove", onMousemove);
          document.removeEventListener("mouseup", onMouseup);
        };
        document.addEventListener("mousemove", onMousemove);
        document.addEventListener("mouseup", onMouseup);
      };
      const onDraggable = () => {
        if (dragRef.value && targetRef.value) {
          dragRef.value.addEventListener("mousedown", onMousedown);
        }
      };
      const offDraggable = () => {
        if (dragRef.value && targetRef.value) {
          dragRef.value.removeEventListener("mousedown", onMousedown);
        }
      };
      onMounted(() => {
        watchEffect(() => {
          if (draggable2.value) {
            onDraggable();
          } else {
            offDraggable();
          }
        });
      });
      onBeforeUnmount(() => {
        offDraggable();
      });
    };
    const useFocus = (el) => {
      return {
        focus: () => {
          var _a2, _b;
          (_b = (_a2 = el.value) == null ? void 0 : _a2.focus) == null ? void 0 : _b.call(_a2);
        }
      };
    };
    const defaultIdInjection = {
      prefix: Math.floor(Math.random() * 1e4),
      current: 0
    };
    const ID_INJECTION_KEY = Symbol("elIdInjection");
    const useId = (deterministicId) => {
      const idInjection = inject(ID_INJECTION_KEY, defaultIdInjection);
      const idRef = computed(() => unref(deterministicId) || `el-id-${idInjection.prefix}-${idInjection.current++}`);
      return idRef;
    };
    const useFormItem = () => {
      const form = inject(formContextKey, void 0);
      const formItem = inject(formItemContextKey, void 0);
      return {
        form,
        formItem
      };
    };
    const useFormItemInputId = (props, {
      formItemContext,
      disableIdGeneration,
      disableIdManagement
    }) => {
      if (!disableIdGeneration) {
        disableIdGeneration = ref(false);
      }
      if (!disableIdManagement) {
        disableIdManagement = ref(false);
      }
      const inputId = ref();
      let idUnwatch = void 0;
      const isLabeledByFormItem = computed(() => {
        var _a2;
        return !!(!props.label && formItemContext && formItemContext.inputIds && ((_a2 = formItemContext.inputIds) == null ? void 0 : _a2.length) <= 1);
      });
      onMounted(() => {
        idUnwatch = watch([toRef(props, "id"), disableIdGeneration], ([id2, disableIdGeneration2]) => {
          const newId = id2 != null ? id2 : !disableIdGeneration2 ? useId().value : void 0;
          if (newId !== inputId.value) {
            if (formItemContext == null ? void 0 : formItemContext.removeInputId) {
              inputId.value && formItemContext.removeInputId(inputId.value);
              if (!(disableIdManagement == null ? void 0 : disableIdManagement.value) && !disableIdGeneration2 && newId) {
                formItemContext.addInputId(newId);
              }
            }
            inputId.value = newId;
          }
        }, { immediate: true });
      });
      onUnmounted(() => {
        idUnwatch && idUnwatch();
        if (formItemContext == null ? void 0 : formItemContext.removeInputId) {
          inputId.value && formItemContext.removeInputId(inputId.value);
        }
      });
      return {
        isLabeledByFormItem,
        inputId
      };
    };
    var English = {
      name: "en",
      el: {
        colorpicker: {
          confirm: "OK",
          clear: "Clear",
          defaultLabel: "color picker",
          description: "current color is {color}. press enter to select a new color."
        },
        datepicker: {
          now: "Now",
          today: "Today",
          cancel: "Cancel",
          clear: "Clear",
          confirm: "OK",
          dateTablePrompt: "Use the arrow keys and enter to select the day of the month",
          monthTablePrompt: "Use the arrow keys and enter to select the month",
          yearTablePrompt: "Use the arrow keys and enter to select the year",
          selectedDate: "Selected date",
          selectDate: "Select date",
          selectTime: "Select time",
          startDate: "Start Date",
          startTime: "Start Time",
          endDate: "End Date",
          endTime: "End Time",
          prevYear: "Previous Year",
          nextYear: "Next Year",
          prevMonth: "Previous Month",
          nextMonth: "Next Month",
          year: "",
          month1: "January",
          month2: "February",
          month3: "March",
          month4: "April",
          month5: "May",
          month6: "June",
          month7: "July",
          month8: "August",
          month9: "September",
          month10: "October",
          month11: "November",
          month12: "December",
          week: "week",
          weeks: {
            sun: "Sun",
            mon: "Mon",
            tue: "Tue",
            wed: "Wed",
            thu: "Thu",
            fri: "Fri",
            sat: "Sat"
          },
          weeksFull: {
            sun: "Sunday",
            mon: "Monday",
            tue: "Tuesday",
            wed: "Wednesday",
            thu: "Thursday",
            fri: "Friday",
            sat: "Saturday"
          },
          months: {
            jan: "Jan",
            feb: "Feb",
            mar: "Mar",
            apr: "Apr",
            may: "May",
            jun: "Jun",
            jul: "Jul",
            aug: "Aug",
            sep: "Sep",
            oct: "Oct",
            nov: "Nov",
            dec: "Dec"
          }
        },
        inputNumber: {
          decrease: "decrease number",
          increase: "increase number"
        },
        select: {
          loading: "Loading",
          noMatch: "No matching data",
          noData: "No data",
          placeholder: "Select"
        },
        dropdown: {
          toggleDropdown: "Toggle Dropdown"
        },
        cascader: {
          noMatch: "No matching data",
          loading: "Loading",
          placeholder: "Select",
          noData: "No data"
        },
        pagination: {
          goto: "Go to",
          pagesize: "/page",
          total: "Total {total}",
          pageClassifier: "",
          deprecationWarning: "Deprecated usages detected, please refer to the el-pagination documentation for more details"
        },
        dialog: {
          close: "Close this dialog"
        },
        drawer: {
          close: "Close this dialog"
        },
        messagebox: {
          title: "Message",
          confirm: "OK",
          cancel: "Cancel",
          error: "Illegal input",
          close: "Close this dialog"
        },
        upload: {
          deleteTip: "press delete to remove",
          delete: "Delete",
          preview: "Preview",
          continue: "Continue"
        },
        slider: {
          defaultLabel: "slider between {min} and {max}",
          defaultRangeStartLabel: "pick start value",
          defaultRangeEndLabel: "pick end value"
        },
        table: {
          emptyText: "No Data",
          confirmFilter: "Confirm",
          resetFilter: "Reset",
          clearFilter: "All",
          sumText: "Sum"
        },
        tree: {
          emptyText: "No Data"
        },
        transfer: {
          noMatch: "No matching data",
          noData: "No data",
          titles: ["List 1", "List 2"],
          filterPlaceholder: "Enter keyword",
          noCheckedFormat: "{total} items",
          hasCheckedFormat: "{checked}/{total} checked"
        },
        image: {
          error: "FAILED"
        },
        pageHeader: {
          title: "Back"
        },
        popconfirm: {
          confirmButtonText: "Yes",
          cancelButtonText: "No"
        }
      }
    };
    const buildTranslator = (locale) => (path, option) => translate(path, option, unref(locale));
    const translate = (path, option, locale) => get$1(locale, path, path).replace(/\{(\w+)\}/g, (_2, key) => {
      var _a2;
      return `${(_a2 = option == null ? void 0 : option[key]) != null ? _a2 : `{${key}}`}`;
    });
    const buildLocaleContext = (locale) => {
      const lang = computed(() => unref(locale).name);
      const localeRef = isRef(locale) ? locale : ref(locale);
      return {
        lang,
        locale: localeRef,
        t: buildTranslator(locale)
      };
    };
    const useLocale = () => {
      const locale = useGlobalConfig("locale");
      return buildLocaleContext(computed(() => locale.value || English));
    };
    const defaultNamespace = "el";
    const statePrefix = "is-";
    const _bem = (namespace, block, blockSuffix, element, modifier) => {
      let cls = `${namespace}-${block}`;
      if (blockSuffix) {
        cls += `-${blockSuffix}`;
      }
      if (element) {
        cls += `__${element}`;
      }
      if (modifier) {
        cls += `--${modifier}`;
      }
      return cls;
    };
    const useNamespace = (block) => {
      const globalConfig2 = useGlobalConfig("namespace");
      const namespace = computed(() => globalConfig2.value || defaultNamespace);
      const b2 = (blockSuffix = "") => _bem(unref(namespace), block, blockSuffix, "", "");
      const e2 = (element) => element ? _bem(unref(namespace), block, "", element, "") : "";
      const m2 = (modifier) => modifier ? _bem(unref(namespace), block, "", "", modifier) : "";
      const be2 = (blockSuffix, element) => blockSuffix && element ? _bem(unref(namespace), block, blockSuffix, element, "") : "";
      const em = (element, modifier) => element && modifier ? _bem(unref(namespace), block, "", element, modifier) : "";
      const bm = (blockSuffix, modifier) => blockSuffix && modifier ? _bem(unref(namespace), block, blockSuffix, "", modifier) : "";
      const bem = (blockSuffix, element, modifier) => blockSuffix && element && modifier ? _bem(unref(namespace), block, blockSuffix, element, modifier) : "";
      const is = (name, ...args) => {
        const state = args.length >= 1 ? args[0] : true;
        return name && state ? `${statePrefix}${name}` : "";
      };
      const cssVar = (object2) => {
        const styles = {};
        for (const key in object2) {
          styles[`--${namespace.value}-${key}`] = object2[key];
        }
        return styles;
      };
      const cssVarBlock = (object2) => {
        const styles = {};
        for (const key in object2) {
          styles[`--${namespace.value}-${block}-${key}`] = object2[key];
        }
        return styles;
      };
      const cssVarName = (name) => `--${namespace.value}-${name}`;
      const cssVarBlockName = (name) => `--${namespace.value}-${block}-${name}`;
      return {
        namespace,
        b: b2,
        e: e2,
        m: m2,
        be: be2,
        em,
        bm,
        bem,
        is,
        cssVar,
        cssVarName,
        cssVarBlock,
        cssVarBlockName
      };
    };
    const useLockscreen = (trigger2) => {
      if (!isRef(trigger2)) {
        throwError("[useLockscreen]", "You need to pass a ref param to this function");
      }
      const ns2 = useNamespace("popup");
      const hiddenCls = computed$1(() => ns2.bm("parent", "hidden"));
      if (!isClient || hasClass(document.body, hiddenCls.value)) {
        return;
      }
      let scrollBarWidth2 = 0;
      let withoutHiddenClass = false;
      let bodyPaddingRight = "0";
      let computedBodyPaddingRight = 0;
      const cleanup = () => {
        removeClass(document.body, hiddenCls.value);
        if (withoutHiddenClass) {
          document.body.style.paddingRight = bodyPaddingRight;
        }
      };
      watch(trigger2, (val) => {
        if (!val) {
          cleanup();
          return;
        }
        withoutHiddenClass = !hasClass(document.body, hiddenCls.value);
        if (withoutHiddenClass) {
          bodyPaddingRight = document.body.style.paddingRight;
          computedBodyPaddingRight = Number.parseInt(getStyle(document.body, "paddingRight"), 10);
        }
        scrollBarWidth2 = getScrollBarWidth(ns2.namespace.value);
        const bodyHasOverflow = document.documentElement.clientHeight < document.body.scrollHeight;
        const bodyOverflowY = getStyle(document.body, "overflowY");
        if (scrollBarWidth2 > 0 && (bodyHasOverflow || bodyOverflowY === "scroll") && withoutHiddenClass) {
          document.body.style.paddingRight = `${computedBodyPaddingRight + scrollBarWidth2}px`;
        }
        addClass(document.body, hiddenCls.value);
      });
      onScopeDispose(() => cleanup());
    };
    const _prop = buildProp({
      type: definePropType(Boolean),
      default: null
    });
    const _event = buildProp({
      type: definePropType(Function)
    });
    const createModelToggleComposable = (name) => {
      const updateEventKey = `update:${name}`;
      const updateEventKeyRaw = `onUpdate:${name}`;
      const useModelToggleEmits2 = [updateEventKey];
      const useModelToggleProps2 = {
        [name]: _prop,
        [updateEventKeyRaw]: _event
      };
      const useModelToggle2 = ({
        indicator,
        toggleReason,
        shouldHideWhenRouteChanges,
        shouldProceed,
        onShow,
        onHide
      }) => {
        const instance = getCurrentInstance();
        const { emit: emit2 } = instance;
        const props = instance.props;
        const hasUpdateHandler = computed(() => isFunction$4(props[updateEventKeyRaw]));
        const isModelBindingAbsent = computed(() => props[name] === null);
        const doShow = (event) => {
          if (indicator.value === true) {
            return;
          }
          indicator.value = true;
          if (toggleReason) {
            toggleReason.value = event;
          }
          if (isFunction$4(onShow)) {
            onShow(event);
          }
        };
        const doHide = (event) => {
          if (indicator.value === false) {
            return;
          }
          indicator.value = false;
          if (toggleReason) {
            toggleReason.value = event;
          }
          if (isFunction$4(onHide)) {
            onHide(event);
          }
        };
        const show = (event) => {
          if (props.disabled === true || isFunction$4(shouldProceed) && !shouldProceed())
            return;
          const shouldEmit = hasUpdateHandler.value && isClient;
          if (shouldEmit) {
            emit2(updateEventKey, true);
          }
          if (isModelBindingAbsent.value || !shouldEmit) {
            doShow(event);
          }
        };
        const hide = (event) => {
          if (props.disabled === true || !isClient)
            return;
          const shouldEmit = hasUpdateHandler.value && isClient;
          if (shouldEmit) {
            emit2(updateEventKey, false);
          }
          if (isModelBindingAbsent.value || !shouldEmit) {
            doHide(event);
          }
        };
        const onChange = (val) => {
          if (!isBoolean$1(val))
            return;
          if (props.disabled && val) {
            if (hasUpdateHandler.value) {
              emit2(updateEventKey, false);
            }
          } else if (indicator.value !== val) {
            if (val) {
              doShow();
            } else {
              doHide();
            }
          }
        };
        const toggle = () => {
          if (indicator.value) {
            hide();
          } else {
            show();
          }
        };
        watch(() => props[name], onChange);
        if (shouldHideWhenRouteChanges && instance.appContext.config.globalProperties.$route !== void 0) {
          watch(() => ({
            ...instance.proxy.$route
          }), () => {
            if (shouldHideWhenRouteChanges.value && indicator.value) {
              hide();
            }
          });
        }
        onMounted(() => {
          onChange(props[name]);
        });
        return {
          hide,
          show,
          toggle,
          hasUpdateHandler
        };
      };
      return {
        useModelToggle: useModelToggle2,
        useModelToggleProps: useModelToggleProps2,
        useModelToggleEmits: useModelToggleEmits2
      };
    };
    const useRestoreActive = (toggle, initialFocus) => {
      let previousActive;
      watch(() => toggle.value, (val) => {
        var _a2, _b;
        if (val) {
          previousActive = document.activeElement;
          if (isRef(initialFocus)) {
            (_b = (_a2 = initialFocus.value).focus) == null ? void 0 : _b.call(_a2);
          }
        } else {
          {
            previousActive.focus();
          }
        }
      });
    };
    const useSameTarget = (handleClick) => {
      if (!handleClick) {
        return { onClick: NOOP, onMousedown: NOOP, onMouseup: NOOP };
      }
      let mousedownTarget = false;
      let mouseupTarget = false;
      const onClick = (e2) => {
        if (mousedownTarget && mouseupTarget) {
          handleClick(e2);
        }
        mousedownTarget = mouseupTarget = false;
      };
      const onMousedown = (e2) => {
        mousedownTarget = e2.target === e2.currentTarget;
      };
      const onMouseup = (e2) => {
        mouseupTarget = e2.target === e2.currentTarget;
      };
      return { onClick, onMousedown, onMouseup };
    };
    const useThrottleRender = (loading, throttle2 = 0) => {
      if (throttle2 === 0)
        return loading;
      const throttled = ref(false);
      let timeoutHandle = 0;
      const dispatchThrottling = () => {
        if (timeoutHandle) {
          clearTimeout(timeoutHandle);
        }
        timeoutHandle = window.setTimeout(() => {
          throttled.value = loading.value;
        }, throttle2);
      };
      onMounted(dispatchThrottling);
      watch(() => loading.value, (val) => {
        if (val) {
          dispatchThrottling();
        } else {
          throttled.value = val;
        }
      });
      return throttled;
    };
    function useTimeout() {
      let timeoutHandle;
      const registerTimeout = (fn2, delay) => {
        cancelTimeout();
        timeoutHandle = window.setTimeout(fn2, delay);
      };
      const cancelTimeout = () => window.clearTimeout(timeoutHandle);
      tryOnScopeDispose(() => cancelTimeout());
      return {
        registerTimeout,
        cancelTimeout
      };
    }
    let registeredEscapeHandlers = [];
    const cachedHandler = (e2) => {
      const event = e2;
      if (event.key === EVENT_CODE.esc) {
        registeredEscapeHandlers.forEach((registeredHandler) => registeredHandler(event));
      }
    };
    const useEscapeKeydown = (handler) => {
      onMounted(() => {
        if (registeredEscapeHandlers.length === 0) {
          document.addEventListener("keydown", cachedHandler);
        }
        if (isClient)
          registeredEscapeHandlers.push(handler);
      });
      onBeforeUnmount(() => {
        registeredEscapeHandlers = registeredEscapeHandlers.filter((registeredHandler) => registeredHandler !== handler);
        if (registeredEscapeHandlers.length === 0) {
          if (isClient)
            document.removeEventListener("keydown", cachedHandler);
        }
      });
    };
    let cachedContainer;
    const POPPER_CONTAINER_ID = `el-popper-container-${generateId()}`;
    const POPPER_CONTAINER_SELECTOR = `#${POPPER_CONTAINER_ID}`;
    const createContainer = () => {
      const container = document.createElement("div");
      container.id = POPPER_CONTAINER_ID;
      document.body.appendChild(container);
      return container;
    };
    const usePopperContainer = () => {
      onBeforeMount(() => {
        if (!isClient)
          return;
        if (!cachedContainer || !document.body.querySelector(POPPER_CONTAINER_SELECTOR)) {
          cachedContainer = createContainer();
        }
      });
    };
    const useDelayedToggleProps = buildProps({
      showAfter: {
        type: Number,
        default: 0
      },
      hideAfter: {
        type: Number,
        default: 200
      }
    });
    const useDelayedToggle = ({
      showAfter,
      hideAfter,
      open,
      close: close2
    }) => {
      const { registerTimeout } = useTimeout();
      const onOpen = (event) => {
        registerTimeout(() => {
          open(event);
        }, unref(showAfter));
      };
      const onClose = (event) => {
        registerTimeout(() => {
          close2(event);
        }, unref(hideAfter));
      };
      return {
        onOpen,
        onClose
      };
    };
    const FORWARD_REF_INJECTION_KEY = Symbol("elForwardRef");
    const useForwardRef = (forwardRef) => {
      const setForwardRef = (el) => {
        forwardRef.value = el;
      };
      provide(FORWARD_REF_INJECTION_KEY, {
        setForwardRef
      });
    };
    const useForwardRefDirective = (setForwardRef) => {
      return {
        mounted(el) {
          setForwardRef(el);
        },
        updated(el) {
          setForwardRef(el);
        },
        unmounted() {
          setForwardRef(null);
        }
      };
    };
    const zIndex = ref(0);
    const useZIndex = () => {
      const initialZIndex = useGlobalConfig("zIndex", 2e3);
      const currentZIndex = computed(() => initialZIndex.value + zIndex.value);
      const nextZIndex = () => {
        zIndex.value++;
        return currentZIndex.value;
      };
      return {
        initialZIndex,
        currentZIndex,
        nextZIndex
      };
    };
    function getSide(placement) {
      return placement.split("-")[0];
    }
    function getAlignment(placement) {
      return placement.split("-")[1];
    }
    function getMainAxisFromPlacement(placement) {
      return ["top", "bottom"].includes(getSide(placement)) ? "x" : "y";
    }
    function getLengthFromAxis(axis) {
      return axis === "y" ? "height" : "width";
    }
    function computeCoordsFromPlacement(_ref, placement, rtl) {
      let {
        reference,
        floating
      } = _ref;
      const commonX = reference.x + reference.width / 2 - floating.width / 2;
      const commonY = reference.y + reference.height / 2 - floating.height / 2;
      const mainAxis = getMainAxisFromPlacement(placement);
      const length = getLengthFromAxis(mainAxis);
      const commonAlign = reference[length] / 2 - floating[length] / 2;
      const side = getSide(placement);
      const isVertical = mainAxis === "x";
      let coords;
      switch (side) {
        case "top":
          coords = {
            x: commonX,
            y: reference.y - floating.height
          };
          break;
        case "bottom":
          coords = {
            x: commonX,
            y: reference.y + reference.height
          };
          break;
        case "right":
          coords = {
            x: reference.x + reference.width,
            y: commonY
          };
          break;
        case "left":
          coords = {
            x: reference.x - floating.width,
            y: commonY
          };
          break;
        default:
          coords = {
            x: reference.x,
            y: reference.y
          };
      }
      switch (getAlignment(placement)) {
        case "start":
          coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
          break;
        case "end":
          coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
          break;
      }
      return coords;
    }
    const computePosition$1 = async (reference, floating, config2) => {
      const {
        placement = "bottom",
        strategy = "absolute",
        middleware = [],
        platform: platform2
      } = config2;
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
      let rects = await platform2.getElementRects({
        reference,
        floating,
        strategy
      });
      let {
        x: x2,
        y: y2
      } = computeCoordsFromPlacement(rects, placement, rtl);
      let statefulPlacement = placement;
      let middlewareData = {};
      let resetCount = 0;
      for (let i2 = 0; i2 < middleware.length; i2++) {
        const {
          name,
          fn: fn2
        } = middleware[i2];
        const {
          x: nextX,
          y: nextY,
          data,
          reset: reset2
        } = await fn2({
          x: x2,
          y: y2,
          initialPlacement: placement,
          placement: statefulPlacement,
          strategy,
          middlewareData,
          rects,
          platform: platform2,
          elements: {
            reference,
            floating
          }
        });
        x2 = nextX != null ? nextX : x2;
        y2 = nextY != null ? nextY : y2;
        middlewareData = {
          ...middlewareData,
          [name]: {
            ...middlewareData[name],
            ...data
          }
        };
        if (reset2 && resetCount <= 50) {
          resetCount++;
          if (typeof reset2 === "object") {
            if (reset2.placement) {
              statefulPlacement = reset2.placement;
            }
            if (reset2.rects) {
              rects = reset2.rects === true ? await platform2.getElementRects({
                reference,
                floating,
                strategy
              }) : reset2.rects;
            }
            ({
              x: x2,
              y: y2
            } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
          }
          i2 = -1;
          continue;
        }
      }
      return {
        x: x2,
        y: y2,
        placement: statefulPlacement,
        strategy,
        middlewareData
      };
    };
    function expandPaddingObject(padding) {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        ...padding
      };
    }
    function getSideObjectFromPadding(padding) {
      return typeof padding !== "number" ? expandPaddingObject(padding) : {
        top: padding,
        right: padding,
        bottom: padding,
        left: padding
      };
    }
    function rectToClientRect(rect) {
      return {
        ...rect,
        top: rect.y,
        left: rect.x,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
      };
    }
    const min$2 = Math.min;
    const max$2 = Math.max;
    function within(min$12, value, max$12) {
      return max$2(min$12, min$2(value, max$12));
    }
    const arrow = (options) => ({
      name: "arrow",
      options,
      async fn(middlewareArguments) {
        const {
          element,
          padding = 0
        } = options != null ? options : {};
        const {
          x: x2,
          y: y2,
          placement,
          rects,
          platform: platform2
        } = middlewareArguments;
        if (element == null) {
          return {};
        }
        const paddingObject = getSideObjectFromPadding(padding);
        const coords = {
          x: x2,
          y: y2
        };
        const axis = getMainAxisFromPlacement(placement);
        const alignment = getAlignment(placement);
        const length = getLengthFromAxis(axis);
        const arrowDimensions = await platform2.getDimensions(element);
        const minProp = axis === "y" ? "top" : "left";
        const maxProp = axis === "y" ? "bottom" : "right";
        const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
        const startDiff = coords[axis] - rects.reference[axis];
        const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
        let clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
        if (clientSize === 0) {
          clientSize = rects.floating[length];
        }
        const centerToReference = endDiff / 2 - startDiff / 2;
        const min2 = paddingObject[minProp];
        const max2 = clientSize - arrowDimensions[length] - paddingObject[maxProp];
        const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
        const offset2 = within(min2, center, max2);
        const alignmentPadding = alignment === "start" ? paddingObject[minProp] : paddingObject[maxProp];
        const shouldAddOffset = alignmentPadding > 0 && center !== offset2 && rects.reference[length] <= rects.floating[length];
        const alignmentOffset = shouldAddOffset ? center < min2 ? min2 - center : max2 - center : 0;
        return {
          [axis]: coords[axis] - alignmentOffset,
          data: {
            [axis]: offset2,
            centerOffset: center - offset2
          }
        };
      }
    });
    async function convertValueToCoords(middlewareArguments, value) {
      const {
        placement,
        platform: platform2,
        elements
      } = middlewareArguments;
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
      const side = getSide(placement);
      const alignment = getAlignment(placement);
      const isVertical = getMainAxisFromPlacement(placement) === "x";
      const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
      const crossAxisMulti = rtl && isVertical ? -1 : 1;
      const rawValue = typeof value === "function" ? value(middlewareArguments) : value;
      let {
        mainAxis,
        crossAxis,
        alignmentAxis
      } = typeof rawValue === "number" ? {
        mainAxis: rawValue,
        crossAxis: 0,
        alignmentAxis: null
      } : {
        mainAxis: 0,
        crossAxis: 0,
        alignmentAxis: null,
        ...rawValue
      };
      if (alignment && typeof alignmentAxis === "number") {
        crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
      }
      return isVertical ? {
        x: crossAxis * crossAxisMulti,
        y: mainAxis * mainAxisMulti
      } : {
        x: mainAxis * mainAxisMulti,
        y: crossAxis * crossAxisMulti
      };
    }
    const offset = function(value) {
      if (value === void 0) {
        value = 0;
      }
      return {
        name: "offset",
        options: value,
        async fn(middlewareArguments) {
          const {
            x: x2,
            y: y2
          } = middlewareArguments;
          const diffCoords = await convertValueToCoords(middlewareArguments, value);
          return {
            x: x2 + diffCoords.x,
            y: y2 + diffCoords.y,
            data: diffCoords
          };
        }
      };
    };
    function isWindow(value) {
      return value && value.document && value.location && value.alert && value.setInterval;
    }
    function getWindow(node) {
      if (node == null) {
        return window;
      }
      if (!isWindow(node)) {
        const ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
      }
      return node;
    }
    function getComputedStyle$1(element) {
      return getWindow(element).getComputedStyle(element);
    }
    function getNodeName(node) {
      return isWindow(node) ? "" : node ? (node.nodeName || "").toLowerCase() : "";
    }
    function getUAString() {
      const uaData = navigator.userAgentData;
      if (uaData != null && uaData.brands) {
        return uaData.brands.map((item) => item.brand + "/" + item.version).join(" ");
      }
      return navigator.userAgent;
    }
    function isHTMLElement(value) {
      return value instanceof getWindow(value).HTMLElement;
    }
    function isElement(value) {
      return value instanceof getWindow(value).Element;
    }
    function isNode(value) {
      return value instanceof getWindow(value).Node;
    }
    function isShadowRoot(node) {
      if (typeof ShadowRoot === "undefined") {
        return false;
      }
      const OwnElement = getWindow(node).ShadowRoot;
      return node instanceof OwnElement || node instanceof ShadowRoot;
    }
    function isOverflowElement(element) {
      const {
        overflow,
        overflowX,
        overflowY
      } = getComputedStyle$1(element);
      return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
    }
    function isTableElement(element) {
      return ["table", "td", "th"].includes(getNodeName(element));
    }
    function isContainingBlock(element) {
      const isFirefox2 = /firefox/i.test(getUAString());
      const css = getComputedStyle$1(element);
      return css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].includes(css.willChange) || isFirefox2 && css.willChange === "filter" || isFirefox2 && (css.filter ? css.filter !== "none" : false);
    }
    function isLayoutViewport() {
      return !/^((?!chrome|android).)*safari/i.test(getUAString());
    }
    const min$1 = Math.min;
    const max$1 = Math.max;
    const round = Math.round;
    function getBoundingClientRect(element, includeScale, isFixedStrategy) {
      var _win$visualViewport$o, _win$visualViewport, _win$visualViewport$o2, _win$visualViewport2;
      if (includeScale === void 0) {
        includeScale = false;
      }
      if (isFixedStrategy === void 0) {
        isFixedStrategy = false;
      }
      const clientRect = element.getBoundingClientRect();
      let scaleX = 1;
      let scaleY = 1;
      if (includeScale && isHTMLElement(element)) {
        scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
        scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
      }
      const win = isElement(element) ? getWindow(element) : window;
      const addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
      const x2 = (clientRect.left + (addVisualOffsets ? (_win$visualViewport$o = (_win$visualViewport = win.visualViewport) == null ? void 0 : _win$visualViewport.offsetLeft) != null ? _win$visualViewport$o : 0 : 0)) / scaleX;
      const y2 = (clientRect.top + (addVisualOffsets ? (_win$visualViewport$o2 = (_win$visualViewport2 = win.visualViewport) == null ? void 0 : _win$visualViewport2.offsetTop) != null ? _win$visualViewport$o2 : 0 : 0)) / scaleY;
      const width = clientRect.width / scaleX;
      const height = clientRect.height / scaleY;
      return {
        width,
        height,
        top: y2,
        right: x2 + width,
        bottom: y2 + height,
        left: x2,
        x: x2,
        y: y2
      };
    }
    function getDocumentElement(node) {
      return ((isNode(node) ? node.ownerDocument : node.document) || window.document).documentElement;
    }
    function getNodeScroll(element) {
      if (isElement(element)) {
        return {
          scrollLeft: element.scrollLeft,
          scrollTop: element.scrollTop
        };
      }
      return {
        scrollLeft: element.pageXOffset,
        scrollTop: element.pageYOffset
      };
    }
    function getWindowScrollBarX(element) {
      return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
    }
    function isScaled(element) {
      const rect = getBoundingClientRect(element);
      return round(rect.width) !== element.offsetWidth || round(rect.height) !== element.offsetHeight;
    }
    function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
      const isOffsetParentAnElement = isHTMLElement(offsetParent);
      const documentElement = getDocumentElement(offsetParent);
      const rect = getBoundingClientRect(
        element,
        isOffsetParentAnElement && isScaled(offsetParent),
        strategy === "fixed"
      );
      let scroll = {
        scrollLeft: 0,
        scrollTop: 0
      };
      const offsets = {
        x: 0,
        y: 0
      };
      if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
        if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
          scroll = getNodeScroll(offsetParent);
        }
        if (isHTMLElement(offsetParent)) {
          const offsetRect = getBoundingClientRect(offsetParent, true);
          offsets.x = offsetRect.x + offsetParent.clientLeft;
          offsets.y = offsetRect.y + offsetParent.clientTop;
        } else if (documentElement) {
          offsets.x = getWindowScrollBarX(documentElement);
        }
      }
      return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
      };
    }
    function getParentNode(node) {
      if (getNodeName(node) === "html") {
        return node;
      }
      return node.assignedSlot || node.parentNode || (isShadowRoot(node) ? node.host : null) || getDocumentElement(node);
    }
    function getTrueOffsetParent(element) {
      if (!isHTMLElement(element) || getComputedStyle(element).position === "fixed") {
        return null;
      }
      return element.offsetParent;
    }
    function getContainingBlock(element) {
      let currentNode = getParentNode(element);
      if (isShadowRoot(currentNode)) {
        currentNode = currentNode.host;
      }
      while (isHTMLElement(currentNode) && !["html", "body"].includes(getNodeName(currentNode))) {
        if (isContainingBlock(currentNode)) {
          return currentNode;
        } else {
          currentNode = currentNode.parentNode;
        }
      }
      return null;
    }
    function getOffsetParent(element) {
      const window2 = getWindow(element);
      let offsetParent = getTrueOffsetParent(element);
      while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
        offsetParent = getTrueOffsetParent(offsetParent);
      }
      if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static" && !isContainingBlock(offsetParent))) {
        return window2;
      }
      return offsetParent || getContainingBlock(element) || window2;
    }
    function getDimensions(element) {
      if (isHTMLElement(element)) {
        return {
          width: element.offsetWidth,
          height: element.offsetHeight
        };
      }
      const rect = getBoundingClientRect(element);
      return {
        width: rect.width,
        height: rect.height
      };
    }
    function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
      let {
        rect,
        offsetParent,
        strategy
      } = _ref;
      const isOffsetParentAnElement = isHTMLElement(offsetParent);
      const documentElement = getDocumentElement(offsetParent);
      if (offsetParent === documentElement) {
        return rect;
      }
      let scroll = {
        scrollLeft: 0,
        scrollTop: 0
      };
      const offsets = {
        x: 0,
        y: 0
      };
      if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
        if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
          scroll = getNodeScroll(offsetParent);
        }
        if (isHTMLElement(offsetParent)) {
          const offsetRect = getBoundingClientRect(offsetParent, true);
          offsets.x = offsetRect.x + offsetParent.clientLeft;
          offsets.y = offsetRect.y + offsetParent.clientTop;
        }
      }
      return {
        ...rect,
        x: rect.x - scroll.scrollLeft + offsets.x,
        y: rect.y - scroll.scrollTop + offsets.y
      };
    }
    function getViewportRect(element, strategy) {
      const win = getWindow(element);
      const html = getDocumentElement(element);
      const visualViewport = win.visualViewport;
      let width = html.clientWidth;
      let height = html.clientHeight;
      let x2 = 0;
      let y2 = 0;
      if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height;
        const layoutViewport = isLayoutViewport();
        if (layoutViewport || !layoutViewport && strategy === "fixed") {
          x2 = visualViewport.offsetLeft;
          y2 = visualViewport.offsetTop;
        }
      }
      return {
        width,
        height,
        x: x2,
        y: y2
      };
    }
    function getDocumentRect(element) {
      var _element$ownerDocumen;
      const html = getDocumentElement(element);
      const scroll = getNodeScroll(element);
      const body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
      const width = max$1(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
      const height = max$1(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
      let x2 = -scroll.scrollLeft + getWindowScrollBarX(element);
      const y2 = -scroll.scrollTop;
      if (getComputedStyle$1(body || html).direction === "rtl") {
        x2 += max$1(html.clientWidth, body ? body.clientWidth : 0) - width;
      }
      return {
        width,
        height,
        x: x2,
        y: y2
      };
    }
    function getNearestOverflowAncestor(node) {
      const parentNode = getParentNode(node);
      if (["html", "body", "#document"].includes(getNodeName(parentNode))) {
        return node.ownerDocument.body;
      }
      if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
        return parentNode;
      }
      return getNearestOverflowAncestor(parentNode);
    }
    function getOverflowAncestors(node, list) {
      var _node$ownerDocument;
      if (list === void 0) {
        list = [];
      }
      const scrollableAncestor = getNearestOverflowAncestor(node);
      const isBody = scrollableAncestor === ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.body);
      const win = getWindow(scrollableAncestor);
      const target = isBody ? [win].concat(win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []) : scrollableAncestor;
      const updatedList = list.concat(target);
      return isBody ? updatedList : updatedList.concat(getOverflowAncestors(target));
    }
    function contains(parent, child) {
      const rootNode = child.getRootNode == null ? void 0 : child.getRootNode();
      if (parent.contains(child)) {
        return true;
      } else if (rootNode && isShadowRoot(rootNode)) {
        let next = child;
        do {
          if (next && parent === next) {
            return true;
          }
          next = next.parentNode || next.host;
        } while (next);
      }
      return false;
    }
    function getInnerBoundingClientRect(element, strategy) {
      const clientRect = getBoundingClientRect(element, false, strategy === "fixed");
      const top = clientRect.top + element.clientTop;
      const left2 = clientRect.left + element.clientLeft;
      return {
        top,
        left: left2,
        x: left2,
        y: top,
        right: left2 + element.clientWidth,
        bottom: top + element.clientHeight,
        width: element.clientWidth,
        height: element.clientHeight
      };
    }
    function getClientRectFromClippingAncestor(element, clippingParent, strategy) {
      if (clippingParent === "viewport") {
        return rectToClientRect(getViewportRect(element, strategy));
      }
      if (isElement(clippingParent)) {
        return getInnerBoundingClientRect(clippingParent, strategy);
      }
      return rectToClientRect(getDocumentRect(getDocumentElement(element)));
    }
    function getClippingAncestors(element) {
      const clippingAncestors = getOverflowAncestors(element);
      const canEscapeClipping = ["absolute", "fixed"].includes(getComputedStyle$1(element).position);
      const clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
      if (!isElement(clipperElement)) {
        return [];
      }
      return clippingAncestors.filter((clippingAncestors2) => isElement(clippingAncestors2) && contains(clippingAncestors2, clipperElement) && getNodeName(clippingAncestors2) !== "body");
    }
    function getClippingRect(_ref) {
      let {
        element,
        boundary,
        rootBoundary,
        strategy
      } = _ref;
      const mainClippingAncestors = boundary === "clippingAncestors" ? getClippingAncestors(element) : [].concat(boundary);
      const clippingAncestors = [...mainClippingAncestors, rootBoundary];
      const firstClippingAncestor = clippingAncestors[0];
      const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
        const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
        accRect.top = max$1(rect.top, accRect.top);
        accRect.right = min$1(rect.right, accRect.right);
        accRect.bottom = min$1(rect.bottom, accRect.bottom);
        accRect.left = max$1(rect.left, accRect.left);
        return accRect;
      }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
      return {
        width: clippingRect.right - clippingRect.left,
        height: clippingRect.bottom - clippingRect.top,
        x: clippingRect.left,
        y: clippingRect.top
      };
    }
    const platform$1 = {
      getClippingRect,
      convertOffsetParentRelativeRectToViewportRelativeRect,
      isElement,
      getDimensions,
      getOffsetParent,
      getDocumentElement,
      getElementRects: (_ref) => {
        let {
          reference,
          floating,
          strategy
        } = _ref;
        return {
          reference: getRectRelativeToOffsetParent(reference, getOffsetParent(floating), strategy),
          floating: {
            ...getDimensions(floating),
            x: 0,
            y: 0
          }
        };
      },
      getClientRects: (element) => Array.from(element.getClientRects()),
      isRTL: (element) => getComputedStyle$1(element).direction === "rtl"
    };
    const computePosition = (reference, floating, options) => computePosition$1(reference, floating, {
      platform: platform$1,
      ...options
    });
    buildProps({});
    const unrefReference = (elRef) => {
      if (!isClient)
        return;
      if (!elRef)
        return elRef;
      const unrefEl = unrefElement(elRef);
      if (unrefEl)
        return unrefEl;
      return isRef(elRef) ? unrefEl : elRef;
    };
    const useFloating = ({
      middleware,
      placement,
      strategy
    }) => {
      const referenceRef = ref();
      const contentRef = ref();
      const x2 = ref();
      const y2 = ref();
      const middlewareData = ref({});
      const states = {
        x: x2,
        y: y2,
        placement,
        strategy,
        middlewareData
      };
      const update = async () => {
        if (!isClient)
          return;
        const referenceEl = unrefReference(referenceRef);
        const contentEl = unrefElement(contentRef);
        if (!referenceEl || !contentEl)
          return;
        const data = await computePosition(referenceEl, contentEl, {
          placement: unref(placement),
          strategy: unref(strategy),
          middleware: unref(middleware)
        });
        keysOf(states).forEach((key) => {
          states[key].value = data[key];
        });
      };
      onMounted(() => {
        watchEffect(() => {
          update();
        });
      });
      return {
        ...states,
        update,
        referenceRef,
        contentRef
      };
    };
    const arrowMiddleware = ({
      arrowRef,
      padding
    }) => {
      return {
        name: "arrow",
        options: {
          element: arrowRef,
          padding
        },
        fn(args) {
          const arrowEl = unref(arrowRef);
          if (!arrowEl)
            return {};
          return arrow({
            element: arrowEl,
            padding
          }).fn(args);
        }
      };
    };
    function useCursor(input) {
      const selectionRef = ref();
      function recordCursor() {
        if (input.value == void 0)
          return;
        const { selectionStart, selectionEnd, value } = input.value;
        if (selectionStart == null || selectionEnd == null)
          return;
        const beforeTxt = value.slice(0, Math.max(0, selectionStart));
        const afterTxt = value.slice(Math.max(0, selectionEnd));
        selectionRef.value = {
          selectionStart,
          selectionEnd,
          value,
          beforeTxt,
          afterTxt
        };
      }
      function setCursor() {
        if (input.value == void 0 || selectionRef.value == void 0)
          return;
        const { value } = input.value;
        const { beforeTxt, afterTxt, selectionStart } = selectionRef.value;
        if (beforeTxt == void 0 || afterTxt == void 0 || selectionStart == void 0)
          return;
        let startPos = value.length;
        if (value.endsWith(afterTxt)) {
          startPos = value.length - afterTxt.length;
        } else if (value.startsWith(beforeTxt)) {
          startPos = beforeTxt.length;
        } else {
          const beforeLastChar = beforeTxt[selectionStart - 1];
          const newIndex = value.indexOf(beforeLastChar, selectionStart - 1);
          if (newIndex !== -1) {
            startPos = newIndex + 1;
          }
        }
        input.value.setSelectionRange(startPos, startPos);
      }
      return [recordCursor, setCursor];
    }
    const version$2 = "2.2.11";
    const makeInstaller = (components = []) => {
      const install = (app2, options) => {
        if (app2[INSTALLED_KEY])
          return;
        app2[INSTALLED_KEY] = true;
        components.forEach((c2) => app2.use(c2));
        if (options)
          provideGlobalConfig(options, app2, true);
      };
      return {
        version: version$2,
        install
      };
    };
    const affixProps = buildProps({
      zIndex: {
        type: definePropType([Number, String]),
        default: 100
      },
      target: {
        type: String,
        default: ""
      },
      offset: {
        type: Number,
        default: 0
      },
      position: {
        type: String,
        values: ["top", "bottom"],
        default: "top"
      }
    });
    const affixEmits = {
      scroll: ({ scrollTop, fixed }) => isNumber$1(scrollTop) && isBoolean$1(fixed),
      [CHANGE_EVENT]: (fixed) => isBoolean$1(fixed)
    };
    var _export_sfc$1 = (sfc, props) => {
      const target = sfc.__vccOpts || sfc;
      for (const [key, val] of props) {
        target[key] = val;
      }
      return target;
    };
    const __default__$1Q = {
      name: "ElAffix"
    };
    const _sfc_main$2G = /* @__PURE__ */ defineComponent({
      ...__default__$1Q,
      props: affixProps,
      emits: affixEmits,
      setup(__props, { expose, emit: emit2 }) {
        const props = __props;
        const COMPONENT_NAME2 = "ElAffix";
        const ns2 = useNamespace("affix");
        const target = shallowRef();
        const root2 = shallowRef();
        const scrollContainer = shallowRef();
        const { height: windowHeight } = useWindowSize();
        const {
          height: rootHeight,
          width: rootWidth,
          top: rootTop,
          bottom: rootBottom,
          update: updateRoot
        } = useElementBounding(root2);
        const targetRect = useElementBounding(target);
        const fixed = ref(false);
        const scrollTop = ref(0);
        const transform2 = ref(0);
        const rootStyle = computed(() => {
          return {
            height: fixed.value ? `${rootHeight.value}px` : "",
            width: fixed.value ? `${rootWidth.value}px` : ""
          };
        });
        const affixStyle = computed(() => {
          if (!fixed.value)
            return {};
          const offset2 = props.offset ? `${props.offset}px` : 0;
          return {
            height: `${rootHeight.value}px`,
            width: `${rootWidth.value}px`,
            top: props.position === "top" ? offset2 : "",
            bottom: props.position === "bottom" ? offset2 : "",
            transform: transform2.value ? `translateY(${transform2.value}px)` : "",
            zIndex: props.zIndex
          };
        });
        const update = () => {
          if (!scrollContainer.value)
            return;
          scrollTop.value = scrollContainer.value instanceof Window ? document.documentElement.scrollTop : scrollContainer.value.scrollTop || 0;
          if (props.position === "top") {
            if (props.target) {
              const difference = targetRect.bottom.value - props.offset - rootHeight.value;
              fixed.value = props.offset > rootTop.value && targetRect.bottom.value > 0;
              transform2.value = difference < 0 ? difference : 0;
            } else {
              fixed.value = props.offset > rootTop.value;
            }
          } else if (props.target) {
            const difference = windowHeight.value - targetRect.top.value - props.offset - rootHeight.value;
            fixed.value = windowHeight.value - props.offset < rootBottom.value && windowHeight.value > targetRect.top.value;
            transform2.value = difference < 0 ? -difference : 0;
          } else {
            fixed.value = windowHeight.value - props.offset < rootBottom.value;
          }
        };
        const handleScroll2 = () => {
          emit2("scroll", {
            scrollTop: scrollTop.value,
            fixed: fixed.value
          });
        };
        watch(fixed, (val) => emit2("change", val));
        onMounted(() => {
          var _a2;
          if (props.target) {
            target.value = (_a2 = document.querySelector(props.target)) != null ? _a2 : void 0;
            if (!target.value)
              throwError(COMPONENT_NAME2, `Target is not existed: ${props.target}`);
          } else {
            target.value = document.documentElement;
          }
          scrollContainer.value = getScrollContainer(root2.value, true);
          updateRoot();
        });
        useEventListener(scrollContainer, "scroll", handleScroll2);
        watchEffect(update);
        expose({
          update
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            ref_key: "root",
            ref: root2,
            class: normalizeClass(unref(ns2).b()),
            style: normalizeStyle(unref(rootStyle))
          }, [
            createBaseVNode("div", {
              class: normalizeClass({ [unref(ns2).m("fixed")]: fixed.value }),
              style: normalizeStyle(unref(affixStyle))
            }, [
              renderSlot(_ctx.$slots, "default")
            ], 6)
          ], 6);
        };
      }
    });
    var Affix = /* @__PURE__ */ _export_sfc$1(_sfc_main$2G, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/affix/src/affix.vue"]]);
    const ElAffix = withInstall(Affix);
    const iconProps = buildProps({
      size: {
        type: definePropType([Number, String])
      },
      color: {
        type: String
      }
    });
    const __default__$1P = {
      name: "ElIcon",
      inheritAttrs: false
    };
    const _sfc_main$2F = /* @__PURE__ */ defineComponent({
      ...__default__$1P,
      props: iconProps,
      setup(__props) {
        const props = __props;
        const ns2 = useNamespace("icon");
        const style2 = computed(() => {
          if (!props.size && !props.color)
            return {};
          return {
            fontSize: isUndefined$1(props.size) ? void 0 : addUnit(props.size),
            "--color": props.color
          };
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("i", mergeProps({
            class: unref(ns2).b(),
            style: unref(style2)
          }, _ctx.$attrs), [
            renderSlot(_ctx.$slots, "default")
          ], 16);
        };
      }
    });
    var Icon = /* @__PURE__ */ _export_sfc$1(_sfc_main$2F, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/icon/src/icon.vue"]]);
    const ElIcon = withInstall(Icon);
    const alertEffects = ["light", "dark"];
    const alertProps = buildProps({
      title: {
        type: String,
        default: ""
      },
      description: {
        type: String,
        default: ""
      },
      type: {
        type: String,
        values: keysOf(TypeComponentsMap),
        default: "info"
      },
      closable: {
        type: Boolean,
        default: true
      },
      closeText: {
        type: String,
        default: ""
      },
      showIcon: Boolean,
      center: Boolean,
      effect: {
        type: String,
        values: alertEffects,
        default: "light"
      }
    });
    const alertEmits = {
      close: (evt) => evt instanceof MouseEvent
    };
    const __default__$1O = {
      name: "ElAlert"
    };
    const _sfc_main$2E = /* @__PURE__ */ defineComponent({
      ...__default__$1O,
      props: alertProps,
      emits: alertEmits,
      setup(__props, { emit: emit2 }) {
        const props = __props;
        const { Close } = TypeComponents;
        const slots = useSlots();
        const ns2 = useNamespace("alert");
        const visible = ref(true);
        const iconComponent = computed(() => TypeComponentsMap[props.type]);
        const iconClass = computed(() => [
          ns2.e("icon"),
          { [ns2.is("big")]: !!props.description || !!slots.default }
        ]);
        const isBoldTitle = computed(() => props.description || { [ns2.is("bold")]: slots.default });
        const close2 = (evt) => {
          visible.value = false;
          emit2("close", evt);
        };
        return (_ctx, _cache) => {
          return openBlock(), createBlock(Transition, {
            name: unref(ns2).b("fade"),
            persisted: ""
          }, {
            default: withCtx(() => [
              withDirectives(createBaseVNode("div", {
                class: normalizeClass([unref(ns2).b(), unref(ns2).m(_ctx.type), unref(ns2).is("center", _ctx.center), unref(ns2).is(_ctx.effect)]),
                role: "alert"
              }, [
                _ctx.showIcon && unref(iconComponent) ? (openBlock(), createBlock(unref(ElIcon), {
                  key: 0,
                  class: normalizeClass(unref(iconClass))
                }, {
                  default: withCtx(() => [
                    (openBlock(), createBlock(resolveDynamicComponent(unref(iconComponent))))
                  ]),
                  _: 1
                }, 8, ["class"])) : createCommentVNode("v-if", true),
                createBaseVNode("div", {
                  class: normalizeClass(unref(ns2).e("content"))
                }, [
                  _ctx.title || _ctx.$slots.title ? (openBlock(), createElementBlock("span", {
                    key: 0,
                    class: normalizeClass([unref(ns2).e("title"), unref(isBoldTitle)])
                  }, [
                    renderSlot(_ctx.$slots, "title", {}, () => [
                      createTextVNode(toDisplayString$1(_ctx.title), 1)
                    ])
                  ], 2)) : createCommentVNode("v-if", true),
                  _ctx.$slots.default || _ctx.description ? (openBlock(), createElementBlock("p", {
                    key: 1,
                    class: normalizeClass(unref(ns2).e("description"))
                  }, [
                    renderSlot(_ctx.$slots, "default", {}, () => [
                      createTextVNode(toDisplayString$1(_ctx.description), 1)
                    ])
                  ], 2)) : createCommentVNode("v-if", true),
                  _ctx.closable ? (openBlock(), createElementBlock(Fragment, { key: 2 }, [
                    _ctx.closeText ? (openBlock(), createElementBlock("div", {
                      key: 0,
                      class: normalizeClass([unref(ns2).e("close-btn"), unref(ns2).is("customed")]),
                      onClick: close2
                    }, toDisplayString$1(_ctx.closeText), 3)) : (openBlock(), createBlock(unref(ElIcon), {
                      key: 1,
                      class: normalizeClass(unref(ns2).e("close-btn")),
                      onClick: close2
                    }, {
                      default: withCtx(() => [
                        createVNode(unref(Close))
                      ]),
                      _: 1
                    }, 8, ["class"]))
                  ], 64)) : createCommentVNode("v-if", true)
                ], 2)
              ], 2), [
                [vShow, visible.value]
              ])
            ]),
            _: 3
          }, 8, ["name"]);
        };
      }
    });
    var Alert = /* @__PURE__ */ _export_sfc$1(_sfc_main$2E, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/alert/src/alert.vue"]]);
    const ElAlert = withInstall(Alert);
    let hiddenTextarea = void 0;
    const HIDDEN_STYLE = `
  height:0 !important;
  visibility:hidden !important;
  overflow:hidden !important;
  position:absolute !important;
  z-index:-1000 !important;
  top:0 !important;
  right:0 !important;
`;
    const CONTEXT_STYLE = [
      "letter-spacing",
      "line-height",
      "padding-top",
      "padding-bottom",
      "font-family",
      "font-weight",
      "font-size",
      "text-rendering",
      "text-transform",
      "width",
      "text-indent",
      "padding-left",
      "padding-right",
      "border-width",
      "box-sizing"
    ];
    function calculateNodeStyling(targetElement) {
      const style2 = window.getComputedStyle(targetElement);
      const boxSizing = style2.getPropertyValue("box-sizing");
      const paddingSize = Number.parseFloat(style2.getPropertyValue("padding-bottom")) + Number.parseFloat(style2.getPropertyValue("padding-top"));
      const borderSize = Number.parseFloat(style2.getPropertyValue("border-bottom-width")) + Number.parseFloat(style2.getPropertyValue("border-top-width"));
      const contextStyle = CONTEXT_STYLE.map((name) => `${name}:${style2.getPropertyValue(name)}`).join(";");
      return { contextStyle, paddingSize, borderSize, boxSizing };
    }
    function calcTextareaHeight(targetElement, minRows = 1, maxRows) {
      var _a2;
      if (!hiddenTextarea) {
        hiddenTextarea = document.createElement("textarea");
        document.body.appendChild(hiddenTextarea);
      }
      const { paddingSize, borderSize, boxSizing, contextStyle } = calculateNodeStyling(targetElement);
      hiddenTextarea.setAttribute("style", `${contextStyle};${HIDDEN_STYLE}`);
      hiddenTextarea.value = targetElement.value || targetElement.placeholder || "";
      let height = hiddenTextarea.scrollHeight;
      const result = {};
      if (boxSizing === "border-box") {
        height = height + borderSize;
      } else if (boxSizing === "content-box") {
        height = height - paddingSize;
      }
      hiddenTextarea.value = "";
      const singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
      if (isNumber$1(minRows)) {
        let minHeight = singleRowHeight * minRows;
        if (boxSizing === "border-box") {
          minHeight = minHeight + paddingSize + borderSize;
        }
        height = Math.max(minHeight, height);
        result.minHeight = `${minHeight}px`;
      }
      if (isNumber$1(maxRows)) {
        let maxHeight = singleRowHeight * maxRows;
        if (boxSizing === "border-box") {
          maxHeight = maxHeight + paddingSize + borderSize;
        }
        height = Math.min(maxHeight, height);
      }
      result.height = `${height}px`;
      (_a2 = hiddenTextarea.parentNode) == null ? void 0 : _a2.removeChild(hiddenTextarea);
      hiddenTextarea = void 0;
      return result;
    }
    const inputProps = buildProps({
      id: {
        type: String,
        default: void 0
      },
      size: useSizeProp,
      disabled: Boolean,
      modelValue: {
        type: definePropType([
          String,
          Number,
          Object
        ]),
        default: ""
      },
      type: {
        type: String,
        default: "text"
      },
      resize: {
        type: String,
        values: ["none", "both", "horizontal", "vertical"]
      },
      autosize: {
        type: definePropType([Boolean, Object]),
        default: false
      },
      autocomplete: {
        type: String,
        default: "off"
      },
      formatter: {
        type: Function
      },
      parser: {
        type: Function
      },
      placeholder: {
        type: String
      },
      form: {
        type: String,
        default: ""
      },
      readonly: {
        type: Boolean,
        default: false
      },
      clearable: {
        type: Boolean,
        default: false
      },
      showPassword: {
        type: Boolean,
        default: false
      },
      showWordLimit: {
        type: Boolean,
        default: false
      },
      suffixIcon: {
        type: iconPropType,
        default: ""
      },
      prefixIcon: {
        type: iconPropType,
        default: ""
      },
      containerRole: {
        type: String,
        default: void 0
      },
      label: {
        type: String,
        default: void 0
      },
      tabindex: {
        type: [String, Number],
        default: 0
      },
      validateEvent: {
        type: Boolean,
        default: true
      },
      inputStyle: {
        type: definePropType([Object, Array, String]),
        default: () => mutable({})
      }
    });
    const inputEmits = {
      [UPDATE_MODEL_EVENT]: (value) => isString$3(value),
      input: (value) => isString$3(value),
      change: (value) => isString$3(value),
      focus: (evt) => evt instanceof FocusEvent,
      blur: (evt) => evt instanceof FocusEvent,
      clear: () => true,
      mouseleave: (evt) => evt instanceof MouseEvent,
      mouseenter: (evt) => evt instanceof MouseEvent,
      keydown: (evt) => evt instanceof Event,
      compositionstart: (evt) => evt instanceof CompositionEvent,
      compositionupdate: (evt) => evt instanceof CompositionEvent,
      compositionend: (evt) => evt instanceof CompositionEvent
    };
    const _hoisted_1$1a = ["role"];
    const _hoisted_2$J = ["id", "type", "disabled", "formatter", "parser", "readonly", "autocomplete", "tabindex", "aria-label", "placeholder"];
    const _hoisted_3$m = ["id", "tabindex", "disabled", "readonly", "autocomplete", "aria-label", "placeholder"];
    const __default__$1N = {
      name: "ElInput",
      inheritAttrs: false
    };
    const _sfc_main$2D = /* @__PURE__ */ defineComponent({
      ...__default__$1N,
      props: inputProps,
      emits: inputEmits,
      setup(__props, { expose, emit: emit2 }) {
        const props = __props;
        const PENDANT_MAP = {
          suffix: "append",
          prefix: "prepend"
        };
        const instance = getCurrentInstance();
        const rawAttrs = useAttrs$1();
        const slots = useSlots();
        const containerAttrs = computed(() => {
          const comboBoxAttrs = {};
          if (props.containerRole === "combobox") {
            comboBoxAttrs["aria-haspopup"] = rawAttrs["aria-haspopup"];
            comboBoxAttrs["aria-owns"] = rawAttrs["aria-owns"];
            comboBoxAttrs["aria-expanded"] = rawAttrs["aria-expanded"];
          }
          return comboBoxAttrs;
        });
        const attrs = useAttrs({
          excludeKeys: computed(() => {
            return Object.keys(containerAttrs.value);
          })
        });
        const { form, formItem } = useFormItem();
        const { inputId } = useFormItemInputId(props, {
          formItemContext: formItem
        });
        const inputSize = useSize();
        const inputDisabled = useDisabled$1();
        const nsInput = useNamespace("input");
        const nsTextarea = useNamespace("textarea");
        const input = shallowRef();
        const textarea = shallowRef();
        const focused = ref(false);
        const hovering = ref(false);
        const isComposing = ref(false);
        const passwordVisible = ref(false);
        const countStyle = ref();
        const textareaCalcStyle = shallowRef(props.inputStyle);
        const _ref = computed(() => input.value || textarea.value);
        const needStatusIcon = computed(() => {
          var _a2;
          return (_a2 = form == null ? void 0 : form.statusIcon) != null ? _a2 : false;
        });
        const validateState = computed(() => (formItem == null ? void 0 : formItem.validateState) || "");
        const validateIcon = computed(() => validateState.value && ValidateComponentsMap[validateState.value]);
        const passwordIcon = computed(() => passwordVisible.value ? view_default : hide_default);
        const containerStyle = computed(() => [
          rawAttrs.style,
          props.inputStyle
        ]);
        const textareaStyle = computed(() => [
          props.inputStyle,
          textareaCalcStyle.value,
          { resize: props.resize }
        ]);
        const nativeInputValue = computed(() => isNil(props.modelValue) ? "" : String(props.modelValue));
        const showClear = computed(() => props.clearable && !inputDisabled.value && !props.readonly && !!nativeInputValue.value && (focused.value || hovering.value));
        const showPwdVisible = computed(() => props.showPassword && !inputDisabled.value && !props.readonly && !!nativeInputValue.value && (!!nativeInputValue.value || focused.value));
        const isWordLimitVisible = computed(() => props.showWordLimit && !!attrs.value.maxlength && (props.type === "text" || props.type === "textarea") && !inputDisabled.value && !props.readonly && !props.showPassword);
        const textLength = computed(() => Array.from(nativeInputValue.value).length);
        const inputExceed = computed(() => !!isWordLimitVisible.value && textLength.value > Number(attrs.value.maxlength));
        const suffixVisible = computed(() => !!slots.suffix || !!props.suffixIcon || showClear.value || props.showPassword || isWordLimitVisible.value || !!validateState.value && needStatusIcon.value);
        const [recordCursor, setCursor] = useCursor(input);
        useResizeObserver(textarea, (entries) => {
          if (!isWordLimitVisible.value || props.resize !== "both")
            return;
          const entry = entries[0];
          const { width } = entry.contentRect;
          countStyle.value = {
            right: `calc(100% - ${width + 15 + 6}px)`
          };
        });
        const resizeTextarea = () => {
          const { type: type2, autosize } = props;
          if (!isClient || type2 !== "textarea")
            return;
          if (autosize) {
            const minRows = isObject$7(autosize) ? autosize.minRows : void 0;
            const maxRows = isObject$7(autosize) ? autosize.maxRows : void 0;
            textareaCalcStyle.value = {
              ...calcTextareaHeight(textarea.value, minRows, maxRows)
            };
          } else {
            textareaCalcStyle.value = {
              minHeight: calcTextareaHeight(textarea.value).minHeight
            };
          }
        };
        const setNativeInputValue = () => {
          const input2 = _ref.value;
          if (!input2 || input2.value === nativeInputValue.value)
            return;
          input2.value = nativeInputValue.value;
        };
        const calcIconOffset = (place) => {
          const { el } = instance.vnode;
          if (!el)
            return;
          const elList = Array.from(el.querySelectorAll(`.${nsInput.e(place)}`));
          const target = elList.find((item) => item.parentNode === el);
          if (!target)
            return;
          const pendant = PENDANT_MAP[place];
          if (slots[pendant]) {
            target.style.transform = `translateX(${place === "suffix" ? "-" : ""}${el.querySelector(`.${nsInput.be("group", pendant)}`).offsetWidth}px)`;
          } else {
            target.removeAttribute("style");
          }
        };
        const updateIconOffset = () => {
          calcIconOffset("prefix");
          calcIconOffset("suffix");
        };
        const handleInput = async (event) => {
          recordCursor();
          let { value } = event.target;
          if (props.formatter) {
            value = props.parser ? props.parser(value) : value;
            value = props.formatter(value);
          }
          if (isComposing.value)
            return;
          if (value === nativeInputValue.value)
            return;
          emit2(UPDATE_MODEL_EVENT, value);
          emit2("input", value);
          await nextTick$1();
          setNativeInputValue();
          setCursor();
        };
        const handleChange = (event) => {
          emit2("change", event.target.value);
        };
        const handleCompositionStart = (event) => {
          emit2("compositionstart", event);
          isComposing.value = true;
        };
        const handleCompositionUpdate = (event) => {
          var _a2;
          emit2("compositionupdate", event);
          const text = (_a2 = event.target) == null ? void 0 : _a2.value;
          const lastCharacter = text[text.length - 1] || "";
          isComposing.value = !isKorean(lastCharacter);
        };
        const handleCompositionEnd = (event) => {
          emit2("compositionend", event);
          if (isComposing.value) {
            isComposing.value = false;
            handleInput(event);
          }
        };
        const handlePasswordVisible = () => {
          passwordVisible.value = !passwordVisible.value;
          focus();
        };
        const focus = async () => {
          var _a2;
          await nextTick$1();
          (_a2 = _ref.value) == null ? void 0 : _a2.focus();
        };
        const blur = () => {
          var _a2;
          return (_a2 = _ref.value) == null ? void 0 : _a2.blur();
        };
        const handleFocus = (event) => {
          focused.value = true;
          emit2("focus", event);
        };
        const handleBlur = (event) => {
          var _a2;
          focused.value = false;
          emit2("blur", event);
          if (props.validateEvent) {
            (_a2 = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a2.call(formItem, "blur").catch((err) => debugWarn());
          }
        };
        const handleMouseLeave = (evt) => {
          hovering.value = false;
          emit2("mouseleave", evt);
        };
        const handleMouseEnter = (evt) => {
          hovering.value = true;
          emit2("mouseenter", evt);
        };
        const handleKeydown = (evt) => {
          emit2("keydown", evt);
        };
        const select = () => {
          var _a2;
          (_a2 = _ref.value) == null ? void 0 : _a2.select();
        };
        const clear2 = () => {
          emit2(UPDATE_MODEL_EVENT, "");
          emit2("change", "");
          emit2("clear");
          emit2("input", "");
        };
        watch(() => props.modelValue, () => {
          var _a2;
          nextTick$1(() => resizeTextarea());
          if (props.validateEvent) {
            (_a2 = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a2.call(formItem, "change").catch((err) => debugWarn());
          }
        });
        watch(nativeInputValue, () => setNativeInputValue());
        watch(() => props.type, async () => {
          await nextTick$1();
          setNativeInputValue();
          resizeTextarea();
          updateIconOffset();
        });
        onMounted(async () => {
          if (!props.formatter && props.parser)
            ;
          setNativeInputValue();
          updateIconOffset();
          await nextTick$1();
          resizeTextarea();
        });
        onUpdated(async () => {
          await nextTick$1();
          updateIconOffset();
        });
        expose({
          input,
          textarea,
          ref: _ref,
          textareaStyle,
          autosize: toRef(props, "autosize"),
          focus,
          blur,
          select,
          clear: clear2,
          resizeTextarea
        });
        return (_ctx, _cache) => {
          return withDirectives((openBlock(), createElementBlock("div", mergeProps(unref(containerAttrs), {
            class: [
              _ctx.type === "textarea" ? unref(nsTextarea).b() : unref(nsInput).b(),
              unref(nsInput).m(unref(inputSize)),
              unref(nsInput).is("disabled", unref(inputDisabled)),
              unref(nsInput).is("exceed", unref(inputExceed)),
              {
                [unref(nsInput).b("group")]: _ctx.$slots.prepend || _ctx.$slots.append,
                [unref(nsInput).bm("group", "append")]: _ctx.$slots.append,
                [unref(nsInput).bm("group", "prepend")]: _ctx.$slots.prepend,
                [unref(nsInput).m("prefix")]: _ctx.$slots.prefix || _ctx.prefixIcon,
                [unref(nsInput).m("suffix")]: _ctx.$slots.suffix || _ctx.suffixIcon || _ctx.clearable || _ctx.showPassword,
                [unref(nsInput).bm("suffix", "password-clear")]: unref(showClear) && unref(showPwdVisible)
              },
              _ctx.$attrs.class
            ],
            style: unref(containerStyle),
            role: _ctx.containerRole,
            onMouseenter: handleMouseEnter,
            onMouseleave: handleMouseLeave
          }), [
            createCommentVNode(" input "),
            _ctx.type !== "textarea" ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              createCommentVNode(" prepend slot "),
              _ctx.$slots.prepend ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(unref(nsInput).be("group", "prepend"))
              }, [
                renderSlot(_ctx.$slots, "prepend")
              ], 2)) : createCommentVNode("v-if", true),
              createBaseVNode("div", {
                class: normalizeClass([unref(nsInput).e("wrapper"), unref(nsInput).is("focus", focused.value)])
              }, [
                createCommentVNode(" prefix slot "),
                _ctx.$slots.prefix || _ctx.prefixIcon ? (openBlock(), createElementBlock("span", {
                  key: 0,
                  class: normalizeClass(unref(nsInput).e("prefix"))
                }, [
                  createBaseVNode("span", {
                    class: normalizeClass(unref(nsInput).e("prefix-inner"))
                  }, [
                    renderSlot(_ctx.$slots, "prefix"),
                    _ctx.prefixIcon ? (openBlock(), createBlock(unref(ElIcon), {
                      key: 0,
                      class: normalizeClass(unref(nsInput).e("icon"))
                    }, {
                      default: withCtx(() => [
                        (openBlock(), createBlock(resolveDynamicComponent(_ctx.prefixIcon)))
                      ]),
                      _: 1
                    }, 8, ["class"])) : createCommentVNode("v-if", true)
                  ], 2)
                ], 2)) : createCommentVNode("v-if", true),
                createBaseVNode("input", mergeProps({
                  id: unref(inputId),
                  ref_key: "input",
                  ref: input,
                  class: unref(nsInput).e("inner")
                }, unref(attrs), {
                  type: _ctx.showPassword ? passwordVisible.value ? "text" : "password" : _ctx.type,
                  disabled: unref(inputDisabled),
                  formatter: _ctx.formatter,
                  parser: _ctx.parser,
                  readonly: _ctx.readonly,
                  autocomplete: _ctx.autocomplete,
                  tabindex: _ctx.tabindex,
                  "aria-label": _ctx.label,
                  placeholder: _ctx.placeholder,
                  style: _ctx.inputStyle,
                  onCompositionstart: handleCompositionStart,
                  onCompositionupdate: handleCompositionUpdate,
                  onCompositionend: handleCompositionEnd,
                  onInput: handleInput,
                  onFocus: handleFocus,
                  onBlur: handleBlur,
                  onChange: handleChange,
                  onKeydown: handleKeydown
                }), null, 16, _hoisted_2$J),
                createCommentVNode(" suffix slot "),
                unref(suffixVisible) ? (openBlock(), createElementBlock("span", {
                  key: 1,
                  class: normalizeClass(unref(nsInput).e("suffix"))
                }, [
                  createBaseVNode("span", {
                    class: normalizeClass(unref(nsInput).e("suffix-inner"))
                  }, [
                    !unref(showClear) || !unref(showPwdVisible) || !unref(isWordLimitVisible) ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                      renderSlot(_ctx.$slots, "suffix"),
                      _ctx.suffixIcon ? (openBlock(), createBlock(unref(ElIcon), {
                        key: 0,
                        class: normalizeClass(unref(nsInput).e("icon"))
                      }, {
                        default: withCtx(() => [
                          (openBlock(), createBlock(resolveDynamicComponent(_ctx.suffixIcon)))
                        ]),
                        _: 1
                      }, 8, ["class"])) : createCommentVNode("v-if", true)
                    ], 64)) : createCommentVNode("v-if", true),
                    unref(showClear) ? (openBlock(), createBlock(unref(ElIcon), {
                      key: 1,
                      class: normalizeClass([unref(nsInput).e("icon"), unref(nsInput).e("clear")]),
                      onMousedown: withModifiers(unref(NOOP), ["prevent"]),
                      onClick: clear2
                    }, {
                      default: withCtx(() => [
                        createVNode(unref(circle_close_default))
                      ]),
                      _: 1
                    }, 8, ["class", "onMousedown"])) : createCommentVNode("v-if", true),
                    unref(showPwdVisible) ? (openBlock(), createBlock(unref(ElIcon), {
                      key: 2,
                      class: normalizeClass([unref(nsInput).e("icon"), unref(nsInput).e("password")]),
                      onClick: handlePasswordVisible
                    }, {
                      default: withCtx(() => [
                        (openBlock(), createBlock(resolveDynamicComponent(unref(passwordIcon))))
                      ]),
                      _: 1
                    }, 8, ["class"])) : createCommentVNode("v-if", true),
                    unref(isWordLimitVisible) ? (openBlock(), createElementBlock("span", {
                      key: 3,
                      class: normalizeClass(unref(nsInput).e("count"))
                    }, [
                      createBaseVNode("span", {
                        class: normalizeClass(unref(nsInput).e("count-inner"))
                      }, toDisplayString$1(unref(textLength)) + " / " + toDisplayString$1(unref(attrs).maxlength), 3)
                    ], 2)) : createCommentVNode("v-if", true),
                    unref(validateState) && unref(validateIcon) && unref(needStatusIcon) ? (openBlock(), createBlock(unref(ElIcon), {
                      key: 4,
                      class: normalizeClass([
                        unref(nsInput).e("icon"),
                        unref(nsInput).e("validateIcon"),
                        unref(nsInput).is("loading", unref(validateState) === "validating")
                      ])
                    }, {
                      default: withCtx(() => [
                        (openBlock(), createBlock(resolveDynamicComponent(unref(validateIcon))))
                      ]),
                      _: 1
                    }, 8, ["class"])) : createCommentVNode("v-if", true)
                  ], 2)
                ], 2)) : createCommentVNode("v-if", true)
              ], 2),
              createCommentVNode(" append slot "),
              _ctx.$slots.append ? (openBlock(), createElementBlock("div", {
                key: 1,
                class: normalizeClass(unref(nsInput).be("group", "append"))
              }, [
                renderSlot(_ctx.$slots, "append")
              ], 2)) : createCommentVNode("v-if", true)
            ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createCommentVNode(" textarea "),
              createBaseVNode("textarea", mergeProps({
                id: unref(inputId),
                ref_key: "textarea",
                ref: textarea,
                class: unref(nsTextarea).e("inner")
              }, unref(attrs), {
                tabindex: _ctx.tabindex,
                disabled: unref(inputDisabled),
                readonly: _ctx.readonly,
                autocomplete: _ctx.autocomplete,
                style: unref(textareaStyle),
                "aria-label": _ctx.label,
                placeholder: _ctx.placeholder,
                onCompositionstart: handleCompositionStart,
                onCompositionupdate: handleCompositionUpdate,
                onCompositionend: handleCompositionEnd,
                onInput: handleInput,
                onFocus: handleFocus,
                onBlur: handleBlur,
                onChange: handleChange,
                onKeydown: handleKeydown
              }), null, 16, _hoisted_3$m),
              unref(isWordLimitVisible) ? (openBlock(), createElementBlock("span", {
                key: 0,
                style: normalizeStyle(countStyle.value),
                class: normalizeClass(unref(nsInput).e("count"))
              }, toDisplayString$1(unref(textLength)) + " / " + toDisplayString$1(unref(attrs).maxlength), 7)) : createCommentVNode("v-if", true)
            ], 64))
          ], 16, _hoisted_1$1a)), [
            [vShow, _ctx.type !== "hidden"]
          ]);
        };
      }
    });
    var Input = /* @__PURE__ */ _export_sfc$1(_sfc_main$2D, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/input/src/input.vue"]]);
    const ElInput = withInstall(Input);
    const GAP = 4;
    const BAR_MAP = {
      vertical: {
        offset: "offsetHeight",
        scroll: "scrollTop",
        scrollSize: "scrollHeight",
        size: "height",
        key: "vertical",
        axis: "Y",
        client: "clientY",
        direction: "top"
      },
      horizontal: {
        offset: "offsetWidth",
        scroll: "scrollLeft",
        scrollSize: "scrollWidth",
        size: "width",
        key: "horizontal",
        axis: "X",
        client: "clientX",
        direction: "left"
      }
    };
    const renderThumbStyle$1 = ({
      move,
      size: size2,
      bar
    }) => ({
      [bar.size]: size2,
      transform: `translate${bar.axis}(${move}%)`
    });
    const thumbProps = buildProps({
      vertical: Boolean,
      size: String,
      move: Number,
      ratio: {
        type: Number,
        required: true
      },
      always: Boolean
    });
    const _sfc_main$2C = /* @__PURE__ */ defineComponent({
      __name: "thumb",
      props: thumbProps,
      setup(__props) {
        const props = __props;
        const COMPONENT_NAME2 = "Thumb";
        const scrollbar = inject(scrollbarContextKey);
        const ns2 = useNamespace("scrollbar");
        if (!scrollbar)
          throwError(COMPONENT_NAME2, "can not inject scrollbar context");
        const instance = ref();
        const thumb = ref();
        const thumbState = ref({});
        const visible = ref(false);
        let cursorDown = false;
        let cursorLeave = false;
        let originalOnSelectStart = isClient ? document.onselectstart : null;
        const bar = computed(() => BAR_MAP[props.vertical ? "vertical" : "horizontal"]);
        const thumbStyle = computed(() => renderThumbStyle$1({
          size: props.size,
          move: props.move,
          bar: bar.value
        }));
        const offsetRatio = computed(() => instance.value[bar.value.offset] ** 2 / scrollbar.wrapElement[bar.value.scrollSize] / props.ratio / thumb.value[bar.value.offset]);
        const clickThumbHandler = (e2) => {
          var _a2;
          e2.stopPropagation();
          if (e2.ctrlKey || [1, 2].includes(e2.button))
            return;
          (_a2 = window.getSelection()) == null ? void 0 : _a2.removeAllRanges();
          startDrag(e2);
          const el = e2.currentTarget;
          if (!el)
            return;
          thumbState.value[bar.value.axis] = el[bar.value.offset] - (e2[bar.value.client] - el.getBoundingClientRect()[bar.value.direction]);
        };
        const clickTrackHandler = (e2) => {
          if (!thumb.value || !instance.value || !scrollbar.wrapElement)
            return;
          const offset2 = Math.abs(e2.target.getBoundingClientRect()[bar.value.direction] - e2[bar.value.client]);
          const thumbHalf = thumb.value[bar.value.offset] / 2;
          const thumbPositionPercentage = (offset2 - thumbHalf) * 100 * offsetRatio.value / instance.value[bar.value.offset];
          scrollbar.wrapElement[bar.value.scroll] = thumbPositionPercentage * scrollbar.wrapElement[bar.value.scrollSize] / 100;
        };
        const startDrag = (e2) => {
          e2.stopImmediatePropagation();
          cursorDown = true;
          document.addEventListener("mousemove", mouseMoveDocumentHandler);
          document.addEventListener("mouseup", mouseUpDocumentHandler);
          originalOnSelectStart = document.onselectstart;
          document.onselectstart = () => false;
        };
        const mouseMoveDocumentHandler = (e2) => {
          if (!instance.value || !thumb.value)
            return;
          if (cursorDown === false)
            return;
          const prevPage = thumbState.value[bar.value.axis];
          if (!prevPage)
            return;
          const offset2 = (instance.value.getBoundingClientRect()[bar.value.direction] - e2[bar.value.client]) * -1;
          const thumbClickPosition = thumb.value[bar.value.offset] - prevPage;
          const thumbPositionPercentage = (offset2 - thumbClickPosition) * 100 * offsetRatio.value / instance.value[bar.value.offset];
          scrollbar.wrapElement[bar.value.scroll] = thumbPositionPercentage * scrollbar.wrapElement[bar.value.scrollSize] / 100;
        };
        const mouseUpDocumentHandler = () => {
          cursorDown = false;
          thumbState.value[bar.value.axis] = 0;
          document.removeEventListener("mousemove", mouseMoveDocumentHandler);
          document.removeEventListener("mouseup", mouseUpDocumentHandler);
          restoreOnselectstart();
          if (cursorLeave)
            visible.value = false;
        };
        const mouseMoveScrollbarHandler = () => {
          cursorLeave = false;
          visible.value = !!props.size;
        };
        const mouseLeaveScrollbarHandler = () => {
          cursorLeave = true;
          visible.value = cursorDown;
        };
        onBeforeUnmount(() => {
          restoreOnselectstart();
          document.removeEventListener("mouseup", mouseUpDocumentHandler);
        });
        const restoreOnselectstart = () => {
          if (document.onselectstart !== originalOnSelectStart)
            document.onselectstart = originalOnSelectStart;
        };
        useEventListener(toRef(scrollbar, "scrollbarElement"), "mousemove", mouseMoveScrollbarHandler);
        useEventListener(toRef(scrollbar, "scrollbarElement"), "mouseleave", mouseLeaveScrollbarHandler);
        return (_ctx, _cache) => {
          return openBlock(), createBlock(Transition, {
            name: unref(ns2).b("fade"),
            persisted: ""
          }, {
            default: withCtx(() => [
              withDirectives(createBaseVNode("div", {
                ref_key: "instance",
                ref: instance,
                class: normalizeClass([unref(ns2).e("bar"), unref(ns2).is(unref(bar).key)]),
                onMousedown: clickTrackHandler
              }, [
                createBaseVNode("div", {
                  ref_key: "thumb",
                  ref: thumb,
                  class: normalizeClass(unref(ns2).e("thumb")),
                  style: normalizeStyle(unref(thumbStyle)),
                  onMousedown: clickThumbHandler
                }, null, 38)
              ], 34), [
                [vShow, _ctx.always || visible.value]
              ])
            ]),
            _: 1
          }, 8, ["name"]);
        };
      }
    });
    var Thumb = /* @__PURE__ */ _export_sfc$1(_sfc_main$2C, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/scrollbar/src/thumb.vue"]]);
    const barProps = buildProps({
      always: {
        type: Boolean,
        default: true
      },
      width: String,
      height: String,
      ratioX: {
        type: Number,
        default: 1
      },
      ratioY: {
        type: Number,
        default: 1
      }
    });
    const _sfc_main$2B = /* @__PURE__ */ defineComponent({
      __name: "bar",
      props: barProps,
      setup(__props, { expose }) {
        const props = __props;
        const moveX = ref(0);
        const moveY = ref(0);
        const handleScroll2 = (wrap) => {
          if (wrap) {
            const offsetHeight = wrap.offsetHeight - GAP;
            const offsetWidth = wrap.offsetWidth - GAP;
            moveY.value = wrap.scrollTop * 100 / offsetHeight * props.ratioY;
            moveX.value = wrap.scrollLeft * 100 / offsetWidth * props.ratioX;
          }
        };
        expose({
          handleScroll: handleScroll2
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock(Fragment, null, [
            createVNode(Thumb, {
              move: moveX.value,
              ratio: _ctx.ratioX,
              size: _ctx.width,
              always: _ctx.always
            }, null, 8, ["move", "ratio", "size", "always"]),
            createVNode(Thumb, {
              move: moveY.value,
              ratio: _ctx.ratioY,
              size: _ctx.height,
              vertical: "",
              always: _ctx.always
            }, null, 8, ["move", "ratio", "size", "always"])
          ], 64);
        };
      }
    });
    var Bar = /* @__PURE__ */ _export_sfc$1(_sfc_main$2B, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/scrollbar/src/bar.vue"]]);
    const scrollbarProps = buildProps({
      height: {
        type: [String, Number],
        default: ""
      },
      maxHeight: {
        type: [String, Number],
        default: ""
      },
      native: Boolean,
      wrapStyle: {
        type: definePropType([String, Object, Array]),
        default: ""
      },
      wrapClass: {
        type: [String, Array],
        default: ""
      },
      viewClass: {
        type: [String, Array],
        default: ""
      },
      viewStyle: {
        type: [String, Array, Object],
        default: ""
      },
      noresize: Boolean,
      tag: {
        type: String,
        default: "div"
      },
      always: Boolean,
      minSize: {
        type: Number,
        default: 20
      }
    });
    const scrollbarEmits = {
      scroll: ({
        scrollTop,
        scrollLeft
      }) => [scrollTop, scrollLeft].every(isNumber$1)
    };
    const __default__$1M = {
      name: "ElScrollbar"
    };
    const _sfc_main$2A = /* @__PURE__ */ defineComponent({
      ...__default__$1M,
      props: scrollbarProps,
      emits: scrollbarEmits,
      setup(__props, { expose, emit: emit2 }) {
        const props = __props;
        const ns2 = useNamespace("scrollbar");
        let stopResizeObserver = void 0;
        let stopResizeListener = void 0;
        const scrollbar$ = ref();
        const wrap$ = ref();
        const resize$ = ref();
        const sizeWidth = ref("0");
        const sizeHeight = ref("0");
        const barRef = ref();
        const ratioY = ref(1);
        const ratioX = ref(1);
        const style2 = computed(() => {
          const style22 = {};
          if (props.height)
            style22.height = addUnit(props.height);
          if (props.maxHeight)
            style22.maxHeight = addUnit(props.maxHeight);
          return [props.wrapStyle, style22];
        });
        const handleScroll2 = () => {
          var _a2;
          if (wrap$.value) {
            (_a2 = barRef.value) == null ? void 0 : _a2.handleScroll(wrap$.value);
            emit2("scroll", {
              scrollTop: wrap$.value.scrollTop,
              scrollLeft: wrap$.value.scrollLeft
            });
          }
        };
        function scrollTo(arg1, arg2) {
          if (isObject$7(arg1)) {
            wrap$.value.scrollTo(arg1);
          } else if (isNumber$1(arg1) && isNumber$1(arg2)) {
            wrap$.value.scrollTo(arg1, arg2);
          }
        }
        const setScrollTop = (value) => {
          if (!isNumber$1(value)) {
            return;
          }
          wrap$.value.scrollTop = value;
        };
        const setScrollLeft = (value) => {
          if (!isNumber$1(value)) {
            return;
          }
          wrap$.value.scrollLeft = value;
        };
        const update = () => {
          if (!wrap$.value)
            return;
          const offsetHeight = wrap$.value.offsetHeight - GAP;
          const offsetWidth = wrap$.value.offsetWidth - GAP;
          const originalHeight = offsetHeight ** 2 / wrap$.value.scrollHeight;
          const originalWidth = offsetWidth ** 2 / wrap$.value.scrollWidth;
          const height = Math.max(originalHeight, props.minSize);
          const width = Math.max(originalWidth, props.minSize);
          ratioY.value = originalHeight / (offsetHeight - originalHeight) / (height / (offsetHeight - height));
          ratioX.value = originalWidth / (offsetWidth - originalWidth) / (width / (offsetWidth - width));
          sizeHeight.value = height + GAP < offsetHeight ? `${height}px` : "";
          sizeWidth.value = width + GAP < offsetWidth ? `${width}px` : "";
        };
        watch(() => props.noresize, (noresize) => {
          if (noresize) {
            stopResizeObserver == null ? void 0 : stopResizeObserver();
            stopResizeListener == null ? void 0 : stopResizeListener();
          } else {
            ({ stop: stopResizeObserver } = useResizeObserver(resize$, update));
            stopResizeListener = useEventListener("resize", update);
          }
        }, { immediate: true });
        watch(() => [props.maxHeight, props.height], () => {
          if (!props.native)
            nextTick$1(() => {
              var _a2;
              update();
              if (wrap$.value) {
                (_a2 = barRef.value) == null ? void 0 : _a2.handleScroll(wrap$.value);
              }
            });
        });
        provide(scrollbarContextKey, reactive({
          scrollbarElement: scrollbar$,
          wrapElement: wrap$
        }));
        onMounted(() => {
          if (!props.native)
            nextTick$1(() => {
              update();
            });
        });
        onUpdated(() => update());
        expose({
          wrap$,
          update,
          scrollTo,
          setScrollTop,
          setScrollLeft,
          handleScroll: handleScroll2
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            ref_key: "scrollbar$",
            ref: scrollbar$,
            class: normalizeClass(unref(ns2).b())
          }, [
            createBaseVNode("div", {
              ref_key: "wrap$",
              ref: wrap$,
              class: normalizeClass([
                _ctx.wrapClass,
                unref(ns2).e("wrap"),
                { [unref(ns2).em("wrap", "hidden-default")]: !_ctx.native }
              ]),
              style: normalizeStyle(unref(style2)),
              onScroll: handleScroll2
            }, [
              (openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {
                ref_key: "resize$",
                ref: resize$,
                class: normalizeClass([unref(ns2).e("view"), _ctx.viewClass]),
                style: normalizeStyle(_ctx.viewStyle)
              }, {
                default: withCtx(() => [
                  renderSlot(_ctx.$slots, "default")
                ]),
                _: 3
              }, 8, ["class", "style"]))
            ], 38),
            !_ctx.native ? (openBlock(), createBlock(Bar, {
              key: 0,
              ref_key: "barRef",
              ref: barRef,
              height: sizeHeight.value,
              width: sizeWidth.value,
              always: _ctx.always,
              "ratio-x": ratioX.value,
              "ratio-y": ratioY.value
            }, null, 8, ["height", "width", "always", "ratio-x", "ratio-y"])) : createCommentVNode("v-if", true)
          ], 2);
        };
      }
    });
    var Scrollbar = /* @__PURE__ */ _export_sfc$1(_sfc_main$2A, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/scrollbar/src/scrollbar.vue"]]);
    const ElScrollbar = withInstall(Scrollbar);
    const Effect = {
      LIGHT: "light",
      DARK: "dark"
    };
    const usePopperProps = buildProps({
      role: {
        type: String,
        default: "tooltip"
      }
    });
    const __default__$1L = {
      name: "ElPopperRoot",
      inheritAttrs: false
    };
    const _sfc_main$2z = /* @__PURE__ */ defineComponent({
      ...__default__$1L,
      props: usePopperProps,
      setup(__props, { expose }) {
        const props = __props;
        const triggerRef2 = ref();
        const popperInstanceRef = ref();
        const contentRef = ref();
        const referenceRef = ref();
        const role = computed(() => props.role);
        const popperProvides = {
          triggerRef: triggerRef2,
          popperInstanceRef,
          contentRef,
          referenceRef,
          role
        };
        expose(popperProvides);
        provide(POPPER_INJECTION_KEY, popperProvides);
        return (_ctx, _cache) => {
          return renderSlot(_ctx.$slots, "default");
        };
      }
    });
    var Popper = /* @__PURE__ */ _export_sfc$1(_sfc_main$2z, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/popper/src/popper.vue"]]);
    const usePopperArrowProps = buildProps({
      arrowOffset: {
        type: Number,
        default: 5
      }
    });
    const __default__$1K = {
      name: "ElPopperArrow",
      inheritAttrs: false
    };
    const _sfc_main$2y = /* @__PURE__ */ defineComponent({
      ...__default__$1K,
      props: usePopperArrowProps,
      setup(__props, { expose }) {
        const props = __props;
        const ns2 = useNamespace("popper");
        const { arrowOffset, arrowRef } = inject(POPPER_CONTENT_INJECTION_KEY, void 0);
        watch(() => props.arrowOffset, (val) => {
          arrowOffset.value = val;
        });
        onBeforeUnmount(() => {
          arrowRef.value = void 0;
        });
        expose({
          arrowRef
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("span", {
            ref_key: "arrowRef",
            ref: arrowRef,
            class: normalizeClass(unref(ns2).e("arrow")),
            "data-popper-arrow": ""
          }, null, 2);
        };
      }
    });
    var ElPopperArrow = /* @__PURE__ */ _export_sfc$1(_sfc_main$2y, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/popper/src/arrow.vue"]]);
    const NAME = "ElOnlyChild";
    const OnlyChild = defineComponent({
      name: NAME,
      setup(_2, {
        slots,
        attrs
      }) {
        var _a2;
        const forwardRefInjection = inject(FORWARD_REF_INJECTION_KEY);
        const forwardRefDirective = useForwardRefDirective((_a2 = forwardRefInjection == null ? void 0 : forwardRefInjection.setForwardRef) != null ? _a2 : NOOP);
        return () => {
          var _a22;
          const defaultSlot = (_a22 = slots.default) == null ? void 0 : _a22.call(slots, attrs);
          if (!defaultSlot)
            return null;
          if (defaultSlot.length > 1) {
            return null;
          }
          const firstLegitNode = findFirstLegitChild(defaultSlot);
          if (!firstLegitNode) {
            return null;
          }
          return withDirectives(cloneVNode(firstLegitNode, attrs), [[forwardRefDirective]]);
        };
      }
    });
    function findFirstLegitChild(node) {
      if (!node)
        return null;
      const children = node;
      for (const child of children) {
        if (isObject$7(child)) {
          switch (child.type) {
            case Comment:
              continue;
            case Text:
            case "svg":
              return wrapTextContent(child);
            case Fragment:
              return findFirstLegitChild(child.children);
            default:
              return child;
          }
        }
        return wrapTextContent(child);
      }
      return null;
    }
    function wrapTextContent(s2) {
      return createVNode("span", {
        "class": "el-only-child__content"
      }, [s2]);
    }
    const usePopperTriggerProps = buildProps({
      virtualRef: {
        type: definePropType(Object)
      },
      virtualTriggering: Boolean,
      onMouseenter: Function,
      onMouseleave: Function,
      onClick: Function,
      onKeydown: Function,
      onFocus: Function,
      onBlur: Function,
      onContextmenu: Function,
      id: String,
      open: Boolean
    });
    const __default__$1J = {
      name: "ElPopperTrigger",
      inheritAttrs: false
    };
    const _sfc_main$2x = /* @__PURE__ */ defineComponent({
      ...__default__$1J,
      props: usePopperTriggerProps,
      setup(__props, { expose }) {
        const props = __props;
        const { role, triggerRef: triggerRef2 } = inject(POPPER_INJECTION_KEY, void 0);
        useForwardRef(triggerRef2);
        const ariaControls = computed(() => {
          return ariaHaspopup.value ? props.id : void 0;
        });
        const ariaDescribedby = computed(() => {
          if (role && role.value === "tooltip") {
            return props.open && props.id ? props.id : void 0;
          }
          return void 0;
        });
        const ariaHaspopup = computed(() => {
          if (role && role.value !== "tooltip") {
            return role.value;
          }
          return void 0;
        });
        const ariaExpanded = computed(() => {
          return ariaHaspopup.value ? `${props.open}` : void 0;
        });
        let virtualTriggerAriaStopWatch = void 0;
        onMounted(() => {
          watch(() => props.virtualRef, (virtualEl) => {
            if (virtualEl) {
              triggerRef2.value = unrefElement(virtualEl);
            }
          }, {
            immediate: true
          });
          watch(() => triggerRef2.value, (el, prevEl) => {
            virtualTriggerAriaStopWatch == null ? void 0 : virtualTriggerAriaStopWatch();
            virtualTriggerAriaStopWatch = void 0;
            if (isElement$1(el)) {
              [
                "onMouseenter",
                "onMouseleave",
                "onClick",
                "onKeydown",
                "onFocus",
                "onBlur",
                "onContextmenu"
              ].forEach((eventName) => {
                var _a2;
                const handler = props[eventName];
                if (handler) {
                  el.addEventListener(eventName.slice(2).toLowerCase(), handler);
                  (_a2 = prevEl == null ? void 0 : prevEl.removeEventListener) == null ? void 0 : _a2.call(prevEl, eventName.slice(2).toLowerCase(), handler);
                }
              });
              virtualTriggerAriaStopWatch = watch([ariaControls, ariaDescribedby, ariaHaspopup, ariaExpanded], (watches) => {
                [
                  "aria-controls",
                  "aria-describedby",
                  "aria-haspopup",
                  "aria-expanded"
                ].forEach((key, idx) => {
                  isNil(watches[idx]) ? el.removeAttribute(key) : el.setAttribute(key, watches[idx]);
                });
              }, { immediate: true });
            }
            if (isElement$1(prevEl)) {
              [
                "aria-controls",
                "aria-describedby",
                "aria-haspopup",
                "aria-expanded"
              ].forEach((key) => prevEl.removeAttribute(key));
            }
          }, {
            immediate: true
          });
        });
        onBeforeUnmount(() => {
          virtualTriggerAriaStopWatch == null ? void 0 : virtualTriggerAriaStopWatch();
          virtualTriggerAriaStopWatch = void 0;
        });
        expose({
          triggerRef: triggerRef2
        });
        return (_ctx, _cache) => {
          return !_ctx.virtualTriggering ? (openBlock(), createBlock(unref(OnlyChild), mergeProps({ key: 0 }, _ctx.$attrs, {
            "aria-controls": unref(ariaControls),
            "aria-describedby": unref(ariaDescribedby),
            "aria-expanded": unref(ariaExpanded),
            "aria-haspopup": unref(ariaHaspopup)
          }), {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          }, 16, ["aria-controls", "aria-describedby", "aria-expanded", "aria-haspopup"])) : createCommentVNode("v-if", true);
        };
      }
    });
    var ElPopperTrigger = /* @__PURE__ */ _export_sfc$1(_sfc_main$2x, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/popper/src/trigger.vue"]]);
    var E$1 = "top", R = "bottom", W = "right", P$1 = "left", me = "auto", G = [E$1, R, W, P$1], U$1 = "start", J = "end", Xe = "clippingParents", je = "viewport", K = "popper", Ye = "reference", De = G.reduce(function(t, e2) {
      return t.concat([e2 + "-" + U$1, e2 + "-" + J]);
    }, []), Ee = [].concat(G, [me]).reduce(function(t, e2) {
      return t.concat([e2, e2 + "-" + U$1, e2 + "-" + J]);
    }, []), Ge = "beforeRead", Je = "read", Ke = "afterRead", Qe = "beforeMain", Ze = "main", et = "afterMain", tt = "beforeWrite", nt = "write", rt = "afterWrite", ot = [Ge, Je, Ke, Qe, Ze, et, tt, nt, rt];
    function C(t) {
      return t ? (t.nodeName || "").toLowerCase() : null;
    }
    function H(t) {
      if (t == null)
        return window;
      if (t.toString() !== "[object Window]") {
        var e2 = t.ownerDocument;
        return e2 && e2.defaultView || window;
      }
      return t;
    }
    function Q(t) {
      var e2 = H(t).Element;
      return t instanceof e2 || t instanceof Element;
    }
    function B(t) {
      var e2 = H(t).HTMLElement;
      return t instanceof e2 || t instanceof HTMLElement;
    }
    function Pe(t) {
      if (typeof ShadowRoot == "undefined")
        return false;
      var e2 = H(t).ShadowRoot;
      return t instanceof e2 || t instanceof ShadowRoot;
    }
    function Mt(t) {
      var e2 = t.state;
      Object.keys(e2.elements).forEach(function(n2) {
        var r = e2.styles[n2] || {}, o2 = e2.attributes[n2] || {}, i2 = e2.elements[n2];
        !B(i2) || !C(i2) || (Object.assign(i2.style, r), Object.keys(o2).forEach(function(a2) {
          var s2 = o2[a2];
          s2 === false ? i2.removeAttribute(a2) : i2.setAttribute(a2, s2 === true ? "" : s2);
        }));
      });
    }
    function Rt(t) {
      var e2 = t.state, n2 = { popper: { position: e2.options.strategy, left: "0", top: "0", margin: "0" }, arrow: { position: "absolute" }, reference: {} };
      return Object.assign(e2.elements.popper.style, n2.popper), e2.styles = n2, e2.elements.arrow && Object.assign(e2.elements.arrow.style, n2.arrow), function() {
        Object.keys(e2.elements).forEach(function(r) {
          var o2 = e2.elements[r], i2 = e2.attributes[r] || {}, a2 = Object.keys(e2.styles.hasOwnProperty(r) ? e2.styles[r] : n2[r]), s2 = a2.reduce(function(f2, c2) {
            return f2[c2] = "", f2;
          }, {});
          !B(o2) || !C(o2) || (Object.assign(o2.style, s2), Object.keys(i2).forEach(function(f2) {
            o2.removeAttribute(f2);
          }));
        });
      };
    }
    var Ae = { name: "applyStyles", enabled: true, phase: "write", fn: Mt, effect: Rt, requires: ["computeStyles"] };
    function q(t) {
      return t.split("-")[0];
    }
    var X$1 = Math.max, ve = Math.min, Z = Math.round;
    function ee(t, e2) {
      e2 === void 0 && (e2 = false);
      var n2 = t.getBoundingClientRect(), r = 1, o2 = 1;
      if (B(t) && e2) {
        var i2 = t.offsetHeight, a2 = t.offsetWidth;
        a2 > 0 && (r = Z(n2.width) / a2 || 1), i2 > 0 && (o2 = Z(n2.height) / i2 || 1);
      }
      return { width: n2.width / r, height: n2.height / o2, top: n2.top / o2, right: n2.right / r, bottom: n2.bottom / o2, left: n2.left / r, x: n2.left / r, y: n2.top / o2 };
    }
    function ke(t) {
      var e2 = ee(t), n2 = t.offsetWidth, r = t.offsetHeight;
      return Math.abs(e2.width - n2) <= 1 && (n2 = e2.width), Math.abs(e2.height - r) <= 1 && (r = e2.height), { x: t.offsetLeft, y: t.offsetTop, width: n2, height: r };
    }
    function it(t, e2) {
      var n2 = e2.getRootNode && e2.getRootNode();
      if (t.contains(e2))
        return true;
      if (n2 && Pe(n2)) {
        var r = e2;
        do {
          if (r && t.isSameNode(r))
            return true;
          r = r.parentNode || r.host;
        } while (r);
      }
      return false;
    }
    function N$1(t) {
      return H(t).getComputedStyle(t);
    }
    function Wt(t) {
      return ["table", "td", "th"].indexOf(C(t)) >= 0;
    }
    function I$1(t) {
      return ((Q(t) ? t.ownerDocument : t.document) || window.document).documentElement;
    }
    function ge(t) {
      return C(t) === "html" ? t : t.assignedSlot || t.parentNode || (Pe(t) ? t.host : null) || I$1(t);
    }
    function at(t) {
      return !B(t) || N$1(t).position === "fixed" ? null : t.offsetParent;
    }
    function Bt(t) {
      var e2 = navigator.userAgent.toLowerCase().indexOf("firefox") !== -1, n2 = navigator.userAgent.indexOf("Trident") !== -1;
      if (n2 && B(t)) {
        var r = N$1(t);
        if (r.position === "fixed")
          return null;
      }
      var o2 = ge(t);
      for (Pe(o2) && (o2 = o2.host); B(o2) && ["html", "body"].indexOf(C(o2)) < 0; ) {
        var i2 = N$1(o2);
        if (i2.transform !== "none" || i2.perspective !== "none" || i2.contain === "paint" || ["transform", "perspective"].indexOf(i2.willChange) !== -1 || e2 && i2.willChange === "filter" || e2 && i2.filter && i2.filter !== "none")
          return o2;
        o2 = o2.parentNode;
      }
      return null;
    }
    function se(t) {
      for (var e2 = H(t), n2 = at(t); n2 && Wt(n2) && N$1(n2).position === "static"; )
        n2 = at(n2);
      return n2 && (C(n2) === "html" || C(n2) === "body" && N$1(n2).position === "static") ? e2 : n2 || Bt(t) || e2;
    }
    function Le(t) {
      return ["top", "bottom"].indexOf(t) >= 0 ? "x" : "y";
    }
    function fe(t, e2, n2) {
      return X$1(t, ve(e2, n2));
    }
    function St(t, e2, n2) {
      var r = fe(t, e2, n2);
      return r > n2 ? n2 : r;
    }
    function st() {
      return { top: 0, right: 0, bottom: 0, left: 0 };
    }
    function ft(t) {
      return Object.assign({}, st(), t);
    }
    function ct(t, e2) {
      return e2.reduce(function(n2, r) {
        return n2[r] = t, n2;
      }, {});
    }
    var Tt = function(t, e2) {
      return t = typeof t == "function" ? t(Object.assign({}, e2.rects, { placement: e2.placement })) : t, ft(typeof t != "number" ? t : ct(t, G));
    };
    function Ht(t) {
      var e2, n2 = t.state, r = t.name, o2 = t.options, i2 = n2.elements.arrow, a2 = n2.modifiersData.popperOffsets, s2 = q(n2.placement), f2 = Le(s2), c2 = [P$1, W].indexOf(s2) >= 0, u2 = c2 ? "height" : "width";
      if (!(!i2 || !a2)) {
        var m2 = Tt(o2.padding, n2), v2 = ke(i2), l2 = f2 === "y" ? E$1 : P$1, h2 = f2 === "y" ? R : W, p2 = n2.rects.reference[u2] + n2.rects.reference[f2] - a2[f2] - n2.rects.popper[u2], g2 = a2[f2] - n2.rects.reference[f2], x2 = se(i2), y2 = x2 ? f2 === "y" ? x2.clientHeight || 0 : x2.clientWidth || 0 : 0, $ = p2 / 2 - g2 / 2, d2 = m2[l2], b2 = y2 - v2[u2] - m2[h2], w2 = y2 / 2 - v2[u2] / 2 + $, O2 = fe(d2, w2, b2), j2 = f2;
        n2.modifiersData[r] = (e2 = {}, e2[j2] = O2, e2.centerOffset = O2 - w2, e2);
      }
    }
    function Ct(t) {
      var e2 = t.state, n2 = t.options, r = n2.element, o2 = r === void 0 ? "[data-popper-arrow]" : r;
      o2 != null && (typeof o2 == "string" && (o2 = e2.elements.popper.querySelector(o2), !o2) || !it(e2.elements.popper, o2) || (e2.elements.arrow = o2));
    }
    var pt = { name: "arrow", enabled: true, phase: "main", fn: Ht, effect: Ct, requires: ["popperOffsets"], requiresIfExists: ["preventOverflow"] };
    function te(t) {
      return t.split("-")[1];
    }
    var qt = { top: "auto", right: "auto", bottom: "auto", left: "auto" };
    function Vt(t) {
      var e2 = t.x, n2 = t.y, r = window, o2 = r.devicePixelRatio || 1;
      return { x: Z(e2 * o2) / o2 || 0, y: Z(n2 * o2) / o2 || 0 };
    }
    function ut(t) {
      var e2, n2 = t.popper, r = t.popperRect, o2 = t.placement, i2 = t.variation, a2 = t.offsets, s2 = t.position, f2 = t.gpuAcceleration, c2 = t.adaptive, u2 = t.roundOffsets, m2 = t.isFixed, v2 = a2.x, l2 = v2 === void 0 ? 0 : v2, h2 = a2.y, p2 = h2 === void 0 ? 0 : h2, g2 = typeof u2 == "function" ? u2({ x: l2, y: p2 }) : { x: l2, y: p2 };
      l2 = g2.x, p2 = g2.y;
      var x2 = a2.hasOwnProperty("x"), y2 = a2.hasOwnProperty("y"), $ = P$1, d2 = E$1, b2 = window;
      if (c2) {
        var w2 = se(n2), O2 = "clientHeight", j2 = "clientWidth";
        if (w2 === H(n2) && (w2 = I$1(n2), N$1(w2).position !== "static" && s2 === "absolute" && (O2 = "scrollHeight", j2 = "scrollWidth")), w2 = w2, o2 === E$1 || (o2 === P$1 || o2 === W) && i2 === J) {
          d2 = R;
          var A2 = m2 && w2 === b2 && b2.visualViewport ? b2.visualViewport.height : w2[O2];
          p2 -= A2 - r.height, p2 *= f2 ? 1 : -1;
        }
        if (o2 === P$1 || (o2 === E$1 || o2 === R) && i2 === J) {
          $ = W;
          var k = m2 && w2 === b2 && b2.visualViewport ? b2.visualViewport.width : w2[j2];
          l2 -= k - r.width, l2 *= f2 ? 1 : -1;
        }
      }
      var D2 = Object.assign({ position: s2 }, c2 && qt), S2 = u2 === true ? Vt({ x: l2, y: p2 }) : { x: l2, y: p2 };
      if (l2 = S2.x, p2 = S2.y, f2) {
        var L;
        return Object.assign({}, D2, (L = {}, L[d2] = y2 ? "0" : "", L[$] = x2 ? "0" : "", L.transform = (b2.devicePixelRatio || 1) <= 1 ? "translate(" + l2 + "px, " + p2 + "px)" : "translate3d(" + l2 + "px, " + p2 + "px, 0)", L));
      }
      return Object.assign({}, D2, (e2 = {}, e2[d2] = y2 ? p2 + "px" : "", e2[$] = x2 ? l2 + "px" : "", e2.transform = "", e2));
    }
    function Nt(t) {
      var e2 = t.state, n2 = t.options, r = n2.gpuAcceleration, o2 = r === void 0 ? true : r, i2 = n2.adaptive, a2 = i2 === void 0 ? true : i2, s2 = n2.roundOffsets, f2 = s2 === void 0 ? true : s2, c2 = { placement: q(e2.placement), variation: te(e2.placement), popper: e2.elements.popper, popperRect: e2.rects.popper, gpuAcceleration: o2, isFixed: e2.options.strategy === "fixed" };
      e2.modifiersData.popperOffsets != null && (e2.styles.popper = Object.assign({}, e2.styles.popper, ut(Object.assign({}, c2, { offsets: e2.modifiersData.popperOffsets, position: e2.options.strategy, adaptive: a2, roundOffsets: f2 })))), e2.modifiersData.arrow != null && (e2.styles.arrow = Object.assign({}, e2.styles.arrow, ut(Object.assign({}, c2, { offsets: e2.modifiersData.arrow, position: "absolute", adaptive: false, roundOffsets: f2 })))), e2.attributes.popper = Object.assign({}, e2.attributes.popper, { "data-popper-placement": e2.placement });
    }
    var Me = { name: "computeStyles", enabled: true, phase: "beforeWrite", fn: Nt, data: {} }, ye = { passive: true };
    function It(t) {
      var e2 = t.state, n2 = t.instance, r = t.options, o2 = r.scroll, i2 = o2 === void 0 ? true : o2, a2 = r.resize, s2 = a2 === void 0 ? true : a2, f2 = H(e2.elements.popper), c2 = [].concat(e2.scrollParents.reference, e2.scrollParents.popper);
      return i2 && c2.forEach(function(u2) {
        u2.addEventListener("scroll", n2.update, ye);
      }), s2 && f2.addEventListener("resize", n2.update, ye), function() {
        i2 && c2.forEach(function(u2) {
          u2.removeEventListener("scroll", n2.update, ye);
        }), s2 && f2.removeEventListener("resize", n2.update, ye);
      };
    }
    var Re = { name: "eventListeners", enabled: true, phase: "write", fn: function() {
    }, effect: It, data: {} }, _t = { left: "right", right: "left", bottom: "top", top: "bottom" };
    function be(t) {
      return t.replace(/left|right|bottom|top/g, function(e2) {
        return _t[e2];
      });
    }
    var zt = { start: "end", end: "start" };
    function lt(t) {
      return t.replace(/start|end/g, function(e2) {
        return zt[e2];
      });
    }
    function We(t) {
      var e2 = H(t), n2 = e2.pageXOffset, r = e2.pageYOffset;
      return { scrollLeft: n2, scrollTop: r };
    }
    function Be(t) {
      return ee(I$1(t)).left + We(t).scrollLeft;
    }
    function Ft(t) {
      var e2 = H(t), n2 = I$1(t), r = e2.visualViewport, o2 = n2.clientWidth, i2 = n2.clientHeight, a2 = 0, s2 = 0;
      return r && (o2 = r.width, i2 = r.height, /^((?!chrome|android).)*safari/i.test(navigator.userAgent) || (a2 = r.offsetLeft, s2 = r.offsetTop)), { width: o2, height: i2, x: a2 + Be(t), y: s2 };
    }
    function Ut(t) {
      var e2, n2 = I$1(t), r = We(t), o2 = (e2 = t.ownerDocument) == null ? void 0 : e2.body, i2 = X$1(n2.scrollWidth, n2.clientWidth, o2 ? o2.scrollWidth : 0, o2 ? o2.clientWidth : 0), a2 = X$1(n2.scrollHeight, n2.clientHeight, o2 ? o2.scrollHeight : 0, o2 ? o2.clientHeight : 0), s2 = -r.scrollLeft + Be(t), f2 = -r.scrollTop;
      return N$1(o2 || n2).direction === "rtl" && (s2 += X$1(n2.clientWidth, o2 ? o2.clientWidth : 0) - i2), { width: i2, height: a2, x: s2, y: f2 };
    }
    function Se(t) {
      var e2 = N$1(t), n2 = e2.overflow, r = e2.overflowX, o2 = e2.overflowY;
      return /auto|scroll|overlay|hidden/.test(n2 + o2 + r);
    }
    function dt(t) {
      return ["html", "body", "#document"].indexOf(C(t)) >= 0 ? t.ownerDocument.body : B(t) && Se(t) ? t : dt(ge(t));
    }
    function ce(t, e2) {
      var n2;
      e2 === void 0 && (e2 = []);
      var r = dt(t), o2 = r === ((n2 = t.ownerDocument) == null ? void 0 : n2.body), i2 = H(r), a2 = o2 ? [i2].concat(i2.visualViewport || [], Se(r) ? r : []) : r, s2 = e2.concat(a2);
      return o2 ? s2 : s2.concat(ce(ge(a2)));
    }
    function Te(t) {
      return Object.assign({}, t, { left: t.x, top: t.y, right: t.x + t.width, bottom: t.y + t.height });
    }
    function Xt(t) {
      var e2 = ee(t);
      return e2.top = e2.top + t.clientTop, e2.left = e2.left + t.clientLeft, e2.bottom = e2.top + t.clientHeight, e2.right = e2.left + t.clientWidth, e2.width = t.clientWidth, e2.height = t.clientHeight, e2.x = e2.left, e2.y = e2.top, e2;
    }
    function ht(t, e2) {
      return e2 === je ? Te(Ft(t)) : Q(e2) ? Xt(e2) : Te(Ut(I$1(t)));
    }
    function Yt(t) {
      var e2 = ce(ge(t)), n2 = ["absolute", "fixed"].indexOf(N$1(t).position) >= 0, r = n2 && B(t) ? se(t) : t;
      return Q(r) ? e2.filter(function(o2) {
        return Q(o2) && it(o2, r) && C(o2) !== "body";
      }) : [];
    }
    function Gt(t, e2, n2) {
      var r = e2 === "clippingParents" ? Yt(t) : [].concat(e2), o2 = [].concat(r, [n2]), i2 = o2[0], a2 = o2.reduce(function(s2, f2) {
        var c2 = ht(t, f2);
        return s2.top = X$1(c2.top, s2.top), s2.right = ve(c2.right, s2.right), s2.bottom = ve(c2.bottom, s2.bottom), s2.left = X$1(c2.left, s2.left), s2;
      }, ht(t, i2));
      return a2.width = a2.right - a2.left, a2.height = a2.bottom - a2.top, a2.x = a2.left, a2.y = a2.top, a2;
    }
    function mt(t) {
      var e2 = t.reference, n2 = t.element, r = t.placement, o2 = r ? q(r) : null, i2 = r ? te(r) : null, a2 = e2.x + e2.width / 2 - n2.width / 2, s2 = e2.y + e2.height / 2 - n2.height / 2, f2;
      switch (o2) {
        case E$1:
          f2 = { x: a2, y: e2.y - n2.height };
          break;
        case R:
          f2 = { x: a2, y: e2.y + e2.height };
          break;
        case W:
          f2 = { x: e2.x + e2.width, y: s2 };
          break;
        case P$1:
          f2 = { x: e2.x - n2.width, y: s2 };
          break;
        default:
          f2 = { x: e2.x, y: e2.y };
      }
      var c2 = o2 ? Le(o2) : null;
      if (c2 != null) {
        var u2 = c2 === "y" ? "height" : "width";
        switch (i2) {
          case U$1:
            f2[c2] = f2[c2] - (e2[u2] / 2 - n2[u2] / 2);
            break;
          case J:
            f2[c2] = f2[c2] + (e2[u2] / 2 - n2[u2] / 2);
            break;
        }
      }
      return f2;
    }
    function ne(t, e2) {
      e2 === void 0 && (e2 = {});
      var n2 = e2, r = n2.placement, o2 = r === void 0 ? t.placement : r, i2 = n2.boundary, a2 = i2 === void 0 ? Xe : i2, s2 = n2.rootBoundary, f2 = s2 === void 0 ? je : s2, c2 = n2.elementContext, u2 = c2 === void 0 ? K : c2, m2 = n2.altBoundary, v2 = m2 === void 0 ? false : m2, l2 = n2.padding, h2 = l2 === void 0 ? 0 : l2, p2 = ft(typeof h2 != "number" ? h2 : ct(h2, G)), g2 = u2 === K ? Ye : K, x2 = t.rects.popper, y2 = t.elements[v2 ? g2 : u2], $ = Gt(Q(y2) ? y2 : y2.contextElement || I$1(t.elements.popper), a2, f2), d2 = ee(t.elements.reference), b2 = mt({ reference: d2, element: x2, strategy: "absolute", placement: o2 }), w2 = Te(Object.assign({}, x2, b2)), O2 = u2 === K ? w2 : d2, j2 = { top: $.top - O2.top + p2.top, bottom: O2.bottom - $.bottom + p2.bottom, left: $.left - O2.left + p2.left, right: O2.right - $.right + p2.right }, A2 = t.modifiersData.offset;
      if (u2 === K && A2) {
        var k = A2[o2];
        Object.keys(j2).forEach(function(D2) {
          var S2 = [W, R].indexOf(D2) >= 0 ? 1 : -1, L = [E$1, R].indexOf(D2) >= 0 ? "y" : "x";
          j2[D2] += k[L] * S2;
        });
      }
      return j2;
    }
    function Jt(t, e2) {
      e2 === void 0 && (e2 = {});
      var n2 = e2, r = n2.placement, o2 = n2.boundary, i2 = n2.rootBoundary, a2 = n2.padding, s2 = n2.flipVariations, f2 = n2.allowedAutoPlacements, c2 = f2 === void 0 ? Ee : f2, u2 = te(r), m2 = u2 ? s2 ? De : De.filter(function(h2) {
        return te(h2) === u2;
      }) : G, v2 = m2.filter(function(h2) {
        return c2.indexOf(h2) >= 0;
      });
      v2.length === 0 && (v2 = m2);
      var l2 = v2.reduce(function(h2, p2) {
        return h2[p2] = ne(t, { placement: p2, boundary: o2, rootBoundary: i2, padding: a2 })[q(p2)], h2;
      }, {});
      return Object.keys(l2).sort(function(h2, p2) {
        return l2[h2] - l2[p2];
      });
    }
    function Kt(t) {
      if (q(t) === me)
        return [];
      var e2 = be(t);
      return [lt(t), e2, lt(e2)];
    }
    function Qt(t) {
      var e2 = t.state, n2 = t.options, r = t.name;
      if (!e2.modifiersData[r]._skip) {
        for (var o2 = n2.mainAxis, i2 = o2 === void 0 ? true : o2, a2 = n2.altAxis, s2 = a2 === void 0 ? true : a2, f2 = n2.fallbackPlacements, c2 = n2.padding, u2 = n2.boundary, m2 = n2.rootBoundary, v2 = n2.altBoundary, l2 = n2.flipVariations, h2 = l2 === void 0 ? true : l2, p2 = n2.allowedAutoPlacements, g2 = e2.options.placement, x2 = q(g2), y2 = x2 === g2, $ = f2 || (y2 || !h2 ? [be(g2)] : Kt(g2)), d2 = [g2].concat($).reduce(function(z, V) {
          return z.concat(q(V) === me ? Jt(e2, { placement: V, boundary: u2, rootBoundary: m2, padding: c2, flipVariations: h2, allowedAutoPlacements: p2 }) : V);
        }, []), b2 = e2.rects.reference, w2 = e2.rects.popper, O2 = /* @__PURE__ */ new Map(), j2 = true, A2 = d2[0], k = 0; k < d2.length; k++) {
          var D2 = d2[k], S2 = q(D2), L = te(D2) === U$1, re = [E$1, R].indexOf(S2) >= 0, oe = re ? "width" : "height", M2 = ne(e2, { placement: D2, boundary: u2, rootBoundary: m2, altBoundary: v2, padding: c2 }), T2 = re ? L ? W : P$1 : L ? R : E$1;
          b2[oe] > w2[oe] && (T2 = be(T2));
          var pe = be(T2), _2 = [];
          if (i2 && _2.push(M2[S2] <= 0), s2 && _2.push(M2[T2] <= 0, M2[pe] <= 0), _2.every(function(z) {
            return z;
          })) {
            A2 = D2, j2 = false;
            break;
          }
          O2.set(D2, _2);
        }
        if (j2)
          for (var ue = h2 ? 3 : 1, xe = function(z) {
            var V = d2.find(function(de) {
              var ae = O2.get(de);
              if (ae)
                return ae.slice(0, z).every(function(Y2) {
                  return Y2;
                });
            });
            if (V)
              return A2 = V, "break";
          }, ie = ue; ie > 0; ie--) {
            var le = xe(ie);
            if (le === "break")
              break;
          }
        e2.placement !== A2 && (e2.modifiersData[r]._skip = true, e2.placement = A2, e2.reset = true);
      }
    }
    var vt = { name: "flip", enabled: true, phase: "main", fn: Qt, requiresIfExists: ["offset"], data: { _skip: false } };
    function gt(t, e2, n2) {
      return n2 === void 0 && (n2 = { x: 0, y: 0 }), { top: t.top - e2.height - n2.y, right: t.right - e2.width + n2.x, bottom: t.bottom - e2.height + n2.y, left: t.left - e2.width - n2.x };
    }
    function yt(t) {
      return [E$1, W, R, P$1].some(function(e2) {
        return t[e2] >= 0;
      });
    }
    function Zt(t) {
      var e2 = t.state, n2 = t.name, r = e2.rects.reference, o2 = e2.rects.popper, i2 = e2.modifiersData.preventOverflow, a2 = ne(e2, { elementContext: "reference" }), s2 = ne(e2, { altBoundary: true }), f2 = gt(a2, r), c2 = gt(s2, o2, i2), u2 = yt(f2), m2 = yt(c2);
      e2.modifiersData[n2] = { referenceClippingOffsets: f2, popperEscapeOffsets: c2, isReferenceHidden: u2, hasPopperEscaped: m2 }, e2.attributes.popper = Object.assign({}, e2.attributes.popper, { "data-popper-reference-hidden": u2, "data-popper-escaped": m2 });
    }
    var bt = { name: "hide", enabled: true, phase: "main", requiresIfExists: ["preventOverflow"], fn: Zt };
    function en(t, e2, n2) {
      var r = q(t), o2 = [P$1, E$1].indexOf(r) >= 0 ? -1 : 1, i2 = typeof n2 == "function" ? n2(Object.assign({}, e2, { placement: t })) : n2, a2 = i2[0], s2 = i2[1];
      return a2 = a2 || 0, s2 = (s2 || 0) * o2, [P$1, W].indexOf(r) >= 0 ? { x: s2, y: a2 } : { x: a2, y: s2 };
    }
    function tn(t) {
      var e2 = t.state, n2 = t.options, r = t.name, o2 = n2.offset, i2 = o2 === void 0 ? [0, 0] : o2, a2 = Ee.reduce(function(u2, m2) {
        return u2[m2] = en(m2, e2.rects, i2), u2;
      }, {}), s2 = a2[e2.placement], f2 = s2.x, c2 = s2.y;
      e2.modifiersData.popperOffsets != null && (e2.modifiersData.popperOffsets.x += f2, e2.modifiersData.popperOffsets.y += c2), e2.modifiersData[r] = a2;
    }
    var wt = { name: "offset", enabled: true, phase: "main", requires: ["popperOffsets"], fn: tn };
    function nn(t) {
      var e2 = t.state, n2 = t.name;
      e2.modifiersData[n2] = mt({ reference: e2.rects.reference, element: e2.rects.popper, strategy: "absolute", placement: e2.placement });
    }
    var He = { name: "popperOffsets", enabled: true, phase: "read", fn: nn, data: {} };
    function rn(t) {
      return t === "x" ? "y" : "x";
    }
    function on$1(t) {
      var e2 = t.state, n2 = t.options, r = t.name, o2 = n2.mainAxis, i2 = o2 === void 0 ? true : o2, a2 = n2.altAxis, s2 = a2 === void 0 ? false : a2, f2 = n2.boundary, c2 = n2.rootBoundary, u2 = n2.altBoundary, m2 = n2.padding, v2 = n2.tether, l2 = v2 === void 0 ? true : v2, h2 = n2.tetherOffset, p2 = h2 === void 0 ? 0 : h2, g2 = ne(e2, { boundary: f2, rootBoundary: c2, padding: m2, altBoundary: u2 }), x2 = q(e2.placement), y2 = te(e2.placement), $ = !y2, d2 = Le(x2), b2 = rn(d2), w2 = e2.modifiersData.popperOffsets, O2 = e2.rects.reference, j2 = e2.rects.popper, A2 = typeof p2 == "function" ? p2(Object.assign({}, e2.rects, { placement: e2.placement })) : p2, k = typeof A2 == "number" ? { mainAxis: A2, altAxis: A2 } : Object.assign({ mainAxis: 0, altAxis: 0 }, A2), D2 = e2.modifiersData.offset ? e2.modifiersData.offset[e2.placement] : null, S2 = { x: 0, y: 0 };
      if (w2) {
        if (i2) {
          var L, re = d2 === "y" ? E$1 : P$1, oe = d2 === "y" ? R : W, M2 = d2 === "y" ? "height" : "width", T2 = w2[d2], pe = T2 + g2[re], _2 = T2 - g2[oe], ue = l2 ? -j2[M2] / 2 : 0, xe = y2 === U$1 ? O2[M2] : j2[M2], ie = y2 === U$1 ? -j2[M2] : -O2[M2], le = e2.elements.arrow, z = l2 && le ? ke(le) : { width: 0, height: 0 }, V = e2.modifiersData["arrow#persistent"] ? e2.modifiersData["arrow#persistent"].padding : st(), de = V[re], ae = V[oe], Y2 = fe(0, O2[M2], z[M2]), jt = $ ? O2[M2] / 2 - ue - Y2 - de - k.mainAxis : xe - Y2 - de - k.mainAxis, Dt = $ ? -O2[M2] / 2 + ue + Y2 + ae + k.mainAxis : ie + Y2 + ae + k.mainAxis, Oe = e2.elements.arrow && se(e2.elements.arrow), Et = Oe ? d2 === "y" ? Oe.clientTop || 0 : Oe.clientLeft || 0 : 0, Ce = (L = D2 == null ? void 0 : D2[d2]) != null ? L : 0, Pt = T2 + jt - Ce - Et, At = T2 + Dt - Ce, qe = fe(l2 ? ve(pe, Pt) : pe, T2, l2 ? X$1(_2, At) : _2);
          w2[d2] = qe, S2[d2] = qe - T2;
        }
        if (s2) {
          var Ve, kt = d2 === "x" ? E$1 : P$1, Lt = d2 === "x" ? R : W, F2 = w2[b2], he = b2 === "y" ? "height" : "width", Ne = F2 + g2[kt], Ie = F2 - g2[Lt], $e = [E$1, P$1].indexOf(x2) !== -1, _e = (Ve = D2 == null ? void 0 : D2[b2]) != null ? Ve : 0, ze = $e ? Ne : F2 - O2[he] - j2[he] - _e + k.altAxis, Fe = $e ? F2 + O2[he] + j2[he] - _e - k.altAxis : Ie, Ue = l2 && $e ? St(ze, F2, Fe) : fe(l2 ? ze : Ne, F2, l2 ? Fe : Ie);
          w2[b2] = Ue, S2[b2] = Ue - F2;
        }
        e2.modifiersData[r] = S2;
      }
    }
    var xt = { name: "preventOverflow", enabled: true, phase: "main", fn: on$1, requiresIfExists: ["offset"] };
    function an(t) {
      return { scrollLeft: t.scrollLeft, scrollTop: t.scrollTop };
    }
    function sn(t) {
      return t === H(t) || !B(t) ? We(t) : an(t);
    }
    function fn(t) {
      var e2 = t.getBoundingClientRect(), n2 = Z(e2.width) / t.offsetWidth || 1, r = Z(e2.height) / t.offsetHeight || 1;
      return n2 !== 1 || r !== 1;
    }
    function cn(t, e2, n2) {
      n2 === void 0 && (n2 = false);
      var r = B(e2), o2 = B(e2) && fn(e2), i2 = I$1(e2), a2 = ee(t, o2), s2 = { scrollLeft: 0, scrollTop: 0 }, f2 = { x: 0, y: 0 };
      return (r || !r && !n2) && ((C(e2) !== "body" || Se(i2)) && (s2 = sn(e2)), B(e2) ? (f2 = ee(e2, true), f2.x += e2.clientLeft, f2.y += e2.clientTop) : i2 && (f2.x = Be(i2))), { x: a2.left + s2.scrollLeft - f2.x, y: a2.top + s2.scrollTop - f2.y, width: a2.width, height: a2.height };
    }
    function pn(t) {
      var e2 = /* @__PURE__ */ new Map(), n2 = /* @__PURE__ */ new Set(), r = [];
      t.forEach(function(i2) {
        e2.set(i2.name, i2);
      });
      function o2(i2) {
        n2.add(i2.name);
        var a2 = [].concat(i2.requires || [], i2.requiresIfExists || []);
        a2.forEach(function(s2) {
          if (!n2.has(s2)) {
            var f2 = e2.get(s2);
            f2 && o2(f2);
          }
        }), r.push(i2);
      }
      return t.forEach(function(i2) {
        n2.has(i2.name) || o2(i2);
      }), r;
    }
    function un(t) {
      var e2 = pn(t);
      return ot.reduce(function(n2, r) {
        return n2.concat(e2.filter(function(o2) {
          return o2.phase === r;
        }));
      }, []);
    }
    function ln(t) {
      var e2;
      return function() {
        return e2 || (e2 = new Promise(function(n2) {
          Promise.resolve().then(function() {
            e2 = void 0, n2(t());
          });
        })), e2;
      };
    }
    function dn(t) {
      var e2 = t.reduce(function(n2, r) {
        var o2 = n2[r.name];
        return n2[r.name] = o2 ? Object.assign({}, o2, r, { options: Object.assign({}, o2.options, r.options), data: Object.assign({}, o2.data, r.data) }) : r, n2;
      }, {});
      return Object.keys(e2).map(function(n2) {
        return e2[n2];
      });
    }
    var Ot = { placement: "bottom", modifiers: [], strategy: "absolute" };
    function $t() {
      for (var t = arguments.length, e2 = new Array(t), n2 = 0; n2 < t; n2++)
        e2[n2] = arguments[n2];
      return !e2.some(function(r) {
        return !(r && typeof r.getBoundingClientRect == "function");
      });
    }
    function we(t) {
      t === void 0 && (t = {});
      var e2 = t, n2 = e2.defaultModifiers, r = n2 === void 0 ? [] : n2, o2 = e2.defaultOptions, i2 = o2 === void 0 ? Ot : o2;
      return function(a2, s2, f2) {
        f2 === void 0 && (f2 = i2);
        var c2 = { placement: "bottom", orderedModifiers: [], options: Object.assign({}, Ot, i2), modifiersData: {}, elements: { reference: a2, popper: s2 }, attributes: {}, styles: {} }, u2 = [], m2 = false, v2 = { state: c2, setOptions: function(p2) {
          var g2 = typeof p2 == "function" ? p2(c2.options) : p2;
          h2(), c2.options = Object.assign({}, i2, c2.options, g2), c2.scrollParents = { reference: Q(a2) ? ce(a2) : a2.contextElement ? ce(a2.contextElement) : [], popper: ce(s2) };
          var x2 = un(dn([].concat(r, c2.options.modifiers)));
          return c2.orderedModifiers = x2.filter(function(y2) {
            return y2.enabled;
          }), l2(), v2.update();
        }, forceUpdate: function() {
          if (!m2) {
            var p2 = c2.elements, g2 = p2.reference, x2 = p2.popper;
            if ($t(g2, x2)) {
              c2.rects = { reference: cn(g2, se(x2), c2.options.strategy === "fixed"), popper: ke(x2) }, c2.reset = false, c2.placement = c2.options.placement, c2.orderedModifiers.forEach(function(j2) {
                return c2.modifiersData[j2.name] = Object.assign({}, j2.data);
              });
              for (var y2 = 0; y2 < c2.orderedModifiers.length; y2++) {
                if (c2.reset === true) {
                  c2.reset = false, y2 = -1;
                  continue;
                }
                var $ = c2.orderedModifiers[y2], d2 = $.fn, b2 = $.options, w2 = b2 === void 0 ? {} : b2, O2 = $.name;
                typeof d2 == "function" && (c2 = d2({ state: c2, options: w2, name: O2, instance: v2 }) || c2);
              }
            }
          }
        }, update: ln(function() {
          return new Promise(function(p2) {
            v2.forceUpdate(), p2(c2);
          });
        }), destroy: function() {
          h2(), m2 = true;
        } };
        if (!$t(a2, s2))
          return v2;
        v2.setOptions(f2).then(function(p2) {
          !m2 && f2.onFirstUpdate && f2.onFirstUpdate(p2);
        });
        function l2() {
          c2.orderedModifiers.forEach(function(p2) {
            var g2 = p2.name, x2 = p2.options, y2 = x2 === void 0 ? {} : x2, $ = p2.effect;
            if (typeof $ == "function") {
              var d2 = $({ state: c2, name: g2, instance: v2, options: y2 }), b2 = function() {
              };
              u2.push(d2 || b2);
            }
          });
        }
        function h2() {
          u2.forEach(function(p2) {
            return p2();
          }), u2 = [];
        }
        return v2;
      };
    }
    we();
    var mn = [Re, He, Me, Ae];
    we({ defaultModifiers: mn });
    var gn = [Re, He, Me, Ae, wt, vt, xt, pt, bt], yn = we({ defaultModifiers: gn });
    const obtainAllFocusableElements = (element) => {
      const nodes = [];
      const walker = document.createTreeWalker(element, NodeFilter.SHOW_ELEMENT, {
        acceptNode: (node) => {
          const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
          if (node.disabled || node.hidden || isHiddenInput)
            return NodeFilter.FILTER_SKIP;
          return node.tabIndex >= 0 || node === document.activeElement ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
        }
      });
      while (walker.nextNode())
        nodes.push(walker.currentNode);
      return nodes;
    };
    const getVisibleElement = (elements, container) => {
      for (const element of elements) {
        if (!isHidden(element, container))
          return element;
      }
    };
    const isHidden = (element, container) => {
      if (getComputedStyle(element).visibility === "hidden")
        return true;
      while (element) {
        if (container && element === container)
          return false;
        if (getComputedStyle(element).display === "none")
          return true;
        element = element.parentElement;
      }
      return false;
    };
    const getEdges = (container) => {
      const focusable = obtainAllFocusableElements(container);
      const first = getVisibleElement(focusable, container);
      const last = getVisibleElement(focusable.reverse(), container);
      return [first, last];
    };
    const isSelectable = (element) => {
      return element instanceof HTMLInputElement && "select" in element;
    };
    const tryFocus = (element, shouldSelect) => {
      if (element && element.focus) {
        const prevFocusedElement = document.activeElement;
        element.focus({ preventScroll: true });
        if (element !== prevFocusedElement && isSelectable(element) && shouldSelect) {
          element.select();
        }
      }
    };
    function removeFromStack(list, item) {
      const copy2 = [...list];
      const idx = list.indexOf(item);
      if (idx !== -1) {
        copy2.splice(idx, 1);
      }
      return copy2;
    }
    const createFocusableStack = () => {
      let stack2 = [];
      const push = (layer) => {
        const currentLayer = stack2[0];
        if (currentLayer && layer !== currentLayer) {
          currentLayer.pause();
        }
        stack2 = removeFromStack(stack2, layer);
        stack2.unshift(layer);
      };
      const remove2 = (layer) => {
        var _a2, _b;
        stack2 = removeFromStack(stack2, layer);
        (_b = (_a2 = stack2[0]) == null ? void 0 : _a2.resume) == null ? void 0 : _b.call(_a2);
      };
      return {
        push,
        remove: remove2
      };
    };
    const focusFirstDescendant = (elements, shouldSelect = false) => {
      const prevFocusedElement = document.activeElement;
      for (const element of elements) {
        tryFocus(element, shouldSelect);
        if (document.activeElement !== prevFocusedElement)
          return;
      }
    };
    const focusableStack = createFocusableStack();
    const FOCUS_AFTER_TRAPPED = "focus-trap.focus-after-trapped";
    const FOCUS_AFTER_RELEASED = "focus-trap.focus-after-released";
    const FOCUS_AFTER_TRAPPED_OPTS = {
      cancelable: true,
      bubbles: false
    };
    const ON_TRAP_FOCUS_EVT = "focusAfterTrapped";
    const ON_RELEASE_FOCUS_EVT = "focusAfterReleased";
    const FOCUS_TRAP_INJECTION_KEY = Symbol("elFocusTrap");
    const _sfc_main$2w = defineComponent({
      name: "ElFocusTrap",
      inheritAttrs: false,
      props: {
        loop: Boolean,
        trapped: Boolean,
        focusTrapEl: Object,
        focusStartEl: {
          type: [Object, String],
          default: "first"
        }
      },
      emits: [
        ON_TRAP_FOCUS_EVT,
        ON_RELEASE_FOCUS_EVT,
        "focusin",
        "focusout",
        "focusout-prevented",
        "release-requested"
      ],
      setup(props, { emit: emit2 }) {
        const forwardRef = ref();
        let lastFocusBeforeTrapped;
        let lastFocusAfterTrapped;
        useEscapeKeydown((event) => {
          if (props.trapped && !focusLayer.paused) {
            emit2("release-requested", event);
          }
        });
        const focusLayer = {
          paused: false,
          pause() {
            this.paused = true;
          },
          resume() {
            this.paused = false;
          }
        };
        const onKeydown = (e2) => {
          if (!props.loop && !props.trapped)
            return;
          if (focusLayer.paused)
            return;
          const { key, altKey, ctrlKey, metaKey, currentTarget, shiftKey } = e2;
          const { loop } = props;
          const isTabbing = key === EVENT_CODE.tab && !altKey && !ctrlKey && !metaKey;
          const currentFocusingEl = document.activeElement;
          if (isTabbing && currentFocusingEl) {
            const container = currentTarget;
            const [first, last] = getEdges(container);
            const isTabbable = first && last;
            if (!isTabbable) {
              if (currentFocusingEl === container) {
                e2.preventDefault();
                emit2("focusout-prevented");
              }
            } else {
              if (!shiftKey && currentFocusingEl === last) {
                e2.preventDefault();
                if (loop)
                  tryFocus(first, true);
                emit2("focusout-prevented");
              } else if (shiftKey && [first, container].includes(currentFocusingEl)) {
                e2.preventDefault();
                if (loop)
                  tryFocus(last, true);
                emit2("focusout-prevented");
              }
            }
          }
        };
        provide(FOCUS_TRAP_INJECTION_KEY, {
          focusTrapRef: forwardRef,
          onKeydown
        });
        watch(() => props.focusTrapEl, (focusTrapEl) => {
          if (focusTrapEl) {
            forwardRef.value = focusTrapEl;
          }
        }, { immediate: true });
        watch([forwardRef], ([forwardRef2], [oldForwardRef]) => {
          if (forwardRef2) {
            forwardRef2.addEventListener("keydown", onKeydown);
            forwardRef2.addEventListener("focusin", onFocusIn);
            forwardRef2.addEventListener("focusout", onFocusOut);
          }
          if (oldForwardRef) {
            oldForwardRef.removeEventListener("keydown", onKeydown);
            oldForwardRef.removeEventListener("focusin", onFocusIn);
            oldForwardRef.removeEventListener("focusout", onFocusOut);
          }
        });
        const trapOnFocus = (e2) => {
          emit2(ON_TRAP_FOCUS_EVT, e2);
        };
        const releaseOnFocus = (e2) => emit2(ON_RELEASE_FOCUS_EVT, e2);
        const onFocusIn = (e2) => {
          const trapContainer = unref(forwardRef);
          if (!trapContainer)
            return;
          const target = e2.target;
          const isFocusedInTrap = target && trapContainer.contains(target);
          if (isFocusedInTrap)
            emit2("focusin", e2);
          if (focusLayer.paused)
            return;
          if (props.trapped) {
            if (isFocusedInTrap) {
              lastFocusAfterTrapped = target;
            } else {
              tryFocus(lastFocusAfterTrapped, true);
            }
          }
        };
        const onFocusOut = (e2) => {
          const trapContainer = unref(forwardRef);
          if (focusLayer.paused || !trapContainer)
            return;
          if (props.trapped) {
            const relatedTarget = e2.relatedTarget;
            if (!isNil(relatedTarget) && !trapContainer.contains(relatedTarget)) {
              setTimeout(() => {
                if (!focusLayer.paused && props.trapped) {
                  tryFocus(lastFocusAfterTrapped, true);
                }
              }, 0);
            }
          } else {
            const target = e2.target;
            const isFocusedInTrap = target && trapContainer.contains(target);
            if (!isFocusedInTrap)
              emit2("focusout", e2);
          }
        };
        async function startTrap() {
          await nextTick$1();
          const trapContainer = unref(forwardRef);
          if (trapContainer) {
            focusableStack.push(focusLayer);
            const prevFocusedElement = document.activeElement;
            lastFocusBeforeTrapped = prevFocusedElement;
            const isPrevFocusContained = trapContainer.contains(prevFocusedElement);
            if (!isPrevFocusContained) {
              const focusEvent = new Event(FOCUS_AFTER_TRAPPED, FOCUS_AFTER_TRAPPED_OPTS);
              trapContainer.addEventListener(FOCUS_AFTER_TRAPPED, trapOnFocus);
              trapContainer.dispatchEvent(focusEvent);
              if (!focusEvent.defaultPrevented) {
                nextTick$1(() => {
                  let focusStartEl = props.focusStartEl;
                  if (!isString$3(focusStartEl)) {
                    tryFocus(focusStartEl);
                    if (document.activeElement !== focusStartEl) {
                      focusStartEl = "first";
                    }
                  }
                  if (focusStartEl === "first") {
                    focusFirstDescendant(obtainAllFocusableElements(trapContainer), true);
                  }
                  if (document.activeElement === prevFocusedElement || focusStartEl === "container") {
                    tryFocus(trapContainer);
                  }
                });
              }
            }
          }
        }
        function stopTrap() {
          const trapContainer = unref(forwardRef);
          if (trapContainer) {
            trapContainer.removeEventListener(FOCUS_AFTER_TRAPPED, trapOnFocus);
            const releasedEvent = new Event(FOCUS_AFTER_RELEASED, FOCUS_AFTER_TRAPPED_OPTS);
            trapContainer.addEventListener(FOCUS_AFTER_RELEASED, releaseOnFocus);
            trapContainer.dispatchEvent(releasedEvent);
            if (!releasedEvent.defaultPrevented) {
              tryFocus(lastFocusBeforeTrapped != null ? lastFocusBeforeTrapped : document.body, true);
            }
            trapContainer.removeEventListener(FOCUS_AFTER_RELEASED, trapOnFocus);
            focusableStack.remove(focusLayer);
          }
        }
        onMounted(() => {
          if (props.trapped) {
            startTrap();
          }
          watch(() => props.trapped, (trapped) => {
            if (trapped) {
              startTrap();
            } else {
              stopTrap();
            }
          });
        });
        onBeforeUnmount(() => {
          if (props.trapped) {
            stopTrap();
          }
        });
        return {
          onKeydown
        };
      }
    });
    function _sfc_render$F(_ctx, _cache, $props, $setup, $data, $options) {
      return renderSlot(_ctx.$slots, "default", { handleKeydown: _ctx.onKeydown });
    }
    var ElFocusTrap = /* @__PURE__ */ _export_sfc$1(_sfc_main$2w, [["render", _sfc_render$F], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/focus-trap/src/focus-trap.vue"]]);
    const POSITIONING_STRATEGIES = ["fixed", "absolute"];
    const usePopperCoreConfigProps = buildProps({
      boundariesPadding: {
        type: Number,
        default: 0
      },
      fallbackPlacements: {
        type: definePropType(Array),
        default: () => []
      },
      gpuAcceleration: {
        type: Boolean,
        default: true
      },
      offset: {
        type: Number,
        default: 12
      },
      placement: {
        type: String,
        values: Ee,
        default: "bottom"
      },
      popperOptions: {
        type: definePropType(Object),
        default: () => ({})
      },
      strategy: {
        type: String,
        values: POSITIONING_STRATEGIES,
        default: "absolute"
      }
    });
    const usePopperContentProps = buildProps({
      ...usePopperCoreConfigProps,
      id: String,
      style: { type: definePropType([String, Array, Object]) },
      className: { type: definePropType([String, Array, Object]) },
      effect: {
        type: String,
        default: "dark"
      },
      visible: Boolean,
      enterable: {
        type: Boolean,
        default: true
      },
      pure: Boolean,
      focusOnShow: {
        type: Boolean,
        default: false
      },
      trapping: {
        type: Boolean,
        default: false
      },
      popperClass: {
        type: definePropType([String, Array, Object])
      },
      popperStyle: {
        type: definePropType([String, Array, Object])
      },
      referenceEl: {
        type: definePropType(Object)
      },
      triggerTargetEl: {
        type: definePropType(Object)
      },
      stopPopperMouseEvent: {
        type: Boolean,
        default: true
      },
      ariaLabel: {
        type: String,
        default: void 0
      },
      virtualTriggering: Boolean,
      zIndex: Number
    });
    const usePopperContentEmits = [
      "mouseenter",
      "mouseleave",
      "focus",
      "blur",
      "close"
    ];
    const buildPopperOptions = (props, arrowProps) => {
      const { placement, strategy, popperOptions: popperOptions2 } = props;
      const options = {
        placement,
        strategy,
        ...popperOptions2,
        modifiers: genModifiers(props)
      };
      attachArrow(options, arrowProps);
      deriveExtraModifiers(options, popperOptions2 == null ? void 0 : popperOptions2.modifiers);
      return options;
    };
    const unwrapMeasurableEl = ($el) => {
      if (!isClient)
        return;
      return unrefElement($el);
    };
    function genModifiers(options) {
      const { offset: offset2, gpuAcceleration, fallbackPlacements } = options;
      return [
        {
          name: "offset",
          options: {
            offset: [0, offset2 != null ? offset2 : 12]
          }
        },
        {
          name: "preventOverflow",
          options: {
            padding: {
              top: 2,
              bottom: 2,
              left: 5,
              right: 5
            }
          }
        },
        {
          name: "flip",
          options: {
            padding: 5,
            fallbackPlacements: fallbackPlacements != null ? fallbackPlacements : []
          }
        },
        {
          name: "computeStyles",
          options: {
            gpuAcceleration,
            adaptive: gpuAcceleration
          }
        }
      ];
    }
    function attachArrow(options, { arrowEl, arrowOffset }) {
      options.modifiers.push({
        name: "arrow",
        options: {
          element: arrowEl,
          padding: arrowOffset != null ? arrowOffset : 5
        }
      });
    }
    function deriveExtraModifiers(options, modifiers) {
      if (modifiers) {
        options.modifiers = [...options.modifiers, ...modifiers != null ? modifiers : []];
      }
    }
    const __default__$1I = {
      name: "ElPopperContent"
    };
    const _sfc_main$2v = /* @__PURE__ */ defineComponent({
      ...__default__$1I,
      props: usePopperContentProps,
      emits: usePopperContentEmits,
      setup(__props, { expose, emit: emit2 }) {
        const props = __props;
        const { popperInstanceRef, contentRef, triggerRef: triggerRef2, role } = inject(POPPER_INJECTION_KEY, void 0);
        const formItemContext = inject(formItemContextKey, void 0);
        const { nextZIndex } = useZIndex();
        const ns2 = useNamespace("popper");
        const popperContentRef = ref();
        const focusStartRef = ref("first");
        const arrowRef = ref();
        const arrowOffset = ref();
        provide(POPPER_CONTENT_INJECTION_KEY, {
          arrowRef,
          arrowOffset
        });
        if (formItemContext && (formItemContext.addInputId || formItemContext.removeInputId)) {
          provide(formItemContextKey, {
            ...formItemContext,
            addInputId: NOOP,
            removeInputId: NOOP
          });
        }
        const contentZIndex = ref(props.zIndex || nextZIndex());
        const trapped = ref(false);
        let triggerTargetAriaStopWatch = void 0;
        const computedReference = computed(() => unwrapMeasurableEl(props.referenceEl) || unref(triggerRef2));
        const contentStyle = computed(() => [{ zIndex: unref(contentZIndex) }, props.popperStyle]);
        const contentClass = computed(() => [
          ns2.b(),
          ns2.is("pure", props.pure),
          ns2.is(props.effect),
          props.popperClass
        ]);
        const ariaModal = computed(() => {
          return role && role.value === "dialog" ? "false" : void 0;
        });
        const createPopperInstance = ({ referenceEl, popperContentEl, arrowEl }) => {
          const options = buildPopperOptions(props, {
            arrowEl,
            arrowOffset: unref(arrowOffset)
          });
          return yn(referenceEl, popperContentEl, options);
        };
        const updatePopper = (shouldUpdateZIndex = true) => {
          var _a2;
          (_a2 = unref(popperInstanceRef)) == null ? void 0 : _a2.update();
          shouldUpdateZIndex && (contentZIndex.value = props.zIndex || nextZIndex());
        };
        const togglePopperAlive = () => {
          var _a2, _b;
          const monitorable = { name: "eventListeners", enabled: props.visible };
          (_b = (_a2 = unref(popperInstanceRef)) == null ? void 0 : _a2.setOptions) == null ? void 0 : _b.call(_a2, (options) => ({
            ...options,
            modifiers: [...options.modifiers || [], monitorable]
          }));
          updatePopper(false);
          if (props.visible && props.focusOnShow) {
            trapped.value = true;
          } else if (props.visible === false) {
            trapped.value = false;
          }
        };
        const onFocusAfterTrapped = () => {
          emit2("focus");
        };
        const onFocusAfterReleased = () => {
          focusStartRef.value = "first";
          emit2("blur");
        };
        const onFocusInTrap = (event) => {
          var _a2;
          if (props.visible && !trapped.value) {
            if (event.target) {
              focusStartRef.value = event.target;
            }
            trapped.value = true;
            if (event.relatedTarget) {
              (_a2 = event.relatedTarget) == null ? void 0 : _a2.focus();
            }
          }
        };
        const onFocusoutPrevented = () => {
          if (!props.trapping) {
            trapped.value = false;
          }
        };
        const onReleaseRequested = () => {
          trapped.value = false;
          emit2("close");
        };
        onMounted(() => {
          let updateHandle;
          watch(computedReference, (referenceEl) => {
            var _a2;
            updateHandle == null ? void 0 : updateHandle();
            const popperInstance = unref(popperInstanceRef);
            (_a2 = popperInstance == null ? void 0 : popperInstance.destroy) == null ? void 0 : _a2.call(popperInstance);
            if (referenceEl) {
              const popperContentEl = unref(popperContentRef);
              contentRef.value = popperContentEl;
              popperInstanceRef.value = createPopperInstance({
                referenceEl,
                popperContentEl,
                arrowEl: unref(arrowRef)
              });
              updateHandle = watch(() => referenceEl.getBoundingClientRect(), () => updatePopper(), {
                immediate: true
              });
            } else {
              popperInstanceRef.value = void 0;
            }
          }, {
            immediate: true
          });
          watch(() => props.triggerTargetEl, (triggerTargetEl, prevTriggerTargetEl) => {
            triggerTargetAriaStopWatch == null ? void 0 : triggerTargetAriaStopWatch();
            triggerTargetAriaStopWatch = void 0;
            const el = unref(triggerTargetEl || popperContentRef.value);
            const prevEl = unref(prevTriggerTargetEl || popperContentRef.value);
            if (isElement$1(el)) {
              const { ariaLabel, id: id2 } = toRefs(props);
              triggerTargetAriaStopWatch = watch([role, ariaLabel, ariaModal, id2], (watches) => {
                ["role", "aria-label", "aria-modal", "id"].forEach((key, idx) => {
                  isNil(watches[idx]) ? el.removeAttribute(key) : el.setAttribute(key, watches[idx]);
                });
              }, { immediate: true });
            }
            if (isElement$1(prevEl)) {
              ["role", "aria-label", "aria-modal", "id"].forEach((key) => {
                prevEl.removeAttribute(key);
              });
            }
          }, { immediate: true });
          watch(() => props.visible, togglePopperAlive, { immediate: true });
          watch(() => buildPopperOptions(props, {
            arrowEl: unref(arrowRef),
            arrowOffset: unref(arrowOffset)
          }), (option) => {
            var _a2;
            return (_a2 = popperInstanceRef.value) == null ? void 0 : _a2.setOptions(option);
          });
        });
        onBeforeUnmount(() => {
          triggerTargetAriaStopWatch == null ? void 0 : triggerTargetAriaStopWatch();
          triggerTargetAriaStopWatch = void 0;
        });
        expose({
          popperContentRef,
          popperInstanceRef,
          updatePopper,
          contentStyle
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            ref_key: "popperContentRef",
            ref: popperContentRef,
            style: normalizeStyle(unref(contentStyle)),
            class: normalizeClass(unref(contentClass)),
            tabindex: "-1",
            onMouseenter: _cache[0] || (_cache[0] = (e2) => _ctx.$emit("mouseenter", e2)),
            onMouseleave: _cache[1] || (_cache[1] = (e2) => _ctx.$emit("mouseleave", e2))
          }, [
            createVNode(unref(ElFocusTrap), {
              trapped: trapped.value,
              "trap-on-focus-in": true,
              "focus-trap-el": popperContentRef.value,
              "focus-start-el": focusStartRef.value,
              onFocusAfterTrapped,
              onFocusAfterReleased,
              onFocusin: onFocusInTrap,
              onFocusoutPrevented,
              onReleaseRequested
            }, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "default")
              ]),
              _: 3
            }, 8, ["trapped", "focus-trap-el", "focus-start-el"])
          ], 38);
        };
      }
    });
    var ElPopperContent = /* @__PURE__ */ _export_sfc$1(_sfc_main$2v, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/popper/src/content.vue"]]);
    const ElPopper = withInstall(Popper);
    const ns = useNamespace("tooltip");
    const useTooltipContentProps = buildProps({
      ...useDelayedToggleProps,
      ...usePopperContentProps,
      appendTo: {
        type: definePropType([String, Object]),
        default: POPPER_CONTAINER_SELECTOR
      },
      content: {
        type: String,
        default: ""
      },
      rawContent: {
        type: Boolean,
        default: false
      },
      persistent: Boolean,
      ariaLabel: String,
      visible: {
        type: definePropType(Boolean),
        default: null
      },
      transition: {
        type: String,
        default: `${ns.namespace.value}-fade-in-linear`
      },
      teleported: {
        type: Boolean,
        default: true
      },
      disabled: {
        type: Boolean
      }
    });
    const useTooltipTriggerProps = buildProps({
      ...usePopperTriggerProps,
      disabled: Boolean,
      trigger: {
        type: definePropType([String, Array]),
        default: "hover"
      },
      triggerKeys: {
        type: definePropType(Array),
        default: () => [EVENT_CODE.enter, EVENT_CODE.space]
      }
    });
    const useTooltipProps = buildProps({
      openDelay: {
        type: Number
      },
      visibleArrow: {
        type: Boolean,
        default: void 0
      },
      hideAfter: {
        type: Number,
        default: 200
      },
      showArrow: {
        type: Boolean,
        default: true
      }
    });
    const TOOLTIP_INJECTION_KEY = Symbol("elTooltip");
    const _sfc_main$2u = defineComponent({
      name: "ElTooltipContent",
      components: {
        ElPopperContent
      },
      inheritAttrs: false,
      props: useTooltipContentProps,
      setup(props) {
        const contentRef = ref(null);
        const intermediateOpen = ref(false);
        const entering = ref(false);
        const leaving = ref(false);
        const destroyed = ref(false);
        const {
          controlled,
          id: id2,
          open,
          trigger: trigger2,
          onClose,
          onOpen,
          onShow,
          onHide,
          onBeforeShow,
          onBeforeHide
        } = inject(TOOLTIP_INJECTION_KEY, void 0);
        const persistentRef = computed(() => {
          return props.persistent;
        });
        onBeforeUnmount(() => {
          destroyed.value = true;
        });
        const shouldRender = computed(() => {
          return unref(persistentRef) ? true : unref(open);
        });
        const shouldShow = computed(() => {
          return props.disabled ? false : unref(open);
        });
        const contentStyle = computed(() => {
          var _a2;
          return (_a2 = props.style) != null ? _a2 : {};
        });
        const ariaHidden = computed(() => !unref(open));
        const onTransitionLeave = () => {
          onHide();
        };
        const stopWhenControlled = () => {
          if (unref(controlled))
            return true;
        };
        const onContentEnter = composeEventHandlers(stopWhenControlled, () => {
          if (props.enterable && unref(trigger2) === "hover") {
            onOpen();
          }
        });
        const onContentLeave = composeEventHandlers(stopWhenControlled, () => {
          if (unref(trigger2) === "hover") {
            onClose();
          }
        });
        const onBeforeEnter = () => {
          var _a2, _b;
          (_b = (_a2 = contentRef.value) == null ? void 0 : _a2.updatePopper) == null ? void 0 : _b.call(_a2);
          onBeforeShow == null ? void 0 : onBeforeShow();
        };
        const onBeforeLeave = () => {
          onBeforeHide == null ? void 0 : onBeforeHide();
        };
        const onAfterShow = () => {
          onShow();
          stopHandle = onClickOutside(computed(() => {
            var _a2;
            return (_a2 = contentRef.value) == null ? void 0 : _a2.popperContentRef;
          }), () => {
            if (unref(controlled))
              return;
            const $trigger = unref(trigger2);
            if ($trigger !== "hover") {
              onClose();
            }
          });
        };
        const onBlur = () => {
          if (!props.virtualTriggering) {
            onClose();
          }
        };
        let stopHandle;
        watch(() => unref(open), (val) => {
          if (!val) {
            stopHandle == null ? void 0 : stopHandle();
          }
        }, {
          flush: "post"
        });
        return {
          ariaHidden,
          entering,
          leaving,
          id: id2,
          intermediateOpen,
          contentStyle,
          contentRef,
          destroyed,
          shouldRender,
          shouldShow,
          onClose,
          open,
          onAfterShow,
          onBeforeEnter,
          onBeforeLeave,
          onContentEnter,
          onContentLeave,
          onTransitionLeave,
          onBlur
        };
      }
    });
    function _sfc_render$E(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_el_popper_content = resolveComponent("el-popper-content");
      return openBlock(), createBlock(Teleport, {
        disabled: !_ctx.teleported,
        to: _ctx.appendTo
      }, [
        createVNode(Transition, {
          name: _ctx.transition,
          onAfterLeave: _ctx.onTransitionLeave,
          onBeforeEnter: _ctx.onBeforeEnter,
          onAfterEnter: _ctx.onAfterShow,
          onBeforeLeave: _ctx.onBeforeLeave
        }, {
          default: withCtx(() => [
            _ctx.shouldRender ? withDirectives((openBlock(), createBlock(_component_el_popper_content, mergeProps({
              key: 0,
              id: _ctx.id,
              ref: "contentRef"
            }, _ctx.$attrs, {
              "aria-label": _ctx.ariaLabel,
              "aria-hidden": _ctx.ariaHidden,
              "boundaries-padding": _ctx.boundariesPadding,
              "fallback-placements": _ctx.fallbackPlacements,
              "gpu-acceleration": _ctx.gpuAcceleration,
              offset: _ctx.offset,
              placement: _ctx.placement,
              "popper-options": _ctx.popperOptions,
              strategy: _ctx.strategy,
              effect: _ctx.effect,
              enterable: _ctx.enterable,
              pure: _ctx.pure,
              "popper-class": _ctx.popperClass,
              "popper-style": [_ctx.popperStyle, _ctx.contentStyle],
              "reference-el": _ctx.referenceEl,
              "trigger-target-el": _ctx.triggerTargetEl,
              visible: _ctx.shouldShow,
              "z-index": _ctx.zIndex,
              onMouseenter: _ctx.onContentEnter,
              onMouseleave: _ctx.onContentLeave,
              onBlur: _ctx.onBlur,
              onClose: _ctx.onClose
            }), {
              default: withCtx(() => [
                createCommentVNode(" Workaround bug #6378 "),
                !_ctx.destroyed ? renderSlot(_ctx.$slots, "default", { key: 0 }) : createCommentVNode("v-if", true)
              ]),
              _: 3
            }, 16, ["id", "aria-label", "aria-hidden", "boundaries-padding", "fallback-placements", "gpu-acceleration", "offset", "placement", "popper-options", "strategy", "effect", "enterable", "pure", "popper-class", "popper-style", "reference-el", "trigger-target-el", "visible", "z-index", "onMouseenter", "onMouseleave", "onBlur", "onClose"])), [
              [vShow, _ctx.shouldShow]
            ]) : createCommentVNode("v-if", true)
          ]),
          _: 3
        }, 8, ["name", "onAfterLeave", "onBeforeEnter", "onAfterEnter", "onBeforeLeave"])
      ], 8, ["disabled", "to"]);
    }
    var ElTooltipContent = /* @__PURE__ */ _export_sfc$1(_sfc_main$2u, [["render", _sfc_render$E], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/tooltip/src/content.vue"]]);
    const isTriggerType = (trigger2, type2) => {
      if (isArray$6(trigger2)) {
        return trigger2.includes(type2);
      }
      return trigger2 === type2;
    };
    const whenTrigger = (trigger2, type2, handler) => {
      return (e2) => {
        isTriggerType(unref(trigger2), type2) && handler(e2);
      };
    };
    const _sfc_main$2t = defineComponent({
      name: "ElTooltipTrigger",
      components: {
        ElPopperTrigger
      },
      props: useTooltipTriggerProps,
      setup(props) {
        const ns2 = useNamespace("tooltip");
        const { controlled, id: id2, open, onOpen, onClose, onToggle } = inject(TOOLTIP_INJECTION_KEY, void 0);
        const triggerRef2 = ref(null);
        const stopWhenControlledOrDisabled = () => {
          if (unref(controlled) || props.disabled) {
            return true;
          }
        };
        const trigger2 = toRef(props, "trigger");
        const onMouseenter = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger2, "hover", onOpen));
        const onMouseleave = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger2, "hover", onClose));
        const onClick = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger2, "click", (e2) => {
          if (e2.button === 0) {
            onToggle(e2);
          }
        }));
        const onFocus = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger2, "focus", onOpen));
        const onBlur = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger2, "focus", onClose));
        const onContextMenu = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger2, "contextmenu", (e2) => {
          e2.preventDefault();
          onToggle(e2);
        }));
        const onKeydown = composeEventHandlers(stopWhenControlledOrDisabled, (e2) => {
          const { code } = e2;
          if (props.triggerKeys.includes(code)) {
            e2.preventDefault();
            onToggle(e2);
          }
        });
        return {
          onBlur,
          onContextMenu,
          onFocus,
          onMouseenter,
          onMouseleave,
          onClick,
          onKeydown,
          open,
          id: id2,
          triggerRef: triggerRef2,
          ns: ns2
        };
      }
    });
    function _sfc_render$D(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_el_popper_trigger = resolveComponent("el-popper-trigger");
      return openBlock(), createBlock(_component_el_popper_trigger, {
        id: _ctx.id,
        "virtual-ref": _ctx.virtualRef,
        open: _ctx.open,
        "virtual-triggering": _ctx.virtualTriggering,
        class: normalizeClass(_ctx.ns.e("trigger")),
        onBlur: _ctx.onBlur,
        onClick: _ctx.onClick,
        onContextmenu: _ctx.onContextMenu,
        onFocus: _ctx.onFocus,
        onMouseenter: _ctx.onMouseenter,
        onMouseleave: _ctx.onMouseleave,
        onKeydown: _ctx.onKeydown
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["id", "virtual-ref", "open", "virtual-triggering", "class", "onBlur", "onClick", "onContextmenu", "onFocus", "onMouseenter", "onMouseleave", "onKeydown"]);
    }
    var ElTooltipTrigger = /* @__PURE__ */ _export_sfc$1(_sfc_main$2t, [["render", _sfc_render$D], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/tooltip/src/trigger.vue"]]);
    const { useModelToggleProps, useModelToggle, useModelToggleEmits } = createModelToggleComposable("visible");
    const _sfc_main$2s = defineComponent({
      name: "ElTooltip",
      components: {
        ElPopper,
        ElPopperArrow,
        ElTooltipContent,
        ElTooltipTrigger
      },
      props: {
        ...usePopperProps,
        ...useModelToggleProps,
        ...useTooltipContentProps,
        ...useTooltipTriggerProps,
        ...usePopperArrowProps,
        ...useTooltipProps
      },
      emits: [
        ...useModelToggleEmits,
        "before-show",
        "before-hide",
        "show",
        "hide",
        "open",
        "close"
      ],
      setup(props, { emit: emit2 }) {
        usePopperContainer();
        const compatShowAfter = computed(() => {
          if (!isUndefined$1(props.openDelay))
            ;
          return props.openDelay || props.showAfter;
        });
        const compatShowArrow = computed(() => {
          if (!isUndefined$1(props.visibleArrow))
            ;
          return isBoolean$1(props.visibleArrow) ? props.visibleArrow : props.showArrow;
        });
        const id2 = useId();
        const popperRef = ref(null);
        const contentRef = ref(null);
        const updatePopper = () => {
          var _a2;
          const popperComponent = unref(popperRef);
          if (popperComponent) {
            (_a2 = popperComponent.popperInstanceRef) == null ? void 0 : _a2.update();
          }
        };
        const open = ref(false);
        const toggleReason = ref(void 0);
        const { show, hide, hasUpdateHandler } = useModelToggle({
          indicator: open,
          toggleReason
        });
        const { onOpen, onClose } = useDelayedToggle({
          showAfter: compatShowAfter,
          hideAfter: toRef(props, "hideAfter"),
          open: show,
          close: hide
        });
        const controlled = computed(() => isBoolean$1(props.visible) && !hasUpdateHandler.value);
        provide(TOOLTIP_INJECTION_KEY, {
          controlled,
          id: id2,
          open: readonly(open),
          trigger: toRef(props, "trigger"),
          onOpen: (event) => {
            onOpen(event);
          },
          onClose: (event) => {
            onClose(event);
          },
          onToggle: (event) => {
            if (unref(open)) {
              onClose(event);
            } else {
              onOpen(event);
            }
          },
          onShow: () => {
            emit2("show", toggleReason.value);
          },
          onHide: () => {
            emit2("hide", toggleReason.value);
          },
          onBeforeShow: () => {
            emit2("before-show", toggleReason.value);
          },
          onBeforeHide: () => {
            emit2("before-hide", toggleReason.value);
          },
          updatePopper
        });
        watch(() => props.disabled, (disabled) => {
          if (disabled && open.value) {
            open.value = false;
          }
        });
        const isFocusInsideContent = () => {
          var _a2, _b;
          const popperContent = (_b = (_a2 = contentRef.value) == null ? void 0 : _a2.contentRef) == null ? void 0 : _b.popperContentRef;
          return popperContent && popperContent.contains(document.activeElement);
        };
        onDeactivated(() => open.value && hide());
        return {
          compatShowAfter,
          compatShowArrow,
          popperRef,
          contentRef,
          open,
          hide,
          isFocusInsideContent,
          updatePopper,
          onOpen,
          onClose
        };
      }
    });
    const _hoisted_1$19 = ["innerHTML"];
    const _hoisted_2$I = { key: 1 };
    function _sfc_render$C(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_el_tooltip_trigger = resolveComponent("el-tooltip-trigger");
      const _component_el_popper_arrow = resolveComponent("el-popper-arrow");
      const _component_el_tooltip_content = resolveComponent("el-tooltip-content");
      const _component_el_popper = resolveComponent("el-popper");
      return openBlock(), createBlock(_component_el_popper, {
        ref: "popperRef",
        role: _ctx.role
      }, {
        default: withCtx(() => [
          createVNode(_component_el_tooltip_trigger, {
            disabled: _ctx.disabled,
            trigger: _ctx.trigger,
            "trigger-keys": _ctx.triggerKeys,
            "virtual-ref": _ctx.virtualRef,
            "virtual-triggering": _ctx.virtualTriggering
          }, {
            default: withCtx(() => [
              _ctx.$slots.default ? renderSlot(_ctx.$slots, "default", { key: 0 }) : createCommentVNode("v-if", true)
            ]),
            _: 3
          }, 8, ["disabled", "trigger", "trigger-keys", "virtual-ref", "virtual-triggering"]),
          createVNode(_component_el_tooltip_content, {
            ref: "contentRef",
            "aria-label": _ctx.ariaLabel,
            "boundaries-padding": _ctx.boundariesPadding,
            content: _ctx.content,
            disabled: _ctx.disabled,
            effect: _ctx.effect,
            enterable: _ctx.enterable,
            "fallback-placements": _ctx.fallbackPlacements,
            "hide-after": _ctx.hideAfter,
            "gpu-acceleration": _ctx.gpuAcceleration,
            offset: _ctx.offset,
            persistent: _ctx.persistent,
            "popper-class": _ctx.popperClass,
            "popper-style": _ctx.popperStyle,
            placement: _ctx.placement,
            "popper-options": _ctx.popperOptions,
            pure: _ctx.pure,
            "raw-content": _ctx.rawContent,
            "reference-el": _ctx.referenceEl,
            "trigger-target-el": _ctx.triggerTargetEl,
            "show-after": _ctx.compatShowAfter,
            strategy: _ctx.strategy,
            teleported: _ctx.teleported,
            transition: _ctx.transition,
            "virtual-triggering": _ctx.virtualTriggering,
            "z-index": _ctx.zIndex,
            "append-to": _ctx.appendTo
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "content", {}, () => [
                _ctx.rawContent ? (openBlock(), createElementBlock("span", {
                  key: 0,
                  innerHTML: _ctx.content
                }, null, 8, _hoisted_1$19)) : (openBlock(), createElementBlock("span", _hoisted_2$I, toDisplayString$1(_ctx.content), 1))
              ]),
              _ctx.compatShowArrow ? (openBlock(), createBlock(_component_el_popper_arrow, {
                key: 0,
                "arrow-offset": _ctx.arrowOffset
              }, null, 8, ["arrow-offset"])) : createCommentVNode("v-if", true)
            ]),
            _: 3
          }, 8, ["aria-label", "boundaries-padding", "content", "disabled", "effect", "enterable", "fallback-placements", "hide-after", "gpu-acceleration", "offset", "persistent", "popper-class", "popper-style", "placement", "popper-options", "pure", "raw-content", "reference-el", "trigger-target-el", "show-after", "strategy", "teleported", "transition", "virtual-triggering", "z-index", "append-to"])
        ]),
        _: 3
      }, 8, ["role"]);
    }
    var Tooltip = /* @__PURE__ */ _export_sfc$1(_sfc_main$2s, [["render", _sfc_render$C], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/tooltip/src/tooltip.vue"]]);
    const ElTooltip = withInstall(Tooltip);
    const autocompleteProps = buildProps({
      valueKey: {
        type: String,
        default: "value"
      },
      modelValue: {
        type: [String, Number],
        default: ""
      },
      debounce: {
        type: Number,
        default: 300
      },
      placement: {
        type: definePropType(String),
        values: [
          "top",
          "top-start",
          "top-end",
          "bottom",
          "bottom-start",
          "bottom-end"
        ],
        default: "bottom-start"
      },
      fetchSuggestions: {
        type: definePropType([Function, Array]),
        default: NOOP
      },
      popperClass: {
        type: String,
        default: ""
      },
      triggerOnFocus: {
        type: Boolean,
        default: true
      },
      selectWhenUnmatched: {
        type: Boolean,
        default: false
      },
      hideLoading: {
        type: Boolean,
        default: false
      },
      label: {
        type: String
      },
      teleported: useTooltipContentProps.teleported,
      highlightFirstItem: {
        type: Boolean,
        default: false
      },
      fitInputWidth: {
        type: Boolean,
        default: false
      }
    });
    const autocompleteEmits = {
      [UPDATE_MODEL_EVENT]: (value) => isString$3(value),
      [INPUT_EVENT]: (value) => isString$3(value),
      [CHANGE_EVENT]: (value) => isString$3(value),
      focus: (evt) => evt instanceof FocusEvent,
      blur: (evt) => evt instanceof FocusEvent,
      clear: () => true,
      select: (item) => isObject$7(item)
    };
    const _hoisted_1$18 = ["aria-expanded", "aria-owns"];
    const _hoisted_2$H = { key: 0 };
    const _hoisted_3$l = ["id", "aria-selected", "onClick"];
    const __default__$1H = {
      name: "ElAutocomplete",
      inheritAttrs: false
    };
    const _sfc_main$2r = /* @__PURE__ */ defineComponent({
      ...__default__$1H,
      props: autocompleteProps,
      emits: autocompleteEmits,
      setup(__props, { expose, emit: emit2 }) {
        const props = __props;
        const COMPONENT_NAME2 = "ElAutocomplete";
        const attrs = useAttrs();
        const rawAttrs = useAttrs$1();
        const disabled = useDisabled$1();
        const ns2 = useNamespace("autocomplete");
        const inputRef = ref();
        const regionRef = ref();
        const popperRef = ref();
        const listboxRef = ref();
        let ignoreFocusEvent = false;
        const suggestions = ref([]);
        const highlightedIndex = ref(-1);
        const dropdownWidth = ref("");
        const activated = ref(false);
        const suggestionDisabled = ref(false);
        const loading = ref(false);
        const listboxId = computed(() => ns2.b(String(generateId())));
        const styles = computed(() => rawAttrs.style);
        const suggestionVisible = computed(() => {
          const isValidData = suggestions.value.length > 0;
          return (isValidData || loading.value) && activated.value;
        });
        const suggestionLoading = computed(() => !props.hideLoading && loading.value);
        const refInput = computed(() => {
          if (inputRef.value) {
            return Array.from(inputRef.value.$el.querySelectorAll("input"));
          }
          return [];
        });
        const onSuggestionShow = async () => {
          await nextTick$1();
          if (suggestionVisible.value) {
            dropdownWidth.value = `${inputRef.value.$el.offsetWidth}px`;
          }
        };
        const onShow = () => {
          ignoreFocusEvent = true;
        };
        const onHide = () => {
          ignoreFocusEvent = false;
          highlightedIndex.value = -1;
        };
        const getData = async (queryString) => {
          if (suggestionDisabled.value)
            return;
          const cb = (suggestionList) => {
            loading.value = false;
            if (suggestionDisabled.value)
              return;
            if (isArray$6(suggestionList)) {
              suggestions.value = suggestionList;
              highlightedIndex.value = props.highlightFirstItem ? 0 : -1;
            } else {
              throwError(COMPONENT_NAME2, "autocomplete suggestions must be an array");
            }
          };
          loading.value = true;
          if (isArray$6(props.fetchSuggestions)) {
            cb(props.fetchSuggestions);
          } else {
            const result = await props.fetchSuggestions(queryString, cb);
            if (isArray$6(result))
              cb(result);
          }
        };
        const debouncedGetData = debounce(getData, props.debounce);
        const handleInput = (value) => {
          const valuePresented = !!value;
          emit2(INPUT_EVENT, value);
          emit2(UPDATE_MODEL_EVENT, value);
          suggestionDisabled.value = false;
          activated.value || (activated.value = valuePresented);
          if (!props.triggerOnFocus && !value) {
            suggestionDisabled.value = true;
            suggestions.value = [];
            return;
          }
          debouncedGetData(value);
        };
        const handleMouseDown = (event) => {
          var _a2;
          if (disabled.value)
            return;
          if (((_a2 = event.target) == null ? void 0 : _a2.tagName) !== "INPUT" || refInput.value.includes(document.activeElement)) {
            activated.value = true;
          }
        };
        const handleChange = (value) => {
          emit2(CHANGE_EVENT, value);
        };
        const handleFocus = (evt) => {
          if (ignoreFocusEvent)
            return;
          activated.value = true;
          emit2("focus", evt);
          if (props.triggerOnFocus) {
            debouncedGetData(String(props.modelValue));
          }
        };
        const handleBlur = (evt) => {
          if (ignoreFocusEvent)
            return;
          emit2("blur", evt);
        };
        const handleClear = () => {
          activated.value = false;
          emit2(UPDATE_MODEL_EVENT, "");
          emit2("clear");
        };
        const handleKeyEnter = async () => {
          if (suggestionVisible.value && highlightedIndex.value >= 0 && highlightedIndex.value < suggestions.value.length) {
            handleSelect(suggestions.value[highlightedIndex.value]);
          } else if (props.selectWhenUnmatched) {
            emit2("select", { value: props.modelValue });
            suggestions.value = [];
            highlightedIndex.value = -1;
          }
        };
        const handleKeyEscape = (evt) => {
          if (suggestionVisible.value) {
            evt.preventDefault();
            evt.stopPropagation();
            close2();
          }
        };
        const close2 = () => {
          activated.value = false;
        };
        const focus = () => {
          var _a2;
          (_a2 = inputRef.value) == null ? void 0 : _a2.focus();
        };
        const blur = () => {
          var _a2;
          (_a2 = inputRef.value) == null ? void 0 : _a2.blur();
        };
        const handleSelect = async (item) => {
          emit2(INPUT_EVENT, item[props.valueKey]);
          emit2(UPDATE_MODEL_EVENT, item[props.valueKey]);
          emit2("select", item);
          suggestions.value = [];
          highlightedIndex.value = -1;
        };
        const highlight = (index2) => {
          if (!suggestionVisible.value || loading.value)
            return;
          if (index2 < 0) {
            highlightedIndex.value = -1;
            return;
          }
          if (index2 >= suggestions.value.length) {
            index2 = suggestions.value.length - 1;
          }
          const suggestion = regionRef.value.querySelector(`.${ns2.be("suggestion", "wrap")}`);
          const suggestionList = suggestion.querySelectorAll(`.${ns2.be("suggestion", "list")} li`);
          const highlightItem = suggestionList[index2];
          const scrollTop = suggestion.scrollTop;
          const { offsetTop, scrollHeight } = highlightItem;
          if (offsetTop + scrollHeight > scrollTop + suggestion.clientHeight) {
            suggestion.scrollTop += scrollHeight;
          }
          if (offsetTop < scrollTop) {
            suggestion.scrollTop -= scrollHeight;
          }
          highlightedIndex.value = index2;
          inputRef.value.ref.setAttribute("aria-activedescendant", `${listboxId.value}-item-${highlightedIndex.value}`);
        };
        onClickOutside(listboxRef, () => {
          suggestionVisible.value && close2();
        });
        onMounted(() => {
          inputRef.value.ref.setAttribute("role", "textbox");
          inputRef.value.ref.setAttribute("aria-autocomplete", "list");
          inputRef.value.ref.setAttribute("aria-controls", "id");
          inputRef.value.ref.setAttribute("aria-activedescendant", `${listboxId.value}-item-${highlightedIndex.value}`);
        });
        expose({
          highlightedIndex,
          activated,
          loading,
          inputRef,
          popperRef,
          suggestions,
          handleSelect,
          handleKeyEnter,
          focus,
          blur,
          close: close2,
          highlight
        });
        return (_ctx, _cache) => {
          return openBlock(), createBlock(unref(ElTooltip), {
            ref_key: "popperRef",
            ref: popperRef,
            visible: unref(suggestionVisible),
            placement: _ctx.placement,
            "fallback-placements": ["bottom-start", "top-start"],
            "popper-class": [unref(ns2).e("popper"), _ctx.popperClass],
            teleported: _ctx.teleported,
            "gpu-acceleration": false,
            pure: "",
            "manual-mode": "",
            effect: "light",
            trigger: "click",
            transition: `${unref(ns2).namespace.value}-zoom-in-top`,
            persistent: "",
            onBeforeShow: onSuggestionShow,
            onShow,
            onHide
          }, {
            content: withCtx(() => [
              createBaseVNode("div", {
                ref_key: "regionRef",
                ref: regionRef,
                class: normalizeClass([unref(ns2).b("suggestion"), unref(ns2).is("loading", unref(suggestionLoading))]),
                style: normalizeStyle({
                  [_ctx.fitInputWidth ? "width" : "minWidth"]: dropdownWidth.value,
                  outline: "none"
                }),
                role: "region"
              }, [
                createVNode(unref(ElScrollbar), {
                  id: unref(listboxId),
                  tag: "ul",
                  "wrap-class": unref(ns2).be("suggestion", "wrap"),
                  "view-class": unref(ns2).be("suggestion", "list"),
                  role: "listbox"
                }, {
                  default: withCtx(() => [
                    unref(suggestionLoading) ? (openBlock(), createElementBlock("li", _hoisted_2$H, [
                      createVNode(unref(ElIcon), {
                        class: normalizeClass(unref(ns2).is("loading"))
                      }, {
                        default: withCtx(() => [
                          createVNode(unref(loading_default))
                        ]),
                        _: 1
                      }, 8, ["class"])
                    ])) : (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(suggestions.value, (item, index2) => {
                      return openBlock(), createElementBlock("li", {
                        id: `${unref(listboxId)}-item-${index2}`,
                        key: index2,
                        class: normalizeClass({ highlighted: highlightedIndex.value === index2 }),
                        role: "option",
                        "aria-selected": highlightedIndex.value === index2,
                        onClick: ($event) => handleSelect(item)
                      }, [
                        renderSlot(_ctx.$slots, "default", { item }, () => [
                          createTextVNode(toDisplayString$1(item[_ctx.valueKey]), 1)
                        ])
                      ], 10, _hoisted_3$l);
                    }), 128))
                  ]),
                  _: 3
                }, 8, ["id", "wrap-class", "view-class"])
              ], 6)
            ]),
            default: withCtx(() => [
              createBaseVNode("div", {
                ref_key: "listboxRef",
                ref: listboxRef,
                class: normalizeClass([unref(ns2).b(), _ctx.$attrs.class]),
                style: normalizeStyle(unref(styles)),
                role: "combobox",
                "aria-haspopup": "listbox",
                "aria-expanded": unref(suggestionVisible),
                "aria-owns": unref(listboxId)
              }, [
                createVNode(unref(ElInput), mergeProps({
                  ref_key: "inputRef",
                  ref: inputRef
                }, unref(attrs), {
                  "model-value": _ctx.modelValue,
                  onInput: handleInput,
                  onChange: handleChange,
                  onFocus: handleFocus,
                  onBlur: handleBlur,
                  onClear: handleClear,
                  onKeydown: [
                    _cache[0] || (_cache[0] = withKeys(withModifiers(($event) => highlight(highlightedIndex.value - 1), ["prevent"]), ["up"])),
                    _cache[1] || (_cache[1] = withKeys(withModifiers(($event) => highlight(highlightedIndex.value + 1), ["prevent"]), ["down"])),
                    withKeys(handleKeyEnter, ["enter"]),
                    withKeys(close2, ["tab"]),
                    withKeys(handleKeyEscape, ["esc"])
                  ],
                  onMousedown: handleMouseDown
                }), createSlots({ _: 2 }, [
                  _ctx.$slots.prepend ? {
                    name: "prepend",
                    fn: withCtx(() => [
                      renderSlot(_ctx.$slots, "prepend")
                    ])
                  } : void 0,
                  _ctx.$slots.append ? {
                    name: "append",
                    fn: withCtx(() => [
                      renderSlot(_ctx.$slots, "append")
                    ])
                  } : void 0,
                  _ctx.$slots.prefix ? {
                    name: "prefix",
                    fn: withCtx(() => [
                      renderSlot(_ctx.$slots, "prefix")
                    ])
                  } : void 0,
                  _ctx.$slots.suffix ? {
                    name: "suffix",
                    fn: withCtx(() => [
                      renderSlot(_ctx.$slots, "suffix")
                    ])
                  } : void 0
                ]), 1040, ["model-value", "onKeydown"])
              ], 14, _hoisted_1$18)
            ]),
            _: 3
          }, 8, ["visible", "placement", "popper-class", "teleported", "transition"]);
        };
      }
    });
    var Autocomplete = /* @__PURE__ */ _export_sfc$1(_sfc_main$2r, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/autocomplete/src/autocomplete.vue"]]);
    const ElAutocomplete = withInstall(Autocomplete);
    const avatarProps = buildProps({
      size: {
        type: [Number, String],
        values: componentSizes,
        default: "",
        validator: (val) => isNumber$1(val)
      },
      shape: {
        type: String,
        values: ["circle", "square"],
        default: "circle"
      },
      icon: {
        type: iconPropType
      },
      src: {
        type: String,
        default: ""
      },
      alt: String,
      srcSet: String,
      fit: {
        type: definePropType(String),
        default: "cover"
      }
    });
    const avatarEmits = {
      error: (evt) => evt instanceof Event
    };
    const _hoisted_1$17 = ["src", "alt", "srcset"];
    const __default__$1G = {
      name: "ElAvatar"
    };
    const _sfc_main$2q = /* @__PURE__ */ defineComponent({
      ...__default__$1G,
      props: avatarProps,
      emits: avatarEmits,
      setup(__props, { emit: emit2 }) {
        const props = __props;
        const ns2 = useNamespace("avatar");
        const hasLoadError = ref(false);
        const avatarClass = computed(() => {
          const { size: size2, icon, shape } = props;
          const classList = [ns2.b()];
          if (isString$3(size2))
            classList.push(ns2.m(size2));
          if (icon)
            classList.push(ns2.m("icon"));
          if (shape)
            classList.push(ns2.m(shape));
          return classList;
        });
        const sizeStyle = computed(() => {
          const { size: size2 } = props;
          return isNumber$1(size2) ? ns2.cssVarBlock({
            size: addUnit(size2) || ""
          }) : void 0;
        });
        const fitStyle = computed(() => ({
          objectFit: props.fit
        }));
        watch(() => props.src, () => hasLoadError.value = false);
        function handleError2(e2) {
          hasLoadError.value = true;
          emit2("error", e2);
        }
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("span", {
            class: normalizeClass(unref(avatarClass)),
            style: normalizeStyle(unref(sizeStyle))
          }, [
            (_ctx.src || _ctx.srcSet) && !hasLoadError.value ? (openBlock(), createElementBlock("img", {
              key: 0,
              src: _ctx.src,
              alt: _ctx.alt,
              srcset: _ctx.srcSet,
              style: normalizeStyle(unref(fitStyle)),
              onError: handleError2
            }, null, 44, _hoisted_1$17)) : _ctx.icon ? (openBlock(), createBlock(unref(ElIcon), { key: 1 }, {
              default: withCtx(() => [
                (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))
              ]),
              _: 1
            })) : renderSlot(_ctx.$slots, "default", { key: 2 })
          ], 6);
        };
      }
    });
    var Avatar = /* @__PURE__ */ _export_sfc$1(_sfc_main$2q, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/avatar/src/avatar.vue"]]);
    const ElAvatar = withInstall(Avatar);
    const backtopProps = {
      visibilityHeight: {
        type: Number,
        default: 200
      },
      target: {
        type: String,
        default: ""
      },
      right: {
        type: Number,
        default: 40
      },
      bottom: {
        type: Number,
        default: 40
      }
    };
    const backtopEmits = {
      click: (evt) => evt instanceof MouseEvent
    };
    const _hoisted_1$16 = ["onClick"];
    const __default__$1F = {
      name: "ElBacktop"
    };
    const _sfc_main$2p = /* @__PURE__ */ defineComponent({
      ...__default__$1F,
      props: backtopProps,
      emits: backtopEmits,
      setup(__props, { emit: emit2 }) {
        const props = __props;
        const COMPONENT_NAME2 = "ElBacktop";
        const ns2 = useNamespace("backtop");
        const el = shallowRef();
        const container = shallowRef();
        const visible = ref(false);
        const backTopStyle = computed(() => ({
          right: `${props.right}px`,
          bottom: `${props.bottom}px`
        }));
        const scrollToTop = () => {
          if (!el.value)
            return;
          const beginTime = Date.now();
          const beginValue = el.value.scrollTop;
          const frameFunc = () => {
            if (!el.value)
              return;
            const progress = (Date.now() - beginTime) / 500;
            if (progress < 1) {
              el.value.scrollTop = beginValue * (1 - easeInOutCubic(progress));
              requestAnimationFrame(frameFunc);
            } else {
              el.value.scrollTop = 0;
            }
          };
          requestAnimationFrame(frameFunc);
        };
        const handleScroll2 = () => {
          if (el.value)
            visible.value = el.value.scrollTop >= props.visibilityHeight;
        };
        const handleClick = (event) => {
          scrollToTop();
          emit2("click", event);
        };
        const handleScrollThrottled = useThrottleFn(handleScroll2, 300);
        useEventListener(container, "scroll", handleScrollThrottled);
        onMounted(() => {
          var _a2;
          container.value = document;
          el.value = document.documentElement;
          if (props.target) {
            el.value = (_a2 = document.querySelector(props.target)) != null ? _a2 : void 0;
            if (!el.value) {
              throwError(COMPONENT_NAME2, `target is not existed: ${props.target}`);
            }
            container.value = el.value;
          }
        });
        return (_ctx, _cache) => {
          return openBlock(), createBlock(Transition, {
            name: `${unref(ns2).namespace.value}-fade-in`
          }, {
            default: withCtx(() => [
              visible.value ? (openBlock(), createElementBlock("div", {
                key: 0,
                style: normalizeStyle(unref(backTopStyle)),
                class: normalizeClass(unref(ns2).b()),
                onClick: withModifiers(handleClick, ["stop"])
              }, [
                renderSlot(_ctx.$slots, "default", {}, () => [
                  createVNode(unref(ElIcon), {
                    class: normalizeClass(unref(ns2).e("icon"))
                  }, {
                    default: withCtx(() => [
                      createVNode(unref(caret_top_default))
                    ]),
                    _: 1
                  }, 8, ["class"])
                ])
              ], 14, _hoisted_1$16)) : createCommentVNode("v-if", true)
            ]),
            _: 3
          }, 8, ["name"]);
        };
      }
    });
    var Backtop = /* @__PURE__ */ _export_sfc$1(_sfc_main$2p, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/backtop/src/backtop.vue"]]);
    const ElBacktop = withInstall(Backtop);
    const badgeProps = buildProps({
      value: {
        type: [String, Number],
        default: ""
      },
      max: {
        type: Number,
        default: 99
      },
      isDot: Boolean,
      hidden: Boolean,
      type: {
        type: String,
        values: ["primary", "success", "warning", "info", "danger"],
        default: "danger"
      }
    });
    const _hoisted_1$15 = ["textContent"];
    const __default__$1E = {
      name: "ElBadge"
    };
    const _sfc_main$2o = /* @__PURE__ */ defineComponent({
      ...__default__$1E,
      props: badgeProps,
      setup(__props, { expose }) {
        const props = __props;
        const ns2 = useNamespace("badge");
        const content = computed(() => {
          if (props.isDot)
            return "";
          if (isNumber$1(props.value) && isNumber$1(props.max)) {
            return props.max < props.value ? `${props.max}+` : `${props.value}`;
          }
          return `${props.value}`;
        });
        expose({
          content
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            class: normalizeClass(unref(ns2).b())
          }, [
            renderSlot(_ctx.$slots, "default"),
            createVNode(Transition, {
              name: `${unref(ns2).namespace.value}-zoom-in-center`,
              persisted: ""
            }, {
              default: withCtx(() => [
                withDirectives(createBaseVNode("sup", {
                  class: normalizeClass([
                    unref(ns2).e("content"),
                    unref(ns2).em("content", _ctx.type),
                    unref(ns2).is("fixed", !!_ctx.$slots.default),
                    unref(ns2).is("dot", _ctx.isDot)
                  ]),
                  textContent: toDisplayString$1(unref(content))
                }, null, 10, _hoisted_1$15), [
                  [vShow, !_ctx.hidden && (unref(content) || _ctx.isDot)]
                ])
              ]),
              _: 1
            }, 8, ["name"])
          ], 2);
        };
      }
    });
    var Badge = /* @__PURE__ */ _export_sfc$1(_sfc_main$2o, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/badge/src/badge.vue"]]);
    const ElBadge = withInstall(Badge);
    const breadcrumbProps = buildProps({
      separator: {
        type: String,
        default: "/"
      },
      separatorIcon: {
        type: iconPropType,
        default: ""
      }
    });
    const __default__$1D = {
      name: "ElBreadcrumb"
    };
    const _sfc_main$2n = /* @__PURE__ */ defineComponent({
      ...__default__$1D,
      props: breadcrumbProps,
      setup(__props) {
        const props = __props;
        const ns2 = useNamespace("breadcrumb");
        const breadcrumb = ref();
        provide(breadcrumbKey, props);
        onMounted(() => {
          const items = breadcrumb.value.querySelectorAll(`.${ns2.e("item")}`);
          if (items.length) {
            items[items.length - 1].setAttribute("aria-current", "page");
          }
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            ref_key: "breadcrumb",
            ref: breadcrumb,
            class: normalizeClass(unref(ns2).b()),
            "aria-label": "Breadcrumb",
            role: "navigation"
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 2);
        };
      }
    });
    var Breadcrumb = /* @__PURE__ */ _export_sfc$1(_sfc_main$2n, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/breadcrumb/src/breadcrumb.vue"]]);
    const breadcrumbItemProps = buildProps({
      to: {
        type: definePropType([String, Object]),
        default: ""
      },
      replace: {
        type: Boolean,
        default: false
      }
    });
    const __default__$1C = {
      name: "ElBreadcrumbItem"
    };
    const _sfc_main$2m = /* @__PURE__ */ defineComponent({
      ...__default__$1C,
      props: breadcrumbItemProps,
      setup(__props) {
        const props = __props;
        const instance = getCurrentInstance();
        const breadcrumbContext = inject(breadcrumbKey, void 0);
        const ns2 = useNamespace("breadcrumb");
        const { separator, separatorIcon } = toRefs(breadcrumbContext);
        const router = instance.appContext.config.globalProperties.$router;
        const link = ref();
        const onClick = () => {
          if (!props.to || !router)
            return;
          props.replace ? router.replace(props.to) : router.push(props.to);
        };
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("span", {
            class: normalizeClass(unref(ns2).e("item"))
          }, [
            createBaseVNode("span", {
              ref_key: "link",
              ref: link,
              class: normalizeClass([unref(ns2).e("inner"), unref(ns2).is("link", !!_ctx.to)]),
              role: "link",
              onClick
            }, [
              renderSlot(_ctx.$slots, "default")
            ], 2),
            unref(separatorIcon) ? (openBlock(), createBlock(unref(ElIcon), {
              key: 0,
              class: normalizeClass(unref(ns2).e("separator"))
            }, {
              default: withCtx(() => [
                (openBlock(), createBlock(resolveDynamicComponent(unref(separatorIcon))))
              ]),
              _: 1
            }, 8, ["class"])) : (openBlock(), createElementBlock("span", {
              key: 1,
              class: normalizeClass(unref(ns2).e("separator")),
              role: "presentation"
            }, toDisplayString$1(unref(separator)), 3))
          ], 2);
        };
      }
    });
    var BreadcrumbItem = /* @__PURE__ */ _export_sfc$1(_sfc_main$2m, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/breadcrumb/src/breadcrumb-item.vue"]]);
    const ElBreadcrumb = withInstall(Breadcrumb, {
      BreadcrumbItem
    });
    const ElBreadcrumbItem = withNoopInstall(BreadcrumbItem);
    const buttonTypes = [
      "default",
      "primary",
      "success",
      "warning",
      "info",
      "danger",
      "text",
      ""
    ];
    const buttonNativeTypes = ["button", "submit", "reset"];
    const buttonProps = buildProps({
      size: useSizeProp,
      disabled: Boolean,
      type: {
        type: String,
        values: buttonTypes,
        default: ""
      },
      icon: {
        type: iconPropType,
        default: ""
      },
      nativeType: {
        type: String,
        values: buttonNativeTypes,
        default: "button"
      },
      loading: Boolean,
      loadingIcon: {
        type: iconPropType,
        default: () => loading_default
      },
      plain: Boolean,
      text: Boolean,
      link: Boolean,
      bg: Boolean,
      autofocus: Boolean,
      round: Boolean,
      circle: Boolean,
      color: String,
      dark: Boolean,
      autoInsertSpace: {
        type: Boolean,
        default: void 0
      }
    });
    const buttonEmits = {
      click: (evt) => evt instanceof MouseEvent
    };
    function bound01$1(n2, max2) {
      if (isOnePointZero$1(n2)) {
        n2 = "100%";
      }
      var isPercent = isPercentage$1(n2);
      n2 = max2 === 360 ? n2 : Math.min(max2, Math.max(0, parseFloat(n2)));
      if (isPercent) {
        n2 = parseInt(String(n2 * max2), 10) / 100;
      }
      if (Math.abs(n2 - max2) < 1e-6) {
        return 1;
      }
      if (max2 === 360) {
        n2 = (n2 < 0 ? n2 % max2 + max2 : n2 % max2) / parseFloat(String(max2));
      } else {
        n2 = n2 % max2 / parseFloat(String(max2));
      }
      return n2;
    }
    function clamp01(val) {
      return Math.min(1, Math.max(0, val));
    }
    function isOnePointZero$1(n2) {
      return typeof n2 === "string" && n2.indexOf(".") !== -1 && parseFloat(n2) === 1;
    }
    function isPercentage$1(n2) {
      return typeof n2 === "string" && n2.indexOf("%") !== -1;
    }
    function boundAlpha(a2) {
      a2 = parseFloat(a2);
      if (isNaN(a2) || a2 < 0 || a2 > 1) {
        a2 = 1;
      }
      return a2;
    }
    function convertToPercentage(n2) {
      if (n2 <= 1) {
        return "".concat(Number(n2) * 100, "%");
      }
      return n2;
    }
    function pad2(c2) {
      return c2.length === 1 ? "0" + c2 : String(c2);
    }
    function rgbToRgb(r, g2, b2) {
      return {
        r: bound01$1(r, 255) * 255,
        g: bound01$1(g2, 255) * 255,
        b: bound01$1(b2, 255) * 255
      };
    }
    function rgbToHsl(r, g2, b2) {
      r = bound01$1(r, 255);
      g2 = bound01$1(g2, 255);
      b2 = bound01$1(b2, 255);
      var max2 = Math.max(r, g2, b2);
      var min2 = Math.min(r, g2, b2);
      var h2 = 0;
      var s2 = 0;
      var l2 = (max2 + min2) / 2;
      if (max2 === min2) {
        s2 = 0;
        h2 = 0;
      } else {
        var d2 = max2 - min2;
        s2 = l2 > 0.5 ? d2 / (2 - max2 - min2) : d2 / (max2 + min2);
        switch (max2) {
          case r:
            h2 = (g2 - b2) / d2 + (g2 < b2 ? 6 : 0);
            break;
          case g2:
            h2 = (b2 - r) / d2 + 2;
            break;
          case b2:
            h2 = (r - g2) / d2 + 4;
            break;
        }
        h2 /= 6;
      }
      return { h: h2, s: s2, l: l2 };
    }
    function hue2rgb(p2, q2, t) {
      if (t < 0) {
        t += 1;
      }
      if (t > 1) {
        t -= 1;
      }
      if (t < 1 / 6) {
        return p2 + (q2 - p2) * (6 * t);
      }
      if (t < 1 / 2) {
        return q2;
      }
      if (t < 2 / 3) {
        return p2 + (q2 - p2) * (2 / 3 - t) * 6;
      }
      return p2;
    }
    function hslToRgb(h2, s2, l2) {
      var r;
      var g2;
      var b2;
      h2 = bound01$1(h2, 360);
      s2 = bound01$1(s2, 100);
      l2 = bound01$1(l2, 100);
      if (s2 === 0) {
        g2 = l2;
        b2 = l2;
        r = l2;
      } else {
        var q2 = l2 < 0.5 ? l2 * (1 + s2) : l2 + s2 - l2 * s2;
        var p2 = 2 * l2 - q2;
        r = hue2rgb(p2, q2, h2 + 1 / 3);
        g2 = hue2rgb(p2, q2, h2);
        b2 = hue2rgb(p2, q2, h2 - 1 / 3);
      }
      return { r: r * 255, g: g2 * 255, b: b2 * 255 };
    }
    function rgbToHsv(r, g2, b2) {
      r = bound01$1(r, 255);
      g2 = bound01$1(g2, 255);
      b2 = bound01$1(b2, 255);
      var max2 = Math.max(r, g2, b2);
      var min2 = Math.min(r, g2, b2);
      var h2 = 0;
      var v2 = max2;
      var d2 = max2 - min2;
      var s2 = max2 === 0 ? 0 : d2 / max2;
      if (max2 === min2) {
        h2 = 0;
      } else {
        switch (max2) {
          case r:
            h2 = (g2 - b2) / d2 + (g2 < b2 ? 6 : 0);
            break;
          case g2:
            h2 = (b2 - r) / d2 + 2;
            break;
          case b2:
            h2 = (r - g2) / d2 + 4;
            break;
        }
        h2 /= 6;
      }
      return { h: h2, s: s2, v: v2 };
    }
    function hsvToRgb(h2, s2, v2) {
      h2 = bound01$1(h2, 360) * 6;
      s2 = bound01$1(s2, 100);
      v2 = bound01$1(v2, 100);
      var i2 = Math.floor(h2);
      var f2 = h2 - i2;
      var p2 = v2 * (1 - s2);
      var q2 = v2 * (1 - f2 * s2);
      var t = v2 * (1 - (1 - f2) * s2);
      var mod = i2 % 6;
      var r = [v2, q2, p2, p2, t, v2][mod];
      var g2 = [t, v2, v2, q2, p2, p2][mod];
      var b2 = [p2, p2, t, v2, v2, q2][mod];
      return { r: r * 255, g: g2 * 255, b: b2 * 255 };
    }
    function rgbToHex(r, g2, b2, allow3Char) {
      var hex = [
        pad2(Math.round(r).toString(16)),
        pad2(Math.round(g2).toString(16)),
        pad2(Math.round(b2).toString(16))
      ];
      if (allow3Char && hex[0].startsWith(hex[0].charAt(1)) && hex[1].startsWith(hex[1].charAt(1)) && hex[2].startsWith(hex[2].charAt(1))) {
        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
      }
      return hex.join("");
    }
    function rgbaToHex(r, g2, b2, a2, allow4Char) {
      var hex = [
        pad2(Math.round(r).toString(16)),
        pad2(Math.round(g2).toString(16)),
        pad2(Math.round(b2).toString(16)),
        pad2(convertDecimalToHex(a2))
      ];
      if (allow4Char && hex[0].startsWith(hex[0].charAt(1)) && hex[1].startsWith(hex[1].charAt(1)) && hex[2].startsWith(hex[2].charAt(1)) && hex[3].startsWith(hex[3].charAt(1))) {
        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
      }
      return hex.join("");
    }
    function convertDecimalToHex(d2) {
      return Math.round(parseFloat(d2) * 255).toString(16);
    }
    function convertHexToDecimal(h2) {
      return parseIntFromHex(h2) / 255;
    }
    function parseIntFromHex(val) {
      return parseInt(val, 16);
    }
    function numberInputToObject(color) {
      return {
        r: color >> 16,
        g: (color & 65280) >> 8,
        b: color & 255
      };
    }
    var names = {
      aliceblue: "#f0f8ff",
      antiquewhite: "#faebd7",
      aqua: "#00ffff",
      aquamarine: "#7fffd4",
      azure: "#f0ffff",
      beige: "#f5f5dc",
      bisque: "#ffe4c4",
      black: "#000000",
      blanchedalmond: "#ffebcd",
      blue: "#0000ff",
      blueviolet: "#8a2be2",
      brown: "#a52a2a",
      burlywood: "#deb887",
      cadetblue: "#5f9ea0",
      chartreuse: "#7fff00",
      chocolate: "#d2691e",
      coral: "#ff7f50",
      cornflowerblue: "#6495ed",
      cornsilk: "#fff8dc",
      crimson: "#dc143c",
      cyan: "#00ffff",
      darkblue: "#00008b",
      darkcyan: "#008b8b",
      darkgoldenrod: "#b8860b",
      darkgray: "#a9a9a9",
      darkgreen: "#006400",
      darkgrey: "#a9a9a9",
      darkkhaki: "#bdb76b",
      darkmagenta: "#8b008b",
      darkolivegreen: "#556b2f",
      darkorange: "#ff8c00",
      darkorchid: "#9932cc",
      darkred: "#8b0000",
      darksalmon: "#e9967a",
      darkseagreen: "#8fbc8f",
      darkslateblue: "#483d8b",
      darkslategray: "#2f4f4f",
      darkslategrey: "#2f4f4f",
      darkturquoise: "#00ced1",
      darkviolet: "#9400d3",
      deeppink: "#ff1493",
      deepskyblue: "#00bfff",
      dimgray: "#696969",
      dimgrey: "#696969",
      dodgerblue: "#1e90ff",
      firebrick: "#b22222",
      floralwhite: "#fffaf0",
      forestgreen: "#228b22",
      fuchsia: "#ff00ff",
      gainsboro: "#dcdcdc",
      ghostwhite: "#f8f8ff",
      goldenrod: "#daa520",
      gold: "#ffd700",
      gray: "#808080",
      green: "#008000",
      greenyellow: "#adff2f",
      grey: "#808080",
      honeydew: "#f0fff0",
      hotpink: "#ff69b4",
      indianred: "#cd5c5c",
      indigo: "#4b0082",
      ivory: "#fffff0",
      khaki: "#f0e68c",
      lavenderblush: "#fff0f5",
      lavender: "#e6e6fa",
      lawngreen: "#7cfc00",
      lemonchiffon: "#fffacd",
      lightblue: "#add8e6",
      lightcoral: "#f08080",
      lightcyan: "#e0ffff",
      lightgoldenrodyellow: "#fafad2",
      lightgray: "#d3d3d3",
      lightgreen: "#90ee90",
      lightgrey: "#d3d3d3",
      lightpink: "#ffb6c1",
      lightsalmon: "#ffa07a",
      lightseagreen: "#20b2aa",
      lightskyblue: "#87cefa",
      lightslategray: "#778899",
      lightslategrey: "#778899",
      lightsteelblue: "#b0c4de",
      lightyellow: "#ffffe0",
      lime: "#00ff00",
      limegreen: "#32cd32",
      linen: "#faf0e6",
      magenta: "#ff00ff",
      maroon: "#800000",
      mediumaquamarine: "#66cdaa",
      mediumblue: "#0000cd",
      mediumorchid: "#ba55d3",
      mediumpurple: "#9370db",
      mediumseagreen: "#3cb371",
      mediumslateblue: "#7b68ee",
      mediumspringgreen: "#00fa9a",
      mediumturquoise: "#48d1cc",
      mediumvioletred: "#c71585",
      midnightblue: "#191970",
      mintcream: "#f5fffa",
      mistyrose: "#ffe4e1",
      moccasin: "#ffe4b5",
      navajowhite: "#ffdead",
      navy: "#000080",
      oldlace: "#fdf5e6",
      olive: "#808000",
      olivedrab: "#6b8e23",
      orange: "#ffa500",
      orangered: "#ff4500",
      orchid: "#da70d6",
      palegoldenrod: "#eee8aa",
      palegreen: "#98fb98",
      paleturquoise: "#afeeee",
      palevioletred: "#db7093",
      papayawhip: "#ffefd5",
      peachpuff: "#ffdab9",
      peru: "#cd853f",
      pink: "#ffc0cb",
      plum: "#dda0dd",
      powderblue: "#b0e0e6",
      purple: "#800080",
      rebeccapurple: "#663399",
      red: "#ff0000",
      rosybrown: "#bc8f8f",
      royalblue: "#4169e1",
      saddlebrown: "#8b4513",
      salmon: "#fa8072",
      sandybrown: "#f4a460",
      seagreen: "#2e8b57",
      seashell: "#fff5ee",
      sienna: "#a0522d",
      silver: "#c0c0c0",
      skyblue: "#87ceeb",
      slateblue: "#6a5acd",
      slategray: "#708090",
      slategrey: "#708090",
      snow: "#fffafa",
      springgreen: "#00ff7f",
      steelblue: "#4682b4",
      tan: "#d2b48c",
      teal: "#008080",
      thistle: "#d8bfd8",
      tomato: "#ff6347",
      turquoise: "#40e0d0",
      violet: "#ee82ee",
      wheat: "#f5deb3",
      white: "#ffffff",
      whitesmoke: "#f5f5f5",
      yellow: "#ffff00",
      yellowgreen: "#9acd32"
    };
    function inputToRGB(color) {
      var rgb = { r: 0, g: 0, b: 0 };
      var a2 = 1;
      var s2 = null;
      var v2 = null;
      var l2 = null;
      var ok = false;
      var format2 = false;
      if (typeof color === "string") {
        color = stringInputToObject(color);
      }
      if (typeof color === "object") {
        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
          rgb = rgbToRgb(color.r, color.g, color.b);
          ok = true;
          format2 = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
        } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
          s2 = convertToPercentage(color.s);
          v2 = convertToPercentage(color.v);
          rgb = hsvToRgb(color.h, s2, v2);
          ok = true;
          format2 = "hsv";
        } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
          s2 = convertToPercentage(color.s);
          l2 = convertToPercentage(color.l);
          rgb = hslToRgb(color.h, s2, l2);
          ok = true;
          format2 = "hsl";
        }
        if (Object.prototype.hasOwnProperty.call(color, "a")) {
          a2 = color.a;
        }
      }
      a2 = boundAlpha(a2);
      return {
        ok,
        format: color.format || format2,
        r: Math.min(255, Math.max(rgb.r, 0)),
        g: Math.min(255, Math.max(rgb.g, 0)),
        b: Math.min(255, Math.max(rgb.b, 0)),
        a: a2
      };
    }
    var CSS_INTEGER = "[-\\+]?\\d+%?";
    var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
    var CSS_UNIT = "(?:".concat(CSS_NUMBER, ")|(?:").concat(CSS_INTEGER, ")");
    var PERMISSIVE_MATCH3 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
    var PERMISSIVE_MATCH4 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
    var matchers = {
      CSS_UNIT: new RegExp(CSS_UNIT),
      rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
      rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
      hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
      hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
      hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
      hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
      hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
      hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
    };
    function stringInputToObject(color) {
      color = color.trim().toLowerCase();
      if (color.length === 0) {
        return false;
      }
      var named = false;
      if (names[color]) {
        color = names[color];
        named = true;
      } else if (color === "transparent") {
        return { r: 0, g: 0, b: 0, a: 0, format: "name" };
      }
      var match = matchers.rgb.exec(color);
      if (match) {
        return { r: match[1], g: match[2], b: match[3] };
      }
      match = matchers.rgba.exec(color);
      if (match) {
        return { r: match[1], g: match[2], b: match[3], a: match[4] };
      }
      match = matchers.hsl.exec(color);
      if (match) {
        return { h: match[1], s: match[2], l: match[3] };
      }
      match = matchers.hsla.exec(color);
      if (match) {
        return { h: match[1], s: match[2], l: match[3], a: match[4] };
      }
      match = matchers.hsv.exec(color);
      if (match) {
        return { h: match[1], s: match[2], v: match[3] };
      }
      match = matchers.hsva.exec(color);
      if (match) {
        return { h: match[1], s: match[2], v: match[3], a: match[4] };
      }
      match = matchers.hex8.exec(color);
      if (match) {
        return {
          r: parseIntFromHex(match[1]),
          g: parseIntFromHex(match[2]),
          b: parseIntFromHex(match[3]),
          a: convertHexToDecimal(match[4]),
          format: named ? "name" : "hex8"
        };
      }
      match = matchers.hex6.exec(color);
      if (match) {
        return {
          r: parseIntFromHex(match[1]),
          g: parseIntFromHex(match[2]),
          b: parseIntFromHex(match[3]),
          format: named ? "name" : "hex"
        };
      }
      match = matchers.hex4.exec(color);
      if (match) {
        return {
          r: parseIntFromHex(match[1] + match[1]),
          g: parseIntFromHex(match[2] + match[2]),
          b: parseIntFromHex(match[3] + match[3]),
          a: convertHexToDecimal(match[4] + match[4]),
          format: named ? "name" : "hex8"
        };
      }
      match = matchers.hex3.exec(color);
      if (match) {
        return {
          r: parseIntFromHex(match[1] + match[1]),
          g: parseIntFromHex(match[2] + match[2]),
          b: parseIntFromHex(match[3] + match[3]),
          format: named ? "name" : "hex"
        };
      }
      return false;
    }
    function isValidCSSUnit(color) {
      return Boolean(matchers.CSS_UNIT.exec(String(color)));
    }
    var TinyColor = function() {
      function TinyColor2(color, opts) {
        if (color === void 0) {
          color = "";
        }
        if (opts === void 0) {
          opts = {};
        }
        var _a2;
        if (color instanceof TinyColor2) {
          return color;
        }
        if (typeof color === "number") {
          color = numberInputToObject(color);
        }
        this.originalInput = color;
        var rgb = inputToRGB(color);
        this.originalInput = color;
        this.r = rgb.r;
        this.g = rgb.g;
        this.b = rgb.b;
        this.a = rgb.a;
        this.roundA = Math.round(100 * this.a) / 100;
        this.format = (_a2 = opts.format) !== null && _a2 !== void 0 ? _a2 : rgb.format;
        this.gradientType = opts.gradientType;
        if (this.r < 1) {
          this.r = Math.round(this.r);
        }
        if (this.g < 1) {
          this.g = Math.round(this.g);
        }
        if (this.b < 1) {
          this.b = Math.round(this.b);
        }
        this.isValid = rgb.ok;
      }
      TinyColor2.prototype.isDark = function() {
        return this.getBrightness() < 128;
      };
      TinyColor2.prototype.isLight = function() {
        return !this.isDark();
      };
      TinyColor2.prototype.getBrightness = function() {
        var rgb = this.toRgb();
        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
      };
      TinyColor2.prototype.getLuminance = function() {
        var rgb = this.toRgb();
        var R2;
        var G2;
        var B2;
        var RsRGB = rgb.r / 255;
        var GsRGB = rgb.g / 255;
        var BsRGB = rgb.b / 255;
        if (RsRGB <= 0.03928) {
          R2 = RsRGB / 12.92;
        } else {
          R2 = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
        }
        if (GsRGB <= 0.03928) {
          G2 = GsRGB / 12.92;
        } else {
          G2 = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
        }
        if (BsRGB <= 0.03928) {
          B2 = BsRGB / 12.92;
        } else {
          B2 = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
        }
        return 0.2126 * R2 + 0.7152 * G2 + 0.0722 * B2;
      };
      TinyColor2.prototype.getAlpha = function() {
        return this.a;
      };
      TinyColor2.prototype.setAlpha = function(alpha) {
        this.a = boundAlpha(alpha);
        this.roundA = Math.round(100 * this.a) / 100;
        return this;
      };
      TinyColor2.prototype.toHsv = function() {
        var hsv = rgbToHsv(this.r, this.g, this.b);
        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };
      };
      TinyColor2.prototype.toHsvString = function() {
        var hsv = rgbToHsv(this.r, this.g, this.b);
        var h2 = Math.round(hsv.h * 360);
        var s2 = Math.round(hsv.s * 100);
        var v2 = Math.round(hsv.v * 100);
        return this.a === 1 ? "hsv(".concat(h2, ", ").concat(s2, "%, ").concat(v2, "%)") : "hsva(".concat(h2, ", ").concat(s2, "%, ").concat(v2, "%, ").concat(this.roundA, ")");
      };
      TinyColor2.prototype.toHsl = function() {
        var hsl = rgbToHsl(this.r, this.g, this.b);
        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };
      };
      TinyColor2.prototype.toHslString = function() {
        var hsl = rgbToHsl(this.r, this.g, this.b);
        var h2 = Math.round(hsl.h * 360);
        var s2 = Math.round(hsl.s * 100);
        var l2 = Math.round(hsl.l * 100);
        return this.a === 1 ? "hsl(".concat(h2, ", ").concat(s2, "%, ").concat(l2, "%)") : "hsla(".concat(h2, ", ").concat(s2, "%, ").concat(l2, "%, ").concat(this.roundA, ")");
      };
      TinyColor2.prototype.toHex = function(allow3Char) {
        if (allow3Char === void 0) {
          allow3Char = false;
        }
        return rgbToHex(this.r, this.g, this.b, allow3Char);
      };
      TinyColor2.prototype.toHexString = function(allow3Char) {
        if (allow3Char === void 0) {
          allow3Char = false;
        }
        return "#" + this.toHex(allow3Char);
      };
      TinyColor2.prototype.toHex8 = function(allow4Char) {
        if (allow4Char === void 0) {
          allow4Char = false;
        }
        return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);
      };
      TinyColor2.prototype.toHex8String = function(allow4Char) {
        if (allow4Char === void 0) {
          allow4Char = false;
        }
        return "#" + this.toHex8(allow4Char);
      };
      TinyColor2.prototype.toRgb = function() {
        return {
          r: Math.round(this.r),
          g: Math.round(this.g),
          b: Math.round(this.b),
          a: this.a
        };
      };
      TinyColor2.prototype.toRgbString = function() {
        var r = Math.round(this.r);
        var g2 = Math.round(this.g);
        var b2 = Math.round(this.b);
        return this.a === 1 ? "rgb(".concat(r, ", ").concat(g2, ", ").concat(b2, ")") : "rgba(".concat(r, ", ").concat(g2, ", ").concat(b2, ", ").concat(this.roundA, ")");
      };
      TinyColor2.prototype.toPercentageRgb = function() {
        var fmt = function(x2) {
          return "".concat(Math.round(bound01$1(x2, 255) * 100), "%");
        };
        return {
          r: fmt(this.r),
          g: fmt(this.g),
          b: fmt(this.b),
          a: this.a
        };
      };
      TinyColor2.prototype.toPercentageRgbString = function() {
        var rnd = function(x2) {
          return Math.round(bound01$1(x2, 255) * 100);
        };
        return this.a === 1 ? "rgb(".concat(rnd(this.r), "%, ").concat(rnd(this.g), "%, ").concat(rnd(this.b), "%)") : "rgba(".concat(rnd(this.r), "%, ").concat(rnd(this.g), "%, ").concat(rnd(this.b), "%, ").concat(this.roundA, ")");
      };
      TinyColor2.prototype.toName = function() {
        if (this.a === 0) {
          return "transparent";
        }
        if (this.a < 1) {
          return false;
        }
        var hex = "#" + rgbToHex(this.r, this.g, this.b, false);
        for (var _i = 0, _a2 = Object.entries(names); _i < _a2.length; _i++) {
          var _b = _a2[_i], key = _b[0], value = _b[1];
          if (hex === value) {
            return key;
          }
        }
        return false;
      };
      TinyColor2.prototype.toString = function(format2) {
        var formatSet = Boolean(format2);
        format2 = format2 !== null && format2 !== void 0 ? format2 : this.format;
        var formattedString = false;
        var hasAlpha = this.a < 1 && this.a >= 0;
        var needsAlphaFormat = !formatSet && hasAlpha && (format2.startsWith("hex") || format2 === "name");
        if (needsAlphaFormat) {
          if (format2 === "name" && this.a === 0) {
            return this.toName();
          }
          return this.toRgbString();
        }
        if (format2 === "rgb") {
          formattedString = this.toRgbString();
        }
        if (format2 === "prgb") {
          formattedString = this.toPercentageRgbString();
        }
        if (format2 === "hex" || format2 === "hex6") {
          formattedString = this.toHexString();
        }
        if (format2 === "hex3") {
          formattedString = this.toHexString(true);
        }
        if (format2 === "hex4") {
          formattedString = this.toHex8String(true);
        }
        if (format2 === "hex8") {
          formattedString = this.toHex8String();
        }
        if (format2 === "name") {
          formattedString = this.toName();
        }
        if (format2 === "hsl") {
          formattedString = this.toHslString();
        }
        if (format2 === "hsv") {
          formattedString = this.toHsvString();
        }
        return formattedString || this.toHexString();
      };
      TinyColor2.prototype.toNumber = function() {
        return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);
      };
      TinyColor2.prototype.clone = function() {
        return new TinyColor2(this.toString());
      };
      TinyColor2.prototype.lighten = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        var hsl = this.toHsl();
        hsl.l += amount / 100;
        hsl.l = clamp01(hsl.l);
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.brighten = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        var rgb = this.toRgb();
        rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
        rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
        rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
        return new TinyColor2(rgb);
      };
      TinyColor2.prototype.darken = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        var hsl = this.toHsl();
        hsl.l -= amount / 100;
        hsl.l = clamp01(hsl.l);
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.tint = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        return this.mix("white", amount);
      };
      TinyColor2.prototype.shade = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        return this.mix("black", amount);
      };
      TinyColor2.prototype.desaturate = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        var hsl = this.toHsl();
        hsl.s -= amount / 100;
        hsl.s = clamp01(hsl.s);
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.saturate = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        var hsl = this.toHsl();
        hsl.s += amount / 100;
        hsl.s = clamp01(hsl.s);
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.greyscale = function() {
        return this.desaturate(100);
      };
      TinyColor2.prototype.spin = function(amount) {
        var hsl = this.toHsl();
        var hue = (hsl.h + amount) % 360;
        hsl.h = hue < 0 ? 360 + hue : hue;
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.mix = function(color, amount) {
        if (amount === void 0) {
          amount = 50;
        }
        var rgb1 = this.toRgb();
        var rgb2 = new TinyColor2(color).toRgb();
        var p2 = amount / 100;
        var rgba = {
          r: (rgb2.r - rgb1.r) * p2 + rgb1.r,
          g: (rgb2.g - rgb1.g) * p2 + rgb1.g,
          b: (rgb2.b - rgb1.b) * p2 + rgb1.b,
          a: (rgb2.a - rgb1.a) * p2 + rgb1.a
        };
        return new TinyColor2(rgba);
      };
      TinyColor2.prototype.analogous = function(results, slices) {
        if (results === void 0) {
          results = 6;
        }
        if (slices === void 0) {
          slices = 30;
        }
        var hsl = this.toHsl();
        var part = 360 / slices;
        var ret = [this];
        for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
          hsl.h = (hsl.h + part) % 360;
          ret.push(new TinyColor2(hsl));
        }
        return ret;
      };
      TinyColor2.prototype.complement = function() {
        var hsl = this.toHsl();
        hsl.h = (hsl.h + 180) % 360;
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.monochromatic = function(results) {
        if (results === void 0) {
          results = 6;
        }
        var hsv = this.toHsv();
        var h2 = hsv.h;
        var s2 = hsv.s;
        var v2 = hsv.v;
        var res = [];
        var modification = 1 / results;
        while (results--) {
          res.push(new TinyColor2({ h: h2, s: s2, v: v2 }));
          v2 = (v2 + modification) % 1;
        }
        return res;
      };
      TinyColor2.prototype.splitcomplement = function() {
        var hsl = this.toHsl();
        var h2 = hsl.h;
        return [
          this,
          new TinyColor2({ h: (h2 + 72) % 360, s: hsl.s, l: hsl.l }),
          new TinyColor2({ h: (h2 + 216) % 360, s: hsl.s, l: hsl.l })
        ];
      };
      TinyColor2.prototype.onBackground = function(background) {
        var fg = this.toRgb();
        var bg = new TinyColor2(background).toRgb();
        return new TinyColor2({
          r: bg.r + (fg.r - bg.r) * fg.a,
          g: bg.g + (fg.g - bg.g) * fg.a,
          b: bg.b + (fg.b - bg.b) * fg.a
        });
      };
      TinyColor2.prototype.triad = function() {
        return this.polyad(3);
      };
      TinyColor2.prototype.tetrad = function() {
        return this.polyad(4);
      };
      TinyColor2.prototype.polyad = function(n2) {
        var hsl = this.toHsl();
        var h2 = hsl.h;
        var result = [this];
        var increment = 360 / n2;
        for (var i2 = 1; i2 < n2; i2++) {
          result.push(new TinyColor2({ h: (h2 + i2 * increment) % 360, s: hsl.s, l: hsl.l }));
        }
        return result;
      };
      TinyColor2.prototype.equals = function(color) {
        return this.toRgbString() === new TinyColor2(color).toRgbString();
      };
      return TinyColor2;
    }();
    function darken(color, amount = 20) {
      return color.mix("#141414", amount).toString();
    }
    function useButtonCustomStyle(props) {
      const _disabled = useDisabled$1();
      const ns2 = useNamespace("button");
      return computed(() => {
        let styles = {};
        const buttonColor = props.color;
        if (buttonColor) {
          const color = new TinyColor(buttonColor);
          const activeBgColor = props.dark ? color.tint(20).toString() : darken(color, 20);
          if (props.plain) {
            styles = ns2.cssVarBlock({
              "bg-color": props.dark ? darken(color, 90) : color.tint(90).toString(),
              "text-color": buttonColor,
              "border-color": props.dark ? darken(color, 50) : color.tint(50).toString(),
              "hover-text-color": `var(${ns2.cssVarName("color-white")})`,
              "hover-bg-color": buttonColor,
              "hover-border-color": buttonColor,
              "active-bg-color": activeBgColor,
              "active-text-color": `var(${ns2.cssVarName("color-white")})`,
              "active-border-color": activeBgColor
            });
            if (_disabled.value) {
              styles[ns2.cssVarBlockName("disabled-bg-color")] = props.dark ? darken(color, 90) : color.tint(90).toString();
              styles[ns2.cssVarBlockName("disabled-text-color")] = props.dark ? darken(color, 50) : color.tint(50).toString();
              styles[ns2.cssVarBlockName("disabled-border-color")] = props.dark ? darken(color, 80) : color.tint(80).toString();
            }
          } else {
            const hoverBgColor = props.dark ? darken(color, 30) : color.tint(30).toString();
            const textColor = color.isDark() ? `var(${ns2.cssVarName("color-white")})` : `var(${ns2.cssVarName("color-black")})`;
            styles = ns2.cssVarBlock({
              "bg-color": buttonColor,
              "text-color": textColor,
              "border-color": buttonColor,
              "hover-bg-color": hoverBgColor,
              "hover-text-color": textColor,
              "hover-border-color": hoverBgColor,
              "active-bg-color": activeBgColor,
              "active-border-color": activeBgColor
            });
            if (_disabled.value) {
              const disabledButtonColor = props.dark ? darken(color, 50) : color.tint(50).toString();
              styles[ns2.cssVarBlockName("disabled-bg-color")] = disabledButtonColor;
              styles[ns2.cssVarBlockName("disabled-text-color")] = props.dark ? "rgba(255, 255, 255, 0.5)" : `var(${ns2.cssVarName("color-white")})`;
              styles[ns2.cssVarBlockName("disabled-border-color")] = disabledButtonColor;
            }
          }
        }
        return styles;
      });
    }
    const _hoisted_1$14 = ["aria-disabled", "disabled", "autofocus", "type"];
    const __default__$1B = {
      name: "ElButton"
    };
    const _sfc_main$2l = /* @__PURE__ */ defineComponent({
      ...__default__$1B,
      props: buttonProps,
      emits: buttonEmits,
      setup(__props, { expose, emit: emit2 }) {
        const props = __props;
        const slots = useSlots();
        useDeprecated({
          from: "type.text",
          replacement: "type.link",
          version: "3.0.0",
          scope: "props",
          ref: "https://element-plus.org/en-US/component/button.html#button-attributes"
        }, computed(() => props.type === "text"));
        const buttonGroupContext = inject(buttonGroupContextKey, void 0);
        const globalConfig2 = useGlobalConfig("button");
        const ns2 = useNamespace("button");
        const { form } = useFormItem();
        const _size = useSize(computed(() => buttonGroupContext == null ? void 0 : buttonGroupContext.size));
        const _disabled = useDisabled$1();
        const _ref = ref();
        const _type = computed(() => props.type || (buttonGroupContext == null ? void 0 : buttonGroupContext.type) || "");
        const autoInsertSpace = computed(() => {
          var _a2, _b, _c;
          return (_c = (_b = props.autoInsertSpace) != null ? _b : (_a2 = globalConfig2.value) == null ? void 0 : _a2.autoInsertSpace) != null ? _c : false;
        });
        const shouldAddSpace = computed(() => {
          var _a2;
          const defaultSlot = (_a2 = slots.default) == null ? void 0 : _a2.call(slots);
          if (autoInsertSpace.value && (defaultSlot == null ? void 0 : defaultSlot.length) === 1) {
            const slot = defaultSlot[0];
            if ((slot == null ? void 0 : slot.type) === Text) {
              const text = slot.children;
              return /^\p{Unified_Ideograph}{2}$/u.test(text.trim());
            }
          }
          return false;
        });
        const buttonStyle = useButtonCustomStyle(props);
        const handleClick = (evt) => {
          if (props.nativeType === "reset") {
            form == null ? void 0 : form.resetFields();
          }
          emit2("click", evt);
        };
        expose({
          ref: _ref,
          size: _size,
          type: _type,
          disabled: _disabled,
          shouldAddSpace
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("button", {
            ref_key: "_ref",
            ref: _ref,
            class: normalizeClass([
              unref(ns2).b(),
              unref(ns2).m(unref(_type)),
              unref(ns2).m(unref(_size)),
              unref(ns2).is("disabled", unref(_disabled)),
              unref(ns2).is("loading", _ctx.loading),
              unref(ns2).is("plain", _ctx.plain),
              unref(ns2).is("round", _ctx.round),
              unref(ns2).is("circle", _ctx.circle),
              unref(ns2).is("text", _ctx.text),
              unref(ns2).is("link", _ctx.link),
              unref(ns2).is("has-bg", _ctx.bg)
            ]),
            "aria-disabled": unref(_disabled) || _ctx.loading,
            disabled: unref(_disabled) || _ctx.loading,
            autofocus: _ctx.autofocus,
            type: _ctx.nativeType,
            style: normalizeStyle(unref(buttonStyle)),
            onClick: handleClick
          }, [
            _ctx.loading ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              _ctx.$slots.loading ? renderSlot(_ctx.$slots, "loading", { key: 0 }) : (openBlock(), createBlock(unref(ElIcon), {
                key: 1,
                class: normalizeClass(unref(ns2).is("loading"))
              }, {
                default: withCtx(() => [
                  (openBlock(), createBlock(resolveDynamicComponent(_ctx.loadingIcon)))
                ]),
                _: 1
              }, 8, ["class"]))
            ], 64)) : _ctx.icon || _ctx.$slots.icon ? (openBlock(), createBlock(unref(ElIcon), { key: 1 }, {
              default: withCtx(() => [
                _ctx.icon ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon), { key: 0 })) : renderSlot(_ctx.$slots, "icon", { key: 1 })
              ]),
              _: 3
            })) : createCommentVNode("v-if", true),
            _ctx.$slots.default ? (openBlock(), createElementBlock("span", {
              key: 2,
              class: normalizeClass({ [unref(ns2).em("text", "expand")]: unref(shouldAddSpace) })
            }, [
              renderSlot(_ctx.$slots, "default")
            ], 2)) : createCommentVNode("v-if", true)
          ], 14, _hoisted_1$14);
        };
      }
    });
    var Button = /* @__PURE__ */ _export_sfc$1(_sfc_main$2l, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/button/src/button.vue"]]);
    const buttonGroupProps = {
      size: buttonProps.size,
      type: buttonProps.type
    };
    const __default__$1A = {
      name: "ElButtonGroup"
    };
    const _sfc_main$2k = /* @__PURE__ */ defineComponent({
      ...__default__$1A,
      props: buttonGroupProps,
      setup(__props) {
        const props = __props;
        provide(buttonGroupContextKey, reactive({
          size: toRef(props, "size"),
          type: toRef(props, "type")
        }));
        const ns2 = useNamespace("button");
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            class: normalizeClass(`${unref(ns2).b("group")}`)
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 2);
        };
      }
    });
    var ButtonGroup = /* @__PURE__ */ _export_sfc$1(_sfc_main$2k, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/button/src/button-group.vue"]]);
    const ElButton = withInstall(Button, {
      ButtonGroup
    });
    const ElButtonGroup$1 = withNoopInstall(ButtonGroup);
    var dayjs_min = { exports: {} };
    (function(module2, exports2) {
      !function(t, e2) {
        module2.exports = e2();
      }(commonjsGlobal, function() {
        var t = 1e3, e2 = 6e4, n2 = 36e5, r = "millisecond", i2 = "second", s2 = "minute", u2 = "hour", a2 = "day", o2 = "week", f2 = "month", h2 = "quarter", c2 = "year", d2 = "date", $ = "Invalid Date", l2 = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y2 = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M2 = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_") }, m2 = function(t2, e3, n3) {
          var r2 = String(t2);
          return !r2 || r2.length >= e3 ? t2 : "" + Array(e3 + 1 - r2.length).join(n3) + t2;
        }, g2 = { s: m2, z: function(t2) {
          var e3 = -t2.utcOffset(), n3 = Math.abs(e3), r2 = Math.floor(n3 / 60), i3 = n3 % 60;
          return (e3 <= 0 ? "+" : "-") + m2(r2, 2, "0") + ":" + m2(i3, 2, "0");
        }, m: function t2(e3, n3) {
          if (e3.date() < n3.date())
            return -t2(n3, e3);
          var r2 = 12 * (n3.year() - e3.year()) + (n3.month() - e3.month()), i3 = e3.clone().add(r2, f2), s3 = n3 - i3 < 0, u3 = e3.clone().add(r2 + (s3 ? -1 : 1), f2);
          return +(-(r2 + (n3 - i3) / (s3 ? i3 - u3 : u3 - i3)) || 0);
        }, a: function(t2) {
          return t2 < 0 ? Math.ceil(t2) || 0 : Math.floor(t2);
        }, p: function(t2) {
          return { M: f2, y: c2, w: o2, d: a2, D: d2, h: u2, m: s2, s: i2, ms: r, Q: h2 }[t2] || String(t2 || "").toLowerCase().replace(/s$/, "");
        }, u: function(t2) {
          return void 0 === t2;
        } }, v2 = "en", D2 = {};
        D2[v2] = M2;
        var p2 = function(t2) {
          return t2 instanceof _2;
        }, S2 = function t2(e3, n3, r2) {
          var i3;
          if (!e3)
            return v2;
          if ("string" == typeof e3) {
            var s3 = e3.toLowerCase();
            D2[s3] && (i3 = s3), n3 && (D2[s3] = n3, i3 = s3);
            var u3 = e3.split("-");
            if (!i3 && u3.length > 1)
              return t2(u3[0]);
          } else {
            var a3 = e3.name;
            D2[a3] = e3, i3 = a3;
          }
          return !r2 && i3 && (v2 = i3), i3 || !r2 && v2;
        }, w2 = function(t2, e3) {
          if (p2(t2))
            return t2.clone();
          var n3 = "object" == typeof e3 ? e3 : {};
          return n3.date = t2, n3.args = arguments, new _2(n3);
        }, O2 = g2;
        O2.l = S2, O2.i = p2, O2.w = function(t2, e3) {
          return w2(t2, { locale: e3.$L, utc: e3.$u, x: e3.$x, $offset: e3.$offset });
        };
        var _2 = function() {
          function M3(t2) {
            this.$L = S2(t2.locale, null, true), this.parse(t2);
          }
          var m3 = M3.prototype;
          return m3.parse = function(t2) {
            this.$d = function(t3) {
              var e3 = t3.date, n3 = t3.utc;
              if (null === e3)
                return new Date(NaN);
              if (O2.u(e3))
                return new Date();
              if (e3 instanceof Date)
                return new Date(e3);
              if ("string" == typeof e3 && !/Z$/i.test(e3)) {
                var r2 = e3.match(l2);
                if (r2) {
                  var i3 = r2[2] - 1 || 0, s3 = (r2[7] || "0").substring(0, 3);
                  return n3 ? new Date(Date.UTC(r2[1], i3, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s3)) : new Date(r2[1], i3, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s3);
                }
              }
              return new Date(e3);
            }(t2), this.$x = t2.x || {}, this.init();
          }, m3.init = function() {
            var t2 = this.$d;
            this.$y = t2.getFullYear(), this.$M = t2.getMonth(), this.$D = t2.getDate(), this.$W = t2.getDay(), this.$H = t2.getHours(), this.$m = t2.getMinutes(), this.$s = t2.getSeconds(), this.$ms = t2.getMilliseconds();
          }, m3.$utils = function() {
            return O2;
          }, m3.isValid = function() {
            return !(this.$d.toString() === $);
          }, m3.isSame = function(t2, e3) {
            var n3 = w2(t2);
            return this.startOf(e3) <= n3 && n3 <= this.endOf(e3);
          }, m3.isAfter = function(t2, e3) {
            return w2(t2) < this.startOf(e3);
          }, m3.isBefore = function(t2, e3) {
            return this.endOf(e3) < w2(t2);
          }, m3.$g = function(t2, e3, n3) {
            return O2.u(t2) ? this[e3] : this.set(n3, t2);
          }, m3.unix = function() {
            return Math.floor(this.valueOf() / 1e3);
          }, m3.valueOf = function() {
            return this.$d.getTime();
          }, m3.startOf = function(t2, e3) {
            var n3 = this, r2 = !!O2.u(e3) || e3, h3 = O2.p(t2), $2 = function(t3, e4) {
              var i3 = O2.w(n3.$u ? Date.UTC(n3.$y, e4, t3) : new Date(n3.$y, e4, t3), n3);
              return r2 ? i3 : i3.endOf(a2);
            }, l3 = function(t3, e4) {
              return O2.w(n3.toDate()[t3].apply(n3.toDate("s"), (r2 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e4)), n3);
            }, y3 = this.$W, M4 = this.$M, m4 = this.$D, g3 = "set" + (this.$u ? "UTC" : "");
            switch (h3) {
              case c2:
                return r2 ? $2(1, 0) : $2(31, 11);
              case f2:
                return r2 ? $2(1, M4) : $2(0, M4 + 1);
              case o2:
                var v3 = this.$locale().weekStart || 0, D3 = (y3 < v3 ? y3 + 7 : y3) - v3;
                return $2(r2 ? m4 - D3 : m4 + (6 - D3), M4);
              case a2:
              case d2:
                return l3(g3 + "Hours", 0);
              case u2:
                return l3(g3 + "Minutes", 1);
              case s2:
                return l3(g3 + "Seconds", 2);
              case i2:
                return l3(g3 + "Milliseconds", 3);
              default:
                return this.clone();
            }
          }, m3.endOf = function(t2) {
            return this.startOf(t2, false);
          }, m3.$set = function(t2, e3) {
            var n3, o3 = O2.p(t2), h3 = "set" + (this.$u ? "UTC" : ""), $2 = (n3 = {}, n3[a2] = h3 + "Date", n3[d2] = h3 + "Date", n3[f2] = h3 + "Month", n3[c2] = h3 + "FullYear", n3[u2] = h3 + "Hours", n3[s2] = h3 + "Minutes", n3[i2] = h3 + "Seconds", n3[r] = h3 + "Milliseconds", n3)[o3], l3 = o3 === a2 ? this.$D + (e3 - this.$W) : e3;
            if (o3 === f2 || o3 === c2) {
              var y3 = this.clone().set(d2, 1);
              y3.$d[$2](l3), y3.init(), this.$d = y3.set(d2, Math.min(this.$D, y3.daysInMonth())).$d;
            } else
              $2 && this.$d[$2](l3);
            return this.init(), this;
          }, m3.set = function(t2, e3) {
            return this.clone().$set(t2, e3);
          }, m3.get = function(t2) {
            return this[O2.p(t2)]();
          }, m3.add = function(r2, h3) {
            var d3, $2 = this;
            r2 = Number(r2);
            var l3 = O2.p(h3), y3 = function(t2) {
              var e3 = w2($2);
              return O2.w(e3.date(e3.date() + Math.round(t2 * r2)), $2);
            };
            if (l3 === f2)
              return this.set(f2, this.$M + r2);
            if (l3 === c2)
              return this.set(c2, this.$y + r2);
            if (l3 === a2)
              return y3(1);
            if (l3 === o2)
              return y3(7);
            var M4 = (d3 = {}, d3[s2] = e2, d3[u2] = n2, d3[i2] = t, d3)[l3] || 1, m4 = this.$d.getTime() + r2 * M4;
            return O2.w(m4, this);
          }, m3.subtract = function(t2, e3) {
            return this.add(-1 * t2, e3);
          }, m3.format = function(t2) {
            var e3 = this, n3 = this.$locale();
            if (!this.isValid())
              return n3.invalidDate || $;
            var r2 = t2 || "YYYY-MM-DDTHH:mm:ssZ", i3 = O2.z(this), s3 = this.$H, u3 = this.$m, a3 = this.$M, o3 = n3.weekdays, f3 = n3.months, h3 = function(t3, n4, i4, s4) {
              return t3 && (t3[n4] || t3(e3, r2)) || i4[n4].slice(0, s4);
            }, c3 = function(t3) {
              return O2.s(s3 % 12 || 12, t3, "0");
            }, d3 = n3.meridiem || function(t3, e4, n4) {
              var r3 = t3 < 12 ? "AM" : "PM";
              return n4 ? r3.toLowerCase() : r3;
            }, l3 = { YY: String(this.$y).slice(-2), YYYY: this.$y, M: a3 + 1, MM: O2.s(a3 + 1, 2, "0"), MMM: h3(n3.monthsShort, a3, f3, 3), MMMM: h3(f3, a3), D: this.$D, DD: O2.s(this.$D, 2, "0"), d: String(this.$W), dd: h3(n3.weekdaysMin, this.$W, o3, 2), ddd: h3(n3.weekdaysShort, this.$W, o3, 3), dddd: o3[this.$W], H: String(s3), HH: O2.s(s3, 2, "0"), h: c3(1), hh: c3(2), a: d3(s3, u3, true), A: d3(s3, u3, false), m: String(u3), mm: O2.s(u3, 2, "0"), s: String(this.$s), ss: O2.s(this.$s, 2, "0"), SSS: O2.s(this.$ms, 3, "0"), Z: i3 };
            return r2.replace(y2, function(t3, e4) {
              return e4 || l3[t3] || i3.replace(":", "");
            });
          }, m3.utcOffset = function() {
            return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
          }, m3.diff = function(r2, d3, $2) {
            var l3, y3 = O2.p(d3), M4 = w2(r2), m4 = (M4.utcOffset() - this.utcOffset()) * e2, g3 = this - M4, v3 = O2.m(this, M4);
            return v3 = (l3 = {}, l3[c2] = v3 / 12, l3[f2] = v3, l3[h2] = v3 / 3, l3[o2] = (g3 - m4) / 6048e5, l3[a2] = (g3 - m4) / 864e5, l3[u2] = g3 / n2, l3[s2] = g3 / e2, l3[i2] = g3 / t, l3)[y3] || g3, $2 ? v3 : O2.a(v3);
          }, m3.daysInMonth = function() {
            return this.endOf(f2).$D;
          }, m3.$locale = function() {
            return D2[this.$L];
          }, m3.locale = function(t2, e3) {
            if (!t2)
              return this.$L;
            var n3 = this.clone(), r2 = S2(t2, e3, true);
            return r2 && (n3.$L = r2), n3;
          }, m3.clone = function() {
            return O2.w(this.$d, this);
          }, m3.toDate = function() {
            return new Date(this.valueOf());
          }, m3.toJSON = function() {
            return this.isValid() ? this.toISOString() : null;
          }, m3.toISOString = function() {
            return this.$d.toISOString();
          }, m3.toString = function() {
            return this.$d.toUTCString();
          }, M3;
        }(), T2 = _2.prototype;
        return w2.prototype = T2, [["$ms", r], ["$s", i2], ["$m", s2], ["$H", u2], ["$W", a2], ["$M", f2], ["$y", c2], ["$D", d2]].forEach(function(t2) {
          T2[t2[1]] = function(e3) {
            return this.$g(e3, t2[0], t2[1]);
          };
        }), w2.extend = function(t2, e3) {
          return t2.$i || (t2(e3, _2, w2), t2.$i = true), w2;
        }, w2.locale = S2, w2.isDayjs = p2, w2.unix = function(t2) {
          return w2(1e3 * t2);
        }, w2.en = D2[v2], w2.Ls = D2, w2.p = {}, w2;
      });
    })(dayjs_min);
    const dayjs = dayjs_min.exports;
    var localeData$1 = { exports: {} };
    (function(module2, exports2) {
      !function(n2, e2) {
        module2.exports = e2();
      }(commonjsGlobal, function() {
        return function(n2, e2, t) {
          var r = e2.prototype, o2 = function(n3) {
            return n3 && (n3.indexOf ? n3 : n3.s);
          }, u2 = function(n3, e3, t2, r2, u3) {
            var i3 = n3.name ? n3 : n3.$locale(), a3 = o2(i3[e3]), s3 = o2(i3[t2]), f2 = a3 || s3.map(function(n4) {
              return n4.slice(0, r2);
            });
            if (!u3)
              return f2;
            var d2 = i3.weekStart;
            return f2.map(function(n4, e4) {
              return f2[(e4 + (d2 || 0)) % 7];
            });
          }, i2 = function() {
            return t.Ls[t.locale()];
          }, a2 = function(n3, e3) {
            return n3.formats[e3] || function(n4) {
              return n4.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function(n5, e4, t2) {
                return e4 || t2.slice(1);
              });
            }(n3.formats[e3.toUpperCase()]);
          }, s2 = function() {
            var n3 = this;
            return { months: function(e3) {
              return e3 ? e3.format("MMMM") : u2(n3, "months");
            }, monthsShort: function(e3) {
              return e3 ? e3.format("MMM") : u2(n3, "monthsShort", "months", 3);
            }, firstDayOfWeek: function() {
              return n3.$locale().weekStart || 0;
            }, weekdays: function(e3) {
              return e3 ? e3.format("dddd") : u2(n3, "weekdays");
            }, weekdaysMin: function(e3) {
              return e3 ? e3.format("dd") : u2(n3, "weekdaysMin", "weekdays", 2);
            }, weekdaysShort: function(e3) {
              return e3 ? e3.format("ddd") : u2(n3, "weekdaysShort", "weekdays", 3);
            }, longDateFormat: function(e3) {
              return a2(n3.$locale(), e3);
            }, meridiem: this.$locale().meridiem, ordinal: this.$locale().ordinal };
          };
          r.localeData = function() {
            return s2.bind(this)();
          }, t.localeData = function() {
            var n3 = i2();
            return { firstDayOfWeek: function() {
              return n3.weekStart || 0;
            }, weekdays: function() {
              return t.weekdays();
            }, weekdaysShort: function() {
              return t.weekdaysShort();
            }, weekdaysMin: function() {
              return t.weekdaysMin();
            }, months: function() {
              return t.months();
            }, monthsShort: function() {
              return t.monthsShort();
            }, longDateFormat: function(e3) {
              return a2(n3, e3);
            }, meridiem: n3.meridiem, ordinal: n3.ordinal };
          }, t.months = function() {
            return u2(i2(), "months");
          }, t.monthsShort = function() {
            return u2(i2(), "monthsShort", "months", 3);
          }, t.weekdays = function(n3) {
            return u2(i2(), "weekdays", null, null, n3);
          }, t.weekdaysShort = function(n3) {
            return u2(i2(), "weekdaysShort", "weekdays", 3, n3);
          }, t.weekdaysMin = function(n3) {
            return u2(i2(), "weekdaysMin", "weekdays", 2, n3);
          };
        };
      });
    })(localeData$1);
    const localeData = localeData$1.exports;
    var customParseFormat$1 = { exports: {} };
    (function(module2, exports2) {
      !function(e2, t) {
        module2.exports = t();
      }(commonjsGlobal, function() {
        var e2 = { LTS: "h:mm:ss A", LT: "h:mm A", L: "MM/DD/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY h:mm A", LLLL: "dddd, MMMM D, YYYY h:mm A" }, t = /(\[[^[]*\])|([-_:/.,()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g, n2 = /\d\d/, r = /\d\d?/, i2 = /\d*[^-_:/,()\s\d]+/, o2 = {}, s2 = function(e3) {
          return (e3 = +e3) + (e3 > 68 ? 1900 : 2e3);
        };
        var a2 = function(e3) {
          return function(t2) {
            this[e3] = +t2;
          };
        }, f2 = [/[+-]\d\d:?(\d\d)?|Z/, function(e3) {
          (this.zone || (this.zone = {})).offset = function(e4) {
            if (!e4)
              return 0;
            if ("Z" === e4)
              return 0;
            var t2 = e4.match(/([+-]|\d\d)/g), n3 = 60 * t2[1] + (+t2[2] || 0);
            return 0 === n3 ? 0 : "+" === t2[0] ? -n3 : n3;
          }(e3);
        }], h2 = function(e3) {
          var t2 = o2[e3];
          return t2 && (t2.indexOf ? t2 : t2.s.concat(t2.f));
        }, u2 = function(e3, t2) {
          var n3, r2 = o2.meridiem;
          if (r2) {
            for (var i3 = 1; i3 <= 24; i3 += 1)
              if (e3.indexOf(r2(i3, 0, t2)) > -1) {
                n3 = i3 > 12;
                break;
              }
          } else
            n3 = e3 === (t2 ? "pm" : "PM");
          return n3;
        }, d2 = { A: [i2, function(e3) {
          this.afternoon = u2(e3, false);
        }], a: [i2, function(e3) {
          this.afternoon = u2(e3, true);
        }], S: [/\d/, function(e3) {
          this.milliseconds = 100 * +e3;
        }], SS: [n2, function(e3) {
          this.milliseconds = 10 * +e3;
        }], SSS: [/\d{3}/, function(e3) {
          this.milliseconds = +e3;
        }], s: [r, a2("seconds")], ss: [r, a2("seconds")], m: [r, a2("minutes")], mm: [r, a2("minutes")], H: [r, a2("hours")], h: [r, a2("hours")], HH: [r, a2("hours")], hh: [r, a2("hours")], D: [r, a2("day")], DD: [n2, a2("day")], Do: [i2, function(e3) {
          var t2 = o2.ordinal, n3 = e3.match(/\d+/);
          if (this.day = n3[0], t2)
            for (var r2 = 1; r2 <= 31; r2 += 1)
              t2(r2).replace(/\[|\]/g, "") === e3 && (this.day = r2);
        }], M: [r, a2("month")], MM: [n2, a2("month")], MMM: [i2, function(e3) {
          var t2 = h2("months"), n3 = (h2("monthsShort") || t2.map(function(e4) {
            return e4.slice(0, 3);
          })).indexOf(e3) + 1;
          if (n3 < 1)
            throw new Error();
          this.month = n3 % 12 || n3;
        }], MMMM: [i2, function(e3) {
          var t2 = h2("months").indexOf(e3) + 1;
          if (t2 < 1)
            throw new Error();
          this.month = t2 % 12 || t2;
        }], Y: [/[+-]?\d+/, a2("year")], YY: [n2, function(e3) {
          this.year = s2(e3);
        }], YYYY: [/\d{4}/, a2("year")], Z: f2, ZZ: f2 };
        function c2(n3) {
          var r2, i3;
          r2 = n3, i3 = o2 && o2.formats;
          for (var s3 = (n3 = r2.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function(t2, n4, r3) {
            var o3 = r3 && r3.toUpperCase();
            return n4 || i3[r3] || e2[r3] || i3[o3].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function(e3, t3, n5) {
              return t3 || n5.slice(1);
            });
          })).match(t), a3 = s3.length, f3 = 0; f3 < a3; f3 += 1) {
            var h3 = s3[f3], u3 = d2[h3], c3 = u3 && u3[0], l2 = u3 && u3[1];
            s3[f3] = l2 ? { regex: c3, parser: l2 } : h3.replace(/^\[|\]$/g, "");
          }
          return function(e3) {
            for (var t2 = {}, n4 = 0, r3 = 0; n4 < a3; n4 += 1) {
              var i4 = s3[n4];
              if ("string" == typeof i4)
                r3 += i4.length;
              else {
                var o3 = i4.regex, f4 = i4.parser, h4 = e3.slice(r3), u4 = o3.exec(h4)[0];
                f4.call(t2, u4), e3 = e3.replace(u4, "");
              }
            }
            return function(e4) {
              var t3 = e4.afternoon;
              if (void 0 !== t3) {
                var n5 = e4.hours;
                t3 ? n5 < 12 && (e4.hours += 12) : 12 === n5 && (e4.hours = 0), delete e4.afternoon;
              }
            }(t2), t2;
          };
        }
        return function(e3, t2, n3) {
          n3.p.customParseFormat = true, e3 && e3.parseTwoDigitYear && (s2 = e3.parseTwoDigitYear);
          var r2 = t2.prototype, i3 = r2.parse;
          r2.parse = function(e4) {
            var t3 = e4.date, r3 = e4.utc, s3 = e4.args;
            this.$u = r3;
            var a3 = s3[1];
            if ("string" == typeof a3) {
              var f3 = true === s3[2], h3 = true === s3[3], u3 = f3 || h3, d3 = s3[2];
              h3 && (d3 = s3[2]), o2 = this.$locale(), !f3 && d3 && (o2 = n3.Ls[d3]), this.$d = function(e5, t4, n4) {
                try {
                  if (["x", "X"].indexOf(t4) > -1)
                    return new Date(("X" === t4 ? 1e3 : 1) * e5);
                  var r4 = c2(t4)(e5), i4 = r4.year, o3 = r4.month, s4 = r4.day, a4 = r4.hours, f4 = r4.minutes, h4 = r4.seconds, u4 = r4.milliseconds, d4 = r4.zone, l3 = new Date(), m3 = s4 || (i4 || o3 ? 1 : l3.getDate()), M3 = i4 || l3.getFullYear(), Y2 = 0;
                  i4 && !o3 || (Y2 = o3 > 0 ? o3 - 1 : l3.getMonth());
                  var p2 = a4 || 0, v2 = f4 || 0, D2 = h4 || 0, g2 = u4 || 0;
                  return d4 ? new Date(Date.UTC(M3, Y2, m3, p2, v2, D2, g2 + 60 * d4.offset * 1e3)) : n4 ? new Date(Date.UTC(M3, Y2, m3, p2, v2, D2, g2)) : new Date(M3, Y2, m3, p2, v2, D2, g2);
                } catch (e6) {
                  return new Date("");
                }
              }(t3, a3, r3), this.init(), d3 && true !== d3 && (this.$L = this.locale(d3).$L), u3 && t3 != this.format(a3) && (this.$d = new Date("")), o2 = {};
            } else if (a3 instanceof Array)
              for (var l2 = a3.length, m2 = 1; m2 <= l2; m2 += 1) {
                s3[1] = a3[m2 - 1];
                var M2 = n3.apply(this, s3);
                if (M2.isValid()) {
                  this.$d = M2.$d, this.$L = M2.$L, this.init();
                  break;
                }
                m2 === l2 && (this.$d = new Date(""));
              }
            else
              i3.call(this, e4);
          };
        };
      });
    })(customParseFormat$1);
    const customParseFormat = customParseFormat$1.exports;
    const timeUnits = ["hours", "minutes", "seconds"];
    const DEFAULT_FORMATS_TIME = "HH:mm:ss";
    const DEFAULT_FORMATS_DATE = "YYYY-MM-DD";
    const DEFAULT_FORMATS_DATEPICKER = {
      date: DEFAULT_FORMATS_DATE,
      dates: DEFAULT_FORMATS_DATE,
      week: "gggg[w]ww",
      year: "YYYY",
      month: "YYYY-MM",
      datetime: `${DEFAULT_FORMATS_DATE} ${DEFAULT_FORMATS_TIME}`,
      monthrange: "YYYY-MM",
      daterange: DEFAULT_FORMATS_DATE,
      datetimerange: `${DEFAULT_FORMATS_DATE} ${DEFAULT_FORMATS_TIME}`
    };
    const buildTimeList = (value, bound) => {
      return [
        value > 0 ? value - 1 : void 0,
        value,
        value < bound ? value + 1 : void 0
      ];
    };
    const rangeArr = (n2) => Array.from(Array.from({ length: n2 }).keys());
    const extractDateFormat = (format2) => {
      return format2.replace(/\W?m{1,2}|\W?ZZ/g, "").replace(/\W?h{1,2}|\W?s{1,3}|\W?a/gi, "").trim();
    };
    const extractTimeFormat = (format2) => {
      return format2.replace(/\W?D{1,2}|\W?Do|\W?d{1,4}|\W?M{1,4}|\W?Y{2,4}/g, "").trim();
    };
    const dateEquals = function(a2, b2) {
      const aIsDate = isDate$2(a2);
      const bIsDate = isDate$2(b2);
      if (aIsDate && bIsDate) {
        return a2.getTime() === b2.getTime();
      }
      if (!aIsDate && !bIsDate) {
        return a2 === b2;
      }
      return false;
    };
    const valueEquals = function(a2, b2) {
      const aIsArray = isArray$6(a2);
      const bIsArray = isArray$6(b2);
      if (aIsArray && bIsArray) {
        if (a2.length !== b2.length) {
          return false;
        }
        return a2.every((item, index2) => dateEquals(item, b2[index2]));
      }
      if (!aIsArray && !bIsArray) {
        return dateEquals(a2, b2);
      }
      return false;
    };
    const parseDate = function(date2, format2, lang) {
      const day = isEmpty(format2) || format2 === "x" ? dayjs(date2).locale(lang) : dayjs(date2, format2).locale(lang);
      return day.isValid() ? day : void 0;
    };
    const formatter = function(date2, format2, lang) {
      if (isEmpty(format2))
        return date2;
      if (format2 === "x")
        return +date2;
      return dayjs(date2).locale(lang).format(format2);
    };
    const makeList = (total2, method2) => {
      var _a2;
      const arr = [];
      const disabledArr = method2 == null ? void 0 : method2();
      for (let i2 = 0; i2 < total2; i2++) {
        arr.push((_a2 = disabledArr == null ? void 0 : disabledArr.includes(i2)) != null ? _a2 : false);
      }
      return arr;
    };
    const disabledTimeListsProps = buildProps({
      disabledHours: {
        type: definePropType(Function)
      },
      disabledMinutes: {
        type: definePropType(Function)
      },
      disabledSeconds: {
        type: definePropType(Function)
      }
    });
    const timePanelSharedProps = buildProps({
      visible: Boolean,
      actualVisible: {
        type: Boolean,
        default: void 0
      },
      format: {
        type: String,
        default: ""
      }
    });
    const timePickerDefaultProps = buildProps({
      id: {
        type: definePropType([Array, String])
      },
      name: {
        type: definePropType([Array, String]),
        default: ""
      },
      popperClass: {
        type: String,
        default: ""
      },
      format: String,
      valueFormat: String,
      type: {
        type: String,
        default: ""
      },
      clearable: {
        type: Boolean,
        default: true
      },
      clearIcon: {
        type: definePropType([String, Object]),
        default: circle_close_default
      },
      editable: {
        type: Boolean,
        default: true
      },
      prefixIcon: {
        type: definePropType([String, Object]),
        default: ""
      },
      size: useSizeProp,
      readonly: {
        type: Boolean,
        default: false
      },
      disabled: {
        type: Boolean,
        default: false
      },
      placeholder: {
        type: String,
        default: ""
      },
      popperOptions: {
        type: definePropType(Object),
        default: () => ({})
      },
      modelValue: {
        type: definePropType([Date, Array, String, Number]),
        default: ""
      },
      rangeSeparator: {
        type: String,
        default: "-"
      },
      startPlaceholder: String,
      endPlaceholder: String,
      defaultValue: {
        type: definePropType([Date, Array])
      },
      defaultTime: {
        type: definePropType([Date, Array])
      },
      isRange: {
        type: Boolean,
        default: false
      },
      ...disabledTimeListsProps,
      disabledDate: {
        type: Function
      },
      cellClassName: {
        type: Function
      },
      shortcuts: {
        type: Array,
        default: () => []
      },
      arrowControl: {
        type: Boolean,
        default: false
      },
      label: {
        type: String,
        default: void 0
      },
      tabindex: {
        type: definePropType([String, Number]),
        default: 0
      },
      validateEvent: {
        type: Boolean,
        default: true
      },
      unlinkPanels: Boolean
    });
    const _hoisted_1$13 = ["id", "name", "placeholder", "value", "disabled", "readonly"];
    const _hoisted_2$G = ["id", "name", "placeholder", "value", "disabled", "readonly"];
    const __default__$1z = {
      name: "Picker"
    };
    const _sfc_main$2j = /* @__PURE__ */ defineComponent({
      ...__default__$1z,
      props: timePickerDefaultProps,
      emits: [
        "update:modelValue",
        "change",
        "focus",
        "blur",
        "calendar-change",
        "panel-change",
        "visible-change",
        "keydown"
      ],
      setup(__props, { expose, emit: emit2 }) {
        const props = __props;
        const { lang } = useLocale();
        const nsDate = useNamespace("date");
        const nsInput = useNamespace("input");
        const nsRange = useNamespace("range");
        const elForm = inject(formContextKey, {});
        const elFormItem = inject(formItemContextKey, {});
        const elPopperOptions = inject("ElPopperOptions", {});
        const refPopper = ref();
        const inputRef = ref();
        const pickerVisible = ref(false);
        const pickerActualVisible = ref(false);
        const valueOnOpen = ref(null);
        let hasJustTabExitedInput = false;
        let ignoreFocusEvent = false;
        watch(pickerVisible, (val) => {
          if (!val) {
            userInput.value = null;
            nextTick$1(() => {
              emitChange(props.modelValue);
            });
          } else {
            valueOnOpen.value = props.modelValue;
          }
        });
        const emitChange = (val, isClear) => {
          var _a2;
          if (isClear || !valueEquals(val, valueOnOpen.value)) {
            emit2("change", val);
            props.validateEvent && ((_a2 = elFormItem.validate) == null ? void 0 : _a2.call(elFormItem, "change").catch((err) => debugWarn()));
          }
        };
        const emitInput = (input) => {
          if (!valueEquals(props.modelValue, input)) {
            let formatted;
            if (isArray$6(input)) {
              formatted = input.map((item) => formatter(item, props.valueFormat, lang.value));
            } else if (input) {
              formatted = formatter(input, props.valueFormat, lang.value);
            }
            emit2("update:modelValue", input ? formatted : input, lang.value);
          }
        };
        const emitKeydown = (e2) => {
          emit2("keydown", e2);
        };
        const refInput = computed(() => {
          if (inputRef.value) {
            const _r = isRangeInput.value ? inputRef.value : inputRef.value.$el;
            return Array.from(_r.querySelectorAll("input"));
          }
          return [];
        });
        const setSelectionRange = (start, end2, pos) => {
          const _inputs = refInput.value;
          if (!_inputs.length)
            return;
          if (!pos || pos === "min") {
            _inputs[0].setSelectionRange(start, end2);
            _inputs[0].focus();
          } else if (pos === "max") {
            _inputs[1].setSelectionRange(start, end2);
            _inputs[1].focus();
          }
        };
        const focusOnInputBox = () => {
          focus(true, true);
          nextTick$1(() => {
            ignoreFocusEvent = false;
          });
        };
        const onPick = (date2 = "", visible = false) => {
          if (!visible) {
            focusOnInputBox();
          }
          pickerVisible.value = visible;
          let result;
          if (isArray$6(date2)) {
            result = date2.map((_2) => _2.toDate());
          } else {
            result = date2 ? date2.toDate() : date2;
          }
          userInput.value = null;
          emitInput(result);
        };
        const onBeforeShow = () => {
          pickerActualVisible.value = true;
        };
        const onShow = () => {
          emit2("visible-change", true);
        };
        const onKeydownPopperContent = (event) => {
          if ((event == null ? void 0 : event.key) === EVENT_CODE.esc) {
            focus(true, true);
          }
        };
        const onHide = () => {
          pickerActualVisible.value = false;
          ignoreFocusEvent = false;
          emit2("visible-change", false);
        };
        const focus = (focusStartInput = true, isIgnoreFocusEvent = false) => {
          ignoreFocusEvent = isIgnoreFocusEvent;
          const [leftInput, rightInput] = unref(refInput);
          let input = leftInput;
          if (!focusStartInput && isRangeInput.value) {
            input = rightInput;
          }
          if (input) {
            input.focus();
          }
        };
        const handleFocusInput = (e2) => {
          if (props.readonly || pickerDisabled.value || pickerVisible.value || ignoreFocusEvent) {
            return;
          }
          pickerVisible.value = true;
          emit2("focus", e2);
        };
        let currentHandleBlurDeferCallback = void 0;
        const handleBlurInput = (e2) => {
          const handleBlurDefer = async () => {
            setTimeout(() => {
              var _a2, _b;
              if (currentHandleBlurDeferCallback === handleBlurDefer) {
                if (!(((_a2 = refPopper.value) == null ? void 0 : _a2.isFocusInsideContent()) && !hasJustTabExitedInput) && refInput.value.filter((input) => {
                  return input.contains(document.activeElement);
                }).length === 0) {
                  handleChange();
                  pickerVisible.value = false;
                  emit2("blur", e2);
                  props.validateEvent && ((_b = elFormItem.validate) == null ? void 0 : _b.call(elFormItem, "blur").catch((err) => debugWarn()));
                }
                hasJustTabExitedInput = false;
              }
            }, 0);
          };
          currentHandleBlurDeferCallback = handleBlurDefer;
          handleBlurDefer();
        };
        const pickerDisabled = computed(() => {
          return props.disabled || elForm.disabled;
        });
        const parsedValue2 = computed(() => {
          let dayOrDays;
          if (valueIsEmpty.value) {
            if (pickerOptions.value.getDefaultValue) {
              dayOrDays = pickerOptions.value.getDefaultValue();
            }
          } else {
            if (isArray$6(props.modelValue)) {
              dayOrDays = props.modelValue.map((d2) => parseDate(d2, props.valueFormat, lang.value));
            } else {
              dayOrDays = parseDate(props.modelValue, props.valueFormat, lang.value);
            }
          }
          if (pickerOptions.value.getRangeAvailableTime) {
            const availableResult = pickerOptions.value.getRangeAvailableTime(dayOrDays);
            if (!isEqual$1(availableResult, dayOrDays)) {
              dayOrDays = availableResult;
              emitInput(isArray$6(dayOrDays) ? dayOrDays.map((_2) => _2.toDate()) : dayOrDays.toDate());
            }
          }
          if (isArray$6(dayOrDays) && dayOrDays.some((day) => !day)) {
            dayOrDays = [];
          }
          return dayOrDays;
        });
        const displayValue = computed(() => {
          if (!pickerOptions.value.panelReady)
            return "";
          const formattedValue = formatDayjsToString(parsedValue2.value);
          if (isArray$6(userInput.value)) {
            return [
              userInput.value[0] || formattedValue && formattedValue[0] || "",
              userInput.value[1] || formattedValue && formattedValue[1] || ""
            ];
          } else if (userInput.value !== null) {
            return userInput.value;
          }
          if (!isTimePicker.value && valueIsEmpty.value)
            return "";
          if (!pickerVisible.value && valueIsEmpty.value)
            return "";
          if (formattedValue) {
            return isDatesPicker.value ? formattedValue.join(", ") : formattedValue;
          }
          return "";
        });
        const isTimeLikePicker = computed(() => props.type.includes("time"));
        const isTimePicker = computed(() => props.type.startsWith("time"));
        const isDatesPicker = computed(() => props.type === "dates");
        const triggerIcon = computed(() => props.prefixIcon || (isTimeLikePicker.value ? clock_default : calendar_default));
        const showClose = ref(false);
        const onClearIconClick = (event) => {
          if (props.readonly || pickerDisabled.value)
            return;
          if (showClose.value) {
            event.stopPropagation();
            focusOnInputBox();
            emitInput(null);
            emitChange(null, true);
            showClose.value = false;
            pickerVisible.value = false;
            pickerOptions.value.handleClear && pickerOptions.value.handleClear();
          }
        };
        const valueIsEmpty = computed(() => {
          const { modelValue } = props;
          return !modelValue || isArray$6(modelValue) && !modelValue.filter(Boolean).length;
        });
        const onMouseDownInput = async (event) => {
          var _a2;
          if (props.readonly || pickerDisabled.value)
            return;
          if (((_a2 = event.target) == null ? void 0 : _a2.tagName) !== "INPUT" || refInput.value.includes(document.activeElement)) {
            pickerVisible.value = true;
          }
        };
        const onMouseEnter = () => {
          if (props.readonly || pickerDisabled.value)
            return;
          if (!valueIsEmpty.value && props.clearable) {
            showClose.value = true;
          }
        };
        const onMouseLeave = () => {
          showClose.value = false;
        };
        const onTouchStartInput = (event) => {
          var _a2;
          if (((_a2 = event.touches[0].target) == null ? void 0 : _a2.tagName) !== "INPUT" || refInput.value.includes(document.activeElement)) {
            pickerVisible.value = true;
          }
        };
        const isRangeInput = computed(() => {
          return props.type.includes("range");
        });
        const pickerSize = useSize();
        const popperEl = computed(() => {
          var _a2, _b;
          return (_b = (_a2 = unref(refPopper)) == null ? void 0 : _a2.popperRef) == null ? void 0 : _b.contentRef;
        });
        const actualInputRef = computed(() => {
          var _a2;
          if (unref(isRangeInput)) {
            return unref(inputRef);
          }
          return (_a2 = unref(inputRef)) == null ? void 0 : _a2.$el;
        });
        onClickOutside(actualInputRef, (e2) => {
          const unrefedPopperEl = unref(popperEl);
          const inputEl = unref(actualInputRef);
          if (unrefedPopperEl && (e2.target === unrefedPopperEl || e2.composedPath().includes(unrefedPopperEl)) || e2.target === inputEl || e2.composedPath().includes(inputEl))
            return;
          pickerVisible.value = false;
        });
        const userInput = ref(null);
        const handleChange = () => {
          if (userInput.value) {
            const value = parseUserInputToDayjs(displayValue.value);
            if (value) {
              if (isValidValue2(value)) {
                emitInput(isArray$6(value) ? value.map((_2) => _2.toDate()) : value.toDate());
                userInput.value = null;
              }
            }
          }
          if (userInput.value === "") {
            emitInput(null);
            emitChange(null);
            userInput.value = null;
          }
        };
        const parseUserInputToDayjs = (value) => {
          if (!value)
            return null;
          return pickerOptions.value.parseUserInput(value);
        };
        const formatDayjsToString = (value) => {
          if (!value)
            return null;
          return pickerOptions.value.formatToString(value);
        };
        const isValidValue2 = (value) => {
          return pickerOptions.value.isValidValue(value);
        };
        const handleKeydownInput = async (event) => {
          if (props.readonly || pickerDisabled.value)
            return;
          const { code } = event;
          emitKeydown(event);
          if (code === EVENT_CODE.esc) {
            if (pickerVisible.value === true) {
              pickerVisible.value = false;
              event.preventDefault();
              event.stopPropagation();
            }
            return;
          }
          if (code === EVENT_CODE.down) {
            if (pickerOptions.value.handleFocusPicker) {
              event.preventDefault();
              event.stopPropagation();
            }
            if (pickerVisible.value === false) {
              pickerVisible.value = true;
              await nextTick$1();
            }
            if (pickerOptions.value.handleFocusPicker) {
              pickerOptions.value.handleFocusPicker();
              return;
            }
          }
          if (code === EVENT_CODE.tab) {
            hasJustTabExitedInput = true;
            return;
          }
          if (code === EVENT_CODE.enter || code === EVENT_CODE.numpadEnter) {
            if (userInput.value === null || userInput.value === "" || isValidValue2(parseUserInputToDayjs(displayValue.value))) {
              handleChange();
              pickerVisible.value = false;
            }
            event.stopPropagation();
            return;
          }
          if (userInput.value) {
            event.stopPropagation();
            return;
          }
          if (pickerOptions.value.handleKeydownInput) {
            pickerOptions.value.handleKeydownInput(event);
          }
        };
        const onUserInput = (e2) => {
          userInput.value = e2;
          if (!pickerVisible.value) {
            pickerVisible.value = true;
          }
        };
        const handleStartInput = (event) => {
          const target = event.target;
          if (userInput.value) {
            userInput.value = [target.value, userInput.value[1]];
          } else {
            userInput.value = [target.value, null];
          }
        };
        const handleEndInput = (event) => {
          const target = event.target;
          if (userInput.value) {
            userInput.value = [userInput.value[0], target.value];
          } else {
            userInput.value = [null, target.value];
          }
        };
        const handleStartChange = () => {
          var _a2;
          const values = userInput.value;
          const value = parseUserInputToDayjs(values && values[0]);
          const parsedVal = unref(parsedValue2);
          if (value && value.isValid()) {
            userInput.value = [
              formatDayjsToString(value),
              ((_a2 = displayValue.value) == null ? void 0 : _a2[1]) || null
            ];
            const newValue = [value, parsedVal && (parsedVal[1] || null)];
            if (isValidValue2(newValue)) {
              emitInput(newValue);
              userInput.value = null;
            }
          }
        };
        const handleEndChange = () => {
          var _a2;
          const values = unref(userInput);
          const value = parseUserInputToDayjs(values && values[1]);
          const parsedVal = unref(parsedValue2);
          if (value && value.isValid()) {
            userInput.value = [
              ((_a2 = unref(displayValue)) == null ? void 0 : _a2[0]) || null,
              formatDayjsToString(value)
            ];
            const newValue = [parsedVal && parsedVal[0], value];
            if (isValidValue2(newValue)) {
              emitInput(newValue);
              userInput.value = null;
            }
          }
        };
        const pickerOptions = ref({});
        const onSetPickerOption = (e2) => {
          pickerOptions.value[e2[0]] = e2[1];
          pickerOptions.value.panelReady = true;
        };
        const onCalendarChange = (e2) => {
          emit2("calendar-change", e2);
        };
        const onPanelChange = (value, mode, view) => {
          emit2("panel-change", value, mode, view);
        };
        provide("EP_PICKER_BASE", {
          props
        });
        expose({
          focus,
          handleFocusInput,
          handleBlurInput,
          onPick
        });
        return (_ctx, _cache) => {
          return openBlock(), createBlock(unref(ElTooltip), mergeProps({
            ref_key: "refPopper",
            ref: refPopper,
            visible: pickerVisible.value,
            effect: "light",
            pure: "",
            trigger: "click"
          }, _ctx.$attrs, {
            role: "dialog",
            teleported: "",
            transition: `${unref(nsDate).namespace.value}-zoom-in-top`,
            "popper-class": [`${unref(nsDate).namespace.value}-picker__popper`, _ctx.popperClass],
            "popper-options": unref(elPopperOptions),
            "fallback-placements": ["bottom", "top", "right", "left"],
            "gpu-acceleration": false,
            "stop-popper-mouse-event": false,
            "hide-after": 0,
            persistent: "",
            onBeforeShow,
            onShow,
            onHide
          }), {
            default: withCtx(() => [
              !unref(isRangeInput) ? (openBlock(), createBlock(unref(ElInput), {
                key: 0,
                id: _ctx.id,
                ref_key: "inputRef",
                ref: inputRef,
                "container-role": "combobox",
                "model-value": unref(displayValue),
                name: _ctx.name,
                size: unref(pickerSize),
                disabled: unref(pickerDisabled),
                placeholder: _ctx.placeholder,
                class: normalizeClass([unref(nsDate).b("editor"), unref(nsDate).bm("editor", _ctx.type), _ctx.$attrs.class]),
                style: normalizeStyle(_ctx.$attrs.style),
                readonly: !_ctx.editable || _ctx.readonly || unref(isDatesPicker) || _ctx.type === "week",
                label: _ctx.label,
                tabindex: _ctx.tabindex,
                "validate-event": _ctx.validateEvent,
                onInput: onUserInput,
                onFocus: handleFocusInput,
                onBlur: handleBlurInput,
                onKeydown: handleKeydownInput,
                onChange: handleChange,
                onMousedown: onMouseDownInput,
                onMouseenter: onMouseEnter,
                onMouseleave: onMouseLeave,
                onTouchstart: onTouchStartInput,
                onClick: _cache[0] || (_cache[0] = withModifiers(() => {
                }, ["stop"]))
              }, {
                prefix: withCtx(() => [
                  unref(triggerIcon) ? (openBlock(), createBlock(unref(ElIcon), {
                    key: 0,
                    class: normalizeClass(unref(nsInput).e("icon")),
                    onMousedown: withModifiers(onMouseDownInput, ["prevent"]),
                    onTouchstart: onTouchStartInput
                  }, {
                    default: withCtx(() => [
                      (openBlock(), createBlock(resolveDynamicComponent(unref(triggerIcon))))
                    ]),
                    _: 1
                  }, 8, ["class", "onMousedown"])) : createCommentVNode("v-if", true)
                ]),
                suffix: withCtx(() => [
                  showClose.value && _ctx.clearIcon ? (openBlock(), createBlock(unref(ElIcon), {
                    key: 0,
                    class: normalizeClass(`${unref(nsInput).e("icon")} clear-icon`),
                    onClick: withModifiers(onClearIconClick, ["stop"])
                  }, {
                    default: withCtx(() => [
                      (openBlock(), createBlock(resolveDynamicComponent(_ctx.clearIcon)))
                    ]),
                    _: 1
                  }, 8, ["class", "onClick"])) : createCommentVNode("v-if", true)
                ]),
                _: 1
              }, 8, ["id", "model-value", "name", "size", "disabled", "placeholder", "class", "style", "readonly", "label", "tabindex", "validate-event", "onKeydown"])) : (openBlock(), createElementBlock("div", {
                key: 1,
                ref_key: "inputRef",
                ref: inputRef,
                class: normalizeClass([
                  unref(nsDate).b("editor"),
                  unref(nsDate).bm("editor", _ctx.type),
                  unref(nsInput).e("wrapper"),
                  unref(nsDate).is("disabled", unref(pickerDisabled)),
                  unref(nsDate).is("active", pickerVisible.value),
                  unref(nsRange).b("editor"),
                  unref(pickerSize) ? unref(nsRange).bm("editor", unref(pickerSize)) : "",
                  _ctx.$attrs.class
                ]),
                style: normalizeStyle(_ctx.$attrs.style),
                onClick: handleFocusInput,
                onMouseenter: onMouseEnter,
                onMouseleave: onMouseLeave,
                onTouchstart: onTouchStartInput,
                onKeydown: handleKeydownInput
              }, [
                unref(triggerIcon) ? (openBlock(), createBlock(unref(ElIcon), {
                  key: 0,
                  class: normalizeClass([unref(nsInput).e("icon"), unref(nsRange).e("icon")]),
                  onMousedown: withModifiers(onMouseDownInput, ["prevent"]),
                  onTouchstart: onTouchStartInput
                }, {
                  default: withCtx(() => [
                    (openBlock(), createBlock(resolveDynamicComponent(unref(triggerIcon))))
                  ]),
                  _: 1
                }, 8, ["class", "onMousedown"])) : createCommentVNode("v-if", true),
                createBaseVNode("input", {
                  id: _ctx.id && _ctx.id[0],
                  autocomplete: "off",
                  name: _ctx.name && _ctx.name[0],
                  placeholder: _ctx.startPlaceholder,
                  value: unref(displayValue) && unref(displayValue)[0],
                  disabled: unref(pickerDisabled),
                  readonly: !_ctx.editable || _ctx.readonly,
                  class: normalizeClass(unref(nsRange).b("input")),
                  onMousedown: onMouseDownInput,
                  onInput: handleStartInput,
                  onChange: handleStartChange,
                  onFocus: handleFocusInput,
                  onBlur: handleBlurInput
                }, null, 42, _hoisted_1$13),
                renderSlot(_ctx.$slots, "range-separator", {}, () => [
                  createBaseVNode("span", {
                    class: normalizeClass(unref(nsRange).b("separator"))
                  }, toDisplayString$1(_ctx.rangeSeparator), 3)
                ]),
                createBaseVNode("input", {
                  id: _ctx.id && _ctx.id[1],
                  autocomplete: "off",
                  name: _ctx.name && _ctx.name[1],
                  placeholder: _ctx.endPlaceholder,
                  value: unref(displayValue) && unref(displayValue)[1],
                  disabled: unref(pickerDisabled),
                  readonly: !_ctx.editable || _ctx.readonly,
                  class: normalizeClass(unref(nsRange).b("input")),
                  onMousedown: onMouseDownInput,
                  onFocus: handleFocusInput,
                  onBlur: handleBlurInput,
                  onInput: handleEndInput,
                  onChange: handleEndChange
                }, null, 42, _hoisted_2$G),
                _ctx.clearIcon ? (openBlock(), createBlock(unref(ElIcon), {
                  key: 1,
                  class: normalizeClass([
                    unref(nsInput).e("icon"),
                    unref(nsRange).e("close-icon"),
                    {
                      [unref(nsRange).e("close-icon--hidden")]: !showClose.value
                    }
                  ]),
                  onClick: onClearIconClick
                }, {
                  default: withCtx(() => [
                    (openBlock(), createBlock(resolveDynamicComponent(_ctx.clearIcon)))
                  ]),
                  _: 1
                }, 8, ["class"])) : createCommentVNode("v-if", true)
              ], 38))
            ]),
            content: withCtx(() => [
              renderSlot(_ctx.$slots, "default", {
                visible: pickerVisible.value,
                actualVisible: pickerActualVisible.value,
                parsedValue: unref(parsedValue2),
                format: _ctx.format,
                unlinkPanels: _ctx.unlinkPanels,
                type: _ctx.type,
                defaultValue: _ctx.defaultValue,
                onPick,
                onSelectRange: setSelectionRange,
                onSetPickerOption,
                onCalendarChange,
                onPanelChange,
                onKeydown: onKeydownPopperContent,
                onMousedown: _cache[1] || (_cache[1] = withModifiers(() => {
                }, ["stop"]))
              })
            ]),
            _: 3
          }, 16, ["visible", "transition", "popper-class", "popper-options"]);
        };
      }
    });
    var CommonPicker = /* @__PURE__ */ _export_sfc$1(_sfc_main$2j, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/common/picker.vue"]]);
    const panelTimePickerProps = buildProps({
      ...timePanelSharedProps,
      datetimeRole: String,
      parsedValue: {
        type: definePropType(Object)
      }
    });
    const useTimePanel = ({
      getAvailableHours,
      getAvailableMinutes,
      getAvailableSeconds
    }) => {
      const getAvailableTime = (date2, role, first, compareDate) => {
        const availableTimeGetters = {
          hour: getAvailableHours,
          minute: getAvailableMinutes,
          second: getAvailableSeconds
        };
        let result = date2;
        ["hour", "minute", "second"].forEach((type2) => {
          if (availableTimeGetters[type2]) {
            let availableTimeSlots;
            const method2 = availableTimeGetters[type2];
            switch (type2) {
              case "minute": {
                availableTimeSlots = method2(result.hour(), role, compareDate);
                break;
              }
              case "second": {
                availableTimeSlots = method2(result.hour(), result.minute(), role, compareDate);
                break;
              }
              default: {
                availableTimeSlots = method2(role, compareDate);
                break;
              }
            }
            if ((availableTimeSlots == null ? void 0 : availableTimeSlots.length) && !availableTimeSlots.includes(result[type2]())) {
              const pos = first ? 0 : availableTimeSlots.length - 1;
              result = result[type2](availableTimeSlots[pos]);
            }
          }
        });
        return result;
      };
      const timePickerOptions = {};
      const onSetOption = ([key, val]) => {
        timePickerOptions[key] = val;
      };
      return {
        timePickerOptions,
        getAvailableTime,
        onSetOption
      };
    };
    const makeAvailableArr = (disabledList) => {
      const trueOrNumber = (isDisabled, index2) => isDisabled || index2;
      const getNumber = (predicate) => predicate !== true;
      return disabledList.map(trueOrNumber).filter(getNumber);
    };
    const getTimeLists = (disabledHours, disabledMinutes, disabledSeconds) => {
      const getHoursList = (role, compare) => {
        return makeList(24, disabledHours && (() => disabledHours == null ? void 0 : disabledHours(role, compare)));
      };
      const getMinutesList = (hour, role, compare) => {
        return makeList(60, disabledMinutes && (() => disabledMinutes == null ? void 0 : disabledMinutes(hour, role, compare)));
      };
      const getSecondsList = (hour, minute, role, compare) => {
        return makeList(60, disabledSeconds && (() => disabledSeconds == null ? void 0 : disabledSeconds(hour, minute, role, compare)));
      };
      return {
        getHoursList,
        getMinutesList,
        getSecondsList
      };
    };
    const buildAvailableTimeSlotGetter = (disabledHours, disabledMinutes, disabledSeconds) => {
      const { getHoursList, getMinutesList, getSecondsList } = getTimeLists(disabledHours, disabledMinutes, disabledSeconds);
      const getAvailableHours = (role, compare) => {
        return makeAvailableArr(getHoursList(role, compare));
      };
      const getAvailableMinutes = (hour, role, compare) => {
        return makeAvailableArr(getMinutesList(hour, role, compare));
      };
      const getAvailableSeconds = (hour, minute, role, compare) => {
        return makeAvailableArr(getSecondsList(hour, minute, role, compare));
      };
      return {
        getAvailableHours,
        getAvailableMinutes,
        getAvailableSeconds
      };
    };
    const useOldValue = (props) => {
      const oldValue = ref(props.parsedValue);
      watch(() => props.visible, (val) => {
        if (!val) {
          oldValue.value = props.parsedValue;
        }
      });
      return oldValue;
    };
    const nodeList = /* @__PURE__ */ new Map();
    let startClick;
    if (isClient) {
      document.addEventListener("mousedown", (e2) => startClick = e2);
      document.addEventListener("mouseup", (e2) => {
        for (const handlers of nodeList.values()) {
          for (const { documentHandler } of handlers) {
            documentHandler(e2, startClick);
          }
        }
      });
    }
    function createDocumentHandler(el, binding2) {
      let excludes = [];
      if (Array.isArray(binding2.arg)) {
        excludes = binding2.arg;
      } else if (isElement$1(binding2.arg)) {
        excludes.push(binding2.arg);
      }
      return function(mouseup, mousedown) {
        const popperRef = binding2.instance.popperRef;
        const mouseUpTarget = mouseup.target;
        const mouseDownTarget = mousedown == null ? void 0 : mousedown.target;
        const isBound = !binding2 || !binding2.instance;
        const isTargetExists = !mouseUpTarget || !mouseDownTarget;
        const isContainedByEl = el.contains(mouseUpTarget) || el.contains(mouseDownTarget);
        const isSelf = el === mouseUpTarget;
        const isTargetExcluded = excludes.length && excludes.some((item) => item == null ? void 0 : item.contains(mouseUpTarget)) || excludes.length && excludes.includes(mouseDownTarget);
        const isContainedByPopper = popperRef && (popperRef.contains(mouseUpTarget) || popperRef.contains(mouseDownTarget));
        if (isBound || isTargetExists || isContainedByEl || isSelf || isTargetExcluded || isContainedByPopper) {
          return;
        }
        binding2.value(mouseup, mousedown);
      };
    }
    const ClickOutside = {
      beforeMount(el, binding2) {
        if (!nodeList.has(el)) {
          nodeList.set(el, []);
        }
        nodeList.get(el).push({
          documentHandler: createDocumentHandler(el, binding2),
          bindingFn: binding2.value
        });
      },
      updated(el, binding2) {
        if (!nodeList.has(el)) {
          nodeList.set(el, []);
        }
        const handlers = nodeList.get(el);
        const oldHandlerIndex = handlers.findIndex((item) => item.bindingFn === binding2.oldValue);
        const newHandler = {
          documentHandler: createDocumentHandler(el, binding2),
          bindingFn: binding2.value
        };
        if (oldHandlerIndex >= 0) {
          handlers.splice(oldHandlerIndex, 1, newHandler);
        } else {
          handlers.push(newHandler);
        }
      },
      unmounted(el) {
        nodeList.delete(el);
      }
    };
    const RepeatClick = {
      beforeMount(el, binding2) {
        let interval = null;
        let isHandlerCalled = false;
        const handler = () => binding2.value && binding2.value();
        const clear2 = () => {
          clearInterval(interval);
          interval = null;
          if (!isHandlerCalled) {
            handler();
          }
          isHandlerCalled = false;
        };
        el.addEventListener("mousedown", (e2) => {
          if (e2.button !== 0)
            return;
          document.addEventListener("mouseup", clear2, { once: true });
          clearInterval(interval);
          interval = setInterval(() => {
            isHandlerCalled = true;
            handler();
          }, 100);
        });
      }
    };
    const FOCUSABLE_CHILDREN = "_trap-focus-children";
    const FOCUS_STACK = [];
    const FOCUS_HANDLER = (e2) => {
      if (FOCUS_STACK.length === 0)
        return;
      const focusableElement = FOCUS_STACK[FOCUS_STACK.length - 1][FOCUSABLE_CHILDREN];
      if (focusableElement.length > 0 && e2.code === EVENT_CODE.tab) {
        if (focusableElement.length === 1) {
          e2.preventDefault();
          if (document.activeElement !== focusableElement[0]) {
            focusableElement[0].focus();
          }
          return;
        }
        const goingBackward = e2.shiftKey;
        const isFirst = e2.target === focusableElement[0];
        const isLast = e2.target === focusableElement[focusableElement.length - 1];
        if (isFirst && goingBackward) {
          e2.preventDefault();
          focusableElement[focusableElement.length - 1].focus();
        }
        if (isLast && !goingBackward) {
          e2.preventDefault();
          focusableElement[0].focus();
        }
      }
    };
    const TrapFocus = {
      beforeMount(el) {
        el[FOCUSABLE_CHILDREN] = obtainAllFocusableElements$1(el);
        FOCUS_STACK.push(el);
        if (FOCUS_STACK.length <= 1) {
          document.addEventListener("keydown", FOCUS_HANDLER);
        }
      },
      updated(el) {
        nextTick$1(() => {
          el[FOCUSABLE_CHILDREN] = obtainAllFocusableElements$1(el);
        });
      },
      unmounted() {
        FOCUS_STACK.shift();
        if (FOCUS_STACK.length === 0) {
          document.removeEventListener("keydown", FOCUS_HANDLER);
        }
      }
    };
    var v$1 = false, o, f, s, u, d, N, l, p, m, w, D, x, E, M, F;
    function a() {
      if (!v$1) {
        v$1 = true;
        var e2 = navigator.userAgent, n2 = /(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(e2), i2 = /(Mac OS X)|(Windows)|(Linux)/.exec(e2);
        if (x = /\b(iPhone|iP[ao]d)/.exec(e2), E = /\b(iP[ao]d)/.exec(e2), w = /Android/i.exec(e2), M = /FBAN\/\w+;/i.exec(e2), F = /Mobile/i.exec(e2), D = !!/Win64/.exec(e2), n2) {
          o = n2[1] ? parseFloat(n2[1]) : n2[5] ? parseFloat(n2[5]) : NaN, o && document && document.documentMode && (o = document.documentMode);
          var r = /(?:Trident\/(\d+.\d+))/.exec(e2);
          N = r ? parseFloat(r[1]) + 4 : o, f = n2[2] ? parseFloat(n2[2]) : NaN, s = n2[3] ? parseFloat(n2[3]) : NaN, u = n2[4] ? parseFloat(n2[4]) : NaN, u ? (n2 = /(?:Chrome\/(\d+\.\d+))/.exec(e2), d = n2 && n2[1] ? parseFloat(n2[1]) : NaN) : d = NaN;
        } else
          o = f = s = d = u = NaN;
        if (i2) {
          if (i2[1]) {
            var t = /(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(e2);
            l = t ? parseFloat(t[1].replace("_", ".")) : true;
          } else
            l = false;
          p = !!i2[2], m = !!i2[3];
        } else
          l = p = m = false;
      }
    }
    var _ = { ie: function() {
      return a() || o;
    }, ieCompatibilityMode: function() {
      return a() || N > o;
    }, ie64: function() {
      return _.ie() && D;
    }, firefox: function() {
      return a() || f;
    }, opera: function() {
      return a() || s;
    }, webkit: function() {
      return a() || u;
    }, safari: function() {
      return _.webkit();
    }, chrome: function() {
      return a() || d;
    }, windows: function() {
      return a() || p;
    }, osx: function() {
      return a() || l;
    }, linux: function() {
      return a() || m;
    }, iphone: function() {
      return a() || x;
    }, mobile: function() {
      return a() || x || E || w || F;
    }, nativeApp: function() {
      return a() || M;
    }, android: function() {
      return a() || w;
    }, ipad: function() {
      return a() || E;
    } }, A = _;
    var c = !!(typeof window < "u" && window.document && window.document.createElement), U = { canUseDOM: c, canUseWorkers: typeof Worker < "u", canUseEventListeners: c && !!(window.addEventListener || window.attachEvent), canUseViewport: c && !!window.screen, isInWorker: !c }, h = U;
    var X;
    h.canUseDOM && (X = document.implementation && document.implementation.hasFeature && document.implementation.hasFeature("", "") !== true);
    function S(e2, n2) {
      if (!h.canUseDOM || n2 && !("addEventListener" in document))
        return false;
      var i2 = "on" + e2, r = i2 in document;
      if (!r) {
        var t = document.createElement("div");
        t.setAttribute(i2, "return;"), r = typeof t[i2] == "function";
      }
      return !r && X && e2 === "wheel" && (r = document.implementation.hasFeature("Events.wheel", "3.0")), r;
    }
    var b = S;
    var O = 10, I = 40, P = 800;
    function T(e2) {
      var n2 = 0, i2 = 0, r = 0, t = 0;
      return "detail" in e2 && (i2 = e2.detail), "wheelDelta" in e2 && (i2 = -e2.wheelDelta / 120), "wheelDeltaY" in e2 && (i2 = -e2.wheelDeltaY / 120), "wheelDeltaX" in e2 && (n2 = -e2.wheelDeltaX / 120), "axis" in e2 && e2.axis === e2.HORIZONTAL_AXIS && (n2 = i2, i2 = 0), r = n2 * O, t = i2 * O, "deltaY" in e2 && (t = e2.deltaY), "deltaX" in e2 && (r = e2.deltaX), (r || t) && e2.deltaMode && (e2.deltaMode == 1 ? (r *= I, t *= I) : (r *= P, t *= P)), r && !n2 && (n2 = r < 1 ? -1 : 1), t && !i2 && (i2 = t < 1 ? -1 : 1), { spinX: n2, spinY: i2, pixelX: r, pixelY: t };
    }
    T.getEventType = function() {
      return A.firefox() ? "DOMMouseScroll" : b("wheel") ? "wheel" : "mousewheel";
    };
    var Y = T;
    /**
    * Checks if an event is supported in the current execution environment.
    *
    * NOTE: This will not work correctly for non-generic events such as `change`,
    * `reset`, `load`, `error`, and `select`.
    *
    * Borrows from Modernizr.
    *
    * @param {string} eventNameSuffix Event name, e.g. "click".
    * @param {?boolean} capture Check if the capture phase is supported.
    * @return {boolean} True if the event is supported.
    * @internal
    * @license Modernizr 3.0.0pre (Custom Build) | MIT
    */
    const mousewheel = function(element, callback) {
      if (element && element.addEventListener) {
        const fn2 = function(event) {
          const normalized = Y(event);
          callback && Reflect.apply(callback, this, [event, normalized]);
        };
        element.addEventListener("wheel", fn2, { passive: true });
      }
    };
    const Mousewheel = {
      beforeMount(el, binding2) {
        mousewheel(el, binding2.value);
      }
    };
    const basicTimeSpinnerProps = buildProps({
      role: {
        type: String,
        required: true
      },
      spinnerDate: {
        type: definePropType(Object),
        required: true
      },
      showSeconds: {
        type: Boolean,
        default: true
      },
      arrowControl: Boolean,
      amPmMode: {
        type: definePropType(String),
        default: ""
      },
      ...disabledTimeListsProps
    });
    const _hoisted_1$12 = ["onClick"];
    const _hoisted_2$F = ["onMouseenter"];
    const _sfc_main$2i = /* @__PURE__ */ defineComponent({
      __name: "basic-time-spinner",
      props: basicTimeSpinnerProps,
      emits: ["change", "select-range", "set-option"],
      setup(__props, { emit: emit2 }) {
        const props = __props;
        const ns2 = useNamespace("time");
        const { getHoursList, getMinutesList, getSecondsList } = getTimeLists(props.disabledHours, props.disabledMinutes, props.disabledSeconds);
        let isScrolling = false;
        const currentScrollbar = ref();
        const listHoursRef = ref();
        const listMinutesRef = ref();
        const listSecondsRef = ref();
        const listRefsMap = {
          hours: listHoursRef,
          minutes: listMinutesRef,
          seconds: listSecondsRef
        };
        const spinnerItems = computed(() => {
          return props.showSeconds ? timeUnits : timeUnits.slice(0, 2);
        });
        const timePartials = computed(() => {
          const { spinnerDate } = props;
          const hours = spinnerDate.hour();
          const minutes = spinnerDate.minute();
          const seconds = spinnerDate.second();
          return { hours, minutes, seconds };
        });
        const timeList = computed(() => {
          const { hours, minutes } = unref(timePartials);
          return {
            hours: getHoursList(props.role),
            minutes: getMinutesList(hours, props.role),
            seconds: getSecondsList(hours, minutes, props.role)
          };
        });
        const arrowControlTimeList = computed(() => {
          const { hours, minutes, seconds } = unref(timePartials);
          return {
            hours: buildTimeList(hours, 23),
            minutes: buildTimeList(minutes, 59),
            seconds: buildTimeList(seconds, 59)
          };
        });
        const debouncedResetScroll = debounce((type2) => {
          isScrolling = false;
          adjustCurrentSpinner(type2);
        }, 200);
        const getAmPmFlag = (hour) => {
          const shouldShowAmPm = !!props.amPmMode;
          if (!shouldShowAmPm)
            return "";
          const isCapital = props.amPmMode === "A";
          let content = hour < 12 ? " am" : " pm";
          if (isCapital)
            content = content.toUpperCase();
          return content;
        };
        const emitSelectRange = (type2) => {
          let range2;
          switch (type2) {
            case "hours":
              range2 = [0, 2];
              break;
            case "minutes":
              range2 = [3, 5];
              break;
            case "seconds":
              range2 = [6, 8];
              break;
          }
          const [left2, right2] = range2;
          emit2("select-range", left2, right2);
          currentScrollbar.value = type2;
        };
        const adjustCurrentSpinner = (type2) => {
          adjustSpinner(type2, unref(timePartials)[type2]);
        };
        const adjustSpinners = () => {
          adjustCurrentSpinner("hours");
          adjustCurrentSpinner("minutes");
          adjustCurrentSpinner("seconds");
        };
        const getScrollbarElement = (el) => el.querySelector(`.${ns2.namespace.value}-scrollbar__wrap`);
        const adjustSpinner = (type2, value) => {
          if (props.arrowControl)
            return;
          const scrollbar = unref(listRefsMap[type2]);
          if (scrollbar && scrollbar.$el) {
            getScrollbarElement(scrollbar.$el).scrollTop = Math.max(0, value * typeItemHeight(type2));
          }
        };
        const typeItemHeight = (type2) => {
          const scrollbar = unref(listRefsMap[type2]);
          return (scrollbar == null ? void 0 : scrollbar.$el.querySelector("li").offsetHeight) || 0;
        };
        const onIncrement = () => {
          scrollDown(1);
        };
        const onDecrement = () => {
          scrollDown(-1);
        };
        const scrollDown = (step) => {
          if (!currentScrollbar.value) {
            emitSelectRange("hours");
          }
          const label = currentScrollbar.value;
          let now2 = unref(timePartials)[label];
          const total2 = currentScrollbar.value === "hours" ? 24 : 60;
          now2 = (now2 + step + total2) % total2;
          modifyDateField(label, now2);
          adjustSpinner(label, now2);
          nextTick$1(() => emitSelectRange(label));
        };
        const modifyDateField = (type2, value) => {
          const list = unref(timeList)[type2];
          const isDisabled = list[value];
          if (isDisabled)
            return;
          const { hours, minutes, seconds } = unref(timePartials);
          let changeTo;
          switch (type2) {
            case "hours":
              changeTo = props.spinnerDate.hour(value).minute(minutes).second(seconds);
              break;
            case "minutes":
              changeTo = props.spinnerDate.hour(hours).minute(value).second(seconds);
              break;
            case "seconds":
              changeTo = props.spinnerDate.hour(hours).minute(minutes).second(value);
              break;
          }
          emit2("change", changeTo);
        };
        const handleClick = (type2, { value, disabled }) => {
          if (!disabled) {
            modifyDateField(type2, value);
            emitSelectRange(type2);
            adjustSpinner(type2, value);
          }
        };
        const handleScroll2 = (type2) => {
          isScrolling = true;
          debouncedResetScroll(type2);
          const value = Math.min(Math.round((getScrollbarElement(unref(listRefsMap[type2]).$el).scrollTop - (scrollBarHeight(type2) * 0.5 - 10) / typeItemHeight(type2) + 3) / typeItemHeight(type2)), type2 === "hours" ? 23 : 59);
          modifyDateField(type2, value);
        };
        const scrollBarHeight = (type2) => {
          return unref(listRefsMap[type2]).$el.offsetHeight;
        };
        const bindScrollEvent = () => {
          const bindFunction = (type2) => {
            const scrollbar = unref(listRefsMap[type2]);
            if (scrollbar && scrollbar.$el) {
              getScrollbarElement(scrollbar.$el).onscroll = () => {
                handleScroll2(type2);
              };
            }
          };
          bindFunction("hours");
          bindFunction("minutes");
          bindFunction("seconds");
        };
        onMounted(() => {
          nextTick$1(() => {
            !props.arrowControl && bindScrollEvent();
            adjustSpinners();
            if (props.role === "start")
              emitSelectRange("hours");
          });
        });
        const setRef2 = (scrollbar, type2) => {
          listRefsMap[type2].value = scrollbar;
        };
        emit2("set-option", [`${props.role}_scrollDown`, scrollDown]);
        emit2("set-option", [`${props.role}_emitSelectRange`, emitSelectRange]);
        watch(() => props.spinnerDate, () => {
          if (isScrolling)
            return;
          adjustSpinners();
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            class: normalizeClass([unref(ns2).b("spinner"), { "has-seconds": _ctx.showSeconds }])
          }, [
            !_ctx.arrowControl ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(unref(spinnerItems), (item) => {
              return openBlock(), createBlock(unref(ElScrollbar), {
                key: item,
                ref_for: true,
                ref: (scollbar) => setRef2(scollbar, item),
                class: normalizeClass(unref(ns2).be("spinner", "wrapper")),
                "wrap-style": "max-height: inherit;",
                "view-class": unref(ns2).be("spinner", "list"),
                noresize: "",
                tag: "ul",
                onMouseenter: ($event) => emitSelectRange(item),
                onMousemove: ($event) => adjustCurrentSpinner(item)
              }, {
                default: withCtx(() => [
                  (openBlock(true), createElementBlock(Fragment, null, renderList(unref(timeList)[item], (disabled, key) => {
                    return openBlock(), createElementBlock("li", {
                      key,
                      class: normalizeClass([
                        unref(ns2).be("spinner", "item"),
                        unref(ns2).is("active", key === unref(timePartials)[item]),
                        unref(ns2).is("disabled", disabled)
                      ]),
                      onClick: ($event) => handleClick(item, { value: key, disabled })
                    }, [
                      item === "hours" ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                        createTextVNode(toDisplayString$1(("0" + (_ctx.amPmMode ? key % 12 || 12 : key)).slice(-2)) + toDisplayString$1(getAmPmFlag(key)), 1)
                      ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                        createTextVNode(toDisplayString$1(("0" + key).slice(-2)), 1)
                      ], 64))
                    ], 10, _hoisted_1$12);
                  }), 128))
                ]),
                _: 2
              }, 1032, ["class", "view-class", "onMouseenter", "onMousemove"]);
            }), 128)) : createCommentVNode("v-if", true),
            _ctx.arrowControl ? (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(unref(spinnerItems), (item) => {
              return openBlock(), createElementBlock("div", {
                key: item,
                class: normalizeClass([unref(ns2).be("spinner", "wrapper"), unref(ns2).is("arrow")]),
                onMouseenter: ($event) => emitSelectRange(item)
              }, [
                withDirectives((openBlock(), createBlock(unref(ElIcon), {
                  class: normalizeClass(["arrow-up", unref(ns2).be("spinner", "arrow")])
                }, {
                  default: withCtx(() => [
                    createVNode(unref(arrow_up_default))
                  ]),
                  _: 1
                }, 8, ["class"])), [
                  [unref(RepeatClick), onDecrement]
                ]),
                withDirectives((openBlock(), createBlock(unref(ElIcon), {
                  class: normalizeClass(["arrow-down", unref(ns2).be("spinner", "arrow")])
                }, {
                  default: withCtx(() => [
                    createVNode(unref(arrow_down_default))
                  ]),
                  _: 1
                }, 8, ["class"])), [
                  [unref(RepeatClick), onIncrement]
                ]),
                createBaseVNode("ul", {
                  class: normalizeClass(unref(ns2).be("spinner", "list"))
                }, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList(unref(arrowControlTimeList)[item], (time, key) => {
                    return openBlock(), createElementBlock("li", {
                      key,
                      class: normalizeClass([
                        unref(ns2).be("spinner", "item"),
                        unref(ns2).is("active", time === unref(timePartials)[item]),
                        unref(ns2).is("disabled", unref(timeList)[item][time])
                      ])
                    }, [
                      typeof time === "number" ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                        item === "hours" ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                          createTextVNode(toDisplayString$1(("0" + (_ctx.amPmMode ? time % 12 || 12 : time)).slice(-2)) + toDisplayString$1(getAmPmFlag(time)), 1)
                        ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                          createTextVNode(toDisplayString$1(("0" + time).slice(-2)), 1)
                        ], 64))
                      ], 64)) : createCommentVNode("v-if", true)
                    ], 2);
                  }), 128))
                ], 2)
              ], 42, _hoisted_2$F);
            }), 128)) : createCommentVNode("v-if", true)
          ], 2);
        };
      }
    });
    var TimeSpinner = /* @__PURE__ */ _export_sfc$1(_sfc_main$2i, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/time-picker-com/basic-time-spinner.vue"]]);
    const _sfc_main$2h = /* @__PURE__ */ defineComponent({
      __name: "panel-time-pick",
      props: panelTimePickerProps,
      emits: ["pick", "select-range", "set-picker-option"],
      setup(__props, { emit: emit2 }) {
        const props = __props;
        const pickerBase = inject("EP_PICKER_BASE");
        const {
          arrowControl,
          disabledHours,
          disabledMinutes,
          disabledSeconds,
          defaultValue
        } = pickerBase.props;
        const { getAvailableHours, getAvailableMinutes, getAvailableSeconds } = buildAvailableTimeSlotGetter(disabledHours, disabledMinutes, disabledSeconds);
        const ns2 = useNamespace("time");
        const { t, lang } = useLocale();
        const selectionRange = ref([0, 2]);
        const oldValue = useOldValue(props);
        const transitionName = computed(() => {
          return isUndefined$1(props.actualVisible) ? `${ns2.namespace.value}-zoom-in-top` : "";
        });
        const showSeconds = computed(() => {
          return props.format.includes("ss");
        });
        const amPmMode = computed(() => {
          if (props.format.includes("A"))
            return "A";
          if (props.format.includes("a"))
            return "a";
          return "";
        });
        const isValidValue2 = (_date) => {
          const parsedDate = dayjs(_date).locale(lang.value);
          const result = getRangeAvailableTime(parsedDate);
          return parsedDate.isSame(result);
        };
        const handleCancel = () => {
          emit2("pick", oldValue.value, false);
        };
        const handleConfirm = (visible = false, first = false) => {
          if (first)
            return;
          emit2("pick", props.parsedValue, visible);
        };
        const handleChange = (_date) => {
          if (!props.visible) {
            return;
          }
          const result = getRangeAvailableTime(_date).millisecond(0);
          emit2("pick", result, true);
        };
        const setSelectionRange = (start, end2) => {
          emit2("select-range", start, end2);
          selectionRange.value = [start, end2];
        };
        const changeSelectionRange = (step) => {
          const list = [0, 3].concat(showSeconds.value ? [6] : []);
          const mapping = ["hours", "minutes"].concat(showSeconds.value ? ["seconds"] : []);
          const index2 = list.indexOf(selectionRange.value[0]);
          const next = (index2 + step + list.length) % list.length;
          timePickerOptions["start_emitSelectRange"](mapping[next]);
        };
        const handleKeydown = (event) => {
          const code = event.code;
          const { left: left2, right: right2, up: up2, down: down2 } = EVENT_CODE;
          if ([left2, right2].includes(code)) {
            const step = code === left2 ? -1 : 1;
            changeSelectionRange(step);
            event.preventDefault();
            return;
          }
          if ([up2, down2].includes(code)) {
            const step = code === up2 ? -1 : 1;
            timePickerOptions["start_scrollDown"](step);
            event.preventDefault();
            return;
          }
        };
        const { timePickerOptions, onSetOption, getAvailableTime } = useTimePanel({
          getAvailableHours,
          getAvailableMinutes,
          getAvailableSeconds
        });
        const getRangeAvailableTime = (date2) => {
          return getAvailableTime(date2, props.datetimeRole || "", true);
        };
        const parseUserInput = (value) => {
          if (!value)
            return null;
          return dayjs(value, props.format).locale(lang.value);
        };
        const formatToString = (value) => {
          if (!value)
            return null;
          return value.format(props.format);
        };
        const getDefaultValue2 = () => {
          return dayjs(defaultValue).locale(lang.value);
        };
        emit2("set-picker-option", ["isValidValue", isValidValue2]);
        emit2("set-picker-option", ["formatToString", formatToString]);
        emit2("set-picker-option", ["parseUserInput", parseUserInput]);
        emit2("set-picker-option", ["handleKeydownInput", handleKeydown]);
        emit2("set-picker-option", ["getRangeAvailableTime", getRangeAvailableTime]);
        emit2("set-picker-option", ["getDefaultValue", getDefaultValue2]);
        return (_ctx, _cache) => {
          return openBlock(), createBlock(Transition, { name: unref(transitionName) }, {
            default: withCtx(() => [
              _ctx.actualVisible || _ctx.visible ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(unref(ns2).b("panel"))
              }, [
                createBaseVNode("div", {
                  class: normalizeClass([unref(ns2).be("panel", "content"), { "has-seconds": unref(showSeconds) }])
                }, [
                  createVNode(TimeSpinner, {
                    ref: "spinner",
                    role: _ctx.datetimeRole || "start",
                    "arrow-control": unref(arrowControl),
                    "show-seconds": unref(showSeconds),
                    "am-pm-mode": unref(amPmMode),
                    "spinner-date": _ctx.parsedValue,
                    "disabled-hours": unref(disabledHours),
                    "disabled-minutes": unref(disabledMinutes),
                    "disabled-seconds": unref(disabledSeconds),
                    onChange: handleChange,
                    onSetOption: unref(onSetOption),
                    onSelectRange: setSelectionRange
                  }, null, 8, ["role", "arrow-control", "show-seconds", "am-pm-mode", "spinner-date", "disabled-hours", "disabled-minutes", "disabled-seconds", "onSetOption"])
                ], 2),
                createBaseVNode("div", {
                  class: normalizeClass(unref(ns2).be("panel", "footer"))
                }, [
                  createBaseVNode("button", {
                    type: "button",
                    class: normalizeClass([unref(ns2).be("panel", "btn"), "cancel"]),
                    onClick: handleCancel
                  }, toDisplayString$1(unref(t)("el.datepicker.cancel")), 3),
                  createBaseVNode("button", {
                    type: "button",
                    class: normalizeClass([unref(ns2).be("panel", "btn"), "confirm"]),
                    onClick: _cache[0] || (_cache[0] = ($event) => handleConfirm())
                  }, toDisplayString$1(unref(t)("el.datepicker.confirm")), 3)
                ], 2)
              ], 2)) : createCommentVNode("v-if", true)
            ]),
            _: 1
          }, 8, ["name"]);
        };
      }
    });
    var TimePickPanel = /* @__PURE__ */ _export_sfc$1(_sfc_main$2h, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/time-picker-com/panel-time-pick.vue"]]);
    const panelTimeRangeProps = buildProps({
      ...timePanelSharedProps,
      parsedValue: {
        type: definePropType(Array)
      }
    });
    const _hoisted_1$11 = ["disabled"];
    const _sfc_main$2g = /* @__PURE__ */ defineComponent({
      __name: "panel-time-range",
      props: panelTimeRangeProps,
      emits: ["pick", "select-range", "set-picker-option"],
      setup(__props, { emit: emit2 }) {
        const props = __props;
        const makeSelectRange = (start, end2) => {
          const result = [];
          for (let i2 = start; i2 <= end2; i2++) {
            result.push(i2);
          }
          return result;
        };
        const { t, lang } = useLocale();
        const nsTime = useNamespace("time");
        const nsPicker = useNamespace("picker");
        const pickerBase = inject("EP_PICKER_BASE");
        const {
          arrowControl,
          disabledHours,
          disabledMinutes,
          disabledSeconds,
          defaultValue
        } = pickerBase.props;
        const startTime2 = computed(() => props.parsedValue[0]);
        const endTime = computed(() => props.parsedValue[1]);
        const oldValue = useOldValue(props);
        const handleCancel = () => {
          emit2("pick", oldValue.value, false);
        };
        const showSeconds = computed(() => {
          return props.format.includes("ss");
        });
        const amPmMode = computed(() => {
          if (props.format.includes("A"))
            return "A";
          if (props.format.includes("a"))
            return "a";
          return "";
        });
        const handleConfirm = (visible = false) => {
          emit2("pick", [startTime2.value, endTime.value], visible);
        };
        const handleMinChange = (date2) => {
          handleChange(date2.millisecond(0), endTime.value);
        };
        const handleMaxChange = (date2) => {
          handleChange(startTime2.value, date2.millisecond(0));
        };
        const isValidValue2 = (_date) => {
          const parsedDate = _date.map((_2) => dayjs(_2).locale(lang.value));
          const result = getRangeAvailableTime(parsedDate);
          return parsedDate[0].isSame(result[0]) && parsedDate[1].isSame(result[1]);
        };
        const handleChange = (start, end2) => {
          emit2("pick", [start, end2], true);
        };
        const btnConfirmDisabled = computed(() => {
          return startTime2.value > endTime.value;
        });
        const selectionRange = ref([0, 2]);
        const setMinSelectionRange = (start, end2) => {
          emit2("select-range", start, end2, "min");
          selectionRange.value = [start, end2];
        };
        const offset2 = computed(() => showSeconds.value ? 11 : 8);
        const setMaxSelectionRange = (start, end2) => {
          emit2("select-range", start, end2, "max");
          const _offset = unref(offset2);
          selectionRange.value = [start + _offset, end2 + _offset];
        };
        const changeSelectionRange = (step) => {
          const list = showSeconds.value ? [0, 3, 6, 11, 14, 17] : [0, 3, 8, 11];
          const mapping = ["hours", "minutes"].concat(showSeconds.value ? ["seconds"] : []);
          const index2 = list.indexOf(selectionRange.value[0]);
          const next = (index2 + step + list.length) % list.length;
          const half = list.length / 2;
          if (next < half) {
            timePickerOptions["start_emitSelectRange"](mapping[next]);
          } else {
            timePickerOptions["end_emitSelectRange"](mapping[next - half]);
          }
        };
        const handleKeydown = (event) => {
          const code = event.code;
          const { left: left2, right: right2, up: up2, down: down2 } = EVENT_CODE;
          if ([left2, right2].includes(code)) {
            const step = code === left2 ? -1 : 1;
            changeSelectionRange(step);
            event.preventDefault();
            return;
          }
          if ([up2, down2].includes(code)) {
            const step = code === up2 ? -1 : 1;
            const role = selectionRange.value[0] < offset2.value ? "start" : "end";
            timePickerOptions[`${role}_scrollDown`](step);
            event.preventDefault();
            return;
          }
        };
        const disabledHours_ = (role, compare) => {
          const defaultDisable = disabledHours ? disabledHours(role) : [];
          const isStart = role === "start";
          const compareDate = compare || (isStart ? endTime.value : startTime2.value);
          const compareHour = compareDate.hour();
          const nextDisable = isStart ? makeSelectRange(compareHour + 1, 23) : makeSelectRange(0, compareHour - 1);
          return union$1(defaultDisable, nextDisable);
        };
        const disabledMinutes_ = (hour, role, compare) => {
          const defaultDisable = disabledMinutes ? disabledMinutes(hour, role) : [];
          const isStart = role === "start";
          const compareDate = compare || (isStart ? endTime.value : startTime2.value);
          const compareHour = compareDate.hour();
          if (hour !== compareHour) {
            return defaultDisable;
          }
          const compareMinute = compareDate.minute();
          const nextDisable = isStart ? makeSelectRange(compareMinute + 1, 59) : makeSelectRange(0, compareMinute - 1);
          return union$1(defaultDisable, nextDisable);
        };
        const disabledSeconds_ = (hour, minute, role, compare) => {
          const defaultDisable = disabledSeconds ? disabledSeconds(hour, minute, role) : [];
          const isStart = role === "start";
          const compareDate = compare || (isStart ? endTime.value : startTime2.value);
          const compareHour = compareDate.hour();
          const compareMinute = compareDate.minute();
          if (hour !== compareHour || minute !== compareMinute) {
            return defaultDisable;
          }
          const compareSecond = compareDate.second();
          const nextDisable = isStart ? makeSelectRange(compareSecond + 1, 59) : makeSelectRange(0, compareSecond - 1);
          return union$1(defaultDisable, nextDisable);
        };
        const getRangeAvailableTime = ([start, end2]) => {
          return [
            getAvailableTime(start, "start", true, end2),
            getAvailableTime(end2, "end", false, start)
          ];
        };
        const { getAvailableHours, getAvailableMinutes, getAvailableSeconds } = buildAvailableTimeSlotGetter(disabledHours_, disabledMinutes_, disabledSeconds_);
        const {
          timePickerOptions,
          getAvailableTime,
          onSetOption
        } = useTimePanel({
          getAvailableHours,
          getAvailableMinutes,
          getAvailableSeconds
        });
        const parseUserInput = (days) => {
          if (!days)
            return null;
          if (isArray$6(days)) {
            return days.map((d2) => dayjs(d2, props.format).locale(lang.value));
          }
          return dayjs(days, props.format).locale(lang.value);
        };
        const formatToString = (days) => {
          if (!days)
            return null;
          if (isArray$6(days)) {
            return days.map((d2) => d2.format(props.format));
          }
          return days.format(props.format);
        };
        const getDefaultValue2 = () => {
          if (isArray$6(defaultValue)) {
            return defaultValue.map((d2) => dayjs(d2).locale(lang.value));
          }
          const defaultDay = dayjs(defaultValue).locale(lang.value);
          return [defaultDay, defaultDay.add(60, "m")];
        };
        emit2("set-picker-option", ["formatToString", formatToString]);
        emit2("set-picker-option", ["parseUserInput", parseUserInput]);
        emit2("set-picker-option", ["isValidValue", isValidValue2]);
        emit2("set-picker-option", ["handleKeydownInput", handleKeydown]);
        emit2("set-picker-option", ["getDefaultValue", getDefaultValue2]);
        emit2("set-picker-option", ["getRangeAvailableTime", getRangeAvailableTime]);
        return (_ctx, _cache) => {
          return _ctx.actualVisible ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass([unref(nsTime).b("range-picker"), unref(nsPicker).b("panel")])
          }, [
            createBaseVNode("div", {
              class: normalizeClass(unref(nsTime).be("range-picker", "content"))
            }, [
              createBaseVNode("div", {
                class: normalizeClass(unref(nsTime).be("range-picker", "cell"))
              }, [
                createBaseVNode("div", {
                  class: normalizeClass(unref(nsTime).be("range-picker", "header"))
                }, toDisplayString$1(unref(t)("el.datepicker.startTime")), 3),
                createBaseVNode("div", {
                  class: normalizeClass([
                    unref(nsTime).be("range-picker", "body"),
                    unref(nsTime).be("panel", "content"),
                    unref(nsTime).is("arrow", unref(arrowControl)),
                    { "has-seconds": unref(showSeconds) }
                  ])
                }, [
                  createVNode(TimeSpinner, {
                    ref: "minSpinner",
                    role: "start",
                    "show-seconds": unref(showSeconds),
                    "am-pm-mode": unref(amPmMode),
                    "arrow-control": unref(arrowControl),
                    "spinner-date": unref(startTime2),
                    "disabled-hours": disabledHours_,
                    "disabled-minutes": disabledMinutes_,
                    "disabled-seconds": disabledSeconds_,
                    onChange: handleMinChange,
                    onSetOption: unref(onSetOption),
                    onSelectRange: setMinSelectionRange
                  }, null, 8, ["show-seconds", "am-pm-mode", "arrow-control", "spinner-date", "onSetOption"])
                ], 2)
              ], 2),
              createBaseVNode("div", {
                class: normalizeClass(unref(nsTime).be("range-picker", "cell"))
              }, [
                createBaseVNode("div", {
                  class: normalizeClass(unref(nsTime).be("range-picker", "header"))
                }, toDisplayString$1(unref(t)("el.datepicker.endTime")), 3),
                createBaseVNode("div", {
                  class: normalizeClass([
                    unref(nsTime).be("range-picker", "body"),
                    unref(nsTime).be("panel", "content"),
                    unref(nsTime).is("arrow", unref(arrowControl)),
                    { "has-seconds": unref(showSeconds) }
                  ])
                }, [
                  createVNode(TimeSpinner, {
                    ref: "maxSpinner",
                    role: "end",
                    "show-seconds": unref(showSeconds),
                    "am-pm-mode": unref(amPmMode),
                    "arrow-control": unref(arrowControl),
                    "spinner-date": unref(endTime),
                    "disabled-hours": disabledHours_,
                    "disabled-minutes": disabledMinutes_,
                    "disabled-seconds": disabledSeconds_,
                    onChange: handleMaxChange,
                    onSetOption: unref(onSetOption),
                    onSelectRange: setMaxSelectionRange
                  }, null, 8, ["show-seconds", "am-pm-mode", "arrow-control", "spinner-date", "onSetOption"])
                ], 2)
              ], 2)
            ], 2),
            createBaseVNode("div", {
              class: normalizeClass(unref(nsTime).be("panel", "footer"))
            }, [
              createBaseVNode("button", {
                type: "button",
                class: normalizeClass([unref(nsTime).be("panel", "btn"), "cancel"]),
                onClick: _cache[0] || (_cache[0] = ($event) => handleCancel())
              }, toDisplayString$1(unref(t)("el.datepicker.cancel")), 3),
              createBaseVNode("button", {
                type: "button",
                class: normalizeClass([unref(nsTime).be("panel", "btn"), "confirm"]),
                disabled: unref(btnConfirmDisabled),
                onClick: _cache[1] || (_cache[1] = ($event) => handleConfirm())
              }, toDisplayString$1(unref(t)("el.datepicker.confirm")), 11, _hoisted_1$11)
            ], 2)
          ], 2)) : createCommentVNode("v-if", true);
        };
      }
    });
    var TimeRangePanel = /* @__PURE__ */ _export_sfc$1(_sfc_main$2g, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/time-picker-com/panel-time-range.vue"]]);
    dayjs.extend(customParseFormat);
    var TimePicker = defineComponent({
      name: "ElTimePicker",
      install: null,
      props: {
        ...timePickerDefaultProps,
        isRange: {
          type: Boolean,
          default: false
        }
      },
      emits: ["update:modelValue"],
      setup(props, ctx) {
        const commonPicker = ref();
        const [type2, Panel] = props.isRange ? ["timerange", TimeRangePanel] : ["time", TimePickPanel];
        const modelUpdater = (value) => ctx.emit("update:modelValue", value);
        provide("ElPopperOptions", props.popperOptions);
        ctx.expose({
          focus: (e2) => {
            var _a2;
            (_a2 = commonPicker.value) == null ? void 0 : _a2.handleFocusInput(e2);
          },
          blur: (e2) => {
            var _a2;
            (_a2 = commonPicker.value) == null ? void 0 : _a2.handleBlurInput(e2);
          }
        });
        return () => {
          var _a2;
          const format2 = (_a2 = props.format) != null ? _a2 : DEFAULT_FORMATS_TIME;
          return createVNode(CommonPicker, mergeProps(props, {
            "ref": commonPicker,
            "type": type2,
            "format": format2,
            "onUpdate:modelValue": modelUpdater
          }), {
            default: (props2) => createVNode(Panel, props2, null)
          });
        };
      }
    });
    const _TimePicker = TimePicker;
    _TimePicker.install = (app2) => {
      app2.component(_TimePicker.name, _TimePicker);
    };
    const ElTimePicker = _TimePicker;
    const getPrevMonthLastDays = (date2, count) => {
      const lastDay = date2.subtract(1, "month").endOf("month").date();
      return rangeArr(count).map((_2, index2) => lastDay - (count - index2 - 1));
    };
    const getMonthDays = (date2) => {
      const days = date2.daysInMonth();
      return rangeArr(days).map((_2, index2) => index2 + 1);
    };
    const toNestedArr = (days) => rangeArr(days.length / 7).map((index2) => {
      const start = index2 * 7;
      return days.slice(start, start + 7);
    });
    const dateTableProps = buildProps({
      selectedDay: {
        type: definePropType(Object)
      },
      range: {
        type: definePropType(Array)
      },
      date: {
        type: definePropType(Object),
        required: true
      },
      hideHeader: {
        type: Boolean
      }
    });
    const dateTableEmits = {
      pick: (value) => isObject$7(value)
    };
    const _hoisted_1$10 = { key: 0 };
    const _hoisted_2$E = ["onClick"];
    const __default__$1y = {
      name: "DateTable"
    };
    const _sfc_main$2f = /* @__PURE__ */ defineComponent({
      ...__default__$1y,
      props: dateTableProps,
      emits: dateTableEmits,
      setup(__props, { expose, emit: emit2 }) {
        const props = __props;
        dayjs.extend(localeData);
        const { t, lang } = useLocale();
        const nsTable = useNamespace("calendar-table");
        const nsDay = useNamespace("calendar-day");
        const now2 = dayjs().locale(lang.value);
        const firstDayOfWeek = now2.$locale().weekStart || 0;
        const isInRange = computed(() => !!props.range && !!props.range.length);
        const rows = computed(() => {
          let days = [];
          if (isInRange.value) {
            const [start, end2] = props.range;
            const currentMonthRange = rangeArr(end2.date() - start.date() + 1).map((index2) => ({
              text: start.date() + index2,
              type: "current"
            }));
            let remaining = currentMonthRange.length % 7;
            remaining = remaining === 0 ? 0 : 7 - remaining;
            const nextMonthRange = rangeArr(remaining).map((_2, index2) => ({
              text: index2 + 1,
              type: "next"
            }));
            days = currentMonthRange.concat(nextMonthRange);
          } else {
            const firstDay = props.date.startOf("month").day();
            const prevMonthDays = getPrevMonthLastDays(props.date, firstDay - firstDayOfWeek).map((day) => ({
              text: day,
              type: "prev"
            }));
            const currentMonthDays = getMonthDays(props.date).map((day) => ({
              text: day,
              type: "current"
            }));
            days = [...prevMonthDays, ...currentMonthDays];
            const remaining = 7 - (days.length % 7 || 7);
            const nextMonthDays = rangeArr(remaining).map((_2, index2) => ({
              text: index2 + 1,
              type: "next"
            }));
            days = days.concat(nextMonthDays);
          }
          return toNestedArr(days);
        });
        const weekDays = computed(() => {
          const start = firstDayOfWeek;
          if (start === 0) {
            return WEEK_DAYS.map((_2) => t(`el.datepicker.weeks.${_2}`));
          } else {
            return WEEK_DAYS.slice(start).concat(WEEK_DAYS.slice(0, start)).map((_2) => t(`el.datepicker.weeks.${_2}`));
          }
        });
        const getFormattedDate = (day, type2) => {
          switch (type2) {
            case "prev":
              return props.date.startOf("month").subtract(1, "month").date(day);
            case "next":
              return props.date.startOf("month").add(1, "month").date(day);
            case "current":
              return props.date.date(day);
          }
        };
        const getCellClass = ({ text, type: type2 }) => {
          const classes = [type2];
          if (type2 === "current") {
            const date2 = getFormattedDate(text, type2);
            if (date2.isSame(props.selectedDay, "day")) {
              classes.push(nsDay.is("selected"));
            }
            if (date2.isSame(now2, "day")) {
              classes.push(nsDay.is("today"));
            }
          }
          return classes;
        };
        const handlePickDay = ({ text, type: type2 }) => {
          const date2 = getFormattedDate(text, type2);
          emit2("pick", date2);
        };
        const getSlotData = ({ text, type: type2 }) => {
          const day = getFormattedDate(text, type2);
          return {
            isSelected: day.isSame(props.selectedDay),
            type: `${type2}-month`,
            day: day.format("YYYY-MM-DD"),
            date: day.toDate()
          };
        };
        expose({
          getFormattedDate
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("table", {
            class: normalizeClass([unref(nsTable).b(), unref(nsTable).is("range", unref(isInRange))]),
            cellspacing: "0",
            cellpadding: "0"
          }, [
            !_ctx.hideHeader ? (openBlock(), createElementBlock("thead", _hoisted_1$10, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(weekDays), (day) => {
                return openBlock(), createElementBlock("th", { key: day }, toDisplayString$1(day), 1);
              }), 128))
            ])) : createCommentVNode("v-if", true),
            createBaseVNode("tbody", null, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(rows), (row, index2) => {
                return openBlock(), createElementBlock("tr", {
                  key: index2,
                  class: normalizeClass({
                    [unref(nsTable).e("row")]: true,
                    [unref(nsTable).em("row", "hide-border")]: index2 === 0 && _ctx.hideHeader
                  })
                }, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList(row, (cell, key) => {
                    return openBlock(), createElementBlock("td", {
                      key,
                      class: normalizeClass(getCellClass(cell)),
                      onClick: ($event) => handlePickDay(cell)
                    }, [
                      createBaseVNode("div", {
                        class: normalizeClass(unref(nsDay).b())
                      }, [
                        renderSlot(_ctx.$slots, "dateCell", {
                          data: getSlotData(cell)
                        }, () => [
                          createBaseVNode("span", null, toDisplayString$1(cell.text), 1)
                        ])
                      ], 2)
                    ], 10, _hoisted_2$E);
                  }), 128))
                ], 2);
              }), 128))
            ])
          ], 2);
        };
      }
    });
    var DateTable$1 = /* @__PURE__ */ _export_sfc$1(_sfc_main$2f, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/calendar/src/date-table.vue"]]);
    const isValidRange$1 = (range2) => isArray$6(range2) && range2.length === 2 && range2.every((item) => isDate$2(item));
    const calendarProps = buildProps({
      modelValue: {
        type: Date
      },
      range: {
        type: definePropType(Array),
        validator: isValidRange$1
      }
    });
    const calendarEmits = {
      [UPDATE_MODEL_EVENT]: (value) => isDate$2(value),
      [INPUT_EVENT]: (value) => isDate$2(value)
    };
    const __default__$1x = {
      name: "ElCalendar"
    };
    const _sfc_main$2e = /* @__PURE__ */ defineComponent({
      ...__default__$1x,
      props: calendarProps,
      emits: calendarEmits,
      setup(__props, { expose, emit: emit2 }) {
        const props = __props;
        const ns2 = useNamespace("calendar");
        const { t, lang } = useLocale();
        const selectedDay = ref();
        const now2 = dayjs().locale(lang.value);
        const realSelectedDay = computed({
          get() {
            if (!props.modelValue)
              return selectedDay.value;
            return date2.value;
          },
          set(val) {
            if (!val)
              return;
            selectedDay.value = val;
            const result = val.toDate();
            emit2(INPUT_EVENT, result);
            emit2(UPDATE_MODEL_EVENT, result);
          }
        });
        const validatedRange = computed(() => {
          if (!props.range)
            return [];
          const rangeArrDayjs = props.range.map((_2) => dayjs(_2).locale(lang.value));
          const [startDayjs, endDayjs] = rangeArrDayjs;
          if (startDayjs.isAfter(endDayjs)) {
            return [];
          }
          if (startDayjs.isSame(endDayjs, "month")) {
            return calculateValidatedDateRange(startDayjs, endDayjs);
          } else {
            if (startDayjs.add(1, "month").month() !== endDayjs.month()) {
              return [];
            }
            return calculateValidatedDateRange(startDayjs, endDayjs);
          }
        });
        const date2 = computed(() => {
          if (!props.modelValue) {
            if (realSelectedDay.value) {
              return realSelectedDay.value;
            } else if (validatedRange.value.length) {
              return validatedRange.value[0][0];
            }
            return now2;
          } else {
            return dayjs(props.modelValue).locale(lang.value);
          }
        });
        const prevMonthDayjs = computed(() => date2.value.subtract(1, "month").date(1));
        const nextMonthDayjs = computed(() => date2.value.add(1, "month").date(1));
        const prevYearDayjs = computed(() => date2.value.subtract(1, "year").date(1));
        const nextYearDayjs = computed(() => date2.value.add(1, "year").date(1));
        const i18nDate = computed(() => {
          const pickedMonth = `el.datepicker.month${date2.value.format("M")}`;
          return `${date2.value.year()} ${t("el.datepicker.year")} ${t(pickedMonth)}`;
        });
        const calculateValidatedDateRange = (startDayjs, endDayjs) => {
          const firstDay = startDayjs.startOf("week");
          const lastDay = endDayjs.endOf("week");
          const firstMonth = firstDay.get("month");
          const lastMonth = lastDay.get("month");
          if (firstMonth === lastMonth) {
            return [[firstDay, lastDay]];
          } else if (firstMonth + 1 === lastMonth) {
            const firstMonthLastDay = firstDay.endOf("month");
            const lastMonthFirstDay = lastDay.startOf("month");
            const isSameWeek = firstMonthLastDay.isSame(lastMonthFirstDay, "week");
            const lastMonthStartDay = isSameWeek ? lastMonthFirstDay.add(1, "week") : lastMonthFirstDay;
            return [
              [firstDay, firstMonthLastDay],
              [lastMonthStartDay.startOf("week"), lastDay]
            ];
          } else if (firstMonth + 2 === lastMonth || (firstMonth + 1) % 11 === lastMonth) {
            const firstMonthLastDay = firstDay.endOf("month");
            const secondMonthFirstDay = firstDay.add(1, "month").startOf("month");
            const secondMonthStartDay = firstMonthLastDay.isSame(secondMonthFirstDay, "week") ? secondMonthFirstDay.add(1, "week") : secondMonthFirstDay;
            const secondMonthLastDay = secondMonthStartDay.endOf("month");
            const lastMonthFirstDay = lastDay.startOf("month");
            const lastMonthStartDay = secondMonthLastDay.isSame(lastMonthFirstDay, "week") ? lastMonthFirstDay.add(1, "week") : lastMonthFirstDay;
            return [
              [firstDay, firstMonthLastDay],
              [secondMonthStartDay.startOf("week"), secondMonthLastDay],
              [lastMonthStartDay.startOf("week"), lastDay]
            ];
          } else {
            return [];
          }
        };
        const pickDay = (day) => {
          realSelectedDay.value = day;
        };
        const selectDate = (type2) => {
          let day;
          if (type2 === "prev-month") {
            day = prevMonthDayjs.value;
          } else if (type2 === "next-month") {
            day = nextMonthDayjs.value;
          } else if (type2 === "prev-year") {
            day = prevYearDayjs.value;
          } else if (type2 === "next-year") {
            day = nextYearDayjs.value;
          } else {
            day = now2;
          }
          if (day.isSame(date2.value, "day"))
            return;
          pickDay(day);
        };
        expose({
          selectedDay: realSelectedDay,
          pickDay,
          selectDate,
          calculateValidatedDateRange
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            class: normalizeClass(unref(ns2).b())
          }, [
            createBaseVNode("div", {
              class: normalizeClass(unref(ns2).e("header"))
            }, [
              renderSlot(_ctx.$slots, "header", { date: unref(i18nDate) }, () => [
                createBaseVNode("div", {
                  class: normalizeClass(unref(ns2).e("title"))
                }, toDisplayString$1(unref(i18nDate)), 3),
                unref(validatedRange).length === 0 ? (openBlock(), createElementBlock("div", {
                  key: 0,
                  class: normalizeClass(unref(ns2).e("button-group"))
                }, [
                  createVNode(unref(ElButtonGroup$1), null, {
                    default: withCtx(() => [
                      createVNode(unref(ElButton), {
                        size: "small",
                        onClick: _cache[0] || (_cache[0] = ($event) => selectDate("prev-month"))
                      }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString$1(unref(t)("el.datepicker.prevMonth")), 1)
                        ]),
                        _: 1
                      }),
                      createVNode(unref(ElButton), {
                        size: "small",
                        onClick: _cache[1] || (_cache[1] = ($event) => selectDate("today"))
                      }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString$1(unref(t)("el.datepicker.today")), 1)
                        ]),
                        _: 1
                      }),
                      createVNode(unref(ElButton), {
                        size: "small",
                        onClick: _cache[2] || (_cache[2] = ($event) => selectDate("next-month"))
                      }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString$1(unref(t)("el.datepicker.nextMonth")), 1)
                        ]),
                        _: 1
                      })
                    ]),
                    _: 1
                  })
                ], 2)) : createCommentVNode("v-if", true)
              ])
            ], 2),
            unref(validatedRange).length === 0 ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(unref(ns2).e("body"))
            }, [
              createVNode(DateTable$1, {
                date: unref(date2),
                "selected-day": unref(realSelectedDay),
                onPick: pickDay
              }, createSlots({ _: 2 }, [
                _ctx.$slots.dateCell ? {
                  name: "dateCell",
                  fn: withCtx((data) => [
                    renderSlot(_ctx.$slots, "dateCell", normalizeProps(guardReactiveProps(data)))
                  ])
                } : void 0
              ]), 1032, ["date", "selected-day"])
            ], 2)) : (openBlock(), createElementBlock("div", {
              key: 1,
              class: normalizeClass(unref(ns2).e("body"))
            }, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(validatedRange), (range_, index2) => {
                return openBlock(), createBlock(DateTable$1, {
                  key: index2,
                  date: range_[0],
                  "selected-day": unref(realSelectedDay),
                  range: range_,
                  "hide-header": index2 !== 0,
                  onPick: pickDay
                }, createSlots({ _: 2 }, [
                  _ctx.$slots.dateCell ? {
                    name: "dateCell",
                    fn: withCtx((data) => [
                      renderSlot(_ctx.$slots, "dateCell", normalizeProps(guardReactiveProps(data)))
                    ])
                  } : void 0
                ]), 1032, ["date", "selected-day", "range", "hide-header"]);
              }), 128))
            ], 2))
          ], 2);
        };
      }
    });
    var Calendar = /* @__PURE__ */ _export_sfc$1(_sfc_main$2e, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/calendar/src/calendar.vue"]]);
    const ElCalendar = withInstall(Calendar);
    const cardProps = buildProps({
      header: {
        type: String,
        default: ""
      },
      bodyStyle: {
        type: definePropType([String, Object, Array]),
        default: ""
      },
      shadow: {
        type: String,
        values: ["always", "hover", "never"],
        default: "always"
      }
    });
    const __default__$1w = {
      name: "ElCard"
    };
    const _sfc_main$2d = /* @__PURE__ */ defineComponent({
      ...__default__$1w,
      props: cardProps,
      setup(__props) {
        const ns2 = useNamespace("card");
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            class: normalizeClass([unref(ns2).b(), unref(ns2).is(`${_ctx.shadow}-shadow`)])
          }, [
            _ctx.$slots.header || _ctx.header ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(unref(ns2).e("header"))
            }, [
              renderSlot(_ctx.$slots, "header", {}, () => [
                createTextVNode(toDisplayString$1(_ctx.header), 1)
              ])
            ], 2)) : createCommentVNode("v-if", true),
            createBaseVNode("div", {
              class: normalizeClass(unref(ns2).e("body")),
              style: normalizeStyle(_ctx.bodyStyle)
            }, [
              renderSlot(_ctx.$slots, "default")
            ], 6)
          ], 2);
        };
      }
    });
    var Card = /* @__PURE__ */ _export_sfc$1(_sfc_main$2d, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/card/src/card.vue"]]);
    const ElCard = withInstall(Card);
    const carouselProps = buildProps({
      initialIndex: {
        type: Number,
        default: 0
      },
      height: {
        type: String,
        default: ""
      },
      trigger: {
        type: String,
        values: ["hover", "click"],
        default: "hover"
      },
      autoplay: {
        type: Boolean,
        default: true
      },
      interval: {
        type: Number,
        default: 3e3
      },
      indicatorPosition: {
        type: String,
        values: ["", "none", "outside"],
        default: ""
      },
      indicator: {
        type: Boolean,
        default: true
      },
      arrow: {
        type: String,
        values: ["always", "hover", "never"],
        default: "hover"
      },
      type: {
        type: String,
        values: ["", "card"],
        default: ""
      },
      loop: {
        type: Boolean,
        default: true
      },
      direction: {
        type: String,
        values: ["horizontal", "vertical"],
        default: "horizontal"
      },
      pauseOnHover: {
        type: Boolean,
        default: true
      }
    });
    const carouselEmits = {
      change: (current, prev) => [current, prev].every(isNumber$1)
    };
    const _hoisted_1$$ = ["onMouseenter", "onMouseleave"];
    const _hoisted_2$D = ["onMouseenter", "onClick"];
    const _hoisted_3$k = { key: 0 };
    const __default__$1v = {
      name: "ElCarousel"
    };
    const _sfc_main$2c = /* @__PURE__ */ defineComponent({
      ...__default__$1v,
      props: carouselProps,
      emits: carouselEmits,
      setup(__props, { expose, emit: emit2 }) {
        const props = __props;
        const ns2 = useNamespace("carousel");
        const THROTTLE_TIME = 300;
        const activeIndex = ref(-1);
        const timer = ref(null);
        const hover = ref(false);
        const root2 = ref();
        const items = ref([]);
        const arrowDisplay = computed(() => props.arrow !== "never" && !unref(isVertical));
        const interval = computed(() => props.interval);
        const hasLabel = computed(() => {
          return items.value.some((item) => item.props.label.toString().length > 0);
        });
        const carouselClasses = computed(() => {
          const classes = [ns2.b(), ns2.m(props.direction)];
          if (unref(isCardType)) {
            classes.push(ns2.m("card"));
          }
          return classes;
        });
        const indicatorsClasses = computed(() => {
          const classes = [ns2.e("indicators"), ns2.em("indicators", props.direction)];
          if (hasLabel.value) {
            classes.push(ns2.em("indicators", "labels"));
          }
          if (props.indicatorPosition === "outside" || unref(isCardType)) {
            classes.push(ns2.em("indicators", "outside"));
          }
          return classes;
        });
        const isCardType = computed(() => props.type === "card");
        const isVertical = computed(() => props.direction === "vertical");
        const throttledArrowClick = throttle((index2) => {
          setActiveItem(index2);
        }, THROTTLE_TIME, { trailing: true });
        const throttledIndicatorHover = throttle((index2) => {
          handleIndicatorHover(index2);
        }, THROTTLE_TIME);
        function pauseTimer() {
          if (timer.value) {
            clearInterval(timer.value);
            timer.value = null;
          }
        }
        function startTimer() {
          if (interval.value <= 0 || !props.autoplay || timer.value)
            return;
          timer.value = setInterval(() => playSlides(), interval.value);
        }
        const playSlides = () => {
          if (activeIndex.value < items.value.length - 1) {
            activeIndex.value = activeIndex.value + 1;
          } else if (props.loop) {
            activeIndex.value = 0;
          }
        };
        function setActiveItem(index2) {
          if (isString$3(index2)) {
            const filteredItems = items.value.filter((item) => item.props.name === index2);
            if (filteredItems.length > 0) {
              index2 = items.value.indexOf(filteredItems[0]);
            }
          }
          index2 = Number(index2);
          if (Number.isNaN(index2) || index2 !== Math.floor(index2)) {
            return;
          }
          const itemCount = items.value.length;
          const oldIndex = activeIndex.value;
          if (index2 < 0) {
            activeIndex.value = props.loop ? itemCount - 1 : 0;
          } else if (index2 >= itemCount) {
            activeIndex.value = props.loop ? 0 : itemCount - 1;
          } else {
            activeIndex.value = index2;
          }
          if (oldIndex === activeIndex.value) {
            resetItemPosition(oldIndex);
          }
        }
        function resetItemPosition(oldIndex) {
          items.value.forEach((item, index2) => {
            item.translateItem(index2, activeIndex.value, oldIndex);
          });
        }
        function addItem(item) {
          items.value.push(item);
        }
        function removeItem(uid2) {
          const index2 = items.value.findIndex((item) => item.uid === uid2);
          if (index2 !== -1) {
            items.value.splice(index2, 1);
            if (activeIndex.value === index2)
              next();
          }
        }
        function itemInStage(item, index2) {
          var _a2, _b, _c, _d;
          const _items = unref(items);
          const itemCount = _items.length;
          if (itemCount === 0 || !item.states.inStage)
            return false;
          const nextItemIndex = index2 + 1;
          const prevItemIndex = index2 - 1;
          const lastItemIndex = itemCount - 1;
          const isLastItemActive = _items[lastItemIndex].states.active;
          const isFirstItemActive = _items[0].states.active;
          const isNextItemActive = (_b = (_a2 = _items[nextItemIndex]) == null ? void 0 : _a2.states) == null ? void 0 : _b.active;
          const isPrevItemActive = (_d = (_c = _items[prevItemIndex]) == null ? void 0 : _c.states) == null ? void 0 : _d.active;
          if (index2 === lastItemIndex && isFirstItemActive || isNextItemActive) {
            return "left";
          } else if (index2 === 0 && isLastItemActive || isPrevItemActive) {
            return "right";
          }
          return false;
        }
        function handleMouseEnter() {
          hover.value = true;
          if (props.pauseOnHover) {
            pauseTimer();
          }
        }
        function handleMouseLeave() {
          hover.value = false;
          startTimer();
        }
        function handleButtonEnter(arrow2) {
          if (unref(isVertical))
            return;
          items.value.forEach((item, index2) => {
            if (arrow2 === itemInStage(item, index2)) {
              item.states.hover = true;
            }
          });
        }
        function handleButtonLeave() {
          if (unref(isVertical))
            return;
          items.value.forEach((item) => {
            item.states.hover = false;
          });
        }
        function handleIndicatorClick(index2) {
          activeIndex.value = index2;
        }
        function handleIndicatorHover(index2) {
          if (props.trigger === "hover" && index2 !== activeIndex.value) {
            activeIndex.value = index2;
          }
        }
        function prev() {
          setActiveItem(activeIndex.value - 1);
        }
        function next() {
          setActiveItem(activeIndex.value + 1);
        }
        watch(() => activeIndex.value, (current, prev2) => {
          resetItemPosition(prev2);
          if (prev2 > -1) {
            emit2("change", current, prev2);
          }
        });
        watch(() => props.autoplay, (autoplay) => {
          autoplay ? startTimer() : pauseTimer();
        });
        watch(() => props.loop, () => {
          setActiveItem(activeIndex.value);
        });
        const resizeObserver = shallowRef();
        onMounted(async () => {
          await nextTick$1();
          resizeObserver.value = useResizeObserver(root2.value, () => {
            resetItemPosition();
          });
          if (props.initialIndex < items.value.length && props.initialIndex >= 0) {
            activeIndex.value = props.initialIndex;
          }
          startTimer();
        });
        onBeforeUnmount(() => {
          pauseTimer();
          if (root2.value && resizeObserver.value)
            resizeObserver.value.stop();
        });
        provide(carouselContextKey, {
          root: root2,
          isCardType,
          isVertical,
          items,
          loop: props.loop,
          addItem,
          removeItem,
          setActiveItem
        });
        expose({
          setActiveItem,
          prev,
          next
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            ref_key: "root",
            ref: root2,
            class: normalizeClass(unref(carouselClasses)),
            onMouseenter: withModifiers(handleMouseEnter, ["stop"]),
            onMouseleave: withModifiers(handleMouseLeave, ["stop"])
          }, [
            createBaseVNode("div", {
              class: normalizeClass(unref(ns2).e("container")),
              style: normalizeStyle({ height: _ctx.height })
            }, [
              unref(arrowDisplay) ? (openBlock(), createBlock(Transition, {
                key: 0,
                name: "carousel-arrow-left",
                persisted: ""
              }, {
                default: withCtx(() => [
                  withDirectives(createBaseVNode("button", {
                    type: "button",
                    class: normalizeClass([unref(ns2).e("arrow"), unref(ns2).em("arrow", "left")]),
                    onMouseenter: _cache[0] || (_cache[0] = ($event) => handleButtonEnter("left")),
                    onMouseleave: handleButtonLeave,
                    onClick: _cache[1] || (_cache[1] = withModifiers(($event) => unref(throttledArrowClick)(activeIndex.value - 1), ["stop"]))
                  }, [
                    createVNode(unref(ElIcon), null, {
                      default: withCtx(() => [
                        createVNode(unref(arrow_left_default))
                      ]),
                      _: 1
                    })
                  ], 34), [
                    [
                      vShow,
                      (_ctx.arrow === "always" || hover.value) && (props.loop || activeIndex.value > 0)
                    ]
                  ])
                ]),
                _: 1
              })) : createCommentVNode("v-if", true),
              unref(arrowDisplay) ? (openBlock(), createBlock(Transition, {
                key: 1,
                name: "carousel-arrow-right",
                persisted: ""
              }, {
                default: withCtx(() => [
                  withDirectives(createBaseVNode("button", {
                    type: "button",
                    class: normalizeClass([unref(ns2).e("arrow"), unref(ns2).em("arrow", "right")]),
                    onMouseenter: _cache[2] || (_cache[2] = ($event) => handleButtonEnter("right")),
                    onMouseleave: handleButtonLeave,
                    onClick: _cache[3] || (_cache[3] = withModifiers(($event) => unref(throttledArrowClick)(activeIndex.value + 1), ["stop"]))
                  }, [
                    createVNode(unref(ElIcon), null, {
                      default: withCtx(() => [
                        createVNode(unref(arrow_right_default))
                      ]),
                      _: 1
                    })
                  ], 34), [
                    [
                      vShow,
                      (_ctx.arrow === "always" || hover.value) && (props.loop || activeIndex.value < items.value.length - 1)
                    ]
                  ])
                ]),
                _: 1
              })) : createCommentVNode("v-if", true),
              renderSlot(_ctx.$slots, "default")
            ], 6),
            _ctx.indicatorPosition !== "none" ? (openBlock(), createElementBlock("ul", {
              key: 0,
              class: normalizeClass(unref(indicatorsClasses))
            }, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(items.value, (item, index2) => {
                return openBlock(), createElementBlock("li", {
                  key: index2,
                  class: normalizeClass([
                    unref(ns2).e("indicator"),
                    unref(ns2).em("indicator", _ctx.direction),
                    unref(ns2).is("active", index2 === activeIndex.value)
                  ]),
                  onMouseenter: ($event) => unref(throttledIndicatorHover)(index2),
                  onClick: withModifiers(($event) => handleIndicatorClick(index2), ["stop"])
                }, [
                  createBaseVNode("button", {
                    class: normalizeClass(unref(ns2).e("button"))
                  }, [
                    unref(hasLabel) ? (openBlock(), createElementBlock("span", _hoisted_3$k, toDisplayString$1(item.props.label), 1)) : createCommentVNode("v-if", true)
                  ], 2)
                ], 42, _hoisted_2$D);
              }), 128))
            ], 2)) : createCommentVNode("v-if", true)
          ], 42, _hoisted_1$$);
        };
      }
    });
    var Carousel = /* @__PURE__ */ _export_sfc$1(_sfc_main$2c, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/carousel/src/carousel.vue"]]);
    const carouselItemProps = buildProps({
      name: { type: String, default: "" },
      label: {
        type: [String, Number],
        default: ""
      }
    });
    const __default__$1u = {
      name: "ElCarouselItem"
    };
    const _sfc_main$2b = /* @__PURE__ */ defineComponent({
      ...__default__$1u,
      props: carouselItemProps,
      setup(__props) {
        const props = __props;
        const ns2 = useNamespace("carousel");
        const carouselContext = inject(carouselContextKey);
        const instance = getCurrentInstance();
        const CARD_SCALE = 0.83;
        const hover = ref(false);
        const translate2 = ref(0);
        const scale = ref(1);
        const active = ref(false);
        const ready = ref(false);
        const inStage = ref(false);
        const animating = ref(false);
        const { isCardType, isVertical } = carouselContext;
        const itemStyle = computed(() => {
          const translateType = `translate${unref(isVertical) ? "Y" : "X"}`;
          const _translate = `${translateType}(${unref(translate2)}px)`;
          const _scale = `scale(${unref(scale)})`;
          const transform2 = [_translate, _scale].join(" ");
          return {
            transform: transform2
          };
        });
        function processIndex(index2, activeIndex, length) {
          const lastItemIndex = length - 1;
          const prevItemIndex = activeIndex - 1;
          const nextItemIndex = activeIndex + 1;
          const halfItemIndex = length / 2;
          if (activeIndex === 0 && index2 === lastItemIndex) {
            return -1;
          } else if (activeIndex === lastItemIndex && index2 === 0) {
            return length;
          } else if (index2 < prevItemIndex && activeIndex - index2 >= halfItemIndex) {
            return length + 1;
          } else if (index2 > nextItemIndex && index2 - activeIndex >= halfItemIndex) {
            return -2;
          }
          return index2;
        }
        function calcCardTranslate(index2, activeIndex) {
          var _a2;
          const parentWidth = ((_a2 = carouselContext.root.value) == null ? void 0 : _a2.offsetWidth) || 0;
          if (inStage.value) {
            return parentWidth * ((2 - CARD_SCALE) * (index2 - activeIndex) + 1) / 4;
          } else if (index2 < activeIndex) {
            return -(1 + CARD_SCALE) * parentWidth / 4;
          } else {
            return (3 + CARD_SCALE) * parentWidth / 4;
          }
        }
        function calcTranslate(index2, activeIndex, isVertical2) {
          const rootEl = carouselContext.root.value;
          if (!rootEl)
            return 0;
          const distance = (isVertical2 ? rootEl.offsetHeight : rootEl.offsetWidth) || 0;
          return distance * (index2 - activeIndex);
        }
        const translateItem = (index2, activeIndex, oldIndex) => {
          var _a2;
          const _isCardType = unref(isCardType);
          const carouselItemLength = (_a2 = carouselContext.items.value.length) != null ? _a2 : Number.NaN;
          const isActive = index2 === activeIndex;
          if (!_isCardType && !isUndefined$1(oldIndex)) {
            animating.value = isActive || index2 === oldIndex;
          }
          if (!isActive && carouselItemLength > 2 && carouselContext.loop) {
            index2 = processIndex(index2, activeIndex, carouselItemLength);
          }
          const _isVertical = unref(isVertical);
          active.value = isActive;
          if (_isCardType) {
            inStage.value = Math.round(Math.abs(index2 - activeIndex)) <= 1;
            translate2.value = calcCardTranslate(index2, activeIndex);
            scale.value = unref(active) ? 1 : CARD_SCALE;
          } else {
            translate2.value = calcTranslate(index2, activeIndex, _isVertical);
          }
          ready.value = true;
        };
        function handleItemClick() {
          if (carouselContext && unref(isCardType)) {
            const index2 = carouselContext.items.value.findIndex(({ uid: uid2 }) => uid2 === instance.uid);
            carouselContext.setActiveItem(index2);
          }
        }
        onMounted(() => {
          carouselContext.addItem({
            props,
            states: reactive({
              hover,
              translate: translate2,
              scale,
              active,
              ready,
              inStage,
              animating
            }),
            uid: instance.uid,
            translateItem
          });
        });
        onUnmounted(() => {
          carouselContext.removeItem(instance.uid);
        });
        return (_ctx, _cache) => {
          return withDirectives((openBlock(), createElementBlock("div", {
            class: normalizeClass([
              unref(ns2).e("item"),
              unref(ns2).is("active", active.value),
              unref(ns2).is("in-stage", inStage.value),
              unref(ns2).is("hover", hover.value),
              unref(ns2).is("animating", animating.value),
              { [unref(ns2).em("item", "card")]: unref(isCardType) }
            ]),
            style: normalizeStyle(unref(itemStyle)),
            onClick: handleItemClick
          }, [
            unref(isCardType) ? withDirectives((openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(unref(ns2).e("mask"))
            }, null, 2)), [
              [vShow, !active.value]
            ]) : createCommentVNode("v-if", true),
            renderSlot(_ctx.$slots, "default")
          ], 6)), [
            [vShow, ready.value]
          ]);
        };
      }
    });
    var CarouselItem = /* @__PURE__ */ _export_sfc$1(_sfc_main$2b, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/carousel/src/carousel-item.vue"]]);
    const ElCarousel = withInstall(Carousel, {
      CarouselItem
    });
    const ElCarouselItem = withNoopInstall(CarouselItem);
    const useCheckboxGroupProps = {
      modelValue: {
        type: Array,
        default: () => []
      },
      disabled: Boolean,
      min: {
        type: Number,
        default: void 0
      },
      max: {
        type: Number,
        default: void 0
      },
      size: useSizeProp,
      id: {
        type: String,
        default: void 0
      },
      label: {
        type: String,
        default: void 0
      },
      fill: {
        type: String,
        default: void 0
      },
      textColor: {
        type: String,
        default: void 0
      },
      tag: {
        type: String,
        default: "div"
      },
      validateEvent: {
        type: Boolean,
        default: true
      }
    };
    const checkboxProps = {
      modelValue: {
        type: [Number, String, Boolean],
        default: () => void 0
      },
      label: {
        type: [String, Boolean, Number, Object]
      },
      indeterminate: Boolean,
      disabled: Boolean,
      checked: Boolean,
      name: {
        type: String,
        default: void 0
      },
      trueLabel: {
        type: [String, Number],
        default: void 0
      },
      falseLabel: {
        type: [String, Number],
        default: void 0
      },
      id: {
        type: String,
        default: void 0
      },
      controls: {
        type: String,
        default: void 0
      },
      border: Boolean,
      size: useSizeProp,
      tabindex: [String, Number],
      validateEvent: {
        type: Boolean,
        default: true
      }
    };
    const useCheckboxGroup = () => {
      const elForm = inject(formContextKey, {});
      const elFormItem = inject(formItemContextKey, {});
      const checkboxGroup = inject("CheckboxGroup", {});
      const isGroup = computed(() => checkboxGroup && (checkboxGroup == null ? void 0 : checkboxGroup.name) === "ElCheckboxGroup");
      const elFormItemSize = computed(() => {
        return elFormItem.size;
      });
      return {
        isGroup,
        checkboxGroup,
        elForm,
        elFormItemSize,
        elFormItem
      };
    };
    const useCheckboxGroupId = (props, { elFormItem }) => {
      const { inputId: groupId, isLabeledByFormItem } = useFormItemInputId(props, {
        formItemContext: elFormItem
      });
      return {
        isLabeledByFormItem,
        groupId
      };
    };
    const useModel = (props) => {
      const selfModel = ref(false);
      const { emit: emit2 } = getCurrentInstance();
      const { isGroup, checkboxGroup, elFormItem } = useCheckboxGroup();
      const isLimitExceeded = ref(false);
      const model = computed({
        get() {
          var _a2, _b;
          return isGroup.value ? (_a2 = checkboxGroup.modelValue) == null ? void 0 : _a2.value : (_b = props.modelValue) != null ? _b : selfModel.value;
        },
        set(val) {
          var _a2;
          if (isGroup.value && Array.isArray(val)) {
            isLimitExceeded.value = checkboxGroup.max !== void 0 && val.length > checkboxGroup.max.value;
            isLimitExceeded.value === false && ((_a2 = checkboxGroup == null ? void 0 : checkboxGroup.changeEvent) == null ? void 0 : _a2.call(checkboxGroup, val));
          } else {
            emit2(UPDATE_MODEL_EVENT, val);
            selfModel.value = val;
          }
        }
      });
      return {
        model,
        isGroup,
        isLimitExceeded,
        elFormItem
      };
    };
    const useCheckboxStatus = (props, slots, { model }) => {
      const { isGroup, checkboxGroup } = useCheckboxGroup();
      const focus = ref(false);
      const size2 = useSize(checkboxGroup == null ? void 0 : checkboxGroup.checkboxGroupSize, { prop: true });
      const isChecked = computed(() => {
        const value = model.value;
        if (toTypeString$1(value) === "[object Boolean]") {
          return value;
        } else if (Array.isArray(value)) {
          return value.includes(props.label);
        } else if (value !== null && value !== void 0) {
          return value === props.trueLabel;
        } else {
          return !!value;
        }
      });
      const checkboxSize = useSize(computed(() => {
        var _a2;
        return isGroup.value ? (_a2 = checkboxGroup == null ? void 0 : checkboxGroup.checkboxGroupSize) == null ? void 0 : _a2.value : void 0;
      }));
      const hasOwnLabel = computed(() => {
        return !!(slots.default || props.label);
      });
      return {
        isChecked,
        focus,
        size: size2,
        checkboxSize,
        hasOwnLabel
      };
    };
    const useDisabled = (props, {
      model,
      isChecked
    }) => {
      const { elForm, isGroup, checkboxGroup } = useCheckboxGroup();
      const isLimitDisabled = computed(() => {
        var _a2, _b;
        const max2 = (_a2 = checkboxGroup.max) == null ? void 0 : _a2.value;
        const min2 = (_b = checkboxGroup.min) == null ? void 0 : _b.value;
        return !!(max2 || min2) && model.value.length >= max2 && !isChecked.value || model.value.length <= min2 && isChecked.value;
      });
      const isDisabled = computed(() => {
        var _a2, _b;
        const disabled = props.disabled || (elForm == null ? void 0 : elForm.disabled);
        return (_b = isGroup.value ? ((_a2 = checkboxGroup.disabled) == null ? void 0 : _a2.value) || disabled || isLimitDisabled.value : disabled) != null ? _b : false;
      });
      return {
        isDisabled,
        isLimitDisabled
      };
    };
    const setStoreValue = (props, { model }) => {
      function addToStore() {
        if (Array.isArray(model.value) && !model.value.includes(props.label)) {
          model.value.push(props.label);
        } else {
          model.value = props.trueLabel || true;
        }
      }
      props.checked && addToStore();
    };
    const useEvent$1 = (props, {
      model,
      isLimitExceeded,
      hasOwnLabel,
      isDisabled,
      isLabeledByFormItem
    }) => {
      const { elFormItem, checkboxGroup } = useCheckboxGroup();
      const { emit: emit2 } = getCurrentInstance();
      function getLabeledValue(value) {
        var _a2, _b;
        return value === props.trueLabel || value === true ? (_a2 = props.trueLabel) != null ? _a2 : true : (_b = props.falseLabel) != null ? _b : false;
      }
      function emitChangeEvent(checked2, e2) {
        emit2("change", getLabeledValue(checked2), e2);
      }
      function handleChange(e2) {
        if (isLimitExceeded.value)
          return;
        const target = e2.target;
        emit2("change", getLabeledValue(target.checked), e2);
      }
      async function onClickRoot(e2) {
        if (isLimitExceeded.value)
          return;
        if (!hasOwnLabel.value && !isDisabled.value && isLabeledByFormItem.value) {
          model.value = getLabeledValue([false, props.falseLabel].includes(model.value));
          await nextTick$1();
          emitChangeEvent(model.value, e2);
        }
      }
      const validateEvent = computed(() => {
        var _a2;
        return ((_a2 = checkboxGroup.validateEvent) == null ? void 0 : _a2.value) || props.validateEvent;
      });
      watch(() => props.modelValue, () => {
        var _a2;
        if (validateEvent.value) {
          (_a2 = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _a2.call(elFormItem, "change").catch((err) => debugWarn());
        }
      });
      return {
        handleChange,
        onClickRoot
      };
    };
    const checkboxEmits = {
      [UPDATE_MODEL_EVENT]: (val) => isString$3(val) || isNumber$1(val) || isBoolean$1(val),
      change: (val) => isString$3(val) || isNumber$1(val) || isBoolean$1(val)
    };
    const checkboxGroupEmits = {
      [UPDATE_MODEL_EVENT]: (val) => isArray$6(val),
      change: (val) => isArray$6(val)
    };
    const useCheckbox = (props, slots) => {
      const { model, isGroup, isLimitExceeded, elFormItem } = useModel(props);
      const { focus, size: size2, isChecked, checkboxSize, hasOwnLabel } = useCheckboxStatus(props, slots, {
        model
      });
      const { isDisabled } = useDisabled(props, { model, isChecked });
      const { inputId, isLabeledByFormItem } = useFormItemInputId(props, {
        formItemContext: elFormItem,
        disableIdGeneration: hasOwnLabel,
        disableIdManagement: isGroup
      });
      const { handleChange, onClickRoot } = useEvent$1(props, {
        model,
        isLimitExceeded,
        hasOwnLabel,
        isDisabled,
        isLabeledByFormItem
      });
      setStoreValue(props, { model });
      return {
        elFormItem,
        inputId,
        isLabeledByFormItem,
        isChecked,
        isDisabled,
        isGroup,
        checkboxSize,
        hasOwnLabel,
        model,
        handleChange,
        onClickRoot,
        focus,
        size: size2
      };
    };
    const _hoisted_1$_ = ["tabindex", "role", "aria-checked"];
    const _hoisted_2$C = ["id", "aria-hidden", "name", "tabindex", "disabled", "true-value", "false-value"];
    const _hoisted_3$j = ["id", "aria-hidden", "disabled", "value", "name", "tabindex"];
    const __default__$1t = {
      name: "ElCheckbox"
    };
    const _sfc_main$2a = /* @__PURE__ */ defineComponent({
      ...__default__$1t,
      props: checkboxProps,
      emits: checkboxEmits,
      setup(__props) {
        const props = __props;
        const slots = useSlots();
        const {
          inputId,
          isLabeledByFormItem,
          isChecked,
          isDisabled,
          checkboxSize,
          hasOwnLabel,
          model,
          handleChange,
          onClickRoot,
          focus
        } = useCheckbox(props, slots);
        const ns2 = useNamespace("checkbox");
        return (_ctx, _cache) => {
          return openBlock(), createBlock(resolveDynamicComponent(!unref(hasOwnLabel) && unref(isLabeledByFormItem) ? "span" : "label"), {
            class: normalizeClass([
              unref(ns2).b(),
              unref(ns2).m(unref(checkboxSize)),
              unref(ns2).is("disabled", unref(isDisabled)),
              unref(ns2).is("bordered", _ctx.border),
              unref(ns2).is("checked", unref(isChecked))
            ]),
            "aria-controls": _ctx.indeterminate ? _ctx.controls : null,
            onClick: unref(onClickRoot)
          }, {
            default: withCtx(() => [
              createBaseVNode("span", {
                class: normalizeClass([
                  unref(ns2).e("input"),
                  unref(ns2).is("disabled", unref(isDisabled)),
                  unref(ns2).is("checked", unref(isChecked)),
                  unref(ns2).is("indeterminate", _ctx.indeterminate),
                  unref(ns2).is("focus", unref(focus))
                ]),
                tabindex: _ctx.indeterminate ? 0 : void 0,
                role: _ctx.indeterminate ? "checkbox" : void 0,
                "aria-checked": _ctx.indeterminate ? "mixed" : void 0
              }, [
                _ctx.trueLabel || _ctx.falseLabel ? withDirectives((openBlock(), createElementBlock("input", {
                  key: 0,
                  id: unref(inputId),
                  "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => isRef(model) ? model.value = $event : null),
                  class: normalizeClass(unref(ns2).e("original")),
                  type: "checkbox",
                  "aria-hidden": _ctx.indeterminate ? "true" : "false",
                  name: _ctx.name,
                  tabindex: _ctx.tabindex,
                  disabled: unref(isDisabled),
                  "true-value": _ctx.trueLabel,
                  "false-value": _ctx.falseLabel,
                  onChange: _cache[1] || (_cache[1] = (...args) => unref(handleChange) && unref(handleChange)(...args)),
                  onFocus: _cache[2] || (_cache[2] = ($event) => focus.value = true),
                  onBlur: _cache[3] || (_cache[3] = ($event) => focus.value = false)
                }, null, 42, _hoisted_2$C)), [
                  [vModelCheckbox, unref(model)]
                ]) : withDirectives((openBlock(), createElementBlock("input", {
                  key: 1,
                  id: unref(inputId),
                  "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => isRef(model) ? model.value = $event : null),
                  class: normalizeClass(unref(ns2).e("original")),
                  type: "checkbox",
                  "aria-hidden": _ctx.indeterminate ? "true" : "false",
                  disabled: unref(isDisabled),
                  value: _ctx.label,
                  name: _ctx.name,
                  tabindex: _ctx.tabindex,
                  onChange: _cache[5] || (_cache[5] = (...args) => unref(handleChange) && unref(handleChange)(...args)),
                  onFocus: _cache[6] || (_cache[6] = ($event) => focus.value = true),
                  onBlur: _cache[7] || (_cache[7] = ($event) => focus.value = false)
                }, null, 42, _hoisted_3$j)), [
                  [vModelCheckbox, unref(model)]
                ]),
                createBaseVNode("span", {
                  class: normalizeClass(unref(ns2).e("inner"))
                }, null, 2)
              ], 10, _hoisted_1$_),
              unref(hasOwnLabel) ? (openBlock(), createElementBlock("span", {
                key: 0,
                class: normalizeClass(unref(ns2).e("label"))
              }, [
                renderSlot(_ctx.$slots, "default"),
                !_ctx.$slots.default ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                  createTextVNode(toDisplayString$1(_ctx.label), 1)
                ], 64)) : createCommentVNode("v-if", true)
              ], 2)) : createCommentVNode("v-if", true)
            ]),
            _: 3
          }, 8, ["class", "aria-controls", "onClick"]);
        };
      }
    });
    var Checkbox = /* @__PURE__ */ _export_sfc$1(_sfc_main$2a, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox.vue"]]);
    const _hoisted_1$Z = ["name", "tabindex", "disabled", "true-value", "false-value"];
    const _hoisted_2$B = ["name", "tabindex", "disabled", "value"];
    const __default__$1s = {
      name: "ElCheckboxButton"
    };
    const _sfc_main$29 = /* @__PURE__ */ defineComponent({
      ...__default__$1s,
      props: checkboxProps,
      emits: checkboxEmits,
      setup(__props) {
        const props = __props;
        const slots = useSlots();
        const { focus, isChecked, isDisabled, size: size2, model, handleChange } = useCheckbox(props, slots);
        const { checkboxGroup } = useCheckboxGroup();
        const ns2 = useNamespace("checkbox");
        const activeStyle = computed(() => {
          var _a2, _b, _c, _d;
          const fillValue = (_b = (_a2 = checkboxGroup == null ? void 0 : checkboxGroup.fill) == null ? void 0 : _a2.value) != null ? _b : "";
          return {
            backgroundColor: fillValue,
            borderColor: fillValue,
            color: (_d = (_c = checkboxGroup == null ? void 0 : checkboxGroup.textColor) == null ? void 0 : _c.value) != null ? _d : "",
            boxShadow: fillValue ? `-1px 0 0 0 ${fillValue}` : void 0
          };
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("label", {
            class: normalizeClass([
              unref(ns2).b("button"),
              unref(ns2).bm("button", unref(size2)),
              unref(ns2).is("disabled", unref(isDisabled)),
              unref(ns2).is("checked", unref(isChecked)),
              unref(ns2).is("focus", unref(focus))
            ])
          }, [
            _ctx.trueLabel || _ctx.falseLabel ? withDirectives((openBlock(), createElementBlock("input", {
              key: 0,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => isRef(model) ? model.value = $event : null),
              class: normalizeClass(unref(ns2).be("button", "original")),
              type: "checkbox",
              name: _ctx.name,
              tabindex: _ctx.tabindex,
              disabled: unref(isDisabled),
              "true-value": _ctx.trueLabel,
              "false-value": _ctx.falseLabel,
              onChange: _cache[1] || (_cache[1] = (...args) => unref(handleChange) && unref(handleChange)(...args)),
              onFocus: _cache[2] || (_cache[2] = ($event) => focus.value = true),
              onBlur: _cache[3] || (_cache[3] = ($event) => focus.value = false)
            }, null, 42, _hoisted_1$Z)), [
              [vModelCheckbox, unref(model)]
            ]) : withDirectives((openBlock(), createElementBlock("input", {
              key: 1,
              "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => isRef(model) ? model.value = $event : null),
              class: normalizeClass(unref(ns2).be("button", "original")),
              type: "checkbox",
              name: _ctx.name,
              tabindex: _ctx.tabindex,
              disabled: unref(isDisabled),
              value: _ctx.label,
              onChange: _cache[5] || (_cache[5] = (...args) => unref(handleChange) && unref(handleChange)(...args)),
              onFocus: _cache[6] || (_cache[6] = ($event) => focus.value = true),
              onBlur: _cache[7] || (_cache[7] = ($event) => focus.value = false)
            }, null, 42, _hoisted_2$B)), [
              [vModelCheckbox, unref(model)]
            ]),
            _ctx.$slots.default || _ctx.label ? (openBlock(), createElementBlock("span", {
              key: 2,
              class: normalizeClass(unref(ns2).be("button", "inner")),
              style: normalizeStyle(unref(isChecked) ? unref(activeStyle) : void 0)
            }, [
              renderSlot(_ctx.$slots, "default", {}, () => [
                createTextVNode(toDisplayString$1(_ctx.label), 1)
              ])
            ], 6)) : createCommentVNode("v-if", true)
          ], 2);
        };
      }
    });
    var CheckboxButton = /* @__PURE__ */ _export_sfc$1(_sfc_main$29, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox-button.vue"]]);
    const __default__$1r = {
      name: "ElCheckboxGroup"
    };
    const _sfc_main$28 = /* @__PURE__ */ defineComponent({
      ...__default__$1r,
      props: useCheckboxGroupProps,
      emits: checkboxGroupEmits,
      setup(__props, { emit: emit2 }) {
        const props = __props;
        const { elFormItem } = useCheckboxGroup();
        const { groupId, isLabeledByFormItem } = useCheckboxGroupId(props, {
          elFormItem
        });
        const checkboxGroupSize = useSize();
        const ns2 = useNamespace("checkbox");
        const changeEvent = (value) => {
          emit2(UPDATE_MODEL_EVENT, value);
          nextTick$1(() => {
            emit2("change", value);
          });
        };
        const modelValue = computed({
          get() {
            return props.modelValue;
          },
          set(val) {
            changeEvent(val);
          }
        });
        provide("CheckboxGroup", {
          name: "ElCheckboxGroup",
          ...toRefs(props),
          modelValue,
          checkboxGroupSize,
          changeEvent
        });
        watch(() => props.modelValue, () => {
          var _a2;
          if (props.validateEvent) {
            (_a2 = elFormItem.validate) == null ? void 0 : _a2.call(elFormItem, "change").catch((err) => debugWarn());
          }
        });
        return (_ctx, _cache) => {
          return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {
            id: unref(groupId),
            class: normalizeClass(unref(ns2).b("group")),
            role: "group",
            "aria-label": !unref(isLabeledByFormItem) ? _ctx.label || "checkbox-group" : void 0,
            "aria-labelledby": unref(isLabeledByFormItem) ? unref(elFormItem).labelId : void 0
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          }, 8, ["id", "class", "aria-label", "aria-labelledby"]);
        };
      }
    });
    var CheckboxGroup = /* @__PURE__ */ _export_sfc$1(_sfc_main$28, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox-group.vue"]]);
    const ElCheckbox = withInstall(Checkbox, {
      CheckboxButton,
      CheckboxGroup
    });
    const ElCheckboxButton = withNoopInstall(CheckboxButton);
    const ElCheckboxGroup$1 = withNoopInstall(CheckboxGroup);
    const radioPropsBase = buildProps({
      size: useSizeProp,
      disabled: Boolean,
      label: {
        type: [String, Number, Boolean],
        default: ""
      }
    });
    const radioProps = buildProps({
      ...radioPropsBase,
      modelValue: {
        type: [String, Number, Boolean],
        default: ""
      },
      name: {
        type: String,
        default: ""
      },
      border: Boolean
    });
    const radioEmits = {
      [UPDATE_MODEL_EVENT]: (val) => isString$3(val) || isNumber$1(val) || isBoolean$1(val),
      [CHANGE_EVENT]: (val) => isString$3(val) || isNumber$1(val) || isBoolean$1(val)
    };
    const useRadio = (props, emit2) => {
      const radioRef = ref();
      const radioGroup = inject(radioGroupKey, void 0);
      const isGroup = computed(() => !!radioGroup);
      const modelValue = computed({
        get() {
          return isGroup.value ? radioGroup.modelValue : props.modelValue;
        },
        set(val) {
          if (isGroup.value) {
            radioGroup.changeEvent(val);
          } else {
            emit2 && emit2(UPDATE_MODEL_EVENT, val);
          }
          radioRef.value.checked = props.modelValue === props.label;
        }
      });
      const size2 = useSize(computed(() => radioGroup == null ? void 0 : radioGroup.size));
      const disabled = useDisabled$1(computed(() => radioGroup == null ? void 0 : radioGroup.disabled));
      const focus = ref(false);
      const tabIndex = computed(() => {
        return disabled.value || isGroup.value && modelValue.value !== props.label ? -1 : 0;
      });
      return {
        radioRef,
        isGroup,
        radioGroup,
        focus,
        size: size2,
        disabled,
        tabIndex,
        modelValue
      };
    };
    const _hoisted_1$Y = ["value", "name", "disabled"];
    const __default__$1q = {
      name: "ElRadio"
    };
    const _sfc_main$27 = /* @__PURE__ */ defineComponent({
      ...__default__$1q,
      props: radioProps,
      emits: radioEmits,
      setup(__props, { emit: emit2 }) {
        const props = __props;
        const ns2 = useNamespace("radio");
        const { radioRef, radioGroup, focus, size: size2, disabled, modelValue } = useRadio(props, emit2);
        function handleChange() {
          nextTick$1(() => emit2("change", modelValue.value));
        }
        return (_ctx, _cache) => {
          var _a2;
          return openBlock(), createElementBlock("label", {
            class: normalizeClass([
              unref(ns2).b(),
              unref(ns2).is("disabled", unref(disabled)),
              unref(ns2).is("focus", unref(focus)),
              unref(ns2).is("bordered", _ctx.border),
              unref(ns2).is("checked", unref(modelValue) === _ctx.label),
              unref(ns2).m(unref(size2))
            ])
          }, [
            createBaseVNode("span", {
              class: normalizeClass([
                unref(ns2).e("input"),
                unref(ns2).is("disabled", unref(disabled)),
                unref(ns2).is("checked", unref(modelValue) === _ctx.label)
              ])
            }, [
              withDirectives(createBaseVNode("input", {
                ref_key: "radioRef",
                ref: radioRef,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => isRef(modelValue) ? modelValue.value = $event : null),
                class: normalizeClass(unref(ns2).e("original")),
                value: _ctx.label,
                name: _ctx.name || ((_a2 = unref(radioGroup)) == null ? void 0 : _a2.name),
                disabled: unref(disabled),
                type: "radio",
                onFocus: _cache[1] || (_cache[1] = ($event) => focus.value = true),
                onBlur: _cache[2] || (_cache[2] = ($event) => focus.value = false),
                onChange: handleChange
              }, null, 42, _hoisted_1$Y), [
                [vModelRadio, unref(modelValue)]
              ]),
              createBaseVNode("span", {
                class: normalizeClass(unref(ns2).e("inner"))
              }, null, 2)
            ], 2),
            createBaseVNode("span", {
              class: normalizeClass(unref(ns2).e("label")),
              onKeydown: _cache[3] || (_cache[3] = withModifiers(() => {
              }, ["stop"]))
            }, [
              renderSlot(_ctx.$slots, "default", {}, () => [
                createTextVNode(toDisplayString$1(_ctx.label), 1)
              ])
            ], 34)
          ], 2);
        };
      }
    });
    var Radio = /* @__PURE__ */ _export_sfc$1(_sfc_main$27, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/radio/src/radio.vue"]]);
    const radioButtonProps = buildProps({
      ...radioPropsBase,
      name: {
        type: String,
        default: ""
      }
    });
    const _hoisted_1$X = ["value", "name", "disabled"];
    const __default__$1p = {
      name: "ElRadioButton"
    };
    const _sfc_main$26 = /* @__PURE__ */ defineComponent({
      ...__default__$1p,
      props: radioButtonProps,
      setup(__props) {
        const props = __props;
        const ns2 = useNamespace("radio");
        const { radioRef, focus, size: size2, disabled, modelValue, radioGroup } = useRadio(props);
        const activeStyle = computed(() => {
          return {
            backgroundColor: (radioGroup == null ? void 0 : radioGroup.fill) || "",
            borderColor: (radioGroup == null ? void 0 : radioGroup.fill) || "",
            boxShadow: (radioGroup == null ? void 0 : radioGroup.fill) ? `-1px 0 0 0 ${radioGroup.fill}` : "",
            color: (radioGroup == null ? void 0 : radioGroup.textColor) || ""
          };
        });
        return (_ctx, _cache) => {
          var _a2;
          return openBlock(), createElementBlock("label", {
            class: normalizeClass([
              unref(ns2).b("button"),
              unref(ns2).is("active", unref(modelValue) === _ctx.label),
              unref(ns2).is("disabled", unref(disabled)),
              unref(ns2).is("focus", unref(focus)),
              unref(ns2).bm("button", unref(size2))
            ])
          }, [
            withDirectives(createBaseVNode("input", {
              ref_key: "radioRef",
              ref: radioRef,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => isRef(modelValue) ? modelValue.value = $event : null),
              class: normalizeClass(unref(ns2).be("button", "original-radio")),
              value: _ctx.label,
              type: "radio",
              name: _ctx.name || ((_a2 = unref(radioGroup)) == null ? void 0 : _a2.name),
              disabled: unref(disabled),
              onFocus: _cache[1] || (_cache[1] = ($event) => focus.value = true),
              onBlur: _cache[2] || (_cache[2] = ($event) => focus.value = false)
            }, null, 42, _hoisted_1$X), [
              [vModelRadio, unref(modelValue)]
            ]),
            createBaseVNode("span", {
              class: normalizeClass(unref(ns2).be("button", "inner")),
              style: normalizeStyle(unref(modelValue) === _ctx.label ? unref(activeStyle) : {}),
              onKeydown: _cache[3] || (_cache[3] = withModifiers(() => {
              }, ["stop"]))
            }, [
              renderSlot(_ctx.$slots, "default", {}, () => [
                createTextVNode(toDisplayString$1(_ctx.label), 1)
              ])
            ], 38)
          ], 2);
        };
      }
    });
    var RadioButton = /* @__PURE__ */ _export_sfc$1(_sfc_main$26, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/radio/src/radio-button.vue"]]);
    const radioGroupProps = buildProps({
      id: {
        type: String,
        default: void 0
      },
      size: useSizeProp,
      disabled: Boolean,
      modelValue: {
        type: [String, Number, Boolean],
        default: ""
      },
      fill: {
        type: String,
        default: ""
      },
      label: {
        type: String,
        default: void 0
      },
      textColor: {
        type: String,
        default: ""
      },
      name: {
        type: String,
        default: void 0
      },
      validateEvent: {
        type: Boolean,
        default: true
      }
    });
    const radioGroupEmits = radioEmits;
    const _hoisted_1$W = ["id", "aria-label", "aria-labelledby"];
    const __default__$1o = {
      name: "ElRadioGroup"
    };
    const _sfc_main$25 = /* @__PURE__ */ defineComponent({
      ...__default__$1o,
      props: radioGroupProps,
      emits: radioGroupEmits,
      setup(__props, { emit: emit2 }) {
        const props = __props;
        const ns2 = useNamespace("radio");
        const radioId = useId();
        const radioGroupRef = ref();
        const { formItem } = useFormItem();
        const { inputId: groupId, isLabeledByFormItem } = useFormItemInputId(props, {
          formItemContext: formItem
        });
        const changeEvent = (value) => {
          emit2(UPDATE_MODEL_EVENT, value);
          nextTick$1(() => emit2("change", value));
        };
        onMounted(() => {
          const radios = radioGroupRef.value.querySelectorAll("[type=radio]");
          const firstLabel = radios[0];
          if (!Array.from(radios).some((radio) => radio.checked) && firstLabel) {
            firstLabel.tabIndex = 0;
          }
        });
        const name = computed(() => {
          return props.name || radioId.value;
        });
        provide(radioGroupKey, reactive({
          ...toRefs(props),
          changeEvent,
          name
        }));
        watch(() => props.modelValue, () => {
          if (props.validateEvent) {
            formItem == null ? void 0 : formItem.validate("change").catch((err) => debugWarn());
          }
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            id: unref(groupId),
            ref_key: "radioGroupRef",
            ref: radioGroupRef,
            class: normalizeClass(unref(ns2).b("group")),
            role: "radiogroup",
            "aria-label": !unref(isLabeledByFormItem) ? _ctx.label || "radio-group" : void 0,
            "aria-labelledby": unref(isLabeledByFormItem) ? unref(formItem).labelId : void 0
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 10, _hoisted_1$W);
        };
      }
    });
    var RadioGroup = /* @__PURE__ */ _export_sfc$1(_sfc_main$25, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/radio/src/radio-group.vue"]]);
    const ElRadio = withInstall(Radio, {
      RadioButton,
      RadioGroup
    });
    const ElRadioGroup = withNoopInstall(RadioGroup);
    const ElRadioButton = withNoopInstall(RadioButton);
    var NodeContent$1 = defineComponent({
      name: "NodeContent",
      setup() {
        const ns2 = useNamespace("cascader-node");
        return {
          ns: ns2
        };
      },
      render() {
        const { ns: ns2 } = this;
        const { node, panel } = this.$parent;
        const { data, label } = node;
        const { renderLabelFn } = panel;
        return h$2("span", { class: ns2.e("label") }, renderLabelFn ? renderLabelFn({ node, data }) : label);
      }
    });
    const CASCADER_PANEL_INJECTION_KEY = Symbol();
    const _sfc_main$24 = defineComponent({
      name: "ElCascaderNode",
      components: {
        ElCheckbox,
        ElRadio,
        NodeContent: NodeContent$1,
        ElIcon,
        Check: check_default,
        Loading: loading_default,
        ArrowRight: arrow_right_default
      },
      props: {
        node: {
          type: Object,
          required: true
        },
        menuId: String
      },
      emits: ["expand"],
      setup(props, { emit: emit2 }) {
        const panel = inject(CASCADER_PANEL_INJECTION_KEY);
        const ns2 = useNamespace("cascader-node");
        const isHoverMenu = computed(() => panel.isHoverMenu);
        const multiple = computed(() => panel.config.multiple);
        const checkStrictly = computed(() => panel.config.checkStrictly);
        const checkedNodeId = computed(() => {
          var _a2;
          return (_a2 = panel.checkedNodes[0]) == null ? void 0 : _a2.uid;
        });
        const isDisabled = computed(() => props.node.isDisabled);
        const isLeaf2 = computed(() => props.node.isLeaf);
        const expandable = computed(() => checkStrictly.value && !isLeaf2.value || !isDisabled.value);
        const inExpandingPath = computed(() => isInPath(panel.expandingNode));
        const inCheckedPath = computed(() => checkStrictly.value && panel.checkedNodes.some(isInPath));
        const isInPath = (node) => {
          var _a2;
          const { level, uid: uid2 } = props.node;
          return ((_a2 = node == null ? void 0 : node.pathNodes[level - 1]) == null ? void 0 : _a2.uid) === uid2;
        };
        const doExpand = () => {
          if (inExpandingPath.value)
            return;
          panel.expandNode(props.node);
        };
        const doCheck = (checked2) => {
          const { node } = props;
          if (checked2 === node.checked)
            return;
          panel.handleCheckChange(node, checked2);
        };
        const doLoad = () => {
          panel.lazyLoad(props.node, () => {
            if (!isLeaf2.value)
              doExpand();
          });
        };
        const handleHoverExpand = (e2) => {
          if (!isHoverMenu.value)
            return;
          handleExpand();
          !isLeaf2.value && emit2("expand", e2);
        };
        const handleExpand = () => {
          const { node } = props;
          if (!expandable.value || node.loading)
            return;
          node.loaded ? doExpand() : doLoad();
        };
        const handleClick = () => {
          if (isHoverMenu.value && !isLeaf2.value)
            return;
          if (isLeaf2.value && !isDisabled.value && !checkStrictly.value && !multiple.value) {
            handleCheck(true);
          } else {
            handleExpand();
          }
        };
        const handleSelectCheck = (checked2) => {
          if (checkStrictly.value) {
            doCheck(checked2);
            if (props.node.loaded) {
              doExpand();
            }
          } else {
            handleCheck(checked2);
          }
        };
        const handleCheck = (checked2) => {
          if (!props.node.loaded) {
            doLoad();
          } else {
            doCheck(checked2);
            !checkStrictly.value && doExpand();
          }
        };
        return {
          panel,
          isHoverMenu,
          multiple,
          checkStrictly,
          checkedNodeId,
          isDisabled,
          isLeaf: isLeaf2,
          expandable,
          inExpandingPath,
          inCheckedPath,
          ns: ns2,
          handleHoverExpand,
          handleExpand,
          handleClick,
          handleCheck,
          handleSelectCheck
        };
      }
    });
    const _hoisted_1$V = ["id", "aria-haspopup", "aria-owns", "aria-expanded", "tabindex"];
    const _hoisted_2$A = /* @__PURE__ */ createBaseVNode("span", null, null, -1);
    function _sfc_render$B(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_el_checkbox = resolveComponent("el-checkbox");
      const _component_el_radio = resolveComponent("el-radio");
      const _component_check = resolveComponent("check");
      const _component_el_icon = resolveComponent("el-icon");
      const _component_node_content = resolveComponent("node-content");
      const _component_loading = resolveComponent("loading");
      const _component_arrow_right = resolveComponent("arrow-right");
      return openBlock(), createElementBlock("li", {
        id: `${_ctx.menuId}-${_ctx.node.uid}`,
        role: "menuitem",
        "aria-haspopup": !_ctx.isLeaf,
        "aria-owns": _ctx.isLeaf ? null : _ctx.menuId,
        "aria-expanded": _ctx.inExpandingPath,
        tabindex: _ctx.expandable ? -1 : void 0,
        class: normalizeClass([
          _ctx.ns.b(),
          _ctx.ns.is("selectable", _ctx.checkStrictly),
          _ctx.ns.is("active", _ctx.node.checked),
          _ctx.ns.is("disabled", !_ctx.expandable),
          _ctx.inExpandingPath && "in-active-path",
          _ctx.inCheckedPath && "in-checked-path"
        ]),
        onMouseenter: _cache[2] || (_cache[2] = (...args) => _ctx.handleHoverExpand && _ctx.handleHoverExpand(...args)),
        onFocus: _cache[3] || (_cache[3] = (...args) => _ctx.handleHoverExpand && _ctx.handleHoverExpand(...args)),
        onClick: _cache[4] || (_cache[4] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))
      }, [
        createCommentVNode(" prefix "),
        _ctx.multiple ? (openBlock(), createBlock(_component_el_checkbox, {
          key: 0,
          "model-value": _ctx.node.checked,
          indeterminate: _ctx.node.indeterminate,
          disabled: _ctx.isDisabled,
          onClick: _cache[0] || (_cache[0] = withModifiers(() => {
          }, ["stop"])),
          "onUpdate:modelValue": _ctx.handleSelectCheck
        }, null, 8, ["model-value", "indeterminate", "disabled", "onUpdate:modelValue"])) : _ctx.checkStrictly ? (openBlock(), createBlock(_component_el_radio, {
          key: 1,
          "model-value": _ctx.checkedNodeId,
          label: _ctx.node.uid,
          disabled: _ctx.isDisabled,
          "onUpdate:modelValue": _ctx.handleSelectCheck,
          onClick: _cache[1] || (_cache[1] = withModifiers(() => {
          }, ["stop"]))
        }, {
          default: withCtx(() => [
            createCommentVNode("\n        Add an empty element to avoid render label,\n        do not use empty fragment here for https://github.com/vuejs/vue-next/pull/2485\n      "),
            _hoisted_2$A
          ]),
          _: 1
        }, 8, ["model-value", "label", "disabled", "onUpdate:modelValue"])) : _ctx.isLeaf && _ctx.node.checked ? (openBlock(), createBlock(_component_el_icon, {
          key: 2,
          class: normalizeClass(_ctx.ns.e("prefix"))
        }, {
          default: withCtx(() => [
            createVNode(_component_check)
          ]),
          _: 1
        }, 8, ["class"])) : createCommentVNode("v-if", true),
        createCommentVNode(" content "),
        createVNode(_component_node_content),
        createCommentVNode(" postfix "),
        !_ctx.isLeaf ? (openBlock(), createElementBlock(Fragment, { key: 3 }, [
          _ctx.node.loading ? (openBlock(), createBlock(_component_el_icon, {
            key: 0,
            class: normalizeClass([_ctx.ns.is("loading"), _ctx.ns.e("postfix")])
          }, {
            default: withCtx(() => [
              createVNode(_component_loading)
            ]),
            _: 1
          }, 8, ["class"])) : (openBlock(), createBlock(_component_el_icon, {
            key: 1,
            class: normalizeClass(["arrow-right", _ctx.ns.e("postfix")])
          }, {
            default: withCtx(() => [
              createVNode(_component_arrow_right)
            ]),
            _: 1
          }, 8, ["class"]))
        ], 64)) : createCommentVNode("v-if", true)
      ], 42, _hoisted_1$V);
    }
    var ElCascaderNode = /* @__PURE__ */ _export_sfc$1(_sfc_main$24, [["render", _sfc_render$B], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/cascader-panel/src/node.vue"]]);
    const _sfc_main$23 = defineComponent({
      name: "ElCascaderMenu",
      components: {
        Loading: loading_default,
        ElIcon,
        ElScrollbar,
        ElCascaderNode
      },
      props: {
        nodes: {
          type: Array,
          required: true
        },
        index: {
          type: Number,
          required: true
        }
      },
      setup(props) {
        const instance = getCurrentInstance();
        const ns2 = useNamespace("cascader-menu");
        const { t } = useLocale();
        const id2 = generateId();
        let activeNode = null;
        let hoverTimer = null;
        const panel = inject(CASCADER_PANEL_INJECTION_KEY);
        const hoverZone = ref(null);
        const isEmpty2 = computed(() => !props.nodes.length);
        const isLoading = computed(() => !panel.initialLoaded);
        const menuId = computed(() => `cascader-menu-${id2}-${props.index}`);
        const handleExpand = (e2) => {
          activeNode = e2.target;
        };
        const handleMouseMove = (e2) => {
          if (!panel.isHoverMenu || !activeNode || !hoverZone.value)
            return;
          if (activeNode.contains(e2.target)) {
            clearHoverTimer();
            const el = instance.vnode.el;
            const { left: left2 } = el.getBoundingClientRect();
            const { offsetWidth, offsetHeight } = el;
            const startX = e2.clientX - left2;
            const top = activeNode.offsetTop;
            const bottom = top + activeNode.offsetHeight;
            hoverZone.value.innerHTML = `
          <path style="pointer-events: auto;" fill="transparent" d="M${startX} ${top} L${offsetWidth} 0 V${top} Z" />
          <path style="pointer-events: auto;" fill="transparent" d="M${startX} ${bottom} L${offsetWidth} ${offsetHeight} V${bottom} Z" />
        `;
          } else if (!hoverTimer) {
            hoverTimer = window.setTimeout(clearHoverZone, panel.config.hoverThreshold);
          }
        };
        const clearHoverTimer = () => {
          if (!hoverTimer)
            return;
          clearTimeout(hoverTimer);
          hoverTimer = null;
        };
        const clearHoverZone = () => {
          if (!hoverZone.value)
            return;
          hoverZone.value.innerHTML = "";
          clearHoverTimer();
        };
        return {
          ns: ns2,
          panel,
          hoverZone,
          isEmpty: isEmpty2,
          isLoading,
          menuId,
          t,
          handleExpand,
          handleMouseMove,
          clearHoverZone
        };
      }
    });
    function _sfc_render$A(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_el_cascader_node = resolveComponent("el-cascader-node");
      const _component_loading = resolveComponent("loading");
      const _component_el_icon = resolveComponent("el-icon");
      const _component_el_scrollbar = resolveComponent("el-scrollbar");
      return openBlock(), createBlock(_component_el_scrollbar, {
        key: _ctx.menuId,
        tag: "ul",
        role: "menu",
        class: normalizeClass(_ctx.ns.b()),
        "wrap-class": _ctx.ns.e("wrap"),
        "view-class": [_ctx.ns.e("list"), _ctx.ns.is("empty", _ctx.isEmpty)],
        onMousemove: _ctx.handleMouseMove,
        onMouseleave: _ctx.clearHoverZone
      }, {
        default: withCtx(() => {
          var _a2;
          return [
            (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.nodes, (node) => {
              return openBlock(), createBlock(_component_el_cascader_node, {
                key: node.uid,
                node,
                "menu-id": _ctx.menuId,
                onExpand: _ctx.handleExpand
              }, null, 8, ["node", "menu-id", "onExpand"]);
            }), 128)),
            _ctx.isLoading ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(_ctx.ns.e("empty-text"))
            }, [
              createVNode(_component_el_icon, {
                size: "14",
                class: normalizeClass(_ctx.ns.is("loading"))
              }, {
                default: withCtx(() => [
                  createVNode(_component_loading)
                ]),
                _: 1
              }, 8, ["class"]),
              createTextVNode(" " + toDisplayString$1(_ctx.t("el.cascader.loading")), 1)
            ], 2)) : _ctx.isEmpty ? (openBlock(), createElementBlock("div", {
              key: 1,
              class: normalizeClass(_ctx.ns.e("empty-text"))
            }, toDisplayString$1(_ctx.t("el.cascader.noData")), 3)) : ((_a2 = _ctx.panel) == null ? void 0 : _a2.isHoverMenu) ? (openBlock(), createElementBlock("svg", {
              key: 2,
              ref: "hoverZone",
              class: normalizeClass(_ctx.ns.e("hover-zone"))
            }, null, 2)) : createCommentVNode("v-if", true)
          ];
        }),
        _: 1
      }, 8, ["class", "wrap-class", "view-class", "onMousemove", "onMouseleave"]);
    }
    var ElCascaderMenu = /* @__PURE__ */ _export_sfc$1(_sfc_main$23, [["render", _sfc_render$A], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/cascader-panel/src/menu.vue"]]);
    var ExpandTrigger = /* @__PURE__ */ ((ExpandTrigger2) => {
      ExpandTrigger2["CLICK"] = "click";
      ExpandTrigger2["HOVER"] = "hover";
      return ExpandTrigger2;
    })(ExpandTrigger || {});
    let uid = 0;
    const calculatePathNodes = (node) => {
      const nodes = [node];
      let { parent } = node;
      while (parent) {
        nodes.unshift(parent);
        parent = parent.parent;
      }
      return nodes;
    };
    class Node$1 {
      constructor(data, config2, parent, root2 = false) {
        this.data = data;
        this.config = config2;
        this.parent = parent;
        this.root = root2;
        this.uid = uid++;
        this.checked = false;
        this.indeterminate = false;
        this.loading = false;
        const { value: valueKey, label: labelKey, children: childrenKey } = config2;
        const childrenData = data[childrenKey];
        const pathNodes = calculatePathNodes(this);
        this.level = root2 ? 0 : parent ? parent.level + 1 : 1;
        this.value = data[valueKey];
        this.label = data[labelKey];
        this.pathNodes = pathNodes;
        this.pathValues = pathNodes.map((node) => node.value);
        this.pathLabels = pathNodes.map((node) => node.label);
        this.childrenData = childrenData;
        this.children = (childrenData || []).map((child) => new Node$1(child, config2, this));
        this.loaded = !config2.lazy || this.isLeaf || !isEmpty(childrenData);
      }
      get isDisabled() {
        const { data, parent, config: config2 } = this;
        const { disabled, checkStrictly } = config2;
        const isDisabled = isFunction$4(disabled) ? disabled(data, this) : !!data[disabled];
        return isDisabled || !checkStrictly && (parent == null ? void 0 : parent.isDisabled);
      }
      get isLeaf() {
        const { data, config: config2, childrenData, loaded } = this;
        const { lazy, leaf } = config2;
        const isLeaf2 = isFunction$4(leaf) ? leaf(data, this) : data[leaf];
        return isUndefined$1(isLeaf2) ? lazy && !loaded ? false : !(Array.isArray(childrenData) && childrenData.length) : !!isLeaf2;
      }
      get valueByOption() {
        return this.config.emitPath ? this.pathValues : this.value;
      }
      appendChild(childData) {
        const { childrenData, children } = this;
        const node = new Node$1(childData, this.config, this);
        if (Array.isArray(childrenData)) {
          childrenData.push(childData);
        } else {
          this.childrenData = [childData];
        }
        children.push(node);
        return node;
      }
      calcText(allLevels, separator) {
        const text = allLevels ? this.pathLabels.join(separator) : this.label;
        this.text = text;
        return text;
      }
      broadcast(event, ...args) {
        const handlerName = `onParent${capitalize(event)}`;
        this.children.forEach((child) => {
          if (child) {
            child.broadcast(event, ...args);
            child[handlerName] && child[handlerName](...args);
          }
        });
      }
      emit(event, ...args) {
        const { parent } = this;
        const handlerName = `onChild${capitalize(event)}`;
        if (parent) {
          parent[handlerName] && parent[handlerName](...args);
          parent.emit(event, ...args);
        }
      }
      onParentCheck(checked2) {
        if (!this.isDisabled) {
          this.setCheckState(checked2);
        }
      }
      onChildCheck() {
        const { children } = this;
        const validChildren = children.filter((child) => !child.isDisabled);
        const checked2 = validChildren.length ? validChildren.every((child) => child.checked) : false;
        this.setCheckState(checked2);
      }
      setCheckState(checked2) {
        const totalNum = this.children.length;
        const checkedNum = this.children.reduce((c2, p2) => {
          const num = p2.checked ? 1 : p2.indeterminate ? 0.5 : 0;
          return c2 + num;
        }, 0);
        this.checked = this.loaded && this.children.filter((child) => !child.isDisabled).every((child) => child.loaded && child.checked) && checked2;
        this.indeterminate = this.loaded && checkedNum !== totalNum && checkedNum > 0;
      }
      doCheck(checked2) {
        if (this.checked === checked2)
          return;
        const { checkStrictly, multiple } = this.config;
        if (checkStrictly || !multiple) {
          this.checked = checked2;
        } else {
          this.broadcast("check", checked2);
          this.setCheckState(checked2);
          this.emit("check");
        }
      }
    }
    const flatNodes = (nodes, leafOnly) => {
      return nodes.reduce((res, node) => {
        if (node.isLeaf) {
          res.push(node);
        } else {
          !leafOnly && res.push(node);
          res = res.concat(flatNodes(node.children, leafOnly));
        }
        return res;
      }, []);
    };
    class Store {
      constructor(data, config2) {
        this.config = config2;
        const nodes = (data || []).map((nodeData) => new Node$1(nodeData, this.config));
        this.nodes = nodes;
        this.allNodes = flatNodes(nodes, false);
        this.leafNodes = flatNodes(nodes, true);
      }
      getNodes() {
        return this.nodes;
      }
      getFlattedNodes(leafOnly) {
        return leafOnly ? this.leafNodes : this.allNodes;
      }
      appendNode(nodeData, parentNode) {
        const node = parentNode ? parentNode.appendChild(nodeData) : new Node$1(nodeData, this.config);
        if (!parentNode)
          this.nodes.push(node);
        this.allNodes.push(node);
        node.isLeaf && this.leafNodes.push(node);
      }
      appendNodes(nodeDataList, parentNode) {
        nodeDataList.forEach((nodeData) => this.appendNode(nodeData, parentNode));
      }
      getNodeByValue(value, leafOnly = false) {
        if (!value && value !== 0)
          return null;
        const node = this.getFlattedNodes(leafOnly).find((node2) => isEqual$1(node2.value, value) || isEqual$1(node2.pathValues, value));
        return node || null;
      }
      getSameNode(node) {
        if (!node)
          return null;
        const node_ = this.getFlattedNodes(false).find(({ value, level }) => isEqual$1(node.value, value) && node.level === level);
        return node_ || null;
      }
    }
    const CommonProps = {
      modelValue: [Number, String, Array],
      options: {
        type: Array,
        default: () => []
      },
      props: {
        type: Object,
        default: () => ({})
      }
    };
    const DefaultProps = {
      expandTrigger: ExpandTrigger.CLICK,
      multiple: false,
      checkStrictly: false,
      emitPath: true,
      lazy: false,
      lazyLoad: NOOP,
      value: "value",
      label: "label",
      children: "children",
      leaf: "leaf",
      disabled: "disabled",
      hoverThreshold: 500
    };
    const useCascaderConfig = (props) => {
      return computed(() => ({
        ...DefaultProps,
        ...props.props
      }));
    };
    const getMenuIndex = (el) => {
      if (!el)
        return 0;
      const pieces = el.id.split("-");
      return Number(pieces[pieces.length - 2]);
    };
    const checkNode = (el) => {
      if (!el)
        return;
      const input = el.querySelector("input");
      if (input) {
        input.click();
      } else if (isLeaf(el)) {
        el.click();
      }
    };
    const sortByOriginalOrder = (oldNodes, newNodes) => {
      const newNodesCopy = newNodes.slice(0);
      const newIds = newNodesCopy.map((node) => node.uid);
      const res = oldNodes.reduce((acc, item) => {
        const index2 = newIds.indexOf(item.uid);
        if (index2 > -1) {
          acc.push(item);
          newNodesCopy.splice(index2, 1);
          newIds.splice(index2, 1);
        }
        return acc;
      }, []);
      res.push(...newNodesCopy);
      return res;
    };
    const _sfc_main$22 = defineComponent({
      name: "ElCascaderPanel",
      components: {
        ElCascaderMenu
      },
      props: {
        ...CommonProps,
        border: {
          type: Boolean,
          default: true
        },
        renderLabel: Function
      },
      emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, "close", "expand-change"],
      setup(props, { emit: emit2, slots }) {
        let manualChecked = false;
        const ns2 = useNamespace("cascader");
        const config2 = useCascaderConfig(props);
        let store = null;
        const initialLoaded = ref(true);
        const menuList = ref([]);
        const checkedValue = ref(null);
        const menus = ref([]);
        const expandingNode = ref(null);
        const checkedNodes = ref([]);
        const isHoverMenu = computed(() => config2.value.expandTrigger === ExpandTrigger.HOVER);
        const renderLabelFn = computed(() => props.renderLabel || slots.default);
        const initStore = () => {
          const { options } = props;
          const cfg = config2.value;
          manualChecked = false;
          store = new Store(options, cfg);
          menus.value = [store.getNodes()];
          if (cfg.lazy && isEmpty(props.options)) {
            initialLoaded.value = false;
            lazyLoad(void 0, (list) => {
              if (list) {
                store = new Store(list, cfg);
                menus.value = [store.getNodes()];
              }
              initialLoaded.value = true;
              syncCheckedValue(false, true);
            });
          } else {
            syncCheckedValue(false, true);
          }
        };
        const lazyLoad = (node, cb) => {
          const cfg = config2.value;
          node = node || new Node$1({}, cfg, void 0, true);
          node.loading = true;
          const resolve2 = (dataList) => {
            const _node = node;
            const parent = _node.root ? null : _node;
            dataList && (store == null ? void 0 : store.appendNodes(dataList, parent));
            _node.loading = false;
            _node.loaded = true;
            _node.childrenData = _node.childrenData || [];
            cb && cb(dataList);
          };
          cfg.lazyLoad(node, resolve2);
        };
        const expandNode = (node, silent) => {
          var _a2;
          const { level } = node;
          const newMenus = menus.value.slice(0, level);
          let newExpandingNode;
          if (node.isLeaf) {
            newExpandingNode = node.pathNodes[level - 2];
          } else {
            newExpandingNode = node;
            newMenus.push(node.children);
          }
          if (((_a2 = expandingNode.value) == null ? void 0 : _a2.uid) !== (newExpandingNode == null ? void 0 : newExpandingNode.uid)) {
            expandingNode.value = node;
            menus.value = newMenus;
            !silent && emit2("expand-change", (node == null ? void 0 : node.pathValues) || []);
          }
        };
        const handleCheckChange = (node, checked2, emitClose = true) => {
          const { checkStrictly, multiple } = config2.value;
          const oldNode = checkedNodes.value[0];
          manualChecked = true;
          !multiple && (oldNode == null ? void 0 : oldNode.doCheck(false));
          node.doCheck(checked2);
          calculateCheckedValue();
          emitClose && !multiple && !checkStrictly && emit2("close");
          !emitClose && !multiple && !checkStrictly && expandParentNode(node);
        };
        const expandParentNode = (node) => {
          if (!node)
            return;
          node = node.parent;
          expandParentNode(node);
          node && expandNode(node);
        };
        const getFlattedNodes = (leafOnly) => {
          return store == null ? void 0 : store.getFlattedNodes(leafOnly);
        };
        const getCheckedNodes = (leafOnly) => {
          var _a2;
          return (_a2 = getFlattedNodes(leafOnly)) == null ? void 0 : _a2.filter((node) => node.checked !== false);
        };
        const clearCheckedNodes = () => {
          checkedNodes.value.forEach((node) => node.doCheck(false));
          calculateCheckedValue();
        };
        const calculateCheckedValue = () => {
          var _a2;
          const { checkStrictly, multiple } = config2.value;
          const oldNodes = checkedNodes.value;
          const newNodes = getCheckedNodes(!checkStrictly);
          const nodes = sortByOriginalOrder(oldNodes, newNodes);
          const values = nodes.map((node) => node.valueByOption);
          checkedNodes.value = nodes;
          checkedValue.value = multiple ? values : (_a2 = values[0]) != null ? _a2 : null;
        };
        const syncCheckedValue = (loaded = false, forced = false) => {
          const { modelValue } = props;
          const { lazy, multiple, checkStrictly } = config2.value;
          const leafOnly = !checkStrictly;
          if (!initialLoaded.value || manualChecked || !forced && isEqual$1(modelValue, checkedValue.value))
            return;
          if (lazy && !loaded) {
            const values = unique(flattenDeep(castArray(modelValue)));
            const nodes = values.map((val) => store == null ? void 0 : store.getNodeByValue(val)).filter((node) => !!node && !node.loaded && !node.loading);
            if (nodes.length) {
              nodes.forEach((node) => {
                lazyLoad(node, () => syncCheckedValue(false, forced));
              });
            } else {
              syncCheckedValue(true, forced);
            }
          } else {
            const values = multiple ? castArray(modelValue) : [modelValue];
            const nodes = unique(values.map((val) => store == null ? void 0 : store.getNodeByValue(val, leafOnly)));
            syncMenuState(nodes, forced);
            checkedValue.value = modelValue;
          }
        };
        const syncMenuState = (newCheckedNodes, reserveExpandingState = true) => {
          const { checkStrictly } = config2.value;
          const oldNodes = checkedNodes.value;
          const newNodes = newCheckedNodes.filter((node) => !!node && (checkStrictly || node.isLeaf));
          const oldExpandingNode = store == null ? void 0 : store.getSameNode(expandingNode.value);
          const newExpandingNode = reserveExpandingState && oldExpandingNode || newNodes[0];
          if (newExpandingNode) {
            newExpandingNode.pathNodes.forEach((node) => expandNode(node, true));
          } else {
            expandingNode.value = null;
          }
          oldNodes.forEach((node) => node.doCheck(false));
          newNodes.forEach((node) => node.doCheck(true));
          checkedNodes.value = newNodes;
          nextTick$1(scrollToExpandingNode);
        };
        const scrollToExpandingNode = () => {
          if (!isClient)
            return;
          menuList.value.forEach((menu) => {
            const menuElement = menu == null ? void 0 : menu.$el;
            if (menuElement) {
              const container = menuElement.querySelector(`.${ns2.namespace.value}-scrollbar__wrap`);
              const activeNode = menuElement.querySelector(`.${ns2.b("node")}.${ns2.is("active")}`) || menuElement.querySelector(`.${ns2.b("node")}.in-active-path`);
              scrollIntoView(container, activeNode);
            }
          });
        };
        const handleKeyDown = (e2) => {
          const target = e2.target;
          const { code } = e2;
          switch (code) {
            case EVENT_CODE.up:
            case EVENT_CODE.down: {
              e2.preventDefault();
              const distance = code === EVENT_CODE.up ? -1 : 1;
              focusNode(getSibling(target, distance, `.${ns2.b("node")}[tabindex="-1"]`));
              break;
            }
            case EVENT_CODE.left: {
              e2.preventDefault();
              const preMenu = menuList.value[getMenuIndex(target) - 1];
              const expandedNode = preMenu == null ? void 0 : preMenu.$el.querySelector(`.${ns2.b("node")}[aria-expanded="true"]`);
              focusNode(expandedNode);
              break;
            }
            case EVENT_CODE.right: {
              e2.preventDefault();
              const nextMenu = menuList.value[getMenuIndex(target) + 1];
              const firstNode = nextMenu == null ? void 0 : nextMenu.$el.querySelector(`.${ns2.b("node")}[tabindex="-1"]`);
              focusNode(firstNode);
              break;
            }
            case EVENT_CODE.enter:
              checkNode(target);
              break;
          }
        };
        provide(CASCADER_PANEL_INJECTION_KEY, reactive({
          config: config2,
          expandingNode,
          checkedNodes,
          isHoverMenu,
          initialLoaded,
          renderLabelFn,
          lazyLoad,
          expandNode,
          handleCheckChange
        }));
        watch([config2, () => props.options], initStore, {
          deep: true,
          immediate: true
        });
        watch(() => props.modelValue, () => {
          manualChecked = false;
          syncCheckedValue();
        });
        watch(checkedValue, (val) => {
          if (!isEqual$1(val, props.modelValue)) {
            emit2(UPDATE_MODEL_EVENT, val);
            emit2(CHANGE_EVENT, val);
          }
        });
        onBeforeUpdate(() => menuList.value = []);
        onMounted(() => !isEmpty(props.modelValue) && syncCheckedValue());
        return {
          ns: ns2,
          menuList,
          menus,
          checkedNodes,
          handleKeyDown,
          handleCheckChange,
          getFlattedNodes,
          getCheckedNodes,
          clearCheckedNodes,
          calculateCheckedValue,
          scrollToExpandingNode
        };
      }
    });
    function _sfc_render$z(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_el_cascader_menu = resolveComponent("el-cascader-menu");
      return openBlock(), createElementBlock("div", {
        class: normalizeClass([_ctx.ns.b("panel"), _ctx.ns.is("bordered", _ctx.border)]),
        onKeydown: _cache[0] || (_cache[0] = (...args) => _ctx.handleKeyDown && _ctx.handleKeyDown(...args))
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.menus, (menu, index2) => {
          return openBlock(), createBlock(_component_el_cascader_menu, {
            key: index2,
            ref_for: true,
            ref: (item) => _ctx.menuList[index2] = item,
            index: index2,
            nodes: [...menu]
          }, null, 8, ["index", "nodes"]);
        }), 128))
      ], 34);
    }
    var CascaderPanel = /* @__PURE__ */ _export_sfc$1(_sfc_main$22, [["render", _sfc_render$z], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/cascader-panel/src/index.vue"]]);
    CascaderPanel.install = (app2) => {
      app2.component(CascaderPanel.name, CascaderPanel);
    };
    const _CascaderPanel = CascaderPanel;
    const ElCascaderPanel = _CascaderPanel;
    const tagProps = buildProps({
      closable: Boolean,
      type: {
        type: String,
        values: ["success", "info", "warning", "danger", ""],
        default: ""
      },
      hit: Boolean,
      disableTransitions: Boolean,
      color: {
        type: String,
        default: ""
      },
      size: {
        type: String,
        values: componentSizes,
        default: ""
      },
      effect: {
        type: String,
        values: ["dark", "light", "plain"],
        default: "light"
      },
      round: Boolean
    });
    const tagEmits = {
      close: (evt) => evt instanceof MouseEvent,
      click: (evt) => evt instanceof MouseEvent
    };
    const __default__$1n = {
      name: "ElTag"
    };
    const _sfc_main$21 = /* @__PURE__ */ defineComponent({
      ...__default__$1n,
      props: tagProps,
      emits: tagEmits,
      setup(__props, { emit: emit2 }) {
        const props = __props;
        const tagSize = useSize();
        const ns2 = useNamespace("tag");
        const classes = computed(() => {
          const { type: type2, hit, effect: effect2, closable, round: round2 } = props;
          return [
            ns2.b(),
            ns2.is("closable", closable),
            ns2.m(type2),
            ns2.m(tagSize.value),
            ns2.m(effect2),
            ns2.is("hit", hit),
            ns2.is("round", round2)
          ];
        });
        const handleClose = (event) => {
          emit2("close", event);
        };
        const handleClick = (event) => {
          emit2("click", event);
        };
        return (_ctx, _cache) => {
          return _ctx.disableTransitions ? (openBlock(), createElementBlock("span", {
            key: 0,
            class: normalizeClass(unref(classes)),
            style: normalizeStyle({ backgroundColor: _ctx.color }),
            onClick: handleClick
          }, [
            createBaseVNode("span", {
              class: normalizeClass(unref(ns2).e("content"))
            }, [
              renderSlot(_ctx.$slots, "default")
            ], 2),
            _ctx.closable ? (openBlock(), createBlock(unref(ElIcon), {
              key: 0,
              class: normalizeClass(unref(ns2).e("close")),
              onClick: withModifiers(handleClose, ["stop"])
            }, {
              default: withCtx(() => [
                createVNode(unref(close_default))
              ]),
              _: 1
            }, 8, ["class", "onClick"])) : createCommentVNode("v-if", true)
          ], 6)) : (openBlock(), createBlock(Transition, {
            key: 1,
            name: `${unref(ns2).namespace.value}-zoom-in-center`,
            appear: ""
          }, {
            default: withCtx(() => [
              createBaseVNode("span", {
                class: normalizeClass(unref(classes)),
                style: normalizeStyle({ backgroundColor: _ctx.color }),
                onClick: handleClick
              }, [
                createBaseVNode("span", {
                  class: normalizeClass(unref(ns2).e("content"))
                }, [
                  renderSlot(_ctx.$slots, "default")
                ], 2),
                _ctx.closable ? (openBlock(), createBlock(unref(ElIcon), {
                  key: 0,
                  class: normalizeClass(unref(ns2).e("close")),
                  onClick: withModifiers(handleClose, ["stop"])
                }, {
                  default: withCtx(() => [
                    createVNode(unref(close_default))
                  ]),
                  _: 1
                }, 8, ["class", "onClick"])) : createCommentVNode("v-if", true)
              ], 6)
            ]),
            _: 3
          }, 8, ["name"]));
        };
      }
    });
    var Tag = /* @__PURE__ */ _export_sfc$1(_sfc_main$21, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/tag/src/tag.vue"]]);
    const ElTag = withInstall(Tag);
    const DEFAULT_INPUT_HEIGHT = 40;
    const INPUT_HEIGHT_MAP = {
      large: 36,
      default: 32,
      small: 28
    };
    const popperOptions = {
      modifiers: [
        {
          name: "arrowPosition",
          enabled: true,
          phase: "main",
          fn: ({ state }) => {
            const { modifiersData, placement } = state;
            if (["right", "left", "bottom", "top"].includes(placement))
              return;
            modifiersData.arrow.x = 35;
          },
          requires: ["arrow"]
        }
      ]
    };
    const COMPONENT_NAME$a = "ElCascader";
    const _sfc_main$20 = defineComponent({
      name: COMPONENT_NAME$a,
      components: {
        ElCascaderPanel: _CascaderPanel,
        ElInput,
        ElTooltip,
        ElScrollbar,
        ElTag,
        ElIcon,
        CircleClose: circle_close_default,
        Check: check_default,
        ArrowDown: arrow_down_default
      },
      directives: {
        Clickoutside: ClickOutside
      },
      props: {
        ...CommonProps,
        size: {
          type: String,
          validator: isValidComponentSize
        },
        placeholder: {
          type: String
        },
        disabled: Boolean,
        clearable: Boolean,
        filterable: Boolean,
        filterMethod: {
          type: Function,
          default: (node, keyword) => node.text.includes(keyword)
        },
        separator: {
          type: String,
          default: " / "
        },
        showAllLevels: {
          type: Boolean,
          default: true
        },
        collapseTags: Boolean,
        collapseTagsTooltip: {
          type: Boolean,
          default: false
        },
        debounce: {
          type: Number,
          default: 300
        },
        beforeFilter: {
          type: Function,
          default: () => true
        },
        popperClass: {
          type: String,
          default: ""
        },
        teleported: useTooltipContentProps.teleported,
        tagType: { ...tagProps.type, default: "info" },
        validateEvent: {
          type: Boolean,
          default: true
        }
      },
      emits: [
        UPDATE_MODEL_EVENT,
        CHANGE_EVENT,
        "focus",
        "blur",
        "visible-change",
        "expand-change",
        "remove-tag"
      ],
      setup(props, { emit: emit2 }) {
        let inputInitialHeight = 0;
        let pressDeleteCount = 0;
        const nsCascader = useNamespace("cascader");
        const nsInput = useNamespace("input");
        const { t } = useLocale();
        const elForm = inject(formContextKey, {});
        const elFormItem = inject(formItemContextKey, {});
        const tooltipRef = ref(null);
        const input = ref(null);
        const tagWrapper = ref(null);
        const panel = ref(null);
        const suggestionPanel = ref(null);
        const popperVisible = ref(false);
        const inputHover = ref(false);
        const filtering = ref(false);
        const inputValue = ref("");
        const searchInputValue = ref("");
        const presentTags = ref([]);
        const allPresentTags = ref([]);
        const suggestions = ref([]);
        const isOnComposition = ref(false);
        const isDisabled = computed(() => props.disabled || elForm.disabled);
        const inputPlaceholder = computed(() => props.placeholder || t("el.cascader.placeholder"));
        const realSize = useSize();
        const tagSize = computed(() => ["small"].includes(realSize.value) ? "small" : "default");
        const multiple = computed(() => !!props.props.multiple);
        const readonly2 = computed(() => !props.filterable || multiple.value);
        const searchKeyword = computed(() => multiple.value ? searchInputValue.value : inputValue.value);
        const checkedNodes = computed(() => {
          var _a2;
          return ((_a2 = panel.value) == null ? void 0 : _a2.checkedNodes) || [];
        });
        const clearBtnVisible = computed(() => {
          if (!props.clearable || isDisabled.value || filtering.value || !inputHover.value)
            return false;
          return !!checkedNodes.value.length;
        });
        const presentText = computed(() => {
          const { showAllLevels, separator } = props;
          const nodes = checkedNodes.value;
          return nodes.length ? multiple.value ? " " : nodes[0].calcText(showAllLevels, separator) : "";
        });
        const checkedValue = computed({
          get() {
            return props.modelValue;
          },
          set(val) {
            var _a2;
            emit2(UPDATE_MODEL_EVENT, val);
            emit2(CHANGE_EVENT, val);
            if (props.validateEvent) {
              (_a2 = elFormItem.validate) == null ? void 0 : _a2.call(elFormItem, "change").catch((err) => debugWarn());
            }
          }
        });
        const popperPaneRef = computed(() => {
          var _a2, _b;
          return (_b = (_a2 = tooltipRef.value) == null ? void 0 : _a2.popperRef) == null ? void 0 : _b.contentRef;
        });
        const togglePopperVisible = (visible) => {
          var _a2, _b, _c;
          if (isDisabled.value)
            return;
          visible = visible != null ? visible : !popperVisible.value;
          if (visible !== popperVisible.value) {
            popperVisible.value = visible;
            (_b = (_a2 = input.value) == null ? void 0 : _a2.input) == null ? void 0 : _b.setAttribute("aria-expanded", `${visible}`);
            if (visible) {
              updatePopperPosition();
              nextTick$1((_c = panel.value) == null ? void 0 : _c.scrollToExpandingNode);
            } else if (props.filterable) {
              const { value } = presentText;
              inputValue.value = value;
              searchInputValue.value = value;
            }
            emit2("visible-change", visible);
          }
        };
        const updatePopperPosition = () => {
          nextTick$1(() => {
            var _a2;
            (_a2 = tooltipRef.value) == null ? void 0 : _a2.updatePopper();
          });
        };
        const hideSuggestionPanel = () => {
          filtering.value = false;
        };
        const genTag2 = (node) => {
          const { showAllLevels, separator } = props;
          return {
            node,
            key: node.uid,
            text: node.calcText(showAllLevels, separator),
            hitState: false,
            closable: !isDisabled.value && !node.isDisabled,
            isCollapseTag: false
          };
        };
        const deleteTag = (tag) => {
          var _a2;
          const node = tag.node;
          node.doCheck(false);
          (_a2 = panel.value) == null ? void 0 : _a2.calculateCheckedValue();
          emit2("remove-tag", node.valueByOption);
        };
        const calculatePresentTags = () => {
          if (!multiple.value)
            return;
          const nodes = checkedNodes.value;
          const tags = [];
          const allTags = [];
          nodes.forEach((node) => allTags.push(genTag2(node)));
          allPresentTags.value = allTags;
          if (nodes.length) {
            const [first, ...rest] = nodes;
            const restCount = rest.length;
            tags.push(genTag2(first));
            if (restCount) {
              if (props.collapseTags) {
                tags.push({
                  key: -1,
                  text: `+ ${restCount}`,
                  closable: false,
                  isCollapseTag: true
                });
              } else {
                rest.forEach((node) => tags.push(genTag2(node)));
              }
            }
          }
          presentTags.value = tags;
        };
        const calculateSuggestions = () => {
          var _a2, _b;
          const { filterMethod, showAllLevels, separator } = props;
          const res = (_b = (_a2 = panel.value) == null ? void 0 : _a2.getFlattedNodes(!props.props.checkStrictly)) == null ? void 0 : _b.filter((node) => {
            if (node.isDisabled)
              return false;
            node.calcText(showAllLevels, separator);
            return filterMethod(node, searchKeyword.value);
          });
          if (multiple.value) {
            presentTags.value.forEach((tag) => {
              tag.hitState = false;
            });
            allPresentTags.value.forEach((tag) => {
              tag.hitState = false;
            });
          }
          filtering.value = true;
          suggestions.value = res;
          updatePopperPosition();
        };
        const focusFirstNode = () => {
          var _a2;
          let firstNode;
          if (filtering.value && suggestionPanel.value) {
            firstNode = suggestionPanel.value.$el.querySelector(`.${nsCascader.e("suggestion-item")}`);
          } else {
            firstNode = (_a2 = panel.value) == null ? void 0 : _a2.$el.querySelector(`.${nsCascader.b("node")}[tabindex="-1"]`);
          }
          if (firstNode) {
            firstNode.focus();
            !filtering.value && firstNode.click();
          }
        };
        const updateStyle = () => {
          var _a2, _b;
          const inputInner = (_a2 = input.value) == null ? void 0 : _a2.input;
          const tagWrapperEl = tagWrapper.value;
          const suggestionPanelEl = (_b = suggestionPanel.value) == null ? void 0 : _b.$el;
          if (!isClient || !inputInner)
            return;
          if (suggestionPanelEl) {
            const suggestionList = suggestionPanelEl.querySelector(`.${nsCascader.e("suggestion-list")}`);
            suggestionList.style.minWidth = `${inputInner.offsetWidth}px`;
          }
          if (tagWrapperEl) {
            const { offsetHeight } = tagWrapperEl;
            const height = presentTags.value.length > 0 ? `${Math.max(offsetHeight + 6, inputInitialHeight)}px` : `${inputInitialHeight}px`;
            inputInner.style.height = height;
            updatePopperPosition();
          }
        };
        const getCheckedNodes = (leafOnly) => {
          var _a2;
          return (_a2 = panel.value) == null ? void 0 : _a2.getCheckedNodes(leafOnly);
        };
        const handleExpandChange = (value) => {
          updatePopperPosition();
          emit2("expand-change", value);
        };
        const handleComposition = (event) => {
          var _a2;
          const text = (_a2 = event.target) == null ? void 0 : _a2.value;
          if (event.type === "compositionend") {
            isOnComposition.value = false;
            nextTick$1(() => handleInput(text));
          } else {
            const lastCharacter = text[text.length - 1] || "";
            isOnComposition.value = !isKorean(lastCharacter);
          }
        };
        const handleKeyDown = (e2) => {
          if (isOnComposition.value)
            return;
          switch (e2.code) {
            case EVENT_CODE.enter:
              togglePopperVisible();
              break;
            case EVENT_CODE.down:
              togglePopperVisible(true);
              nextTick$1(focusFirstNode);
              e2.preventDefault();
              break;
            case EVENT_CODE.esc:
              if (popperVisible.value === true) {
                e2.preventDefault();
                e2.stopPropagation();
                togglePopperVisible(false);
              }
              break;
            case EVENT_CODE.tab:
              togglePopperVisible(false);
              break;
          }
        };
        const handleClear = () => {
          var _a2;
          (_a2 = panel.value) == null ? void 0 : _a2.clearCheckedNodes();
          togglePopperVisible(false);
        };
        const handleSuggestionClick = (node) => {
          var _a2, _b;
          const { checked: checked2 } = node;
          if (multiple.value) {
            (_a2 = panel.value) == null ? void 0 : _a2.handleCheckChange(node, !checked2, false);
          } else {
            !checked2 && ((_b = panel.value) == null ? void 0 : _b.handleCheckChange(node, true, false));
            togglePopperVisible(false);
          }
        };
        const handleSuggestionKeyDown = (e2) => {
          const target = e2.target;
          const { code } = e2;
          switch (code) {
            case EVENT_CODE.up:
            case EVENT_CODE.down: {
              const distance = code === EVENT_CODE.up ? -1 : 1;
              focusNode(getSibling(target, distance, `.${nsCascader.e("suggestion-item")}[tabindex="-1"]`));
              break;
            }
            case EVENT_CODE.enter:
              target.click();
              break;
          }
        };
        const handleDelete = () => {
          const tags = presentTags.value;
          const lastTag = tags[tags.length - 1];
          pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1;
          if (!lastTag || !pressDeleteCount)
            return;
          if (lastTag.hitState) {
            deleteTag(lastTag);
          } else {
            lastTag.hitState = true;
          }
        };
        const handleFilter = debounce(() => {
          const { value } = searchKeyword;
          if (!value)
            return;
          const passed = props.beforeFilter(value);
          if (isPromise$1(passed)) {
            passed.then(calculateSuggestions).catch(() => {
            });
          } else if (passed !== false) {
            calculateSuggestions();
          } else {
            hideSuggestionPanel();
          }
        }, props.debounce);
        const handleInput = (val, e2) => {
          !popperVisible.value && togglePopperVisible(true);
          if (e2 == null ? void 0 : e2.isComposing)
            return;
          val ? handleFilter() : hideSuggestionPanel();
        };
        watch(filtering, updatePopperPosition);
        watch([checkedNodes, isDisabled], calculatePresentTags);
        watch(presentTags, () => {
          nextTick$1(() => updateStyle());
        });
        watch(presentText, (val) => inputValue.value = val, { immediate: true });
        onMounted(() => {
          var _a2;
          const inputEl = (_a2 = input.value) == null ? void 0 : _a2.$el;
          inputInitialHeight = (inputEl == null ? void 0 : inputEl.offsetHeight) || INPUT_HEIGHT_MAP[realSize.value] || DEFAULT_INPUT_HEIGHT;
          useResizeObserver(inputEl, updateStyle);
        });
        return {
          popperOptions,
          tooltipRef,
          popperPaneRef,
          input,
          tagWrapper,
          panel,
          suggestionPanel,
          popperVisible,
          inputHover,
          inputPlaceholder,
          filtering,
          presentText,
          checkedValue,
          inputValue,
          searchInputValue,
          presentTags,
          allPresentTags,
          suggestions,
          isDisabled,
          isOnComposition,
          realSize,
          tagSize,
          multiple,
          readonly: readonly2,
          clearBtnVisible,
          nsCascader,
          nsInput,
          t,
          togglePopperVisible,
          hideSuggestionPanel,
          deleteTag,
          focusFirstNode,
          getCheckedNodes,
          handleExpandChange,
          handleKeyDown,
          handleComposition,
          handleClear,
          handleSuggestionClick,
          handleSuggestionKeyDown,
          handleDelete,
          handleInput
        };
      }
    });
    const _hoisted_1$U = { key: 0 };
    const _hoisted_2$z = ["placeholder"];
    const _hoisted_3$i = ["onClick"];
    function _sfc_render$y(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_circle_close = resolveComponent("circle-close");
      const _component_el_icon = resolveComponent("el-icon");
      const _component_arrow_down = resolveComponent("arrow-down");
      const _component_el_input = resolveComponent("el-input");
      const _component_el_tag = resolveComponent("el-tag");
      const _component_el_tooltip = resolveComponent("el-tooltip");
      const _component_el_cascader_panel = resolveComponent("el-cascader-panel");
      const _component_check = resolveComponent("check");
      const _component_el_scrollbar = resolveComponent("el-scrollbar");
      const _directive_clickoutside = resolveDirective("clickoutside");
      return openBlock(), createBlock(_component_el_tooltip, {
        ref: "tooltipRef",
        visible: _ctx.popperVisible,
        teleported: _ctx.teleported,
        "popper-class": [_ctx.nsCascader.e("dropdown"), _ctx.popperClass],
        "popper-options": _ctx.popperOptions,
        "fallback-placements": [
          "bottom-start",
          "bottom",
          "top-start",
          "top",
          "right",
          "left"
        ],
        "stop-popper-mouse-event": false,
        "gpu-acceleration": false,
        placement: "bottom-start",
        transition: `${_ctx.nsCascader.namespace.value}-zoom-in-top`,
        effect: "light",
        pure: "",
        persistent: "",
        onHide: _ctx.hideSuggestionPanel
      }, {
        default: withCtx(() => [
          withDirectives((openBlock(), createElementBlock("div", {
            class: normalizeClass([
              _ctx.nsCascader.b(),
              _ctx.nsCascader.m(_ctx.realSize),
              _ctx.nsCascader.is("disabled", _ctx.isDisabled),
              _ctx.$attrs.class
            ]),
            style: normalizeStyle(_ctx.$attrs.style),
            onClick: _cache[11] || (_cache[11] = () => _ctx.togglePopperVisible(_ctx.readonly ? void 0 : true)),
            onKeydown: _cache[12] || (_cache[12] = (...args) => _ctx.handleKeyDown && _ctx.handleKeyDown(...args)),
            onMouseenter: _cache[13] || (_cache[13] = ($event) => _ctx.inputHover = true),
            onMouseleave: _cache[14] || (_cache[14] = ($event) => _ctx.inputHover = false)
          }, [
            createVNode(_component_el_input, {
              ref: "input",
              modelValue: _ctx.inputValue,
              "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.inputValue = $event),
              placeholder: _ctx.searchInputValue ? "" : _ctx.inputPlaceholder,
              readonly: _ctx.readonly,
              disabled: _ctx.isDisabled,
              "validate-event": false,
              size: _ctx.realSize,
              class: normalizeClass(_ctx.nsCascader.is("focus", _ctx.popperVisible)),
              onCompositionstart: _ctx.handleComposition,
              onCompositionupdate: _ctx.handleComposition,
              onCompositionend: _ctx.handleComposition,
              onFocus: _cache[2] || (_cache[2] = (e2) => _ctx.$emit("focus", e2)),
              onBlur: _cache[3] || (_cache[3] = (e2) => _ctx.$emit("blur", e2)),
              onInput: _ctx.handleInput
            }, {
              suffix: withCtx(() => [
                _ctx.clearBtnVisible ? (openBlock(), createBlock(_component_el_icon, {
                  key: "clear",
                  class: normalizeClass([_ctx.nsInput.e("icon"), "icon-circle-close"]),
                  onClick: withModifiers(_ctx.handleClear, ["stop"])
                }, {
                  default: withCtx(() => [
                    createVNode(_component_circle_close)
                  ]),
                  _: 1
                }, 8, ["class", "onClick"])) : (openBlock(), createBlock(_component_el_icon, {
                  key: "arrow-down",
                  class: normalizeClass([
                    _ctx.nsInput.e("icon"),
                    "icon-arrow-down",
                    _ctx.nsCascader.is("reverse", _ctx.popperVisible)
                  ]),
                  onClick: _cache[0] || (_cache[0] = withModifiers(($event) => _ctx.togglePopperVisible(), ["stop"]))
                }, {
                  default: withCtx(() => [
                    createVNode(_component_arrow_down)
                  ]),
                  _: 1
                }, 8, ["class"]))
              ]),
              _: 1
            }, 8, ["modelValue", "placeholder", "readonly", "disabled", "size", "class", "onCompositionstart", "onCompositionupdate", "onCompositionend", "onInput"]),
            _ctx.multiple ? (openBlock(), createElementBlock("div", {
              key: 0,
              ref: "tagWrapper",
              class: normalizeClass(_ctx.nsCascader.e("tags"))
            }, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.presentTags, (tag) => {
                return openBlock(), createBlock(_component_el_tag, {
                  key: tag.key,
                  type: _ctx.tagType,
                  size: _ctx.tagSize,
                  hit: tag.hitState,
                  closable: tag.closable,
                  "disable-transitions": "",
                  onClose: ($event) => _ctx.deleteTag(tag)
                }, {
                  default: withCtx(() => [
                    tag.isCollapseTag === false ? (openBlock(), createElementBlock("span", _hoisted_1$U, toDisplayString$1(tag.text), 1)) : (openBlock(), createBlock(_component_el_tooltip, {
                      key: 1,
                      teleported: false,
                      disabled: _ctx.popperVisible || !_ctx.collapseTagsTooltip,
                      "fallback-placements": ["bottom", "top", "right", "left"],
                      placement: "bottom",
                      effect: "light"
                    }, {
                      default: withCtx(() => [
                        createBaseVNode("span", null, toDisplayString$1(tag.text), 1)
                      ]),
                      content: withCtx(() => [
                        createBaseVNode("div", {
                          class: normalizeClass(_ctx.nsCascader.e("collapse-tags"))
                        }, [
                          (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.allPresentTags, (tag2, idx) => {
                            return openBlock(), createElementBlock("div", {
                              key: idx,
                              class: normalizeClass(_ctx.nsCascader.e("collapse-tag"))
                            }, [
                              (openBlock(), createBlock(_component_el_tag, {
                                key: tag2.key,
                                class: "in-tooltip",
                                type: _ctx.tagType,
                                size: _ctx.tagSize,
                                hit: tag2.hitState,
                                closable: tag2.closable,
                                "disable-transitions": "",
                                onClose: ($event) => _ctx.deleteTag(tag2)
                              }, {
                                default: withCtx(() => [
                                  createBaseVNode("span", null, toDisplayString$1(tag2.text), 1)
                                ]),
                                _: 2
                              }, 1032, ["type", "size", "hit", "closable", "onClose"]))
                            ], 2);
                          }), 128))
                        ], 2)
                      ]),
                      _: 2
                    }, 1032, ["disabled"]))
                  ]),
                  _: 2
                }, 1032, ["type", "size", "hit", "closable", "onClose"]);
              }), 128)),
              _ctx.filterable && !_ctx.isDisabled ? withDirectives((openBlock(), createElementBlock("input", {
                key: 0,
                "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => _ctx.searchInputValue = $event),
                type: "text",
                class: normalizeClass(_ctx.nsCascader.e("search-input")),
                placeholder: _ctx.presentText ? "" : _ctx.inputPlaceholder,
                onInput: _cache[5] || (_cache[5] = (e2) => _ctx.handleInput(_ctx.searchInputValue, e2)),
                onClick: _cache[6] || (_cache[6] = withModifiers(($event) => _ctx.togglePopperVisible(true), ["stop"])),
                onKeydown: _cache[7] || (_cache[7] = withKeys((...args) => _ctx.handleDelete && _ctx.handleDelete(...args), ["delete"])),
                onCompositionstart: _cache[8] || (_cache[8] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args)),
                onCompositionupdate: _cache[9] || (_cache[9] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args)),
                onCompositionend: _cache[10] || (_cache[10] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args))
              }, null, 42, _hoisted_2$z)), [
                [vModelText, _ctx.searchInputValue]
              ]) : createCommentVNode("v-if", true)
            ], 2)) : createCommentVNode("v-if", true)
          ], 38)), [
            [_directive_clickoutside, () => _ctx.togglePopperVisible(false), _ctx.popperPaneRef]
          ])
        ]),
        content: withCtx(() => [
          withDirectives(createVNode(_component_el_cascader_panel, {
            ref: "panel",
            modelValue: _ctx.checkedValue,
            "onUpdate:modelValue": _cache[15] || (_cache[15] = ($event) => _ctx.checkedValue = $event),
            options: _ctx.options,
            props: _ctx.props,
            border: false,
            "render-label": _ctx.$slots.default,
            onExpandChange: _ctx.handleExpandChange,
            onClose: _cache[16] || (_cache[16] = ($event) => _ctx.$nextTick(() => _ctx.togglePopperVisible(false)))
          }, null, 8, ["modelValue", "options", "props", "render-label", "onExpandChange"]), [
            [vShow, !_ctx.filtering]
          ]),
          _ctx.filterable ? withDirectives((openBlock(), createBlock(_component_el_scrollbar, {
            key: 0,
            ref: "suggestionPanel",
            tag: "ul",
            class: normalizeClass(_ctx.nsCascader.e("suggestion-panel")),
            "view-class": _ctx.nsCascader.e("suggestion-list"),
            onKeydown: _ctx.handleSuggestionKeyDown
          }, {
            default: withCtx(() => [
              _ctx.suggestions.length ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(_ctx.suggestions, (item) => {
                return openBlock(), createElementBlock("li", {
                  key: item.uid,
                  class: normalizeClass([
                    _ctx.nsCascader.e("suggestion-item"),
                    _ctx.nsCascader.is("checked", item.checked)
                  ]),
                  tabindex: -1,
                  onClick: ($event) => _ctx.handleSuggestionClick(item)
                }, [
                  createBaseVNode("span", null, toDisplayString$1(item.text), 1),
                  item.checked ? (openBlock(), createBlock(_component_el_icon, { key: 0 }, {
                    default: withCtx(() => [
                      createVNode(_component_check)
                    ]),
                    _: 1
                  })) : createCommentVNode("v-if", true)
                ], 10, _hoisted_3$i);
              }), 128)) : renderSlot(_ctx.$slots, "empty", { key: 1 }, () => [
                createBaseVNode("li", {
                  class: normalizeClass(_ctx.nsCascader.e("empty-text"))
                }, toDisplayString$1(_ctx.t("el.cascader.noMatch")), 3)
              ])
            ]),
            _: 3
          }, 8, ["class", "view-class", "onKeydown"])), [
            [vShow, _ctx.filtering]
          ]) : createCommentVNode("v-if", true)
        ]),
        _: 3
      }, 8, ["visible", "teleported", "popper-class", "popper-options", "transition", "onHide"]);
    }
    var Cascader = /* @__PURE__ */ _export_sfc$1(_sfc_main$20, [["render", _sfc_render$y], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/cascader/src/index.vue"]]);
    Cascader.install = (app2) => {
      app2.component(Cascader.name, Cascader);
    };
    const _Cascader = Cascader;
    const ElCascader = _Cascader;
    const checkTagProps = buildProps({
      checked: {
        type: Boolean,
        default: false
      }
    });
    const checkTagEmits = {
      "update:checked": (value) => isBoolean$1(value),
      [CHANGE_EVENT]: (value) => isBoolean$1(value)
    };
    const __default__$1m = {
      name: "ElCheckTag"
    };
    const _sfc_main$1$ = /* @__PURE__ */ defineComponent({
      ...__default__$1m,
      props: checkTagProps,
      emits: checkTagEmits,
      setup(__props, { emit: emit2 }) {
        const props = __props;
        const ns2 = useNamespace("check-tag");
        const handleChange = () => {
          const checked2 = !props.checked;
          emit2(CHANGE_EVENT, checked2);
          emit2("update:checked", checked2);
        };
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("span", {
            class: normalizeClass([unref(ns2).b(), unref(ns2).is("checked", _ctx.checked)]),
            onClick: handleChange
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 2);
        };
      }
    });
    var CheckTag = /* @__PURE__ */ _export_sfc$1(_sfc_main$1$, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/check-tag/src/check-tag.vue"]]);
    const ElCheckTag = withInstall(CheckTag);
    const colProps = buildProps({
      tag: {
        type: String,
        default: "div"
      },
      span: {
        type: Number,
        default: 24
      },
      offset: {
        type: Number,
        default: 0
      },
      pull: {
        type: Number,
        default: 0
      },
      push: {
        type: Number,
        default: 0
      },
      xs: {
        type: definePropType([Number, Object]),
        default: () => mutable({})
      },
      sm: {
        type: definePropType([Number, Object]),
        default: () => mutable({})
      },
      md: {
        type: definePropType([Number, Object]),
        default: () => mutable({})
      },
      lg: {
        type: definePropType([Number, Object]),
        default: () => mutable({})
      },
      xl: {
        type: definePropType([Number, Object]),
        default: () => mutable({})
      }
    });
    const __default__$1l = {
      name: "ElCol"
    };
    const _sfc_main$1_ = /* @__PURE__ */ defineComponent({
      ...__default__$1l,
      props: colProps,
      setup(__props) {
        const props = __props;
        const { gutter } = inject(rowContextKey, { gutter: computed(() => 0) });
        const ns2 = useNamespace("col");
        const style2 = computed(() => {
          const styles = {};
          if (gutter.value) {
            styles.paddingLeft = styles.paddingRight = `${gutter.value / 2}px`;
          }
          return styles;
        });
        const classes = computed(() => {
          const classes2 = [];
          const pos = ["span", "offset", "pull", "push"];
          pos.forEach((prop) => {
            const size2 = props[prop];
            if (isNumber$1(size2)) {
              if (prop === "span")
                classes2.push(ns2.b(`${props[prop]}`));
              else if (size2 > 0)
                classes2.push(ns2.b(`${prop}-${props[prop]}`));
            }
          });
          const sizes = ["xs", "sm", "md", "lg", "xl"];
          sizes.forEach((size2) => {
            if (isNumber$1(props[size2])) {
              classes2.push(ns2.b(`${size2}-${props[size2]}`));
            } else if (isObject$7(props[size2])) {
              Object.entries(props[size2]).forEach(([prop, sizeProp]) => {
                classes2.push(prop !== "span" ? ns2.b(`${size2}-${prop}-${sizeProp}`) : ns2.b(`${size2}-${sizeProp}`));
              });
            }
          });
          if (gutter.value) {
            classes2.push(ns2.is("guttered"));
          }
          return classes2;
        });
        return (_ctx, _cache) => {
          return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {
            class: normalizeClass([unref(ns2).b(), unref(classes)]),
            style: normalizeStyle(unref(style2))
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          }, 8, ["class", "style"]);
        };
      }
    });
    var Col = /* @__PURE__ */ _export_sfc$1(_sfc_main$1_, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/col/src/col.vue"]]);
    const ElCol = withInstall(Col);
    const emitChangeFn = (value) => typeof isNumber$1(value);
    const collapseProps = buildProps({
      accordion: Boolean,
      modelValue: {
        type: definePropType([Array, String, Number]),
        default: () => mutable([])
      }
    });
    const collapseEmits = {
      [UPDATE_MODEL_EVENT]: emitChangeFn,
      [CHANGE_EVENT]: emitChangeFn
    };
    const __default__$1k = {
      name: "ElCollapse"
    };
    const _sfc_main$1Z = /* @__PURE__ */ defineComponent({
      ...__default__$1k,
      props: collapseProps,
      emits: collapseEmits,
      setup(__props, { expose, emit: emit2 }) {
        const props = __props;
        const ns2 = useNamespace("collapse");
        const activeNames = ref(castArray$1(props.modelValue));
        const setActiveNames = (_activeNames) => {
          activeNames.value = _activeNames;
          const value = props.accordion ? activeNames.value[0] : activeNames.value;
          emit2(UPDATE_MODEL_EVENT, value);
          emit2(CHANGE_EVENT, value);
        };
        const handleItemClick = (name) => {
          if (props.accordion) {
            setActiveNames([
              (activeNames.value[0] || activeNames.value[0] === 0) && activeNames.value[0] === name ? "" : name
            ]);
          } else {
            const _activeNames = [...activeNames.value];
            const index2 = _activeNames.indexOf(name);
            if (index2 > -1) {
              _activeNames.splice(index2, 1);
            } else {
              _activeNames.push(name);
            }
            setActiveNames(_activeNames);
          }
        };
        watch(() => props.modelValue, () => activeNames.value = castArray$1(props.modelValue), { deep: true });
        provide(collapseContextKey, {
          activeNames,
          handleItemClick
        });
        expose({
          activeNames,
          setActiveNames
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            class: normalizeClass(unref(ns2).b()),
            role: "tablist",
            "aria-multiselectable": "true"
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 2);
        };
      }
    });
    var Collapse = /* @__PURE__ */ _export_sfc$1(_sfc_main$1Z, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/collapse/src/collapse.vue"]]);
    const __default__$1j = {
      name: "ElCollapseTransition"
    };
    const _sfc_main$1Y = /* @__PURE__ */ defineComponent({
      ...__default__$1j,
      setup(__props) {
        const ns2 = useNamespace("collapse-transition");
        const on2 = {
          beforeEnter(el) {
            if (!el.dataset)
              el.dataset = {};
            el.dataset.oldPaddingTop = el.style.paddingTop;
            el.dataset.oldPaddingBottom = el.style.paddingBottom;
            el.style.maxHeight = 0;
            el.style.paddingTop = 0;
            el.style.paddingBottom = 0;
          },
          enter(el) {
            el.dataset.oldOverflow = el.style.overflow;
            if (el.scrollHeight !== 0) {
              el.style.maxHeight = `${el.scrollHeight}px`;
              el.style.paddingTop = el.dataset.oldPaddingTop;
              el.style.paddingBottom = el.dataset.oldPaddingBottom;
            } else {
              el.style.maxHeight = 0;
              el.style.paddingTop = el.dataset.oldPaddingTop;
              el.style.paddingBottom = el.dataset.oldPaddingBottom;
            }
            el.style.overflow = "hidden";
          },
          afterEnter(el) {
            el.style.maxHeight = "";
            el.style.overflow = el.dataset.oldOverflow;
          },
          beforeLeave(el) {
            if (!el.dataset)
              el.dataset = {};
            el.dataset.oldPaddingTop = el.style.paddingTop;
            el.dataset.oldPaddingBottom = el.style.paddingBottom;
            el.dataset.oldOverflow = el.style.overflow;
            el.style.maxHeight = `${el.scrollHeight}px`;
            el.style.overflow = "hidden";
          },
          leave(el) {
            if (el.scrollHeight !== 0) {
              el.style.maxHeight = 0;
              el.style.paddingTop = 0;
              el.style.paddingBottom = 0;
            }
          },
          afterLeave(el) {
            el.style.maxHeight = "";
            el.style.overflow = el.dataset.oldOverflow;
            el.style.paddingTop = el.dataset.oldPaddingTop;
            el.style.paddingBottom = el.dataset.oldPaddingBottom;
          }
        };
        return (_ctx, _cache) => {
          return openBlock(), createBlock(Transition, mergeProps({
            name: unref(ns2).b()
          }, toHandlers(on2)), {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          }, 16, ["name"]);
        };
      }
    });
    var CollapseTransition = /* @__PURE__ */ _export_sfc$1(_sfc_main$1Y, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/collapse-transition/src/collapse-transition.vue"]]);
    CollapseTransition.install = (app2) => {
      app2.component(CollapseTransition.name, CollapseTransition);
    };
    const _CollapseTransition = CollapseTransition;
    const ElCollapseTransition = _CollapseTransition;
    const collapseItemProps = buildProps({
      title: {
        type: String,
        default: ""
      },
      name: {
        type: definePropType([String, Number]),
        default: () => generateId()
      },
      disabled: Boolean
    });
    const _hoisted_1$T = ["aria-expanded", "aria-controls", "aria-describedby"];
    const _hoisted_2$y = ["id", "tabindex", "onKeypress"];
    const _hoisted_3$h = ["id", "aria-hidden", "aria-labelledby"];
    const __default__$1i = {
      name: "ElCollapseItem"
    };
    const _sfc_main$1X = /* @__PURE__ */ defineComponent({
      ...__default__$1i,
      props: collapseItemProps,
      setup(__props, { expose }) {
        const props = __props;
        const collapse = inject(collapseContextKey);
        const ns2 = useNamespace("collapse");
        const focusing = ref(false);
        const isClick = ref(false);
        const id2 = ref(generateId());
        const isActive = computed(() => collapse == null ? void 0 : collapse.activeNames.value.includes(props.name));
        const handleFocus = () => {
          setTimeout(() => {
            if (!isClick.value) {
              focusing.value = true;
            } else {
              isClick.value = false;
            }
          }, 50);
        };
        const handleHeaderClick = () => {
          if (props.disabled)
            return;
          collapse == null ? void 0 : collapse.handleItemClick(props.name);
          focusing.value = false;
          isClick.value = true;
        };
        const handleEnterClick = () => {
          collapse == null ? void 0 : collapse.handleItemClick(props.name);
        };
        expose({
          isActive
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            class: normalizeClass([
              unref(ns2).b("item"),
              unref(ns2).is("active", unref(isActive)),
              unref(ns2).is("disabled", _ctx.disabled)
            ])
          }, [
            createBaseVNode("div", {
              role: "tab",
              "aria-expanded": unref(isActive),
              "aria-controls": unref(ns2).b(`content-${id2.value}`),
              "aria-describedby": unref(ns2).b(`content-${id2.value}`)
            }, [
              createBaseVNode("div", {
                id: unref(ns2).b(`head-${id2.value}`),
                class: normalizeClass([
                  unref(ns2).be("item", "header"),
                  unref(ns2).is("active", unref(isActive)),
                  { focusing: focusing.value && !_ctx.disabled }
                ]),
                role: "button",
                tabindex: _ctx.disabled ? -1 : 0,
                onClick: handleHeaderClick,
                onKeypress: withKeys(withModifiers(handleEnterClick, ["stop", "prevent"]), ["space", "enter"]),
                onFocus: handleFocus,
                onBlur: _cache[0] || (_cache[0] = ($event) => focusing.value = false)
              }, [
                renderSlot(_ctx.$slots, "title", {}, () => [
                  createTextVNode(toDisplayString$1(_ctx.title), 1)
                ]),
                createVNode(unref(ElIcon), {
                  class: normalizeClass([unref(ns2).be("item", "arrow"), unref(ns2).is("active", unref(isActive))])
                }, {
                  default: withCtx(() => [
                    createVNode(unref(arrow_right_default))
                  ]),
                  _: 1
                }, 8, ["class"])
              ], 42, _hoisted_2$y)
            ], 8, _hoisted_1$T),
            createVNode(unref(_CollapseTransition), null, {
              default: withCtx(() => [
                withDirectives(createBaseVNode("div", {
                  id: unref(ns2).b(`content-${id2.value}`),
                  class: normalizeClass(unref(ns2).be("item", "wrap")),
                  role: "tabpanel",
                  "aria-hidden": !unref(isActive),
                  "aria-labelledby": unref(ns2).b(`head-${id2.value}`)
                }, [
                  createBaseVNode("div", {
                    class: normalizeClass(unref(ns2).be("item", "content"))
                  }, [
                    renderSlot(_ctx.$slots, "default")
                  ], 2)
                ], 10, _hoisted_3$h), [
                  [vShow, unref(isActive)]
                ])
              ]),
              _: 3
            })
          ], 2);
        };
      }
    });
    var CollapseItem = /* @__PURE__ */ _export_sfc$1(_sfc_main$1X, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/collapse/src/collapse-item.vue"]]);
    const ElCollapse = withInstall(Collapse, {
      CollapseItem
    });
    const ElCollapseItem = withNoopInstall(CollapseItem);
    let isDragging = false;
    function draggable(element, options) {
      if (!isClient)
        return;
      const moveFn = function(event) {
        var _a2;
        (_a2 = options.drag) == null ? void 0 : _a2.call(options, event);
      };
      const upFn = function(event) {
        var _a2;
        document.removeEventListener("mousemove", moveFn);
        document.removeEventListener("mouseup", upFn);
        document.removeEventListener("touchmove", moveFn);
        document.removeEventListener("touchend", upFn);
        document.onselectstart = null;
        document.ondragstart = null;
        isDragging = false;
        (_a2 = options.end) == null ? void 0 : _a2.call(options, event);
      };
      const downFn = function(event) {
        var _a2;
        if (isDragging)
          return;
        event.preventDefault();
        document.onselectstart = () => false;
        document.ondragstart = () => false;
        document.addEventListener("mousemove", moveFn);
        document.addEventListener("mouseup", upFn);
        document.addEventListener("touchmove", moveFn);
        document.addEventListener("touchend", upFn);
        isDragging = true;
        (_a2 = options.start) == null ? void 0 : _a2.call(options, event);
      };
      document.addEventListener("mousedown", downFn);
      document.addEventListener("touchstart", downFn);
    }
    const _sfc_main$1W = defineComponent({
      name: "ElColorAlphaSlider",
      props: {
        color: {
          type: Object,
          required: true
        },
        vertical: {
          type: Boolean,
          default: false
        }
      },
      setup(props) {
        const ns2 = useNamespace("color-alpha-slider");
        const instance = getCurrentInstance();
        const thumb = shallowRef(null);
        const bar = shallowRef(null);
        const thumbLeft = ref(0);
        const thumbTop = ref(0);
        const background = ref(null);
        watch(() => props.color.get("alpha"), () => {
          update();
        });
        watch(() => props.color.value, () => {
          update();
        });
        function getThumbLeft() {
          if (props.vertical)
            return 0;
          const el = instance.vnode.el;
          const alpha = props.color.get("alpha");
          if (!el)
            return 0;
          return Math.round(alpha * (el.offsetWidth - thumb.value.offsetWidth / 2) / 100);
        }
        function getThumbTop() {
          const el = instance.vnode.el;
          if (!props.vertical)
            return 0;
          const alpha = props.color.get("alpha");
          if (!el)
            return 0;
          return Math.round(alpha * (el.offsetHeight - thumb.value.offsetHeight / 2) / 100);
        }
        function getBackground() {
          if (props.color && props.color.value) {
            const { r, g: g2, b: b2 } = props.color.toRgb();
            return `linear-gradient(to right, rgba(${r}, ${g2}, ${b2}, 0) 0%, rgba(${r}, ${g2}, ${b2}, 1) 100%)`;
          }
          return null;
        }
        function handleClick(event) {
          const target = event.target;
          if (target !== thumb.value) {
            handleDrag(event);
          }
        }
        function handleDrag(event) {
          const el = instance.vnode.el;
          const rect = el.getBoundingClientRect();
          const { clientX, clientY } = getClientXY(event);
          if (!props.vertical) {
            let left2 = clientX - rect.left;
            left2 = Math.max(thumb.value.offsetWidth / 2, left2);
            left2 = Math.min(left2, rect.width - thumb.value.offsetWidth / 2);
            props.color.set("alpha", Math.round((left2 - thumb.value.offsetWidth / 2) / (rect.width - thumb.value.offsetWidth) * 100));
          } else {
            let top = clientY - rect.top;
            top = Math.max(thumb.value.offsetHeight / 2, top);
            top = Math.min(top, rect.height - thumb.value.offsetHeight / 2);
            props.color.set("alpha", Math.round((top - thumb.value.offsetHeight / 2) / (rect.height - thumb.value.offsetHeight) * 100));
          }
        }
        function update() {
          thumbLeft.value = getThumbLeft();
          thumbTop.value = getThumbTop();
          background.value = getBackground();
        }
        onMounted(() => {
          const dragConfig = {
            drag: (event) => {
              handleDrag(event);
            },
            end: (event) => {
              handleDrag(event);
            }
          };
          draggable(bar.value, dragConfig);
          draggable(thumb.value, dragConfig);
          update();
        });
        return {
          thumb,
          bar,
          thumbLeft,
          thumbTop,
          background,
          handleClick,
          update,
          ns: ns2
        };
      }
    });
    function _sfc_render$x(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass([_ctx.ns.b(), _ctx.ns.is("vertical", _ctx.vertical)])
      }, [
        createBaseVNode("div", {
          ref: "bar",
          class: normalizeClass(_ctx.ns.e("bar")),
          style: normalizeStyle({
            background: _ctx.background
          }),
          onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))
        }, null, 6),
        createBaseVNode("div", {
          ref: "thumb",
          class: normalizeClass(_ctx.ns.e("thumb")),
          style: normalizeStyle({
            left: _ctx.thumbLeft + "px",
            top: _ctx.thumbTop + "px"
          })
        }, null, 6)
      ], 2);
    }
    var AlphaSlider = /* @__PURE__ */ _export_sfc$1(_sfc_main$1W, [["render", _sfc_render$x], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/components/alpha-slider.vue"]]);
    const _sfc_main$1V = defineComponent({
      name: "ElColorHueSlider",
      props: {
        color: {
          type: Object,
          required: true
        },
        vertical: Boolean
      },
      setup(props) {
        const ns2 = useNamespace("color-hue-slider");
        const instance = getCurrentInstance();
        const thumb = ref(null);
        const bar = ref(null);
        const thumbLeft = ref(0);
        const thumbTop = ref(0);
        const hueValue = computed(() => {
          return props.color.get("hue");
        });
        watch(() => hueValue.value, () => {
          update();
        });
        function handleClick(event) {
          const target = event.target;
          if (target !== thumb.value) {
            handleDrag(event);
          }
        }
        function handleDrag(event) {
          const el = instance.vnode.el;
          const rect = el.getBoundingClientRect();
          const { clientX, clientY } = getClientXY(event);
          let hue;
          if (!props.vertical) {
            let left2 = clientX - rect.left;
            left2 = Math.min(left2, rect.width - thumb.value.offsetWidth / 2);
            left2 = Math.max(thumb.value.offsetWidth / 2, left2);
            hue = Math.round((left2 - thumb.value.offsetWidth / 2) / (rect.width - thumb.value.offsetWidth) * 360);
          } else {
            let top = clientY - rect.top;
            top = Math.min(top, rect.height - thumb.value.offsetHeight / 2);
            top = Math.max(thumb.value.offsetHeight / 2, top);
            hue = Math.round((top - thumb.value.offsetHeight / 2) / (rect.height - thumb.value.offsetHeight) * 360);
          }
          props.color.set("hue", hue);
        }
        function getThumbLeft() {
          const el = instance.vnode.el;
          if (props.vertical)
            return 0;
          const hue = props.color.get("hue");
          if (!el)
            return 0;
          return Math.round(hue * (el.offsetWidth - thumb.value.offsetWidth / 2) / 360);
        }
        function getThumbTop() {
          const el = instance.vnode.el;
          if (!props.vertical)
            return 0;
          const hue = props.color.get("hue");
          if (!el)
            return 0;
          return Math.round(hue * (el.offsetHeight - thumb.value.offsetHeight / 2) / 360);
        }
        function update() {
          thumbLeft.value = getThumbLeft();
          thumbTop.value = getThumbTop();
        }
        onMounted(() => {
          const dragConfig = {
            drag: (event) => {
              handleDrag(event);
            },
            end: (event) => {
              handleDrag(event);
            }
          };
          draggable(bar.value, dragConfig);
          draggable(thumb.value, dragConfig);
          update();
        });
        return {
          bar,
          thumb,
          thumbLeft,
          thumbTop,
          hueValue,
          handleClick,
          update,
          ns: ns2
        };
      }
    });
    function _sfc_render$w(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass([_ctx.ns.b(), _ctx.ns.is("vertical", _ctx.vertical)])
      }, [
        createBaseVNode("div", {
          ref: "bar",
          class: normalizeClass(_ctx.ns.e("bar")),
          onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))
        }, null, 2),
        createBaseVNode("div", {
          ref: "thumb",
          class: normalizeClass(_ctx.ns.e("thumb")),
          style: normalizeStyle({
            left: _ctx.thumbLeft + "px",
            top: _ctx.thumbTop + "px"
          })
        }, null, 6)
      ], 2);
    }
    var HueSlider = /* @__PURE__ */ _export_sfc$1(_sfc_main$1V, [["render", _sfc_render$w], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/components/hue-slider.vue"]]);
    const OPTIONS_KEY = Symbol();
    const useOptions = () => {
      return inject(OPTIONS_KEY);
    };
    const hsv2hsl = function(hue, sat, val) {
      return [
        hue,
        sat * val / ((hue = (2 - sat) * val) < 1 ? hue : 2 - hue) || 0,
        hue / 2
      ];
    };
    const isOnePointZero = function(n2) {
      return typeof n2 === "string" && n2.includes(".") && Number.parseFloat(n2) === 1;
    };
    const isPercentage = function(n2) {
      return typeof n2 === "string" && n2.includes("%");
    };
    const bound01 = function(value, max2) {
      if (isOnePointZero(value))
        value = "100%";
      const processPercent = isPercentage(value);
      value = Math.min(max2, Math.max(0, Number.parseFloat(`${value}`)));
      if (processPercent) {
        value = Number.parseInt(`${value * max2}`, 10) / 100;
      }
      if (Math.abs(value - max2) < 1e-6) {
        return 1;
      }
      return value % max2 / Number.parseFloat(max2);
    };
    const INT_HEX_MAP = { 10: "A", 11: "B", 12: "C", 13: "D", 14: "E", 15: "F" };
    const hexOne = function(value) {
      value = Math.min(Math.round(value), 255);
      const high = Math.floor(value / 16);
      const low = value % 16;
      return `${INT_HEX_MAP[high] || high}${INT_HEX_MAP[low] || low}`;
    };
    const toHex$1 = function({ r, g: g2, b: b2 }) {
      if (Number.isNaN(+r) || Number.isNaN(+g2) || Number.isNaN(+b2))
        return "";
      return `#${hexOne(r)}${hexOne(g2)}${hexOne(b2)}`;
    };
    const HEX_INT_MAP = { A: 10, B: 11, C: 12, D: 13, E: 14, F: 15 };
    const parseHexChannel = function(hex) {
      if (hex.length === 2) {
        return (HEX_INT_MAP[hex[0].toUpperCase()] || +hex[0]) * 16 + (HEX_INT_MAP[hex[1].toUpperCase()] || +hex[1]);
      }
      return HEX_INT_MAP[hex[1].toUpperCase()] || +hex[1];
    };
    const hsl2hsv = function(hue, sat, light) {
      sat = sat / 100;
      light = light / 100;
      let smin = sat;
      const lmin = Math.max(light, 0.01);
      light *= 2;
      sat *= light <= 1 ? light : 2 - light;
      smin *= lmin <= 1 ? lmin : 2 - lmin;
      const v2 = (light + sat) / 2;
      const sv = light === 0 ? 2 * smin / (lmin + smin) : 2 * sat / (light + sat);
      return {
        h: hue,
        s: sv * 100,
        v: v2 * 100
      };
    };
    const rgb2hsv = function(r, g2, b2) {
      r = bound01(r, 255);
      g2 = bound01(g2, 255);
      b2 = bound01(b2, 255);
      const max2 = Math.max(r, g2, b2);
      const min2 = Math.min(r, g2, b2);
      let h2;
      const v2 = max2;
      const d2 = max2 - min2;
      const s2 = max2 === 0 ? 0 : d2 / max2;
      if (max2 === min2) {
        h2 = 0;
      } else {
        switch (max2) {
          case r: {
            h2 = (g2 - b2) / d2 + (g2 < b2 ? 6 : 0);
            break;
          }
          case g2: {
            h2 = (b2 - r) / d2 + 2;
            break;
          }
          case b2: {
            h2 = (r - g2) / d2 + 4;
            break;
          }
        }
        h2 /= 6;
      }
      return { h: h2 * 360, s: s2 * 100, v: v2 * 100 };
    };
    const hsv2rgb = function(h2, s2, v2) {
      h2 = bound01(h2, 360) * 6;
      s2 = bound01(s2, 100);
      v2 = bound01(v2, 100);
      const i2 = Math.floor(h2);
      const f2 = h2 - i2;
      const p2 = v2 * (1 - s2);
      const q2 = v2 * (1 - f2 * s2);
      const t = v2 * (1 - (1 - f2) * s2);
      const mod = i2 % 6;
      const r = [v2, q2, p2, p2, t, v2][mod];
      const g2 = [t, v2, v2, q2, p2, p2][mod];
      const b2 = [p2, p2, t, v2, v2, q2][mod];
      return {
        r: Math.round(r * 255),
        g: Math.round(g2 * 255),
        b: Math.round(b2 * 255)
      };
    };
    class Color {
      constructor(options) {
        this._hue = 0;
        this._saturation = 100;
        this._value = 100;
        this._alpha = 100;
        this.enableAlpha = false;
        this.format = "hex";
        this.value = "";
        options = options || {};
        for (const option in options) {
          if (hasOwn$2(options, option)) {
            this[option] = options[option];
          }
        }
        if (options.value) {
          this.fromString(options.value);
        } else {
          this.doOnChange();
        }
      }
      set(prop, value) {
        if (arguments.length === 1 && typeof prop === "object") {
          for (const p2 in prop) {
            if (hasOwn$2(prop, p2)) {
              this.set(p2, prop[p2]);
            }
          }
          return;
        }
        this[`_${prop}`] = value;
        this.doOnChange();
      }
      get(prop) {
        if (prop === "alpha") {
          return Math.floor(this[`_${prop}`]);
        }
        return this[`_${prop}`];
      }
      toRgb() {
        return hsv2rgb(this._hue, this._saturation, this._value);
      }
      fromString(value) {
        if (!value) {
          this._hue = 0;
          this._saturation = 100;
          this._value = 100;
          this.doOnChange();
          return;
        }
        const fromHSV = (h2, s2, v2) => {
          this._hue = Math.max(0, Math.min(360, h2));
          this._saturation = Math.max(0, Math.min(100, s2));
          this._value = Math.max(0, Math.min(100, v2));
          this.doOnChange();
        };
        if (value.includes("hsl")) {
          const parts = value.replace(/hsla|hsl|\(|\)/gm, "").split(/\s|,/g).filter((val) => val !== "").map((val, index2) => index2 > 2 ? Number.parseFloat(val) : Number.parseInt(val, 10));
          if (parts.length === 4) {
            this._alpha = Number.parseFloat(parts[3]) * 100;
          } else if (parts.length === 3) {
            this._alpha = 100;
          }
          if (parts.length >= 3) {
            const { h: h2, s: s2, v: v2 } = hsl2hsv(parts[0], parts[1], parts[2]);
            fromHSV(h2, s2, v2);
          }
        } else if (value.includes("hsv")) {
          const parts = value.replace(/hsva|hsv|\(|\)/gm, "").split(/\s|,/g).filter((val) => val !== "").map((val, index2) => index2 > 2 ? Number.parseFloat(val) : Number.parseInt(val, 10));
          if (parts.length === 4) {
            this._alpha = Number.parseFloat(parts[3]) * 100;
          } else if (parts.length === 3) {
            this._alpha = 100;
          }
          if (parts.length >= 3) {
            fromHSV(parts[0], parts[1], parts[2]);
          }
        } else if (value.includes("rgb")) {
          const parts = value.replace(/rgba|rgb|\(|\)/gm, "").split(/\s|,/g).filter((val) => val !== "").map((val, index2) => index2 > 2 ? Number.parseFloat(val) : Number.parseInt(val, 10));
          if (parts.length === 4) {
            this._alpha = Number.parseFloat(parts[3]) * 100;
          } else if (parts.length === 3) {
            this._alpha = 100;
          }
          if (parts.length >= 3) {
            const { h: h2, s: s2, v: v2 } = rgb2hsv(parts[0], parts[1], parts[2]);
            fromHSV(h2, s2, v2);
          }
        } else if (value.includes("#")) {
          const hex = value.replace("#", "").trim();
          if (!/^[0-9a-fA-F]{3}$|^[0-9a-fA-F]{6}$|^[0-9a-fA-F]{8}$/.test(hex))
            return;
          let r, g2, b2;
          if (hex.length === 3) {
            r = parseHexChannel(hex[0] + hex[0]);
            g2 = parseHexChannel(hex[1] + hex[1]);
            b2 = parseHexChannel(hex[2] + hex[2]);
          } else if (hex.length === 6 || hex.length === 8) {
            r = parseHexChannel(hex.slice(0, 2));
            g2 = parseHexChannel(hex.slice(2, 4));
            b2 = parseHexChannel(hex.slice(4, 6));
          }
          if (hex.length === 8) {
            this._alpha = parseHexChannel(hex.slice(6)) / 255 * 100;
          } else if (hex.length === 3 || hex.length === 6) {
            this._alpha = 100;
          }
          const { h: h2, s: s2, v: v2 } = rgb2hsv(r, g2, b2);
          fromHSV(h2, s2, v2);
        }
      }
      compare(color) {
        return Math.abs(color._hue - this._hue) < 2 && Math.abs(color._saturation - this._saturation) < 1 && Math.abs(color._value - this._value) < 1 && Math.abs(color._alpha - this._alpha) < 1;
      }
      doOnChange() {
        const { _hue, _saturation, _value, _alpha, format: format2 } = this;
        if (this.enableAlpha) {
          switch (format2) {
            case "hsl": {
              const hsl = hsv2hsl(_hue, _saturation / 100, _value / 100);
              this.value = `hsla(${_hue}, ${Math.round(hsl[1] * 100)}%, ${Math.round(hsl[2] * 100)}%, ${this.get("alpha") / 100})`;
              break;
            }
            case "hsv": {
              this.value = `hsva(${_hue}, ${Math.round(_saturation)}%, ${Math.round(_value)}%, ${this.get("alpha") / 100})`;
              break;
            }
            case "hex": {
              this.value = `${toHex$1(hsv2rgb(_hue, _saturation, _value))}${hexOne(_alpha * 255 / 100)}`;
              break;
            }
            default: {
              const { r, g: g2, b: b2 } = hsv2rgb(_hue, _saturation, _value);
              this.value = `rgba(${r}, ${g2}, ${b2}, ${this.get("alpha") / 100})`;
            }
          }
        } else {
          switch (format2) {
            case "hsl": {
              const hsl = hsv2hsl(_hue, _saturation / 100, _value / 100);
              this.value = `hsl(${_hue}, ${Math.round(hsl[1] * 100)}%, ${Math.round(hsl[2] * 100)}%)`;
              break;
            }
            case "hsv": {
              this.value = `hsv(${_hue}, ${Math.round(_saturation)}%, ${Math.round(_value)}%)`;
              break;
            }
            case "rgb": {
              const { r, g: g2, b: b2 } = hsv2rgb(_hue, _saturation, _value);
              this.value = `rgb(${r}, ${g2}, ${b2})`;
              break;
            }
            default: {
              this.value = toHex$1(hsv2rgb(_hue, _saturation, _value));
            }
          }
        }
      }
    }
    const _sfc_main$1U = defineComponent({
      props: {
        colors: { type: Array, required: true },
        color: {
          type: Object,
          required: true
        }
      },
      setup(props) {
        const ns2 = useNamespace("color-predefine");
        const { currentColor } = useOptions();
        const rgbaColors = ref(parseColors(props.colors, props.color));
        watch(() => currentColor.value, (val) => {
          const color = new Color();
          color.fromString(val);
          rgbaColors.value.forEach((item) => {
            item.selected = color.compare(item);
          });
        });
        watchEffect(() => {
          rgbaColors.value = parseColors(props.colors, props.color);
        });
        function handleSelect(index2) {
          props.color.fromString(props.colors[index2]);
        }
        function parseColors(colors, color) {
          return colors.map((value) => {
            const c2 = new Color();
            c2.enableAlpha = true;
            c2.format = "rgba";
            c2.fromString(value);
            c2.selected = c2.value === color.value;
            return c2;
          });
        }
        return {
          rgbaColors,
          handleSelect,
          ns: ns2
        };
      }
    });
    const _hoisted_1$S = ["onClick"];
    function _sfc_render$v(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(_ctx.ns.b())
      }, [
        createBaseVNode("div", {
          class: normalizeClass(_ctx.ns.e("colors"))
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.rgbaColors, (item, index2) => {
            return openBlock(), createElementBlock("div", {
              key: _ctx.colors[index2],
              class: normalizeClass([
                _ctx.ns.e("color-selector"),
                _ctx.ns.is("alpha", item._alpha < 100),
                { selected: item.selected }
              ]),
              onClick: ($event) => _ctx.handleSelect(index2)
            }, [
              createBaseVNode("div", {
                style: normalizeStyle({ backgroundColor: item.value })
              }, null, 4)
            ], 10, _hoisted_1$S);
          }), 128))
        ], 2)
      ], 2);
    }
    var Predefine = /* @__PURE__ */ _export_sfc$1(_sfc_main$1U, [["render", _sfc_render$v], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/components/predefine.vue"]]);
    const _sfc_main$1T = defineComponent({
      name: "ElSlPanel",
      props: {
        color: {
          type: Object,
          required: true
        }
      },
      setup(props) {
        const ns2 = useNamespace("color-svpanel");
        const instance = getCurrentInstance();
        const cursorTop = ref(0);
        const cursorLeft = ref(0);
        const background = ref("hsl(0, 100%, 50%)");
        const colorValue = computed(() => {
          const hue = props.color.get("hue");
          const value = props.color.get("value");
          return { hue, value };
        });
        function update() {
          const saturation = props.color.get("saturation");
          const value = props.color.get("value");
          const el = instance.vnode.el;
          const { clientWidth: width, clientHeight: height } = el;
          cursorLeft.value = saturation * width / 100;
          cursorTop.value = (100 - value) * height / 100;
          background.value = `hsl(${props.color.get("hue")}, 100%, 50%)`;
        }
        function handleDrag(event) {
          const el = instance.vnode.el;
          const rect = el.getBoundingClientRect();
          const { clientX, clientY } = getClientXY(event);
          let left2 = clientX - rect.left;
          let top = clientY - rect.top;
          left2 = Math.max(0, left2);
          left2 = Math.min(left2, rect.width);
          top = Math.max(0, top);
          top = Math.min(top, rect.height);
          cursorLeft.value = left2;
          cursorTop.value = top;
          props.color.set({
            saturation: left2 / rect.width * 100,
            value: 100 - top / rect.height * 100
          });
        }
        watch(() => colorValue.value, () => {
          update();
        });
        onMounted(() => {
          draggable(instance.vnode.el, {
            drag: (event) => {
              handleDrag(event);
            },
            end: (event) => {
              handleDrag(event);
            }
          });
          update();
        });
        return {
          cursorTop,
          cursorLeft,
          background,
          colorValue,
          handleDrag,
          update,
          ns: ns2
        };
      }
    });
    const _hoisted_1$R = /* @__PURE__ */ createBaseVNode("div", null, null, -1);
    const _hoisted_2$x = [
      _hoisted_1$R
    ];
    function _sfc_render$u(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(_ctx.ns.b()),
        style: normalizeStyle({
          backgroundColor: _ctx.background
        })
      }, [
        createBaseVNode("div", {
          class: normalizeClass(_ctx.ns.e("white"))
        }, null, 2),
        createBaseVNode("div", {
          class: normalizeClass(_ctx.ns.e("black"))
        }, null, 2),
        createBaseVNode("div", {
          class: normalizeClass(_ctx.ns.e("cursor")),
          style: normalizeStyle({
            top: _ctx.cursorTop + "px",
            left: _ctx.cursorLeft + "px"
          })
        }, _hoisted_2$x, 6)
      ], 6);
    }
    var SvPanel = /* @__PURE__ */ _export_sfc$1(_sfc_main$1T, [["render", _sfc_render$u], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/components/sv-panel.vue"]]);
    const _sfc_main$1S = defineComponent({
      name: "ElColorPicker",
      components: {
        ElButton,
        ElTooltip,
        ElInput,
        ElIcon,
        Close: close_default,
        ArrowDown: arrow_down_default,
        SvPanel,
        HueSlider,
        AlphaSlider,
        Predefine
      },
      directives: {
        ClickOutside
      },
      props: {
        modelValue: String,
        id: String,
        showAlpha: Boolean,
        colorFormat: String,
        disabled: Boolean,
        size: {
          type: String,
          validator: isValidComponentSize
        },
        popperClass: String,
        label: {
          type: String,
          default: void 0
        },
        tabindex: {
          type: [String, Number],
          default: 0
        },
        predefine: Array,
        validateEvent: {
          type: Boolean,
          default: true
        }
      },
      emits: ["change", "active-change", UPDATE_MODEL_EVENT],
      setup(props, { emit: emit2 }) {
        const { t } = useLocale();
        const ns2 = useNamespace("color");
        const elForm = inject(formContextKey, {});
        const elFormItem = inject(formItemContextKey, {});
        const { inputId: buttonId, isLabeledByFormItem } = useFormItemInputId(props, {
          formItemContext: elFormItem
        });
        const hue = ref();
        const svPanel = ref();
        const alpha = ref();
        const popper = ref(null);
        let shouldActiveChange = true;
        const color = reactive(new Color({
          enableAlpha: props.showAlpha,
          format: props.colorFormat || "",
          value: props.modelValue
        }));
        const showPicker = ref(false);
        const showPanelColor = ref(false);
        const customInput = ref("");
        const displayedColor = computed(() => {
          if (!props.modelValue && !showPanelColor.value) {
            return "transparent";
          }
          return displayedRgb(color, props.showAlpha);
        });
        const colorSize = useSize();
        const colorDisabled = computed(() => {
          return !!(props.disabled || elForm.disabled);
        });
        const currentColor = computed(() => {
          return !props.modelValue && !showPanelColor.value ? "" : color.value;
        });
        const buttonAriaLabel = computed(() => {
          return !isLabeledByFormItem.value ? props.label || t("el.colorpicker.defaultLabel") : void 0;
        });
        const buttonAriaLabelledby = computed(() => {
          return isLabeledByFormItem.value ? elFormItem.labelId : void 0;
        });
        watch(() => props.modelValue, (newVal) => {
          if (!newVal) {
            showPanelColor.value = false;
          } else if (newVal && newVal !== color.value) {
            shouldActiveChange = false;
            color.fromString(newVal);
          }
        });
        watch(() => currentColor.value, (val) => {
          customInput.value = val;
          shouldActiveChange && emit2("active-change", val);
          shouldActiveChange = true;
        });
        watch(() => color.value, () => {
          if (!props.modelValue && !showPanelColor.value) {
            showPanelColor.value = true;
          }
        });
        function displayedRgb(color2, showAlpha) {
          if (!(color2 instanceof Color)) {
            throw new TypeError("color should be instance of _color Class");
          }
          const { r, g: g2, b: b2 } = color2.toRgb();
          return showAlpha ? `rgba(${r}, ${g2}, ${b2}, ${color2.get("alpha") / 100})` : `rgb(${r}, ${g2}, ${b2})`;
        }
        function setShowPicker(value) {
          showPicker.value = value;
        }
        const debounceSetShowPicker = debounce(setShowPicker, 100);
        function hide() {
          debounceSetShowPicker(false);
          resetColor();
        }
        function resetColor() {
          nextTick$1(() => {
            if (props.modelValue) {
              color.fromString(props.modelValue);
            } else {
              color.value = "";
              nextTick$1(() => {
                showPanelColor.value = false;
              });
            }
          });
        }
        function handleTrigger() {
          if (colorDisabled.value)
            return;
          debounceSetShowPicker(!showPicker.value);
        }
        function handleConfirm() {
          color.fromString(customInput.value);
        }
        function confirmValue() {
          var _a2;
          const value = color.value;
          emit2(UPDATE_MODEL_EVENT, value);
          emit2("change", value);
          if (props.validateEvent) {
            (_a2 = elFormItem.validate) == null ? void 0 : _a2.call(elFormItem, "change").catch((err) => debugWarn());
          }
          debounceSetShowPicker(false);
          nextTick$1(() => {
            const newColor = new Color({
              enableAlpha: props.showAlpha,
              format: props.colorFormat || "",
              value: props.modelValue
            });
            if (!color.compare(newColor)) {
              resetColor();
            }
          });
        }
        function clear2() {
          var _a2;
          debounceSetShowPicker(false);
          emit2(UPDATE_MODEL_EVENT, null);
          emit2("change", null);
          if (props.modelValue !== null && props.validateEvent) {
            (_a2 = elFormItem.validate) == null ? void 0 : _a2.call(elFormItem, "change").catch((err) => debugWarn());
          }
          resetColor();
        }
        onMounted(() => {
          if (props.modelValue) {
            customInput.value = currentColor.value;
          }
        });
        watch(() => showPicker.value, () => {
          nextTick$1(() => {
            var _a2, _b, _c;
            (_a2 = hue.value) == null ? void 0 : _a2.update();
            (_b = svPanel.value) == null ? void 0 : _b.update();
            (_c = alpha.value) == null ? void 0 : _c.update();
          });
        });
        provide(OPTIONS_KEY, {
          currentColor
        });
        return {
          color,
          colorDisabled,
          colorSize,
          displayedColor,
          showPanelColor,
          showPicker,
          customInput,
          buttonId,
          buttonAriaLabel,
          buttonAriaLabelledby,
          handleConfirm,
          hide,
          handleTrigger,
          clear: clear2,
          confirmValue,
          t,
          ns: ns2,
          hue,
          svPanel,
          alpha,
          popper
        };
      }
    });
    const _hoisted_1$Q = ["id", "aria-label", "aria-labelledby", "aria-description", "tabindex"];
    function _sfc_render$t(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_hue_slider = resolveComponent("hue-slider");
      const _component_sv_panel = resolveComponent("sv-panel");
      const _component_alpha_slider = resolveComponent("alpha-slider");
      const _component_predefine = resolveComponent("predefine");
      const _component_el_input = resolveComponent("el-input");
      const _component_el_button = resolveComponent("el-button");
      const _component_arrow_down = resolveComponent("arrow-down");
      const _component_el_icon = resolveComponent("el-icon");
      const _component_close = resolveComponent("close");
      const _component_el_tooltip = resolveComponent("el-tooltip");
      const _directive_click_outside = resolveDirective("click-outside");
      return openBlock(), createBlock(_component_el_tooltip, {
        ref: "popper",
        visible: _ctx.showPicker,
        "show-arrow": false,
        "fallback-placements": ["bottom", "top", "right", "left"],
        offset: 0,
        "gpu-acceleration": false,
        "popper-class": [_ctx.ns.be("picker", "panel"), _ctx.ns.b("dropdown"), _ctx.popperClass],
        "stop-popper-mouse-event": false,
        effect: "light",
        trigger: "click",
        transition: "el-zoom-in-top",
        persistent: ""
      }, {
        content: withCtx(() => [
          withDirectives((openBlock(), createElementBlock("div", null, [
            createBaseVNode("div", {
              class: normalizeClass(_ctx.ns.be("dropdown", "main-wrapper"))
            }, [
              createVNode(_component_hue_slider, {
                ref: "hue",
                class: "hue-slider",
                color: _ctx.color,
                vertical: ""
              }, null, 8, ["color"]),
              createVNode(_component_sv_panel, {
                ref: "svPanel",
                color: _ctx.color
              }, null, 8, ["color"])
            ], 2),
            _ctx.showAlpha ? (openBlock(), createBlock(_component_alpha_slider, {
              key: 0,
              ref: "alpha",
              color: _ctx.color
            }, null, 8, ["color"])) : createCommentVNode("v-if", true),
            _ctx.predefine ? (openBlock(), createBlock(_component_predefine, {
              key: 1,
              ref: "predefine",
              color: _ctx.color,
              colors: _ctx.predefine
            }, null, 8, ["color", "colors"])) : createCommentVNode("v-if", true),
            createBaseVNode("div", {
              class: normalizeClass(_ctx.ns.be("dropdown", "btns"))
            }, [
              createBaseVNode("span", {
                class: normalizeClass(_ctx.ns.be("dropdown", "value"))
              }, [
                createVNode(_component_el_input, {
                  modelValue: _ctx.customInput,
                  "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.customInput = $event),
                  "validate-event": false,
                  size: "small",
                  onKeyup: withKeys(_ctx.handleConfirm, ["enter"]),
                  onBlur: _ctx.handleConfirm
                }, null, 8, ["modelValue", "onKeyup", "onBlur"])
              ], 2),
              createVNode(_component_el_button, {
                class: normalizeClass(_ctx.ns.be("dropdown", "link-btn")),
                text: "",
                size: "small",
                onClick: _ctx.clear
              }, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString$1(_ctx.t("el.colorpicker.clear")), 1)
                ]),
                _: 1
              }, 8, ["class", "onClick"]),
              createVNode(_component_el_button, {
                plain: "",
                size: "small",
                class: normalizeClass(_ctx.ns.be("dropdown", "btn")),
                onClick: _ctx.confirmValue
              }, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString$1(_ctx.t("el.colorpicker.confirm")), 1)
                ]),
                _: 1
              }, 8, ["class", "onClick"])
            ], 2)
          ])), [
            [_directive_click_outside, _ctx.hide]
          ])
        ]),
        default: withCtx(() => [
          createBaseVNode("div", {
            id: _ctx.buttonId,
            class: normalizeClass([
              _ctx.ns.b("picker"),
              _ctx.ns.is("disabled", _ctx.colorDisabled),
              _ctx.ns.bm("picker", _ctx.colorSize)
            ]),
            role: "button",
            "aria-label": _ctx.buttonAriaLabel,
            "aria-labelledby": _ctx.buttonAriaLabelledby,
            "aria-description": _ctx.t("el.colorpicker.description", { color: _ctx.modelValue || "" }),
            tabindex: _ctx.tabindex,
            onKeydown: _cache[2] || (_cache[2] = withKeys((...args) => _ctx.handleTrigger && _ctx.handleTrigger(...args), ["enter"]))
          }, [
            _ctx.colorDisabled ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(_ctx.ns.be("picker", "mask"))
            }, null, 2)) : createCommentVNode("v-if", true),
            createBaseVNode("div", {
              class: normalizeClass(_ctx.ns.be("picker", "trigger")),
              onClick: _cache[1] || (_cache[1] = (...args) => _ctx.handleTrigger && _ctx.handleTrigger(...args))
            }, [
              createBaseVNode("span", {
                class: normalizeClass([_ctx.ns.be("picker", "color"), _ctx.ns.is("alpha", _ctx.showAlpha)])
              }, [
                createBaseVNode("span", {
                  class: normalizeClass(_ctx.ns.be("picker", "color-inner")),
                  style: normalizeStyle({
                    backgroundColor: _ctx.displayedColor
                  })
                }, [
                  withDirectives(createVNode(_component_el_icon, {
                    class: normalizeClass([_ctx.ns.be("picker", "icon"), _ctx.ns.is("icon-arrow-down")])
                  }, {
                    default: withCtx(() => [
                      createVNode(_component_arrow_down)
                    ]),
                    _: 1
                  }, 8, ["class"]), [
                    [vShow, _ctx.modelValue || _ctx.showPanelColor]
                  ]),
                  !_ctx.modelValue && !_ctx.showPanelColor ? (openBlock(), createBlock(_component_el_icon, {
                    key: 0,
                    class: normalizeClass([_ctx.ns.be("picker", "empty"), _ctx.ns.is("icon-close")])
                  }, {
                    default: withCtx(() => [
                      createVNode(_component_close)
                    ]),
                    _: 1
                  }, 8, ["class"])) : createCommentVNode("v-if", true)
                ], 6)
              ], 2)
            ], 2)
          ], 42, _hoisted_1$Q)
        ]),
        _: 1
      }, 8, ["visible", "popper-class"]);
    }
    var ColorPicker = /* @__PURE__ */ _export_sfc$1(_sfc_main$1S, [["render", _sfc_render$t], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/index.vue"]]);
    ColorPicker.install = (app2) => {
      app2.component(ColorPicker.name, ColorPicker);
    };
    const _ColorPicker = ColorPicker;
    const ElColorPicker = _ColorPicker;
    const messageConfig = {};
    const configProviderProps = buildProps({
      a11y: {
        type: Boolean,
        default: true
      },
      locale: {
        type: definePropType(Object)
      },
      size: useSizeProp,
      button: {
        type: definePropType(Object)
      },
      experimentalFeatures: {
        type: definePropType(Object)
      },
      keyboardNavigation: {
        type: Boolean,
        default: true
      },
      message: {
        type: definePropType(Object)
      },
      zIndex: Number,
      namespace: {
        type: String,
        default: "el"
      }
    });
    const ConfigProvider = defineComponent({
      name: "ElConfigProvider",
      props: configProviderProps,
      setup(props, { slots }) {
        watch(() => props.message, (val) => {
          Object.assign(messageConfig, val != null ? val : {});
        }, { immediate: true, deep: true });
        const config2 = provideGlobalConfig(props);
        return () => renderSlot(slots, "default", { config: config2 == null ? void 0 : config2.value });
      }
    });
    const ElConfigProvider = withInstall(ConfigProvider);
    const __default__$1h = {
      name: "ElContainer"
    };
    const _sfc_main$1R = /* @__PURE__ */ defineComponent({
      ...__default__$1h,
      props: {
        direction: {
          type: String
        }
      },
      setup(__props) {
        const props = __props;
        const slots = useSlots();
        const ns2 = useNamespace("container");
        const isVertical = computed(() => {
          if (props.direction === "vertical") {
            return true;
          } else if (props.direction === "horizontal") {
            return false;
          }
          if (slots && slots.default) {
            const vNodes = slots.default();
            return vNodes.some((vNode) => {
              const tag = vNode.type.name;
              return tag === "ElHeader" || tag === "ElFooter";
            });
          } else {
            return false;
          }
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("section", {
            class: normalizeClass([unref(ns2).b(), unref(ns2).is("vertical", unref(isVertical))])
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 2);
        };
      }
    });
    var Container = /* @__PURE__ */ _export_sfc$1(_sfc_main$1R, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/container/src/container.vue"]]);
    const __default__$1g = {
      name: "ElAside"
    };
    const _sfc_main$1Q = /* @__PURE__ */ defineComponent({
      ...__default__$1g,
      props: {
        width: {
          type: String,
          default: null
        }
      },
      setup(__props) {
        const props = __props;
        const ns2 = useNamespace("aside");
        const style2 = computed(() => props.width ? ns2.cssVarBlock({ width: props.width }) : {});
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("aside", {
            class: normalizeClass(unref(ns2).b()),
            style: normalizeStyle(unref(style2))
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 6);
        };
      }
    });
    var Aside = /* @__PURE__ */ _export_sfc$1(_sfc_main$1Q, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/container/src/aside.vue"]]);
    const __default__$1f = {
      name: "ElFooter"
    };
    const _sfc_main$1P = /* @__PURE__ */ defineComponent({
      ...__default__$1f,
      props: {
        height: {
          type: String,
          default: null
        }
      },
      setup(__props) {
        const props = __props;
        const ns2 = useNamespace("footer");
        const style2 = computed(() => props.height ? ns2.cssVarBlock({ height: props.height }) : {});
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("footer", {
            class: normalizeClass(unref(ns2).b()),
            style: normalizeStyle(unref(style2))
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 6);
        };
      }
    });
    var Footer$2 = /* @__PURE__ */ _export_sfc$1(_sfc_main$1P, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/container/src/footer.vue"]]);
    const __default__$1e = {
      name: "ElHeader"
    };
    const _sfc_main$1O = /* @__PURE__ */ defineComponent({
      ...__default__$1e,
      props: {
        height: {
          type: String,
          default: null
        }
      },
      setup(__props) {
        const props = __props;
        const ns2 = useNamespace("header");
        const style2 = computed(() => {
          return props.height ? ns2.cssVarBlock({
            height: props.height
          }) : {};
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("header", {
            class: normalizeClass(unref(ns2).b()),
            style: normalizeStyle(unref(style2))
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 6);
        };
      }
    });
    var Header = /* @__PURE__ */ _export_sfc$1(_sfc_main$1O, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/container/src/header.vue"]]);
    const __default__$1d = {
      name: "ElMain"
    };
    const _sfc_main$1N = /* @__PURE__ */ defineComponent({
      ...__default__$1d,
      setup(__props) {
        const ns2 = useNamespace("main");
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("main", {
            class: normalizeClass(unref(ns2).b())
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 2);
        };
      }
    });
    var Main = /* @__PURE__ */ _export_sfc$1(_sfc_main$1N, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/container/src/main.vue"]]);
    const ElContainer = withInstall(Container, {
      Aside,
      Footer: Footer$2,
      Header,
      Main
    });
    const ElAside = withNoopInstall(Aside);
    const ElFooter = withNoopInstall(Footer$2);
    const ElHeader = withNoopInstall(Header);
    const ElMain = withNoopInstall(Main);
    var advancedFormat$1 = { exports: {} };
    (function(module2, exports2) {
      !function(e2, t) {
        module2.exports = t();
      }(commonjsGlobal, function() {
        return function(e2, t, r) {
          var n2 = t.prototype, s2 = n2.format;
          r.en.ordinal = function(e3) {
            var t2 = ["th", "st", "nd", "rd"], r2 = e3 % 100;
            return "[" + e3 + (t2[(r2 - 20) % 10] || t2[r2] || t2[0]) + "]";
          }, n2.format = function(e3) {
            var t2 = this, r2 = this.$locale();
            if (!this.isValid())
              return s2.bind(this)(e3);
            var n3 = this.$utils(), a2 = (e3 || "YYYY-MM-DDTHH:mm:ssZ").replace(/\[([^\]]+)]|Q|wo|ww|w|WW|W|zzz|z|gggg|GGGG|Do|X|x|k{1,2}|S/g, function(e4) {
              switch (e4) {
                case "Q":
                  return Math.ceil((t2.$M + 1) / 3);
                case "Do":
                  return r2.ordinal(t2.$D);
                case "gggg":
                  return t2.weekYear();
                case "GGGG":
                  return t2.isoWeekYear();
                case "wo":
                  return r2.ordinal(t2.week(), "W");
                case "w":
                case "ww":
                  return n3.s(t2.week(), "w" === e4 ? 1 : 2, "0");
                case "W":
                case "WW":
                  return n3.s(t2.isoWeek(), "W" === e4 ? 1 : 2, "0");
                case "k":
                case "kk":
                  return n3.s(String(0 === t2.$H ? 24 : t2.$H), "k" === e4 ? 1 : 2, "0");
                case "X":
                  return Math.floor(t2.$d.getTime() / 1e3);
                case "x":
                  return t2.$d.getTime();
                case "z":
                  return "[" + t2.offsetName() + "]";
                case "zzz":
                  return "[" + t2.offsetName("long") + "]";
                default:
                  return e4;
              }
            });
            return s2.bind(this)(a2);
          };
        };
      });
    })(advancedFormat$1);
    const advancedFormat = advancedFormat$1.exports;
    var weekOfYear$1 = { exports: {} };
    (function(module2, exports2) {
      !function(e2, t) {
        module2.exports = t();
      }(commonjsGlobal, function() {
        var e2 = "week", t = "year";
        return function(i2, n2, r) {
          var f2 = n2.prototype;
          f2.week = function(i3) {
            if (void 0 === i3 && (i3 = null), null !== i3)
              return this.add(7 * (i3 - this.week()), "day");
            var n3 = this.$locale().yearStart || 1;
            if (11 === this.month() && this.date() > 25) {
              var f3 = r(this).startOf(t).add(1, t).date(n3), s2 = r(this).endOf(e2);
              if (f3.isBefore(s2))
                return 1;
            }
            var a2 = r(this).startOf(t).date(n3).startOf(e2).subtract(1, "millisecond"), o2 = this.diff(a2, e2, true);
            return o2 < 0 ? r(this).startOf("week").week() : Math.ceil(o2);
          }, f2.weeks = function(e3) {
            return void 0 === e3 && (e3 = null), this.week(e3);
          };
        };
      });
    })(weekOfYear$1);
    const weekOfYear = weekOfYear$1.exports;
    var weekYear$1 = { exports: {} };
    (function(module2, exports2) {
      !function(e2, t) {
        module2.exports = t();
      }(commonjsGlobal, function() {
        return function(e2, t) {
          t.prototype.weekYear = function() {
            var e3 = this.month(), t2 = this.week(), n2 = this.year();
            return 1 === t2 && 11 === e3 ? n2 + 1 : 0 === e3 && t2 >= 52 ? n2 - 1 : n2;
          };
        };
      });
    })(weekYear$1);
    const weekYear = weekYear$1.exports;
    var dayOfYear$1 = { exports: {} };
    (function(module2, exports2) {
      !function(e2, t) {
        module2.exports = t();
      }(commonjsGlobal, function() {
        return function(e2, t, n2) {
          t.prototype.dayOfYear = function(e3) {
            var t2 = Math.round((n2(this).startOf("day") - n2(this).startOf("year")) / 864e5) + 1;
            return null == e3 ? t2 : this.add(e3 - t2, "day");
          };
        };
      });
    })(dayOfYear$1);
    const dayOfYear = dayOfYear$1.exports;
    var isSameOrAfter$1 = { exports: {} };
    (function(module2, exports2) {
      !function(e2, t) {
        module2.exports = t();
      }(commonjsGlobal, function() {
        return function(e2, t) {
          t.prototype.isSameOrAfter = function(e3, t2) {
            return this.isSame(e3, t2) || this.isAfter(e3, t2);
          };
        };
      });
    })(isSameOrAfter$1);
    const isSameOrAfter = isSameOrAfter$1.exports;
    var isSameOrBefore$1 = { exports: {} };
    (function(module2, exports2) {
      !function(e2, i2) {
        module2.exports = i2();
      }(commonjsGlobal, function() {
        return function(e2, i2) {
          i2.prototype.isSameOrBefore = function(e3, i3) {
            return this.isSame(e3, i3) || this.isBefore(e3, i3);
          };
        };
      });
    })(isSameOrBefore$1);
    const isSameOrBefore = isSameOrBefore$1.exports;
    const datePickerProps = buildProps({
      type: {
        type: definePropType(String),
        default: "date"
      }
    });
    const selectionModes = ["date", "dates", "year", "month", "week", "range"];
    const datePickerSharedProps = buildProps({
      disabledDate: {
        type: definePropType(Function)
      },
      date: {
        type: definePropType(Object),
        required: true
      },
      minDate: {
        type: definePropType(Object)
      },
      maxDate: {
        type: definePropType(Object)
      },
      parsedValue: {
        type: definePropType([Object, Array])
      },
      rangeState: {
        type: definePropType(Object),
        default: () => ({
          endDate: null,
          selecting: false
        })
      }
    });
    const panelSharedProps = buildProps({
      type: {
        type: definePropType(String),
        required: true,
        values: datePickTypes
      }
    });
    const panelRangeSharedProps = buildProps({
      unlinkPanels: Boolean,
      parsedValue: {
        type: definePropType(Array)
      }
    });
    const selectionModeWithDefault = (mode) => {
      return {
        type: String,
        values: selectionModes,
        default: mode
      };
    };
    const panelDatePickProps = buildProps({
      ...panelSharedProps,
      parsedValue: {
        type: definePropType([Object, Array])
      },
      visible: {
        type: Boolean
      },
      format: {
        type: String,
        default: ""
      }
    });
    const basicDateTableProps = buildProps({
      ...datePickerSharedProps,
      cellClassName: {
        type: definePropType(Function)
      },
      showWeekNumber: Boolean,
      selectionMode: selectionModeWithDefault("date")
    });
    const isValidRange = (range2) => {
      if (!isArray$6(range2))
        return false;
      const [left2, right2] = range2;
      return dayjs.isDayjs(left2) && dayjs.isDayjs(right2) && left2.isSameOrBefore(right2);
    };
    const getDefaultValue = (defaultValue, { lang, unit, unlinkPanels }) => {
      let start;
      if (isArray$6(defaultValue)) {
        let [left2, right2] = defaultValue.map((d2) => dayjs(d2).locale(lang));
        if (!unlinkPanels) {
          right2 = left2.add(1, unit);
        }
        return [left2, right2];
      } else if (defaultValue) {
        start = dayjs(defaultValue);
      } else {
        start = dayjs();
      }
      start = start.locale(lang);
      return [start, start.add(1, unit)];
    };
    const buildPickerTable = (dimension, rows, {
      columnIndexOffset,
      startDate,
      nextEndDate,
      now: now2,
      unit,
      relativeDateGetter,
      setCellMetadata,
      setRowMetadata
    }) => {
      for (let rowIndex = 0; rowIndex < dimension.row; rowIndex++) {
        const row = rows[rowIndex];
        for (let columnIndex = 0; columnIndex < dimension.column; columnIndex++) {
          let cell = row[columnIndex + columnIndexOffset];
          if (!cell) {
            cell = {
              row: rowIndex,
              column: columnIndex,
              type: "normal",
              inRange: false,
              start: false,
              end: false
            };
          }
          const index2 = rowIndex * dimension.column + columnIndex;
          const nextStartDate = relativeDateGetter(index2);
          cell.dayjs = nextStartDate;
          cell.date = nextStartDate.toDate();
          cell.timestamp = nextStartDate.valueOf();
          cell.type = "normal";
          cell.inRange = !!(startDate && nextStartDate.isSameOrAfter(startDate, unit) && nextEndDate && nextStartDate.isSameOrBefore(nextEndDate, unit)) || !!(startDate && nextStartDate.isSameOrBefore(startDate, unit) && nextEndDate && nextStartDate.isSameOrAfter(nextEndDate, unit));
          if (startDate == null ? void 0 : startDate.isSameOrAfter(nextEndDate)) {
            cell.start = !!nextEndDate && nextStartDate.isSame(nextEndDate, unit);
            cell.end = startDate && nextStartDate.isSame(startDate, unit);
          } else {
            cell.start = !!startDate && nextStartDate.isSame(startDate, unit);
            cell.end = !!nextEndDate && nextStartDate.isSame(nextEndDate, unit);
          }
          const isToday = nextStartDate.isSame(now2, unit);
          if (isToday) {
            cell.type = "today";
          }
          setCellMetadata == null ? void 0 : setCellMetadata(cell, { rowIndex, columnIndex });
          row[columnIndex + columnIndexOffset] = cell;
        }
        setRowMetadata == null ? void 0 : setRowMetadata(row);
      }
    };
    const basicCellProps = buildProps({
      cell: {
        type: definePropType(Object)
      }
    });
    var ElDatePickerCell = defineComponent({
      name: "ElDatePickerCell",
      props: basicCellProps,
      setup(props) {
        const ns2 = useNamespace("date-table-cell");
        const {
          slots
        } = inject(ROOT_PICKER_INJECTION_KEY);
        return () => {
          const {
            cell
          } = props;
          if (slots.default) {
            const list = slots.default(cell).filter((item) => {
              return item.patchFlag !== -2 && item.type.toString() !== "Symbol(Comment)";
            });
            if (list.length) {
              return list;
            }
          }
          return createVNode("div", {
            "class": ns2.b()
          }, [createVNode("span", {
            "class": ns2.e("text")
          }, [cell == null ? void 0 : cell.text])]);
        };
      }
    });
    const _hoisted_1$P = ["aria-label"];
    const _hoisted_2$w = {
      key: 0,
      scope: "col"
    };
    const _hoisted_3$g = ["aria-label"];
    const _hoisted_4$b = ["aria-current", "aria-selected", "tabindex"];
    const _sfc_main$1M = /* @__PURE__ */ defineComponent({
      __name: "basic-date-table",
      props: basicDateTableProps,
      emits: ["changerange", "pick", "select"],
      setup(__props, { expose, emit: emit2 }) {
        const props = __props;
        const ns2 = useNamespace("date-table");
        const { t, lang } = useLocale();
        const tbodyRef = ref();
        const currentCellRef = ref();
        const lastRow = ref();
        const lastColumn = ref();
        const tableRows = ref([[], [], [], [], [], []]);
        let focusWithClick = false;
        const firstDayOfWeek = props.date.$locale().weekStart || 7;
        const WEEKS_CONSTANT = props.date.locale("en").localeData().weekdaysShort().map((_2) => _2.toLowerCase());
        const offsetDay = computed(() => {
          return firstDayOfWeek > 3 ? 7 - firstDayOfWeek : -firstDayOfWeek;
        });
        const startDate = computed(() => {
          const startDayOfMonth = props.date.startOf("month");
          return startDayOfMonth.subtract(startDayOfMonth.day() || 7, "day");
        });
        const WEEKS = computed(() => {
          return WEEKS_CONSTANT.concat(WEEKS_CONSTANT).slice(firstDayOfWeek, firstDayOfWeek + 7);
        });
        const hasCurrent = computed(() => {
          return rows.value.flat().some((row) => {
            return row.isCurrent;
          });
        });
        const days = computed(() => {
          const startOfMonth = props.date.startOf("month");
          const startOfMonthDay = startOfMonth.day() || 7;
          const dateCountOfMonth = startOfMonth.daysInMonth();
          const dateCountOfLastMonth = startOfMonth.subtract(1, "month").daysInMonth();
          return {
            startOfMonthDay,
            dateCountOfMonth,
            dateCountOfLastMonth
          };
        });
        const selectedDate = computed(() => {
          return props.selectionMode === "dates" ? castArray(props.parsedValue) : [];
        });
        const setDateText = (cell, {
          count,
          rowIndex,
          columnIndex
        }) => {
          const { startOfMonthDay, dateCountOfMonth, dateCountOfLastMonth } = unref(days);
          const offset2 = unref(offsetDay);
          if (rowIndex >= 0 && rowIndex <= 1) {
            const numberOfDaysFromPreviousMonth = startOfMonthDay + offset2 < 0 ? 7 + startOfMonthDay + offset2 : startOfMonthDay + offset2;
            if (columnIndex + rowIndex * 7 >= numberOfDaysFromPreviousMonth) {
              cell.text = count;
              return true;
            } else {
              cell.text = dateCountOfLastMonth - (numberOfDaysFromPreviousMonth - columnIndex % 7) + 1 + rowIndex * 7;
              cell.type = "prev-month";
            }
          } else {
            if (count <= dateCountOfMonth) {
              cell.text = count;
            } else {
              cell.text = count - dateCountOfMonth;
              cell.type = "next-month";
            }
            return true;
          }
          return false;
        };
        const setCellMetadata = (cell, {
          columnIndex,
          rowIndex
        }, count) => {
          const { disabledDate: disabledDate2, cellClassName } = props;
          const _selectedDate = unref(selectedDate);
          const shouldIncrement = setDateText(cell, { count, rowIndex, columnIndex });
          const cellDate = cell.dayjs.toDate();
          cell.selected = _selectedDate.find((d2) => d2.valueOf() === cell.dayjs.valueOf());
          cell.isSelected = !!cell.selected;
          cell.isCurrent = isCurrent(cell);
          cell.disabled = disabledDate2 == null ? void 0 : disabledDate2(cellDate);
          cell.customClass = cellClassName == null ? void 0 : cellClassName(cellDate);
          return shouldIncrement;
        };
        const setRowMetadata = (row) => {
          if (props.selectionMode === "week") {
            const [start, end2] = props.showWeekNumber ? [1, 7] : [0, 6];
            const isActive = isWeekActive(row[start + 1]);
            row[start].inRange = isActive;
            row[start].start = isActive;
            row[end2].inRange = isActive;
            row[end2].end = isActive;
          }
        };
        const rows = computed(() => {
          const { minDate, maxDate, rangeState, showWeekNumber } = props;
          const offset2 = offsetDay.value;
          const rows_ = tableRows.value;
          const dateUnit = "day";
          let count = 1;
          if (showWeekNumber) {
            for (let rowIndex = 0; rowIndex < 6; rowIndex++) {
              if (!rows_[rowIndex][0]) {
                rows_[rowIndex][0] = {
                  type: "week",
                  text: startDate.value.add(rowIndex * 7 + 1, dateUnit).week()
                };
              }
            }
          }
          buildPickerTable({ row: 6, column: 7 }, rows_, {
            startDate: minDate,
            columnIndexOffset: showWeekNumber ? 1 : 0,
            nextEndDate: rangeState.endDate || maxDate || rangeState.selecting && minDate || null,
            now: dayjs().locale(unref(lang)).startOf(dateUnit),
            unit: dateUnit,
            relativeDateGetter: (idx) => startDate.value.add(idx - offset2, dateUnit),
            setCellMetadata: (...args) => {
              if (setCellMetadata(...args, count)) {
                count += 1;
              }
            },
            setRowMetadata
          });
          return rows_;
        });
        watch(() => props.date, async () => {
          var _a2, _b;
          if ((_a2 = tbodyRef.value) == null ? void 0 : _a2.contains(document.activeElement)) {
            await nextTick$1();
            (_b = currentCellRef.value) == null ? void 0 : _b.focus();
          }
        });
        const focus = async () => {
          var _a2;
          (_a2 = currentCellRef.value) == null ? void 0 : _a2.focus();
        };
        const isNormalDay = (type2 = "") => {
          return ["normal", "today"].includes(type2);
        };
        const isCurrent = (cell) => {
          return props.selectionMode === "date" && isNormalDay(cell.type) && cellMatchesDate(cell, props.parsedValue);
        };
        const cellMatchesDate = (cell, date2) => {
          if (!date2)
            return false;
          return dayjs(date2).locale(lang.value).isSame(props.date.date(Number(cell.text)), "day");
        };
        const getCellClasses = (cell) => {
          const classes = [];
          if (isNormalDay(cell.type) && !cell.disabled) {
            classes.push("available");
            if (cell.type === "today") {
              classes.push("today");
            }
          } else {
            classes.push(cell.type);
          }
          if (isCurrent(cell)) {
            classes.push("current");
          }
          if (cell.inRange && (isNormalDay(cell.type) || props.selectionMode === "week")) {
            classes.push("in-range");
            if (cell.start) {
              classes.push("start-date");
            }
            if (cell.end) {
              classes.push("end-date");
            }
          }
          if (cell.disabled) {
            classes.push("disabled");
          }
          if (cell.selected) {
            classes.push("selected");
          }
          if (cell.customClass) {
            classes.push(cell.customClass);
          }
          return classes.join(" ");
        };
        const getDateOfCell = (row, column) => {
          const offsetFromStart = row * 7 + (column - (props.showWeekNumber ? 1 : 0)) - offsetDay.value;
          return startDate.value.add(offsetFromStart, "day");
        };
        const handleMouseMove = (event) => {
          var _a2;
          if (!props.rangeState.selecting)
            return;
          let target = event.target;
          if (target.tagName === "SPAN") {
            target = (_a2 = target.parentNode) == null ? void 0 : _a2.parentNode;
          }
          if (target.tagName === "DIV") {
            target = target.parentNode;
          }
          if (target.tagName !== "TD")
            return;
          const row = target.parentNode.rowIndex - 1;
          const column = target.cellIndex;
          if (rows.value[row][column].disabled)
            return;
          if (row !== lastRow.value || column !== lastColumn.value) {
            lastRow.value = row;
            lastColumn.value = column;
            emit2("changerange", {
              selecting: true,
              endDate: getDateOfCell(row, column)
            });
          }
        };
        const isSelectedCell = (cell) => {
          return !hasCurrent.value && (cell == null ? void 0 : cell.text) === 1 && cell.type === "normal" || cell.isCurrent;
        };
        const handleFocus = (event) => {
          if (focusWithClick || hasCurrent.value || props.selectionMode !== "date")
            return;
          handlePickDate(event, true);
        };
        const handleMouseDown = (event) => {
          const target = event.target.closest("td");
          if (!target)
            return;
          focusWithClick = true;
        };
        const handleMouseUp = (event) => {
          const target = event.target.closest("td");
          if (!target)
            return;
          focusWithClick = false;
        };
        const handlePickDate = (event, isKeyboardMovement = false) => {
          const target = event.target.closest("td");
          if (!target)
            return;
          const row = target.parentNode.rowIndex - 1;
          const column = target.cellIndex;
          const cell = rows.value[row][column];
          if (cell.disabled || cell.type === "week")
            return;
          const newDate = getDateOfCell(row, column);
          if (props.selectionMode === "range") {
            if (!props.rangeState.selecting || !props.minDate) {
              emit2("pick", { minDate: newDate, maxDate: null });
              emit2("select", true);
            } else {
              if (newDate >= props.minDate) {
                emit2("pick", { minDate: props.minDate, maxDate: newDate });
              } else {
                emit2("pick", { minDate: newDate, maxDate: props.minDate });
              }
              emit2("select", false);
            }
          } else if (props.selectionMode === "date") {
            emit2("pick", newDate, isKeyboardMovement);
          } else if (props.selectionMode === "week") {
            const weekNumber = newDate.week();
            const value = `${newDate.year()}w${weekNumber}`;
            emit2("pick", {
              year: newDate.year(),
              week: weekNumber,
              value,
              date: newDate.startOf("week")
            });
          } else if (props.selectionMode === "dates") {
            const newValue = cell.selected ? castArray(props.parsedValue).filter((d2) => (d2 == null ? void 0 : d2.valueOf()) !== newDate.valueOf()) : castArray(props.parsedValue).concat([newDate]);
            emit2("pick", newValue);
          }
        };
        const isWeekActive = (cell) => {
          if (props.selectionMode !== "week")
            return false;
          let newDate = props.date.startOf("day");
          if (cell.type === "prev-month") {
            newDate = newDate.subtract(1, "month");
          }
          if (cell.type === "next-month") {
            newDate = newDate.add(1, "month");
          }
          newDate = newDate.date(Number.parseInt(cell.text, 10));
          if (props.parsedValue && !Array.isArray(props.parsedValue)) {
            const dayOffset = (props.parsedValue.day() - firstDayOfWeek + 7) % 7 - 1;
            const weekDate = props.parsedValue.subtract(dayOffset, "day");
            return weekDate.isSame(newDate, "day");
          }
          return false;
        };
        expose({
          focus
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("table", {
            role: "grid",
            "aria-label": unref(t)("el.datepicker.dateTablePrompt"),
            cellspacing: "0",
            cellpadding: "0",
            class: normalizeClass([unref(ns2).b(), { "is-week-mode": _ctx.selectionMode === "week" }]),
            onClick: handlePickDate,
            onMousemove: handleMouseMove,
            onMousedown: handleMouseDown,
            onMouseup: handleMouseUp
          }, [
            createBaseVNode("tbody", {
              ref_key: "tbodyRef",
              ref: tbodyRef
            }, [
              createBaseVNode("tr", null, [
                _ctx.showWeekNumber ? (openBlock(), createElementBlock("th", _hoisted_2$w, toDisplayString$1(unref(t)("el.datepicker.week")), 1)) : createCommentVNode("v-if", true),
                (openBlock(true), createElementBlock(Fragment, null, renderList(unref(WEEKS), (week, key) => {
                  return openBlock(), createElementBlock("th", {
                    key,
                    scope: "col",
                    "aria-label": unref(t)("el.datepicker.weeksFull." + week)
                  }, toDisplayString$1(unref(t)("el.datepicker.weeks." + week)), 9, _hoisted_3$g);
                }), 128))
              ]),
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(rows), (row, rowKey2) => {
                return openBlock(), createElementBlock("tr", {
                  key: rowKey2,
                  class: normalizeClass([unref(ns2).e("row"), { current: isWeekActive(row[1]) }])
                }, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList(row, (cell, columnKey) => {
                    return openBlock(), createElementBlock("td", {
                      key: `${rowKey2}.${columnKey}`,
                      ref_for: true,
                      ref: (el) => isSelectedCell(cell) && (currentCellRef.value = el),
                      class: normalizeClass(getCellClasses(cell)),
                      "aria-current": cell.isCurrent ? "date" : void 0,
                      "aria-selected": cell.isCurrent,
                      tabindex: isSelectedCell(cell) ? 0 : -1,
                      onFocus: handleFocus
                    }, [
                      createVNode(unref(ElDatePickerCell), { cell }, null, 8, ["cell"])
                    ], 42, _hoisted_4$b);
                  }), 128))
                ], 2);
              }), 128))
            ], 512)
          ], 42, _hoisted_1$P);
        };
      }
    });
    var DateTable = /* @__PURE__ */ _export_sfc$1(_sfc_main$1M, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/basic-date-table.vue"]]);
    const basicMonthTableProps = buildProps({
      ...datePickerSharedProps,
      selectionMode: selectionModeWithDefault("month")
    });
    const _hoisted_1$O = ["aria-label"];
    const _hoisted_2$v = ["aria-selected", "aria-label", "tabindex", "onKeydown"];
    const _hoisted_3$f = { class: "cell" };
    const _sfc_main$1L = /* @__PURE__ */ defineComponent({
      __name: "basic-month-table",
      props: basicMonthTableProps,
      emits: ["changerange", "pick", "select"],
      setup(__props, { expose, emit: emit2 }) {
        const props = __props;
        const datesInMonth = (year, month, lang2) => {
          const firstDay = dayjs().locale(lang2).startOf("month").month(month).year(year);
          const numOfDays = firstDay.daysInMonth();
          return rangeArr(numOfDays).map((n2) => firstDay.add(n2, "day").toDate());
        };
        const ns2 = useNamespace("month-table");
        const { t, lang } = useLocale();
        const tbodyRef = ref();
        const currentCellRef = ref();
        const months = ref(props.date.locale("en").localeData().monthsShort().map((_2) => _2.toLowerCase()));
        const tableRows = ref([
          [],
          [],
          []
        ]);
        const lastRow = ref();
        const lastColumn = ref();
        const rows = computed(() => {
          var _a2, _b;
          const rows2 = tableRows.value;
          const now2 = dayjs().locale(lang.value).startOf("month");
          for (let i2 = 0; i2 < 3; i2++) {
            const row = rows2[i2];
            for (let j2 = 0; j2 < 4; j2++) {
              const cell = row[j2] || (row[j2] = {
                row: i2,
                column: j2,
                type: "normal",
                inRange: false,
                start: false,
                end: false,
                text: -1,
                disabled: false
              });
              cell.type = "normal";
              const index2 = i2 * 4 + j2;
              const calTime = props.date.startOf("year").month(index2);
              const calEndDate = props.rangeState.endDate || props.maxDate || props.rangeState.selecting && props.minDate || null;
              cell.inRange = !!(props.minDate && calTime.isSameOrAfter(props.minDate, "month") && calEndDate && calTime.isSameOrBefore(calEndDate, "month")) || !!(props.minDate && calTime.isSameOrBefore(props.minDate, "month") && calEndDate && calTime.isSameOrAfter(calEndDate, "month"));
              if ((_a2 = props.minDate) == null ? void 0 : _a2.isSameOrAfter(calEndDate)) {
                cell.start = !!(calEndDate && calTime.isSame(calEndDate, "month"));
                cell.end = props.minDate && calTime.isSame(props.minDate, "month");
              } else {
                cell.start = !!(props.minDate && calTime.isSame(props.minDate, "month"));
                cell.end = !!(calEndDate && calTime.isSame(calEndDate, "month"));
              }
              const isToday = now2.isSame(calTime);
              if (isToday) {
                cell.type = "today";
              }
              cell.text = index2;
              cell.disabled = ((_b = props.disabledDate) == null ? void 0 : _b.call(props, calTime.toDate())) || false;
            }
          }
          return rows2;
        });
        const focus = () => {
          var _a2;
          (_a2 = currentCellRef.value) == null ? void 0 : _a2.focus();
        };
        const getCellStyle = (cell) => {
          const style2 = {};
          const year = props.date.year();
          const today = new Date();
          const month = cell.text;
          style2.disabled = props.disabledDate ? datesInMonth(year, month, lang.value).every(props.disabledDate) : false;
          style2.current = castArray(props.parsedValue).findIndex((date2) => dayjs.isDayjs(date2) && date2.year() === year && date2.month() === month) >= 0;
          style2.today = today.getFullYear() === year && today.getMonth() === month;
          if (cell.inRange) {
            style2["in-range"] = true;
            if (cell.start) {
              style2["start-date"] = true;
            }
            if (cell.end) {
              style2["end-date"] = true;
            }
          }
          return style2;
        };
        const isSelectedCell = (cell) => {
          const year = props.date.year();
          const month = cell.text;
          return castArray(props.date).findIndex((date2) => date2.year() === year && date2.month() === month) >= 0;
        };
        const handleMouseMove = (event) => {
          var _a2;
          if (!props.rangeState.selecting)
            return;
          let target = event.target;
          if (target.tagName === "A") {
            target = (_a2 = target.parentNode) == null ? void 0 : _a2.parentNode;
          }
          if (target.tagName === "DIV") {
            target = target.parentNode;
          }
          if (target.tagName !== "TD")
            return;
          const row = target.parentNode.rowIndex;
          const column = target.cellIndex;
          if (rows.value[row][column].disabled)
            return;
          if (row !== lastRow.value || column !== lastColumn.value) {
            lastRow.value = row;
            lastColumn.value = column;
            emit2("changerange", {
              selecting: true,
              endDate: props.date.startOf("year").month(row * 4 + column)
            });
          }
        };
        const handleMonthTableClick = (event) => {
          var _a2;
          const target = (_a2 = event.target) == null ? void 0 : _a2.closest("td");
          if ((target == null ? void 0 : target.tagName) !== "TD")
            return;
          if (hasClass(target, "disabled"))
            return;
          const column = target.cellIndex;
          const row = target.parentNode.rowIndex;
          const month = row * 4 + column;
          const newDate = props.date.startOf("year").month(month);
          if (props.selectionMode === "range") {
            if (!props.rangeState.selecting) {
              emit2("pick", { minDate: newDate, maxDate: null });
              emit2("select", true);
            } else {
              if (props.minDate && newDate >= props.minDate) {
                emit2("pick", { minDate: props.minDate, maxDate: newDate });
              } else {
                emit2("pick", { minDate: newDate, maxDate: props.minDate });
              }
              emit2("select", false);
            }
          } else {
            emit2("pick", month);
          }
        };
        watch(() => props.date, async () => {
          var _a2, _b;
          if ((_a2 = tbodyRef.value) == null ? void 0 : _a2.contains(document.activeElement)) {
            await nextTick$1();
            (_b = currentCellRef.value) == null ? void 0 : _b.focus();
          }
        });
        expose({
          focus
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("table", {
            role: "grid",
            "aria-label": unref(t)("el.datepicker.monthTablePrompt"),
            class: normalizeClass(unref(ns2).b()),
            onClick: handleMonthTableClick,
            onMousemove: handleMouseMove
          }, [
            createBaseVNode("tbody", {
              ref_key: "tbodyRef",
              ref: tbodyRef
            }, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(rows), (row, key) => {
                return openBlock(), createElementBlock("tr", { key }, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList(row, (cell, key_) => {
                    return openBlock(), createElementBlock("td", {
                      key: key_,
                      ref_for: true,
                      ref: (el) => isSelectedCell(cell) && (currentCellRef.value = el),
                      class: normalizeClass(getCellStyle(cell)),
                      "aria-selected": `${isSelectedCell(cell)}`,
                      "aria-label": unref(t)(`el.datepicker.month${+cell.text + 1}`),
                      tabindex: isSelectedCell(cell) ? 0 : -1,
                      onKeydown: [
                        withKeys(withModifiers(handleMonthTableClick, ["prevent", "stop"]), ["space"]),
                        withKeys(withModifiers(handleMonthTableClick, ["prevent", "stop"]), ["enter"])
                      ]
                    }, [
                      createBaseVNode("div", null, [
                        createBaseVNode("span", _hoisted_3$f, toDisplayString$1(unref(t)("el.datepicker.months." + months.value[cell.text])), 1)
                      ])
                    ], 42, _hoisted_2$v);
                  }), 128))
                ]);
              }), 128))
            ], 512)
          ], 42, _hoisted_1$O);
        };
      }
    });
    var MonthTable = /* @__PURE__ */ _export_sfc$1(_sfc_main$1L, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/basic-month-table.vue"]]);
    const { date: date$1, disabledDate, parsedValue } = datePickerSharedProps;
    const basicYearTableProps = buildProps({
      date: date$1,
      disabledDate,
      parsedValue
    });
    const _hoisted_1$N = ["aria-label"];
    const _hoisted_2$u = ["aria-selected", "tabindex", "onKeydown"];
    const _hoisted_3$e = { class: "cell" };
    const _hoisted_4$a = { key: 1 };
    const _sfc_main$1K = /* @__PURE__ */ defineComponent({
      __name: "basic-year-table",
      props: basicYearTableProps,
      emits: ["pick"],
      setup(__props, { expose, emit: emit2 }) {
        const props = __props;
        const datesInYear = (year, lang2) => {
          const firstDay = dayjs(String(year)).locale(lang2).startOf("year");
          const lastDay = firstDay.endOf("year");
          const numOfDays = lastDay.dayOfYear();
          return rangeArr(numOfDays).map((n2) => firstDay.add(n2, "day").toDate());
        };
        const ns2 = useNamespace("year-table");
        const { t, lang } = useLocale();
        const tbodyRef = ref();
        const currentCellRef = ref();
        const startYear = computed(() => {
          return Math.floor(props.date.year() / 10) * 10;
        });
        const focus = () => {
          var _a2;
          (_a2 = currentCellRef.value) == null ? void 0 : _a2.focus();
        };
        const getCellKls = (year) => {
          const kls = {};
          const today = dayjs().locale(lang.value);
          kls.disabled = props.disabledDate ? datesInYear(year, lang.value).every(props.disabledDate) : false;
          kls.current = castArray(props.parsedValue).findIndex((d2) => d2.year() === year) >= 0;
          kls.today = today.year() === year;
          return kls;
        };
        const isSelectedCell = (year) => {
          return year === startYear.value && props.date.year() < startYear.value && props.date.year() > startYear.value + 9 || castArray(props.date).findIndex((date2) => date2.year() === year) >= 0;
        };
        const handleYearTableClick = (event) => {
          const clickTarget = event.target;
          const target = clickTarget.closest("td");
          if (target) {
            if (hasClass(target, "disabled"))
              return;
            const year = target.textContent || target.innerText;
            emit2("pick", Number(year));
          }
        };
        watch(() => props.date, async () => {
          var _a2, _b;
          if ((_a2 = tbodyRef.value) == null ? void 0 : _a2.contains(document.activeElement)) {
            await nextTick$1();
            (_b = currentCellRef.value) == null ? void 0 : _b.focus();
          }
        });
        expose({
          focus
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("table", {
            role: "grid",
            "aria-label": unref(t)("el.datepicker.yearTablePrompt"),
            class: normalizeClass(unref(ns2).b()),
            onClick: handleYearTableClick
          }, [
            createBaseVNode("tbody", {
              ref_key: "tbodyRef",
              ref: tbodyRef
            }, [
              (openBlock(), createElementBlock(Fragment, null, renderList(3, (_2, i2) => {
                return createBaseVNode("tr", { key: i2 }, [
                  (openBlock(), createElementBlock(Fragment, null, renderList(4, (__, j2) => {
                    return openBlock(), createElementBlock(Fragment, {
                      key: i2 + "_" + j2
                    }, [
                      i2 * 4 + j2 < 10 ? (openBlock(), createElementBlock("td", {
                        key: 0,
                        ref_for: true,
                        ref: (el) => isSelectedCell(unref(startYear) + i2 * 4 + j2) && (currentCellRef.value = el),
                        class: normalizeClass(["available", getCellKls(unref(startYear) + i2 * 4 + j2)]),
                        "aria-selected": `${isSelectedCell(unref(startYear) + i2 * 4 + j2)}`,
                        tabindex: isSelectedCell(unref(startYear) + i2 * 4 + j2) ? 0 : -1,
                        onKeydown: [
                          withKeys(withModifiers(handleYearTableClick, ["prevent", "stop"]), ["space"]),
                          withKeys(withModifiers(handleYearTableClick, ["prevent", "stop"]), ["enter"])
                        ]
                      }, [
                        createBaseVNode("span", _hoisted_3$e, toDisplayString$1(unref(startYear) + i2 * 4 + j2), 1)
                      ], 42, _hoisted_2$u)) : (openBlock(), createElementBlock("td", _hoisted_4$a))
                    ], 64);
                  }), 64))
                ]);
              }), 64))
            ], 512)
          ], 10, _hoisted_1$N);
        };
      }
    });
    var YearTable = /* @__PURE__ */ _export_sfc$1(_sfc_main$1K, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/basic-year-table.vue"]]);
    const _hoisted_1$M = ["onClick"];
    const _hoisted_2$t = ["aria-label"];
    const _hoisted_3$d = ["aria-label"];
    const _hoisted_4$9 = ["aria-label"];
    const _hoisted_5$7 = ["aria-label"];
    const _sfc_main$1J = /* @__PURE__ */ defineComponent({
      __name: "panel-date-pick",
      props: panelDatePickProps,
      emits: ["pick", "set-picker-option", "panel-change"],
      setup(__props, { emit: contextEmit }) {
        const props = __props;
        const timeWithinRange = (_2, __, ___) => true;
        const ppNs = useNamespace("picker-panel");
        const dpNs = useNamespace("date-picker");
        const attrs = useAttrs$1();
        const slots = useSlots();
        const { t, lang } = useLocale();
        const pickerBase = inject("EP_PICKER_BASE");
        const popper = inject(TOOLTIP_INJECTION_KEY);
        const { shortcuts, disabledDate: disabledDate2, cellClassName, defaultTime, arrowControl } = pickerBase.props;
        const defaultValue = toRef(pickerBase.props, "defaultValue");
        const currentViewRef = ref();
        const innerDate = ref(dayjs().locale(lang.value));
        const defaultTimeD = computed(() => {
          return dayjs(defaultTime).locale(lang.value);
        });
        const month = computed(() => {
          return innerDate.value.month();
        });
        const year = computed(() => {
          return innerDate.value.year();
        });
        const selectableRange = ref([]);
        const userInputDate = ref(null);
        const userInputTime = ref(null);
        const checkDateWithinRange = (date2) => {
          return selectableRange.value.length > 0 ? timeWithinRange(date2, selectableRange.value, props.format || "HH:mm:ss") : true;
        };
        const formatEmit = (emitDayjs) => {
          if (defaultTime && !visibleTime.value) {
            return defaultTimeD.value.year(emitDayjs.year()).month(emitDayjs.month()).date(emitDayjs.date());
          }
          if (showTime.value)
            return emitDayjs.millisecond(0);
          return emitDayjs.startOf("day");
        };
        const emit2 = (value, ...args) => {
          if (!value) {
            contextEmit("pick", value, ...args);
          } else if (isArray$6(value)) {
            const dates = value.map(formatEmit);
            contextEmit("pick", dates, ...args);
          } else {
            contextEmit("pick", formatEmit(value), ...args);
          }
          userInputDate.value = null;
          userInputTime.value = null;
        };
        const handleDatePick = (value, keepOpen) => {
          if (selectionMode.value === "date") {
            value = value;
            let newDate = props.parsedValue ? props.parsedValue.year(value.year()).month(value.month()).date(value.date()) : value;
            if (!checkDateWithinRange(newDate)) {
              newDate = selectableRange.value[0][0].year(value.year()).month(value.month()).date(value.date());
            }
            innerDate.value = newDate;
            emit2(newDate, showTime.value || keepOpen);
          } else if (selectionMode.value === "week") {
            emit2(value.date);
          } else if (selectionMode.value === "dates") {
            emit2(value, true);
          }
        };
        const moveByMonth = (forward) => {
          const action = forward ? "add" : "subtract";
          innerDate.value = innerDate.value[action](1, "month");
          handlePanelChange("month");
        };
        const moveByYear = (forward) => {
          const currentDate = innerDate.value;
          const action = forward ? "add" : "subtract";
          innerDate.value = currentView.value === "year" ? currentDate[action](10, "year") : currentDate[action](1, "year");
          handlePanelChange("year");
        };
        const currentView = ref("date");
        const yearLabel = computed(() => {
          const yearTranslation = t("el.datepicker.year");
          if (currentView.value === "year") {
            const startYear = Math.floor(year.value / 10) * 10;
            if (yearTranslation) {
              return `${startYear} ${yearTranslation} - ${startYear + 9} ${yearTranslation}`;
            }
            return `${startYear} - ${startYear + 9}`;
          }
          return `${year.value} ${yearTranslation}`;
        });
        const handleShortcutClick = (shortcut) => {
          const shortcutValue = isFunction$4(shortcut.value) ? shortcut.value() : shortcut.value;
          if (shortcutValue) {
            emit2(dayjs(shortcutValue).locale(lang.value));
            return;
          }
          if (shortcut.onClick) {
            shortcut.onClick({
              attrs,
              slots,
              emit: contextEmit
            });
          }
        };
        const selectionMode = computed(() => {
          const { type: type2 } = props;
          if (["week", "month", "year", "dates"].includes(type2))
            return type2;
          return "date";
        });
        const keyboardMode = computed(() => {
          return selectionMode.value === "date" ? currentView.value : selectionMode.value;
        });
        const hasShortcuts = computed(() => !!shortcuts.length);
        const handleMonthPick = async (month2) => {
          innerDate.value = innerDate.value.startOf("month").month(month2);
          if (selectionMode.value === "month") {
            emit2(innerDate.value, false);
          } else {
            currentView.value = "date";
            if (["month", "year", "date", "week"].includes(selectionMode.value)) {
              emit2(innerDate.value, true);
              await nextTick$1();
              handleFocusPicker();
            }
          }
          handlePanelChange("month");
        };
        const handleYearPick = async (year2) => {
          if (selectionMode.value === "year") {
            innerDate.value = innerDate.value.startOf("year").year(year2);
            emit2(innerDate.value, false);
          } else {
            innerDate.value = innerDate.value.year(year2);
            currentView.value = "month";
            if (["month", "year", "date", "week"].includes(selectionMode.value)) {
              emit2(innerDate.value, true);
              await nextTick$1();
              handleFocusPicker();
            }
          }
          handlePanelChange("year");
        };
        const showPicker = async (view) => {
          currentView.value = view;
          await nextTick$1();
          handleFocusPicker();
        };
        const showTime = computed(() => props.type === "datetime" || props.type === "datetimerange");
        const footerVisible = computed(() => {
          return showTime.value || selectionMode.value === "dates";
        });
        const onConfirm = () => {
          if (selectionMode.value === "dates") {
            emit2(props.parsedValue);
          } else {
            let result = props.parsedValue;
            if (!result) {
              const defaultTimeD2 = dayjs(defaultTime).locale(lang.value);
              const defaultValueD = getDefaultValue2();
              result = defaultTimeD2.year(defaultValueD.year()).month(defaultValueD.month()).date(defaultValueD.date());
            }
            innerDate.value = result;
            emit2(result);
          }
        };
        const changeToNow = () => {
          const now2 = dayjs().locale(lang.value);
          const nowDate = now2.toDate();
          if ((!disabledDate2 || !disabledDate2(nowDate)) && checkDateWithinRange(nowDate)) {
            innerDate.value = dayjs().locale(lang.value);
            emit2(innerDate.value);
          }
        };
        const timeFormat = computed(() => {
          return extractTimeFormat(props.format);
        });
        const dateFormat = computed(() => {
          return extractDateFormat(props.format);
        });
        const visibleTime = computed(() => {
          if (userInputTime.value)
            return userInputTime.value;
          if (!props.parsedValue && !defaultValue.value)
            return;
          return (props.parsedValue || innerDate.value).format(timeFormat.value);
        });
        const visibleDate = computed(() => {
          if (userInputDate.value)
            return userInputDate.value;
          if (!props.parsedValue && !defaultValue.value)
            return;
          return (props.parsedValue || innerDate.value).format(dateFormat.value);
        });
        const timePickerVisible = ref(false);
        const onTimePickerInputFocus = () => {
          timePickerVisible.value = true;
        };
        const handleTimePickClose = () => {
          timePickerVisible.value = false;
        };
        const getUnits = (date2) => {
          return {
            hour: date2.hour(),
            minute: date2.minute(),
            second: date2.second(),
            year: date2.year(),
            month: date2.month(),
            date: date2.date()
          };
        };
        const handleTimePick = (value, visible, first) => {
          const { hour, minute, second } = getUnits(value);
          const newDate = props.parsedValue ? props.parsedValue.hour(hour).minute(minute).second(second) : value;
          innerDate.value = newDate;
          emit2(innerDate.value, true);
          if (!first) {
            timePickerVisible.value = visible;
          }
        };
        const handleVisibleTimeChange = (value) => {
          const newDate = dayjs(value, timeFormat.value).locale(lang.value);
          if (newDate.isValid() && checkDateWithinRange(newDate)) {
            const { year: year2, month: month2, date: date2 } = getUnits(innerDate.value);
            innerDate.value = newDate.year(year2).month(month2).date(date2);
            userInputTime.value = null;
            timePickerVisible.value = false;
            emit2(innerDate.value, true);
          }
        };
        const handleVisibleDateChange = (value) => {
          const newDate = dayjs(value, dateFormat.value).locale(lang.value);
          if (newDate.isValid()) {
            if (disabledDate2 && disabledDate2(newDate.toDate())) {
              return;
            }
            const { hour, minute, second } = getUnits(innerDate.value);
            innerDate.value = newDate.hour(hour).minute(minute).second(second);
            userInputDate.value = null;
            emit2(innerDate.value, true);
          }
        };
        const isValidValue2 = (date2) => {
          return dayjs.isDayjs(date2) && date2.isValid() && (disabledDate2 ? !disabledDate2(date2.toDate()) : true);
        };
        const formatToString = (value) => {
          if (selectionMode.value === "dates") {
            return value.map((_2) => _2.format(props.format));
          }
          return value.format(props.format);
        };
        const parseUserInput = (value) => {
          return dayjs(value, props.format).locale(lang.value);
        };
        const getDefaultValue2 = () => {
          const parseDate2 = dayjs(defaultValue.value).locale(lang.value);
          if (!defaultValue.value) {
            const defaultTimeDValue = defaultTimeD.value;
            return dayjs().hour(defaultTimeDValue.hour()).minute(defaultTimeDValue.minute()).second(defaultTimeDValue.second()).locale(lang.value);
          }
          return parseDate2;
        };
        const handleFocusPicker = async () => {
          var _a2;
          if (["week", "month", "year", "date"].includes(selectionMode.value)) {
            (_a2 = currentViewRef.value) == null ? void 0 : _a2.focus();
            if (selectionMode.value === "week") {
              handleKeyControl(EVENT_CODE.down);
            }
          }
        };
        const handleKeydownTable = (event) => {
          const { code } = event;
          const validCode = [
            EVENT_CODE.up,
            EVENT_CODE.down,
            EVENT_CODE.left,
            EVENT_CODE.right,
            EVENT_CODE.home,
            EVENT_CODE.end,
            EVENT_CODE.pageUp,
            EVENT_CODE.pageDown
          ];
          if (validCode.includes(code)) {
            handleKeyControl(code);
            event.stopPropagation();
            event.preventDefault();
          }
          if ([EVENT_CODE.enter, EVENT_CODE.space].includes(code) && userInputDate.value === null && userInputTime.value === null) {
            event.preventDefault();
            emit2(innerDate.value, false);
          }
        };
        const handleKeyControl = (code) => {
          var _a2;
          const { up: up2, down: down2, left: left2, right: right2, home: home2, end: end2, pageUp: pageUp2, pageDown: pageDown2 } = EVENT_CODE;
          const mapping = {
            year: {
              [up2]: -4,
              [down2]: 4,
              [left2]: -1,
              [right2]: 1,
              offset: (date2, step) => date2.setFullYear(date2.getFullYear() + step)
            },
            month: {
              [up2]: -4,
              [down2]: 4,
              [left2]: -1,
              [right2]: 1,
              offset: (date2, step) => date2.setMonth(date2.getMonth() + step)
            },
            week: {
              [up2]: -1,
              [down2]: 1,
              [left2]: -1,
              [right2]: 1,
              offset: (date2, step) => date2.setDate(date2.getDate() + step * 7)
            },
            date: {
              [up2]: -7,
              [down2]: 7,
              [left2]: -1,
              [right2]: 1,
              [home2]: (date2) => -date2.getDay(),
              [end2]: (date2) => -date2.getDay() + 6,
              [pageUp2]: (date2) => -new Date(date2.getFullYear(), date2.getMonth(), 0).getDate(),
              [pageDown2]: (date2) => new Date(date2.getFullYear(), date2.getMonth() + 1, 0).getDate(),
              offset: (date2, step) => date2.setDate(date2.getDate() + step)
            }
          };
          const newDate = innerDate.value.toDate();
          while (Math.abs(innerDate.value.diff(newDate, "year", true)) < 1) {
            const map2 = mapping[keyboardMode.value];
            if (!map2)
              return;
            map2.offset(newDate, isFunction$4(map2[code]) ? map2[code](newDate) : (_a2 = map2[code]) != null ? _a2 : 0);
            if (disabledDate2 && disabledDate2(newDate)) {
              break;
            }
            const result = dayjs(newDate).locale(lang.value);
            innerDate.value = result;
            contextEmit("pick", result, true);
            break;
          }
        };
        const handlePanelChange = (mode) => {
          contextEmit("panel-change", innerDate.value.toDate(), mode, currentView.value);
        };
        watch(() => selectionMode.value, (val) => {
          if (["month", "year"].includes(val)) {
            currentView.value = val;
            return;
          }
          currentView.value = "date";
        }, { immediate: true });
        watch(() => currentView.value, () => {
          popper == null ? void 0 : popper.updatePopper();
        });
        watch(() => defaultValue.value, (val) => {
          if (val) {
            innerDate.value = getDefaultValue2();
          }
        }, { immediate: true });
        watch(() => props.parsedValue, (val) => {
          if (val) {
            if (selectionMode.value === "dates")
              return;
            if (Array.isArray(val))
              return;
            innerDate.value = val;
          } else {
            innerDate.value = getDefaultValue2();
          }
        }, { immediate: true });
        contextEmit("set-picker-option", ["isValidValue", isValidValue2]);
        contextEmit("set-picker-option", ["formatToString", formatToString]);
        contextEmit("set-picker-option", ["parseUserInput", parseUserInput]);
        contextEmit("set-picker-option", ["handleFocusPicker", handleFocusPicker]);
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            class: normalizeClass([
              unref(ppNs).b(),
              unref(dpNs).b(),
              {
                "has-sidebar": _ctx.$slots.sidebar || unref(hasShortcuts),
                "has-time": unref(showTime)
              }
            ])
          }, [
            createBaseVNode("div", {
              class: normalizeClass(unref(ppNs).e("body-wrapper"))
            }, [
              renderSlot(_ctx.$slots, "sidebar", {
                class: normalizeClass(unref(ppNs).e("sidebar"))
              }),
              unref(hasShortcuts) ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(unref(ppNs).e("sidebar"))
              }, [
                (openBlock(true), createElementBlock(Fragment, null, renderList(unref(shortcuts), (shortcut, key) => {
                  return openBlock(), createElementBlock("button", {
                    key,
                    type: "button",
                    class: normalizeClass(unref(ppNs).e("shortcut")),
                    onClick: ($event) => handleShortcutClick(shortcut)
                  }, toDisplayString$1(shortcut.text), 11, _hoisted_1$M);
                }), 128))
              ], 2)) : createCommentVNode("v-if", true),
              createBaseVNode("div", {
                class: normalizeClass(unref(ppNs).e("body"))
              }, [
                unref(showTime) ? (openBlock(), createElementBlock("div", {
                  key: 0,
                  class: normalizeClass(unref(dpNs).e("time-header"))
                }, [
                  createBaseVNode("span", {
                    class: normalizeClass(unref(dpNs).e("editor-wrap"))
                  }, [
                    createVNode(unref(ElInput), {
                      placeholder: unref(t)("el.datepicker.selectDate"),
                      "model-value": unref(visibleDate),
                      size: "small",
                      onInput: _cache[0] || (_cache[0] = (val) => userInputDate.value = val),
                      onChange: handleVisibleDateChange
                    }, null, 8, ["placeholder", "model-value"])
                  ], 2),
                  withDirectives((openBlock(), createElementBlock("span", {
                    class: normalizeClass(unref(dpNs).e("editor-wrap"))
                  }, [
                    createVNode(unref(ElInput), {
                      placeholder: unref(t)("el.datepicker.selectTime"),
                      "model-value": unref(visibleTime),
                      size: "small",
                      onFocus: onTimePickerInputFocus,
                      onInput: _cache[1] || (_cache[1] = (val) => userInputTime.value = val),
                      onChange: handleVisibleTimeChange
                    }, null, 8, ["placeholder", "model-value"]),
                    createVNode(unref(TimePickPanel), {
                      visible: timePickerVisible.value,
                      format: unref(timeFormat),
                      "time-arrow-control": unref(arrowControl),
                      "parsed-value": innerDate.value,
                      onPick: handleTimePick
                    }, null, 8, ["visible", "format", "time-arrow-control", "parsed-value"])
                  ], 2)), [
                    [unref(ClickOutside), handleTimePickClose]
                  ])
                ], 2)) : createCommentVNode("v-if", true),
                withDirectives(createBaseVNode("div", {
                  class: normalizeClass([
                    unref(dpNs).e("header"),
                    (currentView.value === "year" || currentView.value === "month") && unref(dpNs).e("header--bordered")
                  ])
                }, [
                  createBaseVNode("span", {
                    class: normalizeClass(unref(dpNs).e("prev-btn"))
                  }, [
                    createBaseVNode("button", {
                      type: "button",
                      "aria-label": unref(t)(`el.datepicker.prevYear`),
                      class: normalizeClass(["d-arrow-left", unref(ppNs).e("icon-btn")]),
                      onClick: _cache[2] || (_cache[2] = ($event) => moveByYear(false))
                    }, [
                      createVNode(unref(ElIcon), null, {
                        default: withCtx(() => [
                          createVNode(unref(d_arrow_left_default))
                        ]),
                        _: 1
                      })
                    ], 10, _hoisted_2$t),
                    withDirectives(createBaseVNode("button", {
                      type: "button",
                      "aria-label": unref(t)(`el.datepicker.prevMonth`),
                      class: normalizeClass([unref(ppNs).e("icon-btn"), "arrow-left"]),
                      onClick: _cache[3] || (_cache[3] = ($event) => moveByMonth(false))
                    }, [
                      createVNode(unref(ElIcon), null, {
                        default: withCtx(() => [
                          createVNode(unref(arrow_left_default))
                        ]),
                        _: 1
                      })
                    ], 10, _hoisted_3$d), [
                      [vShow, currentView.value === "date"]
                    ])
                  ], 2),
                  createBaseVNode("span", {
                    role: "button",
                    class: normalizeClass(unref(dpNs).e("header-label")),
                    "aria-live": "polite",
                    tabindex: "0",
                    onKeydown: _cache[4] || (_cache[4] = withKeys(($event) => showPicker("year"), ["enter"])),
                    onClick: _cache[5] || (_cache[5] = ($event) => showPicker("year"))
                  }, toDisplayString$1(unref(yearLabel)), 35),
                  withDirectives(createBaseVNode("span", {
                    role: "button",
                    "aria-live": "polite",
                    tabindex: "0",
                    class: normalizeClass([
                      unref(dpNs).e("header-label"),
                      { active: currentView.value === "month" }
                    ]),
                    onKeydown: _cache[6] || (_cache[6] = withKeys(($event) => showPicker("month"), ["enter"])),
                    onClick: _cache[7] || (_cache[7] = ($event) => showPicker("month"))
                  }, toDisplayString$1(unref(t)(`el.datepicker.month${unref(month) + 1}`)), 35), [
                    [vShow, currentView.value === "date"]
                  ]),
                  createBaseVNode("span", {
                    class: normalizeClass(unref(dpNs).e("next-btn"))
                  }, [
                    withDirectives(createBaseVNode("button", {
                      type: "button",
                      "aria-label": unref(t)(`el.datepicker.nextMonth`),
                      class: normalizeClass([unref(ppNs).e("icon-btn"), "arrow-right"]),
                      onClick: _cache[8] || (_cache[8] = ($event) => moveByMonth(true))
                    }, [
                      createVNode(unref(ElIcon), null, {
                        default: withCtx(() => [
                          createVNode(unref(arrow_right_default))
                        ]),
                        _: 1
                      })
                    ], 10, _hoisted_4$9), [
                      [vShow, currentView.value === "date"]
                    ]),
                    createBaseVNode("button", {
                      type: "button",
                      "aria-label": unref(t)(`el.datepicker.nextYear`),
                      class: normalizeClass([unref(ppNs).e("icon-btn"), "d-arrow-right"]),
                      onClick: _cache[9] || (_cache[9] = ($event) => moveByYear(true))
                    }, [
                      createVNode(unref(ElIcon), null, {
                        default: withCtx(() => [
                          createVNode(unref(d_arrow_right_default))
                        ]),
                        _: 1
                      })
                    ], 10, _hoisted_5$7)
                  ], 2)
                ], 2), [
                  [vShow, currentView.value !== "time"]
                ]),
                createBaseVNode("div", {
                  class: normalizeClass(unref(ppNs).e("content")),
                  onKeydown: handleKeydownTable
                }, [
                  currentView.value === "date" ? (openBlock(), createBlock(DateTable, {
                    key: 0,
                    ref_key: "currentViewRef",
                    ref: currentViewRef,
                    "selection-mode": unref(selectionMode),
                    date: innerDate.value,
                    "parsed-value": _ctx.parsedValue,
                    "disabled-date": unref(disabledDate2),
                    "cell-class-name": unref(cellClassName),
                    onPick: handleDatePick
                  }, null, 8, ["selection-mode", "date", "parsed-value", "disabled-date", "cell-class-name"])) : createCommentVNode("v-if", true),
                  currentView.value === "year" ? (openBlock(), createBlock(YearTable, {
                    key: 1,
                    ref_key: "currentViewRef",
                    ref: currentViewRef,
                    date: innerDate.value,
                    "disabled-date": unref(disabledDate2),
                    "parsed-value": _ctx.parsedValue,
                    onPick: handleYearPick
                  }, null, 8, ["date", "disabled-date", "parsed-value"])) : createCommentVNode("v-if", true),
                  currentView.value === "month" ? (openBlock(), createBlock(MonthTable, {
                    key: 2,
                    ref_key: "currentViewRef",
                    ref: currentViewRef,
                    date: innerDate.value,
                    "parsed-value": _ctx.parsedValue,
                    "disabled-date": unref(disabledDate2),
                    onPick: handleMonthPick
                  }, null, 8, ["date", "parsed-value", "disabled-date"])) : createCommentVNode("v-if", true)
                ], 34)
              ], 2)
            ], 2),
            withDirectives(createBaseVNode("div", {
              class: normalizeClass(unref(ppNs).e("footer"))
            }, [
              withDirectives(createVNode(unref(ElButton), {
                text: "",
                size: "small",
                class: normalizeClass(unref(ppNs).e("link-btn")),
                onClick: changeToNow
              }, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString$1(unref(t)("el.datepicker.now")), 1)
                ]),
                _: 1
              }, 8, ["class"]), [
                [vShow, unref(selectionMode) !== "dates"]
              ]),
              createVNode(unref(ElButton), {
                plain: "",
                size: "small",
                class: normalizeClass(unref(ppNs).e("link-btn")),
                onClick: onConfirm
              }, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString$1(unref(t)("el.datepicker.confirm")), 1)
                ]),
                _: 1
              }, 8, ["class"])
            ], 2), [
              [vShow, unref(footerVisible) && currentView.value === "date"]
            ])
          ], 2);
        };
      }
    });
    var DatePickPanel = /* @__PURE__ */ _export_sfc$1(_sfc_main$1J, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/panel-date-pick.vue"]]);
    const panelDateRangeProps = buildProps({
      ...panelSharedProps,
      ...panelRangeSharedProps
    });
    const useShortcut = (lang) => {
      const { emit: emit2 } = getCurrentInstance();
      const attrs = useAttrs$1();
      const slots = useSlots();
      const handleShortcutClick = (shortcut) => {
        const shortcutValues = isFunction$4(shortcut.value) ? shortcut.value() : shortcut.value;
        if (shortcutValues) {
          emit2("pick", [
            dayjs(shortcutValues[0]).locale(lang.value),
            dayjs(shortcutValues[1]).locale(lang.value)
          ]);
          return;
        }
        if (shortcut.onClick) {
          shortcut.onClick({
            attrs,
            slots,
            emit: emit2
          });
        }
      };
      return handleShortcutClick;
    };
    const useRangePicker = (props, {
      defaultValue,
      leftDate,
      rightDate,
      unit,
      onParsedValueChanged
    }) => {
      const { emit: emit2 } = getCurrentInstance();
      const { pickerNs } = inject(ROOT_PICKER_INJECTION_KEY);
      const drpNs = useNamespace("date-range-picker");
      const { t, lang } = useLocale();
      const handleShortcutClick = useShortcut(lang);
      const minDate = ref();
      const maxDate = ref();
      const rangeState = ref({
        endDate: null,
        selecting: false
      });
      const handleChangeRange = (val) => {
        rangeState.value = val;
      };
      const handleRangeConfirm = (visible = false) => {
        const _minDate = unref(minDate);
        const _maxDate = unref(maxDate);
        if (isValidRange([_minDate, _maxDate])) {
          emit2("pick", [_minDate, _maxDate], visible);
        }
      };
      const onSelect = (selecting) => {
        rangeState.value.selecting = selecting;
        if (!selecting) {
          rangeState.value.endDate = null;
        }
      };
      const restoreDefault = () => {
        const [start, end2] = getDefaultValue(unref(defaultValue), {
          lang: unref(lang),
          unit,
          unlinkPanels: props.unlinkPanels
        });
        minDate.value = void 0;
        maxDate.value = void 0;
        leftDate.value = start;
        rightDate.value = end2;
      };
      watch(defaultValue, (val) => {
        if (val) {
          restoreDefault();
        }
      }, { immediate: true });
      watch(() => props.parsedValue, (parsedValue2) => {
        if (isArray$6(parsedValue2) && parsedValue2.length === 2) {
          const [start, end2] = parsedValue2;
          minDate.value = start;
          leftDate.value = start;
          maxDate.value = end2;
          onParsedValueChanged(unref(minDate), unref(maxDate));
        } else {
          restoreDefault();
        }
      }, { immediate: true });
      return {
        minDate,
        maxDate,
        rangeState,
        lang,
        ppNs: pickerNs,
        drpNs,
        handleChangeRange,
        handleRangeConfirm,
        handleShortcutClick,
        onSelect,
        t
      };
    };
    const _hoisted_1$L = ["onClick"];
    const _hoisted_2$s = ["disabled"];
    const _hoisted_3$c = ["disabled"];
    const _hoisted_4$8 = ["disabled"];
    const _hoisted_5$6 = ["disabled"];
    const _sfc_main$1I = /* @__PURE__ */ defineComponent({
      __name: "panel-date-range",
      props: panelDateRangeProps,
      emits: [
        "pick",
        "set-picker-option",
        "calendar-change",
        "panel-change"
      ],
      setup(__props, { emit: emit2 }) {
        const props = __props;
        const unit = "month";
        const pickerBase = inject("EP_PICKER_BASE");
        const {
          disabledDate: disabledDate2,
          cellClassName,
          format: format2,
          defaultTime,
          arrowControl,
          clearable
        } = pickerBase.props;
        const shortcuts = toRef(pickerBase.props, "shortcuts");
        const defaultValue = toRef(pickerBase.props, "defaultValue");
        const { lang } = useLocale();
        const leftDate = ref(dayjs().locale(lang.value));
        const rightDate = ref(dayjs().locale(lang.value).add(1, unit));
        const {
          minDate,
          maxDate,
          rangeState,
          ppNs,
          drpNs,
          handleChangeRange,
          handleRangeConfirm,
          handleShortcutClick,
          onSelect,
          t
        } = useRangePicker(props, {
          defaultValue,
          leftDate,
          rightDate,
          unit,
          onParsedValueChanged
        });
        const dateUserInput = ref({
          min: null,
          max: null
        });
        const timeUserInput = ref({
          min: null,
          max: null
        });
        const leftLabel = computed(() => {
          return `${leftDate.value.year()} ${t("el.datepicker.year")} ${t(`el.datepicker.month${leftDate.value.month() + 1}`)}`;
        });
        const rightLabel = computed(() => {
          return `${rightDate.value.year()} ${t("el.datepicker.year")} ${t(`el.datepicker.month${rightDate.value.month() + 1}`)}`;
        });
        const leftYear = computed(() => {
          return leftDate.value.year();
        });
        const leftMonth = computed(() => {
          return leftDate.value.month();
        });
        const rightYear = computed(() => {
          return rightDate.value.year();
        });
        const rightMonth = computed(() => {
          return rightDate.value.month();
        });
        const hasShortcuts = computed(() => !!shortcuts.value.length);
        const minVisibleDate = computed(() => {
          if (dateUserInput.value.min !== null)
            return dateUserInput.value.min;
          if (minDate.value)
            return minDate.value.format(dateFormat.value);
          return "";
        });
        const maxVisibleDate = computed(() => {
          if (dateUserInput.value.max !== null)
            return dateUserInput.value.max;
          if (maxDate.value || minDate.value)
            return (maxDate.value || minDate.value).format(dateFormat.value);
          return "";
        });
        const minVisibleTime = computed(() => {
          if (timeUserInput.value.min !== null)
            return timeUserInput.value.min;
          if (minDate.value)
            return minDate.value.format(timeFormat.value);
          return "";
        });
        const maxVisibleTime = computed(() => {
          if (timeUserInput.value.max !== null)
            return timeUserInput.value.max;
          if (maxDate.value || minDate.value)
            return (maxDate.value || minDate.value).format(timeFormat.value);
          return "";
        });
        const timeFormat = computed(() => {
          return extractTimeFormat(format2);
        });
        const dateFormat = computed(() => {
          return extractDateFormat(format2);
        });
        const leftPrevYear = () => {
          leftDate.value = leftDate.value.subtract(1, "year");
          if (!props.unlinkPanels) {
            rightDate.value = leftDate.value.add(1, "month");
          }
          handlePanelChange("year");
        };
        const leftPrevMonth = () => {
          leftDate.value = leftDate.value.subtract(1, "month");
          if (!props.unlinkPanels) {
            rightDate.value = leftDate.value.add(1, "month");
          }
          handlePanelChange("month");
        };
        const rightNextYear = () => {
          if (!props.unlinkPanels) {
            leftDate.value = leftDate.value.add(1, "year");
            rightDate.value = leftDate.value.add(1, "month");
          } else {
            rightDate.value = rightDate.value.add(1, "year");
          }
          handlePanelChange("year");
        };
        const rightNextMonth = () => {
          if (!props.unlinkPanels) {
            leftDate.value = leftDate.value.add(1, "month");
            rightDate.value = leftDate.value.add(1, "month");
          } else {
            rightDate.value = rightDate.value.add(1, "month");
          }
          handlePanelChange("month");
        };
        const leftNextYear = () => {
          leftDate.value = leftDate.value.add(1, "year");
          handlePanelChange("year");
        };
        const leftNextMonth = () => {
          leftDate.value = leftDate.value.add(1, "month");
          handlePanelChange("month");
        };
        const rightPrevYear = () => {
          rightDate.value = rightDate.value.subtract(1, "year");
          handlePanelChange("year");
        };
        const rightPrevMonth = () => {
          rightDate.value = rightDate.value.subtract(1, "month");
          handlePanelChange("month");
        };
        const handlePanelChange = (mode) => {
          emit2("panel-change", [leftDate.value.toDate(), rightDate.value.toDate()], mode);
        };
        const enableMonthArrow = computed(() => {
          const nextMonth = (leftMonth.value + 1) % 12;
          const yearOffset = leftMonth.value + 1 >= 12 ? 1 : 0;
          return props.unlinkPanels && new Date(leftYear.value + yearOffset, nextMonth) < new Date(rightYear.value, rightMonth.value);
        });
        const enableYearArrow = computed(() => {
          return props.unlinkPanels && rightYear.value * 12 + rightMonth.value - (leftYear.value * 12 + leftMonth.value + 1) >= 12;
        });
        const btnDisabled = computed(() => {
          return !(minDate.value && maxDate.value && !rangeState.value.selecting && isValidRange([minDate.value, maxDate.value]));
        });
        const showTime = computed(() => props.type === "datetime" || props.type === "datetimerange");
        const formatEmit = (emitDayjs, index2) => {
          if (!emitDayjs)
            return;
          if (defaultTime) {
            const defaultTimeD = dayjs(defaultTime[index2] || defaultTime).locale(lang.value);
            return defaultTimeD.year(emitDayjs.year()).month(emitDayjs.month()).date(emitDayjs.date());
          }
          return emitDayjs;
        };
        const handleRangePick = (val, close2 = true) => {
          const min_ = val.minDate;
          const max_ = val.maxDate;
          const minDate_ = formatEmit(min_, 0);
          const maxDate_ = formatEmit(max_, 1);
          if (maxDate.value === maxDate_ && minDate.value === minDate_) {
            return;
          }
          emit2("calendar-change", [min_.toDate(), max_ && max_.toDate()]);
          maxDate.value = maxDate_;
          minDate.value = minDate_;
          if (!close2 || showTime.value)
            return;
          handleRangeConfirm();
        };
        const minTimePickerVisible = ref(false);
        const maxTimePickerVisible = ref(false);
        const handleMinTimeClose = () => {
          minTimePickerVisible.value = false;
        };
        const handleMaxTimeClose = () => {
          maxTimePickerVisible.value = false;
        };
        const handleDateInput = (value, type2) => {
          dateUserInput.value[type2] = value;
          const parsedValueD = dayjs(value, dateFormat.value).locale(lang.value);
          if (parsedValueD.isValid()) {
            if (disabledDate2 && disabledDate2(parsedValueD.toDate())) {
              return;
            }
            if (type2 === "min") {
              leftDate.value = parsedValueD;
              minDate.value = (minDate.value || leftDate.value).year(parsedValueD.year()).month(parsedValueD.month()).date(parsedValueD.date());
              if (!props.unlinkPanels) {
                rightDate.value = parsedValueD.add(1, "month");
                maxDate.value = minDate.value.add(1, "month");
              }
            } else {
              rightDate.value = parsedValueD;
              maxDate.value = (maxDate.value || rightDate.value).year(parsedValueD.year()).month(parsedValueD.month()).date(parsedValueD.date());
              if (!props.unlinkPanels) {
                leftDate.value = parsedValueD.subtract(1, "month");
                minDate.value = maxDate.value.subtract(1, "month");
              }
            }
          }
        };
        const handleDateChange = (_2, type2) => {
          dateUserInput.value[type2] = null;
        };
        const handleTimeInput = (value, type2) => {
          timeUserInput.value[type2] = value;
          const parsedValueD = dayjs(value, timeFormat.value).locale(lang.value);
          if (parsedValueD.isValid()) {
            if (type2 === "min") {
              minTimePickerVisible.value = true;
              minDate.value = (minDate.value || leftDate.value).hour(parsedValueD.hour()).minute(parsedValueD.minute()).second(parsedValueD.second());
              if (!maxDate.value || maxDate.value.isBefore(minDate.value)) {
                maxDate.value = minDate.value;
              }
            } else {
              maxTimePickerVisible.value = true;
              maxDate.value = (maxDate.value || rightDate.value).hour(parsedValueD.hour()).minute(parsedValueD.minute()).second(parsedValueD.second());
              rightDate.value = maxDate.value;
              if (maxDate.value && maxDate.value.isBefore(minDate.value)) {
                minDate.value = maxDate.value;
              }
            }
          }
        };
        const handleTimeChange = (value, type2) => {
          timeUserInput.value[type2] = null;
          if (type2 === "min") {
            leftDate.value = minDate.value;
            minTimePickerVisible.value = false;
          } else {
            rightDate.value = maxDate.value;
            maxTimePickerVisible.value = false;
          }
        };
        const handleMinTimePick = (value, visible, first) => {
          if (timeUserInput.value.min)
            return;
          if (value) {
            leftDate.value = value;
            minDate.value = (minDate.value || leftDate.value).hour(value.hour()).minute(value.minute()).second(value.second());
          }
          if (!first) {
            minTimePickerVisible.value = visible;
          }
          if (!maxDate.value || maxDate.value.isBefore(minDate.value)) {
            maxDate.value = minDate.value;
            rightDate.value = value;
          }
        };
        const handleMaxTimePick = (value, visible, first) => {
          if (timeUserInput.value.max)
            return;
          if (value) {
            rightDate.value = value;
            maxDate.value = (maxDate.value || rightDate.value).hour(value.hour()).minute(value.minute()).second(value.second());
          }
          if (!first) {
            maxTimePickerVisible.value = visible;
          }
          if (maxDate.value && maxDate.value.isBefore(minDate.value)) {
            minDate.value = maxDate.value;
          }
        };
        const handleClear = () => {
          leftDate.value = getDefaultValue(unref(defaultValue), {
            lang: unref(lang),
            unit: "month",
            unlinkPanels: props.unlinkPanels
          })[0];
          rightDate.value = leftDate.value.add(1, "month");
          emit2("pick", null);
        };
        const formatToString = (value) => {
          return isArray$6(value) ? value.map((_2) => _2.format(format2)) : value.format(format2);
        };
        const parseUserInput = (value) => {
          return isArray$6(value) ? value.map((_2) => dayjs(_2, format2).locale(lang.value)) : dayjs(value, format2).locale(lang.value);
        };
        function onParsedValueChanged(minDate2, maxDate2) {
          if (props.unlinkPanels && maxDate2) {
            const minDateYear = (minDate2 == null ? void 0 : minDate2.year()) || 0;
            const minDateMonth = (minDate2 == null ? void 0 : minDate2.month()) || 0;
            const maxDateYear = maxDate2.year();
            const maxDateMonth = maxDate2.month();
            rightDate.value = minDateYear === maxDateYear && minDateMonth === maxDateMonth ? maxDate2.add(1, unit) : maxDate2;
          } else {
            rightDate.value = leftDate.value.add(1, unit);
            if (maxDate2) {
              rightDate.value = rightDate.value.hour(maxDate2.hour()).minute(maxDate2.minute()).second(maxDate2.second());
            }
          }
        }
        emit2("set-picker-option", ["isValidValue", isValidRange]);
        emit2("set-picker-option", ["parseUserInput", parseUserInput]);
        emit2("set-picker-option", ["formatToString", formatToString]);
        emit2("set-picker-option", ["handleClear", handleClear]);
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            class: normalizeClass([
              unref(ppNs).b(),
              unref(drpNs).b(),
              {
                "has-sidebar": _ctx.$slots.sidebar || unref(hasShortcuts),
                "has-time": unref(showTime)
              }
            ])
          }, [
            createBaseVNode("div", {
              class: normalizeClass(unref(ppNs).e("body-wrapper"))
            }, [
              renderSlot(_ctx.$slots, "sidebar", {
                class: normalizeClass(unref(ppNs).e("sidebar"))
              }),
              unref(hasShortcuts) ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(unref(ppNs).e("sidebar"))
              }, [
                (openBlock(true), createElementBlock(Fragment, null, renderList(unref(shortcuts), (shortcut, key) => {
                  return openBlock(), createElementBlock("button", {
                    key,
                    type: "button",
                    class: normalizeClass(unref(ppNs).e("shortcut")),
                    onClick: ($event) => unref(handleShortcutClick)(shortcut)
                  }, toDisplayString$1(shortcut.text), 11, _hoisted_1$L);
                }), 128))
              ], 2)) : createCommentVNode("v-if", true),
              createBaseVNode("div", {
                class: normalizeClass(unref(ppNs).e("body"))
              }, [
                unref(showTime) ? (openBlock(), createElementBlock("div", {
                  key: 0,
                  class: normalizeClass(unref(drpNs).e("time-header"))
                }, [
                  createBaseVNode("span", {
                    class: normalizeClass(unref(drpNs).e("editors-wrap"))
                  }, [
                    createBaseVNode("span", {
                      class: normalizeClass(unref(drpNs).e("time-picker-wrap"))
                    }, [
                      createVNode(unref(ElInput), {
                        size: "small",
                        disabled: unref(rangeState).selecting,
                        placeholder: unref(t)("el.datepicker.startDate"),
                        class: normalizeClass(unref(drpNs).e("editor")),
                        "model-value": unref(minVisibleDate),
                        onInput: _cache[0] || (_cache[0] = (val) => handleDateInput(val, "min")),
                        onChange: _cache[1] || (_cache[1] = (val) => handleDateChange(val, "min"))
                      }, null, 8, ["disabled", "placeholder", "class", "model-value"])
                    ], 2),
                    withDirectives((openBlock(), createElementBlock("span", {
                      class: normalizeClass(unref(drpNs).e("time-picker-wrap"))
                    }, [
                      createVNode(unref(ElInput), {
                        size: "small",
                        class: normalizeClass(unref(drpNs).e("editor")),
                        disabled: unref(rangeState).selecting,
                        placeholder: unref(t)("el.datepicker.startTime"),
                        "model-value": unref(minVisibleTime),
                        onFocus: _cache[2] || (_cache[2] = ($event) => minTimePickerVisible.value = true),
                        onInput: _cache[3] || (_cache[3] = (val) => handleTimeInput(val, "min")),
                        onChange: _cache[4] || (_cache[4] = (val) => handleTimeChange(val, "min"))
                      }, null, 8, ["class", "disabled", "placeholder", "model-value"]),
                      createVNode(unref(TimePickPanel), {
                        visible: minTimePickerVisible.value,
                        format: unref(timeFormat),
                        "datetime-role": "start",
                        "time-arrow-control": unref(arrowControl),
                        "parsed-value": leftDate.value,
                        onPick: handleMinTimePick
                      }, null, 8, ["visible", "format", "time-arrow-control", "parsed-value"])
                    ], 2)), [
                      [unref(ClickOutside), handleMinTimeClose]
                    ])
                  ], 2),
                  createBaseVNode("span", null, [
                    createVNode(unref(ElIcon), null, {
                      default: withCtx(() => [
                        createVNode(unref(arrow_right_default))
                      ]),
                      _: 1
                    })
                  ]),
                  createBaseVNode("span", {
                    class: normalizeClass([unref(drpNs).e("editors-wrap"), "is-right"])
                  }, [
                    createBaseVNode("span", {
                      class: normalizeClass(unref(drpNs).e("time-picker-wrap"))
                    }, [
                      createVNode(unref(ElInput), {
                        size: "small",
                        class: normalizeClass(unref(drpNs).e("editor")),
                        disabled: unref(rangeState).selecting,
                        placeholder: unref(t)("el.datepicker.endDate"),
                        "model-value": unref(maxVisibleDate),
                        readonly: !unref(minDate),
                        onInput: _cache[5] || (_cache[5] = (val) => handleDateInput(val, "max")),
                        onChange: _cache[6] || (_cache[6] = (val) => handleDateChange(val, "max"))
                      }, null, 8, ["class", "disabled", "placeholder", "model-value", "readonly"])
                    ], 2),
                    withDirectives((openBlock(), createElementBlock("span", {
                      class: normalizeClass(unref(drpNs).e("time-picker-wrap"))
                    }, [
                      createVNode(unref(ElInput), {
                        size: "small",
                        class: normalizeClass(unref(drpNs).e("editor")),
                        disabled: unref(rangeState).selecting,
                        placeholder: unref(t)("el.datepicker.endTime"),
                        "model-value": unref(maxVisibleTime),
                        readonly: !unref(minDate),
                        onFocus: _cache[7] || (_cache[7] = ($event) => unref(minDate) && (maxTimePickerVisible.value = true)),
                        onInput: _cache[8] || (_cache[8] = (val) => handleTimeInput(val, "max")),
                        onChange: _cache[9] || (_cache[9] = (val) => handleTimeChange(val, "max"))
                      }, null, 8, ["class", "disabled", "placeholder", "model-value", "readonly"]),
                      createVNode(unref(TimePickPanel), {
                        "datetime-role": "end",
                        visible: maxTimePickerVisible.value,
                        format: unref(timeFormat),
                        "time-arrow-control": unref(arrowControl),
                        "parsed-value": rightDate.value,
                        onPick: handleMaxTimePick
                      }, null, 8, ["visible", "format", "time-arrow-control", "parsed-value"])
                    ], 2)), [
                      [unref(ClickOutside), handleMaxTimeClose]
                    ])
                  ], 2)
                ], 2)) : createCommentVNode("v-if", true),
                createBaseVNode("div", {
                  class: normalizeClass([[unref(ppNs).e("content"), unref(drpNs).e("content")], "is-left"])
                }, [
                  createBaseVNode("div", {
                    class: normalizeClass(unref(drpNs).e("header"))
                  }, [
                    createBaseVNode("button", {
                      type: "button",
                      class: normalizeClass([unref(ppNs).e("icon-btn"), "d-arrow-left"]),
                      onClick: leftPrevYear
                    }, [
                      createVNode(unref(ElIcon), null, {
                        default: withCtx(() => [
                          createVNode(unref(d_arrow_left_default))
                        ]),
                        _: 1
                      })
                    ], 2),
                    createBaseVNode("button", {
                      type: "button",
                      class: normalizeClass([unref(ppNs).e("icon-btn"), "arrow-left"]),
                      onClick: leftPrevMonth
                    }, [
                      createVNode(unref(ElIcon), null, {
                        default: withCtx(() => [
                          createVNode(unref(arrow_left_default))
                        ]),
                        _: 1
                      })
                    ], 2),
                    _ctx.unlinkPanels ? (openBlock(), createElementBlock("button", {
                      key: 0,
                      type: "button",
                      disabled: !unref(enableYearArrow),
                      class: normalizeClass([[unref(ppNs).e("icon-btn"), { "is-disabled": !unref(enableYearArrow) }], "d-arrow-right"]),
                      onClick: leftNextYear
                    }, [
                      createVNode(unref(ElIcon), null, {
                        default: withCtx(() => [
                          createVNode(unref(d_arrow_right_default))
                        ]),
                        _: 1
                      })
                    ], 10, _hoisted_2$s)) : createCommentVNode("v-if", true),
                    _ctx.unlinkPanels ? (openBlock(), createElementBlock("button", {
                      key: 1,
                      type: "button",
                      disabled: !unref(enableMonthArrow),
                      class: normalizeClass([[
                        unref(ppNs).e("icon-btn"),
                        { "is-disabled": !unref(enableMonthArrow) }
                      ], "arrow-right"]),
                      onClick: leftNextMonth
                    }, [
                      createVNode(unref(ElIcon), null, {
                        default: withCtx(() => [
                          createVNode(unref(arrow_right_default))
                        ]),
                        _: 1
                      })
                    ], 10, _hoisted_3$c)) : createCommentVNode("v-if", true),
                    createBaseVNode("div", null, toDisplayString$1(unref(leftLabel)), 1)
                  ], 2),
                  createVNode(DateTable, {
                    "selection-mode": "range",
                    date: leftDate.value,
                    "min-date": unref(minDate),
                    "max-date": unref(maxDate),
                    "range-state": unref(rangeState),
                    "disabled-date": unref(disabledDate2),
                    "cell-class-name": unref(cellClassName),
                    onChangerange: unref(handleChangeRange),
                    onPick: handleRangePick,
                    onSelect: unref(onSelect)
                  }, null, 8, ["date", "min-date", "max-date", "range-state", "disabled-date", "cell-class-name", "onChangerange", "onSelect"])
                ], 2),
                createBaseVNode("div", {
                  class: normalizeClass([[unref(ppNs).e("content"), unref(drpNs).e("content")], "is-right"])
                }, [
                  createBaseVNode("div", {
                    class: normalizeClass(unref(drpNs).e("header"))
                  }, [
                    _ctx.unlinkPanels ? (openBlock(), createElementBlock("button", {
                      key: 0,
                      type: "button",
                      disabled: !unref(enableYearArrow),
                      class: normalizeClass([[unref(ppNs).e("icon-btn"), { "is-disabled": !unref(enableYearArrow) }], "d-arrow-left"]),
                      onClick: rightPrevYear
                    }, [
                      createVNode(unref(ElIcon), null, {
                        default: withCtx(() => [
                          createVNode(unref(d_arrow_left_default))
                        ]),
                        _: 1
                      })
                    ], 10, _hoisted_4$8)) : createCommentVNode("v-if", true),
                    _ctx.unlinkPanels ? (openBlock(), createElementBlock("button", {
                      key: 1,
                      type: "button",
                      disabled: !unref(enableMonthArrow),
                      class: normalizeClass([[
                        unref(ppNs).e("icon-btn"),
                        { "is-disabled": !unref(enableMonthArrow) }
                      ], "arrow-left"]),
                      onClick: rightPrevMonth
                    }, [
                      createVNode(unref(ElIcon), null, {
                        default: withCtx(() => [
                          createVNode(unref(arrow_left_default))
                        ]),
                        _: 1
                      })
                    ], 10, _hoisted_5$6)) : createCommentVNode("v-if", true),
                    createBaseVNode("button", {
                      type: "button",
                      class: normalizeClass([unref(ppNs).e("icon-btn"), "d-arrow-right"]),
                      onClick: rightNextYear
                    }, [
                      createVNode(unref(ElIcon), null, {
                        default: withCtx(() => [
                          createVNode(unref(d_arrow_right_default))
                        ]),
                        _: 1
                      })
                    ], 2),
                    createBaseVNode("button", {
                      type: "button",
                      class: normalizeClass([unref(ppNs).e("icon-btn"), "arrow-right"]),
                      onClick: rightNextMonth
                    }, [
                      createVNode(unref(ElIcon), null, {
                        default: withCtx(() => [
                          createVNode(unref(arrow_right_default))
                        ]),
                        _: 1
                      })
                    ], 2),
                    createBaseVNode("div", null, toDisplayString$1(unref(rightLabel)), 1)
                  ], 2),
                  createVNode(DateTable, {
                    "selection-mode": "range",
                    date: rightDate.value,
                    "min-date": unref(minDate),
                    "max-date": unref(maxDate),
                    "range-state": unref(rangeState),
                    "disabled-date": unref(disabledDate2),
                    "cell-class-name": unref(cellClassName),
                    onChangerange: unref(handleChangeRange),
                    onPick: handleRangePick,
                    onSelect: unref(onSelect)
                  }, null, 8, ["date", "min-date", "max-date", "range-state", "disabled-date", "cell-class-name", "onChangerange", "onSelect"])
                ], 2)
              ], 2)
            ], 2),
            unref(showTime) ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(unref(ppNs).e("footer"))
            }, [
              unref(clearable) ? (openBlock(), createBlock(unref(ElButton), {
                key: 0,
                text: "",
                size: "small",
                class: normalizeClass(unref(ppNs).e("link-btn")),
                onClick: handleClear
              }, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString$1(unref(t)("el.datepicker.clear")), 1)
                ]),
                _: 1
              }, 8, ["class"])) : createCommentVNode("v-if", true),
              createVNode(unref(ElButton), {
                plain: "",
                size: "small",
                class: normalizeClass(unref(ppNs).e("link-btn")),
                disabled: unref(btnDisabled),
                onClick: _cache[10] || (_cache[10] = ($event) => unref(handleRangeConfirm)(false))
              }, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString$1(unref(t)("el.datepicker.confirm")), 1)
                ]),
                _: 1
              }, 8, ["class", "disabled"])
            ], 2)) : createCommentVNode("v-if", true)
          ], 2);
        };
      }
    });
    var DateRangePickPanel = /* @__PURE__ */ _export_sfc$1(_sfc_main$1I, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/panel-date-range.vue"]]);
    const panelMonthRangeProps = buildProps({
      ...panelRangeSharedProps
    });
    const panelMonthRangeEmits = ["pick", "set-picker-option"];
    const useMonthRangeHeader = ({
      unlinkPanels,
      leftDate,
      rightDate
    }) => {
      const { t } = useLocale();
      const leftPrevYear = () => {
        leftDate.value = leftDate.value.subtract(1, "year");
        if (!unlinkPanels) {
          rightDate.value = rightDate.value.subtract(1, "year");
        }
      };
      const rightNextYear = () => {
        if (!unlinkPanels) {
          leftDate.value = leftDate.value.add(1, "year");
        }
        rightDate.value = rightDate.value.add(1, "year");
      };
      const leftNextYear = () => {
        leftDate.value = leftDate.value.add(1, "year");
      };
      const rightPrevYear = () => {
        rightDate.value = rightDate.value.subtract(1, "year");
      };
      const leftLabel = computed(() => {
        return `${leftDate.value.year()} ${t("el.datepicker.year")}`;
      });
      const rightLabel = computed(() => {
        return `${rightDate.value.year()} ${t("el.datepicker.year")}`;
      });
      const leftYear = computed(() => {
        return leftDate.value.year();
      });
      const rightYear = computed(() => {
        return rightDate.value.year() === leftDate.value.year() ? leftDate.value.year() + 1 : rightDate.value.year();
      });
      return {
        leftPrevYear,
        rightNextYear,
        leftNextYear,
        rightPrevYear,
        leftLabel,
        rightLabel,
        leftYear,
        rightYear
      };
    };
    const _hoisted_1$K = ["onClick"];
    const _hoisted_2$r = ["disabled"];
    const _hoisted_3$b = ["disabled"];
    const __default__$1c = {
      name: "DatePickerMonthRange"
    };
    const _sfc_main$1H = /* @__PURE__ */ defineComponent({
      ...__default__$1c,
      props: panelMonthRangeProps,
      emits: panelMonthRangeEmits,
      setup(__props, { emit: emit2 }) {
        const props = __props;
        const unit = "year";
        const { lang } = useLocale();
        const pickerBase = inject("EP_PICKER_BASE");
        const { shortcuts, disabledDate: disabledDate2, format: format2 } = pickerBase.props;
        const defaultValue = toRef(pickerBase.props, "defaultValue");
        const leftDate = ref(dayjs().locale(lang.value));
        const rightDate = ref(dayjs().locale(lang.value).add(1, unit));
        const {
          minDate,
          maxDate,
          rangeState,
          ppNs,
          drpNs,
          handleChangeRange,
          handleRangeConfirm,
          handleShortcutClick,
          onSelect
        } = useRangePicker(props, {
          defaultValue,
          leftDate,
          rightDate,
          unit,
          onParsedValueChanged
        });
        const hasShortcuts = computed(() => !!shortcuts.length);
        const {
          leftPrevYear,
          rightNextYear,
          leftNextYear,
          rightPrevYear,
          leftLabel,
          rightLabel,
          leftYear,
          rightYear
        } = useMonthRangeHeader({
          unlinkPanels: toRef(props, "unlinkPanels"),
          leftDate,
          rightDate
        });
        const enableYearArrow = computed(() => {
          return props.unlinkPanels && rightYear.value > leftYear.value + 1;
        });
        const handleRangePick = (val, close2 = true) => {
          const minDate_ = val.minDate;
          const maxDate_ = val.maxDate;
          if (maxDate.value === maxDate_ && minDate.value === minDate_) {
            return;
          }
          maxDate.value = maxDate_;
          minDate.value = minDate_;
          if (!close2)
            return;
          handleRangeConfirm();
        };
        const formatToString = (days) => {
          return days.map((day) => day.format(format2));
        };
        function onParsedValueChanged(minDate2, maxDate2) {
          if (props.unlinkPanels && maxDate2) {
            const minDateYear = (minDate2 == null ? void 0 : minDate2.year()) || 0;
            const maxDateYear = maxDate2.year();
            rightDate.value = minDateYear === maxDateYear ? maxDate2.add(1, unit) : maxDate2;
          } else {
            rightDate.value = leftDate.value.add(1, unit);
          }
        }
        emit2("set-picker-option", ["formatToString", formatToString]);
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            class: normalizeClass([
              unref(ppNs).b(),
              unref(drpNs).b(),
              {
                "has-sidebar": Boolean(_ctx.$slots.sidebar) || unref(hasShortcuts)
              }
            ])
          }, [
            createBaseVNode("div", {
              class: normalizeClass(unref(ppNs).e("body-wrapper"))
            }, [
              renderSlot(_ctx.$slots, "sidebar", {
                class: normalizeClass(unref(ppNs).e("sidebar"))
              }),
              unref(hasShortcuts) ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(unref(ppNs).e("sidebar"))
              }, [
                (openBlock(true), createElementBlock(Fragment, null, renderList(unref(shortcuts), (shortcut, key) => {
                  return openBlock(), createElementBlock("button", {
                    key,
                    type: "button",
                    class: normalizeClass(unref(ppNs).e("shortcut")),
                    onClick: ($event) => unref(handleShortcutClick)(shortcut)
                  }, toDisplayString$1(shortcut.text), 11, _hoisted_1$K);
                }), 128))
              ], 2)) : createCommentVNode("v-if", true),
              createBaseVNode("div", {
                class: normalizeClass(unref(ppNs).e("body"))
              }, [
                createBaseVNode("div", {
                  class: normalizeClass([[unref(ppNs).e("content"), unref(drpNs).e("content")], "is-left"])
                }, [
                  createBaseVNode("div", {
                    class: normalizeClass(unref(drpNs).e("header"))
                  }, [
                    createBaseVNode("button", {
                      type: "button",
                      class: normalizeClass([unref(ppNs).e("icon-btn"), "d-arrow-left"]),
                      onClick: _cache[0] || (_cache[0] = (...args) => unref(leftPrevYear) && unref(leftPrevYear)(...args))
                    }, [
                      createVNode(unref(ElIcon), null, {
                        default: withCtx(() => [
                          createVNode(unref(d_arrow_left_default))
                        ]),
                        _: 1
                      })
                    ], 2),
                    _ctx.unlinkPanels ? (openBlock(), createElementBlock("button", {
                      key: 0,
                      type: "button",
                      disabled: !unref(enableYearArrow),
                      class: normalizeClass([[
                        unref(ppNs).e("icon-btn"),
                        { [unref(ppNs).is("disabled")]: !unref(enableYearArrow) }
                      ], "d-arrow-right"]),
                      onClick: _cache[1] || (_cache[1] = (...args) => unref(leftNextYear) && unref(leftNextYear)(...args))
                    }, [
                      createVNode(unref(ElIcon), null, {
                        default: withCtx(() => [
                          createVNode(unref(d_arrow_right_default))
                        ]),
                        _: 1
                      })
                    ], 10, _hoisted_2$r)) : createCommentVNode("v-if", true),
                    createBaseVNode("div", null, toDisplayString$1(unref(leftLabel)), 1)
                  ], 2),
                  createVNode(MonthTable, {
                    "selection-mode": "range",
                    date: leftDate.value,
                    "min-date": unref(minDate),
                    "max-date": unref(maxDate),
                    "range-state": unref(rangeState),
                    "disabled-date": unref(disabledDate2),
                    onChangerange: unref(handleChangeRange),
                    onPick: handleRangePick,
                    onSelect: unref(onSelect)
                  }, null, 8, ["date", "min-date", "max-date", "range-state", "disabled-date", "onChangerange", "onSelect"])
                ], 2),
                createBaseVNode("div", {
                  class: normalizeClass([[unref(ppNs).e("content"), unref(drpNs).e("content")], "is-right"])
                }, [
                  createBaseVNode("div", {
                    class: normalizeClass(unref(drpNs).e("header"))
                  }, [
                    _ctx.unlinkPanels ? (openBlock(), createElementBlock("button", {
                      key: 0,
                      type: "button",
                      disabled: !unref(enableYearArrow),
                      class: normalizeClass([[unref(ppNs).e("icon-btn"), { "is-disabled": !unref(enableYearArrow) }], "d-arrow-left"]),
                      onClick: _cache[2] || (_cache[2] = (...args) => unref(rightPrevYear) && unref(rightPrevYear)(...args))
                    }, [
                      createVNode(unref(ElIcon), null, {
                        default: withCtx(() => [
                          createVNode(unref(d_arrow_left_default))
                        ]),
                        _: 1
                      })
                    ], 10, _hoisted_3$b)) : createCommentVNode("v-if", true),
                    createBaseVNode("button", {
                      type: "button",
                      class: normalizeClass([unref(ppNs).e("icon-btn"), "d-arrow-right"]),
                      onClick: _cache[3] || (_cache[3] = (...args) => unref(rightNextYear) && unref(rightNextYear)(...args))
                    }, [
                      createVNode(unref(ElIcon), null, {
                        default: withCtx(() => [
                          createVNode(unref(d_arrow_right_default))
                        ]),
                        _: 1
                      })
                    ], 2),
                    createBaseVNode("div", null, toDisplayString$1(unref(rightLabel)), 1)
                  ], 2),
                  createVNode(MonthTable, {
                    "selection-mode": "range",
                    date: rightDate.value,
                    "min-date": unref(minDate),
                    "max-date": unref(maxDate),
                    "range-state": unref(rangeState),
                    "disabled-date": unref(disabledDate2),
                    onChangerange: unref(handleChangeRange),
                    onPick: handleRangePick,
                    onSelect: unref(onSelect)
                  }, null, 8, ["date", "min-date", "max-date", "range-state", "disabled-date", "onChangerange", "onSelect"])
                ], 2)
              ], 2)
            ], 2)
          ], 2);
        };
      }
    });
    var MonthRangePickPanel = /* @__PURE__ */ _export_sfc$1(_sfc_main$1H, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/panel-month-range.vue"]]);
    const getPanel = function(type2) {
      switch (type2) {
        case "daterange":
        case "datetimerange": {
          return DateRangePickPanel;
        }
        case "monthrange": {
          return MonthRangePickPanel;
        }
        default: {
          return DatePickPanel;
        }
      }
    };
    dayjs.extend(localeData);
    dayjs.extend(advancedFormat);
    dayjs.extend(customParseFormat);
    dayjs.extend(weekOfYear);
    dayjs.extend(weekYear);
    dayjs.extend(dayOfYear);
    dayjs.extend(isSameOrAfter);
    dayjs.extend(isSameOrBefore);
    var DatePicker = defineComponent({
      name: "ElDatePicker",
      install: null,
      props: {
        ...timePickerDefaultProps,
        ...datePickerProps
      },
      emits: ["update:modelValue"],
      setup(props, {
        expose,
        emit: emit2,
        slots
      }) {
        const ns2 = useNamespace("picker-panel");
        provide("ElPopperOptions", reactive(toRef(props, "popperOptions")));
        provide(ROOT_PICKER_INJECTION_KEY, {
          slots,
          pickerNs: ns2
        });
        const commonPicker = ref();
        const refProps = {
          focus: (focusStartInput = true) => {
            var _a2;
            (_a2 = commonPicker.value) == null ? void 0 : _a2.focus(focusStartInput);
          }
        };
        expose(refProps);
        const onModelValueUpdated = (val) => {
          emit2("update:modelValue", val);
        };
        return () => {
          var _a2;
          const format2 = (_a2 = props.format) != null ? _a2 : DEFAULT_FORMATS_DATEPICKER[props.type] || DEFAULT_FORMATS_DATE;
          const Component = getPanel(props.type);
          return createVNode(CommonPicker, mergeProps(props, {
            "format": format2,
            "type": props.type,
            "ref": commonPicker,
            "onUpdate:modelValue": onModelValueUpdated
          }), {
            default: (scopedProps) => createVNode(Component, scopedProps, null),
            "range-separator": slots["range-separator"]
          });
        };
      }
    });
    const _DatePicker = DatePicker;
    _DatePicker.install = (app2) => {
      app2.component(_DatePicker.name, _DatePicker);
    };
    const ElDatePicker = _DatePicker;
    const descriptionsKey = "elDescriptions";
    var ElDescriptionsCell = defineComponent({
      name: "ElDescriptionsCell",
      props: {
        cell: {
          type: Object
        },
        tag: {
          type: String
        },
        type: {
          type: String
        }
      },
      setup() {
        const descriptions = inject(descriptionsKey, {});
        return {
          descriptions
        };
      },
      render() {
        var _a2, _b, _c, _d, _e, _f;
        const item = getNormalizedProps(this.cell);
        const { border, direction: direction2 } = this.descriptions;
        const isVertical = direction2 === "vertical";
        const label = ((_c = (_b = (_a2 = this.cell) == null ? void 0 : _a2.children) == null ? void 0 : _b.label) == null ? void 0 : _c.call(_b)) || item.label;
        const content = (_f = (_e = (_d = this.cell) == null ? void 0 : _d.children) == null ? void 0 : _e.default) == null ? void 0 : _f.call(_e);
        const span = item.span;
        const align = item.align ? `is-${item.align}` : "";
        const labelAlign = item.labelAlign ? `is-${item.labelAlign}` : align;
        const className = item.className;
        const labelClassName = item.labelClassName;
        const style2 = {
          width: addUnit(item.width),
          minWidth: addUnit(item.minWidth)
        };
        const ns2 = useNamespace("descriptions");
        switch (this.type) {
          case "label":
            return h$2(this.tag, {
              style: style2,
              class: [
                ns2.e("cell"),
                ns2.e("label"),
                ns2.is("bordered-label", border),
                ns2.is("vertical-label", isVertical),
                labelAlign,
                labelClassName
              ],
              colSpan: isVertical ? span : 1
            }, label);
          case "content":
            return h$2(this.tag, {
              style: style2,
              class: [
                ns2.e("cell"),
                ns2.e("content"),
                ns2.is("bordered-content", border),
                ns2.is("vertical-content", isVertical),
                align,
                className
              ],
              colSpan: isVertical ? span : span * 2 - 1
            }, content);
          default:
            return h$2("td", {
              style: style2,
              class: [ns2.e("cell"), align],
              colSpan: span
            }, [
              h$2("span", {
                class: [ns2.e("label"), labelClassName]
              }, label),
              h$2("span", {
                class: [ns2.e("content"), className]
              }, content)
            ]);
        }
      }
    });
    const descriptionsRowProps = buildProps({
      row: {
        type: Array,
        default: () => []
      }
    });
    const _hoisted_1$J = { key: 1 };
    const __default__$1b = {
      name: "ElDescriptionsRow"
    };
    const _sfc_main$1G = /* @__PURE__ */ defineComponent({
      ...__default__$1b,
      props: descriptionsRowProps,
      setup(__props) {
        const descriptions = inject(descriptionsKey, {});
        return (_ctx, _cache) => {
          return unref(descriptions).direction === "vertical" ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
            createBaseVNode("tr", null, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.row, (cell, index2) => {
                return openBlock(), createBlock(unref(ElDescriptionsCell), {
                  key: `tr1-${index2}`,
                  cell,
                  tag: "th",
                  type: "label"
                }, null, 8, ["cell"]);
              }), 128))
            ]),
            createBaseVNode("tr", null, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.row, (cell, index2) => {
                return openBlock(), createBlock(unref(ElDescriptionsCell), {
                  key: `tr2-${index2}`,
                  cell,
                  tag: "td",
                  type: "content"
                }, null, 8, ["cell"]);
              }), 128))
            ])
          ], 64)) : (openBlock(), createElementBlock("tr", _hoisted_1$J, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.row, (cell, index2) => {
              return openBlock(), createElementBlock(Fragment, {
                key: `tr3-${index2}`
              }, [
                unref(descriptions).border ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                  createVNode(unref(ElDescriptionsCell), {
                    cell,
                    tag: "td",
                    type: "label"
                  }, null, 8, ["cell"]),
                  createVNode(unref(ElDescriptionsCell), {
                    cell,
                    tag: "td",
                    type: "content"
                  }, null, 8, ["cell"])
                ], 64)) : (openBlock(), createBlock(unref(ElDescriptionsCell), {
                  key: 1,
                  cell,
                  tag: "td",
                  type: "both"
                }, null, 8, ["cell"]))
              ], 64);
            }), 128))
          ]));
        };
      }
    });
    var ElDescriptionsRow = /* @__PURE__ */ _export_sfc$1(_sfc_main$1G, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/descriptions/src/descriptions-row.vue"]]);
    const descriptionProps = buildProps({
      border: {
        type: Boolean,
        default: false
      },
      column: {
        type: Number,
        default: 3
      },
      direction: {
        type: String,
        values: ["horizontal", "vertical"],
        default: "horizontal"
      },
      size: useSizeProp,
      title: {
        type: String,
        default: ""
      },
      extra: {
        type: String,
        default: ""
      }
    });
    const __default__$1a = {
      name: "ElDescriptions"
    };
    const _sfc_main$1F = /* @__PURE__ */ defineComponent({
      ...__default__$1a,
      props: descriptionProps,
      setup(__props) {
        const props = __props;
        const ns2 = useNamespace("descriptions");
        const descriptionsSize = useSize();
        const slots = useSlots();
        provide(descriptionsKey, props);
        const descriptionKls = computed(() => [ns2.b(), ns2.m(descriptionsSize.value)]);
        const flattedChildren = (children) => {
          const temp = Array.isArray(children) ? children : [children];
          const res = [];
          temp.forEach((child) => {
            if (Array.isArray(child.children)) {
              res.push(...flattedChildren(child.children));
            } else {
              res.push(child);
            }
          });
          return res;
        };
        const filledNode = (node, span, count, isLast = false) => {
          if (!node.props) {
            node.props = {};
          }
          if (span > count) {
            node.props.span = count;
          }
          if (isLast) {
            node.props.span = span;
          }
          return node;
        };
        const getRows = () => {
          var _a2;
          const children = flattedChildren((_a2 = slots.default) == null ? void 0 : _a2.call(slots)).filter((node) => {
            var _a22;
            return ((_a22 = node == null ? void 0 : node.type) == null ? void 0 : _a22.name) === "ElDescriptionsItem";
          });
          const rows = [];
          let temp = [];
          let count = props.column;
          let totalSpan = 0;
          children.forEach((node, index2) => {
            var _a22;
            const span = ((_a22 = node.props) == null ? void 0 : _a22.span) || 1;
            if (index2 < children.length - 1) {
              totalSpan += span > count ? count : span;
            }
            if (index2 === children.length - 1) {
              const lastSpan = props.column - totalSpan % props.column;
              temp.push(filledNode(node, lastSpan, count, true));
              rows.push(temp);
              return;
            }
            if (span < count) {
              count -= span;
              temp.push(node);
            } else {
              temp.push(filledNode(node, span, count));
              rows.push(temp);
              count = props.column;
              temp = [];
            }
          });
          return rows;
        };
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            class: normalizeClass(unref(descriptionKls))
          }, [
            _ctx.title || _ctx.extra || _ctx.$slots.title || _ctx.$slots.extra ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(unref(ns2).e("header"))
            }, [
              createBaseVNode("div", {
                class: normalizeClass(unref(ns2).e("title"))
              }, [
                renderSlot(_ctx.$slots, "title", {}, () => [
                  createTextVNode(toDisplayString$1(_ctx.title), 1)
                ])
              ], 2),
              createBaseVNode("div", {
                class: normalizeClass(unref(ns2).e("extra"))
              }, [
                renderSlot(_ctx.$slots, "extra", {}, () => [
                  createTextVNode(toDisplayString$1(_ctx.extra), 1)
                ])
              ], 2)
            ], 2)) : createCommentVNode("v-if", true),
            createBaseVNode("div", {
              class: normalizeClass(unref(ns2).e("body"))
            }, [
              createBaseVNode("table", {
                class: normalizeClass([unref(ns2).e("table"), unref(ns2).is("bordered", _ctx.border)])
              }, [
                createBaseVNode("tbody", null, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList(getRows(), (row, index2) => {
                    return openBlock(), createBlock(ElDescriptionsRow, {
                      key: index2,
                      row
                    }, null, 8, ["row"]);
                  }), 128))
                ])
              ], 2)
            ], 2)
          ], 2);
        };
      }
    });
    var Descriptions = /* @__PURE__ */ _export_sfc$1(_sfc_main$1F, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/descriptions/src/description.vue"]]);
    var DescriptionsItem = defineComponent({
      name: "ElDescriptionsItem",
      props: {
        label: {
          type: String,
          default: ""
        },
        span: {
          type: Number,
          default: 1
        },
        width: {
          type: [String, Number],
          default: ""
        },
        minWidth: {
          type: [String, Number],
          default: ""
        },
        align: {
          type: String,
          default: "left"
        },
        labelAlign: {
          type: String,
          default: ""
        },
        className: {
          type: String,
          default: ""
        },
        labelClassName: {
          type: String,
          default: ""
        }
      }
    });
    const ElDescriptions = withInstall(Descriptions, {
      DescriptionsItem
    });
    const ElDescriptionsItem = withNoopInstall(DescriptionsItem);
    const overlayProps = buildProps({
      mask: {
        type: Boolean,
        default: true
      },
      customMaskEvent: {
        type: Boolean,
        default: false
      },
      overlayClass: {
        type: definePropType([
          String,
          Array,
          Object
        ])
      },
      zIndex: {
        type: definePropType([String, Number])
      }
    });
    const overlayEmits = {
      click: (evt) => evt instanceof MouseEvent
    };
    var Overlay$1 = defineComponent({
      name: "ElOverlay",
      props: overlayProps,
      emits: overlayEmits,
      setup(props, { slots, emit: emit2 }) {
        const ns2 = useNamespace("overlay");
        const onMaskClick = (e2) => {
          emit2("click", e2);
        };
        const { onClick, onMousedown, onMouseup } = useSameTarget(props.customMaskEvent ? void 0 : onMaskClick);
        return () => {
          return props.mask ? createVNode("div", {
            class: [ns2.b(), props.overlayClass],
            style: {
              zIndex: props.zIndex
            },
            onClick,
            onMousedown,
            onMouseup
          }, [renderSlot(slots, "default")], PatchFlags.STYLE | PatchFlags.CLASS | PatchFlags.PROPS, ["onClick", "onMouseup", "onMousedown"]) : h$2("div", {
            class: props.overlayClass,
            style: {
              zIndex: props.zIndex,
              position: "fixed",
              top: "0px",
              right: "0px",
              bottom: "0px",
              left: "0px"
            }
          }, [renderSlot(slots, "default")]);
        };
      }
    });
    const ElOverlay = Overlay$1;
    const dialogContentProps = buildProps({
      center: {
        type: Boolean,
        default: false
      },
      closeIcon: {
        type: iconPropType,
        default: ""
      },
      customClass: {
        type: String,
        default: ""
      },
      draggable: {
        type: Boolean,
        default: false
      },
      fullscreen: {
        type: Boolean,
        default: false
      },
      showClose: {
        type: Boolean,
        default: true
      },
      title: {
        type: String,
        default: ""
      }
    });
    const dialogContentEmits = {
      close: () => true
    };
    const _hoisted_1$I = ["aria-label"];
    const _hoisted_2$q = ["id"];
    const __default__$19 = { name: "ElDialogContent" };
    const _sfc_main$1E = /* @__PURE__ */ defineComponent({
      ...__default__$19,
      props: dialogContentProps,
      emits: dialogContentEmits,
      setup(__props) {
        const props = __props;
        const { t } = useLocale();
        const { Close } = CloseComponents;
        const { dialogRef, headerRef, bodyId, ns: ns2, style: style2 } = inject(dialogInjectionKey);
        const { focusTrapRef } = inject(FOCUS_TRAP_INJECTION_KEY);
        const composedDialogRef = composeRefs(focusTrapRef, dialogRef);
        const draggable2 = computed(() => props.draggable);
        useDraggable(dialogRef, headerRef, draggable2);
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            ref: unref(composedDialogRef),
            class: normalizeClass([
              unref(ns2).b(),
              unref(ns2).is("fullscreen", _ctx.fullscreen),
              unref(ns2).is("draggable", unref(draggable2)),
              { [unref(ns2).m("center")]: _ctx.center },
              _ctx.customClass
            ]),
            style: normalizeStyle(unref(style2)),
            tabindex: "-1",
            onClick: _cache[1] || (_cache[1] = withModifiers(() => {
            }, ["stop"]))
          }, [
            createBaseVNode("header", {
              ref_key: "headerRef",
              ref: headerRef,
              class: normalizeClass(unref(ns2).e("header"))
            }, [
              renderSlot(_ctx.$slots, "header", {}, () => [
                createBaseVNode("span", {
                  role: "heading",
                  class: normalizeClass(unref(ns2).e("title"))
                }, toDisplayString$1(_ctx.title), 3)
              ]),
              _ctx.showClose ? (openBlock(), createElementBlock("button", {
                key: 0,
                "aria-label": unref(t)("el.dialog.close"),
                class: normalizeClass(unref(ns2).e("headerbtn")),
                type: "button",
                onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("close"))
              }, [
                createVNode(unref(ElIcon), {
                  class: normalizeClass(unref(ns2).e("close"))
                }, {
                  default: withCtx(() => [
                    (openBlock(), createBlock(resolveDynamicComponent(_ctx.closeIcon || unref(Close))))
                  ]),
                  _: 1
                }, 8, ["class"])
              ], 10, _hoisted_1$I)) : createCommentVNode("v-if", true)
            ], 2),
            createBaseVNode("div", {
              id: unref(bodyId),
              class: normalizeClass(unref(ns2).e("body"))
            }, [
              renderSlot(_ctx.$slots, "default")
            ], 10, _hoisted_2$q),
            _ctx.$slots.footer ? (openBlock(), createElementBlock("footer", {
              key: 0,
              class: normalizeClass(unref(ns2).e("footer"))
            }, [
              renderSlot(_ctx.$slots, "footer")
            ], 2)) : createCommentVNode("v-if", true)
          ], 6);
        };
      }
    });
    var ElDialogContent = /* @__PURE__ */ _export_sfc$1(_sfc_main$1E, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/dialog/src/dialog-content.vue"]]);
    const dialogProps = buildProps({
      ...dialogContentProps,
      appendToBody: {
        type: Boolean,
        default: false
      },
      beforeClose: {
        type: definePropType(Function)
      },
      destroyOnClose: {
        type: Boolean,
        default: false
      },
      closeOnClickModal: {
        type: Boolean,
        default: true
      },
      closeOnPressEscape: {
        type: Boolean,
        default: true
      },
      lockScroll: {
        type: Boolean,
        default: true
      },
      modal: {
        type: Boolean,
        default: true
      },
      openDelay: {
        type: Number,
        default: 0
      },
      closeDelay: {
        type: Number,
        default: 0
      },
      top: {
        type: String
      },
      modelValue: {
        type: Boolean,
        default: false
      },
      modalClass: String,
      width: {
        type: [String, Number]
      },
      zIndex: {
        type: Number
      },
      trapFocus: {
        type: Boolean,
        default: false
      }
    });
    const dialogEmits = {
      open: () => true,
      opened: () => true,
      close: () => true,
      closed: () => true,
      [UPDATE_MODEL_EVENT]: (value) => isBoolean$1(value),
      openAutoFocus: () => true,
      closeAutoFocus: () => true
    };
    const useDialog = (props, targetRef) => {
      const instance = getCurrentInstance();
      const emit2 = instance.emit;
      const { nextZIndex } = useZIndex();
      let lastPosition = "";
      const titleId = useId();
      const bodyId = useId();
      const visible = ref(false);
      const closed = ref(false);
      const rendered = ref(false);
      const zIndex2 = ref(props.zIndex || nextZIndex());
      let openTimer = void 0;
      let closeTimer = void 0;
      const namespace = useGlobalConfig("namespace", defaultNamespace);
      const style2 = computed(() => {
        const style22 = {};
        const varPrefix = `--${namespace.value}-dialog`;
        if (!props.fullscreen) {
          if (props.top) {
            style22[`${varPrefix}-margin-top`] = props.top;
          }
          if (props.width) {
            style22[`${varPrefix}-width`] = addUnit(props.width);
          }
        }
        return style22;
      });
      function afterEnter() {
        emit2("opened");
      }
      function afterLeave() {
        emit2("closed");
        emit2(UPDATE_MODEL_EVENT, false);
        if (props.destroyOnClose) {
          rendered.value = false;
        }
      }
      function beforeLeave() {
        emit2("close");
      }
      function open() {
        closeTimer == null ? void 0 : closeTimer();
        openTimer == null ? void 0 : openTimer();
        if (props.openDelay && props.openDelay > 0) {
          ({ stop: openTimer } = useTimeoutFn(() => doOpen(), props.openDelay));
        } else {
          doOpen();
        }
      }
      function close2() {
        openTimer == null ? void 0 : openTimer();
        closeTimer == null ? void 0 : closeTimer();
        if (props.closeDelay && props.closeDelay > 0) {
          ({ stop: closeTimer } = useTimeoutFn(() => doClose(), props.closeDelay));
        } else {
          doClose();
        }
      }
      function handleClose() {
        function hide(shouldCancel) {
          if (shouldCancel)
            return;
          closed.value = true;
          visible.value = false;
        }
        if (props.beforeClose) {
          props.beforeClose(hide);
        } else {
          close2();
        }
      }
      function onModalClick() {
        if (props.closeOnClickModal) {
          handleClose();
        }
      }
      function doOpen() {
        if (!isClient)
          return;
        visible.value = true;
      }
      function doClose() {
        visible.value = false;
      }
      function onOpenAutoFocus() {
        emit2("openAutoFocus");
      }
      function onCloseAutoFocus() {
        emit2("closeAutoFocus");
      }
      if (props.lockScroll) {
        useLockscreen(visible);
      }
      function onCloseRequested() {
        if (props.closeOnPressEscape) {
          handleClose();
        }
      }
      watch(() => props.modelValue, (val) => {
        if (val) {
          closed.value = false;
          open();
          rendered.value = true;
          emit2("open");
          zIndex2.value = props.zIndex ? zIndex2.value++ : nextZIndex();
          nextTick$1(() => {
            if (targetRef.value) {
              targetRef.value.scrollTop = 0;
            }
          });
        } else {
          if (visible.value) {
            close2();
          }
        }
      });
      watch(() => props.fullscreen, (val) => {
        if (!targetRef.value)
          return;
        if (val) {
          lastPosition = targetRef.value.style.transform;
          targetRef.value.style.transform = "";
        } else {
          targetRef.value.style.transform = lastPosition;
        }
      });
      onMounted(() => {
        if (props.modelValue) {
          visible.value = true;
          rendered.value = true;
          open();
        }
      });
      return {
        afterEnter,
        afterLeave,
        beforeLeave,
        handleClose,
        onModalClick,
        close: close2,
        doClose,
        onOpenAutoFocus,
        onCloseAutoFocus,
        onCloseRequested,
        titleId,
        bodyId,
        closed,
        style: style2,
        rendered,
        visible,
        zIndex: zIndex2
      };
    };
    const _hoisted_1$H = ["aria-label", "aria-labelledby", "aria-describedby"];
    const __default__$18 = {
      name: "ElDialog"
    };
    const _sfc_main$1D = /* @__PURE__ */ defineComponent({
      ...__default__$18,
      props: dialogProps,
      emits: dialogEmits,
      setup(__props, { expose }) {
        const props = __props;
        const slots = useSlots();
        useDeprecated({
          scope: "el-dialog",
          from: "the title slot",
          replacement: "the header slot",
          version: "3.0.0",
          ref: "https://element-plus.org/en-US/component/dialog.html#slots"
        }, computed(() => !!slots.title));
        const ns2 = useNamespace("dialog");
        const dialogRef = ref();
        const headerRef = ref();
        const dialogContentRef = ref();
        const {
          visible,
          titleId,
          bodyId,
          style: style2,
          rendered,
          zIndex: zIndex2,
          afterEnter,
          afterLeave,
          beforeLeave,
          handleClose,
          onModalClick,
          onOpenAutoFocus,
          onCloseAutoFocus,
          onCloseRequested
        } = useDialog(props, dialogRef);
        provide(dialogInjectionKey, {
          dialogRef,
          headerRef,
          bodyId,
          ns: ns2,
          rendered,
          style: style2
        });
        const overlayEvent = useSameTarget(onModalClick);
        const draggable2 = computed(() => props.draggable && !props.fullscreen);
        expose({
          visible,
          dialogContentRef
        });
        return (_ctx, _cache) => {
          return openBlock(), createBlock(Teleport, {
            to: "body",
            disabled: !_ctx.appendToBody
          }, [
            createVNode(Transition, {
              name: "dialog-fade",
              onAfterEnter: unref(afterEnter),
              onAfterLeave: unref(afterLeave),
              onBeforeLeave: unref(beforeLeave),
              persisted: ""
            }, {
              default: withCtx(() => [
                withDirectives(createVNode(unref(ElOverlay), {
                  "custom-mask-event": "",
                  mask: _ctx.modal,
                  "overlay-class": _ctx.modalClass,
                  "z-index": unref(zIndex2)
                }, {
                  default: withCtx(() => [
                    createBaseVNode("div", {
                      role: "dialog",
                      "aria-modal": "true",
                      "aria-label": _ctx.title || void 0,
                      "aria-labelledby": !_ctx.title ? unref(titleId) : void 0,
                      "aria-describedby": unref(bodyId),
                      class: normalizeClass(`${unref(ns2).namespace.value}-overlay-dialog`),
                      onClick: _cache[0] || (_cache[0] = (...args) => unref(overlayEvent).onClick && unref(overlayEvent).onClick(...args)),
                      onMousedown: _cache[1] || (_cache[1] = (...args) => unref(overlayEvent).onMousedown && unref(overlayEvent).onMousedown(...args)),
                      onMouseup: _cache[2] || (_cache[2] = (...args) => unref(overlayEvent).onMouseup && unref(overlayEvent).onMouseup(...args))
                    }, [
                      createVNode(unref(ElFocusTrap), {
                        loop: "",
                        trapped: unref(visible),
                        "focus-start-el": "container",
                        onFocusAfterTrapped: unref(onOpenAutoFocus),
                        onFocusAfterReleased: unref(onCloseAutoFocus),
                        onReleaseRequested: unref(onCloseRequested)
                      }, {
                        default: withCtx(() => [
                          unref(rendered) ? (openBlock(), createBlock(ElDialogContent, {
                            key: 0,
                            ref_key: "dialogContentRef",
                            ref: dialogContentRef,
                            "custom-class": _ctx.customClass,
                            center: _ctx.center,
                            "close-icon": _ctx.closeIcon,
                            draggable: unref(draggable2),
                            fullscreen: _ctx.fullscreen,
                            "show-close": _ctx.showClose,
                            title: _ctx.title,
                            onClose: unref(handleClose)
                          }, createSlots({
                            header: withCtx(() => [
                              !_ctx.$slots.title ? renderSlot(_ctx.$slots, "header", {
                                key: 0,
                                close: unref(handleClose),
                                titleId: unref(titleId),
                                titleClass: unref(ns2).e("title")
                              }) : renderSlot(_ctx.$slots, "title", { key: 1 })
                            ]),
                            default: withCtx(() => [
                              renderSlot(_ctx.$slots, "default")
                            ]),
                            _: 2
                          }, [
                            _ctx.$slots.footer ? {
                              name: "footer",
                              fn: withCtx(() => [
                                renderSlot(_ctx.$slots, "footer")
                              ])
                            } : void 0
                          ]), 1032, ["custom-class", "center", "close-icon", "draggable", "fullscreen", "show-close", "title", "onClose"])) : createCommentVNode("v-if", true)
                        ]),
                        _: 3
                      }, 8, ["trapped", "onFocusAfterTrapped", "onFocusAfterReleased", "onReleaseRequested"])
                    ], 42, _hoisted_1$H)
                  ]),
                  _: 3
                }, 8, ["mask", "overlay-class", "z-index"]), [
                  [vShow, unref(visible)]
                ])
              ]),
              _: 3
            }, 8, ["onAfterEnter", "onAfterLeave", "onBeforeLeave"])
          ], 8, ["disabled"]);
        };
      }
    });
    var Dialog = /* @__PURE__ */ _export_sfc$1(_sfc_main$1D, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/dialog/src/dialog.vue"]]);
    const ElDialog = withInstall(Dialog);
    const dividerProps = buildProps({
      direction: {
        type: String,
        values: ["horizontal", "vertical"],
        default: "horizontal"
      },
      contentPosition: {
        type: String,
        values: ["left", "center", "right"],
        default: "center"
      },
      borderStyle: {
        type: definePropType(String),
        default: "solid"
      }
    });
    const __default__$17 = {
      name: "ElDivider"
    };
    const _sfc_main$1C = /* @__PURE__ */ defineComponent({
      ...__default__$17,
      props: dividerProps,
      setup(__props) {
        const props = __props;
        const ns2 = useNamespace("divider");
        const dividerStyle = computed(() => {
          return ns2.cssVar({
            "border-style": props.borderStyle
          });
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            class: normalizeClass([unref(ns2).b(), unref(ns2).m(_ctx.direction)]),
            style: normalizeStyle(unref(dividerStyle)),
            role: "separator"
          }, [
            _ctx.$slots.default && _ctx.direction !== "vertical" ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass([unref(ns2).e("text"), unref(ns2).is(_ctx.contentPosition)])
            }, [
              renderSlot(_ctx.$slots, "default")
            ], 2)) : createCommentVNode("v-if", true)
          ], 6);
        };
      }
    });
    var Divider = /* @__PURE__ */ _export_sfc$1(_sfc_main$1C, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/divider/src/divider.vue"]]);
    const ElDivider = withInstall(Divider);
    const drawerProps = buildProps({
      ...dialogProps,
      direction: {
        type: String,
        default: "rtl",
        values: ["ltr", "rtl", "ttb", "btt"]
      },
      size: {
        type: [String, Number],
        default: "30%"
      },
      withHeader: {
        type: Boolean,
        default: true
      },
      modalFade: {
        type: Boolean,
        default: true
      }
    });
    const drawerEmits = dialogEmits;
    const _sfc_main$1B = defineComponent({
      name: "ElDrawer",
      components: {
        ElOverlay,
        ElFocusTrap,
        ElIcon,
        Close: close_default
      },
      props: drawerProps,
      emits: drawerEmits,
      setup(props, { slots }) {
        useDeprecated({
          scope: "el-drawer",
          from: "the title slot",
          replacement: "the header slot",
          version: "3.0.0",
          ref: "https://element-plus.org/en-US/component/drawer.html#slots"
        }, computed(() => !!slots.title));
        const drawerRef = ref();
        const focusStartRef = ref();
        const ns2 = useNamespace("drawer");
        const { t } = useLocale();
        const isHorizontal2 = computed(() => props.direction === "rtl" || props.direction === "ltr");
        const drawerSize = computed(() => addUnit(props.size));
        return {
          ...useDialog(props, drawerRef),
          drawerRef,
          focusStartRef,
          isHorizontal: isHorizontal2,
          drawerSize,
          ns: ns2,
          t
        };
      }
    });
    const _hoisted_1$G = ["aria-label", "aria-labelledby", "aria-describedby"];
    const _hoisted_2$p = ["id"];
    const _hoisted_3$a = ["aria-label"];
    const _hoisted_4$7 = ["id"];
    function _sfc_render$s(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_close = resolveComponent("close");
      const _component_el_icon = resolveComponent("el-icon");
      const _component_el_focus_trap = resolveComponent("el-focus-trap");
      const _component_el_overlay = resolveComponent("el-overlay");
      return openBlock(), createBlock(Teleport, {
        to: "body",
        disabled: !_ctx.appendToBody
      }, [
        createVNode(Transition, {
          name: _ctx.ns.b("fade"),
          onAfterEnter: _ctx.afterEnter,
          onAfterLeave: _ctx.afterLeave,
          onBeforeLeave: _ctx.beforeLeave,
          persisted: ""
        }, {
          default: withCtx(() => [
            withDirectives(createVNode(_component_el_overlay, {
              mask: _ctx.modal,
              "overlay-class": _ctx.modalClass,
              "z-index": _ctx.zIndex,
              onClick: _ctx.onModalClick
            }, {
              default: withCtx(() => [
                createVNode(_component_el_focus_trap, {
                  loop: "",
                  trapped: _ctx.visible,
                  "focus-trap-el": _ctx.drawerRef,
                  "focus-start-el": _ctx.focusStartRef,
                  onReleaseRequested: _ctx.onCloseRequested
                }, {
                  default: withCtx(() => [
                    createBaseVNode("div", {
                      ref: "drawerRef",
                      "aria-modal": "true",
                      "aria-label": _ctx.title || void 0,
                      "aria-labelledby": !_ctx.title ? _ctx.titleId : void 0,
                      "aria-describedby": _ctx.bodyId,
                      class: normalizeClass([_ctx.ns.b(), _ctx.direction, _ctx.visible && "open", _ctx.customClass]),
                      style: normalizeStyle(_ctx.isHorizontal ? "width: " + _ctx.drawerSize : "height: " + _ctx.drawerSize),
                      role: "dialog",
                      onClick: _cache[1] || (_cache[1] = withModifiers(() => {
                      }, ["stop"]))
                    }, [
                      createBaseVNode("span", {
                        ref: "focusStartRef",
                        class: normalizeClass(_ctx.ns.e("sr-focus")),
                        tabindex: "-1"
                      }, null, 2),
                      _ctx.withHeader ? (openBlock(), createElementBlock("header", {
                        key: 0,
                        class: normalizeClass(_ctx.ns.e("header"))
                      }, [
                        !_ctx.$slots.title ? renderSlot(_ctx.$slots, "header", {
                          key: 0,
                          close: _ctx.handleClose,
                          titleId: _ctx.titleId,
                          titleClass: _ctx.ns.e("title")
                        }, () => [
                          !_ctx.$slots.title ? (openBlock(), createElementBlock("span", {
                            key: 0,
                            id: _ctx.titleId,
                            role: "heading",
                            class: normalizeClass(_ctx.ns.e("title"))
                          }, toDisplayString$1(_ctx.title), 11, _hoisted_2$p)) : createCommentVNode("v-if", true)
                        ]) : renderSlot(_ctx.$slots, "title", { key: 1 }, () => [
                          createCommentVNode(" DEPRECATED SLOT ")
                        ]),
                        _ctx.showClose ? (openBlock(), createElementBlock("button", {
                          key: 2,
                          "aria-label": _ctx.t("el.drawer.close"),
                          class: normalizeClass(_ctx.ns.e("close-btn")),
                          type: "button",
                          onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClose && _ctx.handleClose(...args))
                        }, [
                          createVNode(_component_el_icon, {
                            class: normalizeClass(_ctx.ns.e("close"))
                          }, {
                            default: withCtx(() => [
                              createVNode(_component_close)
                            ]),
                            _: 1
                          }, 8, ["class"])
                        ], 10, _hoisted_3$a)) : createCommentVNode("v-if", true)
                      ], 2)) : createCommentVNode("v-if", true),
                      _ctx.rendered ? (openBlock(), createElementBlock("div", {
                        key: 1,
                        id: _ctx.bodyId,
                        class: normalizeClass(_ctx.ns.e("body"))
                      }, [
                        renderSlot(_ctx.$slots, "default")
                      ], 10, _hoisted_4$7)) : createCommentVNode("v-if", true),
                      _ctx.$slots.footer ? (openBlock(), createElementBlock("div", {
                        key: 2,
                        class: normalizeClass(_ctx.ns.e("footer"))
                      }, [
                        renderSlot(_ctx.$slots, "footer")
                      ], 2)) : createCommentVNode("v-if", true)
                    ], 14, _hoisted_1$G)
                  ]),
                  _: 3
                }, 8, ["trapped", "focus-trap-el", "focus-start-el", "onReleaseRequested"])
              ]),
              _: 3
            }, 8, ["mask", "overlay-class", "z-index", "onClick"]), [
              [vShow, _ctx.visible]
            ])
          ]),
          _: 3
        }, 8, ["name", "onAfterEnter", "onAfterLeave", "onBeforeLeave"])
      ], 8, ["disabled"]);
    }
    var Drawer = /* @__PURE__ */ _export_sfc$1(_sfc_main$1B, [["render", _sfc_render$s], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/drawer/src/drawer.vue"]]);
    const ElDrawer = withInstall(Drawer);
    const _sfc_main$1A = {
      inheritAttrs: false
    };
    function _sfc_render$r(_ctx, _cache, $props, $setup, $data, $options) {
      return renderSlot(_ctx.$slots, "default");
    }
    var Collection$1 = /* @__PURE__ */ _export_sfc$1(_sfc_main$1A, [["render", _sfc_render$r], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/collection/src/collection.vue"]]);
    const _sfc_main$1z = {
      name: "ElCollectionItem",
      inheritAttrs: false
    };
    function _sfc_render$q(_ctx, _cache, $props, $setup, $data, $options) {
      return renderSlot(_ctx.$slots, "default");
    }
    var CollectionItem = /* @__PURE__ */ _export_sfc$1(_sfc_main$1z, [["render", _sfc_render$q], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/collection/src/collection-item.vue"]]);
    const COLLECTION_ITEM_SIGN = `data-el-collection-item`;
    const createCollectionWithScope = (name) => {
      const COLLECTION_NAME = `El${name}Collection`;
      const COLLECTION_ITEM_NAME = `${COLLECTION_NAME}Item`;
      const COLLECTION_INJECTION_KEY2 = Symbol(COLLECTION_NAME);
      const COLLECTION_ITEM_INJECTION_KEY2 = Symbol(COLLECTION_ITEM_NAME);
      const ElCollection2 = {
        ...Collection$1,
        name: COLLECTION_NAME,
        setup() {
          const collectionRef = ref(null);
          const itemMap = /* @__PURE__ */ new Map();
          const getItems = () => {
            const collectionEl = unref(collectionRef);
            if (!collectionEl)
              return [];
            const orderedNodes = Array.from(collectionEl.querySelectorAll(`[${COLLECTION_ITEM_SIGN}]`));
            const items = [...itemMap.values()];
            return items.sort((a2, b2) => orderedNodes.indexOf(a2.ref) - orderedNodes.indexOf(b2.ref));
          };
          provide(COLLECTION_INJECTION_KEY2, {
            itemMap,
            getItems,
            collectionRef
          });
        }
      };
      const ElCollectionItem2 = {
        ...CollectionItem,
        name: COLLECTION_ITEM_NAME,
        setup(_2, { attrs }) {
          const collectionItemRef = ref(null);
          const collectionInjection = inject(COLLECTION_INJECTION_KEY2, void 0);
          provide(COLLECTION_ITEM_INJECTION_KEY2, {
            collectionItemRef
          });
          onMounted(() => {
            const collectionItemEl = unref(collectionItemRef);
            if (collectionItemEl) {
              collectionInjection.itemMap.set(collectionItemEl, {
                ref: collectionItemEl,
                ...attrs
              });
            }
          });
          onBeforeUnmount(() => {
            const collectionItemEl = unref(collectionItemRef);
            collectionInjection.itemMap.delete(collectionItemEl);
          });
        }
      };
      return {
        COLLECTION_INJECTION_KEY: COLLECTION_INJECTION_KEY2,
        COLLECTION_ITEM_INJECTION_KEY: COLLECTION_ITEM_INJECTION_KEY2,
        ElCollection: ElCollection2,
        ElCollectionItem: ElCollectionItem2
      };
    };
    const rovingFocusGroupProps = buildProps({
      style: { type: definePropType([String, Array, Object]) },
      currentTabId: {
        type: definePropType(String)
      },
      defaultCurrentTabId: String,
      loop: Boolean,
      dir: {
        type: String,
        values: ["ltr", "rtl"],
        default: "ltr"
      },
      orientation: {
        type: definePropType(String)
      },
      onBlur: Function,
      onFocus: Function,
      onMousedown: Function
    });
    const {
      ElCollection: ElCollection$1,
      ElCollectionItem: ElCollectionItem$1,
      COLLECTION_INJECTION_KEY: COLLECTION_INJECTION_KEY$1,
      COLLECTION_ITEM_INJECTION_KEY: COLLECTION_ITEM_INJECTION_KEY$1
    } = createCollectionWithScope("RovingFocusGroup");
    const ROVING_FOCUS_GROUP_INJECTION_KEY = Symbol("elRovingFocusGroup");
    const ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY = Symbol("elRovingFocusGroupItem");
    const MAP_KEY_TO_FOCUS_INTENT = {
      ArrowLeft: "prev",
      ArrowUp: "prev",
      ArrowRight: "next",
      ArrowDown: "next",
      PageUp: "first",
      Home: "first",
      PageDown: "last",
      End: "last"
    };
    const getDirectionAwareKey = (key, dir) => {
      if (dir !== "rtl")
        return key;
      switch (key) {
        case EVENT_CODE.right:
          return EVENT_CODE.left;
        case EVENT_CODE.left:
          return EVENT_CODE.right;
        default:
          return key;
      }
    };
    const getFocusIntent = (event, orientation, dir) => {
      const key = getDirectionAwareKey(event.key, dir);
      if (orientation === "vertical" && [EVENT_CODE.left, EVENT_CODE.right].includes(key))
        return void 0;
      if (orientation === "horizontal" && [EVENT_CODE.up, EVENT_CODE.down].includes(key))
        return void 0;
      return MAP_KEY_TO_FOCUS_INTENT[key];
    };
    const reorderArray = (array2, atIdx) => {
      return array2.map((_2, idx) => array2[(idx + atIdx) % array2.length]);
    };
    const focusFirst = (elements) => {
      const { activeElement: prevActive } = document;
      for (const element of elements) {
        if (element === prevActive)
          return;
        element.focus();
        if (prevActive !== document.activeElement)
          return;
      }
    };
    const CURRENT_TAB_ID_CHANGE_EVT = "currentTabIdChange";
    const ENTRY_FOCUS_EVT = "rovingFocusGroup.entryFocus";
    const EVT_OPTS = { bubbles: false, cancelable: true };
    const _sfc_main$1y = defineComponent({
      name: "ElRovingFocusGroupImpl",
      inheritAttrs: false,
      props: rovingFocusGroupProps,
      emits: [CURRENT_TAB_ID_CHANGE_EVT, "entryFocus"],
      setup(props, { emit: emit2 }) {
        var _a2;
        const currentTabbedId = ref((_a2 = props.currentTabId || props.defaultCurrentTabId) != null ? _a2 : null);
        const isBackingOut = ref(false);
        const isClickFocus = ref(false);
        const rovingFocusGroupRef = ref(null);
        const { getItems } = inject(COLLECTION_INJECTION_KEY$1, void 0);
        const rovingFocusGroupRootStyle = computed(() => {
          return [
            {
              outline: "none"
            },
            props.style
          ];
        });
        const onItemFocus = (tabbedId) => {
          emit2(CURRENT_TAB_ID_CHANGE_EVT, tabbedId);
        };
        const onItemShiftTab = () => {
          isBackingOut.value = true;
        };
        const onMousedown = composeEventHandlers((e2) => {
          var _a22;
          (_a22 = props.onMousedown) == null ? void 0 : _a22.call(props, e2);
        }, () => {
          isClickFocus.value = true;
        });
        const onFocus = composeEventHandlers((e2) => {
          var _a22;
          (_a22 = props.onFocus) == null ? void 0 : _a22.call(props, e2);
        }, (e2) => {
          const isKeyboardFocus = !unref(isClickFocus);
          const { target, currentTarget } = e2;
          if (target === currentTarget && isKeyboardFocus && !unref(isBackingOut)) {
            const entryFocusEvt = new Event(ENTRY_FOCUS_EVT, EVT_OPTS);
            currentTarget == null ? void 0 : currentTarget.dispatchEvent(entryFocusEvt);
            if (!entryFocusEvt.defaultPrevented) {
              const items = getItems().filter((item) => item.focusable);
              const activeItem = items.find((item) => item.active);
              const currentItem = items.find((item) => item.id === unref(currentTabbedId));
              const candidates = [activeItem, currentItem, ...items].filter(Boolean);
              const candidateNodes = candidates.map((item) => item.ref);
              focusFirst(candidateNodes);
            }
          }
          isClickFocus.value = false;
        });
        const onBlur = composeEventHandlers((e2) => {
          var _a22;
          (_a22 = props.onBlur) == null ? void 0 : _a22.call(props, e2);
        }, () => {
          isBackingOut.value = false;
        });
        const handleEntryFocus = (...args) => {
          emit2("entryFocus", ...args);
        };
        provide(ROVING_FOCUS_GROUP_INJECTION_KEY, {
          currentTabbedId: readonly(currentTabbedId),
          loop: toRef(props, "loop"),
          tabIndex: computed(() => {
            return unref(isBackingOut) ? -1 : 0;
          }),
          rovingFocusGroupRef,
          rovingFocusGroupRootStyle,
          orientation: toRef(props, "orientation"),
          dir: toRef(props, "dir"),
          onItemFocus,
          onItemShiftTab,
          onBlur,
          onFocus,
          onMousedown
        });
        watch(() => props.currentTabId, (val) => {
          currentTabbedId.value = val != null ? val : null;
        });
        useEventListener(rovingFocusGroupRef, ENTRY_FOCUS_EVT, handleEntryFocus);
      }
    });
    function _sfc_render$p(_ctx, _cache, $props, $setup, $data, $options) {
      return renderSlot(_ctx.$slots, "default");
    }
    var ElRovingFocusGroupImpl = /* @__PURE__ */ _export_sfc$1(_sfc_main$1y, [["render", _sfc_render$p], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/roving-focus-group/src/roving-focus-group-impl.vue"]]);
    const _sfc_main$1x = defineComponent({
      name: "ElRovingFocusGroup",
      components: {
        ElFocusGroupCollection: ElCollection$1,
        ElRovingFocusGroupImpl
      }
    });
    function _sfc_render$o(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_el_roving_focus_group_impl = resolveComponent("el-roving-focus-group-impl");
      const _component_el_focus_group_collection = resolveComponent("el-focus-group-collection");
      return openBlock(), createBlock(_component_el_focus_group_collection, null, {
        default: withCtx(() => [
          createVNode(_component_el_roving_focus_group_impl, normalizeProps(guardReactiveProps(_ctx.$attrs)), {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          }, 16)
        ]),
        _: 3
      });
    }
    var ElRovingFocusGroup = /* @__PURE__ */ _export_sfc$1(_sfc_main$1x, [["render", _sfc_render$o], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/roving-focus-group/src/roving-focus-group.vue"]]);
    const _sfc_main$1w = defineComponent({
      components: {
        ElRovingFocusCollectionItem: ElCollectionItem$1
      },
      props: {
        focusable: {
          type: Boolean,
          default: true
        },
        active: {
          type: Boolean,
          default: false
        }
      },
      emits: ["mousedown", "focus", "keydown"],
      setup(props, { emit: emit2 }) {
        const { currentTabbedId, loop, onItemFocus, onItemShiftTab } = inject(ROVING_FOCUS_GROUP_INJECTION_KEY, void 0);
        const { getItems } = inject(COLLECTION_INJECTION_KEY$1, void 0);
        const id2 = useId();
        const rovingFocusGroupItemRef = ref(null);
        const handleMousedown = composeEventHandlers((e2) => {
          emit2("mousedown", e2);
        }, (e2) => {
          if (!props.focusable) {
            e2.preventDefault();
          } else {
            onItemFocus(unref(id2));
          }
        });
        const handleFocus = composeEventHandlers((e2) => {
          emit2("focus", e2);
        }, () => {
          onItemFocus(unref(id2));
        });
        const handleKeydown = composeEventHandlers((e2) => {
          emit2("keydown", e2);
        }, (e2) => {
          const { key, shiftKey, target, currentTarget } = e2;
          if (key === EVENT_CODE.tab && shiftKey) {
            onItemShiftTab();
            return;
          }
          if (target !== currentTarget)
            return;
          const focusIntent = getFocusIntent(e2);
          if (focusIntent) {
            e2.preventDefault();
            const items = getItems().filter((item) => item.focusable);
            let elements = items.map((item) => item.ref);
            switch (focusIntent) {
              case "last": {
                elements.reverse();
                break;
              }
              case "prev":
              case "next": {
                if (focusIntent === "prev") {
                  elements.reverse();
                }
                const currentIdx = elements.indexOf(currentTarget);
                elements = loop.value ? reorderArray(elements, currentIdx + 1) : elements.slice(currentIdx + 1);
                break;
              }
            }
            nextTick$1(() => {
              focusFirst(elements);
            });
          }
        });
        const isCurrentTab = computed(() => currentTabbedId.value === unref(id2));
        provide(ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY, {
          rovingFocusGroupItemRef,
          tabIndex: computed(() => unref(isCurrentTab) ? 0 : -1),
          handleMousedown,
          handleFocus,
          handleKeydown
        });
        return {
          id: id2,
          handleKeydown,
          handleFocus,
          handleMousedown
        };
      }
    });
    function _sfc_render$n(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_el_roving_focus_collection_item = resolveComponent("el-roving-focus-collection-item");
      return openBlock(), createBlock(_component_el_roving_focus_collection_item, {
        id: _ctx.id,
        focusable: _ctx.focusable,
        active: _ctx.active
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["id", "focusable", "active"]);
    }
    var ElRovingFocusItem = /* @__PURE__ */ _export_sfc$1(_sfc_main$1w, [["render", _sfc_render$n], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/roving-focus-group/src/roving-focus-item.vue"]]);
    const dropdownProps = buildProps({
      trigger: useTooltipTriggerProps.trigger,
      effect: {
        ...useTooltipContentProps.effect,
        default: "light"
      },
      type: {
        type: definePropType(String)
      },
      placement: {
        type: definePropType(String),
        default: "bottom"
      },
      popperOptions: {
        type: definePropType(Object),
        default: () => ({})
      },
      id: String,
      size: {
        type: String,
        default: ""
      },
      splitButton: Boolean,
      hideOnClick: {
        type: Boolean,
        default: true
      },
      loop: {
        type: Boolean,
        default: true
      },
      showTimeout: {
        type: Number,
        default: 150
      },
      hideTimeout: {
        type: Number,
        default: 150
      },
      tabindex: {
        type: definePropType([Number, String]),
        default: 0
      },
      maxHeight: {
        type: definePropType([Number, String]),
        default: ""
      },
      popperClass: {
        type: String,
        default: ""
      },
      disabled: {
        type: Boolean,
        default: false
      },
      role: {
        type: String,
        default: "menu"
      },
      buttonProps: {
        type: definePropType(Object)
      }
    });
    const dropdownItemProps = buildProps({
      command: {
        type: [Object, String, Number],
        default: () => ({})
      },
      disabled: Boolean,
      divided: Boolean,
      textValue: String,
      icon: {
        type: iconPropType
      }
    });
    const dropdownMenuProps = buildProps({
      onKeydown: { type: definePropType(Function) }
    });
    const FIRST_KEYS = [
      EVENT_CODE.down,
      EVENT_CODE.pageDown,
      EVENT_CODE.home
    ];
    const LAST_KEYS = [EVENT_CODE.up, EVENT_CODE.pageUp, EVENT_CODE.end];
    const FIRST_LAST_KEYS = [...FIRST_KEYS, ...LAST_KEYS];
    const {
      ElCollection,
      ElCollectionItem,
      COLLECTION_INJECTION_KEY,
      COLLECTION_ITEM_INJECTION_KEY
    } = createCollectionWithScope("Dropdown");
    const DROPDOWN_INJECTION_KEY = Symbol("elDropdown");
    const { ButtonGroup: ElButtonGroup } = ElButton;
    const _sfc_main$1v = defineComponent({
      name: "ElDropdown",
      components: {
        ElButton,
        ElButtonGroup,
        ElScrollbar,
        ElDropdownCollection: ElCollection,
        ElTooltip,
        ElRovingFocusGroup,
        ElOnlyChild: OnlyChild,
        ElIcon,
        ArrowDown: arrow_down_default
      },
      props: dropdownProps,
      emits: ["visible-change", "click", "command"],
      setup(props, { emit: emit2 }) {
        const _instance = getCurrentInstance();
        const ns2 = useNamespace("dropdown");
        const { t } = useLocale();
        const triggeringElementRef = ref();
        const referenceElementRef = ref();
        const popperRef = ref(null);
        const contentRef = ref(null);
        const scrollbar = ref(null);
        const currentTabId = ref(null);
        const isUsingKeyboard = ref(false);
        const triggerKeys = [EVENT_CODE.enter, EVENT_CODE.space, EVENT_CODE.down];
        const wrapStyle = computed(() => ({
          maxHeight: addUnit(props.maxHeight)
        }));
        const dropdownTriggerKls = computed(() => [ns2.m(dropdownSize.value)]);
        const defaultTriggerId = useId().value;
        const triggerId = computed(() => {
          return props.id || defaultTriggerId;
        });
        function handleClick() {
          handleClose();
        }
        function handleClose() {
          var _a2;
          (_a2 = popperRef.value) == null ? void 0 : _a2.onClose();
        }
        function handleOpen() {
          var _a2;
          (_a2 = popperRef.value) == null ? void 0 : _a2.onOpen();
        }
        const dropdownSize = useSize();
        function commandHandler(...args) {
          emit2("command", ...args);
        }
        function onItemEnter() {
        }
        function onItemLeave() {
          const contentEl = unref(contentRef);
          contentEl == null ? void 0 : contentEl.focus();
          currentTabId.value = null;
        }
        function handleCurrentTabIdChange(id2) {
          currentTabId.value = id2;
        }
        function handleEntryFocus(e2) {
          if (!isUsingKeyboard.value) {
            e2.preventDefault();
            e2.stopImmediatePropagation();
          }
        }
        function handleBeforeShowTooltip() {
          emit2("visible-change", true);
        }
        function handleShowTooltip(event) {
          if ((event == null ? void 0 : event.type) === "keydown") {
            contentRef.value.focus();
          }
        }
        function handleBeforeHideTooltip() {
          emit2("visible-change", false);
        }
        provide(DROPDOWN_INJECTION_KEY, {
          contentRef,
          role: computed(() => props.role),
          triggerId,
          isUsingKeyboard,
          onItemEnter,
          onItemLeave
        });
        provide("elDropdown", {
          instance: _instance,
          dropdownSize,
          handleClick,
          commandHandler,
          trigger: toRef(props, "trigger"),
          hideOnClick: toRef(props, "hideOnClick")
        });
        const onFocusAfterTrapped = (e2) => {
          var _a2, _b;
          e2.preventDefault();
          (_b = (_a2 = contentRef.value) == null ? void 0 : _a2.focus) == null ? void 0 : _b.call(_a2, {
            preventScroll: true
          });
        };
        const handlerMainButtonClick = (event) => {
          emit2("click", event);
        };
        return {
          t,
          ns: ns2,
          scrollbar,
          wrapStyle,
          dropdownTriggerKls,
          dropdownSize,
          triggerId,
          triggerKeys,
          currentTabId,
          handleCurrentTabIdChange,
          handlerMainButtonClick,
          handleEntryFocus,
          handleClose,
          handleOpen,
          handleBeforeShowTooltip,
          handleShowTooltip,
          handleBeforeHideTooltip,
          onFocusAfterTrapped,
          popperRef,
          contentRef,
          triggeringElementRef,
          referenceElementRef
        };
      }
    });
    function _sfc_render$m(_ctx, _cache, $props, $setup, $data, $options) {
      var _a2;
      const _component_el_dropdown_collection = resolveComponent("el-dropdown-collection");
      const _component_el_roving_focus_group = resolveComponent("el-roving-focus-group");
      const _component_el_scrollbar = resolveComponent("el-scrollbar");
      const _component_el_only_child = resolveComponent("el-only-child");
      const _component_el_tooltip = resolveComponent("el-tooltip");
      const _component_el_button = resolveComponent("el-button");
      const _component_arrow_down = resolveComponent("arrow-down");
      const _component_el_icon = resolveComponent("el-icon");
      const _component_el_button_group = resolveComponent("el-button-group");
      return openBlock(), createElementBlock("div", {
        class: normalizeClass([_ctx.ns.b(), _ctx.ns.is("disabled", _ctx.disabled)])
      }, [
        createVNode(_component_el_tooltip, {
          ref: "popperRef",
          role: _ctx.role,
          effect: _ctx.effect,
          "fallback-placements": ["bottom", "top"],
          "popper-options": _ctx.popperOptions,
          "gpu-acceleration": false,
          "hide-after": _ctx.trigger === "hover" ? _ctx.hideTimeout : 0,
          "manual-mode": true,
          placement: _ctx.placement,
          "popper-class": [_ctx.ns.e("popper"), _ctx.popperClass],
          "reference-element": (_a2 = _ctx.referenceElementRef) == null ? void 0 : _a2.$el,
          trigger: _ctx.trigger,
          "trigger-keys": _ctx.triggerKeys,
          "trigger-target-el": _ctx.contentRef,
          "show-after": _ctx.trigger === "hover" ? _ctx.showTimeout : 0,
          "stop-popper-mouse-event": false,
          "virtual-ref": _ctx.triggeringElementRef,
          "virtual-triggering": _ctx.splitButton,
          disabled: _ctx.disabled,
          transition: `${_ctx.ns.namespace.value}-zoom-in-top`,
          teleported: "",
          pure: "",
          persistent: "",
          onBeforeShow: _ctx.handleBeforeShowTooltip,
          onShow: _ctx.handleShowTooltip,
          onBeforeHide: _ctx.handleBeforeHideTooltip
        }, createSlots({
          content: withCtx(() => [
            createVNode(_component_el_scrollbar, {
              ref: "scrollbar",
              "wrap-style": _ctx.wrapStyle,
              tag: "div",
              "view-class": _ctx.ns.e("list")
            }, {
              default: withCtx(() => [
                createVNode(_component_el_roving_focus_group, {
                  loop: _ctx.loop,
                  "current-tab-id": _ctx.currentTabId,
                  orientation: "horizontal",
                  onCurrentTabIdChange: _ctx.handleCurrentTabIdChange,
                  onEntryFocus: _ctx.handleEntryFocus
                }, {
                  default: withCtx(() => [
                    createVNode(_component_el_dropdown_collection, null, {
                      default: withCtx(() => [
                        renderSlot(_ctx.$slots, "dropdown")
                      ]),
                      _: 3
                    })
                  ]),
                  _: 3
                }, 8, ["loop", "current-tab-id", "onCurrentTabIdChange", "onEntryFocus"])
              ]),
              _: 3
            }, 8, ["wrap-style", "view-class"])
          ]),
          _: 2
        }, [
          !_ctx.splitButton ? {
            name: "default",
            fn: withCtx(() => [
              createVNode(_component_el_only_child, {
                id: _ctx.triggerId,
                role: "button",
                tabindex: _ctx.tabindex
              }, {
                default: withCtx(() => [
                  renderSlot(_ctx.$slots, "default")
                ]),
                _: 3
              }, 8, ["id", "tabindex"])
            ])
          } : void 0
        ]), 1032, ["role", "effect", "popper-options", "hide-after", "placement", "popper-class", "reference-element", "trigger", "trigger-keys", "trigger-target-el", "show-after", "virtual-ref", "virtual-triggering", "disabled", "transition", "onBeforeShow", "onShow", "onBeforeHide"]),
        _ctx.splitButton ? (openBlock(), createBlock(_component_el_button_group, { key: 0 }, {
          default: withCtx(() => [
            createVNode(_component_el_button, mergeProps({ ref: "referenceElementRef" }, _ctx.buttonProps, {
              size: _ctx.dropdownSize,
              type: _ctx.type,
              disabled: _ctx.disabled,
              tabindex: _ctx.tabindex,
              onClick: _ctx.handlerMainButtonClick
            }), {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "default")
              ]),
              _: 3
            }, 16, ["size", "type", "disabled", "tabindex", "onClick"]),
            createVNode(_component_el_button, mergeProps({
              id: _ctx.triggerId,
              ref: "triggeringElementRef"
            }, _ctx.buttonProps, {
              role: "button",
              size: _ctx.dropdownSize,
              type: _ctx.type,
              class: _ctx.ns.e("caret-button"),
              disabled: _ctx.disabled,
              tabindex: _ctx.tabindex,
              "aria-label": _ctx.t("el.dropdown.toggleDropdown")
            }), {
              default: withCtx(() => [
                createVNode(_component_el_icon, {
                  class: normalizeClass(_ctx.ns.e("icon"))
                }, {
                  default: withCtx(() => [
                    createVNode(_component_arrow_down)
                  ]),
                  _: 1
                }, 8, ["class"])
              ]),
              _: 1
            }, 16, ["id", "size", "type", "class", "disabled", "tabindex", "aria-label"])
          ]),
          _: 3
        })) : createCommentVNode("v-if", true)
      ], 2);
    }
    var Dropdown = /* @__PURE__ */ _export_sfc$1(_sfc_main$1v, [["render", _sfc_render$m], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/dropdown/src/dropdown.vue"]]);
    const _sfc_main$1u = defineComponent({
      name: "DropdownItemImpl",
      components: {
        ElIcon
      },
      props: dropdownItemProps,
      emits: ["pointermove", "pointerleave", "click", "clickimpl"],
      setup(_2, { emit: emit2 }) {
        const ns2 = useNamespace("dropdown");
        const { role: menuRole } = inject(DROPDOWN_INJECTION_KEY, void 0);
        const { collectionItemRef: dropdownCollectionItemRef } = inject(COLLECTION_ITEM_INJECTION_KEY, void 0);
        const { collectionItemRef: rovingFocusCollectionItemRef } = inject(COLLECTION_ITEM_INJECTION_KEY$1, void 0);
        const {
          rovingFocusGroupItemRef,
          tabIndex,
          handleFocus,
          handleKeydown: handleItemKeydown,
          handleMousedown
        } = inject(ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY, void 0);
        const itemRef = composeRefs(dropdownCollectionItemRef, rovingFocusCollectionItemRef, rovingFocusGroupItemRef);
        const role = computed(() => {
          if (menuRole.value === "menu") {
            return "menuitem";
          } else if (menuRole.value === "navigation") {
            return "link";
          }
          return "button";
        });
        const handleKeydown = composeEventHandlers((e2) => {
          const { code } = e2;
          if (code === EVENT_CODE.enter || code === EVENT_CODE.space) {
            e2.preventDefault();
            e2.stopImmediatePropagation();
            emit2("clickimpl", e2);
            return true;
          }
        }, handleItemKeydown);
        return {
          ns: ns2,
          itemRef,
          dataset: {
            [COLLECTION_ITEM_SIGN]: ""
          },
          role,
          tabIndex,
          handleFocus,
          handleKeydown,
          handleMousedown
        };
      }
    });
    const _hoisted_1$F = ["aria-disabled", "tabindex", "role"];
    function _sfc_render$l(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_el_icon = resolveComponent("el-icon");
      return openBlock(), createElementBlock(Fragment, null, [
        _ctx.divided ? (openBlock(), createElementBlock("li", mergeProps({
          key: 0,
          role: "separator",
          class: _ctx.ns.bem("menu", "item", "divided")
        }, _ctx.$attrs), null, 16)) : createCommentVNode("v-if", true),
        createBaseVNode("li", mergeProps({ ref: _ctx.itemRef }, { ..._ctx.dataset, ..._ctx.$attrs }, {
          "aria-disabled": _ctx.disabled,
          class: [_ctx.ns.be("menu", "item"), _ctx.ns.is("disabled", _ctx.disabled)],
          tabindex: _ctx.tabIndex,
          role: _ctx.role,
          onClick: _cache[0] || (_cache[0] = (e2) => _ctx.$emit("clickimpl", e2)),
          onFocus: _cache[1] || (_cache[1] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),
          onKeydown: _cache[2] || (_cache[2] = (...args) => _ctx.handleKeydown && _ctx.handleKeydown(...args)),
          onMousedown: _cache[3] || (_cache[3] = (...args) => _ctx.handleMousedown && _ctx.handleMousedown(...args)),
          onPointermove: _cache[4] || (_cache[4] = (e2) => _ctx.$emit("pointermove", e2)),
          onPointerleave: _cache[5] || (_cache[5] = (e2) => _ctx.$emit("pointerleave", e2))
        }), [
          _ctx.icon ? (openBlock(), createBlock(_component_el_icon, { key: 0 }, {
            default: withCtx(() => [
              (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))
            ]),
            _: 1
          })) : createCommentVNode("v-if", true),
          renderSlot(_ctx.$slots, "default")
        ], 16, _hoisted_1$F)
      ], 64);
    }
    var ElDropdownItemImpl = /* @__PURE__ */ _export_sfc$1(_sfc_main$1u, [["render", _sfc_render$l], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/dropdown/src/dropdown-item-impl.vue"]]);
    const useDropdown = () => {
      const elDropdown = inject("elDropdown", {});
      const _elDropdownSize = computed(() => elDropdown == null ? void 0 : elDropdown.dropdownSize);
      return {
        elDropdown,
        _elDropdownSize
      };
    };
    const _sfc_main$1t = defineComponent({
      name: "ElDropdownItem",
      components: {
        ElDropdownCollectionItem: ElCollectionItem,
        ElRovingFocusItem,
        ElDropdownItemImpl
      },
      inheritAttrs: false,
      props: dropdownItemProps,
      emits: ["pointermove", "pointerleave", "click"],
      setup(props, { emit: emit2, attrs }) {
        const { elDropdown } = useDropdown();
        const _instance = getCurrentInstance();
        const itemRef = ref(null);
        const textContent = computed(() => {
          var _a2, _b;
          return (_b = (_a2 = unref(itemRef)) == null ? void 0 : _a2.textContent) != null ? _b : "";
        });
        const { onItemEnter, onItemLeave } = inject(DROPDOWN_INJECTION_KEY, void 0);
        const handlePointerMove = composeEventHandlers((e2) => {
          emit2("pointermove", e2);
          return e2.defaultPrevented;
        }, whenMouse((e2) => {
          var _a2;
          if (props.disabled) {
            onItemLeave(e2);
          } else {
            onItemEnter(e2);
            if (!e2.defaultPrevented) {
              (_a2 = e2.currentTarget) == null ? void 0 : _a2.focus();
            }
          }
        }));
        const handlePointerLeave = composeEventHandlers((e2) => {
          emit2("pointerleave", e2);
          return e2.defaultPrevented;
        }, whenMouse((e2) => {
          onItemLeave(e2);
        }));
        const handleClick = composeEventHandlers((e2) => {
          emit2("click", e2);
          return e2.type !== "keydown" && e2.defaultPrevented;
        }, (e2) => {
          var _a2, _b, _c;
          if (props.disabled) {
            e2.stopImmediatePropagation();
            return;
          }
          if ((_a2 = elDropdown == null ? void 0 : elDropdown.hideOnClick) == null ? void 0 : _a2.value) {
            (_b = elDropdown.handleClick) == null ? void 0 : _b.call(elDropdown);
          }
          (_c = elDropdown.commandHandler) == null ? void 0 : _c.call(elDropdown, props.command, _instance, e2);
        });
        const propsAndAttrs = computed(() => {
          return { ...props, ...attrs };
        });
        return {
          handleClick,
          handlePointerMove,
          handlePointerLeave,
          textContent,
          propsAndAttrs
        };
      }
    });
    function _sfc_render$k(_ctx, _cache, $props, $setup, $data, $options) {
      var _a2;
      const _component_el_dropdown_item_impl = resolveComponent("el-dropdown-item-impl");
      const _component_el_roving_focus_item = resolveComponent("el-roving-focus-item");
      const _component_el_dropdown_collection_item = resolveComponent("el-dropdown-collection-item");
      return openBlock(), createBlock(_component_el_dropdown_collection_item, {
        disabled: _ctx.disabled,
        "text-value": (_a2 = _ctx.textValue) != null ? _a2 : _ctx.textContent
      }, {
        default: withCtx(() => [
          createVNode(_component_el_roving_focus_item, {
            focusable: !_ctx.disabled
          }, {
            default: withCtx(() => [
              createVNode(_component_el_dropdown_item_impl, mergeProps(_ctx.propsAndAttrs, {
                onPointerleave: _ctx.handlePointerLeave,
                onPointermove: _ctx.handlePointerMove,
                onClickimpl: _ctx.handleClick
              }), {
                default: withCtx(() => [
                  renderSlot(_ctx.$slots, "default")
                ]),
                _: 3
              }, 16, ["onPointerleave", "onPointermove", "onClickimpl"])
            ]),
            _: 3
          }, 8, ["focusable"])
        ]),
        _: 3
      }, 8, ["disabled", "text-value"]);
    }
    var DropdownItem = /* @__PURE__ */ _export_sfc$1(_sfc_main$1t, [["render", _sfc_render$k], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/dropdown/src/dropdown-item.vue"]]);
    const _sfc_main$1s = defineComponent({
      name: "ElDropdownMenu",
      props: dropdownMenuProps,
      setup(props) {
        const ns2 = useNamespace("dropdown");
        const { _elDropdownSize } = useDropdown();
        const size2 = _elDropdownSize.value;
        const { focusTrapRef, onKeydown } = inject(FOCUS_TRAP_INJECTION_KEY, void 0);
        const { contentRef, role, triggerId } = inject(DROPDOWN_INJECTION_KEY, void 0);
        const { collectionRef: dropdownCollectionRef, getItems } = inject(COLLECTION_INJECTION_KEY, void 0);
        const {
          rovingFocusGroupRef,
          rovingFocusGroupRootStyle,
          tabIndex,
          onBlur,
          onFocus,
          onMousedown
        } = inject(ROVING_FOCUS_GROUP_INJECTION_KEY, void 0);
        const { collectionRef: rovingFocusGroupCollectionRef } = inject(COLLECTION_INJECTION_KEY$1, void 0);
        const dropdownKls = computed(() => {
          return [ns2.b("menu"), ns2.bm("menu", size2 == null ? void 0 : size2.value)];
        });
        const dropdownListWrapperRef = composeRefs(contentRef, dropdownCollectionRef, focusTrapRef, rovingFocusGroupRef, rovingFocusGroupCollectionRef);
        const composedKeydown = composeEventHandlers((e2) => {
          var _a2;
          (_a2 = props.onKeydown) == null ? void 0 : _a2.call(props, e2);
        }, (e2) => {
          const { currentTarget, code, target } = e2;
          currentTarget.contains(target);
          if (EVENT_CODE.tab === code) {
            e2.stopImmediatePropagation();
          }
          e2.preventDefault();
          if (target !== unref(contentRef))
            return;
          if (!FIRST_LAST_KEYS.includes(code))
            return;
          const items = getItems().filter((item) => !item.disabled);
          const targets = items.map((item) => item.ref);
          if (LAST_KEYS.includes(code)) {
            targets.reverse();
          }
          focusFirst(targets);
        });
        const handleKeydown = (e2) => {
          composedKeydown(e2);
          onKeydown(e2);
        };
        return {
          size: size2,
          rovingFocusGroupRootStyle,
          tabIndex,
          dropdownKls,
          role,
          triggerId,
          dropdownListWrapperRef,
          handleKeydown,
          onBlur,
          onFocus,
          onMousedown
        };
      }
    });
    const _hoisted_1$E = ["role", "aria-labelledby"];
    function _sfc_render$j(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("ul", {
        ref: _ctx.dropdownListWrapperRef,
        class: normalizeClass(_ctx.dropdownKls),
        style: normalizeStyle(_ctx.rovingFocusGroupRootStyle),
        tabindex: -1,
        role: _ctx.role,
        "aria-labelledby": _ctx.triggerId,
        onBlur: _cache[0] || (_cache[0] = (...args) => _ctx.onBlur && _ctx.onBlur(...args)),
        onFocus: _cache[1] || (_cache[1] = (...args) => _ctx.onFocus && _ctx.onFocus(...args)),
        onKeydown: _cache[2] || (_cache[2] = (...args) => _ctx.handleKeydown && _ctx.handleKeydown(...args)),
        onMousedown: _cache[3] || (_cache[3] = (...args) => _ctx.onMousedown && _ctx.onMousedown(...args))
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 46, _hoisted_1$E);
    }
    var DropdownMenu = /* @__PURE__ */ _export_sfc$1(_sfc_main$1s, [["render", _sfc_render$j], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/dropdown/src/dropdown-menu.vue"]]);
    const ElDropdown = withInstall(Dropdown, {
      DropdownItem,
      DropdownMenu
    });
    const ElDropdownItem = withNoopInstall(DropdownItem);
    const ElDropdownMenu = withNoopInstall(DropdownMenu);
    let id = 0;
    const _sfc_main$1r = defineComponent({
      name: "ImgEmpty",
      setup() {
        const ns2 = useNamespace("empty");
        return {
          ns: ns2,
          id: ++id
        };
      }
    });
    const _hoisted_1$D = {
      viewBox: "0 0 79 86",
      version: "1.1",
      xmlns: "http://www.w3.org/2000/svg",
      "xmlns:xlink": "http://www.w3.org/1999/xlink"
    };
    const _hoisted_2$o = ["id"];
    const _hoisted_3$9 = ["stop-color"];
    const _hoisted_4$6 = ["stop-color"];
    const _hoisted_5$5 = ["id"];
    const _hoisted_6$2 = ["stop-color"];
    const _hoisted_7 = ["stop-color"];
    const _hoisted_8 = ["id"];
    const _hoisted_9 = {
      id: "Illustrations",
      stroke: "none",
      "stroke-width": "1",
      fill: "none",
      "fill-rule": "evenodd"
    };
    const _hoisted_10 = {
      id: "B-type",
      transform: "translate(-1268.000000, -535.000000)"
    };
    const _hoisted_11 = {
      id: "Group-2",
      transform: "translate(1268.000000, 535.000000)"
    };
    const _hoisted_12 = ["fill"];
    const _hoisted_13 = ["fill"];
    const _hoisted_14 = {
      id: "Group-Copy",
      transform: "translate(34.500000, 31.500000) scale(-1, 1) rotate(-25.000000) translate(-34.500000, -31.500000) translate(7.000000, 10.000000)"
    };
    const _hoisted_15 = ["fill"];
    const _hoisted_16 = ["fill"];
    const _hoisted_17 = ["fill"];
    const _hoisted_18 = ["fill"];
    const _hoisted_19 = ["fill"];
    const _hoisted_20 = {
      id: "Rectangle-Copy-17",
      transform: "translate(53.000000, 45.000000)"
    };
    const _hoisted_21 = ["fill", "xlink:href"];
    const _hoisted_22 = ["fill", "mask"];
    const _hoisted_23 = ["fill"];
    function _sfc_render$i(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("svg", _hoisted_1$D, [
        createBaseVNode("defs", null, [
          createBaseVNode("linearGradient", {
            id: `linearGradient-1-${_ctx.id}`,
            x1: "38.8503086%",
            y1: "0%",
            x2: "61.1496914%",
            y2: "100%"
          }, [
            createBaseVNode("stop", {
              "stop-color": `var(${_ctx.ns.cssVarBlockName("fill-color-1")})`,
              offset: "0%"
            }, null, 8, _hoisted_3$9),
            createBaseVNode("stop", {
              "stop-color": `var(${_ctx.ns.cssVarBlockName("fill-color-4")})`,
              offset: "100%"
            }, null, 8, _hoisted_4$6)
          ], 8, _hoisted_2$o),
          createBaseVNode("linearGradient", {
            id: `linearGradient-2-${_ctx.id}`,
            x1: "0%",
            y1: "9.5%",
            x2: "100%",
            y2: "90.5%"
          }, [
            createBaseVNode("stop", {
              "stop-color": `var(${_ctx.ns.cssVarBlockName("fill-color-1")})`,
              offset: "0%"
            }, null, 8, _hoisted_6$2),
            createBaseVNode("stop", {
              "stop-color": `var(${_ctx.ns.cssVarBlockName("fill-color-6")})`,
              offset: "100%"
            }, null, 8, _hoisted_7)
          ], 8, _hoisted_5$5),
          createBaseVNode("rect", {
            id: `path-3-${_ctx.id}`,
            x: "0",
            y: "0",
            width: "17",
            height: "36"
          }, null, 8, _hoisted_8)
        ]),
        createBaseVNode("g", _hoisted_9, [
          createBaseVNode("g", _hoisted_10, [
            createBaseVNode("g", _hoisted_11, [
              createBaseVNode("path", {
                id: "Oval-Copy-2",
                d: "M39.5,86 C61.3152476,86 79,83.9106622 79,81.3333333 C79,78.7560045 57.3152476,78 35.5,78 C13.6847524,78 0,78.7560045 0,81.3333333 C0,83.9106622 17.6847524,86 39.5,86 Z",
                fill: `var(${_ctx.ns.cssVarBlockName("fill-color-3")})`
              }, null, 8, _hoisted_12),
              createBaseVNode("polygon", {
                id: "Rectangle-Copy-14",
                fill: `var(${_ctx.ns.cssVarBlockName("fill-color-7")})`,
                transform: "translate(27.500000, 51.500000) scale(1, -1) translate(-27.500000, -51.500000) ",
                points: "13 58 53 58 42 45 2 45"
              }, null, 8, _hoisted_13),
              createBaseVNode("g", _hoisted_14, [
                createBaseVNode("polygon", {
                  id: "Rectangle-Copy-10",
                  fill: `var(${_ctx.ns.cssVarBlockName("fill-color-7")})`,
                  transform: "translate(11.500000, 5.000000) scale(1, -1) translate(-11.500000, -5.000000) ",
                  points: "2.84078316e-14 3 18 3 23 7 5 7"
                }, null, 8, _hoisted_15),
                createBaseVNode("polygon", {
                  id: "Rectangle-Copy-11",
                  fill: `var(${_ctx.ns.cssVarBlockName("fill-color-5")})`,
                  points: "-3.69149156e-15 7 38 7 38 43 -3.69149156e-15 43"
                }, null, 8, _hoisted_16),
                createBaseVNode("rect", {
                  id: "Rectangle-Copy-12",
                  fill: `url(#linearGradient-1-${_ctx.id})`,
                  transform: "translate(46.500000, 25.000000) scale(-1, 1) translate(-46.500000, -25.000000) ",
                  x: "38",
                  y: "7",
                  width: "17",
                  height: "36"
                }, null, 8, _hoisted_17),
                createBaseVNode("polygon", {
                  id: "Rectangle-Copy-13",
                  fill: `var(${_ctx.ns.cssVarBlockName("fill-color-2")})`,
                  transform: "translate(39.500000, 3.500000) scale(-1, 1) translate(-39.500000, -3.500000) ",
                  points: "24 7 41 7 55 -3.63806207e-12 38 -3.63806207e-12"
                }, null, 8, _hoisted_18)
              ]),
              createBaseVNode("rect", {
                id: "Rectangle-Copy-15",
                fill: `url(#linearGradient-2-${_ctx.id})`,
                x: "13",
                y: "45",
                width: "40",
                height: "36"
              }, null, 8, _hoisted_19),
              createBaseVNode("g", _hoisted_20, [
                createBaseVNode("use", {
                  id: "Mask",
                  fill: `var(${_ctx.ns.cssVarBlockName("fill-color-8")})`,
                  transform: "translate(8.500000, 18.000000) scale(-1, 1) translate(-8.500000, -18.000000) ",
                  "xlink:href": `#path-3-${_ctx.id}`
                }, null, 8, _hoisted_21),
                createBaseVNode("polygon", {
                  id: "Rectangle-Copy",
                  fill: `var(${_ctx.ns.cssVarBlockName("fill-color-9")})`,
                  mask: `url(#mask-4-${_ctx.id})`,
                  transform: "translate(12.000000, 9.000000) scale(-1, 1) translate(-12.000000, -9.000000) ",
                  points: "7 0 24 0 20 18 7 16.5"
                }, null, 8, _hoisted_22)
              ]),
              createBaseVNode("polygon", {
                id: "Rectangle-Copy-18",
                fill: `var(${_ctx.ns.cssVarBlockName("fill-color-2")})`,
                transform: "translate(66.000000, 51.500000) scale(-1, 1) translate(-66.000000, -51.500000) ",
                points: "62 45 79 45 70 58 53 58"
              }, null, 8, _hoisted_23)
            ])
          ])
        ])
      ]);
    }
    var ImgEmpty = /* @__PURE__ */ _export_sfc$1(_sfc_main$1r, [["render", _sfc_render$i], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/empty/src/img-empty.vue"]]);
    const emptyProps = {
      image: {
        type: String,
        default: ""
      },
      imageSize: Number,
      description: {
        type: String,
        default: ""
      }
    };
    const _hoisted_1$C = ["src"];
    const _hoisted_2$n = { key: 1 };
    const __default__$16 = {
      name: "ElEmpty"
    };
    const _sfc_main$1q = /* @__PURE__ */ defineComponent({
      ...__default__$16,
      props: emptyProps,
      setup(__props) {
        const props = __props;
        const { t } = useLocale();
        const ns2 = useNamespace("empty");
        const emptyDescription = computed(() => props.description || t("el.table.emptyText"));
        const imageStyle = computed(() => ({
          width: props.imageSize ? `${props.imageSize}px` : ""
        }));
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            class: normalizeClass(unref(ns2).b())
          }, [
            createBaseVNode("div", {
              class: normalizeClass(unref(ns2).e("image")),
              style: normalizeStyle(unref(imageStyle))
            }, [
              _ctx.image ? (openBlock(), createElementBlock("img", {
                key: 0,
                src: _ctx.image,
                ondragstart: "return false"
              }, null, 8, _hoisted_1$C)) : renderSlot(_ctx.$slots, "image", { key: 1 }, () => [
                createVNode(ImgEmpty)
              ])
            ], 6),
            createBaseVNode("div", {
              class: normalizeClass(unref(ns2).e("description"))
            }, [
              _ctx.$slots.description ? renderSlot(_ctx.$slots, "description", { key: 0 }) : (openBlock(), createElementBlock("p", _hoisted_2$n, toDisplayString$1(unref(emptyDescription)), 1))
            ], 2),
            _ctx.$slots.default ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(unref(ns2).e("bottom"))
            }, [
              renderSlot(_ctx.$slots, "default")
            ], 2)) : createCommentVNode("v-if", true)
          ], 2);
        };
      }
    });
    var Empty = /* @__PURE__ */ _export_sfc$1(_sfc_main$1q, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/empty/src/empty.vue"]]);
    const ElEmpty = withInstall(Empty);
    const formProps = buildProps({
      model: Object,
      rules: {
        type: definePropType(Object)
      },
      labelPosition: {
        type: String,
        values: ["left", "right", "top"],
        default: "right"
      },
      labelWidth: {
        type: [String, Number],
        default: ""
      },
      labelSuffix: {
        type: String,
        default: ""
      },
      inline: Boolean,
      inlineMessage: Boolean,
      statusIcon: Boolean,
      showMessage: {
        type: Boolean,
        default: true
      },
      size: {
        type: String,
        values: componentSizes
      },
      disabled: Boolean,
      validateOnRuleChange: {
        type: Boolean,
        default: true
      },
      hideRequiredAsterisk: {
        type: Boolean,
        default: false
      },
      scrollToError: Boolean
    });
    const formEmits = {
      validate: (prop, isValid2, message2) => (isArray$6(prop) || isString$3(prop)) && isBoolean$1(isValid2) && isString$3(message2)
    };
    function useFormLabelWidth() {
      const potentialLabelWidthArr = ref([]);
      const autoLabelWidth = computed(() => {
        if (!potentialLabelWidthArr.value.length)
          return "0";
        const max2 = Math.max(...potentialLabelWidthArr.value);
        return max2 ? `${max2}px` : "";
      });
      function getLabelWidthIndex(width) {
        const index2 = potentialLabelWidthArr.value.indexOf(width);
        return index2;
      }
      function registerLabelWidth(val, oldVal) {
        if (val && oldVal) {
          const index2 = getLabelWidthIndex(oldVal);
          potentialLabelWidthArr.value.splice(index2, 1, val);
        } else if (val) {
          potentialLabelWidthArr.value.push(val);
        }
      }
      function deregisterLabelWidth(val) {
        const index2 = getLabelWidthIndex(val);
        if (index2 > -1) {
          potentialLabelWidthArr.value.splice(index2, 1);
        }
      }
      return {
        autoLabelWidth,
        registerLabelWidth,
        deregisterLabelWidth
      };
    }
    const filterFields = (fields, props) => {
      const normalized = castArray$1(props);
      return normalized.length > 0 ? fields.filter((field) => field.prop && normalized.includes(field.prop)) : fields;
    };
    const __default__$15 = {
      name: "ElForm"
    };
    const _sfc_main$1p = /* @__PURE__ */ defineComponent({
      ...__default__$15,
      props: formProps,
      emits: formEmits,
      setup(__props, { expose, emit: emit2 }) {
        const props = __props;
        const fields = [];
        const formSize = useSize();
        const ns2 = useNamespace("form");
        const formClasses = computed(() => {
          const { labelPosition, inline } = props;
          return [
            ns2.b(),
            ns2.m(formSize.value || "default"),
            {
              [ns2.m(`label-${labelPosition}`)]: labelPosition,
              [ns2.m("inline")]: inline
            }
          ];
        });
        const addField = (field) => {
          fields.push(field);
        };
        const removeField = (field) => {
          if (field.prop) {
            fields.splice(fields.indexOf(field), 1);
          }
        };
        const resetFields = (properties = []) => {
          if (!props.model) {
            return;
          }
          filterFields(fields, properties).forEach((field) => field.resetField());
        };
        const clearValidate = (props2 = []) => {
          filterFields(fields, props2).forEach((field) => field.clearValidate());
        };
        const isValidatable = computed(() => {
          const hasModel = !!props.model;
          return hasModel;
        });
        const obtainValidateFields = (props2) => {
          if (fields.length === 0)
            return [];
          const filteredFields = filterFields(fields, props2);
          if (!filteredFields.length) {
            return [];
          }
          return filteredFields;
        };
        const validate = async (callback) => validateField(void 0, callback);
        const doValidateField = async (props2 = []) => {
          if (!isValidatable.value)
            return false;
          const fields2 = obtainValidateFields(props2);
          if (fields2.length === 0)
            return true;
          let validationErrors = {};
          for (const field of fields2) {
            try {
              await field.validate("");
            } catch (fields3) {
              validationErrors = {
                ...validationErrors,
                ...fields3
              };
            }
          }
          if (Object.keys(validationErrors).length === 0)
            return true;
          return Promise.reject(validationErrors);
        };
        const validateField = async (modelProps = [], callback) => {
          const shouldThrow = !isFunction$4(callback);
          try {
            const result = await doValidateField(modelProps);
            if (result === true) {
              callback == null ? void 0 : callback(result);
            }
            return result;
          } catch (e2) {
            const invalidFields = e2;
            if (props.scrollToError) {
              scrollToField(Object.keys(invalidFields)[0]);
            }
            callback == null ? void 0 : callback(false, invalidFields);
            return shouldThrow && Promise.reject(invalidFields);
          }
        };
        const scrollToField = (prop) => {
          var _a2;
          const field = filterFields(fields, prop)[0];
          if (field) {
            (_a2 = field.$el) == null ? void 0 : _a2.scrollIntoView();
          }
        };
        watch(() => props.rules, () => {
          if (props.validateOnRuleChange) {
            validate().catch((err) => debugWarn());
          }
        }, { deep: true });
        provide(formContextKey, reactive({
          ...toRefs(props),
          emit: emit2,
          resetFields,
          clearValidate,
          validateField,
          addField,
          removeField,
          ...useFormLabelWidth()
        }));
        expose({
          validate,
          validateField,
          resetFields,
          clearValidate,
          scrollToField
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("form", {
            class: normalizeClass(unref(formClasses))
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 2);
        };
      }
    });
    var Form = /* @__PURE__ */ _export_sfc$1(_sfc_main$1p, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/form/src/form.vue"]]);
    function defaultSetTimout() {
      throw new Error("setTimeout has not been defined");
    }
    function defaultClearTimeout() {
      throw new Error("clearTimeout has not been defined");
    }
    var cachedSetTimeout = defaultSetTimout;
    var cachedClearTimeout = defaultClearTimeout;
    if (typeof global$1.setTimeout === "function") {
      cachedSetTimeout = setTimeout;
    }
    if (typeof global$1.clearTimeout === "function") {
      cachedClearTimeout = clearTimeout;
    }
    function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
        return setTimeout(fun, 0);
      }
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
      }
      try {
        return cachedSetTimeout(fun, 0);
      } catch (e2) {
        try {
          return cachedSetTimeout.call(null, fun, 0);
        } catch (e3) {
          return cachedSetTimeout.call(this, fun, 0);
        }
      }
    }
    function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
        return clearTimeout(marker);
      }
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
      }
      try {
        return cachedClearTimeout(marker);
      } catch (e2) {
        try {
          return cachedClearTimeout.call(null, marker);
        } catch (e3) {
          return cachedClearTimeout.call(this, marker);
        }
      }
    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;
    function cleanUpNextTick() {
      if (!draining || !currentQueue) {
        return;
      }
      draining = false;
      if (currentQueue.length) {
        queue = currentQueue.concat(queue);
      } else {
        queueIndex = -1;
      }
      if (queue.length) {
        drainQueue();
      }
    }
    function drainQueue() {
      if (draining) {
        return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;
      var len = queue.length;
      while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
          if (currentQueue) {
            currentQueue[queueIndex].run();
          }
        }
        queueIndex = -1;
        len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
    }
    function nextTick(fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          args[i2 - 1] = arguments[i2];
        }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
      }
    }
    function Item(fun, array2) {
      this.fun = fun;
      this.array = array2;
    }
    Item.prototype.run = function() {
      this.fun.apply(null, this.array);
    };
    var title = "browser";
    var platform = "browser";
    var browser = true;
    var env = {};
    var argv = [];
    var version$1 = "";
    var versions = {};
    var release = {};
    var config$1 = {};
    function noop() {
    }
    var on = noop;
    var addListener = noop;
    var once$2 = noop;
    var off = noop;
    var removeListener = noop;
    var removeAllListeners = noop;
    var emit = noop;
    function binding(name) {
      throw new Error("process.binding is not supported");
    }
    function cwd() {
      return "/";
    }
    function chdir(dir) {
      throw new Error("process.chdir is not supported");
    }
    function umask() {
      return 0;
    }
    var performance$1 = global$1.performance || {};
    var performanceNow = performance$1.now || performance$1.mozNow || performance$1.msNow || performance$1.oNow || performance$1.webkitNow || function() {
      return new Date().getTime();
    };
    function hrtime(previousTimestamp) {
      var clocktime = performanceNow.call(performance$1) * 1e-3;
      var seconds = Math.floor(clocktime);
      var nanoseconds = Math.floor(clocktime % 1 * 1e9);
      if (previousTimestamp) {
        seconds = seconds - previousTimestamp[0];
        nanoseconds = nanoseconds - previousTimestamp[1];
        if (nanoseconds < 0) {
          seconds--;
          nanoseconds += 1e9;
        }
      }
      return [seconds, nanoseconds];
    }
    var startTime = new Date();
    function uptime() {
      var currentTime = new Date();
      var dif = currentTime - startTime;
      return dif / 1e3;
    }
    var browser$1 = {
      nextTick,
      title,
      browser,
      env,
      argv,
      version: version$1,
      versions,
      on,
      addListener,
      once: once$2,
      off,
      removeListener,
      removeAllListeners,
      emit,
      binding,
      cwd,
      chdir,
      umask,
      hrtime,
      platform,
      release,
      config: config$1,
      uptime
    };
    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      _setPrototypeOf(subClass, superClass);
    }
    function _getPrototypeOf(o2) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf(o2);
    }
    function _setPrototypeOf(o2, p2) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf(o2, p2);
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    function _construct(Parent, args, Class) {
      if (_isNativeReflectConstruct()) {
        _construct = Reflect.construct.bind();
      } else {
        _construct = function _construct2(Parent2, args2, Class2) {
          var a2 = [null];
          a2.push.apply(a2, args2);
          var Constructor = Function.bind.apply(Parent2, a2);
          var instance = new Constructor();
          if (Class2)
            _setPrototypeOf(instance, Class2.prototype);
          return instance;
        };
      }
      return _construct.apply(null, arguments);
    }
    function _isNativeFunction(fn2) {
      return Function.toString.call(fn2).indexOf("[native code]") !== -1;
    }
    function _wrapNativeSuper(Class) {
      var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
      _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
        if (Class2 === null || !_isNativeFunction(Class2))
          return Class2;
        if (typeof Class2 !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
          if (_cache.has(Class2))
            return _cache.get(Class2);
          _cache.set(Class2, Wrapper);
        }
        function Wrapper() {
          return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class2.prototype, {
          constructor: {
            value: Wrapper,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        return _setPrototypeOf(Wrapper, Class2);
      };
      return _wrapNativeSuper(Class);
    }
    var formatRegExp$1 = /%[sdj%]/g;
    var warning = function warning2() {
    };
    if (typeof browser$1 !== "undefined" && { "VITE_LOG_INFO_ENABLED": "false", "VITE_SIYUAN_API_URL": "http://127.0.0.1:6806", "VITE_SIYUAN_CONFIG_TOKEN": "", "VITE_OPT_PWD": "123456", "VITE_SIYUAN_DEV_PAGE_ID": "20220723100458-kqacgb2", "VITE_DEBUG_MODE": "false" } && false) {
      warning = function warning2(type2, errors2) {
        if (typeof console !== "undefined" && console.warn && typeof ASYNC_VALIDATOR_NO_WARNING === "undefined") {
          if (errors2.every(function(e2) {
            return typeof e2 === "string";
          })) {
            console.warn(type2, errors2);
          }
        }
      };
    }
    function convertFieldsError(errors2) {
      if (!errors2 || !errors2.length)
        return null;
      var fields = {};
      errors2.forEach(function(error2) {
        var field = error2.field;
        fields[field] = fields[field] || [];
        fields[field].push(error2);
      });
      return fields;
    }
    function format$3(template) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      var i2 = 0;
      var len = args.length;
      if (typeof template === "function") {
        return template.apply(null, args);
      }
      if (typeof template === "string") {
        var str2 = template.replace(formatRegExp$1, function(x2) {
          if (x2 === "%%") {
            return "%";
          }
          if (i2 >= len) {
            return x2;
          }
          switch (x2) {
            case "%s":
              return String(args[i2++]);
            case "%d":
              return Number(args[i2++]);
            case "%j":
              try {
                return JSON.stringify(args[i2++]);
              } catch (_2) {
                return "[Circular]";
              }
              break;
            default:
              return x2;
          }
        });
        return str2;
      }
      return template;
    }
    function isNativeStringType(type2) {
      return type2 === "string" || type2 === "url" || type2 === "hex" || type2 === "email" || type2 === "date" || type2 === "pattern";
    }
    function isEmptyValue(value, type2) {
      if (value === void 0 || value === null) {
        return true;
      }
      if (type2 === "array" && Array.isArray(value) && !value.length) {
        return true;
      }
      if (isNativeStringType(type2) && typeof value === "string" && !value) {
        return true;
      }
      return false;
    }
    function asyncParallelArray(arr, func, callback) {
      var results = [];
      var total2 = 0;
      var arrLength = arr.length;
      function count(errors2) {
        results.push.apply(results, errors2 || []);
        total2++;
        if (total2 === arrLength) {
          callback(results);
        }
      }
      arr.forEach(function(a2) {
        func(a2, count);
      });
    }
    function asyncSerialArray(arr, func, callback) {
      var index2 = 0;
      var arrLength = arr.length;
      function next(errors2) {
        if (errors2 && errors2.length) {
          callback(errors2);
          return;
        }
        var original = index2;
        index2 = index2 + 1;
        if (original < arrLength) {
          func(arr[original], next);
        } else {
          callback([]);
        }
      }
      next([]);
    }
    function flattenObjArr(objArr) {
      var ret = [];
      Object.keys(objArr).forEach(function(k) {
        ret.push.apply(ret, objArr[k] || []);
      });
      return ret;
    }
    var AsyncValidationError = /* @__PURE__ */ function(_Error) {
      _inheritsLoose(AsyncValidationError2, _Error);
      function AsyncValidationError2(errors2, fields) {
        var _this;
        _this = _Error.call(this, "Async Validation Error") || this;
        _this.errors = errors2;
        _this.fields = fields;
        return _this;
      }
      return AsyncValidationError2;
    }(/* @__PURE__ */ _wrapNativeSuper(Error));
    function asyncMap(objArr, option, func, callback, source) {
      if (option.first) {
        var _pending = new Promise(function(resolve2, reject) {
          var next = function next2(errors2) {
            callback(errors2);
            return errors2.length ? reject(new AsyncValidationError(errors2, convertFieldsError(errors2))) : resolve2(source);
          };
          var flattenArr = flattenObjArr(objArr);
          asyncSerialArray(flattenArr, func, next);
        });
        _pending["catch"](function(e2) {
          return e2;
        });
        return _pending;
      }
      var firstFields = option.firstFields === true ? Object.keys(objArr) : option.firstFields || [];
      var objArrKeys = Object.keys(objArr);
      var objArrLength = objArrKeys.length;
      var total2 = 0;
      var results = [];
      var pending = new Promise(function(resolve2, reject) {
        var next = function next2(errors2) {
          results.push.apply(results, errors2);
          total2++;
          if (total2 === objArrLength) {
            callback(results);
            return results.length ? reject(new AsyncValidationError(results, convertFieldsError(results))) : resolve2(source);
          }
        };
        if (!objArrKeys.length) {
          callback(results);
          resolve2(source);
        }
        objArrKeys.forEach(function(key) {
          var arr = objArr[key];
          if (firstFields.indexOf(key) !== -1) {
            asyncSerialArray(arr, func, next);
          } else {
            asyncParallelArray(arr, func, next);
          }
        });
      });
      pending["catch"](function(e2) {
        return e2;
      });
      return pending;
    }
    function isErrorObj(obj) {
      return !!(obj && obj.message !== void 0);
    }
    function getValue(value, path) {
      var v2 = value;
      for (var i2 = 0; i2 < path.length; i2++) {
        if (v2 == void 0) {
          return v2;
        }
        v2 = v2[path[i2]];
      }
      return v2;
    }
    function complementError(rule, source) {
      return function(oe) {
        var fieldValue;
        if (rule.fullFields) {
          fieldValue = getValue(source, rule.fullFields);
        } else {
          fieldValue = source[oe.field || rule.fullField];
        }
        if (isErrorObj(oe)) {
          oe.field = oe.field || rule.fullField;
          oe.fieldValue = fieldValue;
          return oe;
        }
        return {
          message: typeof oe === "function" ? oe() : oe,
          fieldValue,
          field: oe.field || rule.fullField
        };
      };
    }
    function deepMerge(target, source) {
      if (source) {
        for (var s2 in source) {
          if (source.hasOwnProperty(s2)) {
            var value = source[s2];
            if (typeof value === "object" && typeof target[s2] === "object") {
              target[s2] = _extends({}, target[s2], value);
            } else {
              target[s2] = value;
            }
          }
        }
      }
      return target;
    }
    var required$1 = function required2(rule, value, source, errors2, options, type2) {
      if (rule.required && (!source.hasOwnProperty(rule.field) || isEmptyValue(value, type2 || rule.type))) {
        errors2.push(format$3(options.messages.required, rule.fullField));
      }
    };
    var whitespace = function whitespace2(rule, value, source, errors2, options) {
      if (/^\s+$/.test(value) || value === "") {
        errors2.push(format$3(options.messages.whitespace, rule.fullField));
      }
    };
    var urlReg;
    var getUrlRegex = function() {
      if (urlReg) {
        return urlReg;
      }
      var word = "[a-fA-F\\d:]";
      var b2 = function b3(options) {
        return options && options.includeBoundaries ? "(?:(?<=\\s|^)(?=" + word + ")|(?<=" + word + ")(?=\\s|$))" : "";
      };
      var v4 = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
      var v6seg = "[a-fA-F\\d]{1,4}";
      var v6 = ("\n(?:\n(?:" + v6seg + ":){7}(?:" + v6seg + "|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:" + v6seg + ":){6}(?:" + v4 + "|:" + v6seg + "|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:" + v6seg + ":){5}(?::" + v4 + "|(?::" + v6seg + "){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:" + v6seg + ":){4}(?:(?::" + v6seg + "){0,1}:" + v4 + "|(?::" + v6seg + "){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:" + v6seg + ":){3}(?:(?::" + v6seg + "){0,2}:" + v4 + "|(?::" + v6seg + "){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:" + v6seg + ":){2}(?:(?::" + v6seg + "){0,3}:" + v4 + "|(?::" + v6seg + "){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:" + v6seg + ":){1}(?:(?::" + v6seg + "){0,4}:" + v4 + "|(?::" + v6seg + "){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::" + v6seg + "){0,5}:" + v4 + "|(?::" + v6seg + "){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n").replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
      var v46Exact = new RegExp("(?:^" + v4 + "$)|(?:^" + v6 + "$)");
      var v4exact = new RegExp("^" + v4 + "$");
      var v6exact = new RegExp("^" + v6 + "$");
      var ip = function ip2(options) {
        return options && options.exact ? v46Exact : new RegExp("(?:" + b2(options) + v4 + b2(options) + ")|(?:" + b2(options) + v6 + b2(options) + ")", "g");
      };
      ip.v4 = function(options) {
        return options && options.exact ? v4exact : new RegExp("" + b2(options) + v4 + b2(options), "g");
      };
      ip.v6 = function(options) {
        return options && options.exact ? v6exact : new RegExp("" + b2(options) + v6 + b2(options), "g");
      };
      var protocol = "(?:(?:[a-z]+:)?//)";
      var auth2 = "(?:\\S+(?::\\S*)?@)?";
      var ipv4 = ip.v4().source;
      var ipv6 = ip.v6().source;
      var host = "(?:(?:[a-z\\u00a1-\\uffff0-9][-_]*)*[a-z\\u00a1-\\uffff0-9]+)";
      var domain2 = "(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*";
      var tld = "(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))";
      var port = "(?::\\d{2,5})?";
      var path = '(?:[/?#][^\\s"]*)?';
      var regex = "(?:" + protocol + "|www\\.)" + auth2 + "(?:localhost|" + ipv4 + "|" + ipv6 + "|" + host + domain2 + tld + ")" + port + path;
      urlReg = new RegExp("(?:^" + regex + "$)", "i");
      return urlReg;
    };
    var pattern$2 = {
      email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+\.)+[a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}))$/,
      hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
    };
    var types = {
      integer: function integer2(value) {
        return types.number(value) && parseInt(value, 10) === value;
      },
      "float": function float2(value) {
        return types.number(value) && !types.integer(value);
      },
      array: function array2(value) {
        return Array.isArray(value);
      },
      regexp: function regexp2(value) {
        if (value instanceof RegExp) {
          return true;
        }
        try {
          return !!new RegExp(value);
        } catch (e2) {
          return false;
        }
      },
      date: function date2(value) {
        return typeof value.getTime === "function" && typeof value.getMonth === "function" && typeof value.getYear === "function" && !isNaN(value.getTime());
      },
      number: function number2(value) {
        if (isNaN(value)) {
          return false;
        }
        return typeof value === "number";
      },
      object: function object2(value) {
        return typeof value === "object" && !types.array(value);
      },
      method: function method2(value) {
        return typeof value === "function";
      },
      email: function email(value) {
        return typeof value === "string" && value.length <= 320 && !!value.match(pattern$2.email);
      },
      url: function url2(value) {
        return typeof value === "string" && value.length <= 2048 && !!value.match(getUrlRegex());
      },
      hex: function hex(value) {
        return typeof value === "string" && !!value.match(pattern$2.hex);
      }
    };
    var type$1 = function type2(rule, value, source, errors2, options) {
      if (rule.required && value === void 0) {
        required$1(rule, value, source, errors2, options);
        return;
      }
      var custom = ["integer", "float", "array", "regexp", "object", "method", "email", "number", "date", "url", "hex"];
      var ruleType = rule.type;
      if (custom.indexOf(ruleType) > -1) {
        if (!types[ruleType](value)) {
          errors2.push(format$3(options.messages.types[ruleType], rule.fullField, rule.type));
        }
      } else if (ruleType && typeof value !== rule.type) {
        errors2.push(format$3(options.messages.types[ruleType], rule.fullField, rule.type));
      }
    };
    var range = function range2(rule, value, source, errors2, options) {
      var len = typeof rule.len === "number";
      var min2 = typeof rule.min === "number";
      var max2 = typeof rule.max === "number";
      var spRegexp = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
      var val = value;
      var key = null;
      var num = typeof value === "number";
      var str2 = typeof value === "string";
      var arr = Array.isArray(value);
      if (num) {
        key = "number";
      } else if (str2) {
        key = "string";
      } else if (arr) {
        key = "array";
      }
      if (!key) {
        return false;
      }
      if (arr) {
        val = value.length;
      }
      if (str2) {
        val = value.replace(spRegexp, "_").length;
      }
      if (len) {
        if (val !== rule.len) {
          errors2.push(format$3(options.messages[key].len, rule.fullField, rule.len));
        }
      } else if (min2 && !max2 && val < rule.min) {
        errors2.push(format$3(options.messages[key].min, rule.fullField, rule.min));
      } else if (max2 && !min2 && val > rule.max) {
        errors2.push(format$3(options.messages[key].max, rule.fullField, rule.max));
      } else if (min2 && max2 && (val < rule.min || val > rule.max)) {
        errors2.push(format$3(options.messages[key].range, rule.fullField, rule.min, rule.max));
      }
    };
    var ENUM$1 = "enum";
    var enumerable$1 = function enumerable2(rule, value, source, errors2, options) {
      rule[ENUM$1] = Array.isArray(rule[ENUM$1]) ? rule[ENUM$1] : [];
      if (rule[ENUM$1].indexOf(value) === -1) {
        errors2.push(format$3(options.messages[ENUM$1], rule.fullField, rule[ENUM$1].join(", ")));
      }
    };
    var pattern$1 = function pattern2(rule, value, source, errors2, options) {
      if (rule.pattern) {
        if (rule.pattern instanceof RegExp) {
          rule.pattern.lastIndex = 0;
          if (!rule.pattern.test(value)) {
            errors2.push(format$3(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
          }
        } else if (typeof rule.pattern === "string") {
          var _pattern = new RegExp(rule.pattern);
          if (!_pattern.test(value)) {
            errors2.push(format$3(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
          }
        }
      }
    };
    var rules = {
      required: required$1,
      whitespace,
      type: type$1,
      range,
      "enum": enumerable$1,
      pattern: pattern$1
    };
    var string = function string2(rule, value, callback, source, options) {
      var errors2 = [];
      var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
      if (validate) {
        if (isEmptyValue(value, "string") && !rule.required) {
          return callback();
        }
        rules.required(rule, value, source, errors2, options, "string");
        if (!isEmptyValue(value, "string")) {
          rules.type(rule, value, source, errors2, options);
          rules.range(rule, value, source, errors2, options);
          rules.pattern(rule, value, source, errors2, options);
          if (rule.whitespace === true) {
            rules.whitespace(rule, value, source, errors2, options);
          }
        }
      }
      callback(errors2);
    };
    var method$1 = function method2(rule, value, callback, source, options) {
      var errors2 = [];
      var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
      if (validate) {
        if (isEmptyValue(value) && !rule.required) {
          return callback();
        }
        rules.required(rule, value, source, errors2, options);
        if (value !== void 0) {
          rules.type(rule, value, source, errors2, options);
        }
      }
      callback(errors2);
    };
    var number = function number2(rule, value, callback, source, options) {
      var errors2 = [];
      var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
      if (validate) {
        if (value === "") {
          value = void 0;
        }
        if (isEmptyValue(value) && !rule.required) {
          return callback();
        }
        rules.required(rule, value, source, errors2, options);
        if (value !== void 0) {
          rules.type(rule, value, source, errors2, options);
          rules.range(rule, value, source, errors2, options);
        }
      }
      callback(errors2);
    };
    var _boolean = function _boolean2(rule, value, callback, source, options) {
      var errors2 = [];
      var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
      if (validate) {
        if (isEmptyValue(value) && !rule.required) {
          return callback();
        }
        rules.required(rule, value, source, errors2, options);
        if (value !== void 0) {
          rules.type(rule, value, source, errors2, options);
        }
      }
      callback(errors2);
    };
    var regexp = function regexp2(rule, value, callback, source, options) {
      var errors2 = [];
      var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
      if (validate) {
        if (isEmptyValue(value) && !rule.required) {
          return callback();
        }
        rules.required(rule, value, source, errors2, options);
        if (!isEmptyValue(value)) {
          rules.type(rule, value, source, errors2, options);
        }
      }
      callback(errors2);
    };
    var integer = function integer2(rule, value, callback, source, options) {
      var errors2 = [];
      var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
      if (validate) {
        if (isEmptyValue(value) && !rule.required) {
          return callback();
        }
        rules.required(rule, value, source, errors2, options);
        if (value !== void 0) {
          rules.type(rule, value, source, errors2, options);
          rules.range(rule, value, source, errors2, options);
        }
      }
      callback(errors2);
    };
    var floatFn = function floatFn2(rule, value, callback, source, options) {
      var errors2 = [];
      var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
      if (validate) {
        if (isEmptyValue(value) && !rule.required) {
          return callback();
        }
        rules.required(rule, value, source, errors2, options);
        if (value !== void 0) {
          rules.type(rule, value, source, errors2, options);
          rules.range(rule, value, source, errors2, options);
        }
      }
      callback(errors2);
    };
    var array = function array2(rule, value, callback, source, options) {
      var errors2 = [];
      var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
      if (validate) {
        if ((value === void 0 || value === null) && !rule.required) {
          return callback();
        }
        rules.required(rule, value, source, errors2, options, "array");
        if (value !== void 0 && value !== null) {
          rules.type(rule, value, source, errors2, options);
          rules.range(rule, value, source, errors2, options);
        }
      }
      callback(errors2);
    };
    var object = function object2(rule, value, callback, source, options) {
      var errors2 = [];
      var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
      if (validate) {
        if (isEmptyValue(value) && !rule.required) {
          return callback();
        }
        rules.required(rule, value, source, errors2, options);
        if (value !== void 0) {
          rules.type(rule, value, source, errors2, options);
        }
      }
      callback(errors2);
    };
    var ENUM = "enum";
    var enumerable = function enumerable2(rule, value, callback, source, options) {
      var errors2 = [];
      var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
      if (validate) {
        if (isEmptyValue(value) && !rule.required) {
          return callback();
        }
        rules.required(rule, value, source, errors2, options);
        if (value !== void 0) {
          rules[ENUM](rule, value, source, errors2, options);
        }
      }
      callback(errors2);
    };
    var pattern = function pattern2(rule, value, callback, source, options) {
      var errors2 = [];
      var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
      if (validate) {
        if (isEmptyValue(value, "string") && !rule.required) {
          return callback();
        }
        rules.required(rule, value, source, errors2, options);
        if (!isEmptyValue(value, "string")) {
          rules.pattern(rule, value, source, errors2, options);
        }
      }
      callback(errors2);
    };
    var date = function date2(rule, value, callback, source, options) {
      var errors2 = [];
      var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
      if (validate) {
        if (isEmptyValue(value, "date") && !rule.required) {
          return callback();
        }
        rules.required(rule, value, source, errors2, options);
        if (!isEmptyValue(value, "date")) {
          var dateObject;
          if (value instanceof Date) {
            dateObject = value;
          } else {
            dateObject = new Date(value);
          }
          rules.type(rule, dateObject, source, errors2, options);
          if (dateObject) {
            rules.range(rule, dateObject.getTime(), source, errors2, options);
          }
        }
      }
      callback(errors2);
    };
    var required = function required2(rule, value, callback, source, options) {
      var errors2 = [];
      var type2 = Array.isArray(value) ? "array" : typeof value;
      rules.required(rule, value, source, errors2, options, type2);
      callback(errors2);
    };
    var type = function type2(rule, value, callback, source, options) {
      var ruleType = rule.type;
      var errors2 = [];
      var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
      if (validate) {
        if (isEmptyValue(value, ruleType) && !rule.required) {
          return callback();
        }
        rules.required(rule, value, source, errors2, options, ruleType);
        if (!isEmptyValue(value, ruleType)) {
          rules.type(rule, value, source, errors2, options);
        }
      }
      callback(errors2);
    };
    var any = function any2(rule, value, callback, source, options) {
      var errors2 = [];
      var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
      if (validate) {
        if (isEmptyValue(value) && !rule.required) {
          return callback();
        }
        rules.required(rule, value, source, errors2, options);
      }
      callback(errors2);
    };
    var validators = {
      string,
      method: method$1,
      number,
      "boolean": _boolean,
      regexp,
      integer,
      "float": floatFn,
      array,
      object,
      "enum": enumerable,
      pattern,
      date,
      url: type,
      hex: type,
      email: type,
      required,
      any
    };
    function newMessages() {
      return {
        "default": "Validation error on field %s",
        required: "%s is required",
        "enum": "%s must be one of %s",
        whitespace: "%s cannot be empty",
        date: {
          format: "%s date %s is invalid for format %s",
          parse: "%s date could not be parsed, %s is invalid ",
          invalid: "%s date %s is invalid"
        },
        types: {
          string: "%s is not a %s",
          method: "%s is not a %s (function)",
          array: "%s is not an %s",
          object: "%s is not an %s",
          number: "%s is not a %s",
          date: "%s is not a %s",
          "boolean": "%s is not a %s",
          integer: "%s is not an %s",
          "float": "%s is not a %s",
          regexp: "%s is not a valid %s",
          email: "%s is not a valid %s",
          url: "%s is not a valid %s",
          hex: "%s is not a valid %s"
        },
        string: {
          len: "%s must be exactly %s characters",
          min: "%s must be at least %s characters",
          max: "%s cannot be longer than %s characters",
          range: "%s must be between %s and %s characters"
        },
        number: {
          len: "%s must equal %s",
          min: "%s cannot be less than %s",
          max: "%s cannot be greater than %s",
          range: "%s must be between %s and %s"
        },
        array: {
          len: "%s must be exactly %s in length",
          min: "%s cannot be less than %s in length",
          max: "%s cannot be greater than %s in length",
          range: "%s must be between %s and %s in length"
        },
        pattern: {
          mismatch: "%s value %s does not match pattern %s"
        },
        clone: function clone2() {
          var cloned = JSON.parse(JSON.stringify(this));
          cloned.clone = this.clone;
          return cloned;
        }
      };
    }
    var messages = newMessages();
    var Schema = /* @__PURE__ */ function() {
      function Schema2(descriptor) {
        this.rules = null;
        this._messages = messages;
        this.define(descriptor);
      }
      var _proto = Schema2.prototype;
      _proto.define = function define(rules2) {
        var _this = this;
        if (!rules2) {
          throw new Error("Cannot configure a schema with no rules");
        }
        if (typeof rules2 !== "object" || Array.isArray(rules2)) {
          throw new Error("Rules must be an object");
        }
        this.rules = {};
        Object.keys(rules2).forEach(function(name) {
          var item = rules2[name];
          _this.rules[name] = Array.isArray(item) ? item : [item];
        });
      };
      _proto.messages = function messages2(_messages) {
        if (_messages) {
          this._messages = deepMerge(newMessages(), _messages);
        }
        return this._messages;
      };
      _proto.validate = function validate(source_, o2, oc) {
        var _this2 = this;
        if (o2 === void 0) {
          o2 = {};
        }
        if (oc === void 0) {
          oc = function oc2() {
          };
        }
        var source = source_;
        var options = o2;
        var callback = oc;
        if (typeof options === "function") {
          callback = options;
          options = {};
        }
        if (!this.rules || Object.keys(this.rules).length === 0) {
          if (callback) {
            callback(null, source);
          }
          return Promise.resolve(source);
        }
        function complete(results) {
          var errors2 = [];
          var fields = {};
          function add2(e2) {
            if (Array.isArray(e2)) {
              var _errors;
              errors2 = (_errors = errors2).concat.apply(_errors, e2);
            } else {
              errors2.push(e2);
            }
          }
          for (var i2 = 0; i2 < results.length; i2++) {
            add2(results[i2]);
          }
          if (!errors2.length) {
            callback(null, source);
          } else {
            fields = convertFieldsError(errors2);
            callback(errors2, fields);
          }
        }
        if (options.messages) {
          var messages$1 = this.messages();
          if (messages$1 === messages) {
            messages$1 = newMessages();
          }
          deepMerge(messages$1, options.messages);
          options.messages = messages$1;
        } else {
          options.messages = this.messages();
        }
        var series = {};
        var keys2 = options.keys || Object.keys(this.rules);
        keys2.forEach(function(z) {
          var arr = _this2.rules[z];
          var value = source[z];
          arr.forEach(function(r) {
            var rule = r;
            if (typeof rule.transform === "function") {
              if (source === source_) {
                source = _extends({}, source);
              }
              value = source[z] = rule.transform(value);
            }
            if (typeof rule === "function") {
              rule = {
                validator: rule
              };
            } else {
              rule = _extends({}, rule);
            }
            rule.validator = _this2.getValidationMethod(rule);
            if (!rule.validator) {
              return;
            }
            rule.field = z;
            rule.fullField = rule.fullField || z;
            rule.type = _this2.getType(rule);
            series[z] = series[z] || [];
            series[z].push({
              rule,
              value,
              source,
              field: z
            });
          });
        });
        var errorFields = {};
        return asyncMap(series, options, function(data, doIt) {
          var rule = data.rule;
          var deep = (rule.type === "object" || rule.type === "array") && (typeof rule.fields === "object" || typeof rule.defaultField === "object");
          deep = deep && (rule.required || !rule.required && data.value);
          rule.field = data.field;
          function addFullField(key, schema2) {
            return _extends({}, schema2, {
              fullField: rule.fullField + "." + key,
              fullFields: rule.fullFields ? [].concat(rule.fullFields, [key]) : [key]
            });
          }
          function cb(e2) {
            if (e2 === void 0) {
              e2 = [];
            }
            var errorList = Array.isArray(e2) ? e2 : [e2];
            if (!options.suppressWarning && errorList.length) {
              Schema2.warning("async-validator:", errorList);
            }
            if (errorList.length && rule.message !== void 0) {
              errorList = [].concat(rule.message);
            }
            var filledErrors = errorList.map(complementError(rule, source));
            if (options.first && filledErrors.length) {
              errorFields[rule.field] = 1;
              return doIt(filledErrors);
            }
            if (!deep) {
              doIt(filledErrors);
            } else {
              if (rule.required && !data.value) {
                if (rule.message !== void 0) {
                  filledErrors = [].concat(rule.message).map(complementError(rule, source));
                } else if (options.error) {
                  filledErrors = [options.error(rule, format$3(options.messages.required, rule.field))];
                }
                return doIt(filledErrors);
              }
              var fieldsSchema = {};
              if (rule.defaultField) {
                Object.keys(data.value).map(function(key) {
                  fieldsSchema[key] = rule.defaultField;
                });
              }
              fieldsSchema = _extends({}, fieldsSchema, data.rule.fields);
              var paredFieldsSchema = {};
              Object.keys(fieldsSchema).forEach(function(field) {
                var fieldSchema = fieldsSchema[field];
                var fieldSchemaList = Array.isArray(fieldSchema) ? fieldSchema : [fieldSchema];
                paredFieldsSchema[field] = fieldSchemaList.map(addFullField.bind(null, field));
              });
              var schema2 = new Schema2(paredFieldsSchema);
              schema2.messages(options.messages);
              if (data.rule.options) {
                data.rule.options.messages = options.messages;
                data.rule.options.error = options.error;
              }
              schema2.validate(data.value, data.rule.options || options, function(errs) {
                var finalErrors = [];
                if (filledErrors && filledErrors.length) {
                  finalErrors.push.apply(finalErrors, filledErrors);
                }
                if (errs && errs.length) {
                  finalErrors.push.apply(finalErrors, errs);
                }
                doIt(finalErrors.length ? finalErrors : null);
              });
            }
          }
          var res;
          if (rule.asyncValidator) {
            res = rule.asyncValidator(rule, data.value, cb, data.source, options);
          } else if (rule.validator) {
            try {
              res = rule.validator(rule, data.value, cb, data.source, options);
            } catch (error2) {
              console.error == null ? void 0 : console.error(error2);
              if (!options.suppressValidatorError) {
                setTimeout(function() {
                  throw error2;
                }, 0);
              }
              cb(error2.message);
            }
            if (res === true) {
              cb();
            } else if (res === false) {
              cb(typeof rule.message === "function" ? rule.message(rule.fullField || rule.field) : rule.message || (rule.fullField || rule.field) + " fails");
            } else if (res instanceof Array) {
              cb(res);
            } else if (res instanceof Error) {
              cb(res.message);
            }
          }
          if (res && res.then) {
            res.then(function() {
              return cb();
            }, function(e2) {
              return cb(e2);
            });
          }
        }, function(results) {
          complete(results);
        }, source);
      };
      _proto.getType = function getType2(rule) {
        if (rule.type === void 0 && rule.pattern instanceof RegExp) {
          rule.type = "pattern";
        }
        if (typeof rule.validator !== "function" && rule.type && !validators.hasOwnProperty(rule.type)) {
          throw new Error(format$3("Unknown rule type %s", rule.type));
        }
        return rule.type || "string";
      };
      _proto.getValidationMethod = function getValidationMethod(rule) {
        if (typeof rule.validator === "function") {
          return rule.validator;
        }
        var keys2 = Object.keys(rule);
        var messageIndex = keys2.indexOf("message");
        if (messageIndex !== -1) {
          keys2.splice(messageIndex, 1);
        }
        if (keys2.length === 1 && keys2[0] === "required") {
          return validators.required;
        }
        return validators[this.getType(rule)] || void 0;
      };
      return Schema2;
    }();
    Schema.register = function register2(type2, validator) {
      if (typeof validator !== "function") {
        throw new Error("Cannot register a validator by type, validator is not a function");
      }
      validators[type2] = validator;
    };
    Schema.warning = warning;
    Schema.messages = messages;
    Schema.validators = validators;
    const formItemValidateStates = [
      "",
      "error",
      "validating",
      "success"
    ];
    const formItemProps = buildProps({
      label: String,
      labelWidth: {
        type: [String, Number],
        default: ""
      },
      prop: {
        type: definePropType([String, Array])
      },
      required: {
        type: Boolean,
        default: void 0
      },
      rules: {
        type: definePropType([Object, Array])
      },
      error: String,
      validateStatus: {
        type: String,
        values: formItemValidateStates
      },
      for: String,
      inlineMessage: {
        type: [String, Boolean],
        default: ""
      },
      showMessage: {
        type: Boolean,
        default: true
      },
      size: {
        type: String,
        values: componentSizes
      }
    });
    const COMPONENT_NAME$9 = "ElLabelWrap";
    var FormLabelWrap = defineComponent({
      name: COMPONENT_NAME$9,
      props: {
        isAutoWidth: Boolean,
        updateAll: Boolean
      },
      setup(props, {
        slots
      }) {
        const formContext = inject(formContextKey, void 0);
        const formItemContext = inject(formItemContextKey);
        if (!formItemContext)
          throwError(COMPONENT_NAME$9, "usage: <el-form-item><label-wrap /></el-form-item>");
        const ns2 = useNamespace("form");
        const el = ref();
        const computedWidth = ref(0);
        const getLabelWidth = () => {
          var _a2;
          if ((_a2 = el.value) == null ? void 0 : _a2.firstElementChild) {
            const width = window.getComputedStyle(el.value.firstElementChild).width;
            return Math.ceil(Number.parseFloat(width));
          } else {
            return 0;
          }
        };
        const updateLabelWidth = (action = "update") => {
          nextTick$1(() => {
            if (slots.default && props.isAutoWidth) {
              if (action === "update") {
                computedWidth.value = getLabelWidth();
              } else if (action === "remove") {
                formContext == null ? void 0 : formContext.deregisterLabelWidth(computedWidth.value);
              }
            }
          });
        };
        const updateLabelWidthFn = () => updateLabelWidth("update");
        onMounted(() => {
          updateLabelWidthFn();
        });
        onBeforeUnmount(() => {
          updateLabelWidth("remove");
        });
        onUpdated(() => updateLabelWidthFn());
        watch(computedWidth, (val, oldVal) => {
          if (props.updateAll) {
            formContext == null ? void 0 : formContext.registerLabelWidth(val, oldVal);
          }
        });
        useResizeObserver(computed(() => {
          var _a2, _b;
          return (_b = (_a2 = el.value) == null ? void 0 : _a2.firstElementChild) != null ? _b : null;
        }), updateLabelWidthFn);
        return () => {
          var _a2, _b;
          if (!slots)
            return null;
          const {
            isAutoWidth
          } = props;
          if (isAutoWidth) {
            const autoLabelWidth = formContext == null ? void 0 : formContext.autoLabelWidth;
            const style2 = {};
            if (autoLabelWidth && autoLabelWidth !== "auto") {
              const marginWidth = Math.max(0, Number.parseInt(autoLabelWidth, 10) - computedWidth.value);
              const marginPosition = formContext.labelPosition === "left" ? "marginRight" : "marginLeft";
              if (marginWidth) {
                style2[marginPosition] = `${marginWidth}px`;
              }
            }
            return createVNode("div", {
              "ref": el,
              "class": [ns2.be("item", "label-wrap")],
              "style": style2
            }, [(_a2 = slots.default) == null ? void 0 : _a2.call(slots)]);
          } else {
            return createVNode(Fragment, {
              "ref": el
            }, [(_b = slots.default) == null ? void 0 : _b.call(slots)]);
          }
        };
      }
    });
    const _hoisted_1$B = ["role", "aria-labelledby"];
    const __default__$14 = {
      name: "ElFormItem"
    };
    const _sfc_main$1o = /* @__PURE__ */ defineComponent({
      ...__default__$14,
      props: formItemProps,
      setup(__props, { expose }) {
        const props = __props;
        const slots = useSlots();
        const formContext = inject(formContextKey, void 0);
        const parentFormItemContext = inject(formItemContextKey, void 0);
        const _size = useSize(void 0, { formItem: false });
        const ns2 = useNamespace("form-item");
        const labelId = useId().value;
        const inputIds = ref([]);
        const validateState = ref("");
        const validateStateDebounced = refDebounced(validateState, 100);
        const validateMessage = ref("");
        const formItemRef = ref();
        let initialValue = void 0;
        let isResettingField = false;
        const labelStyle = computed(() => {
          if ((formContext == null ? void 0 : formContext.labelPosition) === "top") {
            return {};
          }
          const labelWidth = addUnit(props.labelWidth || (formContext == null ? void 0 : formContext.labelWidth) || "");
          if (labelWidth)
            return { width: labelWidth };
          return {};
        });
        const contentStyle = computed(() => {
          if ((formContext == null ? void 0 : formContext.labelPosition) === "top" || (formContext == null ? void 0 : formContext.inline)) {
            return {};
          }
          if (!props.label && !props.labelWidth && isNested) {
            return {};
          }
          const labelWidth = addUnit(props.labelWidth || (formContext == null ? void 0 : formContext.labelWidth) || "");
          if (!props.label && !slots.label) {
            return { marginLeft: labelWidth };
          }
          return {};
        });
        const formItemClasses = computed(() => [
          ns2.b(),
          ns2.m(_size.value),
          ns2.is("error", validateState.value === "error"),
          ns2.is("validating", validateState.value === "validating"),
          ns2.is("success", validateState.value === "success"),
          ns2.is("required", isRequired.value || props.required),
          ns2.is("no-asterisk", formContext == null ? void 0 : formContext.hideRequiredAsterisk),
          { [ns2.m("feedback")]: formContext == null ? void 0 : formContext.statusIcon }
        ]);
        const _inlineMessage = computed(() => isBoolean$1(props.inlineMessage) ? props.inlineMessage : (formContext == null ? void 0 : formContext.inlineMessage) || false);
        const validateClasses = computed(() => [
          ns2.e("error"),
          { [ns2.em("error", "inline")]: _inlineMessage.value }
        ]);
        const propString = computed(() => {
          if (!props.prop)
            return "";
          return isString$3(props.prop) ? props.prop : props.prop.join(".");
        });
        const hasLabel = computed(() => {
          return !!(props.label || slots.label);
        });
        const labelFor = computed(() => {
          return props.for || inputIds.value.length === 1 ? inputIds.value[0] : void 0;
        });
        const isGroup = computed(() => {
          return !labelFor.value && hasLabel.value;
        });
        const isNested = !!parentFormItemContext;
        const fieldValue = computed(() => {
          const model = formContext == null ? void 0 : formContext.model;
          if (!model || !props.prop) {
            return;
          }
          return getProp(model, props.prop).value;
        });
        const _rules = computed(() => {
          const rules2 = props.rules ? castArray$1(props.rules) : [];
          const formRules = formContext == null ? void 0 : formContext.rules;
          if (formRules && props.prop) {
            const _rules2 = getProp(formRules, props.prop).value;
            if (_rules2) {
              rules2.push(...castArray$1(_rules2));
            }
          }
          if (props.required !== void 0) {
            rules2.push({ required: !!props.required });
          }
          return rules2;
        });
        const validateEnabled = computed(() => _rules.value.length > 0);
        const getFilteredRule = (trigger2) => {
          const rules2 = _rules.value;
          return rules2.filter((rule) => {
            if (!rule.trigger || !trigger2)
              return true;
            if (Array.isArray(rule.trigger)) {
              return rule.trigger.includes(trigger2);
            } else {
              return rule.trigger === trigger2;
            }
          }).map(({ trigger: trigger22, ...rule }) => rule);
        };
        const isRequired = computed(() => _rules.value.some((rule) => rule.required === true));
        const shouldShowError = computed(() => {
          var _a2;
          return validateStateDebounced.value === "error" && props.showMessage && ((_a2 = formContext == null ? void 0 : formContext.showMessage) != null ? _a2 : true);
        });
        const currentLabel = computed(() => `${props.label || ""}${(formContext == null ? void 0 : formContext.labelSuffix) || ""}`);
        const setValidationState = (state) => {
          validateState.value = state;
        };
        const onValidationFailed = (error2) => {
          var _a2, _b;
          const { errors: errors2, fields } = error2;
          if (!errors2 || !fields) {
            console.error(error2);
          }
          setValidationState("error");
          validateMessage.value = errors2 ? (_b = (_a2 = errors2 == null ? void 0 : errors2[0]) == null ? void 0 : _a2.message) != null ? _b : `${props.prop} is required` : "";
          formContext == null ? void 0 : formContext.emit("validate", props.prop, false, validateMessage.value);
        };
        const onValidationSucceeded = () => {
          setValidationState("success");
          formContext == null ? void 0 : formContext.emit("validate", props.prop, true, "");
        };
        const doValidate = async (rules2) => {
          const modelName = propString.value;
          const validator = new Schema({
            [modelName]: rules2
          });
          return validator.validate({ [modelName]: fieldValue.value }, { firstFields: true }).then(() => {
            onValidationSucceeded();
            return true;
          }).catch((err) => {
            onValidationFailed(err);
            return Promise.reject(err);
          });
        };
        const validate = async (trigger2, callback) => {
          if (isResettingField) {
            isResettingField = false;
            return false;
          }
          const hasCallback = isFunction$4(callback);
          if (!validateEnabled.value) {
            callback == null ? void 0 : callback(false);
            return false;
          }
          const rules2 = getFilteredRule(trigger2);
          if (rules2.length === 0) {
            callback == null ? void 0 : callback(true);
            return true;
          }
          setValidationState("validating");
          return doValidate(rules2).then(() => {
            callback == null ? void 0 : callback(true);
            return true;
          }).catch((err) => {
            const { fields } = err;
            callback == null ? void 0 : callback(false, fields);
            return hasCallback ? false : Promise.reject(fields);
          });
        };
        const clearValidate = () => {
          setValidationState("");
          validateMessage.value = "";
        };
        const resetField = async () => {
          const model = formContext == null ? void 0 : formContext.model;
          if (!model || !props.prop)
            return;
          const computedValue = getProp(model, props.prop);
          if (!isEqual$1(computedValue.value, initialValue)) {
            isResettingField = true;
            computedValue.value = clone(initialValue);
          }
          await nextTick$1();
          clearValidate();
        };
        const addInputId = (id2) => {
          if (!inputIds.value.includes(id2)) {
            inputIds.value.push(id2);
          }
        };
        const removeInputId = (id2) => {
          inputIds.value = inputIds.value.filter((listId) => listId !== id2);
        };
        watch(() => props.error, (val) => {
          validateMessage.value = val || "";
          setValidationState(val ? "error" : "");
        }, { immediate: true });
        watch(() => props.validateStatus, (val) => setValidationState(val || ""));
        const context = reactive({
          ...toRefs(props),
          $el: formItemRef,
          size: _size,
          validateState,
          labelId,
          inputIds,
          isGroup,
          addInputId,
          removeInputId,
          resetField,
          clearValidate,
          validate
        });
        provide(formItemContextKey, context);
        onMounted(() => {
          if (props.prop) {
            formContext == null ? void 0 : formContext.addField(context);
            initialValue = clone(fieldValue.value);
          }
        });
        onBeforeUnmount(() => {
          formContext == null ? void 0 : formContext.removeField(context);
        });
        expose({
          size: _size,
          validateMessage,
          validateState,
          validate,
          clearValidate,
          resetField
        });
        return (_ctx, _cache) => {
          var _a2;
          return openBlock(), createElementBlock("div", {
            ref_key: "formItemRef",
            ref: formItemRef,
            class: normalizeClass(unref(formItemClasses)),
            role: unref(isGroup) ? "group" : void 0,
            "aria-labelledby": unref(isGroup) ? unref(labelId) : void 0
          }, [
            createVNode(unref(FormLabelWrap), {
              "is-auto-width": unref(labelStyle).width === "auto",
              "update-all": ((_a2 = unref(formContext)) == null ? void 0 : _a2.labelWidth) === "auto"
            }, {
              default: withCtx(() => [
                unref(hasLabel) ? (openBlock(), createBlock(resolveDynamicComponent(unref(labelFor) ? "label" : "div"), {
                  key: 0,
                  id: unref(labelId),
                  for: unref(labelFor),
                  class: normalizeClass(unref(ns2).e("label")),
                  style: normalizeStyle(unref(labelStyle))
                }, {
                  default: withCtx(() => [
                    renderSlot(_ctx.$slots, "label", { label: unref(currentLabel) }, () => [
                      createTextVNode(toDisplayString$1(unref(currentLabel)), 1)
                    ])
                  ]),
                  _: 3
                }, 8, ["id", "for", "class", "style"])) : createCommentVNode("v-if", true)
              ]),
              _: 3
            }, 8, ["is-auto-width", "update-all"]),
            createBaseVNode("div", {
              class: normalizeClass(unref(ns2).e("content")),
              style: normalizeStyle(unref(contentStyle))
            }, [
              renderSlot(_ctx.$slots, "default"),
              createVNode(Transition, {
                name: `${unref(ns2).namespace.value}-zoom-in-top`
              }, {
                default: withCtx(() => [
                  unref(shouldShowError) ? renderSlot(_ctx.$slots, "error", {
                    key: 0,
                    error: validateMessage.value
                  }, () => [
                    createBaseVNode("div", {
                      class: normalizeClass(unref(validateClasses))
                    }, toDisplayString$1(validateMessage.value), 3)
                  ]) : createCommentVNode("v-if", true)
                ]),
                _: 3
              }, 8, ["name"])
            ], 6)
          ], 10, _hoisted_1$B);
        };
      }
    });
    var FormItem = /* @__PURE__ */ _export_sfc$1(_sfc_main$1o, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/form/src/form-item.vue"]]);
    const ElForm = withInstall(Form, {
      FormItem
    });
    const ElFormItem = withNoopInstall(FormItem);
    const imageViewerProps = buildProps({
      urlList: {
        type: definePropType(Array),
        default: () => mutable([])
      },
      zIndex: {
        type: Number
      },
      initialIndex: {
        type: Number,
        default: 0
      },
      infinite: {
        type: Boolean,
        default: true
      },
      hideOnClickModal: {
        type: Boolean,
        default: false
      },
      teleported: {
        type: Boolean,
        default: false
      },
      closeOnPressEscape: {
        type: Boolean,
        default: true
      }
    });
    const imageViewerEmits = {
      close: () => true,
      switch: (index2) => isNumber$1(index2)
    };
    const _hoisted_1$A = ["src"];
    const __default__$13 = {
      name: "ElImageViewer"
    };
    const _sfc_main$1n = /* @__PURE__ */ defineComponent({
      ...__default__$13,
      props: imageViewerProps,
      emits: imageViewerEmits,
      setup(__props, { emit: emit2 }) {
        const props = __props;
        const modes = {
          CONTAIN: {
            name: "contain",
            icon: markRaw(full_screen_default)
          },
          ORIGINAL: {
            name: "original",
            icon: markRaw(scale_to_original_default)
          }
        };
        const mousewheelEventName = isFirefox() ? "DOMMouseScroll" : "mousewheel";
        const { t } = useLocale();
        const ns2 = useNamespace("image-viewer");
        const { nextZIndex } = useZIndex();
        const wrapper = ref();
        const imgRefs = ref([]);
        const scopeEventListener = effectScope();
        const loading = ref(true);
        const index2 = ref(props.initialIndex);
        const mode = shallowRef(modes.CONTAIN);
        const transform2 = ref({
          scale: 1,
          deg: 0,
          offsetX: 0,
          offsetY: 0,
          enableTransition: false
        });
        const isSingle = computed(() => {
          const { urlList } = props;
          return urlList.length <= 1;
        });
        const isFirst = computed(() => {
          return index2.value === 0;
        });
        const isLast = computed(() => {
          return index2.value === props.urlList.length - 1;
        });
        const currentImg = computed(() => {
          return props.urlList[index2.value];
        });
        const imgStyle = computed(() => {
          const { scale, deg, offsetX, offsetY, enableTransition } = transform2.value;
          let translateX = offsetX / scale;
          let translateY = offsetY / scale;
          switch (deg % 360) {
            case 90:
            case -270:
              [translateX, translateY] = [translateY, -translateX];
              break;
            case 180:
            case -180:
              [translateX, translateY] = [-translateX, -translateY];
              break;
            case 270:
            case -90:
              [translateX, translateY] = [-translateY, translateX];
              break;
          }
          const style2 = {
            transform: `scale(${scale}) rotate(${deg}deg) translate(${translateX}px, ${translateY}px)`,
            transition: enableTransition ? "transform .3s" : ""
          };
          if (mode.value.name === modes.CONTAIN.name) {
            style2.maxWidth = style2.maxHeight = "100%";
          }
          return style2;
        });
        const computedZIndex = computed(() => {
          return isNumber$1(props.zIndex) ? props.zIndex : nextZIndex();
        });
        function hide() {
          unregisterEventListener();
          emit2("close");
        }
        function registerEventListener() {
          const keydownHandler = throttle((e2) => {
            switch (e2.code) {
              case EVENT_CODE.esc:
                props.closeOnPressEscape && hide();
                break;
              case EVENT_CODE.space:
                toggleMode();
                break;
              case EVENT_CODE.left:
                prev();
                break;
              case EVENT_CODE.up:
                handleActions("zoomIn");
                break;
              case EVENT_CODE.right:
                next();
                break;
              case EVENT_CODE.down:
                handleActions("zoomOut");
                break;
            }
          });
          const mousewheelHandler = throttle((e2) => {
            const delta = e2.wheelDelta ? e2.wheelDelta : -e2.detail;
            if (delta > 0) {
              handleActions("zoomIn", {
                zoomRate: 1.2,
                enableTransition: false
              });
            } else {
              handleActions("zoomOut", {
                zoomRate: 1.2,
                enableTransition: false
              });
            }
          });
          scopeEventListener.run(() => {
            useEventListener(document, "keydown", keydownHandler);
            useEventListener(document, mousewheelEventName, mousewheelHandler);
          });
        }
        function unregisterEventListener() {
          scopeEventListener.stop();
        }
        function handleImgLoad() {
          loading.value = false;
        }
        function handleImgError(e2) {
          loading.value = false;
          e2.target.alt = t("el.image.error");
        }
        function handleMouseDown(e2) {
          if (loading.value || e2.button !== 0 || !wrapper.value)
            return;
          transform2.value.enableTransition = false;
          const { offsetX, offsetY } = transform2.value;
          const startX = e2.pageX;
          const startY = e2.pageY;
          const dragHandler = throttle((ev) => {
            transform2.value = {
              ...transform2.value,
              offsetX: offsetX + ev.pageX - startX,
              offsetY: offsetY + ev.pageY - startY
            };
          });
          const removeMousemove = useEventListener(document, "mousemove", dragHandler);
          useEventListener(document, "mouseup", () => {
            removeMousemove();
          });
          e2.preventDefault();
        }
        function reset2() {
          transform2.value = {
            scale: 1,
            deg: 0,
            offsetX: 0,
            offsetY: 0,
            enableTransition: false
          };
        }
        function toggleMode() {
          if (loading.value)
            return;
          const modeNames = keysOf(modes);
          const modeValues = Object.values(modes);
          const currentMode = mode.value.name;
          const index22 = modeValues.findIndex((i2) => i2.name === currentMode);
          const nextIndex = (index22 + 1) % modeNames.length;
          mode.value = modes[modeNames[nextIndex]];
          reset2();
        }
        function prev() {
          if (isFirst.value && !props.infinite)
            return;
          const len = props.urlList.length;
          index2.value = (index2.value - 1 + len) % len;
        }
        function next() {
          if (isLast.value && !props.infinite)
            return;
          const len = props.urlList.length;
          index2.value = (index2.value + 1) % len;
        }
        function handleActions(action, options = {}) {
          if (loading.value)
            return;
          const { zoomRate, rotateDeg, enableTransition } = {
            zoomRate: 1.4,
            rotateDeg: 90,
            enableTransition: true,
            ...options
          };
          switch (action) {
            case "zoomOut":
              if (transform2.value.scale > 0.2) {
                transform2.value.scale = Number.parseFloat((transform2.value.scale / zoomRate).toFixed(3));
              }
              break;
            case "zoomIn":
              if (transform2.value.scale < 7) {
                transform2.value.scale = Number.parseFloat((transform2.value.scale * zoomRate).toFixed(3));
              }
              break;
            case "clockwise":
              transform2.value.deg += rotateDeg;
              break;
            case "anticlockwise":
              transform2.value.deg -= rotateDeg;
              break;
          }
          transform2.value.enableTransition = enableTransition;
        }
        watch(currentImg, () => {
          nextTick$1(() => {
            const $img = imgRefs.value[0];
            if (!($img == null ? void 0 : $img.complete)) {
              loading.value = true;
            }
          });
        });
        watch(index2, (val) => {
          reset2();
          emit2("switch", val);
        });
        onMounted(() => {
          var _a2, _b;
          registerEventListener();
          (_b = (_a2 = wrapper.value) == null ? void 0 : _a2.focus) == null ? void 0 : _b.call(_a2);
        });
        return (_ctx, _cache) => {
          return openBlock(), createBlock(Teleport, {
            to: "body",
            disabled: !_ctx.teleported
          }, [
            createVNode(Transition, {
              name: "viewer-fade",
              appear: ""
            }, {
              default: withCtx(() => [
                createBaseVNode("div", {
                  ref_key: "wrapper",
                  ref: wrapper,
                  tabindex: -1,
                  class: normalizeClass(unref(ns2).e("wrapper")),
                  style: normalizeStyle({ zIndex: unref(computedZIndex) })
                }, [
                  createBaseVNode("div", {
                    class: normalizeClass(unref(ns2).e("mask")),
                    onClick: _cache[0] || (_cache[0] = withModifiers(($event) => _ctx.hideOnClickModal && hide(), ["self"]))
                  }, null, 2),
                  createCommentVNode(" CLOSE "),
                  createBaseVNode("span", {
                    class: normalizeClass([unref(ns2).e("btn"), unref(ns2).e("close")]),
                    onClick: hide
                  }, [
                    createVNode(unref(ElIcon), null, {
                      default: withCtx(() => [
                        createVNode(unref(close_default))
                      ]),
                      _: 1
                    })
                  ], 2),
                  createCommentVNode(" ARROW "),
                  !unref(isSingle) ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                    createBaseVNode("span", {
                      class: normalizeClass([
                        unref(ns2).e("btn"),
                        unref(ns2).e("prev"),
                        unref(ns2).is("disabled", !_ctx.infinite && unref(isFirst))
                      ]),
                      onClick: prev
                    }, [
                      createVNode(unref(ElIcon), null, {
                        default: withCtx(() => [
                          createVNode(unref(arrow_left_default))
                        ]),
                        _: 1
                      })
                    ], 2),
                    createBaseVNode("span", {
                      class: normalizeClass([
                        unref(ns2).e("btn"),
                        unref(ns2).e("next"),
                        unref(ns2).is("disabled", !_ctx.infinite && unref(isLast))
                      ]),
                      onClick: next
                    }, [
                      createVNode(unref(ElIcon), null, {
                        default: withCtx(() => [
                          createVNode(unref(arrow_right_default))
                        ]),
                        _: 1
                      })
                    ], 2)
                  ], 64)) : createCommentVNode("v-if", true),
                  createCommentVNode(" ACTIONS "),
                  createBaseVNode("div", {
                    class: normalizeClass([unref(ns2).e("btn"), unref(ns2).e("actions")])
                  }, [
                    createBaseVNode("div", {
                      class: normalizeClass(unref(ns2).e("actions__inner"))
                    }, [
                      createVNode(unref(ElIcon), {
                        onClick: _cache[1] || (_cache[1] = ($event) => handleActions("zoomOut"))
                      }, {
                        default: withCtx(() => [
                          createVNode(unref(zoom_out_default))
                        ]),
                        _: 1
                      }),
                      createVNode(unref(ElIcon), {
                        onClick: _cache[2] || (_cache[2] = ($event) => handleActions("zoomIn"))
                      }, {
                        default: withCtx(() => [
                          createVNode(unref(zoom_in_default))
                        ]),
                        _: 1
                      }),
                      createBaseVNode("i", {
                        class: normalizeClass(unref(ns2).e("actions__divider"))
                      }, null, 2),
                      createVNode(unref(ElIcon), { onClick: toggleMode }, {
                        default: withCtx(() => [
                          (openBlock(), createBlock(resolveDynamicComponent(unref(mode).icon)))
                        ]),
                        _: 1
                      }),
                      createBaseVNode("i", {
                        class: normalizeClass(unref(ns2).e("actions__divider"))
                      }, null, 2),
                      createVNode(unref(ElIcon), {
                        onClick: _cache[3] || (_cache[3] = ($event) => handleActions("anticlockwise"))
                      }, {
                        default: withCtx(() => [
                          createVNode(unref(refresh_left_default))
                        ]),
                        _: 1
                      }),
                      createVNode(unref(ElIcon), {
                        onClick: _cache[4] || (_cache[4] = ($event) => handleActions("clockwise"))
                      }, {
                        default: withCtx(() => [
                          createVNode(unref(refresh_right_default))
                        ]),
                        _: 1
                      })
                    ], 2)
                  ], 2),
                  createCommentVNode(" CANVAS "),
                  createBaseVNode("div", {
                    class: normalizeClass(unref(ns2).e("canvas"))
                  }, [
                    (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.urlList, (url2, i2) => {
                      return withDirectives((openBlock(), createElementBlock("img", {
                        ref_for: true,
                        ref: (el) => imgRefs.value[i2] = el,
                        key: url2,
                        src: url2,
                        style: normalizeStyle(unref(imgStyle)),
                        class: normalizeClass(unref(ns2).e("img")),
                        onLoad: handleImgLoad,
                        onError: handleImgError,
                        onMousedown: handleMouseDown
                      }, null, 46, _hoisted_1$A)), [
                        [vShow, i2 === index2.value]
                      ]);
                    }), 128))
                  ], 2),
                  renderSlot(_ctx.$slots, "default")
                ], 6)
              ]),
              _: 3
            })
          ], 8, ["disabled"]);
        };
      }
    });
    var ImageViewer = /* @__PURE__ */ _export_sfc$1(_sfc_main$1n, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/image-viewer/src/image-viewer.vue"]]);
    const ElImageViewer = withInstall(ImageViewer);
    const imageProps = buildProps({
      hideOnClickModal: {
        type: Boolean,
        default: false
      },
      src: {
        type: String,
        default: ""
      },
      fit: {
        type: String,
        values: ["", "contain", "cover", "fill", "none", "scale-down"],
        default: ""
      },
      loading: {
        type: String,
        values: ["eager", "lazy"]
      },
      lazy: {
        type: Boolean,
        default: false
      },
      scrollContainer: {
        type: definePropType([String, Object])
      },
      previewSrcList: {
        type: definePropType(Array),
        default: () => mutable([])
      },
      previewTeleported: {
        type: Boolean,
        default: false
      },
      zIndex: {
        type: Number
      },
      initialIndex: {
        type: Number,
        default: 0
      },
      infinite: {
        type: Boolean,
        default: true
      },
      closeOnPressEscape: {
        type: Boolean,
        default: true
      }
    });
    const imageEmits = {
      load: (evt) => evt instanceof Event,
      error: (evt) => evt instanceof Event,
      switch: (val) => isNumber$1(val),
      close: () => true,
      show: () => true
    };
    const _hoisted_1$z = ["src", "loading"];
    const _hoisted_2$m = { key: 0 };
    const __default__$12 = {
      name: "ElImage",
      inheritAttrs: false
    };
    const _sfc_main$1m = /* @__PURE__ */ defineComponent({
      ...__default__$12,
      props: imageProps,
      emits: imageEmits,
      setup(__props, { emit: emit2 }) {
        const props = __props;
        let prevOverflow = "";
        const { t } = useLocale();
        const ns2 = useNamespace("image");
        const rawAttrs = useAttrs$1();
        const attrs = useAttrs();
        const imageSrc = ref();
        const hasLoadError = ref(false);
        const isLoading = ref(true);
        const showViewer = ref(false);
        const container = ref();
        const _scrollContainer = ref();
        const supportLoading = isClient && "loading" in HTMLImageElement.prototype;
        let stopScrollListener;
        let stopWheelListener;
        const containerStyle = computed(() => rawAttrs.style);
        const imageStyle = computed(() => {
          const { fit } = props;
          if (isClient && fit) {
            return { objectFit: fit };
          }
          return {};
        });
        const preview = computed(() => {
          const { previewSrcList } = props;
          return Array.isArray(previewSrcList) && previewSrcList.length > 0;
        });
        const imageIndex = computed(() => {
          const { previewSrcList, initialIndex } = props;
          let previewIndex = initialIndex;
          if (initialIndex > previewSrcList.length - 1) {
            previewIndex = 0;
          }
          return previewIndex;
        });
        const isManual = computed(() => {
          if (props.loading === "eager")
            return false;
          return !supportLoading && props.loading === "lazy" || props.lazy;
        });
        const loadImage = () => {
          if (!isClient)
            return;
          isLoading.value = true;
          hasLoadError.value = false;
          imageSrc.value = props.src;
        };
        function handleLoad(event) {
          isLoading.value = false;
          hasLoadError.value = false;
          emit2("load", event);
        }
        function handleError2(event) {
          isLoading.value = false;
          hasLoadError.value = true;
          emit2("error", event);
        }
        function handleLazyLoad() {
          if (isInContainer(container.value, _scrollContainer.value)) {
            loadImage();
            removeLazyLoadListener();
          }
        }
        const lazyLoadHandler = useThrottleFn(handleLazyLoad, 200);
        async function addLazyLoadListener() {
          var _a2;
          if (!isClient)
            return;
          await nextTick$1();
          const { scrollContainer } = props;
          if (isElement$1(scrollContainer)) {
            _scrollContainer.value = scrollContainer;
          } else if (isString$3(scrollContainer) && scrollContainer !== "") {
            _scrollContainer.value = (_a2 = document.querySelector(scrollContainer)) != null ? _a2 : void 0;
          } else if (container.value) {
            _scrollContainer.value = getScrollContainer(container.value);
          }
          if (_scrollContainer.value) {
            stopScrollListener = useEventListener(_scrollContainer, "scroll", lazyLoadHandler);
            setTimeout(() => handleLazyLoad(), 100);
          }
        }
        function removeLazyLoadListener() {
          if (!isClient || !_scrollContainer.value || !lazyLoadHandler)
            return;
          stopScrollListener == null ? void 0 : stopScrollListener();
          _scrollContainer.value = void 0;
        }
        function wheelHandler(e2) {
          if (!e2.ctrlKey)
            return;
          if (e2.deltaY < 0) {
            e2.preventDefault();
            return false;
          } else if (e2.deltaY > 0) {
            e2.preventDefault();
            return false;
          }
        }
        function clickHandler() {
          if (!preview.value)
            return;
          stopWheelListener = useEventListener("wheel", wheelHandler, {
            passive: false
          });
          prevOverflow = document.body.style.overflow;
          document.body.style.overflow = "hidden";
          showViewer.value = true;
          emit2("show");
        }
        function closeViewer() {
          stopWheelListener == null ? void 0 : stopWheelListener();
          document.body.style.overflow = prevOverflow;
          showViewer.value = false;
          emit2("close");
        }
        function switchViewer(val) {
          emit2("switch", val);
        }
        watch(() => props.src, () => {
          if (isManual.value) {
            isLoading.value = true;
            hasLoadError.value = false;
            removeLazyLoadListener();
            addLazyLoadListener();
          } else {
            loadImage();
          }
        });
        onMounted(() => {
          if (isManual.value) {
            addLazyLoadListener();
          } else {
            loadImage();
          }
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            ref_key: "container",
            ref: container,
            class: normalizeClass([unref(ns2).b(), _ctx.$attrs.class]),
            style: normalizeStyle(unref(containerStyle))
          }, [
            imageSrc.value !== void 0 && !hasLoadError.value ? (openBlock(), createElementBlock("img", mergeProps({ key: 0 }, unref(attrs), {
              src: imageSrc.value,
              loading: _ctx.loading,
              style: unref(imageStyle),
              class: [
                unref(ns2).e("inner"),
                unref(preview) && unref(ns2).e("preview"),
                isLoading.value && unref(ns2).is("loading")
              ],
              onClick: clickHandler,
              onLoad: handleLoad,
              onError: handleError2
            }), null, 16, _hoisted_1$z)) : createCommentVNode("v-if", true),
            isLoading.value || hasLoadError.value ? (openBlock(), createElementBlock("div", {
              key: 1,
              class: normalizeClass(unref(ns2).e("wrapper"))
            }, [
              isLoading.value ? renderSlot(_ctx.$slots, "placeholder", { key: 0 }, () => [
                createBaseVNode("div", {
                  class: normalizeClass(unref(ns2).e("placeholder"))
                }, null, 2)
              ]) : hasLoadError.value ? renderSlot(_ctx.$slots, "error", { key: 1 }, () => [
                createBaseVNode("div", {
                  class: normalizeClass(unref(ns2).e("error"))
                }, toDisplayString$1(unref(t)("el.image.error")), 3)
              ]) : createCommentVNode("v-if", true)
            ], 2)) : createCommentVNode("v-if", true),
            unref(preview) ? (openBlock(), createElementBlock(Fragment, { key: 2 }, [
              showViewer.value ? (openBlock(), createBlock(unref(ElImageViewer), {
                key: 0,
                "z-index": _ctx.zIndex,
                "initial-index": unref(imageIndex),
                infinite: _ctx.infinite,
                "url-list": _ctx.previewSrcList,
                "hide-on-click-modal": _ctx.hideOnClickModal,
                teleported: _ctx.previewTeleported,
                "close-on-press-escape": _ctx.closeOnPressEscape,
                onClose: closeViewer,
                onSwitch: switchViewer
              }, {
                default: withCtx(() => [
                  _ctx.$slots.viewer ? (openBlock(), createElementBlock("div", _hoisted_2$m, [
                    renderSlot(_ctx.$slots, "viewer")
                  ])) : createCommentVNode("v-if", true)
                ]),
                _: 3
              }, 8, ["z-index", "initial-index", "infinite", "url-list", "hide-on-click-modal", "teleported", "close-on-press-escape"])) : createCommentVNode("v-if", true)
            ], 64)) : createCommentVNode("v-if", true)
          ], 6);
        };
      }
    });
    var Image = /* @__PURE__ */ _export_sfc$1(_sfc_main$1m, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/image/src/image.vue"]]);
    const ElImage = withInstall(Image);
    const inputNumberProps = buildProps({
      id: {
        type: String,
        default: void 0
      },
      step: {
        type: Number,
        default: 1
      },
      stepStrictly: Boolean,
      max: {
        type: Number,
        default: Number.POSITIVE_INFINITY
      },
      min: {
        type: Number,
        default: Number.NEGATIVE_INFINITY
      },
      modelValue: Number,
      disabled: Boolean,
      size: useSizeProp,
      controls: {
        type: Boolean,
        default: true
      },
      controlsPosition: {
        type: String,
        default: "",
        values: ["", "right"]
      },
      valueOnClear: {
        type: [String, Number, null],
        validator: (val) => val === null || isNumber$1(val) || ["min", "max"].includes(val),
        default: null
      },
      name: String,
      label: String,
      placeholder: String,
      precision: {
        type: Number,
        validator: (val) => val >= 0 && val === Number.parseInt(`${val}`, 10)
      },
      validateEvent: {
        type: Boolean,
        default: true
      }
    });
    const inputNumberEmits = {
      [CHANGE_EVENT]: (prev, cur) => prev !== cur,
      blur: (e2) => e2 instanceof FocusEvent,
      focus: (e2) => e2 instanceof FocusEvent,
      [INPUT_EVENT]: (val) => isNumber$1(val) || isNil(val),
      [UPDATE_MODEL_EVENT]: (val) => isNumber$1(val) || isNil(val)
    };
    const _hoisted_1$y = ["aria-label", "onKeydown"];
    const _hoisted_2$l = ["aria-label", "onKeydown"];
    const __default__$11 = {
      name: "ElInputNumber"
    };
    const _sfc_main$1l = /* @__PURE__ */ defineComponent({
      ...__default__$11,
      props: inputNumberProps,
      emits: inputNumberEmits,
      setup(__props, { expose, emit: emit2 }) {
        const props = __props;
        const { t } = useLocale();
        const ns2 = useNamespace("input-number");
        const input = ref();
        const data = reactive({
          currentValue: props.modelValue,
          userInput: null
        });
        const { formItem } = useFormItem();
        const minDisabled = computed(() => isNumber$1(props.modelValue) && ensurePrecision(props.modelValue, -1) < props.min);
        const maxDisabled = computed(() => isNumber$1(props.modelValue) && ensurePrecision(props.modelValue) > props.max);
        const numPrecision = computed(() => {
          const stepPrecision = getPrecision(props.step);
          if (!isUndefined$1(props.precision)) {
            if (stepPrecision > props.precision)
              ;
            return props.precision;
          } else {
            return Math.max(getPrecision(props.modelValue), stepPrecision);
          }
        });
        const controlsAtRight = computed(() => {
          return props.controls && props.controlsPosition === "right";
        });
        const inputNumberSize = useSize();
        const inputNumberDisabled = useDisabled$1();
        const displayValue = computed(() => {
          if (data.userInput !== null) {
            return data.userInput;
          }
          let currentValue = data.currentValue;
          if (isNil(currentValue))
            return "";
          if (isNumber$1(currentValue)) {
            if (Number.isNaN(currentValue))
              return "";
            if (!isUndefined$1(props.precision)) {
              currentValue = currentValue.toFixed(props.precision);
            }
          }
          return currentValue;
        });
        const toPrecision = (num, pre) => {
          if (isUndefined$1(pre))
            pre = numPrecision.value;
          if (pre === 0)
            return Math.round(num);
          let snum = String(num);
          const pointPos = snum.indexOf(".");
          if (pointPos === -1)
            return num;
          const nums = snum.replace(".", "").split("");
          const datum = nums[pointPos + pre];
          if (!datum)
            return num;
          const length = snum.length;
          if (snum.charAt(length - 1) === "5") {
            snum = `${snum.slice(0, Math.max(0, length - 1))}6`;
          }
          return Number.parseFloat(Number(snum).toFixed(pre));
        };
        const getPrecision = (value) => {
          if (isNil(value))
            return 0;
          const valueString = value.toString();
          const dotPosition = valueString.indexOf(".");
          let precision = 0;
          if (dotPosition !== -1) {
            precision = valueString.length - dotPosition - 1;
          }
          return precision;
        };
        const ensurePrecision = (val, coefficient = 1) => {
          if (!isNumber$1(val))
            return data.currentValue;
          return toPrecision(val + props.step * coefficient);
        };
        const increase = () => {
          if (inputNumberDisabled.value || maxDisabled.value)
            return;
          const value = props.modelValue || 0;
          const newVal = ensurePrecision(value);
          setCurrentValue(newVal);
        };
        const decrease = () => {
          if (inputNumberDisabled.value || minDisabled.value)
            return;
          const value = props.modelValue || 0;
          const newVal = ensurePrecision(value, -1);
          setCurrentValue(newVal);
        };
        const verifyValue = (value, update) => {
          const { max: max2, min: min2, step, precision, stepStrictly, valueOnClear } = props;
          let newVal = Number(value);
          if (isNil(value) || Number.isNaN(newVal)) {
            return null;
          }
          if (value === "") {
            if (valueOnClear === null) {
              return null;
            }
            newVal = isString$3(valueOnClear) ? { min: min2, max: max2 }[valueOnClear] : valueOnClear;
          }
          if (stepStrictly) {
            newVal = toPrecision(Math.round(newVal / step) * step, precision);
          }
          if (!isUndefined$1(precision)) {
            newVal = toPrecision(newVal, precision);
          }
          if (newVal > max2 || newVal < min2) {
            newVal = newVal > max2 ? max2 : min2;
            update && emit2("update:modelValue", newVal);
          }
          return newVal;
        };
        const setCurrentValue = (value) => {
          var _a2;
          const oldVal = data.currentValue;
          const newVal = verifyValue(value);
          if (oldVal === newVal)
            return;
          data.userInput = null;
          emit2("update:modelValue", newVal);
          emit2("input", newVal);
          emit2("change", newVal, oldVal);
          if (props.validateEvent) {
            (_a2 = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a2.call(formItem, "change").catch((err) => debugWarn());
          }
          data.currentValue = newVal;
        };
        const handleInput = (value) => {
          return data.userInput = value;
        };
        const handleInputChange = (value) => {
          const newVal = value !== "" ? Number(value) : "";
          if (isNumber$1(newVal) && !Number.isNaN(newVal) || value === "") {
            setCurrentValue(newVal);
          }
          data.userInput = null;
        };
        const focus = () => {
          var _a2, _b;
          (_b = (_a2 = input.value) == null ? void 0 : _a2.focus) == null ? void 0 : _b.call(_a2);
        };
        const blur = () => {
          var _a2, _b;
          (_b = (_a2 = input.value) == null ? void 0 : _a2.blur) == null ? void 0 : _b.call(_a2);
        };
        const handleFocus = (event) => {
          emit2("focus", event);
        };
        const handleBlur = (event) => {
          var _a2;
          emit2("blur", event);
          if (props.validateEvent) {
            (_a2 = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a2.call(formItem, "blur").catch((err) => debugWarn());
          }
        };
        watch(() => props.modelValue, (value) => {
          data.currentValue = verifyValue(value, true);
          data.userInput = null;
        }, { immediate: true });
        onMounted(() => {
          var _a2;
          const { min: min2, max: max2, modelValue } = props;
          const innerInput = (_a2 = input.value) == null ? void 0 : _a2.input;
          innerInput.setAttribute("role", "spinbutton");
          if (Number.isFinite(max2)) {
            innerInput.setAttribute("aria-valuemax", String(max2));
          } else {
            innerInput.removeAttribute("aria-valuemax");
          }
          if (Number.isFinite(min2)) {
            innerInput.setAttribute("aria-valuemin", String(min2));
          } else {
            innerInput.removeAttribute("aria-valuemin");
          }
          innerInput.setAttribute("aria-valuenow", String(data.currentValue));
          innerInput.setAttribute("aria-disabled", String(inputNumberDisabled.value));
          if (!isNumber$1(modelValue) && modelValue != null) {
            let val = Number(modelValue);
            if (Number.isNaN(val)) {
              val = null;
            }
            emit2("update:modelValue", val);
          }
        });
        onUpdated(() => {
          var _a2;
          const innerInput = (_a2 = input.value) == null ? void 0 : _a2.input;
          innerInput == null ? void 0 : innerInput.setAttribute("aria-valuenow", `${data.currentValue}`);
        });
        expose({
          focus,
          blur
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            class: normalizeClass([
              unref(ns2).b(),
              unref(ns2).m(unref(inputNumberSize)),
              unref(ns2).is("disabled", unref(inputNumberDisabled)),
              unref(ns2).is("without-controls", !_ctx.controls),
              unref(ns2).is("controls-right", unref(controlsAtRight))
            ]),
            onDragstart: _cache[0] || (_cache[0] = withModifiers(() => {
            }, ["prevent"]))
          }, [
            _ctx.controls ? withDirectives((openBlock(), createElementBlock("span", {
              key: 0,
              role: "button",
              "aria-label": unref(t)("el.inputNumber.decrease"),
              class: normalizeClass([unref(ns2).e("decrease"), unref(ns2).is("disabled", unref(minDisabled))]),
              onKeydown: withKeys(decrease, ["enter"])
            }, [
              createVNode(unref(ElIcon), null, {
                default: withCtx(() => [
                  unref(controlsAtRight) ? (openBlock(), createBlock(unref(arrow_down_default), { key: 0 })) : (openBlock(), createBlock(unref(minus_default), { key: 1 }))
                ]),
                _: 1
              })
            ], 42, _hoisted_1$y)), [
              [unref(RepeatClick), decrease]
            ]) : createCommentVNode("v-if", true),
            _ctx.controls ? withDirectives((openBlock(), createElementBlock("span", {
              key: 1,
              role: "button",
              "aria-label": unref(t)("el.inputNumber.increase"),
              class: normalizeClass([unref(ns2).e("increase"), unref(ns2).is("disabled", unref(maxDisabled))]),
              onKeydown: withKeys(increase, ["enter"])
            }, [
              createVNode(unref(ElIcon), null, {
                default: withCtx(() => [
                  unref(controlsAtRight) ? (openBlock(), createBlock(unref(arrow_up_default), { key: 0 })) : (openBlock(), createBlock(unref(plus_default), { key: 1 }))
                ]),
                _: 1
              })
            ], 42, _hoisted_2$l)), [
              [unref(RepeatClick), increase]
            ]) : createCommentVNode("v-if", true),
            createVNode(unref(ElInput), {
              id: _ctx.id,
              ref_key: "input",
              ref: input,
              type: "number",
              step: _ctx.step,
              "model-value": unref(displayValue),
              placeholder: _ctx.placeholder,
              disabled: unref(inputNumberDisabled),
              size: unref(inputNumberSize),
              max: _ctx.max,
              min: _ctx.min,
              name: _ctx.name,
              label: _ctx.label,
              "validate-event": false,
              onKeydown: [
                withKeys(withModifiers(increase, ["prevent"]), ["up"]),
                withKeys(withModifiers(decrease, ["prevent"]), ["down"])
              ],
              onBlur: handleBlur,
              onFocus: handleFocus,
              onInput: handleInput,
              onChange: handleInputChange
            }, null, 8, ["id", "step", "model-value", "placeholder", "disabled", "size", "max", "min", "name", "label", "onKeydown"])
          ], 34);
        };
      }
    });
    var InputNumber = /* @__PURE__ */ _export_sfc$1(_sfc_main$1l, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/input-number/src/input-number.vue"]]);
    const ElInputNumber = withInstall(InputNumber);
    const linkProps = buildProps({
      type: {
        type: String,
        values: ["primary", "success", "warning", "info", "danger", "default"],
        default: "default"
      },
      underline: {
        type: Boolean,
        default: true
      },
      disabled: { type: Boolean, default: false },
      href: { type: String, default: "" },
      icon: {
        type: iconPropType,
        default: ""
      }
    });
    const linkEmits = {
      click: (evt) => evt instanceof MouseEvent
    };
    const _hoisted_1$x = ["href"];
    const __default__$10 = {
      name: "ElLink"
    };
    const _sfc_main$1k = /* @__PURE__ */ defineComponent({
      ...__default__$10,
      props: linkProps,
      emits: linkEmits,
      setup(__props, { emit: emit2 }) {
        const props = __props;
        const ns2 = useNamespace("link");
        function handleClick(event) {
          if (!props.disabled)
            emit2("click", event);
        }
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("a", {
            class: normalizeClass([
              unref(ns2).b(),
              unref(ns2).m(_ctx.type),
              unref(ns2).is("disabled", _ctx.disabled),
              unref(ns2).is("underline", _ctx.underline && !_ctx.disabled)
            ]),
            href: _ctx.disabled || !_ctx.href ? void 0 : _ctx.href,
            onClick: handleClick
          }, [
            _ctx.icon ? (openBlock(), createBlock(unref(ElIcon), { key: 0 }, {
              default: withCtx(() => [
                (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))
              ]),
              _: 1
            })) : createCommentVNode("v-if", true),
            _ctx.$slots.default ? (openBlock(), createElementBlock("span", {
              key: 1,
              class: normalizeClass(unref(ns2).e("inner"))
            }, [
              renderSlot(_ctx.$slots, "default")
            ], 2)) : createCommentVNode("v-if", true),
            _ctx.$slots.icon ? renderSlot(_ctx.$slots, "icon", { key: 2 }) : createCommentVNode("v-if", true)
          ], 10, _hoisted_1$x);
        };
      }
    });
    var Link = /* @__PURE__ */ _export_sfc$1(_sfc_main$1k, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/link/src/link.vue"]]);
    const ElLink = withInstall(Link);
    class SubMenu$1 {
      constructor(parent, domNode) {
        this.parent = parent;
        this.domNode = domNode;
        this.subIndex = 0;
        this.subIndex = 0;
        this.init();
      }
      init() {
        this.subMenuItems = this.domNode.querySelectorAll("li");
        this.addListeners();
      }
      gotoSubIndex(idx) {
        if (idx === this.subMenuItems.length) {
          idx = 0;
        } else if (idx < 0) {
          idx = this.subMenuItems.length - 1;
        }
        this.subMenuItems[idx].focus();
        this.subIndex = idx;
      }
      addListeners() {
        const parentNode = this.parent.domNode;
        Array.prototype.forEach.call(this.subMenuItems, (el) => {
          el.addEventListener("keydown", (event) => {
            let prevDef = false;
            switch (event.code) {
              case EVENT_CODE.down: {
                this.gotoSubIndex(this.subIndex + 1);
                prevDef = true;
                break;
              }
              case EVENT_CODE.up: {
                this.gotoSubIndex(this.subIndex - 1);
                prevDef = true;
                break;
              }
              case EVENT_CODE.tab: {
                triggerEvent(parentNode, "mouseleave");
                break;
              }
              case EVENT_CODE.enter:
              case EVENT_CODE.space: {
                prevDef = true;
                event.currentTarget.click();
                break;
              }
            }
            if (prevDef) {
              event.preventDefault();
              event.stopPropagation();
            }
            return false;
          });
        });
      }
    }
    class MenuItem$1 {
      constructor(domNode, namespace) {
        this.domNode = domNode;
        this.submenu = null;
        this.submenu = null;
        this.init(namespace);
      }
      init(namespace) {
        this.domNode.setAttribute("tabindex", "0");
        const menuChild = this.domNode.querySelector(`.${namespace}-menu`);
        if (menuChild) {
          this.submenu = new SubMenu$1(this, menuChild);
        }
        this.addListeners();
      }
      addListeners() {
        this.domNode.addEventListener("keydown", (event) => {
          let prevDef = false;
          switch (event.code) {
            case EVENT_CODE.down: {
              triggerEvent(event.currentTarget, "mouseenter");
              this.submenu && this.submenu.gotoSubIndex(0);
              prevDef = true;
              break;
            }
            case EVENT_CODE.up: {
              triggerEvent(event.currentTarget, "mouseenter");
              this.submenu && this.submenu.gotoSubIndex(this.submenu.subMenuItems.length - 1);
              prevDef = true;
              break;
            }
            case EVENT_CODE.tab: {
              triggerEvent(event.currentTarget, "mouseleave");
              break;
            }
            case EVENT_CODE.enter:
            case EVENT_CODE.space: {
              prevDef = true;
              event.currentTarget.click();
              break;
            }
          }
          if (prevDef) {
            event.preventDefault();
          }
        });
      }
    }
    class Menu$1 {
      constructor(domNode, namespace) {
        this.domNode = domNode;
        this.init(namespace);
      }
      init(namespace) {
        const menuChildren = this.domNode.childNodes;
        Array.from(menuChildren).forEach((child) => {
          if (child.nodeType === 1) {
            new MenuItem$1(child, namespace);
          }
        });
      }
    }
    const _sfc_main$1j = defineComponent({
      name: "ElMenuCollapseTransition",
      setup() {
        const ns2 = useNamespace("menu");
        const listeners = {
          onBeforeEnter: (el) => el.style.opacity = "0.2",
          onEnter(el, done2) {
            addClass(el, `${ns2.namespace.value}-opacity-transition`);
            el.style.opacity = "1";
            done2();
          },
          onAfterEnter(el) {
            removeClass(el, `${ns2.namespace.value}-opacity-transition`);
            el.style.opacity = "";
          },
          onBeforeLeave(el) {
            if (!el.dataset) {
              el.dataset = {};
            }
            if (hasClass(el, ns2.m("collapse"))) {
              removeClass(el, ns2.m("collapse"));
              el.dataset.oldOverflow = el.style.overflow;
              el.dataset.scrollWidth = el.clientWidth.toString();
              addClass(el, ns2.m("collapse"));
            } else {
              addClass(el, ns2.m("collapse"));
              el.dataset.oldOverflow = el.style.overflow;
              el.dataset.scrollWidth = el.clientWidth.toString();
              removeClass(el, ns2.m("collapse"));
            }
            el.style.width = `${el.scrollWidth}px`;
            el.style.overflow = "hidden";
          },
          onLeave(el) {
            addClass(el, "horizontal-collapse-transition");
            el.style.width = `${el.dataset.scrollWidth}px`;
          }
        };
        return {
          listeners
        };
      }
    });
    function _sfc_render$h(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createBlock(Transition, mergeProps({ mode: "out-in" }, _ctx.listeners), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16);
    }
    var ElMenuCollapseTransition = /* @__PURE__ */ _export_sfc$1(_sfc_main$1j, [["render", _sfc_render$h], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/menu/src/menu-collapse-transition.vue"]]);
    function useMenu(instance, currentIndex) {
      const indexPath = computed(() => {
        let parent = instance.parent;
        const path = [currentIndex.value];
        while (parent.type.name !== "ElMenu") {
          if (parent.props.index) {
            path.unshift(parent.props.index);
          }
          parent = parent.parent;
        }
        return path;
      });
      const parentMenu = computed(() => {
        let parent = instance.parent;
        while (parent && !["ElMenu", "ElSubMenu"].includes(parent.type.name)) {
          parent = parent.parent;
        }
        return parent;
      });
      return {
        parentMenu,
        indexPath
      };
    }
    function useMenuColor(props) {
      const menuBarColor = computed(() => {
        const color = props.backgroundColor;
        if (!color) {
          return "";
        } else {
          return new TinyColor(color).shade(20).toString();
        }
      });
      return menuBarColor;
    }
    const useMenuCssVar = (props, level) => {
      const ns2 = useNamespace("menu");
      return computed(() => {
        return ns2.cssVarBlock({
          "text-color": props.textColor || "",
          "hover-text-color": props.textColor || "",
          "bg-color": props.backgroundColor || "",
          "hover-bg-color": useMenuColor(props).value || "",
          "active-color": props.activeTextColor || "",
          level: `${level}`
        });
      });
    };
    const subMenuProps = buildProps({
      index: {
        type: String,
        required: true
      },
      showTimeout: {
        type: Number,
        default: 300
      },
      hideTimeout: {
        type: Number,
        default: 300
      },
      popperClass: String,
      disabled: Boolean,
      popperAppendToBody: {
        type: Boolean,
        default: void 0
      },
      popperOffset: {
        type: Number,
        default: 6
      }
    });
    const COMPONENT_NAME$8 = "ElSubMenu";
    var SubMenu = defineComponent({
      name: COMPONENT_NAME$8,
      props: subMenuProps,
      setup(props, { slots, expose }) {
        const instance = getCurrentInstance();
        const { indexPath, parentMenu } = useMenu(instance, computed(() => props.index));
        const nsMenu = useNamespace("menu");
        const nsSubMenu = useNamespace("sub-menu");
        const rootMenu = inject("rootMenu");
        if (!rootMenu)
          throwError(COMPONENT_NAME$8, "can not inject root menu");
        const subMenu = inject(`subMenu:${parentMenu.value.uid}`);
        if (!subMenu)
          throwError(COMPONENT_NAME$8, "can not inject sub menu");
        const items = ref({});
        const subMenus = ref({});
        let timeout;
        const mouseInChild = ref(false);
        const verticalTitleRef = ref();
        const vPopper = ref(null);
        const currentPlacement = computed(() => mode.value === "horizontal" && isFirstLevel.value ? "bottom-start" : "right-start");
        const subMenuTitleIcon = computed(() => {
          return mode.value === "horizontal" && isFirstLevel.value || mode.value === "vertical" && !rootMenu.props.collapse ? arrow_down_default : arrow_right_default;
        });
        const isFirstLevel = computed(() => {
          return subMenu.level === 0;
        });
        const appendToBody = computed(() => {
          return props.popperAppendToBody === void 0 ? isFirstLevel.value : Boolean(props.popperAppendToBody);
        });
        const menuTransitionName = computed(() => rootMenu.props.collapse ? `${nsMenu.namespace.value}-zoom-in-left` : `${nsMenu.namespace.value}-zoom-in-top`);
        const fallbackPlacements = computed(() => mode.value === "horizontal" && isFirstLevel.value ? [
          "bottom-start",
          "bottom-end",
          "top-start",
          "top-end",
          "right-start",
          "left-start"
        ] : [
          "right-start",
          "left-start",
          "bottom-start",
          "bottom-end",
          "top-start",
          "top-end"
        ]);
        const opened = computed(() => rootMenu.openedMenus.includes(props.index));
        const active = computed(() => {
          let isActive = false;
          Object.values(items.value).forEach((item2) => {
            if (item2.active) {
              isActive = true;
            }
          });
          Object.values(subMenus.value).forEach((subItem) => {
            if (subItem.active) {
              isActive = true;
            }
          });
          return isActive;
        });
        const backgroundColor = computed(() => rootMenu.props.backgroundColor || "");
        const activeTextColor = computed(() => rootMenu.props.activeTextColor || "");
        const textColor = computed(() => rootMenu.props.textColor || "");
        const mode = computed(() => rootMenu.props.mode);
        const item = reactive({
          index: props.index,
          indexPath,
          active
        });
        const titleStyle = computed(() => {
          if (mode.value !== "horizontal") {
            return {
              color: textColor.value
            };
          }
          return {
            borderBottomColor: active.value ? rootMenu.props.activeTextColor ? activeTextColor.value : "" : "transparent",
            color: active.value ? activeTextColor.value : textColor.value
          };
        });
        const doDestroy = () => {
          var _a2, _b, _c;
          return (_c = (_b = (_a2 = vPopper.value) == null ? void 0 : _a2.popperRef) == null ? void 0 : _b.popperInstanceRef) == null ? void 0 : _c.destroy();
        };
        const handleCollapseToggle = (value) => {
          if (!value) {
            doDestroy();
          }
        };
        const handleClick = () => {
          if (rootMenu.props.menuTrigger === "hover" && rootMenu.props.mode === "horizontal" || rootMenu.props.collapse && rootMenu.props.mode === "vertical" || props.disabled)
            return;
          rootMenu.handleSubMenuClick({
            index: props.index,
            indexPath: indexPath.value,
            active: active.value
          });
        };
        const handleMouseenter = (event, showTimeout = props.showTimeout) => {
          var _a2;
          if (event.type === "focus") {
            return;
          }
          if (rootMenu.props.menuTrigger === "click" && rootMenu.props.mode === "horizontal" || !rootMenu.props.collapse && rootMenu.props.mode === "vertical" || props.disabled) {
            return;
          }
          subMenu.mouseInChild.value = true;
          timeout == null ? void 0 : timeout();
          ({ stop: timeout } = useTimeoutFn(() => {
            rootMenu.openMenu(props.index, indexPath.value);
          }, showTimeout));
          if (appendToBody.value) {
            (_a2 = parentMenu.value.vnode.el) == null ? void 0 : _a2.dispatchEvent(new MouseEvent("mouseenter"));
          }
        };
        const handleMouseleave = (deepDispatch = false) => {
          var _a2, _b;
          if (rootMenu.props.menuTrigger === "click" && rootMenu.props.mode === "horizontal" || !rootMenu.props.collapse && rootMenu.props.mode === "vertical") {
            return;
          }
          timeout == null ? void 0 : timeout();
          subMenu.mouseInChild.value = false;
          ({ stop: timeout } = useTimeoutFn(() => !mouseInChild.value && rootMenu.closeMenu(props.index, indexPath.value), props.hideTimeout));
          if (appendToBody.value && deepDispatch) {
            if (((_a2 = instance.parent) == null ? void 0 : _a2.type.name) === "ElSubMenu") {
              (_b = subMenu.handleMouseleave) == null ? void 0 : _b.call(subMenu, true);
            }
          }
        };
        watch(() => rootMenu.props.collapse, (value) => handleCollapseToggle(Boolean(value)));
        {
          const addSubMenu = (item2) => {
            subMenus.value[item2.index] = item2;
          };
          const removeSubMenu = (item2) => {
            delete subMenus.value[item2.index];
          };
          provide(`subMenu:${instance.uid}`, {
            addSubMenu,
            removeSubMenu,
            handleMouseleave,
            mouseInChild,
            level: subMenu.level + 1
          });
        }
        expose({
          opened
        });
        onMounted(() => {
          rootMenu.addSubMenu(item);
          subMenu.addSubMenu(item);
        });
        onBeforeUnmount(() => {
          subMenu.removeSubMenu(item);
          rootMenu.removeSubMenu(item);
        });
        return () => {
          var _a2;
          const titleTag = [
            (_a2 = slots.title) == null ? void 0 : _a2.call(slots),
            h$2(ElIcon, {
              class: nsSubMenu.e("icon-arrow")
            }, { default: () => h$2(subMenuTitleIcon.value) })
          ];
          const ulStyle = useMenuCssVar(rootMenu.props, subMenu.level + 1);
          const child = rootMenu.isMenuPopup ? h$2(ElTooltip, {
            ref: vPopper,
            visible: opened.value,
            effect: "light",
            pure: true,
            offset: props.popperOffset,
            showArrow: false,
            persistent: true,
            popperClass: props.popperClass,
            placement: currentPlacement.value,
            teleported: appendToBody.value,
            fallbackPlacements: fallbackPlacements.value,
            transition: menuTransitionName.value,
            gpuAcceleration: false
          }, {
            content: () => {
              var _a22;
              return h$2("div", {
                class: [
                  nsMenu.m(mode.value),
                  nsMenu.m("popup-container"),
                  props.popperClass
                ],
                onMouseenter: (evt) => handleMouseenter(evt, 100),
                onMouseleave: () => handleMouseleave(true),
                onFocus: (evt) => handleMouseenter(evt, 100)
              }, [
                h$2("ul", {
                  class: [
                    nsMenu.b(),
                    nsMenu.m("popup"),
                    nsMenu.m(`popup-${currentPlacement.value}`)
                  ],
                  style: ulStyle.value
                }, [(_a22 = slots.default) == null ? void 0 : _a22.call(slots)])
              ]);
            },
            default: () => h$2("div", {
              class: nsSubMenu.e("title"),
              style: [
                titleStyle.value,
                { backgroundColor: backgroundColor.value }
              ],
              onClick: handleClick
            }, titleTag)
          }) : h$2(Fragment, {}, [
            h$2("div", {
              class: nsSubMenu.e("title"),
              style: [
                titleStyle.value,
                { backgroundColor: backgroundColor.value }
              ],
              ref: verticalTitleRef,
              onClick: handleClick
            }, titleTag),
            h$2(_CollapseTransition, {}, {
              default: () => {
                var _a22;
                return withDirectives(h$2("ul", {
                  role: "menu",
                  class: [nsMenu.b(), nsMenu.m("inline")],
                  style: ulStyle.value
                }, [(_a22 = slots.default) == null ? void 0 : _a22.call(slots)]), [[vShow, opened.value]]);
              }
            })
          ]);
          return h$2("li", {
            class: [
              nsSubMenu.b(),
              nsSubMenu.is("active", active.value),
              nsSubMenu.is("opened", opened.value),
              nsSubMenu.is("disabled", props.disabled)
            ],
            role: "menuitem",
            ariaHaspopup: true,
            ariaExpanded: opened.value,
            onMouseenter: handleMouseenter,
            onMouseleave: () => handleMouseleave(true),
            onFocus: handleMouseenter
          }, [child]);
        };
      }
    });
    const menuProps = buildProps({
      mode: {
        type: String,
        values: ["horizontal", "vertical"],
        default: "vertical"
      },
      defaultActive: {
        type: String,
        default: ""
      },
      defaultOpeneds: {
        type: definePropType(Array),
        default: () => mutable([])
      },
      uniqueOpened: Boolean,
      router: Boolean,
      menuTrigger: {
        type: String,
        values: ["hover", "click"],
        default: "hover"
      },
      collapse: Boolean,
      backgroundColor: String,
      textColor: String,
      activeTextColor: String,
      collapseTransition: {
        type: Boolean,
        default: true
      },
      ellipsis: {
        type: Boolean,
        default: true
      }
    });
    const checkIndexPath = (indexPath) => Array.isArray(indexPath) && indexPath.every((path) => isString$3(path));
    const menuEmits = {
      close: (index2, indexPath) => isString$3(index2) && checkIndexPath(indexPath),
      open: (index2, indexPath) => isString$3(index2) && checkIndexPath(indexPath),
      select: (index2, indexPath, item, routerResult) => isString$3(index2) && checkIndexPath(indexPath) && isObject$7(item) && (routerResult === void 0 || routerResult instanceof Promise)
    };
    var Menu = defineComponent({
      name: "ElMenu",
      props: menuProps,
      emits: menuEmits,
      setup(props, { emit: emit2, slots, expose }) {
        const instance = getCurrentInstance();
        const router = instance.appContext.config.globalProperties.$router;
        const menu = ref();
        const nsMenu = useNamespace("menu");
        const nsSubMenu = useNamespace("sub-menu");
        const openedMenus = ref(props.defaultOpeneds && !props.collapse ? props.defaultOpeneds.slice(0) : []);
        const activeIndex = ref(props.defaultActive);
        const items = ref({});
        const subMenus = ref({});
        const isMenuPopup = computed(() => {
          return props.mode === "horizontal" || props.mode === "vertical" && props.collapse;
        });
        const initMenu = () => {
          const activeItem = activeIndex.value && items.value[activeIndex.value];
          if (!activeItem || props.mode === "horizontal" || props.collapse)
            return;
          const indexPath = activeItem.indexPath;
          indexPath.forEach((index2) => {
            const subMenu = subMenus.value[index2];
            subMenu && openMenu(index2, subMenu.indexPath);
          });
        };
        const openMenu = (index2, indexPath) => {
          if (openedMenus.value.includes(index2))
            return;
          if (props.uniqueOpened) {
            openedMenus.value = openedMenus.value.filter((index22) => indexPath.includes(index22));
          }
          openedMenus.value.push(index2);
          emit2("open", index2, indexPath);
        };
        const closeMenu = (index2, indexPath) => {
          const i2 = openedMenus.value.indexOf(index2);
          if (i2 !== -1) {
            openedMenus.value.splice(i2, 1);
          }
          emit2("close", index2, indexPath);
        };
        const handleSubMenuClick = ({
          index: index2,
          indexPath
        }) => {
          const isOpened = openedMenus.value.includes(index2);
          if (isOpened) {
            closeMenu(index2, indexPath);
          } else {
            openMenu(index2, indexPath);
          }
        };
        const handleMenuItemClick = (menuItem) => {
          if (props.mode === "horizontal" || props.collapse) {
            openedMenus.value = [];
          }
          const { index: index2, indexPath } = menuItem;
          if (index2 === void 0 || indexPath === void 0)
            return;
          if (props.router && router) {
            const route = menuItem.route || index2;
            const routerResult = router.push(route).then((res) => {
              if (!res)
                activeIndex.value = index2;
              return res;
            });
            emit2("select", index2, indexPath, { index: index2, indexPath, route }, routerResult);
          } else {
            activeIndex.value = index2;
            emit2("select", index2, indexPath, { index: index2, indexPath });
          }
        };
        const updateActiveIndex = (val) => {
          const itemsInData = items.value;
          const item = itemsInData[val] || activeIndex.value && itemsInData[activeIndex.value] || itemsInData[props.defaultActive];
          if (item) {
            activeIndex.value = item.index;
            initMenu();
          } else {
            activeIndex.value = val;
          }
        };
        const handleResize = () => {
          nextTick$1(() => instance.proxy.$forceUpdate());
        };
        watch(() => props.defaultActive, (currentActive) => {
          if (!items.value[currentActive]) {
            activeIndex.value = "";
          }
          updateActiveIndex(currentActive);
        });
        watch(() => props.collapse, (value) => {
          if (value)
            openedMenus.value = [];
        });
        let resizeStopper;
        watchEffect(() => {
          if (props.mode === "horizontal" && props.ellipsis)
            resizeStopper = useResizeObserver(menu, handleResize).stop;
          else
            resizeStopper == null ? void 0 : resizeStopper();
        });
        {
          const addSubMenu = (item) => {
            subMenus.value[item.index] = item;
          };
          const removeSubMenu = (item) => {
            delete subMenus.value[item.index];
          };
          const addMenuItem = (item) => {
            items.value[item.index] = item;
          };
          const removeMenuItem = (item) => {
            delete items.value[item.index];
          };
          provide("rootMenu", reactive({
            props,
            openedMenus,
            items,
            subMenus,
            activeIndex,
            isMenuPopup,
            addMenuItem,
            removeMenuItem,
            addSubMenu,
            removeSubMenu,
            openMenu,
            closeMenu,
            handleMenuItemClick,
            handleSubMenuClick
          }));
          provide(`subMenu:${instance.uid}`, {
            addSubMenu,
            removeSubMenu,
            mouseInChild: ref(false),
            level: 0
          });
        }
        onMounted(() => {
          initMenu();
          if (props.mode === "horizontal") {
            new Menu$1(instance.vnode.el, nsMenu.namespace.value);
          }
        });
        {
          const open = (index2) => {
            const { indexPath } = subMenus.value[index2];
            indexPath.forEach((i2) => openMenu(i2, indexPath));
          };
          expose({
            open,
            close: closeMenu,
            handleResize
          });
        }
        const flattedChildren = (children) => {
          const vnodes = Array.isArray(children) ? children : [children];
          const result = [];
          vnodes.forEach((child) => {
            if (Array.isArray(child.children)) {
              result.push(...flattedChildren(child.children));
            } else {
              result.push(child);
            }
          });
          return result;
        };
        return () => {
          var _a2, _b, _c, _d;
          let slot = (_b = (_a2 = slots.default) == null ? void 0 : _a2.call(slots)) != null ? _b : [];
          const vShowMore = [];
          if (props.mode === "horizontal" && menu.value) {
            const items2 = Array.from((_d = (_c = menu.value) == null ? void 0 : _c.childNodes) != null ? _d : []).filter((item) => item.nodeName !== "#text" || item.nodeValue);
            const originalSlot = flattedChildren(slot);
            const moreItemWidth = 64;
            const paddingLeft = Number.parseInt(getComputedStyle(menu.value).paddingLeft, 10);
            const paddingRight = Number.parseInt(getComputedStyle(menu.value).paddingRight, 10);
            const menuWidth = menu.value.clientWidth - paddingLeft - paddingRight;
            let calcWidth = 0;
            let sliceIndex = 0;
            items2.forEach((item, index2) => {
              calcWidth += item.offsetWidth || 0;
              if (calcWidth <= menuWidth - moreItemWidth) {
                sliceIndex = index2 + 1;
              }
            });
            const slotDefault = originalSlot.slice(0, sliceIndex);
            const slotMore = originalSlot.slice(sliceIndex);
            if ((slotMore == null ? void 0 : slotMore.length) && props.ellipsis) {
              slot = slotDefault;
              vShowMore.push(h$2(SubMenu, {
                index: "sub-menu-more",
                class: nsSubMenu.e("hide-arrow")
              }, {
                title: () => h$2(ElIcon, {
                  class: nsSubMenu.e("icon-more")
                }, { default: () => h$2(more_default) }),
                default: () => slotMore
              }));
            }
          }
          const ulStyle = useMenuCssVar(props, 0);
          const vMenu = h$2("ul", {
            key: String(props.collapse),
            role: "menubar",
            ref: menu,
            style: ulStyle.value,
            class: {
              [nsMenu.b()]: true,
              [nsMenu.m(props.mode)]: true,
              [nsMenu.m("collapse")]: props.collapse
            }
          }, [...slot, ...vShowMore]);
          if (props.collapseTransition && props.mode === "vertical") {
            return h$2(ElMenuCollapseTransition, () => vMenu);
          }
          return vMenu;
        };
      }
    });
    const menuItemProps = buildProps({
      index: {
        type: definePropType([String, null]),
        default: null
      },
      route: {
        type: definePropType([String, Object])
      },
      disabled: Boolean
    });
    const menuItemEmits = {
      click: (item) => isString$3(item.index) && Array.isArray(item.indexPath)
    };
    const COMPONENT_NAME$7 = "ElMenuItem";
    const _sfc_main$1i = defineComponent({
      name: COMPONENT_NAME$7,
      components: {
        ElTooltip
      },
      props: menuItemProps,
      emits: menuItemEmits,
      setup(props, { emit: emit2 }) {
        const instance = getCurrentInstance();
        const rootMenu = inject("rootMenu");
        const nsMenu = useNamespace("menu");
        const nsMenuItem = useNamespace("menu-item");
        if (!rootMenu)
          throwError(COMPONENT_NAME$7, "can not inject root menu");
        const { parentMenu, indexPath } = useMenu(instance, toRef(props, "index"));
        const subMenu = inject(`subMenu:${parentMenu.value.uid}`);
        if (!subMenu)
          throwError(COMPONENT_NAME$7, "can not inject sub menu");
        const active = computed(() => props.index === rootMenu.activeIndex);
        const item = reactive({
          index: props.index,
          indexPath,
          active
        });
        const handleClick = () => {
          if (!props.disabled) {
            rootMenu.handleMenuItemClick({
              index: props.index,
              indexPath: indexPath.value,
              route: props.route
            });
            emit2("click", item);
          }
        };
        onMounted(() => {
          subMenu.addSubMenu(item);
          rootMenu.addMenuItem(item);
        });
        onBeforeUnmount(() => {
          subMenu.removeSubMenu(item);
          rootMenu.removeMenuItem(item);
        });
        return {
          Effect,
          parentMenu,
          rootMenu,
          active,
          nsMenu,
          nsMenuItem,
          handleClick
        };
      }
    });
    function _sfc_render$g(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_el_tooltip = resolveComponent("el-tooltip");
      return openBlock(), createElementBlock("li", {
        class: normalizeClass([
          _ctx.nsMenuItem.b(),
          _ctx.nsMenuItem.is("active", _ctx.active),
          _ctx.nsMenuItem.is("disabled", _ctx.disabled)
        ]),
        role: "menuitem",
        tabindex: "-1",
        onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))
      }, [
        _ctx.parentMenu.type.name === "ElMenu" && _ctx.rootMenu.props.collapse && _ctx.$slots.title ? (openBlock(), createBlock(_component_el_tooltip, {
          key: 0,
          effect: _ctx.Effect.DARK,
          placement: "right",
          "fallback-placements": ["left"],
          persistent: ""
        }, {
          content: withCtx(() => [
            renderSlot(_ctx.$slots, "title")
          ]),
          default: withCtx(() => [
            createBaseVNode("div", {
              class: normalizeClass(_ctx.nsMenu.be("tooltip", "trigger"))
            }, [
              renderSlot(_ctx.$slots, "default")
            ], 2)
          ]),
          _: 3
        }, 8, ["effect"])) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          renderSlot(_ctx.$slots, "default"),
          renderSlot(_ctx.$slots, "title")
        ], 64))
      ], 2);
    }
    var MenuItem = /* @__PURE__ */ _export_sfc$1(_sfc_main$1i, [["render", _sfc_render$g], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/menu/src/menu-item.vue"]]);
    const menuItemGroupProps = {
      title: String
    };
    const COMPONENT_NAME$6 = "ElMenuItemGroup";
    const _sfc_main$1h = defineComponent({
      name: COMPONENT_NAME$6,
      props: menuItemGroupProps,
      setup() {
        const ns2 = useNamespace("menu-item-group");
        return {
          ns: ns2
        };
      }
    });
    function _sfc_render$f(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("li", {
        class: normalizeClass(_ctx.ns.b())
      }, [
        createBaseVNode("div", {
          class: normalizeClass(_ctx.ns.e("title"))
        }, [
          !_ctx.$slots.title ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
            createTextVNode(toDisplayString$1(_ctx.title), 1)
          ], 64)) : renderSlot(_ctx.$slots, "title", { key: 1 })
        ], 2),
        createBaseVNode("ul", null, [
          renderSlot(_ctx.$slots, "default")
        ])
      ], 2);
    }
    var MenuItemGroup = /* @__PURE__ */ _export_sfc$1(_sfc_main$1h, [["render", _sfc_render$f], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/menu/src/menu-item-group.vue"]]);
    const ElMenu = withInstall(Menu, {
      MenuItem,
      MenuItemGroup,
      SubMenu
    });
    const ElMenuItem = withNoopInstall(MenuItem);
    const ElMenuItemGroup = withNoopInstall(MenuItemGroup);
    withNoopInstall(SubMenu);
    const pageHeaderProps = buildProps({
      icon: {
        type: iconPropType,
        default: () => back_default
      },
      title: String,
      content: {
        type: String,
        default: ""
      }
    });
    const pageHeaderEmits = {
      back: () => true
    };
    const __default__$$ = {
      name: "ElPageHeader"
    };
    const _sfc_main$1g = /* @__PURE__ */ defineComponent({
      ...__default__$$,
      props: pageHeaderProps,
      emits: pageHeaderEmits,
      setup(__props, { emit: emit2 }) {
        const { t } = useLocale();
        const ns2 = useNamespace("page-header");
        function handleClick() {
          emit2("back");
        }
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            class: normalizeClass(unref(ns2).b())
          }, [
            createBaseVNode("div", {
              class: normalizeClass(unref(ns2).e("left")),
              onClick: handleClick
            }, [
              _ctx.icon || _ctx.$slots.icon ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(unref(ns2).e("icon"))
              }, [
                renderSlot(_ctx.$slots, "icon", {}, () => [
                  _ctx.icon ? (openBlock(), createBlock(unref(ElIcon), { key: 0 }, {
                    default: withCtx(() => [
                      (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))
                    ]),
                    _: 1
                  })) : createCommentVNode("v-if", true)
                ])
              ], 2)) : createCommentVNode("v-if", true),
              createBaseVNode("div", {
                class: normalizeClass(unref(ns2).e("title"))
              }, [
                renderSlot(_ctx.$slots, "title", {}, () => [
                  createTextVNode(toDisplayString$1(_ctx.title || unref(t)("el.pageHeader.title")), 1)
                ])
              ], 2)
            ], 2),
            createBaseVNode("div", {
              class: normalizeClass(unref(ns2).e("content"))
            }, [
              renderSlot(_ctx.$slots, "content", {}, () => [
                createTextVNode(toDisplayString$1(_ctx.content), 1)
              ])
            ], 2)
          ], 2);
        };
      }
    });
    var PageHeader = /* @__PURE__ */ _export_sfc$1(_sfc_main$1g, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/page-header/src/page-header.vue"]]);
    const ElPageHeader = withInstall(PageHeader);
    const paginationPrevProps = buildProps({
      disabled: Boolean,
      currentPage: {
        type: Number,
        default: 1
      },
      prevText: {
        type: String
      }
    });
    const paginationPrevEmits = {
      click: (evt) => evt instanceof MouseEvent
    };
    const _hoisted_1$w = ["disabled", "aria-disabled"];
    const _hoisted_2$k = { key: 0 };
    const __default__$_ = {
      name: "ElPaginationPrev"
    };
    const _sfc_main$1f = /* @__PURE__ */ defineComponent({
      ...__default__$_,
      props: paginationPrevProps,
      emits: paginationPrevEmits,
      setup(__props) {
        const props = __props;
        const internalDisabled = computed(() => props.disabled || props.currentPage <= 1);
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("button", {
            type: "button",
            class: "btn-prev",
            disabled: unref(internalDisabled),
            "aria-disabled": unref(internalDisabled),
            onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("click", $event))
          }, [
            _ctx.prevText ? (openBlock(), createElementBlock("span", _hoisted_2$k, toDisplayString$1(_ctx.prevText), 1)) : (openBlock(), createBlock(unref(ElIcon), { key: 1 }, {
              default: withCtx(() => [
                createVNode(unref(arrow_left_default))
              ]),
              _: 1
            }))
          ], 8, _hoisted_1$w);
        };
      }
    });
    var Prev = /* @__PURE__ */ _export_sfc$1(_sfc_main$1f, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/pagination/src/components/prev.vue"]]);
    const paginationNextProps = buildProps({
      disabled: Boolean,
      currentPage: {
        type: Number,
        default: 1
      },
      pageCount: {
        type: Number,
        default: 50
      },
      nextText: {
        type: String
      }
    });
    const _hoisted_1$v = ["disabled", "aria-disabled"];
    const _hoisted_2$j = { key: 0 };
    const __default__$Z = {
      name: "ElPaginationNext"
    };
    const _sfc_main$1e = /* @__PURE__ */ defineComponent({
      ...__default__$Z,
      props: paginationNextProps,
      emits: ["click"],
      setup(__props) {
        const props = __props;
        const internalDisabled = computed(() => props.disabled || props.currentPage === props.pageCount || props.pageCount === 0);
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("button", {
            type: "button",
            class: "btn-next",
            disabled: unref(internalDisabled),
            "aria-disabled": unref(internalDisabled),
            onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("click", $event))
          }, [
            _ctx.nextText ? (openBlock(), createElementBlock("span", _hoisted_2$j, toDisplayString$1(_ctx.nextText), 1)) : (openBlock(), createBlock(unref(ElIcon), { key: 1 }, {
              default: withCtx(() => [
                createVNode(unref(arrow_right_default))
              ]),
              _: 1
            }))
          ], 8, _hoisted_1$v);
        };
      }
    });
    var Next = /* @__PURE__ */ _export_sfc$1(_sfc_main$1e, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/pagination/src/components/next.vue"]]);
    const selectGroupKey = "ElSelectGroup";
    const selectKey = "ElSelect";
    function useOption$1(props, states) {
      const select = inject(selectKey);
      const selectGroup = inject(selectGroupKey, { disabled: false });
      const isObject2 = computed(() => {
        return Object.prototype.toString.call(props.value).toLowerCase() === "[object object]";
      });
      const itemSelected = computed(() => {
        if (!select.props.multiple) {
          return isEqual2(props.value, select.props.modelValue);
        } else {
          return contains2(select.props.modelValue, props.value);
        }
      });
      const limitReached = computed(() => {
        if (select.props.multiple) {
          const modelValue = select.props.modelValue || [];
          return !itemSelected.value && modelValue.length >= select.props.multipleLimit && select.props.multipleLimit > 0;
        } else {
          return false;
        }
      });
      const currentLabel = computed(() => {
        return props.label || (isObject2.value ? "" : props.value);
      });
      const currentValue = computed(() => {
        return props.value || props.label || "";
      });
      const isDisabled = computed(() => {
        return props.disabled || states.groupDisabled || limitReached.value;
      });
      const instance = getCurrentInstance();
      const contains2 = (arr = [], target) => {
        if (!isObject2.value) {
          return arr && arr.includes(target);
        } else {
          const valueKey = select.props.valueKey;
          return arr && arr.some((item) => {
            return get$1(item, valueKey) === get$1(target, valueKey);
          });
        }
      };
      const isEqual2 = (a2, b2) => {
        if (!isObject2.value) {
          return a2 === b2;
        } else {
          const { valueKey } = select.props;
          return get$1(a2, valueKey) === get$1(b2, valueKey);
        }
      };
      const hoverItem = () => {
        if (!props.disabled && !selectGroup.disabled) {
          select.hoverIndex = select.optionsArray.indexOf(instance.proxy);
        }
      };
      watch(() => currentLabel.value, () => {
        if (!props.created && !select.props.remote)
          select.setSelected();
      });
      watch(() => props.value, (val, oldVal) => {
        const { remote, valueKey } = select.props;
        if (!props.created && !remote) {
          if (valueKey && typeof val === "object" && typeof oldVal === "object" && val[valueKey] === oldVal[valueKey]) {
            return;
          }
          select.setSelected();
        }
      });
      watch(() => selectGroup.disabled, () => {
        states.groupDisabled = selectGroup.disabled;
      }, { immediate: true });
      const { queryChange } = toRaw(select);
      watch(queryChange, (changes) => {
        const { query } = unref(changes);
        const regexp2 = new RegExp(escapeStringRegexp(query), "i");
        states.visible = regexp2.test(currentLabel.value) || props.created;
        if (!states.visible) {
          select.filteredOptionsCount--;
        }
      });
      return {
        select,
        currentLabel,
        currentValue,
        itemSelected,
        isDisabled,
        hoverItem
      };
    }
    const _sfc_main$1d = defineComponent({
      name: "ElOption",
      componentName: "ElOption",
      props: {
        value: {
          required: true,
          type: [String, Number, Boolean, Object]
        },
        label: [String, Number],
        created: Boolean,
        disabled: {
          type: Boolean,
          default: false
        }
      },
      setup(props) {
        const ns2 = useNamespace("select");
        const states = reactive({
          index: -1,
          groupDisabled: false,
          visible: true,
          hitState: false,
          hover: false
        });
        const { currentLabel, itemSelected, isDisabled, select, hoverItem } = useOption$1(props, states);
        const { visible, hover } = toRefs(states);
        const vm = getCurrentInstance().proxy;
        const key = vm.value;
        select.onOptionCreate(vm);
        onBeforeUnmount(() => {
          const { selected } = select;
          const selectedOptions = select.props.multiple ? selected : [selected];
          const doesSelected = selectedOptions.some((item) => {
            return item.value === vm.value;
          });
          nextTick$1(() => {
            if (select.cachedOptions.get(key) === vm && !doesSelected) {
              select.cachedOptions.delete(key);
            }
          });
          select.onOptionDestroy(key, vm);
        });
        function selectOptionClick() {
          if (props.disabled !== true && states.groupDisabled !== true) {
            select.handleOptionSelect(vm, true);
          }
        }
        return {
          ns: ns2,
          currentLabel,
          itemSelected,
          isDisabled,
          select,
          hoverItem,
          visible,
          hover,
          selectOptionClick,
          states
        };
      }
    });
    function _sfc_render$e(_ctx, _cache, $props, $setup, $data, $options) {
      return withDirectives((openBlock(), createElementBlock("li", {
        class: normalizeClass([
          _ctx.ns.be("dropdown", "item"),
          _ctx.ns.is("disabled", _ctx.isDisabled),
          {
            selected: _ctx.itemSelected,
            hover: _ctx.hover
          }
        ]),
        onMouseenter: _cache[0] || (_cache[0] = (...args) => _ctx.hoverItem && _ctx.hoverItem(...args)),
        onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.selectOptionClick && _ctx.selectOptionClick(...args), ["stop"]))
      }, [
        renderSlot(_ctx.$slots, "default", {}, () => [
          createBaseVNode("span", null, toDisplayString$1(_ctx.currentLabel), 1)
        ])
      ], 34)), [
        [vShow, _ctx.visible]
      ]);
    }
    var Option = /* @__PURE__ */ _export_sfc$1(_sfc_main$1d, [["render", _sfc_render$e], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/select/src/option.vue"]]);
    const _sfc_main$1c = defineComponent({
      name: "ElSelectDropdown",
      componentName: "ElSelectDropdown",
      setup() {
        const select = inject(selectKey);
        const ns2 = useNamespace("select");
        const popperClass = computed(() => select.props.popperClass);
        const isMultiple = computed(() => select.props.multiple);
        const isFitInputWidth = computed(() => select.props.fitInputWidth);
        const minWidth = ref("");
        function updateMinWidth() {
          var _a2;
          minWidth.value = `${(_a2 = select.selectWrapper) == null ? void 0 : _a2.offsetWidth}px`;
        }
        onMounted(() => {
          updateMinWidth();
          useResizeObserver(select.selectWrapper, updateMinWidth);
        });
        return {
          ns: ns2,
          minWidth,
          popperClass,
          isMultiple,
          isFitInputWidth
        };
      }
    });
    function _sfc_render$d(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass([_ctx.ns.b("dropdown"), _ctx.ns.is("multiple", _ctx.isMultiple), _ctx.popperClass]),
        style: normalizeStyle({ [_ctx.isFitInputWidth ? "width" : "minWidth"]: _ctx.minWidth })
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 6);
    }
    var ElSelectMenu$1 = /* @__PURE__ */ _export_sfc$1(_sfc_main$1c, [["render", _sfc_render$d], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/select/src/select-dropdown.vue"]]);
    function useSelectStates(props) {
      const { t } = useLocale();
      return reactive({
        options: /* @__PURE__ */ new Map(),
        cachedOptions: /* @__PURE__ */ new Map(),
        createdLabel: null,
        createdSelected: false,
        selected: props.multiple ? [] : {},
        inputLength: 20,
        inputWidth: 0,
        optionsCount: 0,
        filteredOptionsCount: 0,
        visible: false,
        softFocus: false,
        selectedLabel: "",
        hoverIndex: -1,
        query: "",
        previousQuery: null,
        inputHovering: false,
        cachedPlaceHolder: "",
        currentPlaceholder: t("el.select.placeholder"),
        menuVisibleOnFocus: false,
        isOnComposition: false,
        isSilentBlur: false,
        prefixWidth: 11,
        tagInMultiLine: false
      });
    }
    const useSelect$2 = (props, states, ctx) => {
      const { t } = useLocale();
      const ns2 = useNamespace("select");
      const reference = ref(null);
      const input = ref(null);
      const tooltipRef = ref(null);
      const tags = ref(null);
      const selectWrapper = ref(null);
      const scrollbar = ref(null);
      const hoverOption = ref(-1);
      const queryChange = shallowRef({ query: "" });
      const groupQueryChange = shallowRef("");
      const elForm = inject(formContextKey, {});
      const elFormItem = inject(formItemContextKey, {});
      const readonly2 = computed(() => !props.filterable || props.multiple || !states.visible);
      const selectDisabled = computed(() => props.disabled || elForm.disabled);
      const showClose = computed(() => {
        const hasValue = props.multiple ? Array.isArray(props.modelValue) && props.modelValue.length > 0 : props.modelValue !== void 0 && props.modelValue !== null && props.modelValue !== "";
        const criteria = props.clearable && !selectDisabled.value && states.inputHovering && hasValue;
        return criteria;
      });
      const iconComponent = computed(() => props.remote && props.filterable ? "" : props.suffixIcon);
      const iconReverse = computed(() => ns2.is("reverse", iconComponent.value && states.visible));
      const debounce$1 = computed(() => props.remote ? 300 : 0);
      const emptyText = computed(() => {
        if (props.loading) {
          return props.loadingText || t("el.select.loading");
        } else {
          if (props.remote && states.query === "" && states.options.size === 0)
            return false;
          if (props.filterable && states.query && states.options.size > 0 && states.filteredOptionsCount === 0) {
            return props.noMatchText || t("el.select.noMatch");
          }
          if (states.options.size === 0) {
            return props.noDataText || t("el.select.noData");
          }
        }
        return null;
      });
      const optionsArray = computed(() => Array.from(states.options.values()));
      const cachedOptionsArray = computed(() => Array.from(states.cachedOptions.values()));
      const showNewOption = computed(() => {
        const hasExistingOption = optionsArray.value.filter((option) => {
          return !option.created;
        }).some((option) => {
          return option.currentLabel === states.query;
        });
        return props.filterable && props.allowCreate && states.query !== "" && !hasExistingOption;
      });
      const selectSize = useSize();
      const collapseTagSize = computed(() => ["small"].includes(selectSize.value) ? "small" : "default");
      const dropMenuVisible = computed({
        get() {
          return states.visible && emptyText.value !== false;
        },
        set(val) {
          states.visible = val;
        }
      });
      watch([() => selectDisabled.value, () => selectSize.value, () => elForm.size], () => {
        nextTick$1(() => {
          resetInputHeight();
        });
      });
      watch(() => props.placeholder, (val) => {
        states.cachedPlaceHolder = states.currentPlaceholder = val;
      });
      watch(() => props.modelValue, (val, oldVal) => {
        var _a2;
        if (props.multiple) {
          resetInputHeight();
          if (val && val.length > 0 || input.value && states.query !== "") {
            states.currentPlaceholder = "";
          } else {
            states.currentPlaceholder = states.cachedPlaceHolder;
          }
          if (props.filterable && !props.reserveKeyword) {
            states.query = "";
            handleQueryChange(states.query);
          }
        }
        setSelected2();
        if (props.filterable && !props.multiple) {
          states.inputLength = 20;
        }
        if (!isEqual$1(val, oldVal) && props.validateEvent) {
          (_a2 = elFormItem.validate) == null ? void 0 : _a2.call(elFormItem, "change").catch((err) => debugWarn());
        }
      }, {
        flush: "post",
        deep: true
      });
      watch(() => states.visible, (val) => {
        var _a2, _b, _c;
        if (!val) {
          input.value && input.value.blur();
          states.query = "";
          states.previousQuery = null;
          states.selectedLabel = "";
          states.inputLength = 20;
          states.menuVisibleOnFocus = false;
          resetHoverIndex();
          nextTick$1(() => {
            if (input.value && input.value.value === "" && states.selected.length === 0) {
              states.currentPlaceholder = states.cachedPlaceHolder;
            }
          });
          if (!props.multiple) {
            if (states.selected) {
              if (props.filterable && props.allowCreate && states.createdSelected && states.createdLabel) {
                states.selectedLabel = states.createdLabel;
              } else {
                states.selectedLabel = states.selected.currentLabel;
              }
              if (props.filterable)
                states.query = states.selectedLabel;
            }
            if (props.filterable) {
              states.currentPlaceholder = states.cachedPlaceHolder;
            }
          }
        } else {
          (_b = (_a2 = tooltipRef.value) == null ? void 0 : _a2.updatePopper) == null ? void 0 : _b.call(_a2);
          if (props.filterable) {
            states.filteredOptionsCount = states.optionsCount;
            states.query = props.remote ? "" : states.selectedLabel;
            if (props.multiple) {
              (_c = input.value) == null ? void 0 : _c.focus();
            } else {
              if (states.selectedLabel) {
                states.currentPlaceholder = `${states.selectedLabel}`;
                states.selectedLabel = "";
              }
            }
            handleQueryChange(states.query);
            if (!props.multiple && !props.remote) {
              queryChange.value.query = "";
              triggerRef(queryChange);
              triggerRef(groupQueryChange);
            }
          }
        }
        ctx.emit("visible-change", val);
      });
      watch(() => states.options.entries(), () => {
        var _a2, _b, _c;
        if (!isClient)
          return;
        (_b = (_a2 = tooltipRef.value) == null ? void 0 : _a2.updatePopper) == null ? void 0 : _b.call(_a2);
        if (props.multiple) {
          resetInputHeight();
        }
        const inputs = ((_c = selectWrapper.value) == null ? void 0 : _c.querySelectorAll("input")) || [];
        if (!Array.from(inputs).includes(document.activeElement)) {
          setSelected2();
        }
        if (props.defaultFirstOption && (props.filterable || props.remote) && states.filteredOptionsCount) {
          checkDefaultFirstOption();
        }
      }, {
        flush: "post"
      });
      watch(() => states.hoverIndex, (val) => {
        if (typeof val === "number" && val > -1) {
          hoverOption.value = optionsArray.value[val] || {};
        }
        optionsArray.value.forEach((option) => {
          option.hover = hoverOption.value === option;
        });
      });
      const resetInputHeight = () => {
        if (props.collapseTags && !props.filterable)
          return;
        nextTick$1(() => {
          var _a2, _b;
          if (!reference.value)
            return;
          const input2 = reference.value.$el.querySelector("input");
          const _tags = tags.value;
          const sizeInMap = getComponentSize(selectSize.value || elForm.size);
          input2.style.height = `${(states.selected.length === 0 ? sizeInMap : Math.max(_tags ? _tags.clientHeight + (_tags.clientHeight > sizeInMap ? 6 : 0) : 0, sizeInMap)) - 2}px`;
          states.tagInMultiLine = Number.parseFloat(input2.style.height) >= sizeInMap;
          if (states.visible && emptyText.value !== false) {
            (_b = (_a2 = tooltipRef.value) == null ? void 0 : _a2.updatePopper) == null ? void 0 : _b.call(_a2);
          }
        });
      };
      const handleQueryChange = (val) => {
        if (states.previousQuery === val || states.isOnComposition)
          return;
        if (states.previousQuery === null && (typeof props.filterMethod === "function" || typeof props.remoteMethod === "function")) {
          states.previousQuery = val;
          return;
        }
        states.previousQuery = val;
        nextTick$1(() => {
          var _a2, _b;
          if (states.visible)
            (_b = (_a2 = tooltipRef.value) == null ? void 0 : _a2.updatePopper) == null ? void 0 : _b.call(_a2);
        });
        states.hoverIndex = -1;
        if (props.multiple && props.filterable) {
          nextTick$1(() => {
            const length = input.value.value.length * 15 + 20;
            states.inputLength = props.collapseTags ? Math.min(50, length) : length;
            managePlaceholder();
            resetInputHeight();
          });
        }
        if (props.remote && typeof props.remoteMethod === "function") {
          states.hoverIndex = -1;
          props.remoteMethod(val);
        } else if (typeof props.filterMethod === "function") {
          props.filterMethod(val);
          triggerRef(groupQueryChange);
        } else {
          states.filteredOptionsCount = states.optionsCount;
          queryChange.value.query = val;
          triggerRef(queryChange);
          triggerRef(groupQueryChange);
        }
        if (props.defaultFirstOption && (props.filterable || props.remote) && states.filteredOptionsCount) {
          checkDefaultFirstOption();
        }
      };
      const managePlaceholder = () => {
        if (states.currentPlaceholder !== "") {
          states.currentPlaceholder = input.value.value ? "" : states.cachedPlaceHolder;
        }
      };
      const checkDefaultFirstOption = () => {
        const optionsInDropdown = optionsArray.value.filter((n2) => n2.visible && !n2.disabled && !n2.states.groupDisabled);
        const userCreatedOption = optionsInDropdown.find((n2) => n2.created);
        const firstOriginOption = optionsInDropdown[0];
        states.hoverIndex = getValueIndex(optionsArray.value, userCreatedOption || firstOriginOption);
      };
      const setSelected2 = () => {
        var _a2;
        if (!props.multiple) {
          const option = getOption(props.modelValue);
          if ((_a2 = option.props) == null ? void 0 : _a2.created) {
            states.createdLabel = option.props.value;
            states.createdSelected = true;
          } else {
            states.createdSelected = false;
          }
          states.selectedLabel = option.currentLabel;
          states.selected = option;
          if (props.filterable)
            states.query = states.selectedLabel;
          return;
        } else {
          states.selectedLabel = "";
        }
        const result = [];
        if (Array.isArray(props.modelValue)) {
          props.modelValue.forEach((value) => {
            result.push(getOption(value));
          });
        }
        states.selected = result;
        nextTick$1(() => {
          resetInputHeight();
        });
      };
      const getOption = (value) => {
        let option;
        const isObjectValue = toRawType(value).toLowerCase() === "object";
        const isNull2 = toRawType(value).toLowerCase() === "null";
        const isUndefined2 = toRawType(value).toLowerCase() === "undefined";
        for (let i2 = states.cachedOptions.size - 1; i2 >= 0; i2--) {
          const cachedOption = cachedOptionsArray.value[i2];
          const isEqualValue = isObjectValue ? get$1(cachedOption.value, props.valueKey) === get$1(value, props.valueKey) : cachedOption.value === value;
          if (isEqualValue) {
            option = {
              value,
              currentLabel: cachedOption.currentLabel,
              isDisabled: cachedOption.isDisabled
            };
            break;
          }
        }
        if (option)
          return option;
        const label = isObjectValue ? value.label : !isNull2 && !isUndefined2 ? value : "";
        const newOption = {
          value,
          currentLabel: label
        };
        if (props.multiple) {
          newOption.hitState = false;
        }
        return newOption;
      };
      const resetHoverIndex = () => {
        setTimeout(() => {
          const valueKey = props.valueKey;
          if (!props.multiple) {
            states.hoverIndex = optionsArray.value.findIndex((item) => {
              return getValueKey(item) === getValueKey(states.selected);
            });
          } else {
            if (states.selected.length > 0) {
              states.hoverIndex = Math.min.apply(null, states.selected.map((selected) => {
                return optionsArray.value.findIndex((item) => {
                  return get$1(item, valueKey) === get$1(selected, valueKey);
                });
              }));
            } else {
              states.hoverIndex = -1;
            }
          }
        }, 300);
      };
      const handleResize = () => {
        var _a2, _b;
        resetInputWidth();
        (_b = (_a2 = tooltipRef.value) == null ? void 0 : _a2.updatePopper) == null ? void 0 : _b.call(_a2);
        if (props.multiple && !props.filterable)
          resetInputHeight();
      };
      const resetInputWidth = () => {
        var _a2;
        states.inputWidth = (_a2 = reference.value) == null ? void 0 : _a2.$el.getBoundingClientRect().width;
      };
      const onInputChange = () => {
        if (props.filterable && states.query !== states.selectedLabel) {
          states.query = states.selectedLabel;
          handleQueryChange(states.query);
        }
      };
      const debouncedOnInputChange = debounce(() => {
        onInputChange();
      }, debounce$1.value);
      const debouncedQueryChange = debounce((e2) => {
        handleQueryChange(e2.target.value);
      }, debounce$1.value);
      const emitChange = (val) => {
        if (!isEqual$1(props.modelValue, val)) {
          ctx.emit(CHANGE_EVENT, val);
        }
      };
      const deletePrevTag = (e2) => {
        if (e2.target.value.length <= 0 && !toggleLastOptionHitState()) {
          const value = props.modelValue.slice();
          value.pop();
          ctx.emit(UPDATE_MODEL_EVENT, value);
          emitChange(value);
        }
        if (e2.target.value.length === 1 && props.modelValue.length === 0) {
          states.currentPlaceholder = states.cachedPlaceHolder;
        }
      };
      const deleteTag = (event, tag) => {
        const index2 = states.selected.indexOf(tag);
        if (index2 > -1 && !selectDisabled.value) {
          const value = props.modelValue.slice();
          value.splice(index2, 1);
          ctx.emit(UPDATE_MODEL_EVENT, value);
          emitChange(value);
          ctx.emit("remove-tag", tag.value);
        }
        event.stopPropagation();
      };
      const deleteSelected = (event) => {
        event.stopPropagation();
        const value = props.multiple ? [] : "";
        if (typeof value !== "string") {
          for (const item of states.selected) {
            if (item.isDisabled)
              value.push(item.value);
          }
        }
        ctx.emit(UPDATE_MODEL_EVENT, value);
        emitChange(value);
        states.visible = false;
        ctx.emit("clear");
      };
      const handleOptionSelect = (option, byClick) => {
        var _a2;
        if (props.multiple) {
          const value = (props.modelValue || []).slice();
          const optionIndex = getValueIndex(value, option.value);
          if (optionIndex > -1) {
            value.splice(optionIndex, 1);
          } else if (props.multipleLimit <= 0 || value.length < props.multipleLimit) {
            value.push(option.value);
          }
          ctx.emit(UPDATE_MODEL_EVENT, value);
          emitChange(value);
          if (option.created) {
            states.query = "";
            handleQueryChange("");
            states.inputLength = 20;
          }
          if (props.filterable)
            (_a2 = input.value) == null ? void 0 : _a2.focus();
        } else {
          ctx.emit(UPDATE_MODEL_EVENT, option.value);
          emitChange(option.value);
          states.visible = false;
        }
        states.isSilentBlur = byClick;
        setSoftFocus();
        if (states.visible)
          return;
        nextTick$1(() => {
          scrollToOption(option);
        });
      };
      const getValueIndex = (arr = [], value) => {
        if (!isObject$7(value))
          return arr.indexOf(value);
        const valueKey = props.valueKey;
        let index2 = -1;
        arr.some((item, i2) => {
          if (get$1(item, valueKey) === get$1(value, valueKey)) {
            index2 = i2;
            return true;
          }
          return false;
        });
        return index2;
      };
      const setSoftFocus = () => {
        states.softFocus = true;
        const _input = input.value || reference.value;
        if (_input) {
          _input == null ? void 0 : _input.focus();
        }
      };
      const scrollToOption = (option) => {
        var _a2, _b, _c, _d, _e;
        const targetOption = Array.isArray(option) ? option[0] : option;
        let target = null;
        if (targetOption == null ? void 0 : targetOption.value) {
          const options = optionsArray.value.filter((item) => item.value === targetOption.value);
          if (options.length > 0) {
            target = options[0].$el;
          }
        }
        if (tooltipRef.value && target) {
          const menu = (_d = (_c = (_b = (_a2 = tooltipRef.value) == null ? void 0 : _a2.popperRef) == null ? void 0 : _b.contentRef) == null ? void 0 : _c.querySelector) == null ? void 0 : _d.call(_c, `.${ns2.be("dropdown", "wrap")}`);
          if (menu) {
            scrollIntoView(menu, target);
          }
        }
        (_e = scrollbar.value) == null ? void 0 : _e.handleScroll();
      };
      const onOptionCreate = (vm) => {
        states.optionsCount++;
        states.filteredOptionsCount++;
        states.options.set(vm.value, vm);
        states.cachedOptions.set(vm.value, vm);
      };
      const onOptionDestroy = (key, vm) => {
        if (states.options.get(key) === vm) {
          states.optionsCount--;
          states.filteredOptionsCount--;
          states.options.delete(key);
        }
      };
      const resetInputState = (e2) => {
        if (e2.code !== EVENT_CODE.backspace)
          toggleLastOptionHitState(false);
        states.inputLength = input.value.value.length * 15 + 20;
        resetInputHeight();
      };
      const toggleLastOptionHitState = (hit) => {
        if (!Array.isArray(states.selected))
          return;
        const option = states.selected[states.selected.length - 1];
        if (!option)
          return;
        if (hit === true || hit === false) {
          option.hitState = hit;
          return hit;
        }
        option.hitState = !option.hitState;
        return option.hitState;
      };
      const handleComposition = (event) => {
        const text = event.target.value;
        if (event.type === "compositionend") {
          states.isOnComposition = false;
          nextTick$1(() => handleQueryChange(text));
        } else {
          const lastCharacter = text[text.length - 1] || "";
          states.isOnComposition = !isKorean(lastCharacter);
        }
      };
      const handleMenuEnter = () => {
        nextTick$1(() => scrollToOption(states.selected));
      };
      const handleFocus = (event) => {
        if (!states.softFocus) {
          if (props.automaticDropdown || props.filterable) {
            if (props.filterable && !states.visible) {
              states.menuVisibleOnFocus = true;
            }
            states.visible = true;
          }
          ctx.emit("focus", event);
        } else {
          states.softFocus = false;
        }
      };
      const blur = () => {
        var _a2;
        states.visible = false;
        (_a2 = reference.value) == null ? void 0 : _a2.blur();
      };
      const handleBlur = (event) => {
        nextTick$1(() => {
          if (states.isSilentBlur) {
            states.isSilentBlur = false;
          } else {
            ctx.emit("blur", event);
          }
        });
        states.softFocus = false;
      };
      const handleClearClick = (event) => {
        deleteSelected(event);
      };
      const handleClose = () => {
        states.visible = false;
      };
      const handleKeydownEscape = (event) => {
        if (states.visible) {
          event.preventDefault();
          event.stopPropagation();
          states.visible = false;
        }
      };
      const toggleMenu = () => {
        var _a2;
        if (!selectDisabled.value) {
          if (states.menuVisibleOnFocus) {
            states.menuVisibleOnFocus = false;
          } else {
            states.visible = !states.visible;
          }
          if (states.visible) {
            (_a2 = input.value || reference.value) == null ? void 0 : _a2.focus();
          }
        }
      };
      const selectOption = () => {
        if (!states.visible) {
          toggleMenu();
        } else {
          if (optionsArray.value[states.hoverIndex]) {
            handleOptionSelect(optionsArray.value[states.hoverIndex], void 0);
          }
        }
      };
      const getValueKey = (item) => {
        return isObject$7(item.value) ? get$1(item.value, props.valueKey) : item.value;
      };
      const optionsAllDisabled = computed(() => optionsArray.value.filter((option) => option.visible).every((option) => option.disabled));
      const navigateOptions = (direction2) => {
        if (!states.visible) {
          states.visible = true;
          return;
        }
        if (states.options.size === 0 || states.filteredOptionsCount === 0)
          return;
        if (states.isOnComposition)
          return;
        if (!optionsAllDisabled.value) {
          if (direction2 === "next") {
            states.hoverIndex++;
            if (states.hoverIndex === states.options.size) {
              states.hoverIndex = 0;
            }
          } else if (direction2 === "prev") {
            states.hoverIndex--;
            if (states.hoverIndex < 0) {
              states.hoverIndex = states.options.size - 1;
            }
          }
          const option = optionsArray.value[states.hoverIndex];
          if (option.disabled === true || option.states.groupDisabled === true || !option.visible) {
            navigateOptions(direction2);
          }
          nextTick$1(() => scrollToOption(hoverOption.value));
        }
      };
      return {
        optionsArray,
        selectSize,
        handleResize,
        debouncedOnInputChange,
        debouncedQueryChange,
        deletePrevTag,
        deleteTag,
        deleteSelected,
        handleOptionSelect,
        scrollToOption,
        readonly: readonly2,
        resetInputHeight,
        showClose,
        iconComponent,
        iconReverse,
        showNewOption,
        collapseTagSize,
        setSelected: setSelected2,
        managePlaceholder,
        selectDisabled,
        emptyText,
        toggleLastOptionHitState,
        resetInputState,
        handleComposition,
        onOptionCreate,
        onOptionDestroy,
        handleMenuEnter,
        handleFocus,
        blur,
        handleBlur,
        handleClearClick,
        handleClose,
        handleKeydownEscape,
        toggleMenu,
        selectOption,
        getValueKey,
        navigateOptions,
        dropMenuVisible,
        queryChange,
        groupQueryChange,
        reference,
        input,
        tooltipRef,
        tags,
        selectWrapper,
        scrollbar
      };
    };
    const COMPONENT_NAME$5 = "ElSelect";
    const _sfc_main$1b = defineComponent({
      name: COMPONENT_NAME$5,
      componentName: COMPONENT_NAME$5,
      components: {
        ElInput,
        ElSelectMenu: ElSelectMenu$1,
        ElOption: Option,
        ElTag,
        ElScrollbar,
        ElTooltip,
        ElIcon
      },
      directives: { ClickOutside },
      props: {
        name: String,
        id: String,
        modelValue: {
          type: [Array, String, Number, Boolean, Object],
          default: void 0
        },
        autocomplete: {
          type: String,
          default: "off"
        },
        automaticDropdown: Boolean,
        size: {
          type: String,
          validator: isValidComponentSize
        },
        effect: {
          type: String,
          default: "light"
        },
        disabled: Boolean,
        clearable: Boolean,
        filterable: Boolean,
        allowCreate: Boolean,
        loading: Boolean,
        popperClass: {
          type: String,
          default: ""
        },
        remote: Boolean,
        loadingText: String,
        noMatchText: String,
        noDataText: String,
        remoteMethod: Function,
        filterMethod: Function,
        multiple: Boolean,
        multipleLimit: {
          type: Number,
          default: 0
        },
        placeholder: {
          type: String
        },
        defaultFirstOption: Boolean,
        reserveKeyword: {
          type: Boolean,
          default: true
        },
        valueKey: {
          type: String,
          default: "value"
        },
        collapseTags: Boolean,
        collapseTagsTooltip: {
          type: Boolean,
          default: false
        },
        teleported: useTooltipContentProps.teleported,
        persistent: {
          type: Boolean,
          default: true
        },
        clearIcon: {
          type: [String, Object],
          default: circle_close_default
        },
        fitInputWidth: {
          type: Boolean,
          default: false
        },
        suffixIcon: {
          type: [String, Object],
          default: arrow_up_default
        },
        tagType: { ...tagProps.type, default: "info" },
        validateEvent: {
          type: Boolean,
          default: true
        }
      },
      emits: [
        UPDATE_MODEL_EVENT,
        CHANGE_EVENT,
        "remove-tag",
        "clear",
        "visible-change",
        "focus",
        "blur"
      ],
      setup(props, ctx) {
        const nsSelect = useNamespace("select");
        const nsInput = useNamespace("input");
        const { t } = useLocale();
        const states = useSelectStates(props);
        const {
          optionsArray,
          selectSize,
          readonly: readonly2,
          handleResize,
          collapseTagSize,
          debouncedOnInputChange,
          debouncedQueryChange,
          deletePrevTag,
          deleteTag,
          deleteSelected,
          handleOptionSelect,
          scrollToOption,
          setSelected: setSelected2,
          resetInputHeight,
          managePlaceholder,
          showClose,
          selectDisabled,
          iconComponent,
          iconReverse,
          showNewOption,
          emptyText,
          toggleLastOptionHitState,
          resetInputState,
          handleComposition,
          onOptionCreate,
          onOptionDestroy,
          handleMenuEnter,
          handleFocus,
          blur,
          handleBlur,
          handleClearClick,
          handleClose,
          handleKeydownEscape,
          toggleMenu,
          selectOption,
          getValueKey,
          navigateOptions,
          dropMenuVisible,
          reference,
          input,
          tooltipRef,
          tags,
          selectWrapper,
          scrollbar,
          queryChange,
          groupQueryChange
        } = useSelect$2(props, states, ctx);
        const { focus } = useFocus(reference);
        const {
          inputWidth,
          selected,
          inputLength,
          filteredOptionsCount,
          visible,
          softFocus,
          selectedLabel,
          hoverIndex,
          query,
          inputHovering,
          currentPlaceholder,
          menuVisibleOnFocus,
          isOnComposition,
          isSilentBlur,
          options,
          cachedOptions,
          optionsCount,
          prefixWidth,
          tagInMultiLine
        } = toRefs(states);
        const wrapperKls = computed(() => {
          const classList = [nsSelect.b()];
          const _selectSize = unref(selectSize);
          if (_selectSize) {
            classList.push(nsSelect.m(_selectSize));
          }
          if (props.disabled) {
            classList.push(nsSelect.m("disabled"));
          }
          return classList;
        });
        const selectTagsStyle = computed(() => ({
          maxWidth: `${unref(inputWidth) - 32}px`,
          width: "100%"
        }));
        provide(selectKey, reactive({
          props,
          options,
          optionsArray,
          cachedOptions,
          optionsCount,
          filteredOptionsCount,
          hoverIndex,
          handleOptionSelect,
          onOptionCreate,
          onOptionDestroy,
          selectWrapper,
          selected,
          setSelected: setSelected2,
          queryChange,
          groupQueryChange
        }));
        onMounted(() => {
          states.cachedPlaceHolder = currentPlaceholder.value = props.placeholder || t("el.select.placeholder");
          if (props.multiple && Array.isArray(props.modelValue) && props.modelValue.length > 0) {
            currentPlaceholder.value = "";
          }
          useResizeObserver(selectWrapper, handleResize);
          if (props.remote && props.multiple) {
            resetInputHeight();
          }
          nextTick$1(() => {
            const refEl = reference.value && reference.value.$el;
            if (!refEl)
              return;
            inputWidth.value = refEl.getBoundingClientRect().width;
            if (ctx.slots.prefix) {
              const prefix = refEl.querySelector(`.${nsInput.e("prefix")}`);
              prefixWidth.value = Math.max(prefix.getBoundingClientRect().width + 5, 30);
            }
          });
          setSelected2();
        });
        if (props.multiple && !Array.isArray(props.modelValue)) {
          ctx.emit(UPDATE_MODEL_EVENT, []);
        }
        if (!props.multiple && Array.isArray(props.modelValue)) {
          ctx.emit(UPDATE_MODEL_EVENT, "");
        }
        const popperPaneRef = computed(() => {
          var _a2, _b;
          return (_b = (_a2 = tooltipRef.value) == null ? void 0 : _a2.popperRef) == null ? void 0 : _b.contentRef;
        });
        return {
          tagInMultiLine,
          prefixWidth,
          selectSize,
          readonly: readonly2,
          handleResize,
          collapseTagSize,
          debouncedOnInputChange,
          debouncedQueryChange,
          deletePrevTag,
          deleteTag,
          deleteSelected,
          handleOptionSelect,
          scrollToOption,
          inputWidth,
          selected,
          inputLength,
          filteredOptionsCount,
          visible,
          softFocus,
          selectedLabel,
          hoverIndex,
          query,
          inputHovering,
          currentPlaceholder,
          menuVisibleOnFocus,
          isOnComposition,
          isSilentBlur,
          options,
          resetInputHeight,
          managePlaceholder,
          showClose,
          selectDisabled,
          iconComponent,
          iconReverse,
          showNewOption,
          emptyText,
          toggleLastOptionHitState,
          resetInputState,
          handleComposition,
          handleMenuEnter,
          handleFocus,
          blur,
          handleBlur,
          handleClearClick,
          handleClose,
          handleKeydownEscape,
          toggleMenu,
          selectOption,
          getValueKey,
          navigateOptions,
          dropMenuVisible,
          focus,
          reference,
          input,
          tooltipRef,
          popperPaneRef,
          tags,
          selectWrapper,
          scrollbar,
          wrapperKls,
          selectTagsStyle,
          nsSelect
        };
      }
    });
    const _hoisted_1$u = { class: "select-trigger" };
    const _hoisted_2$i = ["disabled", "autocomplete"];
    const _hoisted_3$8 = { style: { "height": "100%", "display": "flex", "justify-content": "center", "align-items": "center" } };
    function _sfc_render$c(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_el_tag = resolveComponent("el-tag");
      const _component_el_tooltip = resolveComponent("el-tooltip");
      const _component_el_icon = resolveComponent("el-icon");
      const _component_el_input = resolveComponent("el-input");
      const _component_el_option = resolveComponent("el-option");
      const _component_el_scrollbar = resolveComponent("el-scrollbar");
      const _component_el_select_menu = resolveComponent("el-select-menu");
      const _directive_click_outside = resolveDirective("click-outside");
      return withDirectives((openBlock(), createElementBlock("div", {
        ref: "selectWrapper",
        class: normalizeClass(_ctx.wrapperKls),
        onClick: _cache[22] || (_cache[22] = withModifiers((...args) => _ctx.toggleMenu && _ctx.toggleMenu(...args), ["stop"]))
      }, [
        createVNode(_component_el_tooltip, {
          ref: "tooltipRef",
          visible: _ctx.dropMenuVisible,
          placement: "bottom-start",
          teleported: _ctx.teleported,
          "popper-class": [_ctx.nsSelect.e("popper"), _ctx.popperClass],
          "fallback-placements": ["bottom-start", "top-start", "right", "left"],
          effect: _ctx.effect,
          pure: "",
          trigger: "click",
          transition: `${_ctx.nsSelect.namespace.value}-zoom-in-top`,
          "stop-popper-mouse-event": false,
          "gpu-acceleration": false,
          persistent: _ctx.persistent,
          onShow: _ctx.handleMenuEnter
        }, {
          default: withCtx(() => [
            createBaseVNode("div", _hoisted_1$u, [
              _ctx.multiple ? (openBlock(), createElementBlock("div", {
                key: 0,
                ref: "tags",
                class: normalizeClass(_ctx.nsSelect.e("tags")),
                style: normalizeStyle(_ctx.selectTagsStyle)
              }, [
                _ctx.collapseTags && _ctx.selected.length ? (openBlock(), createElementBlock("span", {
                  key: 0,
                  class: normalizeClass([
                    _ctx.nsSelect.b("tags-wrapper"),
                    { "has-prefix": _ctx.prefixWidth && _ctx.selected.length }
                  ])
                }, [
                  createVNode(_component_el_tag, {
                    closable: !_ctx.selectDisabled && !_ctx.selected[0].isDisabled,
                    size: _ctx.collapseTagSize,
                    hit: _ctx.selected[0].hitState,
                    type: _ctx.tagType,
                    "disable-transitions": "",
                    onClose: _cache[0] || (_cache[0] = ($event) => _ctx.deleteTag($event, _ctx.selected[0]))
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("span", {
                        class: normalizeClass(_ctx.nsSelect.e("tags-text")),
                        style: normalizeStyle({ maxWidth: _ctx.inputWidth - 123 + "px" })
                      }, toDisplayString$1(_ctx.selected[0].currentLabel), 7)
                    ]),
                    _: 1
                  }, 8, ["closable", "size", "hit", "type"]),
                  _ctx.selected.length > 1 ? (openBlock(), createBlock(_component_el_tag, {
                    key: 0,
                    closable: false,
                    size: _ctx.collapseTagSize,
                    type: _ctx.tagType,
                    "disable-transitions": ""
                  }, {
                    default: withCtx(() => [
                      _ctx.collapseTagsTooltip ? (openBlock(), createBlock(_component_el_tooltip, {
                        key: 0,
                        disabled: _ctx.dropMenuVisible,
                        "fallback-placements": ["bottom", "top", "right", "left"],
                        effect: _ctx.effect,
                        placement: "bottom",
                        teleported: _ctx.teleported
                      }, {
                        default: withCtx(() => [
                          createBaseVNode("span", {
                            class: normalizeClass(_ctx.nsSelect.e("tags-text"))
                          }, "+ " + toDisplayString$1(_ctx.selected.length - 1), 3)
                        ]),
                        content: withCtx(() => [
                          createBaseVNode("div", {
                            class: normalizeClass(_ctx.nsSelect.e("collapse-tags"))
                          }, [
                            (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.selected.slice(1), (item, idx) => {
                              return openBlock(), createElementBlock("div", {
                                key: idx,
                                class: normalizeClass(_ctx.nsSelect.e("collapse-tag"))
                              }, [
                                (openBlock(), createBlock(_component_el_tag, {
                                  key: _ctx.getValueKey(item),
                                  class: "in-tooltip",
                                  closable: !_ctx.selectDisabled && !item.isDisabled,
                                  size: _ctx.collapseTagSize,
                                  hit: item.hitState,
                                  type: _ctx.tagType,
                                  "disable-transitions": "",
                                  style: { margin: "2px" },
                                  onClose: ($event) => _ctx.deleteTag($event, item)
                                }, {
                                  default: withCtx(() => [
                                    createBaseVNode("span", {
                                      class: normalizeClass(_ctx.nsSelect.e("tags-text")),
                                      style: normalizeStyle({
                                        maxWidth: _ctx.inputWidth - 75 + "px"
                                      })
                                    }, toDisplayString$1(item.currentLabel), 7)
                                  ]),
                                  _: 2
                                }, 1032, ["closable", "size", "hit", "type", "onClose"]))
                              ], 2);
                            }), 128))
                          ], 2)
                        ]),
                        _: 1
                      }, 8, ["disabled", "effect", "teleported"])) : (openBlock(), createElementBlock("span", {
                        key: 1,
                        class: normalizeClass(_ctx.nsSelect.e("tags-text"))
                      }, "+ " + toDisplayString$1(_ctx.selected.length - 1), 3))
                    ]),
                    _: 1
                  }, 8, ["size", "type"])) : createCommentVNode("v-if", true)
                ], 2)) : createCommentVNode("v-if", true),
                createCommentVNode(" <div> "),
                !_ctx.collapseTags ? (openBlock(), createBlock(Transition, {
                  key: 1,
                  onAfterLeave: _ctx.resetInputHeight
                }, {
                  default: withCtx(() => [
                    createBaseVNode("span", {
                      class: normalizeClass([
                        _ctx.nsSelect.b("tags-wrapper"),
                        { "has-prefix": _ctx.prefixWidth && _ctx.selected.length }
                      ])
                    }, [
                      (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.selected, (item) => {
                        return openBlock(), createBlock(_component_el_tag, {
                          key: _ctx.getValueKey(item),
                          closable: !_ctx.selectDisabled && !item.isDisabled,
                          size: _ctx.collapseTagSize,
                          hit: item.hitState,
                          type: _ctx.tagType,
                          "disable-transitions": "",
                          onClose: ($event) => _ctx.deleteTag($event, item)
                        }, {
                          default: withCtx(() => [
                            createBaseVNode("span", {
                              class: normalizeClass(_ctx.nsSelect.e("tags-text")),
                              style: normalizeStyle({ maxWidth: _ctx.inputWidth - 75 + "px" })
                            }, toDisplayString$1(item.currentLabel), 7)
                          ]),
                          _: 2
                        }, 1032, ["closable", "size", "hit", "type", "onClose"]);
                      }), 128))
                    ], 2)
                  ]),
                  _: 1
                }, 8, ["onAfterLeave"])) : createCommentVNode("v-if", true),
                createCommentVNode(" </div> "),
                _ctx.filterable ? withDirectives((openBlock(), createElementBlock("input", {
                  key: 2,
                  ref: "input",
                  "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.query = $event),
                  type: "text",
                  class: normalizeClass([_ctx.nsSelect.e("input"), _ctx.nsSelect.is(_ctx.selectSize)]),
                  disabled: _ctx.selectDisabled,
                  autocomplete: _ctx.autocomplete,
                  style: normalizeStyle({
                    marginLeft: _ctx.prefixWidth && !_ctx.selected.length || _ctx.tagInMultiLine ? `${_ctx.prefixWidth}px` : "",
                    flexGrow: 1,
                    width: `${_ctx.inputLength / (_ctx.inputWidth - 32)}%`,
                    maxWidth: `${_ctx.inputWidth - 42}px`
                  }),
                  onFocus: _cache[2] || (_cache[2] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),
                  onBlur: _cache[3] || (_cache[3] = (...args) => _ctx.handleBlur && _ctx.handleBlur(...args)),
                  onKeyup: _cache[4] || (_cache[4] = (...args) => _ctx.managePlaceholder && _ctx.managePlaceholder(...args)),
                  onKeydown: [
                    _cache[5] || (_cache[5] = (...args) => _ctx.resetInputState && _ctx.resetInputState(...args)),
                    _cache[6] || (_cache[6] = withKeys(withModifiers(($event) => _ctx.navigateOptions("next"), ["prevent"]), ["down"])),
                    _cache[7] || (_cache[7] = withKeys(withModifiers(($event) => _ctx.navigateOptions("prev"), ["prevent"]), ["up"])),
                    _cache[8] || (_cache[8] = withKeys((...args) => _ctx.handleKeydownEscape && _ctx.handleKeydownEscape(...args), ["esc"])),
                    _cache[9] || (_cache[9] = withKeys(withModifiers((...args) => _ctx.selectOption && _ctx.selectOption(...args), ["stop", "prevent"]), ["enter"])),
                    _cache[10] || (_cache[10] = withKeys((...args) => _ctx.deletePrevTag && _ctx.deletePrevTag(...args), ["delete"])),
                    _cache[11] || (_cache[11] = withKeys(($event) => _ctx.visible = false, ["tab"]))
                  ],
                  onCompositionstart: _cache[12] || (_cache[12] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args)),
                  onCompositionupdate: _cache[13] || (_cache[13] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args)),
                  onCompositionend: _cache[14] || (_cache[14] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args)),
                  onInput: _cache[15] || (_cache[15] = (...args) => _ctx.debouncedQueryChange && _ctx.debouncedQueryChange(...args))
                }, null, 46, _hoisted_2$i)), [
                  [vModelText, _ctx.query]
                ]) : createCommentVNode("v-if", true)
              ], 6)) : createCommentVNode("v-if", true),
              createVNode(_component_el_input, {
                id: _ctx.id,
                ref: "reference",
                modelValue: _ctx.selectedLabel,
                "onUpdate:modelValue": _cache[16] || (_cache[16] = ($event) => _ctx.selectedLabel = $event),
                type: "text",
                placeholder: _ctx.currentPlaceholder,
                name: _ctx.name,
                autocomplete: _ctx.autocomplete,
                size: _ctx.selectSize,
                disabled: _ctx.selectDisabled,
                readonly: _ctx.readonly,
                "validate-event": false,
                class: normalizeClass([_ctx.nsSelect.is("focus", _ctx.visible)]),
                tabindex: _ctx.multiple && _ctx.filterable ? -1 : void 0,
                onFocus: _ctx.handleFocus,
                onBlur: _ctx.handleBlur,
                onInput: _ctx.debouncedOnInputChange,
                onPaste: _ctx.debouncedOnInputChange,
                onCompositionstart: _ctx.handleComposition,
                onCompositionupdate: _ctx.handleComposition,
                onCompositionend: _ctx.handleComposition,
                onKeydown: [
                  _cache[17] || (_cache[17] = withKeys(withModifiers(($event) => _ctx.navigateOptions("next"), ["stop", "prevent"]), ["down"])),
                  _cache[18] || (_cache[18] = withKeys(withModifiers(($event) => _ctx.navigateOptions("prev"), ["stop", "prevent"]), ["up"])),
                  withKeys(withModifiers(_ctx.selectOption, ["stop", "prevent"]), ["enter"]),
                  withKeys(_ctx.handleKeydownEscape, ["esc"]),
                  _cache[19] || (_cache[19] = withKeys(($event) => _ctx.visible = false, ["tab"]))
                ],
                onMouseenter: _cache[20] || (_cache[20] = ($event) => _ctx.inputHovering = true),
                onMouseleave: _cache[21] || (_cache[21] = ($event) => _ctx.inputHovering = false)
              }, createSlots({
                suffix: withCtx(() => [
                  _ctx.iconComponent && !_ctx.showClose ? (openBlock(), createBlock(_component_el_icon, {
                    key: 0,
                    class: normalizeClass([_ctx.nsSelect.e("caret"), _ctx.nsSelect.e("icon"), _ctx.iconReverse])
                  }, {
                    default: withCtx(() => [
                      (openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent)))
                    ]),
                    _: 1
                  }, 8, ["class"])) : createCommentVNode("v-if", true),
                  _ctx.showClose && _ctx.clearIcon ? (openBlock(), createBlock(_component_el_icon, {
                    key: 1,
                    class: normalizeClass([_ctx.nsSelect.e("caret"), _ctx.nsSelect.e("icon")]),
                    onClick: _ctx.handleClearClick
                  }, {
                    default: withCtx(() => [
                      (openBlock(), createBlock(resolveDynamicComponent(_ctx.clearIcon)))
                    ]),
                    _: 1
                  }, 8, ["class", "onClick"])) : createCommentVNode("v-if", true)
                ]),
                _: 2
              }, [
                _ctx.$slots.prefix ? {
                  name: "prefix",
                  fn: withCtx(() => [
                    createBaseVNode("div", _hoisted_3$8, [
                      renderSlot(_ctx.$slots, "prefix")
                    ])
                  ])
                } : void 0
              ]), 1032, ["id", "modelValue", "placeholder", "name", "autocomplete", "size", "disabled", "readonly", "class", "tabindex", "onFocus", "onBlur", "onInput", "onPaste", "onCompositionstart", "onCompositionupdate", "onCompositionend", "onKeydown"])
            ])
          ]),
          content: withCtx(() => [
            createVNode(_component_el_select_menu, null, {
              default: withCtx(() => [
                withDirectives(createVNode(_component_el_scrollbar, {
                  ref: "scrollbar",
                  tag: "ul",
                  "wrap-class": _ctx.nsSelect.be("dropdown", "wrap"),
                  "view-class": _ctx.nsSelect.be("dropdown", "list"),
                  class: normalizeClass([
                    _ctx.nsSelect.is("empty", !_ctx.allowCreate && Boolean(_ctx.query) && _ctx.filteredOptionsCount === 0)
                  ])
                }, {
                  default: withCtx(() => [
                    _ctx.showNewOption ? (openBlock(), createBlock(_component_el_option, {
                      key: 0,
                      value: _ctx.query,
                      created: true
                    }, null, 8, ["value"])) : createCommentVNode("v-if", true),
                    renderSlot(_ctx.$slots, "default")
                  ]),
                  _: 3
                }, 8, ["wrap-class", "view-class", "class"]), [
                  [vShow, _ctx.options.size > 0 && !_ctx.loading]
                ]),
                _ctx.emptyText && (!_ctx.allowCreate || _ctx.loading || _ctx.allowCreate && _ctx.options.size === 0) ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                  _ctx.$slots.empty ? renderSlot(_ctx.$slots, "empty", { key: 0 }) : (openBlock(), createElementBlock("p", {
                    key: 1,
                    class: normalizeClass(_ctx.nsSelect.be("dropdown", "empty"))
                  }, toDisplayString$1(_ctx.emptyText), 3))
                ], 64)) : createCommentVNode("v-if", true)
              ]),
              _: 3
            })
          ]),
          _: 3
        }, 8, ["visible", "teleported", "popper-class", "effect", "transition", "persistent", "onShow"])
      ], 2)), [
        [_directive_click_outside, _ctx.handleClose, _ctx.popperPaneRef]
      ]);
    }
    var Select$1 = /* @__PURE__ */ _export_sfc$1(_sfc_main$1b, [["render", _sfc_render$c], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/select/src/select.vue"]]);
    const _sfc_main$1a = defineComponent({
      name: "ElOptionGroup",
      componentName: "ElOptionGroup",
      props: {
        label: String,
        disabled: {
          type: Boolean,
          default: false
        }
      },
      setup(props) {
        const ns2 = useNamespace("select");
        const visible = ref(true);
        const instance = getCurrentInstance();
        const children = ref([]);
        provide(selectGroupKey, reactive({
          ...toRefs(props)
        }));
        const select = inject(selectKey);
        onMounted(() => {
          children.value = flattedChildren(instance.subTree);
        });
        const flattedChildren = (node) => {
          const children2 = [];
          if (Array.isArray(node.children)) {
            node.children.forEach((child) => {
              var _a2;
              if (child.type && child.type.name === "ElOption" && child.component && child.component.proxy) {
                children2.push(child.component.proxy);
              } else if ((_a2 = child.children) == null ? void 0 : _a2.length) {
                children2.push(...flattedChildren(child));
              }
            });
          }
          return children2;
        };
        const { groupQueryChange } = toRaw(select);
        watch(groupQueryChange, () => {
          visible.value = children.value.some((option) => option.visible === true);
        });
        return {
          visible,
          ns: ns2
        };
      }
    });
    function _sfc_render$b(_ctx, _cache, $props, $setup, $data, $options) {
      return withDirectives((openBlock(), createElementBlock("ul", {
        class: normalizeClass(_ctx.ns.be("group", "wrap"))
      }, [
        createBaseVNode("li", {
          class: normalizeClass(_ctx.ns.be("group", "title"))
        }, toDisplayString$1(_ctx.label), 3),
        createBaseVNode("li", null, [
          createBaseVNode("ul", {
            class: normalizeClass(_ctx.ns.b("group"))
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 2)
        ])
      ], 2)), [
        [vShow, _ctx.visible]
      ]);
    }
    var OptionGroup = /* @__PURE__ */ _export_sfc$1(_sfc_main$1a, [["render", _sfc_render$b], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/select/src/option-group.vue"]]);
    const ElSelect = withInstall(Select$1, {
      Option,
      OptionGroup
    });
    const ElOption = withNoopInstall(Option);
    const ElOptionGroup = withNoopInstall(OptionGroup);
    const usePagination = () => inject(elPaginationKey, {});
    const paginationSizesProps = buildProps({
      pageSize: {
        type: Number,
        required: true
      },
      pageSizes: {
        type: definePropType(Array),
        default: () => mutable([10, 20, 30, 40, 50, 100])
      },
      popperClass: {
        type: String
      },
      disabled: Boolean,
      size: {
        type: String,
        default: "default"
      }
    });
    const __default__$Y = {
      name: "ElPaginationSizes"
    };
    const _sfc_main$19 = /* @__PURE__ */ defineComponent({
      ...__default__$Y,
      props: paginationSizesProps,
      emits: ["page-size-change"],
      setup(__props, { emit: emit2 }) {
        const props = __props;
        const { t } = useLocale();
        const ns2 = useNamespace("pagination");
        const pagination = usePagination();
        const innerPageSize = ref(props.pageSize);
        watch(() => props.pageSizes, (newVal, oldVal) => {
          if (isEqual$1(newVal, oldVal))
            return;
          if (Array.isArray(newVal)) {
            const pageSize = newVal.includes(props.pageSize) ? props.pageSize : props.pageSizes[0];
            emit2("page-size-change", pageSize);
          }
        });
        watch(() => props.pageSize, (newVal) => {
          innerPageSize.value = newVal;
        });
        const innerPageSizes = computed(() => props.pageSizes);
        function handleChange(val) {
          var _a2;
          if (val !== innerPageSize.value) {
            innerPageSize.value = val;
            (_a2 = pagination.handleSizeChange) == null ? void 0 : _a2.call(pagination, Number(val));
          }
        }
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("span", {
            class: normalizeClass(unref(ns2).e("sizes"))
          }, [
            createVNode(unref(ElSelect), {
              "model-value": innerPageSize.value,
              disabled: _ctx.disabled,
              "popper-class": _ctx.popperClass,
              size: _ctx.size,
              onChange: handleChange
            }, {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(Fragment, null, renderList(unref(innerPageSizes), (item) => {
                  return openBlock(), createBlock(unref(ElOption), {
                    key: item,
                    value: item,
                    label: item + unref(t)("el.pagination.pagesize")
                  }, null, 8, ["value", "label"]);
                }), 128))
              ]),
              _: 1
            }, 8, ["model-value", "disabled", "popper-class", "size"])
          ], 2);
        };
      }
    });
    var Sizes = /* @__PURE__ */ _export_sfc$1(_sfc_main$19, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/pagination/src/components/sizes.vue"]]);
    const _hoisted_1$t = ["disabled"];
    const __default__$X = {
      name: "ElPaginationJumper"
    };
    const _sfc_main$18 = /* @__PURE__ */ defineComponent({
      ...__default__$X,
      setup(__props) {
        const { t } = useLocale();
        const ns2 = useNamespace("pagination");
        const { pageCount, disabled, currentPage, changeEvent } = usePagination();
        const userInput = ref();
        const innerValue = computed(() => {
          var _a2;
          return (_a2 = userInput.value) != null ? _a2 : currentPage == null ? void 0 : currentPage.value;
        });
        function handleInput(val) {
          userInput.value = +val;
        }
        function handleChange(val) {
          val = Math.trunc(+val);
          changeEvent == null ? void 0 : changeEvent(+val);
          userInput.value = void 0;
        }
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("span", {
            class: normalizeClass(unref(ns2).e("jump")),
            disabled: unref(disabled)
          }, [
            createTextVNode(toDisplayString$1(unref(t)("el.pagination.goto")) + " ", 1),
            createVNode(unref(ElInput), {
              size: "small",
              class: normalizeClass([unref(ns2).e("editor"), unref(ns2).is("in-pagination")]),
              min: 1,
              max: unref(pageCount),
              disabled: unref(disabled),
              "model-value": unref(innerValue),
              type: "number",
              "onUpdate:modelValue": handleInput,
              onChange: handleChange
            }, null, 8, ["class", "max", "disabled", "model-value"]),
            createTextVNode(" " + toDisplayString$1(unref(t)("el.pagination.pageClassifier")), 1)
          ], 10, _hoisted_1$t);
        };
      }
    });
    var Jumper = /* @__PURE__ */ _export_sfc$1(_sfc_main$18, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/pagination/src/components/jumper.vue"]]);
    const paginationTotalProps = buildProps({
      total: {
        type: Number,
        default: 1e3
      }
    });
    const _hoisted_1$s = ["disabled"];
    const __default__$W = {
      name: "ElPaginationTotal"
    };
    const _sfc_main$17 = /* @__PURE__ */ defineComponent({
      ...__default__$W,
      props: paginationTotalProps,
      setup(__props) {
        const { t } = useLocale();
        const ns2 = useNamespace("pagination");
        const { disabled } = usePagination();
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("span", {
            class: normalizeClass(unref(ns2).e("total")),
            disabled: unref(disabled)
          }, toDisplayString$1(unref(t)("el.pagination.total", {
            total: _ctx.total
          })), 11, _hoisted_1$s);
        };
      }
    });
    var Total = /* @__PURE__ */ _export_sfc$1(_sfc_main$17, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/pagination/src/components/total.vue"]]);
    const paginationPagerProps = buildProps({
      currentPage: {
        type: Number,
        default: 1
      },
      pageCount: {
        type: Number,
        required: true
      },
      pagerCount: {
        type: Number,
        default: 7
      },
      disabled: Boolean
    });
    const _hoisted_1$r = ["onKeyup"];
    const _hoisted_2$h = ["aria-current", "tabindex"];
    const _hoisted_3$7 = ["tabindex"];
    const _hoisted_4$5 = ["aria-current", "tabindex"];
    const _hoisted_5$4 = ["tabindex"];
    const _hoisted_6$1 = ["aria-current", "tabindex"];
    const __default__$V = {
      name: "ElPaginationPager"
    };
    const _sfc_main$16 = /* @__PURE__ */ defineComponent({
      ...__default__$V,
      props: paginationPagerProps,
      emits: ["change"],
      setup(__props, { emit: emit2 }) {
        const props = __props;
        const nsPager = useNamespace("pager");
        const nsIcon = useNamespace("icon");
        const showPrevMore = ref(false);
        const showNextMore = ref(false);
        const quickPrevHover = ref(false);
        const quickNextHover = ref(false);
        const quickPrevFocus = ref(false);
        const quickNextFocus = ref(false);
        const pagers = computed(() => {
          const pagerCount = props.pagerCount;
          const halfPagerCount = (pagerCount - 1) / 2;
          const currentPage = Number(props.currentPage);
          const pageCount = Number(props.pageCount);
          let showPrevMore2 = false;
          let showNextMore2 = false;
          if (pageCount > pagerCount) {
            if (currentPage > pagerCount - halfPagerCount) {
              showPrevMore2 = true;
            }
            if (currentPage < pageCount - halfPagerCount) {
              showNextMore2 = true;
            }
          }
          const array2 = [];
          if (showPrevMore2 && !showNextMore2) {
            const startPage = pageCount - (pagerCount - 2);
            for (let i2 = startPage; i2 < pageCount; i2++) {
              array2.push(i2);
            }
          } else if (!showPrevMore2 && showNextMore2) {
            for (let i2 = 2; i2 < pagerCount; i2++) {
              array2.push(i2);
            }
          } else if (showPrevMore2 && showNextMore2) {
            const offset2 = Math.floor(pagerCount / 2) - 1;
            for (let i2 = currentPage - offset2; i2 <= currentPage + offset2; i2++) {
              array2.push(i2);
            }
          } else {
            for (let i2 = 2; i2 < pageCount; i2++) {
              array2.push(i2);
            }
          }
          return array2;
        });
        const tabindex = computed(() => props.disabled ? -1 : 0);
        watchEffect(() => {
          const halfPagerCount = (props.pagerCount - 1) / 2;
          showPrevMore.value = false;
          showNextMore.value = false;
          if (props.pageCount > props.pagerCount) {
            if (props.currentPage > props.pagerCount - halfPagerCount) {
              showPrevMore.value = true;
            }
            if (props.currentPage < props.pageCount - halfPagerCount) {
              showNextMore.value = true;
            }
          }
        });
        function onMouseEnter(forward = false) {
          if (props.disabled)
            return;
          if (forward) {
            quickPrevHover.value = true;
          } else {
            quickNextHover.value = true;
          }
        }
        function onFocus(forward = false) {
          if (forward) {
            quickPrevFocus.value = true;
          } else {
            quickNextFocus.value = true;
          }
        }
        function onEnter(e2) {
          const target = e2.target;
          if (target.tagName.toLowerCase() === "li" && Array.from(target.classList).includes("number")) {
            const newPage = Number(target.textContent);
            if (newPage !== props.currentPage) {
              emit2("change", newPage);
            }
          } else if (target.tagName.toLowerCase() === "li" && Array.from(target.classList).includes("more")) {
            onPagerClick(e2);
          }
        }
        function onPagerClick(event) {
          const target = event.target;
          if (target.tagName.toLowerCase() === "ul" || props.disabled) {
            return;
          }
          let newPage = Number(target.textContent);
          const pageCount = props.pageCount;
          const currentPage = props.currentPage;
          const pagerCountOffset = props.pagerCount - 2;
          if (target.className.includes("more")) {
            if (target.className.includes("quickprev")) {
              newPage = currentPage - pagerCountOffset;
            } else if (target.className.includes("quicknext")) {
              newPage = currentPage + pagerCountOffset;
            }
          }
          if (!Number.isNaN(+newPage)) {
            if (newPage < 1) {
              newPage = 1;
            }
            if (newPage > pageCount) {
              newPage = pageCount;
            }
          }
          if (newPage !== currentPage) {
            emit2("change", newPage);
          }
        }
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("ul", {
            class: normalizeClass(unref(nsPager).b()),
            onClick: onPagerClick,
            onKeyup: withKeys(onEnter, ["enter"])
          }, [
            _ctx.pageCount > 0 ? (openBlock(), createElementBlock("li", {
              key: 0,
              class: normalizeClass([[
                unref(nsPager).is("active", _ctx.currentPage === 1),
                unref(nsPager).is("disabled", _ctx.disabled)
              ], "number"]),
              "aria-current": _ctx.currentPage === 1,
              tabindex: unref(tabindex)
            }, " 1 ", 10, _hoisted_2$h)) : createCommentVNode("v-if", true),
            showPrevMore.value ? (openBlock(), createElementBlock("li", {
              key: 1,
              class: normalizeClass([
                "more",
                "btn-quickprev",
                unref(nsIcon).b(),
                unref(nsPager).is("disabled", _ctx.disabled)
              ]),
              tabindex: unref(tabindex),
              onMouseenter: _cache[0] || (_cache[0] = ($event) => onMouseEnter(true)),
              onMouseleave: _cache[1] || (_cache[1] = ($event) => quickPrevHover.value = false),
              onFocus: _cache[2] || (_cache[2] = ($event) => onFocus(true)),
              onBlur: _cache[3] || (_cache[3] = ($event) => quickPrevFocus.value = false)
            }, [
              quickPrevHover.value || quickPrevFocus.value ? (openBlock(), createBlock(unref(d_arrow_left_default), { key: 0 })) : (openBlock(), createBlock(unref(more_filled_default), { key: 1 }))
            ], 42, _hoisted_3$7)) : createCommentVNode("v-if", true),
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(pagers), (pager) => {
              return openBlock(), createElementBlock("li", {
                key: pager,
                class: normalizeClass([[
                  unref(nsPager).is("active", _ctx.currentPage === pager),
                  unref(nsPager).is("disabled", _ctx.disabled)
                ], "number"]),
                "aria-current": _ctx.currentPage === pager,
                tabindex: unref(tabindex)
              }, toDisplayString$1(pager), 11, _hoisted_4$5);
            }), 128)),
            showNextMore.value ? (openBlock(), createElementBlock("li", {
              key: 2,
              class: normalizeClass([
                "more",
                "btn-quicknext",
                unref(nsIcon).b(),
                unref(nsPager).is("disabled", _ctx.disabled)
              ]),
              tabindex: unref(tabindex),
              onMouseenter: _cache[4] || (_cache[4] = ($event) => onMouseEnter()),
              onMouseleave: _cache[5] || (_cache[5] = ($event) => quickNextHover.value = false),
              onFocus: _cache[6] || (_cache[6] = ($event) => onFocus()),
              onBlur: _cache[7] || (_cache[7] = ($event) => quickNextFocus.value = false)
            }, [
              quickNextHover.value || quickNextFocus.value ? (openBlock(), createBlock(unref(d_arrow_right_default), { key: 0 })) : (openBlock(), createBlock(unref(more_filled_default), { key: 1 }))
            ], 42, _hoisted_5$4)) : createCommentVNode("v-if", true),
            _ctx.pageCount > 1 ? (openBlock(), createElementBlock("li", {
              key: 3,
              class: normalizeClass([[
                unref(nsPager).is("active", _ctx.currentPage === _ctx.pageCount),
                unref(nsPager).is("disabled", _ctx.disabled)
              ], "number"]),
              "aria-current": _ctx.currentPage === _ctx.pageCount,
              tabindex: unref(tabindex)
            }, toDisplayString$1(_ctx.pageCount), 11, _hoisted_6$1)) : createCommentVNode("v-if", true)
          ], 42, _hoisted_1$r);
        };
      }
    });
    var Pager = /* @__PURE__ */ _export_sfc$1(_sfc_main$16, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/pagination/src/components/pager.vue"]]);
    const isAbsent = (v2) => typeof v2 !== "number";
    const paginationProps = buildProps({
      total: Number,
      pageSize: Number,
      defaultPageSize: Number,
      currentPage: Number,
      defaultCurrentPage: Number,
      pageCount: Number,
      pagerCount: {
        type: Number,
        validator: (value) => {
          return typeof value === "number" && Math.trunc(value) === value && value > 4 && value < 22 && value % 2 === 1;
        },
        default: 7
      },
      layout: {
        type: String,
        default: ["prev", "pager", "next", "jumper", "->", "total"].join(", ")
      },
      pageSizes: {
        type: definePropType(Array),
        default: () => mutable([10, 20, 30, 40, 50, 100])
      },
      popperClass: {
        type: String,
        default: ""
      },
      prevText: {
        type: String,
        default: ""
      },
      nextText: {
        type: String,
        default: ""
      },
      small: Boolean,
      background: Boolean,
      disabled: Boolean,
      hideOnSinglePage: Boolean
    });
    const paginationEmits = {
      "update:current-page": (val) => typeof val === "number",
      "update:page-size": (val) => typeof val === "number",
      "size-change": (val) => typeof val === "number",
      "current-change": (val) => typeof val === "number",
      "prev-click": (val) => typeof val === "number",
      "next-click": (val) => typeof val === "number"
    };
    const componentName = "ElPagination";
    var Pagination = defineComponent({
      name: componentName,
      props: paginationProps,
      emits: paginationEmits,
      setup(props, { emit: emit2, slots }) {
        const { t } = useLocale();
        const ns2 = useNamespace("pagination");
        const vnodeProps = getCurrentInstance().vnode.props || {};
        const hasCurrentPageListener = "onUpdate:currentPage" in vnodeProps || "onUpdate:current-page" in vnodeProps || "onCurrentChange" in vnodeProps;
        const hasPageSizeListener = "onUpdate:pageSize" in vnodeProps || "onUpdate:page-size" in vnodeProps || "onSizeChange" in vnodeProps;
        const assertValidUsage = computed(() => {
          if (isAbsent(props.total) && isAbsent(props.pageCount))
            return false;
          if (!isAbsent(props.currentPage) && !hasCurrentPageListener)
            return false;
          if (props.layout.includes("sizes")) {
            if (!isAbsent(props.pageCount)) {
              if (!hasPageSizeListener)
                return false;
            } else if (!isAbsent(props.total)) {
              if (!isAbsent(props.pageSize)) {
                if (!hasPageSizeListener) {
                  return false;
                }
              }
            }
          }
          return true;
        });
        const innerPageSize = ref(isAbsent(props.defaultPageSize) ? 10 : props.defaultPageSize);
        const innerCurrentPage = ref(isAbsent(props.defaultCurrentPage) ? 1 : props.defaultCurrentPage);
        const pageSizeBridge = computed({
          get() {
            return isAbsent(props.pageSize) ? innerPageSize.value : props.pageSize;
          },
          set(v2) {
            if (isAbsent(props.pageSize)) {
              innerPageSize.value = v2;
            }
            if (hasPageSizeListener) {
              emit2("update:page-size", v2);
              emit2("size-change", v2);
            }
          }
        });
        const pageCountBridge = computed(() => {
          let pageCount = 0;
          if (!isAbsent(props.pageCount)) {
            pageCount = props.pageCount;
          } else if (!isAbsent(props.total)) {
            pageCount = Math.max(1, Math.ceil(props.total / pageSizeBridge.value));
          }
          return pageCount;
        });
        const currentPageBridge = computed({
          get() {
            return isAbsent(props.currentPage) ? innerCurrentPage.value : props.currentPage;
          },
          set(v2) {
            let newCurrentPage = v2;
            if (v2 < 1) {
              newCurrentPage = 1;
            } else if (v2 > pageCountBridge.value) {
              newCurrentPage = pageCountBridge.value;
            }
            if (isAbsent(props.currentPage)) {
              innerCurrentPage.value = newCurrentPage;
            }
            if (hasCurrentPageListener) {
              emit2("update:current-page", newCurrentPage);
              emit2("current-change", newCurrentPage);
            }
          }
        });
        watch(pageCountBridge, (val) => {
          if (currentPageBridge.value > val)
            currentPageBridge.value = val;
        });
        function handleCurrentChange(val) {
          currentPageBridge.value = val;
        }
        function handleSizeChange(val) {
          pageSizeBridge.value = val;
          const newPageCount = pageCountBridge.value;
          if (currentPageBridge.value > newPageCount) {
            currentPageBridge.value = newPageCount;
          }
        }
        function prev() {
          if (props.disabled)
            return;
          currentPageBridge.value -= 1;
          emit2("prev-click", currentPageBridge.value);
        }
        function next() {
          if (props.disabled)
            return;
          currentPageBridge.value += 1;
          emit2("next-click", currentPageBridge.value);
        }
        function addClass2(element, cls) {
          if (element) {
            if (!element.props) {
              element.props = {};
            }
            element.props.class = [element.props.class, cls].join(" ");
          }
        }
        provide(elPaginationKey, {
          pageCount: pageCountBridge,
          disabled: computed(() => props.disabled),
          currentPage: currentPageBridge,
          changeEvent: handleCurrentChange,
          handleSizeChange
        });
        return () => {
          var _a2, _b;
          if (!assertValidUsage.value) {
            debugWarn(componentName, t("el.pagination.deprecationWarning"));
            return null;
          }
          if (!props.layout)
            return null;
          if (props.hideOnSinglePage && pageCountBridge.value <= 1)
            return null;
          const rootChildren = [];
          const rightWrapperChildren = [];
          const rightWrapperRoot = h$2("div", { class: ns2.e("rightwrapper") }, rightWrapperChildren);
          const TEMPLATE_MAP = {
            prev: h$2(Prev, {
              disabled: props.disabled,
              currentPage: currentPageBridge.value,
              prevText: props.prevText,
              onClick: prev
            }),
            jumper: h$2(Jumper),
            pager: h$2(Pager, {
              currentPage: currentPageBridge.value,
              pageCount: pageCountBridge.value,
              pagerCount: props.pagerCount,
              onChange: handleCurrentChange,
              disabled: props.disabled
            }),
            next: h$2(Next, {
              disabled: props.disabled,
              currentPage: currentPageBridge.value,
              pageCount: pageCountBridge.value,
              nextText: props.nextText,
              onClick: next
            }),
            sizes: h$2(Sizes, {
              pageSize: pageSizeBridge.value,
              pageSizes: props.pageSizes,
              popperClass: props.popperClass,
              disabled: props.disabled,
              size: props.small ? "small" : "default"
            }),
            slot: (_b = (_a2 = slots == null ? void 0 : slots.default) == null ? void 0 : _a2.call(slots)) != null ? _b : null,
            total: h$2(Total, { total: isAbsent(props.total) ? 0 : props.total })
          };
          const components = props.layout.split(",").map((item) => item.trim());
          let haveRightWrapper = false;
          components.forEach((c2) => {
            if (c2 === "->") {
              haveRightWrapper = true;
              return;
            }
            if (!haveRightWrapper) {
              rootChildren.push(TEMPLATE_MAP[c2]);
            } else {
              rightWrapperChildren.push(TEMPLATE_MAP[c2]);
            }
          });
          addClass2(rootChildren[0], ns2.is("first"));
          addClass2(rootChildren[rootChildren.length - 1], ns2.is("last"));
          if (haveRightWrapper && rightWrapperChildren.length > 0) {
            addClass2(rightWrapperChildren[0], ns2.is("first"));
            addClass2(rightWrapperChildren[rightWrapperChildren.length - 1], ns2.is("last"));
            rootChildren.push(rightWrapperRoot);
          }
          return h$2("div", {
            role: "pagination",
            "aria-label": "pagination",
            class: [
              ns2.b(),
              ns2.is("background", props.background),
              {
                [ns2.m("small")]: props.small
              }
            ]
          }, rootChildren);
        };
      }
    });
    const ElPagination = withInstall(Pagination);
    const popconfirmProps = buildProps({
      title: String,
      confirmButtonText: String,
      cancelButtonText: String,
      confirmButtonType: {
        type: String,
        values: buttonTypes,
        default: "primary"
      },
      cancelButtonType: {
        type: String,
        values: buttonTypes,
        default: "text"
      },
      icon: {
        type: iconPropType,
        default: question_filled_default
      },
      iconColor: {
        type: String,
        default: "#f90"
      },
      hideIcon: {
        type: Boolean,
        default: false
      },
      hideAfter: {
        type: Number,
        default: 200
      },
      onConfirm: {
        type: definePropType(Function)
      },
      onCancel: {
        type: definePropType(Function)
      },
      teleported: useTooltipContentProps.teleported,
      persistent: useTooltipContentProps.persistent
    });
    const __default__$U = {
      name: "ElPopconfirm"
    };
    const _sfc_main$15 = /* @__PURE__ */ defineComponent({
      ...__default__$U,
      props: popconfirmProps,
      setup(__props) {
        const props = __props;
        const { t } = useLocale();
        const ns2 = useNamespace("popconfirm");
        const tooltipRef = ref();
        const hidePopper = () => {
          var _a2, _b;
          (_b = (_a2 = tooltipRef.value) == null ? void 0 : _a2.onClose) == null ? void 0 : _b.call(_a2);
        };
        const confirm = (e2) => {
          var _a2;
          (_a2 = props.onConfirm) == null ? void 0 : _a2.call(props, e2);
          hidePopper();
        };
        const cancel = (e2) => {
          var _a2;
          (_a2 = props.onCancel) == null ? void 0 : _a2.call(props, e2);
          hidePopper();
        };
        const finalConfirmButtonText = computed(() => props.confirmButtonText || t("el.popconfirm.confirmButtonText"));
        const finalCancelButtonText = computed(() => props.cancelButtonText || t("el.popconfirm.cancelButtonText"));
        return (_ctx, _cache) => {
          return openBlock(), createBlock(unref(ElTooltip), {
            ref_key: "tooltipRef",
            ref: tooltipRef,
            trigger: "click",
            effect: "light",
            "popper-class": `${unref(ns2).namespace.value}-popover`,
            teleported: _ctx.teleported,
            "fallback-placements": ["bottom", "top", "right", "left"],
            "hide-after": _ctx.hideAfter,
            persistent: _ctx.persistent
          }, {
            content: withCtx(() => [
              createBaseVNode("div", {
                class: normalizeClass(unref(ns2).b())
              }, [
                createBaseVNode("div", {
                  class: normalizeClass(unref(ns2).e("main"))
                }, [
                  !_ctx.hideIcon && _ctx.icon ? (openBlock(), createBlock(unref(ElIcon), {
                    key: 0,
                    class: normalizeClass(unref(ns2).e("icon")),
                    style: normalizeStyle({ color: _ctx.iconColor })
                  }, {
                    default: withCtx(() => [
                      (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))
                    ]),
                    _: 1
                  }, 8, ["class", "style"])) : createCommentVNode("v-if", true),
                  createTextVNode(" " + toDisplayString$1(_ctx.title), 1)
                ], 2),
                createBaseVNode("div", {
                  class: normalizeClass(unref(ns2).e("action"))
                }, [
                  createVNode(unref(ElButton), {
                    size: "small",
                    type: _ctx.cancelButtonType === "text" ? "" : _ctx.cancelButtonType,
                    text: _ctx.cancelButtonType === "text",
                    onClick: cancel
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString$1(unref(finalCancelButtonText)), 1)
                    ]),
                    _: 1
                  }, 8, ["type", "text"]),
                  createVNode(unref(ElButton), {
                    size: "small",
                    type: _ctx.confirmButtonType === "text" ? "" : _ctx.confirmButtonType,
                    text: _ctx.confirmButtonType === "text",
                    onClick: confirm
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString$1(unref(finalConfirmButtonText)), 1)
                    ]),
                    _: 1
                  }, 8, ["type", "text"])
                ], 2)
              ], 2)
            ]),
            default: withCtx(() => [
              _ctx.$slots.reference ? renderSlot(_ctx.$slots, "reference", { key: 0 }) : createCommentVNode("v-if", true)
            ]),
            _: 3
          }, 8, ["popper-class", "teleported", "hide-after", "persistent"]);
        };
      }
    });
    var Popconfirm = /* @__PURE__ */ _export_sfc$1(_sfc_main$15, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/popconfirm/src/popconfirm.vue"]]);
    const ElPopconfirm = withInstall(Popconfirm);
    const popoverProps = buildProps({
      trigger: useTooltipTriggerProps.trigger,
      placement: dropdownProps.placement,
      disabled: useTooltipTriggerProps.disabled,
      visible: useTooltipContentProps.visible,
      transition: useTooltipContentProps.transition,
      popperOptions: dropdownProps.popperOptions,
      tabindex: dropdownProps.tabindex,
      content: useTooltipContentProps.content,
      popperStyle: useTooltipContentProps.popperStyle,
      popperClass: useTooltipContentProps.popperClass,
      enterable: {
        ...useTooltipContentProps.enterable,
        default: true
      },
      effect: {
        ...useTooltipContentProps.effect,
        default: "light"
      },
      teleported: useTooltipContentProps.teleported,
      title: String,
      width: {
        type: [String, Number],
        default: 150
      },
      offset: {
        type: Number,
        default: void 0
      },
      showAfter: {
        type: Number,
        default: 0
      },
      hideAfter: {
        type: Number,
        default: 200
      },
      autoClose: {
        type: Number,
        default: 0
      },
      showArrow: {
        type: Boolean,
        default: true
      },
      persistent: {
        type: Boolean,
        default: true
      },
      "onUpdate:visible": {
        type: Function
      }
    });
    const popoverEmits = {
      "update:visible": (value) => isBoolean$1(value),
      "before-enter": () => true,
      "before-leave": () => true,
      "after-enter": () => true,
      "after-leave": () => true
    };
    const __default__$T = {
      name: "ElPopover"
    };
    const _sfc_main$14 = /* @__PURE__ */ defineComponent({
      ...__default__$T,
      props: popoverProps,
      emits: popoverEmits,
      setup(__props, { expose, emit: emit2 }) {
        const props = __props;
        const updateEventKeyRaw = `onUpdate:visible`;
        const onUpdateVisible = computed(() => {
          return props[updateEventKeyRaw];
        });
        const ns2 = useNamespace("popover");
        const tooltipRef = ref();
        const popperRef = computed(() => {
          var _a2;
          return (_a2 = unref(tooltipRef)) == null ? void 0 : _a2.popperRef;
        });
        const style2 = computed(() => {
          return [
            {
              width: addUnit(props.width)
            },
            props.popperStyle
          ];
        });
        const kls = computed(() => {
          return [ns2.b(), props.popperClass, { [ns2.m("plain")]: !!props.content }];
        });
        const gpuAcceleration = computed(() => {
          return props.transition === "el-fade-in-linear";
        });
        const hide = () => {
          var _a2;
          (_a2 = tooltipRef.value) == null ? void 0 : _a2.hide();
        };
        const beforeEnter = () => {
          emit2("before-enter");
        };
        const beforeLeave = () => {
          emit2("before-leave");
        };
        const afterEnter = () => {
          emit2("after-enter");
        };
        const afterLeave = () => {
          emit2("update:visible", false);
          emit2("after-leave");
        };
        expose({
          popperRef,
          hide
        });
        return (_ctx, _cache) => {
          return openBlock(), createBlock(unref(ElTooltip), mergeProps({
            ref_key: "tooltipRef",
            ref: tooltipRef
          }, _ctx.$attrs, {
            trigger: _ctx.trigger,
            placement: _ctx.placement,
            disabled: _ctx.disabled,
            visible: _ctx.visible,
            transition: _ctx.transition,
            "popper-options": _ctx.popperOptions,
            tabindex: _ctx.tabindex,
            content: _ctx.content,
            offset: _ctx.offset,
            "show-after": _ctx.showAfter,
            "hide-after": _ctx.hideAfter,
            "auto-close": _ctx.autoClose,
            "show-arrow": _ctx.showArrow,
            "aria-label": _ctx.title,
            effect: _ctx.effect,
            enterable: _ctx.enterable,
            "popper-class": unref(kls),
            "popper-style": unref(style2),
            teleported: _ctx.teleported,
            persistent: _ctx.persistent,
            "gpu-acceleration": unref(gpuAcceleration),
            "onUpdate:visible": unref(onUpdateVisible),
            onBeforeShow: beforeEnter,
            onBeforeHide: beforeLeave,
            onShow: afterEnter,
            onHide: afterLeave
          }), {
            content: withCtx(() => [
              _ctx.title ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(unref(ns2).e("title")),
                role: "title"
              }, toDisplayString$1(_ctx.title), 3)) : createCommentVNode("v-if", true),
              renderSlot(_ctx.$slots, "default", {}, () => [
                createTextVNode(toDisplayString$1(_ctx.content), 1)
              ])
            ]),
            default: withCtx(() => [
              _ctx.$slots.reference ? renderSlot(_ctx.$slots, "reference", { key: 0 }) : createCommentVNode("v-if", true)
            ]),
            _: 3
          }, 16, ["trigger", "placement", "disabled", "visible", "transition", "popper-options", "tabindex", "content", "offset", "show-after", "hide-after", "auto-close", "show-arrow", "aria-label", "effect", "enterable", "popper-class", "popper-style", "teleported", "persistent", "gpu-acceleration", "onUpdate:visible"]);
        };
      }
    });
    var Popover = /* @__PURE__ */ _export_sfc$1(_sfc_main$14, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/popover/src/popover.vue"]]);
    const attachEvents = (el, binding2) => {
      const popperComponent = binding2.arg || binding2.value;
      const popover = popperComponent == null ? void 0 : popperComponent.popperRef;
      if (popover) {
        popover.triggerRef = el;
      }
    };
    var PopoverDirective = {
      mounted(el, binding2) {
        attachEvents(el, binding2);
      },
      updated(el, binding2) {
        attachEvents(el, binding2);
      }
    };
    const VPopover = "popover";
    const ElPopoverDirective = withInstallDirective(PopoverDirective, VPopover);
    const ElPopover = withInstall(Popover, {
      directive: ElPopoverDirective
    });
    const progressProps = buildProps({
      type: {
        type: String,
        default: "line",
        values: ["line", "circle", "dashboard"]
      },
      percentage: {
        type: Number,
        default: 0,
        validator: (val) => val >= 0 && val <= 100
      },
      status: {
        type: String,
        default: "",
        values: ["", "success", "exception", "warning"]
      },
      indeterminate: {
        type: Boolean,
        default: false
      },
      duration: {
        type: Number,
        default: 3
      },
      strokeWidth: {
        type: Number,
        default: 6
      },
      strokeLinecap: {
        type: definePropType(String),
        default: "round"
      },
      textInside: {
        type: Boolean,
        default: false
      },
      width: {
        type: Number,
        default: 126
      },
      showText: {
        type: Boolean,
        default: true
      },
      color: {
        type: definePropType([
          String,
          Array,
          Function
        ]),
        default: ""
      },
      format: {
        type: definePropType(Function),
        default: (percentage) => `${percentage}%`
      }
    });
    const _hoisted_1$q = ["aria-valuenow"];
    const _hoisted_2$g = { viewBox: "0 0 100 100" };
    const _hoisted_3$6 = ["d", "stroke", "stroke-width"];
    const _hoisted_4$4 = ["d", "stroke", "opacity", "stroke-linecap", "stroke-width"];
    const _hoisted_5$3 = { key: 0 };
    const __default__$S = {
      name: "ElProgress"
    };
    const _sfc_main$13 = /* @__PURE__ */ defineComponent({
      ...__default__$S,
      props: progressProps,
      setup(__props) {
        const props = __props;
        const STATUS_COLOR_MAP = {
          success: "#13ce66",
          exception: "#ff4949",
          warning: "#e6a23c",
          default: "#20a0ff"
        };
        const ns2 = useNamespace("progress");
        const barStyle = computed(() => ({
          width: `${props.percentage}%`,
          animationDuration: `${props.duration}s`,
          backgroundColor: getCurrentColor(props.percentage)
        }));
        const relativeStrokeWidth = computed(() => (props.strokeWidth / props.width * 100).toFixed(1));
        const radius = computed(() => {
          if (["circle", "dashboard"].includes(props.type)) {
            return Number.parseInt(`${50 - Number.parseFloat(relativeStrokeWidth.value) / 2}`, 10);
          }
          return 0;
        });
        const trackPath = computed(() => {
          const r = radius.value;
          const isDashboard = props.type === "dashboard";
          return `
          M 50 50
          m 0 ${isDashboard ? "" : "-"}${r}
          a ${r} ${r} 0 1 1 0 ${isDashboard ? "-" : ""}${r * 2}
          a ${r} ${r} 0 1 1 0 ${isDashboard ? "" : "-"}${r * 2}
          `;
        });
        const perimeter = computed(() => 2 * Math.PI * radius.value);
        const rate = computed(() => props.type === "dashboard" ? 0.75 : 1);
        const strokeDashoffset = computed(() => {
          const offset2 = -1 * perimeter.value * (1 - rate.value) / 2;
          return `${offset2}px`;
        });
        const trailPathStyle = computed(() => ({
          strokeDasharray: `${perimeter.value * rate.value}px, ${perimeter.value}px`,
          strokeDashoffset: strokeDashoffset.value
        }));
        const circlePathStyle = computed(() => ({
          strokeDasharray: `${perimeter.value * rate.value * (props.percentage / 100)}px, ${perimeter.value}px`,
          strokeDashoffset: strokeDashoffset.value,
          transition: "stroke-dasharray 0.6s ease 0s, stroke 0.6s ease, opacity ease 0.6s"
        }));
        const stroke = computed(() => {
          let ret;
          if (props.color) {
            ret = getCurrentColor(props.percentage);
          } else {
            ret = STATUS_COLOR_MAP[props.status] || STATUS_COLOR_MAP.default;
          }
          return ret;
        });
        const statusIcon = computed(() => {
          if (props.status === "warning") {
            return warning_filled_default;
          }
          if (props.type === "line") {
            return props.status === "success" ? circle_check_default : circle_close_default;
          } else {
            return props.status === "success" ? check_default : close_default;
          }
        });
        const progressTextSize = computed(() => {
          return props.type === "line" ? 12 + props.strokeWidth * 0.4 : props.width * 0.111111 + 2;
        });
        const content = computed(() => props.format(props.percentage));
        function getColors(color) {
          const span = 100 / color.length;
          const seriesColors = color.map((seriesColor, index2) => {
            if (isString$3(seriesColor)) {
              return {
                color: seriesColor,
                percentage: (index2 + 1) * span
              };
            }
            return seriesColor;
          });
          return seriesColors.sort((a2, b2) => a2.percentage - b2.percentage);
        }
        const getCurrentColor = (percentage) => {
          var _a2;
          const { color } = props;
          if (isFunction$4(color)) {
            return color(percentage);
          } else if (isString$3(color)) {
            return color;
          } else {
            const colors = getColors(color);
            for (const color2 of colors) {
              if (color2.percentage > percentage)
                return color2.color;
            }
            return (_a2 = colors[colors.length - 1]) == null ? void 0 : _a2.color;
          }
        };
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            class: normalizeClass([
              unref(ns2).b(),
              unref(ns2).m(_ctx.type),
              unref(ns2).is(_ctx.status),
              {
                [unref(ns2).m("without-text")]: !_ctx.showText,
                [unref(ns2).m("text-inside")]: _ctx.textInside
              }
            ]),
            role: "progressbar",
            "aria-valuenow": _ctx.percentage,
            "aria-valuemin": "0",
            "aria-valuemax": "100"
          }, [
            _ctx.type === "line" ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(unref(ns2).b("bar"))
            }, [
              createBaseVNode("div", {
                class: normalizeClass(unref(ns2).be("bar", "outer")),
                style: normalizeStyle({ height: `${_ctx.strokeWidth}px` })
              }, [
                createBaseVNode("div", {
                  class: normalizeClass([
                    unref(ns2).be("bar", "inner"),
                    { [unref(ns2).bem("bar", "inner", "indeterminate")]: _ctx.indeterminate }
                  ]),
                  style: normalizeStyle(unref(barStyle))
                }, [
                  (_ctx.showText || _ctx.$slots.default) && _ctx.textInside ? (openBlock(), createElementBlock("div", {
                    key: 0,
                    class: normalizeClass(unref(ns2).be("bar", "innerText"))
                  }, [
                    renderSlot(_ctx.$slots, "default", { percentage: _ctx.percentage }, () => [
                      createBaseVNode("span", null, toDisplayString$1(unref(content)), 1)
                    ])
                  ], 2)) : createCommentVNode("v-if", true)
                ], 6)
              ], 6)
            ], 2)) : (openBlock(), createElementBlock("div", {
              key: 1,
              class: normalizeClass(unref(ns2).b("circle")),
              style: normalizeStyle({ height: `${_ctx.width}px`, width: `${_ctx.width}px` })
            }, [
              (openBlock(), createElementBlock("svg", _hoisted_2$g, [
                createBaseVNode("path", {
                  class: normalizeClass(unref(ns2).be("circle", "track")),
                  d: unref(trackPath),
                  stroke: `var(${unref(ns2).cssVarName("fill-color-light")}, #e5e9f2)`,
                  "stroke-width": unref(relativeStrokeWidth),
                  fill: "none",
                  style: normalizeStyle(unref(trailPathStyle))
                }, null, 14, _hoisted_3$6),
                createBaseVNode("path", {
                  class: normalizeClass(unref(ns2).be("circle", "path")),
                  d: unref(trackPath),
                  stroke: unref(stroke),
                  fill: "none",
                  opacity: _ctx.percentage ? 1 : 0,
                  "stroke-linecap": _ctx.strokeLinecap,
                  "stroke-width": unref(relativeStrokeWidth),
                  style: normalizeStyle(unref(circlePathStyle))
                }, null, 14, _hoisted_4$4)
              ]))
            ], 6)),
            (_ctx.showText || _ctx.$slots.default) && !_ctx.textInside ? (openBlock(), createElementBlock("div", {
              key: 2,
              class: normalizeClass(unref(ns2).e("text")),
              style: normalizeStyle({ fontSize: `${unref(progressTextSize)}px` })
            }, [
              renderSlot(_ctx.$slots, "default", { percentage: _ctx.percentage }, () => [
                !_ctx.status ? (openBlock(), createElementBlock("span", _hoisted_5$3, toDisplayString$1(unref(content)), 1)) : (openBlock(), createBlock(unref(ElIcon), { key: 1 }, {
                  default: withCtx(() => [
                    (openBlock(), createBlock(resolveDynamicComponent(unref(statusIcon))))
                  ]),
                  _: 1
                }))
              ])
            ], 6)) : createCommentVNode("v-if", true)
          ], 10, _hoisted_1$q);
        };
      }
    });
    var Progress = /* @__PURE__ */ _export_sfc$1(_sfc_main$13, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/progress/src/progress.vue"]]);
    const ElProgress = withInstall(Progress);
    const rateProps = buildProps({
      modelValue: {
        type: Number,
        default: 0
      },
      id: {
        type: String,
        default: void 0
      },
      lowThreshold: {
        type: Number,
        default: 2
      },
      highThreshold: {
        type: Number,
        default: 4
      },
      max: {
        type: Number,
        default: 5
      },
      colors: {
        type: definePropType([Array, Object]),
        default: () => mutable(["", "", ""])
      },
      voidColor: {
        type: String,
        default: ""
      },
      disabledVoidColor: {
        type: String,
        default: ""
      },
      icons: {
        type: definePropType([Array, Object]),
        default: () => [star_filled_default, star_filled_default, star_filled_default]
      },
      voidIcon: {
        type: iconPropType,
        default: () => star_default
      },
      disabledVoidIcon: {
        type: iconPropType,
        default: () => star_filled_default
      },
      disabled: {
        type: Boolean
      },
      allowHalf: {
        type: Boolean
      },
      showText: {
        type: Boolean
      },
      showScore: {
        type: Boolean
      },
      textColor: {
        type: String,
        default: ""
      },
      texts: {
        type: definePropType(Array),
        default: () => mutable([
          "Extremely bad",
          "Disappointed",
          "Fair",
          "Satisfied",
          "Surprise"
        ])
      },
      scoreTemplate: {
        type: String,
        default: "{value}"
      },
      size: {
        type: String,
        validator: isValidComponentSize
      },
      label: {
        type: String,
        default: void 0
      }
    });
    const rateEmits = {
      [CHANGE_EVENT]: (value) => isNumber$1(value),
      [UPDATE_MODEL_EVENT]: (value) => isNumber$1(value)
    };
    const _hoisted_1$p = ["id", "aria-label", "aria-labelledby", "aria-valuenow", "aria-valuetext", "aria-valuemax"];
    const _hoisted_2$f = ["onMousemove", "onClick"];
    const __default__$R = {
      name: "ElRate"
    };
    const _sfc_main$12 = /* @__PURE__ */ defineComponent({
      ...__default__$R,
      props: rateProps,
      emits: rateEmits,
      setup(__props, { expose, emit: emit2 }) {
        const props = __props;
        function getValueFromMap(value, map2) {
          const isExcludedObject = (val) => isObject$7(val);
          const matchedKeys = Object.keys(map2).map((key) => +key).filter((key) => {
            const val = map2[key];
            const excluded = isExcludedObject(val) ? val.excluded : false;
            return excluded ? value < key : value <= key;
          }).sort((a2, b2) => a2 - b2);
          const matchedValue = map2[matchedKeys[0]];
          return isExcludedObject(matchedValue) && matchedValue.value || matchedValue;
        }
        const formContext = inject(formContextKey, void 0);
        const formItemContext = inject(formItemContextKey, void 0);
        const rateSize = useSize();
        const ns2 = useNamespace("rate");
        const { inputId, isLabeledByFormItem } = useFormItemInputId(props, {
          formItemContext
        });
        const currentValue = ref(props.modelValue);
        const hoverIndex = ref(-1);
        const pointerAtLeftHalf = ref(true);
        const rateClasses = computed(() => [ns2.b(), ns2.m(rateSize.value)]);
        const rateDisabled = computed(() => props.disabled || (formContext == null ? void 0 : formContext.disabled));
        const rateStyles = computed(() => {
          return ns2.cssVarBlock({
            "void-color": props.voidColor,
            "disabled-void-color": props.disabledVoidColor,
            "fill-color": activeColor.value
          });
        });
        const text = computed(() => {
          let result = "";
          if (props.showScore) {
            result = props.scoreTemplate.replace(/\{\s*value\s*\}/, rateDisabled.value ? `${props.modelValue}` : `${currentValue.value}`);
          } else if (props.showText) {
            result = props.texts[Math.ceil(currentValue.value) - 1];
          }
          return result;
        });
        const valueDecimal = computed(() => props.modelValue * 100 - Math.floor(props.modelValue) * 100);
        const colorMap = computed(() => isArray$6(props.colors) ? {
          [props.lowThreshold]: props.colors[0],
          [props.highThreshold]: { value: props.colors[1], excluded: true },
          [props.max]: props.colors[2]
        } : props.colors);
        const activeColor = computed(() => {
          const color = getValueFromMap(currentValue.value, colorMap.value);
          return isObject$7(color) ? "" : color;
        });
        const decimalStyle = computed(() => {
          let width = "";
          if (rateDisabled.value) {
            width = `${valueDecimal.value}%`;
          } else if (props.allowHalf) {
            width = "50%";
          }
          return {
            color: activeColor.value,
            width
          };
        });
        const componentMap = computed(() => isArray$6(props.icons) ? {
          [props.lowThreshold]: props.icons[0],
          [props.highThreshold]: {
            value: props.icons[1],
            excluded: true
          },
          [props.max]: props.icons[2]
        } : props.icons);
        const decimalIconComponent = computed(() => getValueFromMap(props.modelValue, componentMap.value));
        const voidComponent = computed(() => rateDisabled.value ? props.disabledVoidIcon : props.voidIcon);
        const activeComponent = computed(() => getValueFromMap(currentValue.value, componentMap.value));
        const iconComponents = computed(() => {
          const result = Array.from({ length: props.max });
          const threshold = currentValue.value;
          result.fill(activeComponent.value, 0, threshold);
          result.fill(voidComponent.value, threshold, props.max);
          return result;
        });
        function showDecimalIcon(item) {
          const showWhenDisabled = rateDisabled.value && valueDecimal.value > 0 && item - 1 < props.modelValue && item > props.modelValue;
          const showWhenAllowHalf = props.allowHalf && pointerAtLeftHalf.value && item - 0.5 <= currentValue.value && item > currentValue.value;
          return showWhenDisabled || showWhenAllowHalf;
        }
        function selectValue(value) {
          if (rateDisabled.value) {
            return;
          }
          if (props.allowHalf && pointerAtLeftHalf.value) {
            emit2(UPDATE_MODEL_EVENT, currentValue.value);
            if (props.modelValue !== currentValue.value) {
              emit2("change", currentValue.value);
            }
          } else {
            emit2(UPDATE_MODEL_EVENT, value);
            if (props.modelValue !== value) {
              emit2("change", value);
            }
          }
        }
        function handleKey(e2) {
          if (rateDisabled.value) {
            return;
          }
          let _currentValue = currentValue.value;
          const code = e2.code;
          if (code === EVENT_CODE.up || code === EVENT_CODE.right) {
            if (props.allowHalf) {
              _currentValue += 0.5;
            } else {
              _currentValue += 1;
            }
            e2.stopPropagation();
            e2.preventDefault();
          } else if (code === EVENT_CODE.left || code === EVENT_CODE.down) {
            if (props.allowHalf) {
              _currentValue -= 0.5;
            } else {
              _currentValue -= 1;
            }
            e2.stopPropagation();
            e2.preventDefault();
          }
          _currentValue = _currentValue < 0 ? 0 : _currentValue;
          _currentValue = _currentValue > props.max ? props.max : _currentValue;
          emit2(UPDATE_MODEL_EVENT, _currentValue);
          emit2("change", _currentValue);
          return _currentValue;
        }
        function setCurrentValue(value, event) {
          if (rateDisabled.value) {
            return;
          }
          if (props.allowHalf) {
            let target = event.target;
            if (hasClass(target, ns2.e("item"))) {
              target = target.querySelector(`.${ns2.e("icon")}`);
            }
            if (target.clientWidth === 0 || hasClass(target, ns2.e("decimal"))) {
              target = target.parentNode;
            }
            pointerAtLeftHalf.value = event.offsetX * 2 <= target.clientWidth;
            currentValue.value = pointerAtLeftHalf.value ? value - 0.5 : value;
          } else {
            currentValue.value = value;
          }
          hoverIndex.value = value;
        }
        function resetCurrentValue() {
          if (rateDisabled.value) {
            return;
          }
          if (props.allowHalf) {
            pointerAtLeftHalf.value = props.modelValue !== Math.floor(props.modelValue);
          }
          currentValue.value = props.modelValue;
          hoverIndex.value = -1;
        }
        watch(() => props.modelValue, (val) => {
          currentValue.value = val;
          pointerAtLeftHalf.value = props.modelValue !== Math.floor(props.modelValue);
        });
        if (!props.modelValue) {
          emit2(UPDATE_MODEL_EVENT, 0);
        }
        expose({
          setCurrentValue,
          resetCurrentValue
        });
        return (_ctx, _cache) => {
          var _a2;
          return openBlock(), createElementBlock("div", {
            id: unref(inputId),
            class: normalizeClass([unref(rateClasses), unref(ns2).is("disabled", unref(rateDisabled))]),
            role: "slider",
            "aria-label": !unref(isLabeledByFormItem) ? _ctx.label || "rating" : void 0,
            "aria-labelledby": unref(isLabeledByFormItem) ? (_a2 = unref(formItemContext)) == null ? void 0 : _a2.labelId : void 0,
            "aria-valuenow": currentValue.value,
            "aria-valuetext": unref(text) || void 0,
            "aria-valuemin": "0",
            "aria-valuemax": _ctx.max,
            tabindex: "0",
            style: normalizeStyle(unref(rateStyles)),
            onKeydown: handleKey
          }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.max, (item, key) => {
              return openBlock(), createElementBlock("span", {
                key,
                class: normalizeClass(unref(ns2).e("item")),
                onMousemove: ($event) => setCurrentValue(item, $event),
                onMouseleave: resetCurrentValue,
                onClick: ($event) => selectValue(item)
              }, [
                createVNode(unref(ElIcon), {
                  class: normalizeClass([
                    unref(ns2).e("icon"),
                    { hover: hoverIndex.value === item },
                    unref(ns2).is("active", item <= currentValue.value)
                  ])
                }, {
                  default: withCtx(() => [
                    !showDecimalIcon(item) ? (openBlock(), createBlock(resolveDynamicComponent(unref(iconComponents)[item - 1]), { key: 0 })) : createCommentVNode("v-if", true),
                    showDecimalIcon(item) ? (openBlock(), createBlock(unref(ElIcon), {
                      key: 1,
                      style: normalizeStyle(unref(decimalStyle)),
                      class: normalizeClass([unref(ns2).e("icon"), unref(ns2).e("decimal")])
                    }, {
                      default: withCtx(() => [
                        (openBlock(), createBlock(resolveDynamicComponent(unref(decimalIconComponent))))
                      ]),
                      _: 1
                    }, 8, ["style", "class"])) : createCommentVNode("v-if", true)
                  ]),
                  _: 2
                }, 1032, ["class"])
              ], 42, _hoisted_2$f);
            }), 128)),
            _ctx.showText || _ctx.showScore ? (openBlock(), createElementBlock("span", {
              key: 0,
              class: normalizeClass(unref(ns2).e("text"))
            }, toDisplayString$1(unref(text)), 3)) : createCommentVNode("v-if", true)
          ], 46, _hoisted_1$p);
        };
      }
    });
    var Rate = /* @__PURE__ */ _export_sfc$1(_sfc_main$12, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/rate/src/rate.vue"]]);
    const ElRate = withInstall(Rate);
    const IconMap = {
      success: "icon-success",
      warning: "icon-warning",
      error: "icon-error",
      info: "icon-info"
    };
    const IconComponentMap = {
      [IconMap.success]: circle_check_filled_default,
      [IconMap.warning]: warning_filled_default,
      [IconMap.error]: circle_close_filled_default,
      [IconMap.info]: info_filled_default
    };
    const resultProps = buildProps({
      title: {
        type: String,
        default: ""
      },
      subTitle: {
        type: String,
        default: ""
      },
      icon: {
        type: String,
        values: ["success", "warning", "info", "error"],
        default: "info"
      }
    });
    const __default__$Q = {
      name: "ElResult"
    };
    const _sfc_main$11 = /* @__PURE__ */ defineComponent({
      ...__default__$Q,
      props: resultProps,
      setup(__props) {
        const props = __props;
        const ns2 = useNamespace("result");
        const resultIcon = computed(() => {
          const icon = props.icon;
          const iconClass = icon && IconMap[icon] ? IconMap[icon] : "icon-info";
          const iconComponent = IconComponentMap[iconClass] || IconComponentMap["icon-info"];
          return {
            class: iconClass,
            component: iconComponent
          };
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            class: normalizeClass(unref(ns2).b())
          }, [
            createBaseVNode("div", {
              class: normalizeClass(unref(ns2).e("icon"))
            }, [
              renderSlot(_ctx.$slots, "icon", {}, () => [
                unref(resultIcon).component ? (openBlock(), createBlock(resolveDynamicComponent(unref(resultIcon).component), {
                  key: 0,
                  class: normalizeClass(unref(resultIcon).class)
                }, null, 8, ["class"])) : createCommentVNode("v-if", true)
              ])
            ], 2),
            _ctx.title || _ctx.$slots.title ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(unref(ns2).e("title"))
            }, [
              renderSlot(_ctx.$slots, "title", {}, () => [
                createBaseVNode("p", null, toDisplayString$1(_ctx.title), 1)
              ])
            ], 2)) : createCommentVNode("v-if", true),
            _ctx.subTitle || _ctx.$slots["sub-title"] ? (openBlock(), createElementBlock("div", {
              key: 1,
              class: normalizeClass(unref(ns2).e("subtitle"))
            }, [
              renderSlot(_ctx.$slots, "sub-title", {}, () => [
                createBaseVNode("p", null, toDisplayString$1(_ctx.subTitle), 1)
              ])
            ], 2)) : createCommentVNode("v-if", true),
            _ctx.$slots.extra ? (openBlock(), createElementBlock("div", {
              key: 2,
              class: normalizeClass(unref(ns2).e("extra"))
            }, [
              renderSlot(_ctx.$slots, "extra")
            ], 2)) : createCommentVNode("v-if", true)
          ], 2);
        };
      }
    });
    var Result = /* @__PURE__ */ _export_sfc$1(_sfc_main$11, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/result/src/result.vue"]]);
    const ElResult = withInstall(Result);
    const RowJustify = [
      "start",
      "center",
      "end",
      "space-around",
      "space-between",
      "space-evenly"
    ];
    const RowAlign = ["top", "middle", "bottom"];
    const rowProps = buildProps({
      tag: {
        type: String,
        default: "div"
      },
      gutter: {
        type: Number,
        default: 0
      },
      justify: {
        type: String,
        values: RowJustify,
        default: "start"
      },
      align: {
        type: String,
        values: RowAlign,
        default: "top"
      }
    });
    const __default__$P = {
      name: "ElRow"
    };
    const _sfc_main$10 = /* @__PURE__ */ defineComponent({
      ...__default__$P,
      props: rowProps,
      setup(__props) {
        const props = __props;
        const ns2 = useNamespace("row");
        const gutter = computed(() => props.gutter);
        provide(rowContextKey, {
          gutter
        });
        const style2 = computed(() => {
          const styles = {};
          if (!props.gutter) {
            return styles;
          }
          styles.marginRight = styles.marginLeft = `-${props.gutter / 2}px`;
          return styles;
        });
        return (_ctx, _cache) => {
          return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {
            class: normalizeClass([
              unref(ns2).b(),
              unref(ns2).is(`justify-${props.justify}`, _ctx.justify !== "start"),
              unref(ns2).is(`align-${props.align}`, _ctx.align !== "top")
            ]),
            style: normalizeStyle(unref(style2))
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          }, 8, ["class", "style"]);
        };
      }
    });
    var Row = /* @__PURE__ */ _export_sfc$1(_sfc_main$10, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/row/src/row.vue"]]);
    const ElRow = withInstall(Row);
    var safeIsNaN = Number.isNaN || function ponyfill(value) {
      return typeof value === "number" && value !== value;
    };
    function isEqual(first, second) {
      if (first === second) {
        return true;
      }
      if (safeIsNaN(first) && safeIsNaN(second)) {
        return true;
      }
      return false;
    }
    function areInputsEqual(newInputs, lastInputs) {
      if (newInputs.length !== lastInputs.length) {
        return false;
      }
      for (var i2 = 0; i2 < newInputs.length; i2++) {
        if (!isEqual(newInputs[i2], lastInputs[i2])) {
          return false;
        }
      }
      return true;
    }
    function memoizeOne(resultFn, isEqual2) {
      if (isEqual2 === void 0) {
        isEqual2 = areInputsEqual;
      }
      var cache2 = null;
      function memoized() {
        var newArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          newArgs[_i] = arguments[_i];
        }
        if (cache2 && cache2.lastThis === this && isEqual2(newArgs, cache2.lastArgs)) {
          return cache2.lastResult;
        }
        var lastResult = resultFn.apply(this, newArgs);
        cache2 = {
          lastResult,
          lastArgs: newArgs,
          lastThis: this
        };
        return lastResult;
      }
      memoized.clear = function clear2() {
        cache2 = null;
      };
      return memoized;
    }
    const useCache = () => {
      const vm = getCurrentInstance();
      const props = vm.proxy.$props;
      return computed(() => {
        const _getItemStyleCache = (_2, __, ___) => ({});
        return props.perfMode ? memoize(_getItemStyleCache) : memoizeOne(_getItemStyleCache);
      });
    };
    const DEFAULT_DYNAMIC_LIST_ITEM_SIZE = 50;
    const ITEM_RENDER_EVT = "itemRendered";
    const SCROLL_EVT = "scroll";
    const FORWARD = "forward";
    const BACKWARD = "backward";
    const AUTO_ALIGNMENT = "auto";
    const SMART_ALIGNMENT = "smart";
    const START_ALIGNMENT = "start";
    const CENTERED_ALIGNMENT = "center";
    const END_ALIGNMENT = "end";
    const HORIZONTAL = "horizontal";
    const VERTICAL = "vertical";
    const LTR = "ltr";
    const RTL = "rtl";
    const RTL_OFFSET_NAG = "negative";
    const RTL_OFFSET_POS_ASC = "positive-ascending";
    const RTL_OFFSET_POS_DESC = "positive-descending";
    const ScrollbarDirKey = {
      [HORIZONTAL]: "left",
      [VERTICAL]: "top"
    };
    const SCROLLBAR_MIN_SIZE = 20;
    const LayoutKeys = {
      [HORIZONTAL]: "deltaX",
      [VERTICAL]: "deltaY"
    };
    const useWheel = ({ atEndEdge, atStartEdge, layout: layout2 }, onWheelDelta) => {
      let frameHandle;
      let offset2 = 0;
      const hasReachedEdge = (offset22) => {
        const edgeReached = offset22 < 0 && atStartEdge.value || offset22 > 0 && atEndEdge.value;
        return edgeReached;
      };
      const onWheel = (e2) => {
        cAF(frameHandle);
        const newOffset = e2[LayoutKeys[layout2.value]];
        if (hasReachedEdge(offset2) && hasReachedEdge(offset2 + newOffset))
          return;
        offset2 += newOffset;
        if (!isFirefox()) {
          e2.preventDefault();
        }
        frameHandle = rAF(() => {
          onWheelDelta(offset2);
          offset2 = 0;
        });
      };
      return {
        hasReachedEdge,
        onWheel
      };
    };
    const itemSize = buildProp({
      type: definePropType([Number, Function]),
      required: true
    });
    const estimatedItemSize = buildProp({
      type: Number
    });
    const cache = buildProp({
      type: Number,
      default: 2
    });
    const direction = buildProp({
      type: String,
      values: ["ltr", "rtl"],
      default: "ltr"
    });
    const initScrollOffset = buildProp({
      type: Number,
      default: 0
    });
    const total = buildProp({
      type: Number,
      required: true
    });
    const layout = buildProp({
      type: String,
      values: ["horizontal", "vertical"],
      default: VERTICAL
    });
    const virtualizedProps = buildProps({
      className: {
        type: String,
        default: ""
      },
      containerElement: {
        type: definePropType([String, Object]),
        default: "div"
      },
      data: {
        type: definePropType(Array),
        default: () => mutable([])
      },
      direction,
      height: {
        type: [String, Number],
        required: true
      },
      innerElement: {
        type: [String, Object],
        default: "div"
      },
      style: {
        type: definePropType([Object, String, Array])
      },
      useIsScrolling: {
        type: Boolean,
        default: false
      },
      width: {
        type: [Number, String],
        required: false
      },
      perfMode: {
        type: Boolean,
        default: true
      },
      scrollbarAlwaysOn: {
        type: Boolean,
        default: false
      }
    });
    const virtualizedListProps = buildProps({
      cache,
      estimatedItemSize,
      layout,
      initScrollOffset,
      total,
      itemSize,
      ...virtualizedProps
    });
    const scrollbarSize = {
      type: Number,
      default: 6
    };
    const startGap = { type: Number, default: 0 };
    const endGap = { type: Number, default: 2 };
    const virtualizedGridProps = buildProps({
      columnCache: cache,
      columnWidth: itemSize,
      estimatedColumnWidth: estimatedItemSize,
      estimatedRowHeight: estimatedItemSize,
      initScrollLeft: initScrollOffset,
      initScrollTop: initScrollOffset,
      itemKey: {
        type: definePropType(Function),
        default: ({ columnIndex, rowIndex }) => `${rowIndex}:${columnIndex}`
      },
      rowCache: cache,
      rowHeight: itemSize,
      totalColumn: total,
      totalRow: total,
      hScrollbarSize: scrollbarSize,
      vScrollbarSize: scrollbarSize,
      scrollbarStartGap: startGap,
      scrollbarEndGap: endGap,
      ...virtualizedProps
    });
    const virtualizedScrollbarProps = buildProps({
      alwaysOn: Boolean,
      class: String,
      layout,
      total,
      ratio: {
        type: Number,
        required: true
      },
      clientSize: {
        type: Number,
        required: true
      },
      scrollFrom: {
        type: Number,
        required: true
      },
      scrollbarSize,
      startGap,
      endGap,
      visible: Boolean
    });
    const getScrollDir = (prev, cur) => prev < cur ? FORWARD : BACKWARD;
    const isHorizontal = (dir) => dir === LTR || dir === RTL || dir === HORIZONTAL;
    const isRTL = (dir) => dir === RTL;
    let cachedRTLResult = null;
    function getRTLOffsetType(recalculate = false) {
      if (cachedRTLResult === null || recalculate) {
        const outerDiv = document.createElement("div");
        const outerStyle = outerDiv.style;
        outerStyle.width = "50px";
        outerStyle.height = "50px";
        outerStyle.overflow = "scroll";
        outerStyle.direction = "rtl";
        const innerDiv = document.createElement("div");
        const innerStyle = innerDiv.style;
        innerStyle.width = "100px";
        innerStyle.height = "100px";
        outerDiv.appendChild(innerDiv);
        document.body.appendChild(outerDiv);
        if (outerDiv.scrollLeft > 0) {
          cachedRTLResult = RTL_OFFSET_POS_DESC;
        } else {
          outerDiv.scrollLeft = 1;
          if (outerDiv.scrollLeft === 0) {
            cachedRTLResult = RTL_OFFSET_NAG;
          } else {
            cachedRTLResult = RTL_OFFSET_POS_ASC;
          }
        }
        document.body.removeChild(outerDiv);
        return cachedRTLResult;
      }
      return cachedRTLResult;
    }
    function renderThumbStyle({ move, size: size2, bar }, layout2) {
      const style2 = {};
      const translate2 = `translate${bar.axis}(${move}px)`;
      style2[bar.size] = size2;
      style2.transform = translate2;
      style2.msTransform = translate2;
      style2.webkitTransform = translate2;
      if (layout2 === "horizontal") {
        style2.height = "100%";
      } else {
        style2.width = "100%";
      }
      return style2;
    }
    const ScrollBar = defineComponent({
      name: "ElVirtualScrollBar",
      props: virtualizedScrollbarProps,
      emits: ["scroll", "start-move", "stop-move"],
      setup(props, { emit: emit2 }) {
        const GAP2 = computed(() => props.startGap + props.endGap);
        const nsVirtualScrollbar = useNamespace("virtual-scrollbar");
        const nsScrollbar = useNamespace("scrollbar");
        const trackRef = ref();
        const thumbRef = ref();
        let frameHandle = null;
        let onselectstartStore = null;
        const state = reactive({
          isDragging: false,
          traveled: 0
        });
        const bar = computed(() => BAR_MAP[props.layout]);
        const trackSize = computed(() => props.clientSize - unref(GAP2));
        const trackStyle = computed(() => ({
          position: "absolute",
          width: `${HORIZONTAL === props.layout ? trackSize.value : props.scrollbarSize}px`,
          height: `${HORIZONTAL === props.layout ? props.scrollbarSize : trackSize.value}px`,
          [ScrollbarDirKey[props.layout]]: "2px",
          right: "2px",
          bottom: "2px",
          borderRadius: "4px"
        }));
        const thumbSize = computed(() => {
          const ratio = props.ratio;
          const clientSize = props.clientSize;
          if (ratio >= 100) {
            return Number.POSITIVE_INFINITY;
          }
          if (ratio >= 50) {
            return ratio * clientSize / 100;
          }
          const SCROLLBAR_MAX_SIZE = clientSize / 3;
          return Math.floor(Math.min(Math.max(ratio * clientSize, SCROLLBAR_MIN_SIZE), SCROLLBAR_MAX_SIZE));
        });
        const thumbStyle = computed(() => {
          if (!Number.isFinite(thumbSize.value)) {
            return {
              display: "none"
            };
          }
          const thumb = `${thumbSize.value}px`;
          const style2 = renderThumbStyle({
            bar: bar.value,
            size: thumb,
            move: state.traveled
          }, props.layout);
          return style2;
        });
        const totalSteps = computed(() => Math.floor(props.clientSize - thumbSize.value - unref(GAP2)));
        const attachEvents2 = () => {
          window.addEventListener("mousemove", onMouseMove);
          window.addEventListener("mouseup", onMouseUp);
          const thumbEl = unref(thumbRef);
          if (!thumbEl)
            return;
          onselectstartStore = document.onselectstart;
          document.onselectstart = () => false;
          thumbEl.addEventListener("touchmove", onMouseMove);
          thumbEl.addEventListener("touchend", onMouseUp);
        };
        const detachEvents = () => {
          window.removeEventListener("mousemove", onMouseMove);
          window.removeEventListener("mouseup", onMouseUp);
          document.onselectstart = onselectstartStore;
          onselectstartStore = null;
          const thumbEl = unref(thumbRef);
          if (!thumbEl)
            return;
          thumbEl.removeEventListener("touchmove", onMouseMove);
          thumbEl.removeEventListener("touchend", onMouseUp);
        };
        const onThumbMouseDown = (e2) => {
          e2.stopImmediatePropagation();
          if (e2.ctrlKey || [1, 2].includes(e2.button)) {
            return;
          }
          state.isDragging = true;
          state[bar.value.axis] = e2.currentTarget[bar.value.offset] - (e2[bar.value.client] - e2.currentTarget.getBoundingClientRect()[bar.value.direction]);
          emit2("start-move");
          attachEvents2();
        };
        const onMouseUp = () => {
          state.isDragging = false;
          state[bar.value.axis] = 0;
          emit2("stop-move");
          detachEvents();
        };
        const onMouseMove = (e2) => {
          const { isDragging: isDragging2 } = state;
          if (!isDragging2)
            return;
          if (!thumbRef.value || !trackRef.value)
            return;
          const prevPage = state[bar.value.axis];
          if (!prevPage)
            return;
          cAF(frameHandle);
          const offset2 = (trackRef.value.getBoundingClientRect()[bar.value.direction] - e2[bar.value.client]) * -1;
          const thumbClickPosition = thumbRef.value[bar.value.offset] - prevPage;
          const distance = offset2 - thumbClickPosition;
          frameHandle = rAF(() => {
            state.traveled = Math.max(props.startGap, Math.min(distance, totalSteps.value));
            emit2("scroll", distance, totalSteps.value);
          });
        };
        const clickTrackHandler = (e2) => {
          const offset2 = Math.abs(e2.target.getBoundingClientRect()[bar.value.direction] - e2[bar.value.client]);
          const thumbHalf = thumbRef.value[bar.value.offset] / 2;
          const distance = offset2 - thumbHalf;
          state.traveled = Math.max(0, Math.min(distance, totalSteps.value));
          emit2("scroll", distance, totalSteps.value);
        };
        watch(() => props.scrollFrom, (v2) => {
          if (state.isDragging)
            return;
          state.traveled = Math.ceil(v2 * totalSteps.value);
        });
        onBeforeUnmount(() => {
          detachEvents();
        });
        return () => {
          return h$2("div", {
            role: "presentation",
            ref: trackRef,
            class: [
              nsVirtualScrollbar.b(),
              props.class,
              (props.alwaysOn || state.isDragging) && "always-on"
            ],
            style: trackStyle.value,
            onMousedown: withModifiers(clickTrackHandler, ["stop", "prevent"]),
            onTouchstartPrevent: onThumbMouseDown
          }, h$2("div", {
            ref: thumbRef,
            class: nsScrollbar.e("thumb"),
            style: thumbStyle.value,
            onMousedown: onThumbMouseDown
          }, []));
        };
      }
    });
    const createList = ({
      name,
      getOffset: getOffset2,
      getItemSize,
      getItemOffset,
      getEstimatedTotalSize: getEstimatedTotalSize2,
      getStartIndexForOffset,
      getStopIndexForStartIndex,
      initCache,
      clearCache,
      validateProps
    }) => {
      return defineComponent({
        name: name != null ? name : "ElVirtualList",
        props: virtualizedListProps,
        emits: [ITEM_RENDER_EVT, SCROLL_EVT],
        setup(props, { emit: emit2, expose }) {
          validateProps(props);
          const instance = getCurrentInstance();
          const ns2 = useNamespace("vl");
          const dynamicSizeCache = ref(initCache(props, instance));
          const getItemStyleCache = useCache();
          const windowRef = ref();
          const innerRef = ref();
          const scrollbarRef = ref();
          const states = ref({
            isScrolling: false,
            scrollDir: "forward",
            scrollOffset: isNumber$1(props.initScrollOffset) ? props.initScrollOffset : 0,
            updateRequested: false,
            isScrollbarDragging: false,
            scrollbarAlwaysOn: props.scrollbarAlwaysOn
          });
          const itemsToRender = computed(() => {
            const { total: total2, cache: cache2 } = props;
            const { isScrolling, scrollDir, scrollOffset } = unref(states);
            if (total2 === 0) {
              return [0, 0, 0, 0];
            }
            const startIndex = getStartIndexForOffset(props, scrollOffset, unref(dynamicSizeCache));
            const stopIndex = getStopIndexForStartIndex(props, startIndex, scrollOffset, unref(dynamicSizeCache));
            const cacheBackward = !isScrolling || scrollDir === BACKWARD ? Math.max(1, cache2) : 1;
            const cacheForward = !isScrolling || scrollDir === FORWARD ? Math.max(1, cache2) : 1;
            return [
              Math.max(0, startIndex - cacheBackward),
              Math.max(0, Math.min(total2 - 1, stopIndex + cacheForward)),
              startIndex,
              stopIndex
            ];
          });
          const estimatedTotalSize = computed(() => getEstimatedTotalSize2(props, unref(dynamicSizeCache)));
          const _isHorizontal = computed(() => isHorizontal(props.layout));
          const windowStyle = computed(() => [
            {
              position: "relative",
              [`overflow-${_isHorizontal.value ? "x" : "y"}`]: "scroll",
              WebkitOverflowScrolling: "touch",
              willChange: "transform"
            },
            {
              direction: props.direction,
              height: isNumber$1(props.height) ? `${props.height}px` : props.height,
              width: isNumber$1(props.width) ? `${props.width}px` : props.width
            },
            props.style
          ]);
          const innerStyle = computed(() => {
            const size2 = unref(estimatedTotalSize);
            const horizontal = unref(_isHorizontal);
            return {
              height: horizontal ? "100%" : `${size2}px`,
              pointerEvents: unref(states).isScrolling ? "none" : void 0,
              width: horizontal ? `${size2}px` : "100%"
            };
          });
          const clientSize = computed(() => _isHorizontal.value ? props.width : props.height);
          const { onWheel } = useWheel({
            atStartEdge: computed(() => states.value.scrollOffset <= 0),
            atEndEdge: computed(() => states.value.scrollOffset >= estimatedTotalSize.value),
            layout: computed(() => props.layout)
          }, (offset2) => {
            var _a2, _b;
            (_b = (_a2 = scrollbarRef.value).onMouseUp) == null ? void 0 : _b.call(_a2);
            scrollTo(Math.min(states.value.scrollOffset + offset2, estimatedTotalSize.value - clientSize.value));
          });
          const emitEvents = () => {
            const { total: total2 } = props;
            if (total2 > 0) {
              const [cacheStart, cacheEnd, visibleStart, visibleEnd] = unref(itemsToRender);
              emit2(ITEM_RENDER_EVT, cacheStart, cacheEnd, visibleStart, visibleEnd);
            }
            const { scrollDir, scrollOffset, updateRequested } = unref(states);
            emit2(SCROLL_EVT, scrollDir, scrollOffset, updateRequested);
          };
          const scrollVertically = (e2) => {
            const { clientHeight, scrollHeight, scrollTop } = e2.currentTarget;
            const _states = unref(states);
            if (_states.scrollOffset === scrollTop) {
              return;
            }
            const scrollOffset = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));
            states.value = {
              ..._states,
              isScrolling: true,
              scrollDir: getScrollDir(_states.scrollOffset, scrollOffset),
              scrollOffset,
              updateRequested: false
            };
            nextTick$1(resetIsScrolling);
          };
          const scrollHorizontally = (e2) => {
            const { clientWidth, scrollLeft, scrollWidth } = e2.currentTarget;
            const _states = unref(states);
            if (_states.scrollOffset === scrollLeft) {
              return;
            }
            const { direction: direction2 } = props;
            let scrollOffset = scrollLeft;
            if (direction2 === RTL) {
              switch (getRTLOffsetType()) {
                case RTL_OFFSET_NAG: {
                  scrollOffset = -scrollLeft;
                  break;
                }
                case RTL_OFFSET_POS_DESC: {
                  scrollOffset = scrollWidth - clientWidth - scrollLeft;
                  break;
                }
              }
            }
            scrollOffset = Math.max(0, Math.min(scrollOffset, scrollWidth - clientWidth));
            states.value = {
              ..._states,
              isScrolling: true,
              scrollDir: getScrollDir(_states.scrollOffset, scrollOffset),
              scrollOffset,
              updateRequested: false
            };
            nextTick$1(resetIsScrolling);
          };
          const onScroll = (e2) => {
            unref(_isHorizontal) ? scrollHorizontally(e2) : scrollVertically(e2);
            emitEvents();
          };
          const onScrollbarScroll = (distanceToGo, totalSteps) => {
            const offset2 = (estimatedTotalSize.value - clientSize.value) / totalSteps * distanceToGo;
            scrollTo(Math.min(estimatedTotalSize.value - clientSize.value, offset2));
          };
          const scrollTo = (offset2) => {
            offset2 = Math.max(offset2, 0);
            if (offset2 === unref(states).scrollOffset) {
              return;
            }
            states.value = {
              ...unref(states),
              scrollOffset: offset2,
              scrollDir: getScrollDir(unref(states).scrollOffset, offset2),
              updateRequested: true
            };
            nextTick$1(resetIsScrolling);
          };
          const scrollToItem = (idx, alignment = AUTO_ALIGNMENT) => {
            const { scrollOffset } = unref(states);
            idx = Math.max(0, Math.min(idx, props.total - 1));
            scrollTo(getOffset2(props, idx, alignment, scrollOffset, unref(dynamicSizeCache)));
          };
          const getItemStyle = (idx) => {
            const { direction: direction2, itemSize: itemSize2, layout: layout2 } = props;
            const itemStyleCache = getItemStyleCache.value(clearCache && itemSize2, clearCache && layout2, clearCache && direction2);
            let style2;
            if (hasOwn$2(itemStyleCache, String(idx))) {
              style2 = itemStyleCache[idx];
            } else {
              const offset2 = getItemOffset(props, idx, unref(dynamicSizeCache));
              const size2 = getItemSize(props, idx, unref(dynamicSizeCache));
              const horizontal = unref(_isHorizontal);
              const isRtl = direction2 === RTL;
              const offsetHorizontal = horizontal ? offset2 : 0;
              itemStyleCache[idx] = style2 = {
                position: "absolute",
                left: isRtl ? void 0 : `${offsetHorizontal}px`,
                right: isRtl ? `${offsetHorizontal}px` : void 0,
                top: !horizontal ? `${offset2}px` : 0,
                height: !horizontal ? `${size2}px` : "100%",
                width: horizontal ? `${size2}px` : "100%"
              };
            }
            return style2;
          };
          const resetIsScrolling = () => {
            states.value.isScrolling = false;
            nextTick$1(() => {
              getItemStyleCache.value(-1, null, null);
            });
          };
          const resetScrollTop = () => {
            const window2 = windowRef.value;
            if (window2) {
              window2.scrollTop = 0;
            }
          };
          onMounted(() => {
            if (!isClient)
              return;
            const { initScrollOffset: initScrollOffset2 } = props;
            const windowElement = unref(windowRef);
            if (isNumber$1(initScrollOffset2) && windowElement) {
              if (unref(_isHorizontal)) {
                windowElement.scrollLeft = initScrollOffset2;
              } else {
                windowElement.scrollTop = initScrollOffset2;
              }
            }
            emitEvents();
          });
          onUpdated(() => {
            const { direction: direction2, layout: layout2 } = props;
            const { scrollOffset, updateRequested } = unref(states);
            const windowElement = unref(windowRef);
            if (updateRequested && windowElement) {
              if (layout2 === HORIZONTAL) {
                if (direction2 === RTL) {
                  switch (getRTLOffsetType()) {
                    case "negative": {
                      windowElement.scrollLeft = -scrollOffset;
                      break;
                    }
                    case "positive-ascending": {
                      windowElement.scrollLeft = scrollOffset;
                      break;
                    }
                    default: {
                      const { clientWidth, scrollWidth } = windowElement;
                      windowElement.scrollLeft = scrollWidth - clientWidth - scrollOffset;
                      break;
                    }
                  }
                } else {
                  windowElement.scrollLeft = scrollOffset;
                }
              } else {
                windowElement.scrollTop = scrollOffset;
              }
            }
          });
          const api = {
            ns: ns2,
            clientSize,
            estimatedTotalSize,
            windowStyle,
            windowRef,
            innerRef,
            innerStyle,
            itemsToRender,
            scrollbarRef,
            states,
            getItemStyle,
            onScroll,
            onScrollbarScroll,
            onWheel,
            scrollTo,
            scrollToItem,
            resetScrollTop
          };
          expose({
            windowRef,
            innerRef,
            getItemStyleCache,
            scrollTo,
            scrollToItem,
            resetScrollTop,
            states
          });
          return api;
        },
        render(ctx) {
          var _a2;
          const {
            $slots,
            className,
            clientSize,
            containerElement,
            data,
            getItemStyle,
            innerElement,
            itemsToRender,
            innerStyle,
            layout: layout2,
            total: total2,
            onScroll,
            onScrollbarScroll,
            onWheel,
            states,
            useIsScrolling,
            windowStyle,
            ns: ns2
          } = ctx;
          const [start, end2] = itemsToRender;
          const Container2 = resolveDynamicComponent(containerElement);
          const Inner = resolveDynamicComponent(innerElement);
          const children = [];
          if (total2 > 0) {
            for (let i2 = start; i2 <= end2; i2++) {
              children.push((_a2 = $slots.default) == null ? void 0 : _a2.call($slots, {
                data,
                key: i2,
                index: i2,
                isScrolling: useIsScrolling ? states.isScrolling : void 0,
                style: getItemStyle(i2)
              }));
            }
          }
          const InnerNode = [
            h$2(Inner, {
              style: innerStyle,
              ref: "innerRef"
            }, !isString$3(Inner) ? {
              default: () => children
            } : children)
          ];
          const scrollbar = h$2(ScrollBar, {
            ref: "scrollbarRef",
            clientSize,
            layout: layout2,
            onScroll: onScrollbarScroll,
            ratio: clientSize * 100 / this.estimatedTotalSize,
            scrollFrom: states.scrollOffset / (this.estimatedTotalSize - clientSize),
            total: total2
          });
          const listContainer = h$2(Container2, {
            class: [ns2.e("window"), className],
            style: windowStyle,
            onScroll,
            onWheel,
            ref: "windowRef",
            key: 0
          }, !isString$3(Container2) ? { default: () => [InnerNode] } : [InnerNode]);
          return h$2("div", {
            key: 0,
            class: [ns2.e("wrapper"), states.scrollbarAlwaysOn ? "always-on" : ""]
          }, [listContainer, scrollbar]);
        }
      });
    };
    const FixedSizeList = createList({
      name: "ElFixedSizeList",
      getItemOffset: ({ itemSize: itemSize2 }, index2) => index2 * itemSize2,
      getItemSize: ({ itemSize: itemSize2 }) => itemSize2,
      getEstimatedTotalSize: ({ total: total2, itemSize: itemSize2 }) => itemSize2 * total2,
      getOffset: ({ height, total: total2, itemSize: itemSize2, layout: layout2, width }, index2, alignment, scrollOffset) => {
        const size2 = isHorizontal(layout2) ? width : height;
        const lastItemOffset = Math.max(0, total2 * itemSize2 - size2);
        const maxOffset = Math.min(lastItemOffset, index2 * itemSize2);
        const minOffset = Math.max(0, (index2 + 1) * itemSize2 - size2);
        if (alignment === SMART_ALIGNMENT) {
          if (scrollOffset >= minOffset - size2 && scrollOffset <= maxOffset + size2) {
            alignment = AUTO_ALIGNMENT;
          } else {
            alignment = CENTERED_ALIGNMENT;
          }
        }
        switch (alignment) {
          case START_ALIGNMENT: {
            return maxOffset;
          }
          case END_ALIGNMENT: {
            return minOffset;
          }
          case CENTERED_ALIGNMENT: {
            const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);
            if (middleOffset < Math.ceil(size2 / 2)) {
              return 0;
            } else if (middleOffset > lastItemOffset + Math.floor(size2 / 2)) {
              return lastItemOffset;
            } else {
              return middleOffset;
            }
          }
          case AUTO_ALIGNMENT:
          default: {
            if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
              return scrollOffset;
            } else if (scrollOffset < minOffset) {
              return minOffset;
            } else {
              return maxOffset;
            }
          }
        }
      },
      getStartIndexForOffset: ({ total: total2, itemSize: itemSize2 }, offset2) => Math.max(0, Math.min(total2 - 1, Math.floor(offset2 / itemSize2))),
      getStopIndexForStartIndex: ({ height, total: total2, itemSize: itemSize2, layout: layout2, width }, startIndex, scrollOffset) => {
        const offset2 = startIndex * itemSize2;
        const size2 = isHorizontal(layout2) ? width : height;
        const numVisibleItems = Math.ceil((size2 + scrollOffset - offset2) / itemSize2);
        return Math.max(0, Math.min(total2 - 1, startIndex + numVisibleItems - 1));
      },
      initCache() {
        return void 0;
      },
      clearCache: true,
      validateProps() {
      }
    });
    const getItemFromCache$1 = (props, index2, listCache) => {
      const { itemSize: itemSize2 } = props;
      const { items, lastVisitedIndex } = listCache;
      if (index2 > lastVisitedIndex) {
        let offset2 = 0;
        if (lastVisitedIndex >= 0) {
          const item = items[lastVisitedIndex];
          offset2 = item.offset + item.size;
        }
        for (let i2 = lastVisitedIndex + 1; i2 <= index2; i2++) {
          const size2 = itemSize2(i2);
          items[i2] = {
            offset: offset2,
            size: size2
          };
          offset2 += size2;
        }
        listCache.lastVisitedIndex = index2;
      }
      return items[index2];
    };
    const findItem$1 = (props, listCache, offset2) => {
      const { items, lastVisitedIndex } = listCache;
      const lastVisitedOffset = lastVisitedIndex > 0 ? items[lastVisitedIndex].offset : 0;
      if (lastVisitedOffset >= offset2) {
        return bs$1(props, listCache, 0, lastVisitedIndex, offset2);
      }
      return es$1(props, listCache, Math.max(0, lastVisitedIndex), offset2);
    };
    const bs$1 = (props, listCache, low, high, offset2) => {
      while (low <= high) {
        const mid = low + Math.floor((high - low) / 2);
        const currentOffset = getItemFromCache$1(props, mid, listCache).offset;
        if (currentOffset === offset2) {
          return mid;
        } else if (currentOffset < offset2) {
          low = mid + 1;
        } else if (currentOffset > offset2) {
          high = mid - 1;
        }
      }
      return Math.max(0, low - 1);
    };
    const es$1 = (props, listCache, index2, offset2) => {
      const { total: total2 } = props;
      let exponent = 1;
      while (index2 < total2 && getItemFromCache$1(props, index2, listCache).offset < offset2) {
        index2 += exponent;
        exponent *= 2;
      }
      return bs$1(props, listCache, Math.floor(index2 / 2), Math.min(index2, total2 - 1), offset2);
    };
    const getEstimatedTotalSize = ({ total: total2 }, { items, estimatedItemSize: estimatedItemSize2, lastVisitedIndex }) => {
      let totalSizeOfMeasuredItems = 0;
      if (lastVisitedIndex >= total2) {
        lastVisitedIndex = total2 - 1;
      }
      if (lastVisitedIndex >= 0) {
        const item = items[lastVisitedIndex];
        totalSizeOfMeasuredItems = item.offset + item.size;
      }
      const numUnmeasuredItems = total2 - lastVisitedIndex - 1;
      const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize2;
      return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;
    };
    const DynamicSizeList = createList({
      name: "ElDynamicSizeList",
      getItemOffset: (props, index2, listCache) => getItemFromCache$1(props, index2, listCache).offset,
      getItemSize: (_2, index2, { items }) => items[index2].size,
      getEstimatedTotalSize,
      getOffset: (props, index2, alignment, scrollOffset, listCache) => {
        const { height, layout: layout2, width } = props;
        const size2 = isHorizontal(layout2) ? width : height;
        const item = getItemFromCache$1(props, index2, listCache);
        const estimatedTotalSize = getEstimatedTotalSize(props, listCache);
        const maxOffset = Math.max(0, Math.min(estimatedTotalSize - size2, item.offset));
        const minOffset = Math.max(0, item.offset - size2 + item.size);
        if (alignment === SMART_ALIGNMENT) {
          if (scrollOffset >= minOffset - size2 && scrollOffset <= maxOffset + size2) {
            alignment = AUTO_ALIGNMENT;
          } else {
            alignment = CENTERED_ALIGNMENT;
          }
        }
        switch (alignment) {
          case START_ALIGNMENT: {
            return maxOffset;
          }
          case END_ALIGNMENT: {
            return minOffset;
          }
          case CENTERED_ALIGNMENT: {
            return Math.round(minOffset + (maxOffset - minOffset) / 2);
          }
          case AUTO_ALIGNMENT:
          default: {
            if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
              return scrollOffset;
            } else if (scrollOffset < minOffset) {
              return minOffset;
            } else {
              return maxOffset;
            }
          }
        }
      },
      getStartIndexForOffset: (props, offset2, listCache) => findItem$1(props, listCache, offset2),
      getStopIndexForStartIndex: (props, startIndex, scrollOffset, listCache) => {
        const { height, total: total2, layout: layout2, width } = props;
        const size2 = isHorizontal(layout2) ? width : height;
        const item = getItemFromCache$1(props, startIndex, listCache);
        const maxOffset = scrollOffset + size2;
        let offset2 = item.offset + item.size;
        let stopIndex = startIndex;
        while (stopIndex < total2 - 1 && offset2 < maxOffset) {
          stopIndex++;
          offset2 += getItemFromCache$1(props, stopIndex, listCache).size;
        }
        return stopIndex;
      },
      initCache({ estimatedItemSize: estimatedItemSize2 = DEFAULT_DYNAMIC_LIST_ITEM_SIZE }, instance) {
        const cache2 = {
          items: {},
          estimatedItemSize: estimatedItemSize2,
          lastVisitedIndex: -1
        };
        cache2.clearCacheAfterIndex = (index2, forceUpdate = true) => {
          var _a2, _b;
          cache2.lastVisitedIndex = Math.min(cache2.lastVisitedIndex, index2 - 1);
          (_a2 = instance.exposed) == null ? void 0 : _a2.getItemStyleCache(-1);
          if (forceUpdate) {
            (_b = instance.proxy) == null ? void 0 : _b.$forceUpdate();
          }
        };
        return cache2;
      },
      clearCache: false,
      validateProps: ({ itemSize: itemSize2 }) => {
      }
    });
    const useGridWheel = ({ atXEndEdge, atXStartEdge, atYEndEdge, atYStartEdge }, onWheelDelta) => {
      let frameHandle = null;
      let xOffset = 0;
      let yOffset = 0;
      const hasReachedEdge = (x2, y2) => {
        const xEdgeReached = x2 < 0 && atXStartEdge.value || x2 > 0 && atXEndEdge.value;
        const yEdgeReached = y2 < 0 && atYStartEdge.value || y2 > 0 && atYEndEdge.value;
        return xEdgeReached && yEdgeReached;
      };
      const onWheel = (e2) => {
        cAF(frameHandle);
        let x2 = e2.deltaX;
        let y2 = e2.deltaY;
        if (Math.abs(x2) > Math.abs(y2)) {
          y2 = 0;
        } else {
          x2 = 0;
        }
        if (e2.shiftKey && y2 !== 0) {
          x2 = y2;
          y2 = 0;
        }
        if (hasReachedEdge(xOffset, yOffset) && hasReachedEdge(xOffset + x2, yOffset + y2))
          return;
        xOffset += x2;
        yOffset += y2;
        if (!isFirefox()) {
          e2.preventDefault();
        }
        frameHandle = rAF(() => {
          onWheelDelta(xOffset, yOffset);
          xOffset = 0;
          yOffset = 0;
        });
      };
      return {
        hasReachedEdge,
        onWheel
      };
    };
    const createGrid = ({
      name,
      clearCache,
      getColumnPosition,
      getColumnStartIndexForOffset,
      getColumnStopIndexForStartIndex,
      getEstimatedTotalHeight: getEstimatedTotalHeight2,
      getEstimatedTotalWidth: getEstimatedTotalWidth2,
      getColumnOffset,
      getRowOffset,
      getRowPosition,
      getRowStartIndexForOffset,
      getRowStopIndexForStartIndex,
      initCache,
      injectToInstance,
      validateProps
    }) => {
      return defineComponent({
        name: name != null ? name : "ElVirtualList",
        props: virtualizedGridProps,
        emits: [ITEM_RENDER_EVT, SCROLL_EVT],
        setup(props, { emit: emit2, expose, slots }) {
          const ns2 = useNamespace("vl");
          validateProps(props);
          const instance = getCurrentInstance();
          const cache2 = ref(initCache(props, instance));
          injectToInstance == null ? void 0 : injectToInstance(instance, cache2);
          const windowRef = ref();
          const hScrollbar = ref();
          const vScrollbar = ref();
          const innerRef = ref(null);
          const states = ref({
            isScrolling: false,
            scrollLeft: isNumber$1(props.initScrollLeft) ? props.initScrollLeft : 0,
            scrollTop: isNumber$1(props.initScrollTop) ? props.initScrollTop : 0,
            updateRequested: false,
            xAxisScrollDir: FORWARD,
            yAxisScrollDir: FORWARD
          });
          const getItemStyleCache = useCache();
          const parsedHeight = computed(() => Number.parseInt(`${props.height}`, 10));
          const parsedWidth = computed(() => Number.parseInt(`${props.width}`, 10));
          const columnsToRender = computed(() => {
            const { totalColumn, totalRow, columnCache } = props;
            const { isScrolling, xAxisScrollDir, scrollLeft } = unref(states);
            if (totalColumn === 0 || totalRow === 0) {
              return [0, 0, 0, 0];
            }
            const startIndex = getColumnStartIndexForOffset(props, scrollLeft, unref(cache2));
            const stopIndex = getColumnStopIndexForStartIndex(props, startIndex, scrollLeft, unref(cache2));
            const cacheBackward = !isScrolling || xAxisScrollDir === BACKWARD ? Math.max(1, columnCache) : 1;
            const cacheForward = !isScrolling || xAxisScrollDir === FORWARD ? Math.max(1, columnCache) : 1;
            return [
              Math.max(0, startIndex - cacheBackward),
              Math.max(0, Math.min(totalColumn - 1, stopIndex + cacheForward)),
              startIndex,
              stopIndex
            ];
          });
          const rowsToRender = computed(() => {
            const { totalColumn, totalRow, rowCache } = props;
            const { isScrolling, yAxisScrollDir, scrollTop } = unref(states);
            if (totalColumn === 0 || totalRow === 0) {
              return [0, 0, 0, 0];
            }
            const startIndex = getRowStartIndexForOffset(props, scrollTop, unref(cache2));
            const stopIndex = getRowStopIndexForStartIndex(props, startIndex, scrollTop, unref(cache2));
            const cacheBackward = !isScrolling || yAxisScrollDir === BACKWARD ? Math.max(1, rowCache) : 1;
            const cacheForward = !isScrolling || yAxisScrollDir === FORWARD ? Math.max(1, rowCache) : 1;
            return [
              Math.max(0, startIndex - cacheBackward),
              Math.max(0, Math.min(totalRow - 1, stopIndex + cacheForward)),
              startIndex,
              stopIndex
            ];
          });
          const estimatedTotalHeight = computed(() => getEstimatedTotalHeight2(props, unref(cache2)));
          const estimatedTotalWidth = computed(() => getEstimatedTotalWidth2(props, unref(cache2)));
          const windowStyle = computed(() => {
            var _a2;
            return [
              {
                position: "relative",
                overflow: "hidden",
                WebkitOverflowScrolling: "touch",
                willChange: "transform"
              },
              {
                direction: props.direction,
                height: isNumber$1(props.height) ? `${props.height}px` : props.height,
                width: isNumber$1(props.width) ? `${props.width}px` : props.width
              },
              (_a2 = props.style) != null ? _a2 : {}
            ];
          });
          const innerStyle = computed(() => {
            const width = `${unref(estimatedTotalWidth)}px`;
            const height = `${unref(estimatedTotalHeight)}px`;
            return {
              height,
              pointerEvents: unref(states).isScrolling ? "none" : void 0,
              width
            };
          });
          const emitEvents = () => {
            const { totalColumn, totalRow } = props;
            if (totalColumn > 0 && totalRow > 0) {
              const [
                columnCacheStart,
                columnCacheEnd,
                columnVisibleStart,
                columnVisibleEnd
              ] = unref(columnsToRender);
              const [rowCacheStart, rowCacheEnd, rowVisibleStart, rowVisibleEnd] = unref(rowsToRender);
              emit2(ITEM_RENDER_EVT, {
                columnCacheStart,
                columnCacheEnd,
                rowCacheStart,
                rowCacheEnd,
                columnVisibleStart,
                columnVisibleEnd,
                rowVisibleStart,
                rowVisibleEnd
              });
            }
            const {
              scrollLeft,
              scrollTop,
              updateRequested,
              xAxisScrollDir,
              yAxisScrollDir
            } = unref(states);
            emit2(SCROLL_EVT, {
              xAxisScrollDir,
              scrollLeft,
              yAxisScrollDir,
              scrollTop,
              updateRequested
            });
          };
          const onScroll = (e2) => {
            const {
              clientHeight,
              clientWidth,
              scrollHeight,
              scrollLeft,
              scrollTop,
              scrollWidth
            } = e2.currentTarget;
            const _states = unref(states);
            if (_states.scrollTop === scrollTop && _states.scrollLeft === scrollLeft) {
              return;
            }
            let _scrollLeft = scrollLeft;
            if (isRTL(props.direction)) {
              switch (getRTLOffsetType()) {
                case RTL_OFFSET_NAG:
                  _scrollLeft = -scrollLeft;
                  break;
                case RTL_OFFSET_POS_DESC:
                  _scrollLeft = scrollWidth - clientWidth - scrollLeft;
                  break;
              }
            }
            states.value = {
              ..._states,
              isScrolling: true,
              scrollLeft: _scrollLeft,
              scrollTop: Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight)),
              updateRequested: true,
              xAxisScrollDir: getScrollDir(_states.scrollLeft, _scrollLeft),
              yAxisScrollDir: getScrollDir(_states.scrollTop, scrollTop)
            };
            nextTick$1(() => resetIsScrolling());
            onUpdated2();
            emitEvents();
          };
          const onVerticalScroll = (distance, totalSteps) => {
            const height = unref(parsedHeight);
            const offset2 = (estimatedTotalHeight.value - height) / totalSteps * distance;
            scrollTo({
              scrollTop: Math.min(estimatedTotalHeight.value - height, offset2)
            });
          };
          const onHorizontalScroll = (distance, totalSteps) => {
            const width = unref(parsedWidth);
            const offset2 = (estimatedTotalWidth.value - width) / totalSteps * distance;
            scrollTo({
              scrollLeft: Math.min(estimatedTotalWidth.value - width, offset2)
            });
          };
          const { onWheel } = useGridWheel({
            atXStartEdge: computed(() => states.value.scrollLeft <= 0),
            atXEndEdge: computed(() => states.value.scrollLeft >= estimatedTotalWidth.value),
            atYStartEdge: computed(() => states.value.scrollTop <= 0),
            atYEndEdge: computed(() => states.value.scrollTop >= estimatedTotalHeight.value)
          }, (x2, y2) => {
            var _a2, _b, _c, _d;
            (_b = (_a2 = hScrollbar.value) == null ? void 0 : _a2.onMouseUp) == null ? void 0 : _b.call(_a2);
            (_d = (_c = hScrollbar.value) == null ? void 0 : _c.onMouseUp) == null ? void 0 : _d.call(_c);
            const width = unref(parsedWidth);
            const height = unref(parsedHeight);
            scrollTo({
              scrollLeft: Math.min(states.value.scrollLeft + x2, estimatedTotalWidth.value - width),
              scrollTop: Math.min(states.value.scrollTop + y2, estimatedTotalHeight.value - height)
            });
          });
          const scrollTo = ({
            scrollLeft = states.value.scrollLeft,
            scrollTop = states.value.scrollTop
          }) => {
            scrollLeft = Math.max(scrollLeft, 0);
            scrollTop = Math.max(scrollTop, 0);
            const _states = unref(states);
            if (scrollTop === _states.scrollTop && scrollLeft === _states.scrollLeft) {
              return;
            }
            states.value = {
              ..._states,
              xAxisScrollDir: getScrollDir(_states.scrollLeft, scrollLeft),
              yAxisScrollDir: getScrollDir(_states.scrollTop, scrollTop),
              scrollLeft,
              scrollTop,
              updateRequested: true
            };
            nextTick$1(() => resetIsScrolling());
            onUpdated2();
            emitEvents();
          };
          const scrollToItem = (rowIndex = 0, columnIdx = 0, alignment = AUTO_ALIGNMENT) => {
            const _states = unref(states);
            columnIdx = Math.max(0, Math.min(columnIdx, props.totalColumn - 1));
            rowIndex = Math.max(0, Math.min(rowIndex, props.totalRow - 1));
            const scrollBarWidth2 = getScrollBarWidth(ns2.namespace.value);
            const _cache = unref(cache2);
            const estimatedHeight = getEstimatedTotalHeight2(props, _cache);
            const estimatedWidth = getEstimatedTotalWidth2(props, _cache);
            scrollTo({
              scrollLeft: getColumnOffset(props, columnIdx, alignment, _states.scrollLeft, _cache, estimatedWidth > props.width ? scrollBarWidth2 : 0),
              scrollTop: getRowOffset(props, rowIndex, alignment, _states.scrollTop, _cache, estimatedHeight > props.height ? scrollBarWidth2 : 0)
            });
          };
          const getItemStyle = (rowIndex, columnIndex) => {
            const { columnWidth, direction: direction2, rowHeight } = props;
            const itemStyleCache = getItemStyleCache.value(clearCache && columnWidth, clearCache && rowHeight, clearCache && direction2);
            const key = `${rowIndex},${columnIndex}`;
            if (hasOwn$2(itemStyleCache, key)) {
              return itemStyleCache[key];
            } else {
              const [, left2] = getColumnPosition(props, columnIndex, unref(cache2));
              const _cache = unref(cache2);
              const rtl = isRTL(direction2);
              const [height, top] = getRowPosition(props, rowIndex, _cache);
              const [width] = getColumnPosition(props, columnIndex, _cache);
              itemStyleCache[key] = {
                position: "absolute",
                left: rtl ? void 0 : `${left2}px`,
                right: rtl ? `${left2}px` : void 0,
                top: `${top}px`,
                height: `${height}px`,
                width: `${width}px`
              };
              return itemStyleCache[key];
            }
          };
          const resetIsScrolling = () => {
            states.value.isScrolling = false;
            nextTick$1(() => {
              getItemStyleCache.value(-1, null, null);
            });
          };
          onMounted(() => {
            if (!isClient)
              return;
            const { initScrollLeft, initScrollTop } = props;
            const windowElement = unref(windowRef);
            if (windowElement) {
              if (isNumber$1(initScrollLeft)) {
                windowElement.scrollLeft = initScrollLeft;
              }
              if (isNumber$1(initScrollTop)) {
                windowElement.scrollTop = initScrollTop;
              }
            }
            emitEvents();
          });
          const onUpdated2 = () => {
            const { direction: direction2 } = props;
            const { scrollLeft, scrollTop, updateRequested } = unref(states);
            const windowElement = unref(windowRef);
            if (updateRequested && windowElement) {
              if (direction2 === RTL) {
                switch (getRTLOffsetType()) {
                  case RTL_OFFSET_NAG: {
                    windowElement.scrollLeft = -scrollLeft;
                    break;
                  }
                  case RTL_OFFSET_POS_ASC: {
                    windowElement.scrollLeft = scrollLeft;
                    break;
                  }
                  default: {
                    const { clientWidth, scrollWidth } = windowElement;
                    windowElement.scrollLeft = scrollWidth - clientWidth - scrollLeft;
                    break;
                  }
                }
              } else {
                windowElement.scrollLeft = Math.max(0, scrollLeft);
              }
              windowElement.scrollTop = Math.max(0, scrollTop);
            }
          };
          const { resetAfterColumnIndex, resetAfterRowIndex, resetAfter } = instance.proxy;
          expose({
            windowRef,
            innerRef,
            getItemStyleCache,
            scrollTo,
            scrollToItem,
            states,
            resetAfterColumnIndex,
            resetAfterRowIndex,
            resetAfter
          });
          const renderScrollbars = () => {
            const {
              scrollbarAlwaysOn,
              scrollbarStartGap,
              scrollbarEndGap,
              totalColumn,
              totalRow
            } = props;
            const width = unref(parsedWidth);
            const height = unref(parsedHeight);
            const estimatedWidth = unref(estimatedTotalWidth);
            const estimatedHeight = unref(estimatedTotalHeight);
            const { scrollLeft, scrollTop } = unref(states);
            const horizontalScrollbar = h$2(ScrollBar, {
              ref: hScrollbar,
              alwaysOn: scrollbarAlwaysOn,
              startGap: scrollbarStartGap,
              endGap: scrollbarEndGap,
              class: ns2.e("horizontal"),
              clientSize: width,
              layout: "horizontal",
              onScroll: onHorizontalScroll,
              ratio: width * 100 / estimatedWidth,
              scrollFrom: scrollLeft / (estimatedWidth - width),
              total: totalRow,
              visible: true
            });
            const verticalScrollbar = h$2(ScrollBar, {
              ref: vScrollbar,
              alwaysOn: scrollbarAlwaysOn,
              startGap: scrollbarStartGap,
              endGap: scrollbarEndGap,
              class: ns2.e("vertical"),
              clientSize: height,
              layout: "vertical",
              onScroll: onVerticalScroll,
              ratio: height * 100 / estimatedHeight,
              scrollFrom: scrollTop / (estimatedHeight - height),
              total: totalColumn,
              visible: true
            });
            return {
              horizontalScrollbar,
              verticalScrollbar
            };
          };
          const renderItems = () => {
            var _a2;
            const [columnStart, columnEnd] = unref(columnsToRender);
            const [rowStart, rowEnd] = unref(rowsToRender);
            const { data, totalColumn, totalRow, useIsScrolling, itemKey } = props;
            const children = [];
            if (totalRow > 0 && totalColumn > 0) {
              for (let row = rowStart; row <= rowEnd; row++) {
                for (let column = columnStart; column <= columnEnd; column++) {
                  children.push((_a2 = slots.default) == null ? void 0 : _a2.call(slots, {
                    columnIndex: column,
                    data,
                    key: itemKey({ columnIndex: column, data, rowIndex: row }),
                    isScrolling: useIsScrolling ? unref(states).isScrolling : void 0,
                    style: getItemStyle(row, column),
                    rowIndex: row
                  }));
                }
              }
            }
            return children;
          };
          const renderInner = () => {
            const Inner = resolveDynamicComponent(props.innerElement);
            const children = renderItems();
            return [
              h$2(Inner, {
                style: unref(innerStyle),
                ref: innerRef
              }, !isString$3(Inner) ? {
                default: () => children
              } : children)
            ];
          };
          const renderWindow = () => {
            const Container2 = resolveDynamicComponent(props.containerElement);
            const { horizontalScrollbar, verticalScrollbar } = renderScrollbars();
            const Inner = renderInner();
            return h$2("div", {
              key: 0,
              class: ns2.e("wrapper")
            }, [
              h$2(Container2, {
                class: props.className,
                style: unref(windowStyle),
                onScroll,
                onWheel,
                ref: windowRef
              }, !isString$3(Container2) ? { default: () => Inner } : Inner),
              horizontalScrollbar,
              verticalScrollbar
            ]);
          };
          return renderWindow;
        }
      });
    };
    const FixedSizeGrid = createGrid({
      name: "ElFixedSizeGrid",
      getColumnPosition: ({ columnWidth }, index2) => [
        columnWidth,
        index2 * columnWidth
      ],
      getRowPosition: ({ rowHeight }, index2) => [
        rowHeight,
        index2 * rowHeight
      ],
      getEstimatedTotalHeight: ({ totalRow, rowHeight }) => rowHeight * totalRow,
      getEstimatedTotalWidth: ({ totalColumn, columnWidth }) => columnWidth * totalColumn,
      getColumnOffset: ({ totalColumn, columnWidth, width }, columnIndex, alignment, scrollLeft, _2, scrollBarWidth2) => {
        width = Number(width);
        const lastColumnOffset = Math.max(0, totalColumn * columnWidth - width);
        const maxOffset = Math.min(lastColumnOffset, columnIndex * columnWidth);
        const minOffset = Math.max(0, columnIndex * columnWidth - width + scrollBarWidth2 + columnWidth);
        if (alignment === "smart") {
          if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {
            alignment = AUTO_ALIGNMENT;
          } else {
            alignment = CENTERED_ALIGNMENT;
          }
        }
        switch (alignment) {
          case START_ALIGNMENT:
            return maxOffset;
          case END_ALIGNMENT:
            return minOffset;
          case CENTERED_ALIGNMENT: {
            const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);
            if (middleOffset < Math.ceil(width / 2)) {
              return 0;
            } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {
              return lastColumnOffset;
            } else {
              return middleOffset;
            }
          }
          case AUTO_ALIGNMENT:
          default:
            if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {
              return scrollLeft;
            } else if (minOffset > maxOffset) {
              return minOffset;
            } else if (scrollLeft < minOffset) {
              return minOffset;
            } else {
              return maxOffset;
            }
        }
      },
      getRowOffset: ({ rowHeight, height, totalRow }, rowIndex, align, scrollTop, _2, scrollBarWidth2) => {
        height = Number(height);
        const lastRowOffset = Math.max(0, totalRow * rowHeight - height);
        const maxOffset = Math.min(lastRowOffset, rowIndex * rowHeight);
        const minOffset = Math.max(0, rowIndex * rowHeight - height + scrollBarWidth2 + rowHeight);
        if (align === SMART_ALIGNMENT) {
          if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {
            align = AUTO_ALIGNMENT;
          } else {
            align = CENTERED_ALIGNMENT;
          }
        }
        switch (align) {
          case START_ALIGNMENT:
            return maxOffset;
          case END_ALIGNMENT:
            return minOffset;
          case CENTERED_ALIGNMENT: {
            const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);
            if (middleOffset < Math.ceil(height / 2)) {
              return 0;
            } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {
              return lastRowOffset;
            } else {
              return middleOffset;
            }
          }
          case AUTO_ALIGNMENT:
          default:
            if (scrollTop >= minOffset && scrollTop <= maxOffset) {
              return scrollTop;
            } else if (minOffset > maxOffset) {
              return minOffset;
            } else if (scrollTop < minOffset) {
              return minOffset;
            } else {
              return maxOffset;
            }
        }
      },
      getColumnStartIndexForOffset: ({ columnWidth, totalColumn }, scrollLeft) => Math.max(0, Math.min(totalColumn - 1, Math.floor(scrollLeft / columnWidth))),
      getColumnStopIndexForStartIndex: ({ columnWidth, totalColumn, width }, startIndex, scrollLeft) => {
        const left2 = startIndex * columnWidth;
        const visibleColumnsCount = Math.ceil((width + scrollLeft - left2) / columnWidth);
        return Math.max(0, Math.min(totalColumn - 1, startIndex + visibleColumnsCount - 1));
      },
      getRowStartIndexForOffset: ({ rowHeight, totalRow }, scrollTop) => Math.max(0, Math.min(totalRow - 1, Math.floor(scrollTop / rowHeight))),
      getRowStopIndexForStartIndex: ({ rowHeight, totalRow, height }, startIndex, scrollTop) => {
        const top = startIndex * rowHeight;
        const numVisibleRows = Math.ceil((height + scrollTop - top) / rowHeight);
        return Math.max(0, Math.min(totalRow - 1, startIndex + numVisibleRows - 1));
      },
      initCache: () => void 0,
      clearCache: true,
      validateProps: ({ columnWidth, rowHeight }) => {
      }
    });
    const { max, min, floor: floor$1 } = Math;
    const ACCESS_SIZER_KEY_MAP = {
      column: "columnWidth",
      row: "rowHeight"
    };
    const ACCESS_LAST_VISITED_KEY_MAP = {
      column: "lastVisitedColumnIndex",
      row: "lastVisitedRowIndex"
    };
    const getItemFromCache = (props, index2, gridCache, type2) => {
      const [cachedItems, sizer, lastVisited] = [
        gridCache[type2],
        props[ACCESS_SIZER_KEY_MAP[type2]],
        gridCache[ACCESS_LAST_VISITED_KEY_MAP[type2]]
      ];
      if (index2 > lastVisited) {
        let offset2 = 0;
        if (lastVisited >= 0) {
          const item = cachedItems[lastVisited];
          offset2 = item.offset + item.size;
        }
        for (let i2 = lastVisited + 1; i2 <= index2; i2++) {
          const size2 = sizer(i2);
          cachedItems[i2] = {
            offset: offset2,
            size: size2
          };
          offset2 += size2;
        }
        gridCache[ACCESS_LAST_VISITED_KEY_MAP[type2]] = index2;
      }
      return cachedItems[index2];
    };
    const bs = (props, gridCache, low, high, offset2, type2) => {
      while (low <= high) {
        const mid = low + floor$1((high - low) / 2);
        const currentOffset = getItemFromCache(props, mid, gridCache, type2).offset;
        if (currentOffset === offset2) {
          return mid;
        } else if (currentOffset < offset2) {
          low = mid + 1;
        } else {
          high = mid - 1;
        }
      }
      return max(0, low - 1);
    };
    const es = (props, gridCache, idx, offset2, type2) => {
      const total2 = type2 === "column" ? props.totalColumn : props.totalRow;
      let exponent = 1;
      while (idx < total2 && getItemFromCache(props, idx, gridCache, type2).offset < offset2) {
        idx += exponent;
        exponent *= 2;
      }
      return bs(props, gridCache, floor$1(idx / 2), min(idx, total2 - 1), offset2, type2);
    };
    const findItem = (props, gridCache, offset2, type2) => {
      const [cache2, lastVisitedIndex] = [
        gridCache[type2],
        gridCache[ACCESS_LAST_VISITED_KEY_MAP[type2]]
      ];
      const lastVisitedItemOffset = lastVisitedIndex > 0 ? cache2[lastVisitedIndex].offset : 0;
      if (lastVisitedItemOffset >= offset2) {
        return bs(props, gridCache, 0, lastVisitedIndex, offset2, type2);
      }
      return es(props, gridCache, max(0, lastVisitedIndex), offset2, type2);
    };
    const getEstimatedTotalHeight = ({ totalRow }, { estimatedRowHeight, lastVisitedRowIndex, row }) => {
      let sizeOfVisitedRows = 0;
      if (lastVisitedRowIndex >= totalRow) {
        lastVisitedRowIndex = totalRow - 1;
      }
      if (lastVisitedRowIndex >= 0) {
        const item = row[lastVisitedRowIndex];
        sizeOfVisitedRows = item.offset + item.size;
      }
      const unvisitedItems = totalRow - lastVisitedRowIndex - 1;
      const sizeOfUnvisitedItems = unvisitedItems * estimatedRowHeight;
      return sizeOfVisitedRows + sizeOfUnvisitedItems;
    };
    const getEstimatedTotalWidth = ({ totalColumn }, { column, estimatedColumnWidth, lastVisitedColumnIndex }) => {
      let sizeOfVisitedColumns = 0;
      if (lastVisitedColumnIndex > totalColumn) {
        lastVisitedColumnIndex = totalColumn - 1;
      }
      if (lastVisitedColumnIndex >= 0) {
        const item = column[lastVisitedColumnIndex];
        sizeOfVisitedColumns = item.offset + item.size;
      }
      const unvisitedItems = totalColumn - lastVisitedColumnIndex - 1;
      const sizeOfUnvisitedItems = unvisitedItems * estimatedColumnWidth;
      return sizeOfVisitedColumns + sizeOfUnvisitedItems;
    };
    const ACCESS_ESTIMATED_SIZE_KEY_MAP = {
      column: getEstimatedTotalWidth,
      row: getEstimatedTotalHeight
    };
    const getOffset$1 = (props, index2, alignment, scrollOffset, cache2, type2, scrollBarWidth2) => {
      const [size2, estimatedSizeAssociates] = [
        type2 === "row" ? props.height : props.width,
        ACCESS_ESTIMATED_SIZE_KEY_MAP[type2]
      ];
      const item = getItemFromCache(props, index2, cache2, type2);
      const estimatedSize = estimatedSizeAssociates(props, cache2);
      const maxOffset = max(0, min(estimatedSize - size2, item.offset));
      const minOffset = max(0, item.offset - size2 + scrollBarWidth2 + item.size);
      if (alignment === SMART_ALIGNMENT) {
        if (scrollOffset >= minOffset - size2 && scrollOffset <= maxOffset + size2) {
          alignment = AUTO_ALIGNMENT;
        } else {
          alignment = CENTERED_ALIGNMENT;
        }
      }
      switch (alignment) {
        case START_ALIGNMENT: {
          return maxOffset;
        }
        case END_ALIGNMENT: {
          return minOffset;
        }
        case CENTERED_ALIGNMENT: {
          return Math.round(minOffset + (maxOffset - minOffset) / 2);
        }
        case AUTO_ALIGNMENT:
        default: {
          if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
            return scrollOffset;
          } else if (minOffset > maxOffset) {
            return minOffset;
          } else if (scrollOffset < minOffset) {
            return minOffset;
          } else {
            return maxOffset;
          }
        }
      }
    };
    const DynamicSizeGrid = createGrid({
      name: "ElDynamicSizeGrid",
      getColumnPosition: (props, idx, cache2) => {
        const item = getItemFromCache(props, idx, cache2, "column");
        return [item.size, item.offset];
      },
      getRowPosition: (props, idx, cache2) => {
        const item = getItemFromCache(props, idx, cache2, "row");
        return [item.size, item.offset];
      },
      getColumnOffset: (props, columnIndex, alignment, scrollLeft, cache2, scrollBarWidth2) => getOffset$1(props, columnIndex, alignment, scrollLeft, cache2, "column", scrollBarWidth2),
      getRowOffset: (props, rowIndex, alignment, scrollTop, cache2, scrollBarWidth2) => getOffset$1(props, rowIndex, alignment, scrollTop, cache2, "row", scrollBarWidth2),
      getColumnStartIndexForOffset: (props, scrollLeft, cache2) => findItem(props, cache2, scrollLeft, "column"),
      getColumnStopIndexForStartIndex: (props, startIndex, scrollLeft, cache2) => {
        const item = getItemFromCache(props, startIndex, cache2, "column");
        const maxOffset = scrollLeft + props.width;
        let offset2 = item.offset + item.size;
        let stopIndex = startIndex;
        while (stopIndex < props.totalColumn - 1 && offset2 < maxOffset) {
          stopIndex++;
          offset2 += getItemFromCache(props, startIndex, cache2, "column").size;
        }
        return stopIndex;
      },
      getEstimatedTotalHeight,
      getEstimatedTotalWidth,
      getRowStartIndexForOffset: (props, scrollTop, cache2) => findItem(props, cache2, scrollTop, "row"),
      getRowStopIndexForStartIndex: (props, startIndex, scrollTop, cache2) => {
        const { totalRow, height } = props;
        const item = getItemFromCache(props, startIndex, cache2, "row");
        const maxOffset = scrollTop + height;
        let offset2 = item.size + item.offset;
        let stopIndex = startIndex;
        while (stopIndex < totalRow - 1 && offset2 < maxOffset) {
          stopIndex++;
          offset2 += getItemFromCache(props, stopIndex, cache2, "row").size;
        }
        return stopIndex;
      },
      injectToInstance: (instance, cache2) => {
        const resetAfter = ({ columnIndex, rowIndex }, forceUpdate) => {
          var _a2, _b;
          forceUpdate = isUndefined$1(forceUpdate) ? true : forceUpdate;
          if (isNumber$1(columnIndex)) {
            cache2.value.lastVisitedColumnIndex = Math.min(cache2.value.lastVisitedColumnIndex, columnIndex - 1);
          }
          if (isNumber$1(rowIndex)) {
            cache2.value.lastVisitedRowIndex = Math.min(cache2.value.lastVisitedRowIndex, rowIndex - 1);
          }
          (_a2 = instance.exposed) == null ? void 0 : _a2.getItemStyleCache.value(-1, null, null);
          if (forceUpdate)
            (_b = instance.proxy) == null ? void 0 : _b.$forceUpdate();
        };
        const resetAfterColumnIndex = (columnIndex, forceUpdate) => {
          resetAfter({
            columnIndex
          }, forceUpdate);
        };
        const resetAfterRowIndex = (rowIndex, forceUpdate) => {
          resetAfter({
            rowIndex
          }, forceUpdate);
        };
        Object.assign(instance.proxy, {
          resetAfterColumnIndex,
          resetAfterRowIndex,
          resetAfter
        });
      },
      initCache: ({
        estimatedColumnWidth = DEFAULT_DYNAMIC_LIST_ITEM_SIZE,
        estimatedRowHeight = DEFAULT_DYNAMIC_LIST_ITEM_SIZE
      }) => {
        const cache2 = {
          column: {},
          estimatedColumnWidth,
          estimatedRowHeight,
          lastVisitedColumnIndex: -1,
          lastVisitedRowIndex: -1,
          row: {}
        };
        return cache2;
      },
      clearCache: false,
      validateProps: ({ columnWidth, rowHeight }) => {
      }
    });
    const _sfc_main$$ = defineComponent({
      props: {
        item: {
          type: Object,
          required: true
        },
        style: Object,
        height: Number
      },
      setup() {
        const ns2 = useNamespace("select");
        return {
          ns: ns2
        };
      }
    });
    function _sfc_render$a(_ctx, _cache, $props, $setup, $data, $options) {
      return _ctx.item.isTitle ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass(_ctx.ns.be("group", "title")),
        style: normalizeStyle([_ctx.style, { lineHeight: `${_ctx.height}px` }])
      }, toDisplayString$1(_ctx.item.label), 7)) : (openBlock(), createElementBlock("div", {
        key: 1,
        class: normalizeClass(_ctx.ns.be("group", "split")),
        style: normalizeStyle(_ctx.style)
      }, [
        createBaseVNode("span", {
          class: normalizeClass(_ctx.ns.be("group", "split-dash")),
          style: normalizeStyle({ top: `${_ctx.height / 2}px` })
        }, null, 6)
      ], 6));
    }
    var GroupItem = /* @__PURE__ */ _export_sfc$1(_sfc_main$$, [["render", _sfc_render$a], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/select-v2/src/group-item.vue"]]);
    function useOption(props, { emit: emit2 }) {
      return {
        hoverItem: () => {
          if (!props.disabled) {
            emit2("hover", props.index);
          }
        },
        selectOptionClick: () => {
          if (!props.disabled) {
            emit2("select", props.item, props.index);
          }
        }
      };
    }
    const SelectProps = {
      allowCreate: Boolean,
      autocomplete: {
        type: String,
        default: "none"
      },
      automaticDropdown: Boolean,
      clearable: Boolean,
      clearIcon: {
        type: [String, Object],
        default: circle_close_default
      },
      effect: {
        type: String,
        default: "light"
      },
      collapseTags: Boolean,
      collapseTagsTooltip: {
        type: Boolean,
        default: false
      },
      defaultFirstOption: Boolean,
      disabled: Boolean,
      estimatedOptionHeight: {
        type: Number,
        default: void 0
      },
      filterable: Boolean,
      filterMethod: Function,
      height: {
        type: Number,
        default: 170
      },
      itemHeight: {
        type: Number,
        default: 34
      },
      id: String,
      loading: Boolean,
      loadingText: String,
      label: String,
      modelValue: [Array, String, Number, Boolean, Object],
      multiple: Boolean,
      multipleLimit: {
        type: Number,
        default: 0
      },
      name: String,
      noDataText: String,
      noMatchText: String,
      remoteMethod: Function,
      reserveKeyword: {
        type: Boolean,
        default: true
      },
      options: {
        type: Array,
        required: true
      },
      placeholder: {
        type: String
      },
      teleported: useTooltipContentProps.teleported,
      persistent: {
        type: Boolean,
        default: true
      },
      popperClass: {
        type: String,
        default: ""
      },
      popperOptions: {
        type: Object,
        default: () => ({})
      },
      remote: Boolean,
      size: {
        type: String,
        validator: isValidComponentSize
      },
      valueKey: {
        type: String,
        default: "value"
      },
      scrollbarAlwaysOn: {
        type: Boolean,
        default: false
      },
      validateEvent: {
        type: Boolean,
        default: true
      }
    };
    const OptionProps = {
      data: Array,
      disabled: Boolean,
      hovering: Boolean,
      item: Object,
      index: Number,
      style: Object,
      selected: Boolean,
      created: Boolean
    };
    const _sfc_main$_ = defineComponent({
      props: OptionProps,
      emits: ["select", "hover"],
      setup(props, { emit: emit2 }) {
        const ns2 = useNamespace("select");
        const { hoverItem, selectOptionClick } = useOption(props, { emit: emit2 });
        return {
          ns: ns2,
          hoverItem,
          selectOptionClick
        };
      }
    });
    const _hoisted_1$o = ["aria-selected"];
    function _sfc_render$9(_ctx, _cache, $props, $setup, $data, $options) {
      return openBlock(), createElementBlock("li", {
        "aria-selected": _ctx.selected,
        style: normalizeStyle(_ctx.style),
        class: normalizeClass([
          _ctx.ns.be("dropdown", "option-item"),
          _ctx.ns.is("selected", _ctx.selected),
          _ctx.ns.is("disabled", _ctx.disabled),
          _ctx.ns.is("created", _ctx.created),
          { hover: _ctx.hovering }
        ]),
        onMouseenter: _cache[0] || (_cache[0] = (...args) => _ctx.hoverItem && _ctx.hoverItem(...args)),
        onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.selectOptionClick && _ctx.selectOptionClick(...args), ["stop"]))
      }, [
        renderSlot(_ctx.$slots, "default", {
          item: _ctx.item,
          index: _ctx.index,
          disabled: _ctx.disabled
        }, () => [
          createBaseVNode("span", null, toDisplayString$1(_ctx.item.label), 1)
        ])
      ], 46, _hoisted_1$o);
    }
    var OptionItem = /* @__PURE__ */ _export_sfc$1(_sfc_main$_, [["render", _sfc_render$9], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/select-v2/src/option-item.vue"]]);
    const selectV2InjectionKey = "ElSelectV2Injection";
    var ElSelectMenu = defineComponent({
      name: "ElSelectDropdown",
      props: {
        data: {
          type: Array,
          required: true
        },
        hoveringIndex: Number,
        width: Number
      },
      setup(props, {
        slots,
        expose
      }) {
        const select = inject(selectV2InjectionKey);
        const ns2 = useNamespace("select");
        const cachedHeights = ref([]);
        const listRef = ref();
        const isSized = computed(() => isUndefined$1(select.props.estimatedOptionHeight));
        const listProps = computed(() => {
          if (isSized.value) {
            return {
              itemSize: select.props.itemHeight
            };
          }
          return {
            estimatedSize: select.props.estimatedOptionHeight,
            itemSize: (idx) => cachedHeights.value[idx]
          };
        });
        const contains2 = (arr = [], target) => {
          const {
            props: {
              valueKey
            }
          } = select;
          if (!isObject$7(target)) {
            return arr.includes(target);
          }
          return arr && arr.some((item) => {
            return get$1(item, valueKey) === get$1(target, valueKey);
          });
        };
        const isEqual2 = (selected, target) => {
          if (!isObject$7(target)) {
            return selected === target;
          } else {
            const {
              valueKey
            } = select.props;
            return get$1(selected, valueKey) === get$1(target, valueKey);
          }
        };
        const isItemSelected = (modelValue, target) => {
          const {
            valueKey
          } = select.props;
          if (select.props.multiple) {
            return contains2(modelValue, get$1(target, valueKey));
          }
          return isEqual2(modelValue, get$1(target, valueKey));
        };
        const isItemDisabled = (modelValue, selected) => {
          const {
            disabled,
            multiple,
            multipleLimit
          } = select.props;
          return disabled || !selected && (multiple ? multipleLimit > 0 && modelValue.length >= multipleLimit : false);
        };
        const isItemHovering = (target) => props.hoveringIndex === target;
        const scrollToItem = (index2) => {
          const list = listRef.value;
          if (list) {
            list.scrollToItem(index2);
          }
        };
        const resetScrollTop = () => {
          const list = listRef.value;
          if (list) {
            list.resetScrollTop();
          }
        };
        expose({
          listRef,
          isSized,
          isItemDisabled,
          isItemHovering,
          isItemSelected,
          scrollToItem,
          resetScrollTop
        });
        const Item2 = (itemProps) => {
          const {
            index: index2,
            data,
            style: style2
          } = itemProps;
          const sized = unref(isSized);
          const {
            itemSize: itemSize2,
            estimatedSize
          } = unref(listProps);
          const {
            modelValue
          } = select.props;
          const {
            onSelect,
            onHover
          } = select;
          const item = data[index2];
          if (item.type === "Group") {
            return createVNode(GroupItem, {
              "item": item,
              "style": style2,
              "height": sized ? itemSize2 : estimatedSize
            }, null);
          }
          const isSelected = isItemSelected(modelValue, item);
          const isDisabled = isItemDisabled(modelValue, isSelected);
          const isHovering = isItemHovering(index2);
          return createVNode(OptionItem, mergeProps(itemProps, {
            "selected": isSelected,
            "disabled": item.disabled || isDisabled,
            "created": !!item.created,
            "hovering": isHovering,
            "item": item,
            "onSelect": onSelect,
            "onHover": onHover
          }), {
            default: (props2) => {
              var _a2;
              return ((_a2 = slots.default) == null ? void 0 : _a2.call(slots, props2)) || createVNode("span", null, [item.label]);
            }
          });
        };
        const {
          onKeyboardNavigate,
          onKeyboardSelect
        } = select;
        const onForward = () => {
          onKeyboardNavigate("forward");
        };
        const onBackward = () => {
          onKeyboardNavigate("backward");
        };
        const onEscOrTab = () => {
          select.expanded = false;
        };
        const onKeydown = (e2) => {
          const {
            code
          } = e2;
          const {
            tab,
            esc,
            down: down2,
            up: up2,
            enter
          } = EVENT_CODE;
          if (code !== tab) {
            e2.preventDefault();
            e2.stopPropagation();
          }
          switch (code) {
            case tab:
            case esc: {
              onEscOrTab();
              break;
            }
            case down2: {
              onForward();
              break;
            }
            case up2: {
              onBackward();
              break;
            }
            case enter: {
              onKeyboardSelect();
              break;
            }
          }
        };
        return () => {
          var _a2;
          const {
            data,
            width
          } = props;
          const {
            height,
            multiple,
            scrollbarAlwaysOn
          } = select.props;
          if (data.length === 0) {
            return createVNode("div", {
              "class": ns2.b("dropdown"),
              "style": {
                width: `${width}px`
              }
            }, [(_a2 = slots.empty) == null ? void 0 : _a2.call(slots)]);
          }
          const List = unref(isSized) ? FixedSizeList : DynamicSizeList;
          return createVNode("div", {
            "class": [ns2.b("dropdown"), ns2.is("multiple", multiple)]
          }, [createVNode(List, mergeProps({
            "ref": listRef
          }, unref(listProps), {
            "className": ns2.be("dropdown", "list"),
            "scrollbarAlwaysOn": scrollbarAlwaysOn,
            "data": data,
            "height": height,
            "width": width,
            "total": data.length,
            "onKeydown": onKeydown
          }), {
            default: (props2) => createVNode(Item2, props2, null)
          })]);
        };
      }
    });
    function useAllowCreate(props, states) {
      const createOptionCount = ref(0);
      const cachedSelectedOption = ref(null);
      const enableAllowCreateMode = computed(() => {
        return props.allowCreate && props.filterable;
      });
      function hasExistingOption(query) {
        const hasValue = (option) => option.value === query;
        return props.options && props.options.some(hasValue) || states.createdOptions.some(hasValue);
      }
      function selectNewOption(option) {
        if (!enableAllowCreateMode.value) {
          return;
        }
        if (props.multiple && option.created) {
          createOptionCount.value++;
        } else {
          cachedSelectedOption.value = option;
        }
      }
      function createNewOption(query) {
        if (enableAllowCreateMode.value) {
          if (query && query.length > 0 && !hasExistingOption(query)) {
            const newOption = {
              value: query,
              label: query,
              created: true,
              disabled: false
            };
            if (states.createdOptions.length >= createOptionCount.value) {
              states.createdOptions[createOptionCount.value] = newOption;
            } else {
              states.createdOptions.push(newOption);
            }
          } else {
            if (props.multiple) {
              states.createdOptions.length = createOptionCount.value;
            } else {
              const selectedOption = cachedSelectedOption.value;
              states.createdOptions.length = 0;
              if (selectedOption && selectedOption.created) {
                states.createdOptions.push(selectedOption);
              }
            }
          }
        }
      }
      function removeNewOption(option) {
        if (!enableAllowCreateMode.value || !option || !option.created || option.created && props.reserveKeyword && states.inputValue === option.label) {
          return;
        }
        const idx = states.createdOptions.findIndex((it2) => it2.value === option.value);
        if (~idx) {
          states.createdOptions.splice(idx, 1);
          createOptionCount.value--;
        }
      }
      function clearAllNewOption() {
        if (enableAllowCreateMode.value) {
          states.createdOptions.length = 0;
          createOptionCount.value = 0;
        }
      }
      return {
        createNewOption,
        removeNewOption,
        selectNewOption,
        clearAllNewOption
      };
    }
    const flattenOptions = (options) => {
      const flattened = [];
      options.forEach((option) => {
        if (isArray$6(option.options)) {
          flattened.push({
            label: option.label,
            isTitle: true,
            type: "Group"
          });
          option.options.forEach((o2) => {
            flattened.push(o2);
          });
          flattened.push({
            type: "Group"
          });
        } else {
          flattened.push(option);
        }
      });
      return flattened;
    };
    function useInput(handleInput) {
      const isComposing = ref(false);
      const handleCompositionStart = () => {
        isComposing.value = true;
      };
      const handleCompositionUpdate = (event) => {
        const text = event.target.value;
        const lastCharacter = text[text.length - 1] || "";
        isComposing.value = !isKorean(lastCharacter);
      };
      const handleCompositionEnd = (event) => {
        if (isComposing.value) {
          isComposing.value = false;
          if (isFunction$4(handleInput)) {
            handleInput(event);
          }
        }
      };
      return {
        handleCompositionStart,
        handleCompositionUpdate,
        handleCompositionEnd
      };
    }
    const DEFAULT_INPUT_PLACEHOLDER = "";
    const MINIMUM_INPUT_WIDTH = 11;
    const TAG_BASE_WIDTH = {
      larget: 51,
      default: 42,
      small: 33
    };
    const useSelect$1 = (props, emit2) => {
      const { t } = useLocale();
      const nsSelectV2 = useNamespace("select-v2");
      const nsInput = useNamespace("input");
      const { form: elForm, formItem: elFormItem } = useFormItem();
      const states = reactive({
        inputValue: DEFAULT_INPUT_PLACEHOLDER,
        displayInputValue: DEFAULT_INPUT_PLACEHOLDER,
        calculatedWidth: 0,
        cachedPlaceholder: "",
        cachedOptions: [],
        createdOptions: [],
        createdLabel: "",
        createdSelected: false,
        currentPlaceholder: "",
        hoveringIndex: -1,
        comboBoxHovering: false,
        isOnComposition: false,
        isSilentBlur: false,
        isComposing: false,
        inputLength: 20,
        selectWidth: 200,
        initialInputHeight: 0,
        previousQuery: null,
        previousValue: "",
        query: "",
        selectedLabel: "",
        softFocus: false,
        tagInMultiLine: false
      });
      const selectedIndex = ref(-1);
      const popperSize = ref(-1);
      const controlRef = ref(null);
      const inputRef = ref(null);
      const menuRef = ref(null);
      const popper = ref(null);
      const selectRef = ref(null);
      const selectionRef = ref(null);
      const calculatorRef = ref(null);
      const expanded = ref(false);
      const selectDisabled = computed(() => props.disabled || (elForm == null ? void 0 : elForm.disabled));
      const popupHeight = computed(() => {
        const totalHeight = filteredOptions.value.length * 34;
        return totalHeight > props.height ? props.height : totalHeight;
      });
      const hasModelValue = computed(() => {
        return props.modelValue !== void 0 && props.modelValue !== null && props.modelValue !== "";
      });
      const showClearBtn = computed(() => {
        const hasValue = props.multiple ? Array.isArray(props.modelValue) && props.modelValue.length > 0 : hasModelValue.value;
        const criteria = props.clearable && !selectDisabled.value && states.comboBoxHovering && hasValue;
        return criteria;
      });
      const iconComponent = computed(() => props.remote && props.filterable ? "" : arrow_up_default);
      const iconReverse = computed(() => iconComponent.value && nsSelectV2.is("reverse", expanded.value));
      const validateState = computed(() => (elFormItem == null ? void 0 : elFormItem.validateState) || "");
      const validateIcon = computed(() => ValidateComponentsMap[validateState.value]);
      const debounce$1 = computed(() => props.remote ? 300 : 0);
      const emptyText = computed(() => {
        const options = filteredOptions.value;
        if (props.loading) {
          return props.loadingText || t("el.select.loading");
        } else {
          if (props.remote && states.inputValue === "" && options.length === 0)
            return false;
          if (props.filterable && states.inputValue && options.length > 0) {
            return props.noMatchText || t("el.select.noMatch");
          }
          if (options.length === 0) {
            return props.noDataText || t("el.select.noData");
          }
        }
        return null;
      });
      const filteredOptions = computed(() => {
        const isValidOption = (o2) => {
          var _a2;
          const query = states.inputValue;
          const containsQueryString = query ? (_a2 = o2.label) == null ? void 0 : _a2.includes(query) : true;
          return containsQueryString;
        };
        if (props.loading) {
          return [];
        }
        return flattenOptions(props.options.concat(states.createdOptions).map((v2) => {
          if (isArray$6(v2.options)) {
            const filtered = v2.options.filter(isValidOption);
            if (filtered.length > 0) {
              return {
                ...v2,
                options: filtered
              };
            }
          } else {
            if (props.remote || isValidOption(v2)) {
              return v2;
            }
          }
          return null;
        }).filter((v2) => v2 !== null));
      });
      const optionsAllDisabled = computed(() => filteredOptions.value.every((option) => option.disabled));
      const selectSize = useSize();
      const collapseTagSize = computed(() => selectSize.value === "small" ? "small" : "default");
      const tagMaxWidth = computed(() => {
        const select = selectionRef.value;
        const size2 = collapseTagSize.value || "default";
        const paddingLeft = select ? Number.parseInt(getComputedStyle(select).paddingLeft) : 0;
        const paddingRight = select ? Number.parseInt(getComputedStyle(select).paddingRight) : 0;
        return states.selectWidth - paddingRight - paddingLeft - TAG_BASE_WIDTH[size2];
      });
      const calculatePopperSize = () => {
        var _a2;
        popperSize.value = ((_a2 = selectRef.value) == null ? void 0 : _a2.offsetWidth) || 200;
      };
      const inputWrapperStyle = computed(() => {
        return {
          width: `${states.calculatedWidth === 0 ? MINIMUM_INPUT_WIDTH : Math.ceil(states.calculatedWidth) + MINIMUM_INPUT_WIDTH}px`
        };
      });
      const shouldShowPlaceholder = computed(() => {
        if (isArray$6(props.modelValue)) {
          return props.modelValue.length === 0 && !states.displayInputValue;
        }
        return props.filterable ? states.displayInputValue.length === 0 : true;
      });
      const currentPlaceholder = computed(() => {
        const _placeholder = props.placeholder || t("el.select.placeholder");
        return props.multiple ? _placeholder : states.selectedLabel || _placeholder;
      });
      const popperRef = computed(() => {
        var _a2, _b;
        return (_b = (_a2 = popper.value) == null ? void 0 : _a2.popperRef) == null ? void 0 : _b.contentRef;
      });
      const indexRef = computed(() => {
        if (props.multiple) {
          const len = props.modelValue.length;
          if (props.modelValue.length > 0) {
            return filteredOptions.value.findIndex((o2) => o2.value === props.modelValue[len - 1]);
          }
        } else {
          if (props.modelValue) {
            return filteredOptions.value.findIndex((o2) => o2.value === props.modelValue);
          }
        }
        return -1;
      });
      const dropdownMenuVisible = computed({
        get() {
          return expanded.value && emptyText.value !== false;
        },
        set(val) {
          expanded.value = val;
        }
      });
      const {
        createNewOption,
        removeNewOption,
        selectNewOption,
        clearAllNewOption
      } = useAllowCreate(props, states);
      const {
        handleCompositionStart,
        handleCompositionUpdate,
        handleCompositionEnd
      } = useInput((e2) => onInput(e2));
      const focusAndUpdatePopup = () => {
        var _a2, _b, _c;
        (_b = (_a2 = inputRef.value).focus) == null ? void 0 : _b.call(_a2);
        (_c = popper.value) == null ? void 0 : _c.updatePopper();
      };
      const toggleMenu = () => {
        if (props.automaticDropdown)
          return;
        if (!selectDisabled.value) {
          if (states.isComposing)
            states.softFocus = true;
          return nextTick$1(() => {
            var _a2, _b;
            expanded.value = !expanded.value;
            (_b = (_a2 = inputRef.value) == null ? void 0 : _a2.focus) == null ? void 0 : _b.call(_a2);
          });
        }
      };
      const onInputChange = () => {
        if (props.filterable && states.inputValue !== states.selectedLabel) {
          states.query = states.selectedLabel;
        }
        handleQueryChange(states.inputValue);
        return nextTick$1(() => {
          createNewOption(states.inputValue);
        });
      };
      const debouncedOnInputChange = debounce(onInputChange, debounce$1.value);
      const handleQueryChange = (val) => {
        if (states.previousQuery === val) {
          return;
        }
        states.previousQuery = val;
        if (props.filterable && isFunction$4(props.filterMethod)) {
          props.filterMethod(val);
        } else if (props.filterable && props.remote && isFunction$4(props.remoteMethod)) {
          props.remoteMethod(val);
        }
      };
      const emitChange = (val) => {
        if (!isEqual$1(props.modelValue, val)) {
          emit2(CHANGE_EVENT, val);
        }
      };
      const update = (val) => {
        emit2(UPDATE_MODEL_EVENT, val);
        emitChange(val);
        states.previousValue = val.toString();
      };
      const getValueIndex = (arr = [], value) => {
        if (!isObject$7(value)) {
          return arr.indexOf(value);
        }
        const valueKey = props.valueKey;
        let index2 = -1;
        arr.some((item, i2) => {
          if (get$1(item, valueKey) === get$1(value, valueKey)) {
            index2 = i2;
            return true;
          }
          return false;
        });
        return index2;
      };
      const getValueKey = (item) => {
        return isObject$7(item) ? get$1(item, props.valueKey) : item;
      };
      const getLabel = (item) => {
        return isObject$7(item) ? item.label : item;
      };
      const resetInputHeight = () => {
        if (props.collapseTags && !props.filterable) {
          return;
        }
        return nextTick$1(() => {
          var _a2, _b;
          if (!inputRef.value)
            return;
          const selection = selectionRef.value;
          selectRef.value.height = selection.offsetHeight;
          if (expanded.value && emptyText.value !== false) {
            (_b = (_a2 = popper.value) == null ? void 0 : _a2.updatePopper) == null ? void 0 : _b.call(_a2);
          }
        });
      };
      const handleResize = () => {
        var _a2, _b;
        resetInputWidth();
        calculatePopperSize();
        (_b = (_a2 = popper.value) == null ? void 0 : _a2.updatePopper) == null ? void 0 : _b.call(_a2);
        if (props.multiple) {
          return resetInputHeight();
        }
      };
      const resetInputWidth = () => {
        const select = selectionRef.value;
        if (select) {
          states.selectWidth = select.getBoundingClientRect().width;
        }
      };
      const onSelect = (option, idx, byClick = true) => {
        var _a2, _b;
        if (props.multiple) {
          let selectedOptions = props.modelValue.slice();
          const index2 = getValueIndex(selectedOptions, getValueKey(option));
          if (index2 > -1) {
            selectedOptions = [
              ...selectedOptions.slice(0, index2),
              ...selectedOptions.slice(index2 + 1)
            ];
            states.cachedOptions.splice(index2, 1);
            removeNewOption(option);
          } else if (props.multipleLimit <= 0 || selectedOptions.length < props.multipleLimit) {
            selectedOptions = [...selectedOptions, getValueKey(option)];
            states.cachedOptions.push(option);
            selectNewOption(option);
            updateHoveringIndex(idx);
          }
          update(selectedOptions);
          if (option.created) {
            states.query = "";
            handleQueryChange("");
            states.inputLength = 20;
          }
          if (props.filterable && !props.reserveKeyword) {
            (_b = (_a2 = inputRef.value).focus) == null ? void 0 : _b.call(_a2);
            onUpdateInputValue("");
          }
          if (props.filterable) {
            states.calculatedWidth = calculatorRef.value.getBoundingClientRect().width;
          }
          resetInputHeight();
          setSoftFocus();
        } else {
          selectedIndex.value = idx;
          states.selectedLabel = option.label;
          update(getValueKey(option));
          expanded.value = false;
          states.isComposing = false;
          states.isSilentBlur = byClick;
          selectNewOption(option);
          if (!option.created) {
            clearAllNewOption();
          }
          updateHoveringIndex(idx);
        }
      };
      const deleteTag = (event, tag) => {
        const { valueKey } = props;
        const index2 = props.modelValue.indexOf(get$1(tag, valueKey));
        if (index2 > -1 && !selectDisabled.value) {
          const value = [
            ...props.modelValue.slice(0, index2),
            ...props.modelValue.slice(index2 + 1)
          ];
          states.cachedOptions.splice(index2, 1);
          update(value);
          emit2("remove-tag", get$1(tag, valueKey));
          states.softFocus = true;
          removeNewOption(tag);
          return nextTick$1(focusAndUpdatePopup);
        }
        event.stopPropagation();
      };
      const handleFocus = (event) => {
        const focused = states.isComposing;
        states.isComposing = true;
        if (!states.softFocus) {
          if (!focused)
            emit2("focus", event);
        } else {
          states.softFocus = false;
        }
      };
      const handleBlur = () => {
        states.softFocus = false;
        return nextTick$1(() => {
          var _a2, _b;
          (_b = (_a2 = inputRef.value) == null ? void 0 : _a2.blur) == null ? void 0 : _b.call(_a2);
          if (calculatorRef.value) {
            states.calculatedWidth = calculatorRef.value.getBoundingClientRect().width;
          }
          if (states.isSilentBlur) {
            states.isSilentBlur = false;
          } else {
            if (states.isComposing) {
              emit2("blur");
            }
          }
          states.isComposing = false;
        });
      };
      const handleEsc = () => {
        if (states.displayInputValue.length > 0) {
          onUpdateInputValue("");
        } else {
          expanded.value = false;
        }
      };
      const handleDel = (e2) => {
        if (states.displayInputValue.length === 0) {
          e2.preventDefault();
          const selected = props.modelValue.slice();
          selected.pop();
          removeNewOption(states.cachedOptions.pop());
          update(selected);
        }
      };
      const handleClear = () => {
        let emptyValue;
        if (isArray$6(props.modelValue)) {
          emptyValue = [];
        } else {
          emptyValue = "";
        }
        states.softFocus = true;
        if (props.multiple) {
          states.cachedOptions = [];
        } else {
          states.selectedLabel = "";
        }
        expanded.value = false;
        update(emptyValue);
        emit2("clear");
        clearAllNewOption();
        return nextTick$1(focusAndUpdatePopup);
      };
      const onUpdateInputValue = (val) => {
        states.displayInputValue = val;
        states.inputValue = val;
      };
      const onKeyboardNavigate = (direction2, hoveringIndex = void 0) => {
        const options = filteredOptions.value;
        if (!["forward", "backward"].includes(direction2) || selectDisabled.value || options.length <= 0 || optionsAllDisabled.value) {
          return;
        }
        if (!expanded.value) {
          return toggleMenu();
        }
        if (hoveringIndex === void 0) {
          hoveringIndex = states.hoveringIndex;
        }
        let newIndex = -1;
        if (direction2 === "forward") {
          newIndex = hoveringIndex + 1;
          if (newIndex >= options.length) {
            newIndex = 0;
          }
        } else if (direction2 === "backward") {
          newIndex = hoveringIndex - 1;
          if (newIndex < 0) {
            newIndex = options.length - 1;
          }
        }
        const option = options[newIndex];
        if (option.disabled || option.type === "Group") {
          return onKeyboardNavigate(direction2, newIndex);
        } else {
          updateHoveringIndex(newIndex);
          scrollToItem(newIndex);
        }
      };
      const onKeyboardSelect = () => {
        if (!expanded.value) {
          return toggleMenu();
        } else if (~states.hoveringIndex && filteredOptions.value[states.hoveringIndex]) {
          onSelect(filteredOptions.value[states.hoveringIndex], states.hoveringIndex, false);
        }
      };
      const updateHoveringIndex = (idx) => {
        states.hoveringIndex = idx;
      };
      const resetHoveringIndex = () => {
        states.hoveringIndex = -1;
      };
      const setSoftFocus = () => {
        var _a2;
        const _input = inputRef.value;
        if (_input) {
          (_a2 = _input.focus) == null ? void 0 : _a2.call(_input);
        }
      };
      const onInput = (event) => {
        const value = event.target.value;
        onUpdateInputValue(value);
        if (states.displayInputValue.length > 0 && !expanded.value) {
          expanded.value = true;
        }
        states.calculatedWidth = calculatorRef.value.getBoundingClientRect().width;
        if (props.multiple) {
          resetInputHeight();
        }
        if (props.remote) {
          debouncedOnInputChange();
        } else {
          return onInputChange();
        }
      };
      const handleClickOutside = () => {
        expanded.value = false;
        return handleBlur();
      };
      const handleMenuEnter = () => {
        states.inputValue = states.displayInputValue;
        return nextTick$1(() => {
          if (~indexRef.value) {
            updateHoveringIndex(indexRef.value);
            scrollToItem(states.hoveringIndex);
          }
        });
      };
      const scrollToItem = (index2) => {
        menuRef.value.scrollToItem(index2);
      };
      const initStates = () => {
        resetHoveringIndex();
        if (props.multiple) {
          if (props.modelValue.length > 0) {
            let initHovering = false;
            states.cachedOptions.length = 0;
            states.previousValue = props.modelValue.toString();
            props.modelValue.forEach((selected) => {
              const itemIndex = filteredOptions.value.findIndex((option) => getValueKey(option) === selected);
              if (~itemIndex) {
                states.cachedOptions.push(filteredOptions.value[itemIndex]);
                if (!initHovering) {
                  updateHoveringIndex(itemIndex);
                }
                initHovering = true;
              }
            });
          } else {
            states.cachedOptions = [];
            states.previousValue = "";
          }
        } else {
          if (hasModelValue.value) {
            states.previousValue = props.modelValue;
            const options = filteredOptions.value;
            const selectedItemIndex = options.findIndex((option) => getValueKey(option) === getValueKey(props.modelValue));
            if (~selectedItemIndex) {
              states.selectedLabel = options[selectedItemIndex].label;
              updateHoveringIndex(selectedItemIndex);
            } else {
              states.selectedLabel = `${props.modelValue}`;
            }
          } else {
            states.selectedLabel = "";
            states.previousValue = "";
          }
        }
        clearAllNewOption();
        calculatePopperSize();
      };
      watch(expanded, (val) => {
        var _a2, _b;
        emit2("visible-change", val);
        if (val) {
          (_b = (_a2 = popper.value).update) == null ? void 0 : _b.call(_a2);
        } else {
          states.displayInputValue = "";
          states.previousQuery = null;
          createNewOption("");
        }
      });
      watch(() => props.modelValue, (val, oldVal) => {
        var _a2;
        if (!val || val.toString() !== states.previousValue) {
          initStates();
        }
        if (!isEqual$1(val, oldVal) && props.validateEvent) {
          (_a2 = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _a2.call(elFormItem, "change").catch((err) => debugWarn());
        }
      }, {
        deep: true
      });
      watch(() => props.options, () => {
        const input = inputRef.value;
        if (!input || input && document.activeElement !== input) {
          initStates();
        }
      }, {
        deep: true
      });
      watch(filteredOptions, () => {
        return nextTick$1(menuRef.value.resetScrollTop);
      });
      onMounted(() => {
        initStates();
      });
      useResizeObserver(selectRef, handleResize);
      return {
        collapseTagSize,
        currentPlaceholder,
        expanded,
        emptyText,
        popupHeight,
        debounce: debounce$1,
        filteredOptions,
        iconComponent,
        iconReverse,
        inputWrapperStyle,
        popperSize,
        dropdownMenuVisible,
        hasModelValue,
        shouldShowPlaceholder,
        selectDisabled,
        selectSize,
        showClearBtn,
        states,
        tagMaxWidth,
        nsSelectV2,
        nsInput,
        calculatorRef,
        controlRef,
        inputRef,
        menuRef,
        popper,
        selectRef,
        selectionRef,
        popperRef,
        validateState,
        validateIcon,
        debouncedOnInputChange,
        deleteTag,
        getLabel,
        getValueKey,
        handleBlur,
        handleClear,
        handleClickOutside,
        handleDel,
        handleEsc,
        handleFocus,
        handleMenuEnter,
        handleResize,
        toggleMenu,
        scrollTo: scrollToItem,
        onInput,
        onKeyboardNavigate,
        onKeyboardSelect,
        onSelect,
        onHover: updateHoveringIndex,
        onUpdateInputValue,
        handleCompositionStart,
        handleCompositionEnd,
        handleCompositionUpdate
      };
    };
    const _sfc_main$Z = defineComponent({
      name: "ElSelectV2",
      components: {
        ElSelectMenu,
        ElTag,
        ElTooltip,
        ElIcon
      },
      directives: { ClickOutside, ModelText: vModelText },
      props: SelectProps,
      emits: [
        UPDATE_MODEL_EVENT,
        CHANGE_EVENT,
        "remove-tag",
        "clear",
        "visible-change",
        "focus",
        "blur"
      ],
      setup(props, { emit: emit2 }) {
        const API2 = useSelect$1(props, emit2);
        provide(selectV2InjectionKey, {
          props: reactive({
            ...toRefs(props),
            height: API2.popupHeight
          }),
          onSelect: API2.onSelect,
          onHover: API2.onHover,
          onKeyboardNavigate: API2.onKeyboardNavigate,
          onKeyboardSelect: API2.onKeyboardSelect
        });
        return API2;
      }
    });
    const _hoisted_1$n = { key: 0 };
    const _hoisted_2$e = ["id", "autocomplete", "aria-expanded", "aria-labelledby", "disabled", "readonly", "name", "unselectable"];
    const _hoisted_3$5 = ["textContent"];
    const _hoisted_4$3 = ["id", "aria-labelledby", "aria-expanded", "autocomplete", "disabled", "name", "readonly", "unselectable"];
    const _hoisted_5$2 = ["textContent"];
    function _sfc_render$8(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_el_tag = resolveComponent("el-tag");
      const _component_el_tooltip = resolveComponent("el-tooltip");
      const _component_el_icon = resolveComponent("el-icon");
      const _component_el_select_menu = resolveComponent("el-select-menu");
      const _directive_model_text = resolveDirective("model-text");
      const _directive_click_outside = resolveDirective("click-outside");
      return withDirectives((openBlock(), createElementBlock("div", {
        ref: "selectRef",
        class: normalizeClass([_ctx.nsSelectV2.b(), _ctx.nsSelectV2.m(_ctx.selectSize)]),
        onClick: _cache[23] || (_cache[23] = withModifiers((...args) => _ctx.toggleMenu && _ctx.toggleMenu(...args), ["stop"])),
        onMouseenter: _cache[24] || (_cache[24] = ($event) => _ctx.states.comboBoxHovering = true),
        onMouseleave: _cache[25] || (_cache[25] = ($event) => _ctx.states.comboBoxHovering = false)
      }, [
        createVNode(_component_el_tooltip, {
          ref: "popper",
          visible: _ctx.dropdownMenuVisible,
          teleported: _ctx.teleported,
          "popper-class": [_ctx.nsSelectV2.e("popper"), _ctx.popperClass],
          "gpu-acceleration": false,
          "stop-popper-mouse-event": false,
          "popper-options": _ctx.popperOptions,
          "fallback-placements": ["bottom-start", "top-start", "right", "left"],
          effect: _ctx.effect,
          placement: "bottom-start",
          pure: "",
          transition: `${_ctx.nsSelectV2.namespace.value}-zoom-in-top`,
          trigger: "click",
          persistent: _ctx.persistent,
          onBeforeShow: _ctx.handleMenuEnter,
          onHide: _cache[22] || (_cache[22] = ($event) => _ctx.states.inputValue = _ctx.states.displayInputValue)
        }, {
          default: withCtx(() => {
            var _a2;
            return [
              createBaseVNode("div", {
                ref: "selectionRef",
                class: normalizeClass([
                  _ctx.nsSelectV2.e("wrapper"),
                  _ctx.nsSelectV2.is("focused", _ctx.states.isComposing),
                  _ctx.nsSelectV2.is("hovering", _ctx.states.comboBoxHovering),
                  _ctx.nsSelectV2.is("filterable", _ctx.filterable),
                  _ctx.nsSelectV2.is("disabled", _ctx.selectDisabled)
                ])
              }, [
                _ctx.$slots.prefix ? (openBlock(), createElementBlock("div", _hoisted_1$n, [
                  renderSlot(_ctx.$slots, "prefix")
                ])) : createCommentVNode("v-if", true),
                _ctx.multiple ? (openBlock(), createElementBlock("div", {
                  key: 1,
                  class: normalizeClass(_ctx.nsSelectV2.e("selection"))
                }, [
                  _ctx.collapseTags && _ctx.modelValue.length > 0 ? (openBlock(), createElementBlock("div", {
                    key: 0,
                    class: normalizeClass(_ctx.nsSelectV2.e("selected-item"))
                  }, [
                    createVNode(_component_el_tag, {
                      closable: !_ctx.selectDisabled && !((_a2 = _ctx.states.cachedOptions[0]) == null ? void 0 : _a2.disable),
                      size: _ctx.collapseTagSize,
                      type: "info",
                      "disable-transitions": "",
                      onClose: _cache[0] || (_cache[0] = ($event) => _ctx.deleteTag($event, _ctx.states.cachedOptions[0]))
                    }, {
                      default: withCtx(() => {
                        var _a22;
                        return [
                          createBaseVNode("span", {
                            class: normalizeClass(_ctx.nsSelectV2.e("tags-text")),
                            style: normalizeStyle({
                              maxWidth: `${_ctx.tagMaxWidth}px`
                            })
                          }, toDisplayString$1((_a22 = _ctx.states.cachedOptions[0]) == null ? void 0 : _a22.label), 7)
                        ];
                      }),
                      _: 1
                    }, 8, ["closable", "size"]),
                    _ctx.modelValue.length > 1 ? (openBlock(), createBlock(_component_el_tag, {
                      key: 0,
                      closable: false,
                      size: _ctx.collapseTagSize,
                      type: "info",
                      "disable-transitions": ""
                    }, {
                      default: withCtx(() => [
                        _ctx.collapseTagsTooltip ? (openBlock(), createBlock(_component_el_tooltip, {
                          key: 0,
                          disabled: _ctx.dropdownMenuVisible,
                          "fallback-placements": ["bottom", "top", "right", "left"],
                          effect: _ctx.effect,
                          placement: "bottom",
                          teleported: false
                        }, {
                          default: withCtx(() => [
                            createBaseVNode("span", {
                              class: normalizeClass(_ctx.nsSelectV2.e("tags-text")),
                              style: normalizeStyle({
                                maxWidth: `${_ctx.tagMaxWidth}px`
                              })
                            }, "+ " + toDisplayString$1(_ctx.modelValue.length - 1), 7)
                          ]),
                          content: withCtx(() => [
                            createBaseVNode("div", {
                              class: normalizeClass(_ctx.nsSelectV2.e("selection"))
                            }, [
                              (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.states.cachedOptions.slice(1), (selected, idx) => {
                                return openBlock(), createElementBlock("div", {
                                  key: idx,
                                  class: normalizeClass(_ctx.nsSelectV2.e("selected-item"))
                                }, [
                                  (openBlock(), createBlock(_component_el_tag, {
                                    key: _ctx.getValueKey(selected),
                                    closable: !_ctx.selectDisabled && !selected.disabled,
                                    size: _ctx.collapseTagSize,
                                    class: "in-tooltip",
                                    type: "info",
                                    "disable-transitions": "",
                                    onClose: ($event) => _ctx.deleteTag($event, selected)
                                  }, {
                                    default: withCtx(() => [
                                      createBaseVNode("span", {
                                        class: normalizeClass(_ctx.nsSelectV2.e("tags-text")),
                                        style: normalizeStyle({
                                          maxWidth: `${_ctx.tagMaxWidth}px`
                                        })
                                      }, toDisplayString$1(_ctx.getLabel(selected)), 7)
                                    ]),
                                    _: 2
                                  }, 1032, ["closable", "size", "onClose"]))
                                ], 2);
                              }), 128))
                            ], 2)
                          ]),
                          _: 1
                        }, 8, ["disabled", "effect"])) : (openBlock(), createElementBlock("span", {
                          key: 1,
                          class: normalizeClass(_ctx.nsSelectV2.e("tags-text")),
                          style: normalizeStyle({
                            maxWidth: `${_ctx.tagMaxWidth}px`
                          })
                        }, "+ " + toDisplayString$1(_ctx.modelValue.length - 1), 7))
                      ]),
                      _: 1
                    }, 8, ["size"])) : createCommentVNode("v-if", true)
                  ], 2)) : (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(_ctx.states.cachedOptions, (selected, idx) => {
                    return openBlock(), createElementBlock("div", {
                      key: idx,
                      class: normalizeClass(_ctx.nsSelectV2.e("selected-item"))
                    }, [
                      (openBlock(), createBlock(_component_el_tag, {
                        key: _ctx.getValueKey(selected),
                        closable: !_ctx.selectDisabled && !selected.disabled,
                        size: _ctx.collapseTagSize,
                        type: "info",
                        "disable-transitions": "",
                        onClose: ($event) => _ctx.deleteTag($event, selected)
                      }, {
                        default: withCtx(() => [
                          createBaseVNode("span", {
                            class: normalizeClass(_ctx.nsSelectV2.e("tags-text")),
                            style: normalizeStyle({
                              maxWidth: `${_ctx.tagMaxWidth}px`
                            })
                          }, toDisplayString$1(_ctx.getLabel(selected)), 7)
                        ]),
                        _: 2
                      }, 1032, ["closable", "size", "onClose"]))
                    ], 2);
                  }), 128)),
                  createBaseVNode("div", {
                    class: normalizeClass([
                      _ctx.nsSelectV2.e("selected-item"),
                      _ctx.nsSelectV2.e("input-wrapper")
                    ]),
                    style: normalizeStyle(_ctx.inputWrapperStyle)
                  }, [
                    withDirectives(createBaseVNode("input", {
                      id: _ctx.id,
                      ref: "inputRef",
                      autocomplete: _ctx.autocomplete,
                      "aria-autocomplete": "list",
                      "aria-haspopup": "listbox",
                      autocapitalize: "off",
                      "aria-expanded": _ctx.expanded,
                      "aria-labelledby": _ctx.label,
                      class: normalizeClass([
                        _ctx.nsSelectV2.is(_ctx.selectSize),
                        _ctx.nsSelectV2.e("combobox-input")
                      ]),
                      disabled: _ctx.disabled,
                      role: "combobox",
                      readonly: !_ctx.filterable,
                      spellcheck: "false",
                      type: "text",
                      name: _ctx.name,
                      unselectable: _ctx.expanded ? "on" : void 0,
                      "onUpdate:modelValue": _cache[1] || (_cache[1] = (...args) => _ctx.onUpdateInputValue && _ctx.onUpdateInputValue(...args)),
                      onFocus: _cache[2] || (_cache[2] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),
                      onInput: _cache[3] || (_cache[3] = (...args) => _ctx.onInput && _ctx.onInput(...args)),
                      onCompositionstart: _cache[4] || (_cache[4] = (...args) => _ctx.handleCompositionStart && _ctx.handleCompositionStart(...args)),
                      onCompositionupdate: _cache[5] || (_cache[5] = (...args) => _ctx.handleCompositionUpdate && _ctx.handleCompositionUpdate(...args)),
                      onCompositionend: _cache[6] || (_cache[6] = (...args) => _ctx.handleCompositionEnd && _ctx.handleCompositionEnd(...args)),
                      onKeydown: [
                        _cache[7] || (_cache[7] = withKeys(withModifiers(($event) => _ctx.onKeyboardNavigate("backward"), ["stop", "prevent"]), ["up"])),
                        _cache[8] || (_cache[8] = withKeys(withModifiers(($event) => _ctx.onKeyboardNavigate("forward"), ["stop", "prevent"]), ["down"])),
                        _cache[9] || (_cache[9] = withKeys(withModifiers((...args) => _ctx.onKeyboardSelect && _ctx.onKeyboardSelect(...args), ["stop", "prevent"]), ["enter"])),
                        _cache[10] || (_cache[10] = withKeys(withModifiers((...args) => _ctx.handleEsc && _ctx.handleEsc(...args), ["stop", "prevent"]), ["esc"])),
                        _cache[11] || (_cache[11] = withKeys(withModifiers((...args) => _ctx.handleDel && _ctx.handleDel(...args), ["stop"]), ["delete"]))
                      ]
                    }, null, 42, _hoisted_2$e), [
                      [_directive_model_text, _ctx.states.displayInputValue]
                    ]),
                    _ctx.filterable ? (openBlock(), createElementBlock("span", {
                      key: 0,
                      ref: "calculatorRef",
                      "aria-hidden": "true",
                      class: normalizeClass(_ctx.nsSelectV2.e("input-calculator")),
                      textContent: toDisplayString$1(_ctx.states.displayInputValue)
                    }, null, 10, _hoisted_3$5)) : createCommentVNode("v-if", true)
                  ], 6)
                ], 2)) : (openBlock(), createElementBlock(Fragment, { key: 2 }, [
                  createBaseVNode("div", {
                    class: normalizeClass([
                      _ctx.nsSelectV2.e("selected-item"),
                      _ctx.nsSelectV2.e("input-wrapper")
                    ])
                  }, [
                    withDirectives(createBaseVNode("input", {
                      id: _ctx.id,
                      ref: "inputRef",
                      "aria-autocomplete": "list",
                      "aria-haspopup": "listbox",
                      "aria-labelledby": _ctx.label,
                      "aria-expanded": _ctx.expanded,
                      autocapitalize: "off",
                      autocomplete: _ctx.autocomplete,
                      class: normalizeClass(_ctx.nsSelectV2.e("combobox-input")),
                      disabled: _ctx.disabled,
                      name: _ctx.name,
                      role: "combobox",
                      readonly: !_ctx.filterable,
                      spellcheck: "false",
                      type: "text",
                      unselectable: _ctx.expanded ? "on" : void 0,
                      onCompositionstart: _cache[12] || (_cache[12] = (...args) => _ctx.handleCompositionStart && _ctx.handleCompositionStart(...args)),
                      onCompositionupdate: _cache[13] || (_cache[13] = (...args) => _ctx.handleCompositionUpdate && _ctx.handleCompositionUpdate(...args)),
                      onCompositionend: _cache[14] || (_cache[14] = (...args) => _ctx.handleCompositionEnd && _ctx.handleCompositionEnd(...args)),
                      onFocus: _cache[15] || (_cache[15] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),
                      onInput: _cache[16] || (_cache[16] = (...args) => _ctx.onInput && _ctx.onInput(...args)),
                      onKeydown: [
                        _cache[17] || (_cache[17] = withKeys(withModifiers(($event) => _ctx.onKeyboardNavigate("backward"), ["stop", "prevent"]), ["up"])),
                        _cache[18] || (_cache[18] = withKeys(withModifiers(($event) => _ctx.onKeyboardNavigate("forward"), ["stop", "prevent"]), ["down"])),
                        _cache[19] || (_cache[19] = withKeys(withModifiers((...args) => _ctx.onKeyboardSelect && _ctx.onKeyboardSelect(...args), ["stop", "prevent"]), ["enter"])),
                        _cache[20] || (_cache[20] = withKeys(withModifiers((...args) => _ctx.handleEsc && _ctx.handleEsc(...args), ["stop", "prevent"]), ["esc"]))
                      ],
                      "onUpdate:modelValue": _cache[21] || (_cache[21] = (...args) => _ctx.onUpdateInputValue && _ctx.onUpdateInputValue(...args))
                    }, null, 42, _hoisted_4$3), [
                      [_directive_model_text, _ctx.states.displayInputValue]
                    ])
                  ], 2),
                  _ctx.filterable ? (openBlock(), createElementBlock("span", {
                    key: 0,
                    ref: "calculatorRef",
                    "aria-hidden": "true",
                    class: normalizeClass([
                      _ctx.nsSelectV2.e("selected-item"),
                      _ctx.nsSelectV2.e("input-calculator")
                    ]),
                    textContent: toDisplayString$1(_ctx.states.displayInputValue)
                  }, null, 10, _hoisted_5$2)) : createCommentVNode("v-if", true)
                ], 64)),
                _ctx.shouldShowPlaceholder ? (openBlock(), createElementBlock("span", {
                  key: 3,
                  class: normalizeClass([
                    _ctx.nsSelectV2.e("placeholder"),
                    _ctx.nsSelectV2.is("transparent", _ctx.states.isComposing || (_ctx.placeholder && _ctx.multiple ? _ctx.modelValue.length === 0 : !_ctx.hasModelValue))
                  ])
                }, toDisplayString$1(_ctx.currentPlaceholder), 3)) : createCommentVNode("v-if", true),
                createBaseVNode("span", {
                  class: normalizeClass(_ctx.nsSelectV2.e("suffix"))
                }, [
                  _ctx.iconComponent ? withDirectives((openBlock(), createBlock(_component_el_icon, {
                    key: 0,
                    class: normalizeClass([_ctx.nsSelectV2.e("caret"), _ctx.nsInput.e("icon"), _ctx.iconReverse])
                  }, {
                    default: withCtx(() => [
                      (openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent)))
                    ]),
                    _: 1
                  }, 8, ["class"])), [
                    [vShow, !_ctx.showClearBtn]
                  ]) : createCommentVNode("v-if", true),
                  _ctx.showClearBtn && _ctx.clearIcon ? (openBlock(), createBlock(_component_el_icon, {
                    key: 1,
                    class: normalizeClass([_ctx.nsSelectV2.e("caret"), _ctx.nsInput.e("icon")]),
                    onClick: withModifiers(_ctx.handleClear, ["prevent", "stop"])
                  }, {
                    default: withCtx(() => [
                      (openBlock(), createBlock(resolveDynamicComponent(_ctx.clearIcon)))
                    ]),
                    _: 1
                  }, 8, ["class", "onClick"])) : createCommentVNode("v-if", true),
                  _ctx.validateState && _ctx.validateIcon ? (openBlock(), createBlock(_component_el_icon, {
                    key: 2,
                    class: normalizeClass([_ctx.nsInput.e("icon"), _ctx.nsInput.e("validateIcon")])
                  }, {
                    default: withCtx(() => [
                      (openBlock(), createBlock(resolveDynamicComponent(_ctx.validateIcon)))
                    ]),
                    _: 1
                  }, 8, ["class"])) : createCommentVNode("v-if", true)
                ], 2)
              ], 2)
            ];
          }),
          content: withCtx(() => [
            createVNode(_component_el_select_menu, {
              ref: "menuRef",
              data: _ctx.filteredOptions,
              width: _ctx.popperSize,
              "hovering-index": _ctx.states.hoveringIndex,
              "scrollbar-always-on": _ctx.scrollbarAlwaysOn
            }, {
              default: withCtx((scope) => [
                renderSlot(_ctx.$slots, "default", normalizeProps(guardReactiveProps(scope)))
              ]),
              empty: withCtx(() => [
                renderSlot(_ctx.$slots, "empty", {}, () => [
                  createBaseVNode("p", {
                    class: normalizeClass(_ctx.nsSelectV2.e("empty"))
                  }, toDisplayString$1(_ctx.emptyText ? _ctx.emptyText : ""), 3)
                ])
              ]),
              _: 3
            }, 8, ["data", "width", "hovering-index", "scrollbar-always-on"])
          ]),
          _: 3
        }, 8, ["visible", "teleported", "popper-class", "popper-options", "effect", "transition", "persistent", "onBeforeShow"])
      ], 34)), [
        [_directive_click_outside, _ctx.handleClickOutside, _ctx.popperRef]
      ]);
    }
    var Select = /* @__PURE__ */ _export_sfc$1(_sfc_main$Z, [["render", _sfc_render$8], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/select-v2/src/select.vue"]]);
    Select.install = (app2) => {
      app2.component(Select.name, Select);
    };
    const _Select = Select;
    const ElSelectV2 = _Select;
    const skeletonProps = buildProps({
      animated: {
        type: Boolean,
        default: false
      },
      count: {
        type: Number,
        default: 1
      },
      rows: {
        type: Number,
        default: 3
      },
      loading: {
        type: Boolean,
        default: true
      },
      throttle: {
        type: Number
      }
    });
    const skeletonItemProps = buildProps({
      variant: {
        type: String,
        values: [
          "circle",
          "rect",
          "h1",
          "h3",
          "text",
          "caption",
          "p",
          "image",
          "button"
        ],
        default: "text"
      }
    });
    const __default__$O = {
      name: "ElSkeletonItem"
    };
    const _sfc_main$Y = /* @__PURE__ */ defineComponent({
      ...__default__$O,
      props: skeletonItemProps,
      setup(__props) {
        const ns2 = useNamespace("skeleton");
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            class: normalizeClass([unref(ns2).e("item"), unref(ns2).e(_ctx.variant)])
          }, [
            _ctx.variant === "image" ? (openBlock(), createBlock(unref(picture_filled_default), { key: 0 })) : createCommentVNode("v-if", true)
          ], 2);
        };
      }
    });
    var SkeletonItem = /* @__PURE__ */ _export_sfc$1(_sfc_main$Y, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/skeleton/src/skeleton-item.vue"]]);
    const __default__$N = {
      name: "ElSkeleton"
    };
    const _sfc_main$X = /* @__PURE__ */ defineComponent({
      ...__default__$N,
      props: skeletonProps,
      setup(__props, { expose }) {
        const props = __props;
        const ns2 = useNamespace("skeleton");
        const uiLoading = useThrottleRender(toRef(props, "loading"), props.throttle);
        expose({
          uiLoading
        });
        return (_ctx, _cache) => {
          return unref(uiLoading) ? (openBlock(), createElementBlock("div", mergeProps({
            key: 0,
            class: [unref(ns2).b(), unref(ns2).is("animated", _ctx.animated)]
          }, _ctx.$attrs), [
            (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.count, (i2) => {
              return openBlock(), createElementBlock(Fragment, { key: i2 }, [
                _ctx.loading ? renderSlot(_ctx.$slots, "template", { key: i2 }, () => [
                  createVNode(SkeletonItem, {
                    class: normalizeClass(unref(ns2).is("first")),
                    variant: "p"
                  }, null, 8, ["class"]),
                  (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.rows, (item) => {
                    return openBlock(), createBlock(SkeletonItem, {
                      key: item,
                      class: normalizeClass([
                        unref(ns2).e("paragraph"),
                        unref(ns2).is("last", item === _ctx.rows && _ctx.rows > 1)
                      ]),
                      variant: "p"
                    }, null, 8, ["class"]);
                  }), 128))
                ]) : createCommentVNode("v-if", true)
              ], 64);
            }), 128))
          ], 16)) : renderSlot(_ctx.$slots, "default", normalizeProps(mergeProps({ key: 1 }, _ctx.$attrs)));
        };
      }
    });
    var Skeleton = /* @__PURE__ */ _export_sfc$1(_sfc_main$X, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/skeleton/src/skeleton.vue"]]);
    const ElSkeleton = withInstall(Skeleton, {
      SkeletonItem
    });
    const ElSkeletonItem = withNoopInstall(SkeletonItem);
    const sliderProps = buildProps({
      modelValue: {
        type: definePropType([Number, Array]),
        default: 0
      },
      id: {
        type: String,
        default: void 0
      },
      min: {
        type: Number,
        default: 0
      },
      max: {
        type: Number,
        default: 100
      },
      step: {
        type: Number,
        default: 1
      },
      showInput: Boolean,
      showInputControls: {
        type: Boolean,
        default: true
      },
      size: useSizeProp,
      inputSize: useSizeProp,
      showStops: Boolean,
      showTooltip: {
        type: Boolean,
        default: true
      },
      formatTooltip: {
        type: definePropType(Function),
        default: void 0
      },
      disabled: Boolean,
      range: Boolean,
      vertical: Boolean,
      height: String,
      debounce: {
        type: Number,
        default: 300
      },
      label: {
        type: String,
        default: void 0
      },
      rangeStartLabel: {
        type: String,
        default: void 0
      },
      rangeEndLabel: {
        type: String,
        default: void 0
      },
      formatValueText: {
        type: definePropType(Function),
        default: void 0
      },
      tooltipClass: {
        type: String,
        default: void 0
      },
      placement: {
        type: String,
        values: Ee,
        default: "top"
      },
      marks: {
        type: definePropType(Object)
      },
      validateEvent: {
        type: Boolean,
        default: true
      }
    });
    const isValidValue$1 = (value) => isNumber$1(value) || isArray$6(value) && value.every(isNumber$1);
    const sliderEmits = {
      [UPDATE_MODEL_EVENT]: isValidValue$1,
      [INPUT_EVENT]: isValidValue$1,
      [CHANGE_EVENT]: isValidValue$1
    };
    const useLifecycle = (props, initData, resetSize) => {
      const sliderWrapper = ref();
      onMounted(async () => {
        if (props.range) {
          if (Array.isArray(props.modelValue)) {
            initData.firstValue = Math.max(props.min, props.modelValue[0]);
            initData.secondValue = Math.min(props.max, props.modelValue[1]);
          } else {
            initData.firstValue = props.min;
            initData.secondValue = props.max;
          }
          initData.oldValue = [initData.firstValue, initData.secondValue];
        } else {
          if (typeof props.modelValue !== "number" || Number.isNaN(props.modelValue)) {
            initData.firstValue = props.min;
          } else {
            initData.firstValue = Math.min(props.max, Math.max(props.min, props.modelValue));
          }
          initData.oldValue = initData.firstValue;
        }
        useEventListener(window, "resize", resetSize);
        await nextTick$1();
        resetSize();
      });
      return {
        sliderWrapper
      };
    };
    const useMarks = (props) => {
      return computed(() => {
        if (!props.marks) {
          return [];
        }
        const marksKeys = Object.keys(props.marks);
        return marksKeys.map(parseFloat).sort((a2, b2) => a2 - b2).filter((point) => point <= props.max && point >= props.min).map((point) => ({
          point,
          position: (point - props.min) * 100 / (props.max - props.min),
          mark: props.marks[point]
        }));
      });
    };
    const useSlide = (props, initData, emit2) => {
      const { form: elForm, formItem: elFormItem } = useFormItem();
      const slider = shallowRef();
      const firstButton = ref();
      const secondButton = ref();
      const buttonRefs = {
        firstButton,
        secondButton
      };
      const sliderDisabled = computed(() => {
        return props.disabled || (elForm == null ? void 0 : elForm.disabled) || false;
      });
      const minValue = computed(() => {
        return Math.min(initData.firstValue, initData.secondValue);
      });
      const maxValue = computed(() => {
        return Math.max(initData.firstValue, initData.secondValue);
      });
      const barSize = computed(() => {
        return props.range ? `${100 * (maxValue.value - minValue.value) / (props.max - props.min)}%` : `${100 * (initData.firstValue - props.min) / (props.max - props.min)}%`;
      });
      const barStart = computed(() => {
        return props.range ? `${100 * (minValue.value - props.min) / (props.max - props.min)}%` : "0%";
      });
      const runwayStyle = computed(() => {
        return props.vertical ? { height: props.height } : {};
      });
      const barStyle = computed(() => {
        return props.vertical ? {
          height: barSize.value,
          bottom: barStart.value
        } : {
          width: barSize.value,
          left: barStart.value
        };
      });
      const resetSize = () => {
        if (slider.value) {
          initData.sliderSize = slider.value[`client${props.vertical ? "Height" : "Width"}`];
        }
      };
      const getButtonRefByPercent = (percent) => {
        const targetValue = props.min + percent * (props.max - props.min) / 100;
        if (!props.range) {
          return firstButton;
        }
        let buttonRefName;
        if (Math.abs(minValue.value - targetValue) < Math.abs(maxValue.value - targetValue)) {
          buttonRefName = initData.firstValue < initData.secondValue ? "firstButton" : "secondButton";
        } else {
          buttonRefName = initData.firstValue > initData.secondValue ? "firstButton" : "secondButton";
        }
        return buttonRefs[buttonRefName];
      };
      const setPosition = (percent) => {
        const buttonRef = getButtonRefByPercent(percent);
        buttonRef.value.setPosition(percent);
        return buttonRef;
      };
      const setFirstValue = (firstValue) => {
        initData.firstValue = firstValue;
        _emit(props.range ? [minValue.value, maxValue.value] : firstValue);
      };
      const setSecondValue = (secondValue) => {
        initData.secondValue = secondValue;
        if (props.range) {
          _emit([minValue.value, maxValue.value]);
        }
      };
      const _emit = (val) => {
        emit2(UPDATE_MODEL_EVENT, val);
        emit2(INPUT_EVENT, val);
      };
      const emitChange = async () => {
        await nextTick$1();
        emit2(CHANGE_EVENT, props.range ? [minValue.value, maxValue.value] : props.modelValue);
      };
      const handleSliderPointerEvent = (event) => {
        var _a2, _b, _c, _d, _e, _f;
        if (sliderDisabled.value || initData.dragging)
          return;
        resetSize();
        let newPercent = 0;
        if (props.vertical) {
          const clientY = (_c = (_b = (_a2 = event.touches) == null ? void 0 : _a2.item(0)) == null ? void 0 : _b.clientY) != null ? _c : event.clientY;
          const sliderOffsetBottom = slider.value.getBoundingClientRect().bottom;
          newPercent = (sliderOffsetBottom - clientY) / initData.sliderSize * 100;
        } else {
          const clientX = (_f = (_e = (_d = event.touches) == null ? void 0 : _d.item(0)) == null ? void 0 : _e.clientX) != null ? _f : event.clientX;
          const sliderOffsetLeft = slider.value.getBoundingClientRect().left;
          newPercent = (clientX - sliderOffsetLeft) / initData.sliderSize * 100;
        }
        if (newPercent < 0 || newPercent > 100)
          return;
        return setPosition(newPercent);
      };
      const onSliderWrapperPrevent = (event) => {
        var _a2, _b;
        if (((_a2 = buttonRefs["firstButton"].value) == null ? void 0 : _a2.dragging) || ((_b = buttonRefs["secondButton"].value) == null ? void 0 : _b.dragging)) {
          event.preventDefault();
        }
      };
      const onSliderDown = async (event) => {
        const buttonRef = handleSliderPointerEvent(event);
        if (buttonRef) {
          await nextTick$1();
          buttonRef.value.onButtonDown(event);
        }
      };
      const onSliderClick = (event) => {
        const buttonRef = handleSliderPointerEvent(event);
        if (buttonRef) {
          emitChange();
        }
      };
      return {
        elFormItem,
        slider,
        firstButton,
        secondButton,
        sliderDisabled,
        minValue,
        maxValue,
        runwayStyle,
        barStyle,
        resetSize,
        setPosition,
        emitChange,
        onSliderWrapperPrevent,
        onSliderClick,
        onSliderDown,
        setFirstValue,
        setSecondValue
      };
    };
    const { left, down, right, up, home, end, pageUp, pageDown } = EVENT_CODE;
    const useTooltip = (props, formatTooltip, showTooltip) => {
      const tooltip = ref();
      const tooltipVisible = ref(false);
      const enableFormat = computed(() => {
        return formatTooltip.value instanceof Function;
      });
      const formatValue2 = computed(() => {
        return enableFormat.value && formatTooltip.value(props.modelValue) || props.modelValue;
      });
      const displayTooltip = debounce(() => {
        showTooltip.value && (tooltipVisible.value = true);
      }, 50);
      const hideTooltip = debounce(() => {
        showTooltip.value && (tooltipVisible.value = false);
      }, 50);
      return {
        tooltip,
        tooltipVisible,
        formatValue: formatValue2,
        displayTooltip,
        hideTooltip
      };
    };
    const useSliderButton = (props, initData, emit2) => {
      const {
        disabled,
        min: min2,
        max: max2,
        step,
        showTooltip,
        precision,
        sliderSize,
        formatTooltip,
        emitChange,
        resetSize,
        updateDragging
      } = inject(sliderContextKey);
      const { tooltip, tooltipVisible, formatValue: formatValue2, displayTooltip, hideTooltip } = useTooltip(props, formatTooltip, showTooltip);
      const button = ref();
      const currentPosition = computed(() => {
        return `${(props.modelValue - min2.value) / (max2.value - min2.value) * 100}%`;
      });
      const wrapperStyle = computed(() => {
        return props.vertical ? { bottom: currentPosition.value } : { left: currentPosition.value };
      });
      const handleMouseEnter = () => {
        initData.hovering = true;
        displayTooltip();
      };
      const handleMouseLeave = () => {
        initData.hovering = false;
        if (!initData.dragging) {
          hideTooltip();
        }
      };
      const onButtonDown = (event) => {
        if (disabled.value)
          return;
        event.preventDefault();
        onDragStart(event);
        window.addEventListener("mousemove", onDragging);
        window.addEventListener("touchmove", onDragging);
        window.addEventListener("mouseup", onDragEnd);
        window.addEventListener("touchend", onDragEnd);
        window.addEventListener("contextmenu", onDragEnd);
        button.value.focus();
      };
      const incrementPosition = (amount) => {
        if (disabled.value)
          return;
        initData.newPosition = Number.parseFloat(currentPosition.value) + amount / (max2.value - min2.value) * 100;
        setPosition(initData.newPosition);
        emitChange();
      };
      const onLeftKeyDown = () => {
        incrementPosition(-step.value);
      };
      const onRightKeyDown = () => {
        incrementPosition(step.value);
      };
      const onPageDownKeyDown = () => {
        incrementPosition(-step.value * 4);
      };
      const onPageUpKeyDown = () => {
        incrementPosition(step.value * 4);
      };
      const onHomeKeyDown = () => {
        if (disabled.value)
          return;
        setPosition(0);
        emitChange();
      };
      const onEndKeyDown = () => {
        if (disabled.value)
          return;
        setPosition(100);
        emitChange();
      };
      const onKeyDown = (event) => {
        let isPreventDefault = true;
        if ([left, down].includes(event.key)) {
          onLeftKeyDown();
        } else if ([right, up].includes(event.key)) {
          onRightKeyDown();
        } else if (event.key === home) {
          onHomeKeyDown();
        } else if (event.key === end) {
          onEndKeyDown();
        } else if (event.key === pageDown) {
          onPageDownKeyDown();
        } else if (event.key === pageUp) {
          onPageUpKeyDown();
        } else {
          isPreventDefault = false;
        }
        isPreventDefault && event.preventDefault();
      };
      const getClientXY2 = (event) => {
        let clientX;
        let clientY;
        if (event.type.startsWith("touch")) {
          clientY = event.touches[0].clientY;
          clientX = event.touches[0].clientX;
        } else {
          clientY = event.clientY;
          clientX = event.clientX;
        }
        return {
          clientX,
          clientY
        };
      };
      const onDragStart = (event) => {
        initData.dragging = true;
        initData.isClick = true;
        const { clientX, clientY } = getClientXY2(event);
        if (props.vertical) {
          initData.startY = clientY;
        } else {
          initData.startX = clientX;
        }
        initData.startPosition = Number.parseFloat(currentPosition.value);
        initData.newPosition = initData.startPosition;
      };
      const onDragging = (event) => {
        if (initData.dragging) {
          initData.isClick = false;
          displayTooltip();
          resetSize();
          let diff;
          const { clientX, clientY } = getClientXY2(event);
          if (props.vertical) {
            initData.currentY = clientY;
            diff = (initData.startY - initData.currentY) / sliderSize.value * 100;
          } else {
            initData.currentX = clientX;
            diff = (initData.currentX - initData.startX) / sliderSize.value * 100;
          }
          initData.newPosition = initData.startPosition + diff;
          setPosition(initData.newPosition);
        }
      };
      const onDragEnd = () => {
        if (initData.dragging) {
          setTimeout(() => {
            initData.dragging = false;
            if (!initData.hovering) {
              hideTooltip();
            }
            if (!initData.isClick) {
              setPosition(initData.newPosition);
              emitChange();
            }
          }, 0);
          window.removeEventListener("mousemove", onDragging);
          window.removeEventListener("touchmove", onDragging);
          window.removeEventListener("mouseup", onDragEnd);
          window.removeEventListener("touchend", onDragEnd);
          window.removeEventListener("contextmenu", onDragEnd);
        }
      };
      const setPosition = async (newPosition) => {
        if (newPosition === null || Number.isNaN(+newPosition))
          return;
        if (newPosition < 0) {
          newPosition = 0;
        } else if (newPosition > 100) {
          newPosition = 100;
        }
        const lengthPerStep = 100 / ((max2.value - min2.value) / step.value);
        const steps = Math.round(newPosition / lengthPerStep);
        let value = steps * lengthPerStep * (max2.value - min2.value) * 0.01 + min2.value;
        value = Number.parseFloat(value.toFixed(precision.value));
        if (value !== props.modelValue) {
          emit2(UPDATE_MODEL_EVENT, value);
        }
        if (!initData.dragging && props.modelValue !== initData.oldValue) {
          initData.oldValue = props.modelValue;
        }
        await nextTick$1();
        initData.dragging && displayTooltip();
        tooltip.value.updatePopper();
      };
      watch(() => initData.dragging, (val) => {
        updateDragging(val);
      });
      return {
        disabled,
        button,
        tooltip,
        tooltipVisible,
        showTooltip,
        wrapperStyle,
        formatValue: formatValue2,
        handleMouseEnter,
        handleMouseLeave,
        onButtonDown,
        onKeyDown,
        setPosition
      };
    };
    const useStops = (props, initData, minValue, maxValue) => {
      const stops = computed(() => {
        if (!props.showStops || props.min > props.max)
          return [];
        if (props.step === 0) {
          return [];
        }
        const stopCount = (props.max - props.min) / props.step;
        const stepWidth = 100 * props.step / (props.max - props.min);
        const result = Array.from({ length: stopCount - 1 }).map((_2, index2) => (index2 + 1) * stepWidth);
        if (props.range) {
          return result.filter((step) => {
            return step < 100 * (minValue.value - props.min) / (props.max - props.min) || step > 100 * (maxValue.value - props.min) / (props.max - props.min);
          });
        } else {
          return result.filter((step) => step > 100 * (initData.firstValue - props.min) / (props.max - props.min));
        }
      });
      const getStopStyle = (position) => {
        return props.vertical ? { bottom: `${position}%` } : { left: `${position}%` };
      };
      return {
        stops,
        getStopStyle
      };
    };
    const useWatch = (props, initData, minValue, maxValue, emit2, elFormItem) => {
      const _emit = (val) => {
        emit2(UPDATE_MODEL_EVENT, val);
        emit2(INPUT_EVENT, val);
      };
      const valueChanged = () => {
        if (props.range) {
          return ![minValue.value, maxValue.value].every((item, index2) => item === initData.oldValue[index2]);
        } else {
          return props.modelValue !== initData.oldValue;
        }
      };
      const setValues = () => {
        var _a2, _b;
        if (props.min > props.max) {
          throwError("Slider", "min should not be greater than max.");
          return;
        }
        const val = props.modelValue;
        if (props.range && Array.isArray(val)) {
          if (val[1] < props.min) {
            _emit([props.min, props.min]);
          } else if (val[0] > props.max) {
            _emit([props.max, props.max]);
          } else if (val[0] < props.min) {
            _emit([props.min, val[1]]);
          } else if (val[1] > props.max) {
            _emit([val[0], props.max]);
          } else {
            initData.firstValue = val[0];
            initData.secondValue = val[1];
            if (valueChanged()) {
              if (props.validateEvent) {
                (_a2 = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _a2.call(elFormItem, "change").catch((err) => debugWarn());
              }
              initData.oldValue = val.slice();
            }
          }
        } else if (!props.range && typeof val === "number" && !Number.isNaN(val)) {
          if (val < props.min) {
            _emit(props.min);
          } else if (val > props.max) {
            _emit(props.max);
          } else {
            initData.firstValue = val;
            if (valueChanged()) {
              if (props.validateEvent) {
                (_b = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _b.call(elFormItem, "change").catch((err) => debugWarn());
              }
              initData.oldValue = val;
            }
          }
        }
      };
      setValues();
      watch(() => initData.dragging, (val) => {
        if (!val) {
          setValues();
        }
      });
      watch(() => props.modelValue, (val, oldVal) => {
        if (initData.dragging || Array.isArray(val) && Array.isArray(oldVal) && val.every((item, index2) => item === oldVal[index2]) && initData.firstValue === val[0] && initData.secondValue === val[1]) {
          return;
        }
        setValues();
      }, {
        deep: true
      });
      watch(() => [props.min, props.max], () => {
        setValues();
      });
    };
    const sliderButtonProps = buildProps({
      modelValue: {
        type: Number,
        default: 0
      },
      vertical: Boolean,
      tooltipClass: String,
      placement: {
        type: String,
        values: Ee,
        default: "top"
      }
    });
    const sliderButtonEmits = {
      [UPDATE_MODEL_EVENT]: (value) => isNumber$1(value)
    };
    const _hoisted_1$m = ["tabindex"];
    const __default__$M = {
      name: "ElSliderButton"
    };
    const _sfc_main$W = /* @__PURE__ */ defineComponent({
      ...__default__$M,
      props: sliderButtonProps,
      emits: sliderButtonEmits,
      setup(__props, { expose, emit: emit2 }) {
        const props = __props;
        const ns2 = useNamespace("slider");
        const initData = reactive({
          hovering: false,
          dragging: false,
          isClick: false,
          startX: 0,
          currentX: 0,
          startY: 0,
          currentY: 0,
          startPosition: 0,
          newPosition: 0,
          oldValue: props.modelValue
        });
        const {
          disabled,
          button,
          tooltip,
          showTooltip,
          tooltipVisible,
          wrapperStyle,
          formatValue: formatValue2,
          handleMouseEnter,
          handleMouseLeave,
          onButtonDown,
          onKeyDown,
          setPosition
        } = useSliderButton(props, initData, emit2);
        const { hovering, dragging } = toRefs(initData);
        expose({
          onButtonDown,
          onKeyDown,
          setPosition,
          hovering,
          dragging
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            ref_key: "button",
            ref: button,
            class: normalizeClass([unref(ns2).e("button-wrapper"), { hover: unref(hovering), dragging: unref(dragging) }]),
            style: normalizeStyle(unref(wrapperStyle)),
            tabindex: unref(disabled) ? -1 : 0,
            onMouseenter: _cache[0] || (_cache[0] = (...args) => unref(handleMouseEnter) && unref(handleMouseEnter)(...args)),
            onMouseleave: _cache[1] || (_cache[1] = (...args) => unref(handleMouseLeave) && unref(handleMouseLeave)(...args)),
            onMousedown: _cache[2] || (_cache[2] = (...args) => unref(onButtonDown) && unref(onButtonDown)(...args)),
            onTouchstart: _cache[3] || (_cache[3] = (...args) => unref(onButtonDown) && unref(onButtonDown)(...args)),
            onFocus: _cache[4] || (_cache[4] = (...args) => unref(handleMouseEnter) && unref(handleMouseEnter)(...args)),
            onBlur: _cache[5] || (_cache[5] = (...args) => unref(handleMouseLeave) && unref(handleMouseLeave)(...args)),
            onKeydown: _cache[6] || (_cache[6] = (...args) => unref(onKeyDown) && unref(onKeyDown)(...args))
          }, [
            createVNode(unref(ElTooltip), {
              ref_key: "tooltip",
              ref: tooltip,
              visible: unref(tooltipVisible),
              placement: _ctx.placement,
              "fallback-placements": ["top", "bottom", "right", "left"],
              "stop-popper-mouse-event": false,
              "popper-class": _ctx.tooltipClass,
              disabled: !unref(showTooltip),
              persistent: ""
            }, {
              content: withCtx(() => [
                createBaseVNode("span", null, toDisplayString$1(unref(formatValue2)), 1)
              ]),
              default: withCtx(() => [
                createBaseVNode("div", {
                  class: normalizeClass([unref(ns2).e("button"), { hover: unref(hovering), dragging: unref(dragging) }])
                }, null, 2)
              ]),
              _: 1
            }, 8, ["visible", "placement", "popper-class", "disabled"])
          ], 46, _hoisted_1$m);
        };
      }
    });
    var SliderButton = /* @__PURE__ */ _export_sfc$1(_sfc_main$W, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/slider/src/button.vue"]]);
    const sliderMarkerProps = buildProps({
      mark: {
        type: definePropType([String, Object]),
        default: void 0
      }
    });
    var SliderMarker = defineComponent({
      name: "ElSliderMarker",
      props: sliderMarkerProps,
      setup(props) {
        const ns2 = useNamespace("slider");
        const label = computed(() => {
          return isString$3(props.mark) ? props.mark : props.mark.label;
        });
        const style2 = computed(() => isString$3(props.mark) ? void 0 : props.mark.style);
        return () => h$2("div", {
          class: ns2.e("marks-text"),
          style: style2.value
        }, label.value);
      }
    });
    const _hoisted_1$l = ["id", "role", "aria-label", "aria-labelledby"];
    const _hoisted_2$d = { key: 1 };
    const __default__$L = {
      name: "ElSlider"
    };
    const _sfc_main$V = /* @__PURE__ */ defineComponent({
      ...__default__$L,
      props: sliderProps,
      emits: sliderEmits,
      setup(__props, { expose, emit: emit2 }) {
        const props = __props;
        const ns2 = useNamespace("slider");
        const { t } = useLocale();
        const initData = reactive({
          firstValue: 0,
          secondValue: 0,
          oldValue: 0,
          dragging: false,
          sliderSize: 1
        });
        const {
          elFormItem,
          slider,
          firstButton,
          secondButton,
          sliderDisabled,
          minValue,
          maxValue,
          runwayStyle,
          barStyle,
          resetSize,
          emitChange,
          onSliderWrapperPrevent,
          onSliderClick,
          onSliderDown,
          setFirstValue,
          setSecondValue
        } = useSlide(props, initData, emit2);
        const { stops, getStopStyle } = useStops(props, initData, minValue, maxValue);
        const { inputId, isLabeledByFormItem } = useFormItemInputId(props, {
          formItemContext: elFormItem
        });
        const sliderWrapperSize = useSize();
        const sliderInputSize = computed(() => props.inputSize || sliderWrapperSize.value);
        const groupLabel = computed(() => {
          return props.label || t("el.slider.defaultLabel", {
            min: props.min,
            max: props.max
          });
        });
        const firstButtonLabel = computed(() => {
          if (props.range) {
            return props.rangeStartLabel || t("el.slider.defaultRangeStartLabel");
          } else {
            return groupLabel.value;
          }
        });
        const firstValueText = computed(() => {
          return props.formatValueText ? props.formatValueText(firstValue.value) : `${firstValue.value}`;
        });
        const secondButtonLabel = computed(() => {
          return props.rangeEndLabel || t("el.slider.defaultRangeEndLabel");
        });
        const secondValueText = computed(() => {
          return props.formatValueText ? props.formatValueText(secondValue.value) : `${secondValue.value}`;
        });
        const sliderKls = computed(() => [
          ns2.b(),
          ns2.m(sliderWrapperSize.value),
          ns2.is("vertical", props.vertical),
          { [ns2.m("with-input")]: props.showInput }
        ]);
        const markList = useMarks(props);
        useWatch(props, initData, minValue, maxValue, emit2, elFormItem);
        const precision = computed(() => {
          const precisions = [props.min, props.max, props.step].map((item) => {
            const decimal = `${item}`.split(".")[1];
            return decimal ? decimal.length : 0;
          });
          return Math.max.apply(null, precisions);
        });
        const { sliderWrapper } = useLifecycle(props, initData, resetSize);
        const { firstValue, secondValue, sliderSize } = toRefs(initData);
        const updateDragging = (val) => {
          initData.dragging = val;
        };
        provide(sliderContextKey, {
          ...toRefs(props),
          sliderSize,
          disabled: sliderDisabled,
          precision,
          emitChange,
          resetSize,
          updateDragging
        });
        expose({
          onSliderClick
        });
        return (_ctx, _cache) => {
          var _a2, _b;
          return openBlock(), createElementBlock("div", {
            id: _ctx.range ? unref(inputId) : void 0,
            ref_key: "sliderWrapper",
            ref: sliderWrapper,
            class: normalizeClass(unref(sliderKls)),
            role: _ctx.range ? "group" : void 0,
            "aria-label": _ctx.range && !unref(isLabeledByFormItem) ? unref(groupLabel) : void 0,
            "aria-labelledby": _ctx.range && unref(isLabeledByFormItem) ? (_a2 = unref(elFormItem)) == null ? void 0 : _a2.labelId : void 0,
            onTouchstart: _cache[2] || (_cache[2] = (...args) => unref(onSliderWrapperPrevent) && unref(onSliderWrapperPrevent)(...args)),
            onTouchmove: _cache[3] || (_cache[3] = (...args) => unref(onSliderWrapperPrevent) && unref(onSliderWrapperPrevent)(...args))
          }, [
            createBaseVNode("div", {
              ref_key: "slider",
              ref: slider,
              class: normalizeClass([
                unref(ns2).e("runway"),
                { "show-input": _ctx.showInput && !_ctx.range },
                unref(ns2).is("disabled", unref(sliderDisabled))
              ]),
              style: normalizeStyle(unref(runwayStyle)),
              onMousedown: _cache[0] || (_cache[0] = (...args) => unref(onSliderDown) && unref(onSliderDown)(...args)),
              onTouchstart: _cache[1] || (_cache[1] = (...args) => unref(onSliderDown) && unref(onSliderDown)(...args))
            }, [
              createBaseVNode("div", {
                class: normalizeClass(unref(ns2).e("bar")),
                style: normalizeStyle(unref(barStyle))
              }, null, 6),
              createVNode(SliderButton, {
                id: !_ctx.range ? unref(inputId) : void 0,
                ref_key: "firstButton",
                ref: firstButton,
                "model-value": unref(firstValue),
                vertical: _ctx.vertical,
                "tooltip-class": _ctx.tooltipClass,
                placement: _ctx.placement,
                role: "slider",
                "aria-label": _ctx.range || !unref(isLabeledByFormItem) ? unref(firstButtonLabel) : void 0,
                "aria-labelledby": !_ctx.range && unref(isLabeledByFormItem) ? (_b = unref(elFormItem)) == null ? void 0 : _b.labelId : void 0,
                "aria-valuemin": _ctx.min,
                "aria-valuemax": _ctx.range ? unref(secondValue) : _ctx.max,
                "aria-valuenow": unref(firstValue),
                "aria-valuetext": unref(firstValueText),
                "aria-orientation": _ctx.vertical ? "vertical" : "horizontal",
                "aria-disabled": unref(sliderDisabled),
                "onUpdate:modelValue": unref(setFirstValue)
              }, null, 8, ["id", "model-value", "vertical", "tooltip-class", "placement", "aria-label", "aria-labelledby", "aria-valuemin", "aria-valuemax", "aria-valuenow", "aria-valuetext", "aria-orientation", "aria-disabled", "onUpdate:modelValue"]),
              _ctx.range ? (openBlock(), createBlock(SliderButton, {
                key: 0,
                ref_key: "secondButton",
                ref: secondButton,
                "model-value": unref(secondValue),
                vertical: _ctx.vertical,
                "tooltip-class": _ctx.tooltipClass,
                placement: _ctx.placement,
                role: "slider",
                "aria-label": unref(secondButtonLabel),
                "aria-valuemin": unref(firstValue),
                "aria-valuemax": _ctx.max,
                "aria-valuenow": unref(secondValue),
                "aria-valuetext": unref(secondValueText),
                "aria-orientation": _ctx.vertical ? "vertical" : "horizontal",
                "aria-disabled": unref(sliderDisabled),
                "onUpdate:modelValue": unref(setSecondValue)
              }, null, 8, ["model-value", "vertical", "tooltip-class", "placement", "aria-label", "aria-valuemin", "aria-valuemax", "aria-valuenow", "aria-valuetext", "aria-orientation", "aria-disabled", "onUpdate:modelValue"])) : createCommentVNode("v-if", true),
              _ctx.showStops ? (openBlock(), createElementBlock("div", _hoisted_2$d, [
                (openBlock(true), createElementBlock(Fragment, null, renderList(unref(stops), (item, key) => {
                  return openBlock(), createElementBlock("div", {
                    key,
                    class: normalizeClass(unref(ns2).e("stop")),
                    style: normalizeStyle(unref(getStopStyle)(item))
                  }, null, 6);
                }), 128))
              ])) : createCommentVNode("v-if", true),
              unref(markList).length > 0 ? (openBlock(), createElementBlock(Fragment, { key: 2 }, [
                createBaseVNode("div", null, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList(unref(markList), (item, key) => {
                    return openBlock(), createElementBlock("div", {
                      key,
                      style: normalizeStyle(unref(getStopStyle)(item.position)),
                      class: normalizeClass([unref(ns2).e("stop"), unref(ns2).e("marks-stop")])
                    }, null, 6);
                  }), 128))
                ]),
                createBaseVNode("div", {
                  class: normalizeClass(unref(ns2).e("marks"))
                }, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList(unref(markList), (item, key) => {
                    return openBlock(), createBlock(unref(SliderMarker), {
                      key,
                      mark: item.mark,
                      style: normalizeStyle(unref(getStopStyle)(item.position))
                    }, null, 8, ["mark", "style"]);
                  }), 128))
                ], 2)
              ], 64)) : createCommentVNode("v-if", true)
            ], 38),
            _ctx.showInput && !_ctx.range ? (openBlock(), createBlock(unref(ElInputNumber), {
              key: 0,
              ref: "input",
              "model-value": unref(firstValue),
              class: normalizeClass(unref(ns2).e("input")),
              step: _ctx.step,
              disabled: unref(sliderDisabled),
              controls: _ctx.showInputControls,
              min: _ctx.min,
              max: _ctx.max,
              debounce: _ctx.debounce,
              size: unref(sliderInputSize),
              "onUpdate:modelValue": unref(setFirstValue),
              onChange: unref(emitChange)
            }, null, 8, ["model-value", "class", "step", "disabled", "controls", "min", "max", "debounce", "size", "onUpdate:modelValue", "onChange"])) : createCommentVNode("v-if", true)
          ], 42, _hoisted_1$l);
        };
      }
    });
    var Slider = /* @__PURE__ */ _export_sfc$1(_sfc_main$V, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/slider/src/slider.vue"]]);
    const ElSlider = withInstall(Slider);
    const spaceItemProps = buildProps({
      prefixCls: {
        type: String
      }
    });
    const SpaceItem = defineComponent({
      name: "ElSpaceItem",
      props: spaceItemProps,
      setup(props, { slots }) {
        const ns2 = useNamespace("space");
        const classes = computed(() => `${props.prefixCls || ns2.b()}__item`);
        return () => h$2("div", { class: classes.value }, renderSlot(slots, "default"));
      }
    });
    const SIZE_MAP = {
      small: 8,
      default: 12,
      large: 16
    };
    function useSpace(props) {
      const ns2 = useNamespace("space");
      const classes = computed(() => [ns2.b(), ns2.m(props.direction), props.class]);
      const horizontalSize = ref(0);
      const verticalSize = ref(0);
      const containerStyle = computed(() => {
        const wrapKls = props.wrap || props.fill ? { flexWrap: "wrap", marginBottom: `-${verticalSize.value}px` } : {};
        const alignment = {
          alignItems: props.alignment
        };
        return [wrapKls, alignment, props.style];
      });
      const itemStyle = computed(() => {
        const itemBaseStyle = {
          paddingBottom: `${verticalSize.value}px`,
          marginRight: `${horizontalSize.value}px`
        };
        const fillStyle = props.fill ? { flexGrow: 1, minWidth: `${props.fillRatio}%` } : {};
        return [itemBaseStyle, fillStyle];
      });
      watchEffect(() => {
        const { size: size2 = "small", wrap, direction: dir, fill } = props;
        if (isArray$6(size2)) {
          const [h2 = 0, v2 = 0] = size2;
          horizontalSize.value = h2;
          verticalSize.value = v2;
        } else {
          let val;
          if (isNumber$1(size2)) {
            val = size2;
          } else {
            val = SIZE_MAP[size2 || "small"] || SIZE_MAP.small;
          }
          if ((wrap || fill) && dir === "horizontal") {
            horizontalSize.value = verticalSize.value = val;
          } else {
            if (dir === "horizontal") {
              horizontalSize.value = val;
              verticalSize.value = 0;
            } else {
              verticalSize.value = val;
              horizontalSize.value = 0;
            }
          }
        }
      });
      return {
        classes,
        containerStyle,
        itemStyle
      };
    }
    const spaceProps = buildProps({
      direction: {
        type: String,
        values: ["horizontal", "vertical"],
        default: "horizontal"
      },
      class: {
        type: definePropType([
          String,
          Object,
          Array
        ]),
        default: ""
      },
      style: {
        type: definePropType([String, Array, Object]),
        default: ""
      },
      alignment: {
        type: definePropType(String),
        default: "center"
      },
      prefixCls: {
        type: String
      },
      spacer: {
        type: definePropType([Object, String, Number, Array]),
        default: null,
        validator: (val) => isVNode(val) || isNumber$1(val) || isString$3(val)
      },
      wrap: Boolean,
      fill: Boolean,
      fillRatio: {
        type: Number,
        default: 100
      },
      size: {
        type: [String, Array, Number],
        values: componentSizes,
        validator: (val) => {
          return isNumber$1(val) || isArray$6(val) && val.length === 2 && val.every(isNumber$1);
        }
      }
    });
    var Space = defineComponent({
      name: "ElSpace",
      props: spaceProps,
      setup(props, { slots }) {
        const { classes, containerStyle, itemStyle } = useSpace(props);
        return () => {
          var _a2;
          const { spacer, prefixCls, direction: direction2 } = props;
          const children = renderSlot(slots, "default", { key: 0 }, () => []);
          if (((_a2 = children.children) != null ? _a2 : []).length === 0)
            return null;
          if (isArray$6(children.children)) {
            let extractedChildren = [];
            children.children.forEach((child, loopKey) => {
              if (isFragment(child)) {
                if (isArray$6(child.children)) {
                  child.children.forEach((nested, key) => {
                    extractedChildren.push(createVNode(SpaceItem, {
                      style: itemStyle.value,
                      prefixCls,
                      key: `nested-${key}`
                    }, {
                      default: () => [nested]
                    }, PatchFlags.PROPS | PatchFlags.STYLE, ["style", "prefixCls"]));
                  });
                }
              } else if (isValidElementNode(child)) {
                extractedChildren.push(createVNode(SpaceItem, {
                  style: itemStyle.value,
                  prefixCls,
                  key: `LoopKey${loopKey}`
                }, {
                  default: () => [child]
                }, PatchFlags.PROPS | PatchFlags.STYLE, ["style", "prefixCls"]));
              }
            });
            if (spacer) {
              const len = extractedChildren.length - 1;
              extractedChildren = extractedChildren.reduce((acc, child, idx) => {
                const children2 = [...acc, child];
                if (idx !== len) {
                  children2.push(createVNode("span", {
                    style: [
                      itemStyle.value,
                      direction2 === "vertical" ? "width: 100%" : null
                    ],
                    key: idx
                  }, [
                    isVNode(spacer) ? spacer : createTextVNode(spacer, PatchFlags.TEXT)
                  ], PatchFlags.STYLE));
                }
                return children2;
              }, []);
            }
            return createVNode("div", {
              class: classes.value,
              style: containerStyle.value
            }, extractedChildren, PatchFlags.STYLE | PatchFlags.CLASS);
          }
          return children.children;
        };
      }
    });
    const ElSpace = withInstall(Space);
    const stepsProps = buildProps({
      space: {
        type: [Number, String],
        default: ""
      },
      active: {
        type: Number,
        default: 0
      },
      direction: {
        type: String,
        default: "horizontal",
        values: ["horizontal", "vertical"]
      },
      alignCenter: {
        type: Boolean
      },
      simple: {
        type: Boolean
      },
      finishStatus: {
        type: String,
        values: ["wait", "process", "finish", "error", "success"],
        default: "finish"
      },
      processStatus: {
        type: String,
        values: ["wait", "process", "finish", "error", "success"],
        default: "process"
      }
    });
    const stepsEmits = {
      [CHANGE_EVENT]: (newVal, oldVal) => [newVal, oldVal].every(isNumber$1)
    };
    const __default__$K = {
      name: "ElSteps"
    };
    const _sfc_main$U = /* @__PURE__ */ defineComponent({
      ...__default__$K,
      props: stepsProps,
      emits: stepsEmits,
      setup(__props, { emit: emit2 }) {
        const props = __props;
        const ns2 = useNamespace("steps");
        const steps = ref([]);
        watch(steps, () => {
          steps.value.forEach((instance, index2) => {
            instance.setIndex(index2);
          });
        });
        provide("ElSteps", { props, steps });
        watch(() => props.active, (newVal, oldVal) => {
          emit2(CHANGE_EVENT, newVal, oldVal);
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            class: normalizeClass([unref(ns2).b(), unref(ns2).m(_ctx.simple ? "simple" : _ctx.direction)])
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 2);
        };
      }
    });
    var Steps = /* @__PURE__ */ _export_sfc$1(_sfc_main$U, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/steps/src/steps.vue"]]);
    const stepProps = buildProps({
      title: {
        type: String,
        default: ""
      },
      icon: {
        type: iconPropType
      },
      description: {
        type: String,
        default: ""
      },
      status: {
        type: String,
        values: ["", "wait", "process", "finish", "error", "success"],
        default: ""
      }
    });
    const __default__$J = {
      name: "ElStep"
    };
    const _sfc_main$T = defineComponent({
      ...__default__$J,
      props: stepProps,
      setup(__props) {
        const props = __props;
        const ns2 = useNamespace("step");
        const index2 = ref(-1);
        const lineStyle = ref({});
        const internalStatus = ref("");
        const parent = inject("ElSteps");
        const currentInstance2 = getCurrentInstance();
        onMounted(() => {
          watch([
            () => parent.props.active,
            () => parent.props.processStatus,
            () => parent.props.finishStatus
          ], ([active]) => {
            updateStatus(active);
          }, { immediate: true });
        });
        onBeforeUnmount(() => {
          parent.steps.value = parent.steps.value.filter((instance) => instance.uid !== (currentInstance2 == null ? void 0 : currentInstance2.uid));
        });
        const currentStatus = computed(() => {
          return props.status || internalStatus.value;
        });
        const prevStatus = computed(() => {
          const prevStep = parent.steps.value[index2.value - 1];
          return prevStep ? prevStep.currentStatus : "wait";
        });
        const isCenter = computed(() => {
          return parent.props.alignCenter;
        });
        const isVertical = computed(() => {
          return parent.props.direction === "vertical";
        });
        const isSimple = computed(() => {
          return parent.props.simple;
        });
        const stepsCount = computed(() => {
          return parent.steps.value.length;
        });
        const isLast = computed(() => {
          var _a2;
          return ((_a2 = parent.steps.value[stepsCount.value - 1]) == null ? void 0 : _a2.uid) === (currentInstance2 == null ? void 0 : currentInstance2.uid);
        });
        const space = computed(() => {
          return isSimple.value ? "" : parent.props.space;
        });
        const style2 = computed(() => {
          const style22 = {
            flexBasis: typeof space.value === "number" ? `${space.value}px` : space.value ? space.value : `${100 / (stepsCount.value - (isCenter.value ? 0 : 1))}%`
          };
          if (isVertical.value)
            return style22;
          if (isLast.value) {
            style22.maxWidth = `${100 / stepsCount.value}%`;
          }
          return style22;
        });
        const setIndex = (val) => {
          index2.value = val;
        };
        const calcProgress = (status) => {
          let step = 100;
          const style22 = {};
          style22.transitionDelay = `${150 * index2.value}ms`;
          if (status === parent.props.processStatus) {
            step = 0;
          } else if (status === "wait") {
            step = 0;
            style22.transitionDelay = `${-150 * index2.value}ms`;
          }
          style22.borderWidth = step && !isSimple.value ? "1px" : 0;
          style22[parent.props.direction === "vertical" ? "height" : "width"] = `${step}%`;
          lineStyle.value = style22;
        };
        const updateStatus = (activeIndex) => {
          if (activeIndex > index2.value) {
            internalStatus.value = parent.props.finishStatus;
          } else if (activeIndex === index2.value && prevStatus.value !== "error") {
            internalStatus.value = parent.props.processStatus;
          } else {
            internalStatus.value = "wait";
          }
          const prevChild = parent.steps.value[stepsCount.value - 1];
          if (prevChild)
            prevChild.calcProgress(internalStatus.value);
        };
        const stepItemState = reactive({
          uid: computed(() => currentInstance2 == null ? void 0 : currentInstance2.uid),
          currentStatus,
          setIndex,
          calcProgress
        });
        parent.steps.value = [...parent.steps.value, stepItemState];
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            style: normalizeStyle(unref(style2)),
            class: normalizeClass([
              unref(ns2).b(),
              unref(ns2).is(unref(isSimple) ? "simple" : unref(parent).props.direction),
              unref(ns2).is("flex", unref(isLast) && !unref(space) && !unref(isCenter)),
              unref(ns2).is("center", unref(isCenter) && !unref(isVertical) && !unref(isSimple))
            ])
          }, [
            createCommentVNode(" icon & line "),
            createBaseVNode("div", {
              class: normalizeClass([unref(ns2).e("head"), unref(ns2).is(unref(currentStatus))])
            }, [
              !unref(isSimple) ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(unref(ns2).e("line"))
              }, [
                createBaseVNode("i", {
                  class: normalizeClass(unref(ns2).e("line-inner")),
                  style: normalizeStyle(lineStyle.value)
                }, null, 6)
              ], 2)) : createCommentVNode("v-if", true),
              createBaseVNode("div", {
                class: normalizeClass([unref(ns2).e("icon"), unref(ns2).is(_ctx.icon || _ctx.$slots.icon ? "icon" : "text")])
              }, [
                unref(currentStatus) !== "success" && unref(currentStatus) !== "error" ? renderSlot(_ctx.$slots, "icon", { key: 0 }, () => [
                  _ctx.icon ? (openBlock(), createBlock(unref(ElIcon), {
                    key: 0,
                    class: normalizeClass(unref(ns2).e("icon-inner"))
                  }, {
                    default: withCtx(() => [
                      (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))
                    ]),
                    _: 1
                  }, 8, ["class"])) : createCommentVNode("v-if", true),
                  !_ctx.icon && !unref(isSimple) ? (openBlock(), createElementBlock("div", {
                    key: 1,
                    class: normalizeClass(unref(ns2).e("icon-inner"))
                  }, toDisplayString$1(index2.value + 1), 3)) : createCommentVNode("v-if", true)
                ]) : (openBlock(), createBlock(unref(ElIcon), {
                  key: 1,
                  class: normalizeClass([unref(ns2).e("icon-inner"), unref(ns2).is("status")])
                }, {
                  default: withCtx(() => [
                    unref(currentStatus) === "success" ? (openBlock(), createBlock(unref(check_default), { key: 0 })) : (openBlock(), createBlock(unref(close_default), { key: 1 }))
                  ]),
                  _: 1
                }, 8, ["class"]))
              ], 2)
            ], 2),
            createCommentVNode(" title & description "),
            createBaseVNode("div", {
              class: normalizeClass(unref(ns2).e("main"))
            }, [
              createBaseVNode("div", {
                class: normalizeClass([unref(ns2).e("title"), unref(ns2).is(unref(currentStatus))])
              }, [
                renderSlot(_ctx.$slots, "title", {}, () => [
                  createTextVNode(toDisplayString$1(_ctx.title), 1)
                ])
              ], 2),
              unref(isSimple) ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(unref(ns2).e("arrow"))
              }, null, 2)) : (openBlock(), createElementBlock("div", {
                key: 1,
                class: normalizeClass([unref(ns2).e("description"), unref(ns2).is(unref(currentStatus))])
              }, [
                renderSlot(_ctx.$slots, "description", {}, () => [
                  createTextVNode(toDisplayString$1(_ctx.description), 1)
                ])
              ], 2))
            ], 2)
          ], 6);
        };
      }
    });
    var Step = /* @__PURE__ */ _export_sfc$1(_sfc_main$T, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/steps/src/item.vue"]]);
    const ElSteps = withInstall(Steps, {
      Step
    });
    const ElStep = withNoopInstall(Step);
    const switchProps = buildProps({
      modelValue: {
        type: [Boolean, String, Number],
        default: false
      },
      value: {
        type: [Boolean, String, Number],
        default: false
      },
      disabled: {
        type: Boolean,
        default: false
      },
      width: {
        type: [String, Number],
        default: ""
      },
      inlinePrompt: {
        type: Boolean,
        default: false
      },
      activeIcon: {
        type: iconPropType,
        default: ""
      },
      inactiveIcon: {
        type: iconPropType,
        default: ""
      },
      activeText: {
        type: String,
        default: ""
      },
      inactiveText: {
        type: String,
        default: ""
      },
      activeColor: {
        type: String,
        default: ""
      },
      inactiveColor: {
        type: String,
        default: ""
      },
      borderColor: {
        type: String,
        default: ""
      },
      activeValue: {
        type: [Boolean, String, Number],
        default: true
      },
      inactiveValue: {
        type: [Boolean, String, Number],
        default: false
      },
      name: {
        type: String,
        default: ""
      },
      validateEvent: {
        type: Boolean,
        default: true
      },
      id: String,
      loading: {
        type: Boolean,
        default: false
      },
      beforeChange: {
        type: definePropType(Function)
      },
      size: {
        type: String,
        validator: isValidComponentSize
      },
      tabindex: {
        type: [String, Number]
      }
    });
    const switchEmits = {
      [UPDATE_MODEL_EVENT]: (val) => isBoolean$1(val) || isString$3(val) || isNumber$1(val),
      [CHANGE_EVENT]: (val) => isBoolean$1(val) || isString$3(val) || isNumber$1(val),
      [INPUT_EVENT]: (val) => isBoolean$1(val) || isString$3(val) || isNumber$1(val)
    };
    const _hoisted_1$k = ["onClick"];
    const _hoisted_2$c = ["id", "aria-checked", "aria-disabled", "name", "true-value", "false-value", "disabled", "tabindex", "onKeydown"];
    const _hoisted_3$4 = ["aria-hidden"];
    const _hoisted_4$2 = ["aria-hidden"];
    const _hoisted_5$1 = ["aria-hidden"];
    const _hoisted_6 = ["aria-hidden"];
    const __default__$I = {
      name: "ElSwitch"
    };
    const _sfc_main$S = /* @__PURE__ */ defineComponent({
      ...__default__$I,
      props: switchProps,
      emits: switchEmits,
      setup(__props, { expose, emit: emit2 }) {
        const props = __props;
        const COMPONENT_NAME2 = "ElSwitch";
        const vm = getCurrentInstance();
        const { formItem } = useFormItem();
        const switchSize = useSize();
        const ns2 = useNamespace("switch");
        useDeprecated({
          from: '"value"',
          replacement: '"model-value" or "v-model"',
          scope: COMPONENT_NAME2,
          version: "2.3.0",
          ref: "https://element-plus.org/en-US/component/switch.html#attributes",
          type: "Attribute"
        }, computed(() => {
          var _a2;
          return !!((_a2 = vm.vnode.props) == null ? void 0 : _a2.value);
        }));
        const { inputId } = useFormItemInputId(props, {
          formItemContext: formItem
        });
        const switchDisabled = useDisabled$1(computed(() => props.loading));
        const isControlled = ref(props.modelValue !== false);
        const input = ref();
        const core2 = ref();
        const switchKls = computed(() => [
          ns2.b(),
          ns2.m(switchSize.value),
          ns2.is("disabled", switchDisabled.value),
          ns2.is("checked", checked2.value)
        ]);
        const coreStyle = computed(() => ({
          width: addUnit(props.width)
        }));
        watch(() => props.modelValue, () => {
          isControlled.value = true;
        });
        watch(() => props.value, () => {
          isControlled.value = false;
        });
        const actualValue = computed(() => {
          return isControlled.value ? props.modelValue : props.value;
        });
        const checked2 = computed(() => actualValue.value === props.activeValue);
        if (![props.activeValue, props.inactiveValue].includes(actualValue.value)) {
          emit2(UPDATE_MODEL_EVENT, props.inactiveValue);
          emit2(CHANGE_EVENT, props.inactiveValue);
          emit2(INPUT_EVENT, props.inactiveValue);
        }
        watch(checked2, (val) => {
          var _a2;
          input.value.checked = val;
          if (props.validateEvent) {
            (_a2 = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a2.call(formItem, "change").catch((err) => debugWarn());
          }
        });
        const handleChange = () => {
          const val = checked2.value ? props.inactiveValue : props.activeValue;
          emit2(UPDATE_MODEL_EVENT, val);
          emit2(CHANGE_EVENT, val);
          emit2(INPUT_EVENT, val);
          nextTick$1(() => {
            input.value.checked = checked2.value;
          });
        };
        const switchValue = () => {
          if (switchDisabled.value)
            return;
          const { beforeChange } = props;
          if (!beforeChange) {
            handleChange();
            return;
          }
          const shouldChange = beforeChange();
          const isPromiseOrBool = [
            isPromise$1(shouldChange),
            isBoolean$1(shouldChange)
          ].includes(true);
          if (!isPromiseOrBool) {
            throwError(COMPONENT_NAME2, "beforeChange must return type `Promise<boolean>` or `boolean`");
          }
          if (isPromise$1(shouldChange)) {
            shouldChange.then((result) => {
              if (result) {
                handleChange();
              }
            }).catch((e2) => {
            });
          } else if (shouldChange) {
            handleChange();
          }
        };
        const styles = computed(() => {
          return ns2.cssVarBlock({
            ...props.activeColor ? { "on-color": props.activeColor } : null,
            ...props.inactiveColor ? { "off-color": props.inactiveColor } : null,
            ...props.borderColor ? { "border-color": props.borderColor } : null
          });
        });
        const focus = () => {
          var _a2, _b;
          (_b = (_a2 = input.value) == null ? void 0 : _a2.focus) == null ? void 0 : _b.call(_a2);
        };
        onMounted(() => {
          input.value.checked = checked2.value;
        });
        expose({
          focus
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            class: normalizeClass(unref(switchKls)),
            style: normalizeStyle(unref(styles)),
            onClick: withModifiers(switchValue, ["prevent"])
          }, [
            createBaseVNode("input", {
              id: unref(inputId),
              ref_key: "input",
              ref: input,
              class: normalizeClass(unref(ns2).e("input")),
              type: "checkbox",
              role: "switch",
              "aria-checked": unref(checked2),
              "aria-disabled": unref(switchDisabled),
              name: _ctx.name,
              "true-value": _ctx.activeValue,
              "false-value": _ctx.inactiveValue,
              disabled: unref(switchDisabled),
              tabindex: _ctx.tabindex,
              onChange: handleChange,
              onKeydown: withKeys(switchValue, ["enter"])
            }, null, 42, _hoisted_2$c),
            !_ctx.inlinePrompt && (_ctx.inactiveIcon || _ctx.inactiveText) ? (openBlock(), createElementBlock("span", {
              key: 0,
              class: normalizeClass([
                unref(ns2).e("label"),
                unref(ns2).em("label", "left"),
                unref(ns2).is("active", !unref(checked2))
              ])
            }, [
              _ctx.inactiveIcon ? (openBlock(), createBlock(unref(ElIcon), { key: 0 }, {
                default: withCtx(() => [
                  (openBlock(), createBlock(resolveDynamicComponent(_ctx.inactiveIcon)))
                ]),
                _: 1
              })) : createCommentVNode("v-if", true),
              !_ctx.inactiveIcon && _ctx.inactiveText ? (openBlock(), createElementBlock("span", {
                key: 1,
                "aria-hidden": unref(checked2)
              }, toDisplayString$1(_ctx.inactiveText), 9, _hoisted_3$4)) : createCommentVNode("v-if", true)
            ], 2)) : createCommentVNode("v-if", true),
            createBaseVNode("span", {
              ref_key: "core",
              ref: core2,
              class: normalizeClass(unref(ns2).e("core")),
              style: normalizeStyle(unref(coreStyle))
            }, [
              _ctx.inlinePrompt ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(unref(ns2).e("inner"))
              }, [
                _ctx.activeIcon || _ctx.inactiveIcon ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                  _ctx.activeIcon ? (openBlock(), createBlock(unref(ElIcon), {
                    key: 0,
                    class: normalizeClass([unref(ns2).is("icon"), unref(checked2) ? unref(ns2).is("show") : unref(ns2).is("hide")])
                  }, {
                    default: withCtx(() => [
                      (openBlock(), createBlock(resolveDynamicComponent(_ctx.activeIcon)))
                    ]),
                    _: 1
                  }, 8, ["class"])) : createCommentVNode("v-if", true),
                  _ctx.inactiveIcon ? (openBlock(), createBlock(unref(ElIcon), {
                    key: 1,
                    class: normalizeClass([unref(ns2).is("icon"), !unref(checked2) ? unref(ns2).is("show") : unref(ns2).is("hide")])
                  }, {
                    default: withCtx(() => [
                      (openBlock(), createBlock(resolveDynamicComponent(_ctx.inactiveIcon)))
                    ]),
                    _: 1
                  }, 8, ["class"])) : createCommentVNode("v-if", true)
                ], 64)) : _ctx.activeText || _ctx.inactiveIcon ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  _ctx.activeText ? (openBlock(), createElementBlock("span", {
                    key: 0,
                    class: normalizeClass([unref(ns2).is("text"), unref(checked2) ? unref(ns2).is("show") : unref(ns2).is("hide")]),
                    "aria-hidden": !unref(checked2)
                  }, toDisplayString$1(_ctx.activeText.substring(0, 3)), 11, _hoisted_4$2)) : createCommentVNode("v-if", true),
                  _ctx.inactiveText ? (openBlock(), createElementBlock("span", {
                    key: 1,
                    class: normalizeClass([unref(ns2).is("text"), !unref(checked2) ? unref(ns2).is("show") : unref(ns2).is("hide")]),
                    "aria-hidden": unref(checked2)
                  }, toDisplayString$1(_ctx.inactiveText.substring(0, 3)), 11, _hoisted_5$1)) : createCommentVNode("v-if", true)
                ], 64)) : createCommentVNode("v-if", true)
              ], 2)) : createCommentVNode("v-if", true),
              createBaseVNode("div", {
                class: normalizeClass(unref(ns2).e("action"))
              }, [
                _ctx.loading ? (openBlock(), createBlock(unref(ElIcon), {
                  key: 0,
                  class: normalizeClass(unref(ns2).is("loading"))
                }, {
                  default: withCtx(() => [
                    createVNode(unref(loading_default))
                  ]),
                  _: 1
                }, 8, ["class"])) : createCommentVNode("v-if", true)
              ], 2)
            ], 6),
            !_ctx.inlinePrompt && (_ctx.activeIcon || _ctx.activeText) ? (openBlock(), createElementBlock("span", {
              key: 1,
              class: normalizeClass([
                unref(ns2).e("label"),
                unref(ns2).em("label", "right"),
                unref(ns2).is("active", unref(checked2))
              ])
            }, [
              _ctx.activeIcon ? (openBlock(), createBlock(unref(ElIcon), { key: 0 }, {
                default: withCtx(() => [
                  (openBlock(), createBlock(resolveDynamicComponent(_ctx.activeIcon)))
                ]),
                _: 1
              })) : createCommentVNode("v-if", true),
              !_ctx.activeIcon && _ctx.activeText ? (openBlock(), createElementBlock("span", {
                key: 1,
                "aria-hidden": !unref(checked2)
              }, toDisplayString$1(_ctx.activeText), 9, _hoisted_6)) : createCommentVNode("v-if", true)
            ], 2)) : createCommentVNode("v-if", true)
          ], 14, _hoisted_1$k);
        };
      }
    });
    var Switch = /* @__PURE__ */ _export_sfc$1(_sfc_main$S, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/switch/src/switch.vue"]]);
    const ElSwitch = withInstall(Switch);
    /*!
     * escape-html
     * Copyright(c) 2012-2013 TJ Holowaychuk
     * Copyright(c) 2015 Andreas Lubbe
     * Copyright(c) 2015 Tiancheng "Timothy" Gu
     * MIT Licensed
     */
    var matchHtmlRegExp = /["'&<>]/;
    var escapeHtml_1 = escapeHtml;
    function escapeHtml(string2) {
      var str2 = "" + string2;
      var match = matchHtmlRegExp.exec(str2);
      if (!match) {
        return str2;
      }
      var escape2;
      var html = "";
      var index2 = 0;
      var lastIndex = 0;
      for (index2 = match.index; index2 < str2.length; index2++) {
        switch (str2.charCodeAt(index2)) {
          case 34:
            escape2 = "&quot;";
            break;
          case 38:
            escape2 = "&amp;";
            break;
          case 39:
            escape2 = "&#39;";
            break;
          case 60:
            escape2 = "&lt;";
            break;
          case 62:
            escape2 = "&gt;";
            break;
          default:
            continue;
        }
        if (lastIndex !== index2) {
          html += str2.substring(lastIndex, index2);
        }
        lastIndex = index2 + 1;
        html += escape2;
      }
      return lastIndex !== index2 ? html + str2.substring(lastIndex, index2) : html;
    }
    const getCell = function(event) {
      var _a2;
      return (_a2 = event.target) == null ? void 0 : _a2.closest("td");
    };
    const isObject$2 = function(obj) {
      return obj !== null && typeof obj === "object";
    };
    const orderBy = function(array2, sortKey, reverse, sortMethod, sortBy) {
      if (!sortKey && !sortMethod && (!sortBy || Array.isArray(sortBy) && !sortBy.length)) {
        return array2;
      }
      if (typeof reverse === "string") {
        reverse = reverse === "descending" ? -1 : 1;
      } else {
        reverse = reverse && reverse < 0 ? -1 : 1;
      }
      const getKey = sortMethod ? null : function(value, index2) {
        if (sortBy) {
          if (!Array.isArray(sortBy)) {
            sortBy = [sortBy];
          }
          return sortBy.map((by) => {
            if (typeof by === "string") {
              return get$1(value, by);
            } else {
              return by(value, index2, array2);
            }
          });
        }
        if (sortKey !== "$key") {
          if (isObject$2(value) && "$value" in value)
            value = value.$value;
        }
        return [isObject$2(value) ? get$1(value, sortKey) : value];
      };
      const compare = function(a2, b2) {
        if (sortMethod) {
          return sortMethod(a2.value, b2.value);
        }
        for (let i2 = 0, len = a2.key.length; i2 < len; i2++) {
          if (a2.key[i2] < b2.key[i2]) {
            return -1;
          }
          if (a2.key[i2] > b2.key[i2]) {
            return 1;
          }
        }
        return 0;
      };
      return array2.map((value, index2) => {
        return {
          value,
          index: index2,
          key: getKey ? getKey(value, index2) : null
        };
      }).sort((a2, b2) => {
        let order = compare(a2, b2);
        if (!order) {
          order = a2.index - b2.index;
        }
        return order * +reverse;
      }).map((item) => item.value);
    };
    const getColumnById = function(table, columnId) {
      let column = null;
      table.columns.forEach((item) => {
        if (item.id === columnId) {
          column = item;
        }
      });
      return column;
    };
    const getColumnByKey = function(table, columnKey) {
      let column = null;
      for (let i2 = 0; i2 < table.columns.length; i2++) {
        const item = table.columns[i2];
        if (item.columnKey === columnKey) {
          column = item;
          break;
        }
      }
      return column;
    };
    const getColumnByCell = function(table, cell, namespace) {
      const matches2 = (cell.className || "").match(new RegExp(`${namespace}-table_[^\\s]+`, "gm"));
      if (matches2) {
        return getColumnById(table, matches2[0]);
      }
      return null;
    };
    const getRowIdentity = (row, rowKey2) => {
      if (!row)
        throw new Error("Row is required when get row identity");
      if (typeof rowKey2 === "string") {
        if (!rowKey2.includes(".")) {
          return `${row[rowKey2]}`;
        }
        const key = rowKey2.split(".");
        let current = row;
        for (const element of key) {
          current = current[element];
        }
        return `${current}`;
      } else if (typeof rowKey2 === "function") {
        return rowKey2.call(null, row);
      }
    };
    const getKeysMap = function(array2, rowKey2) {
      const arrayMap2 = {};
      (array2 || []).forEach((row, index2) => {
        arrayMap2[getRowIdentity(row, rowKey2)] = { row, index: index2 };
      });
      return arrayMap2;
    };
    function mergeOptions(defaults, config2) {
      const options = {};
      let key;
      for (key in defaults) {
        options[key] = defaults[key];
      }
      for (key in config2) {
        if (hasOwn$2(config2, key)) {
          const value = config2[key];
          if (typeof value !== "undefined") {
            options[key] = value;
          }
        }
      }
      return options;
    }
    function parseWidth(width) {
      if (width === "")
        return width;
      if (width !== void 0) {
        width = Number.parseInt(width, 10);
        if (Number.isNaN(width)) {
          width = "";
        }
      }
      return width;
    }
    function parseMinWidth(minWidth) {
      if (minWidth === "")
        return minWidth;
      if (minWidth !== void 0) {
        minWidth = parseWidth(minWidth);
        if (Number.isNaN(minWidth)) {
          minWidth = 80;
        }
      }
      return minWidth;
    }
    function parseHeight(height) {
      if (typeof height === "number") {
        return height;
      }
      if (typeof height === "string") {
        if (/^\d+(?:px)?$/.test(height)) {
          return Number.parseInt(height, 10);
        } else {
          return height;
        }
      }
      return null;
    }
    function compose(...funcs) {
      if (funcs.length === 0) {
        return (arg) => arg;
      }
      if (funcs.length === 1) {
        return funcs[0];
      }
      return funcs.reduce((a2, b2) => (...args) => a2(b2(...args)));
    }
    function toggleRowStatus(statusArr, row, newVal) {
      let changed = false;
      const index2 = statusArr.indexOf(row);
      const included = index2 !== -1;
      const addRow = () => {
        statusArr.push(row);
        changed = true;
      };
      const removeRow = () => {
        statusArr.splice(index2, 1);
        changed = true;
      };
      if (typeof newVal === "boolean") {
        if (newVal && !included) {
          addRow();
        } else if (!newVal && included) {
          removeRow();
        }
      } else {
        if (included) {
          removeRow();
        } else {
          addRow();
        }
      }
      return changed;
    }
    function walkTreeNode(root2, cb, childrenKey = "children", lazyKey = "hasChildren") {
      const isNil2 = (array2) => !(Array.isArray(array2) && array2.length);
      function _walker(parent, children, level) {
        cb(parent, children, level);
        children.forEach((item) => {
          if (item[lazyKey]) {
            cb(item, null, level + 1);
            return;
          }
          const children2 = item[childrenKey];
          if (!isNil2(children2)) {
            _walker(item, children2, level + 1);
          }
        });
      }
      root2.forEach((item) => {
        if (item[lazyKey]) {
          cb(item, null, 0);
          return;
        }
        const children = item[childrenKey];
        if (!isNil2(children)) {
          _walker(item, children, 0);
        }
      });
    }
    let removePopper;
    function createTablePopper(parentNode, trigger2, popperContent, popperOptions2, tooltipEffect) {
      const { nextZIndex } = useZIndex();
      const ns2 = parentNode == null ? void 0 : parentNode.dataset.prefix;
      const scrollContainer = parentNode == null ? void 0 : parentNode.querySelector(`.${ns2}-scrollbar__wrap`);
      function renderContent() {
        const isLight = tooltipEffect === "light";
        const content2 = document.createElement("div");
        content2.className = `${ns2}-popper ${isLight ? "is-light" : "is-dark"}`;
        popperContent = escapeHtml_1(popperContent);
        content2.innerHTML = popperContent;
        content2.style.zIndex = String(nextZIndex());
        parentNode == null ? void 0 : parentNode.appendChild(content2);
        return content2;
      }
      function renderArrow() {
        const arrow22 = document.createElement("div");
        arrow22.className = `${ns2}-popper__arrow`;
        return arrow22;
      }
      function showPopper() {
        popperInstance && popperInstance.update();
      }
      removePopper = () => {
        try {
          popperInstance && popperInstance.destroy();
          content && (parentNode == null ? void 0 : parentNode.removeChild(content));
          trigger2.removeEventListener("mouseenter", showPopper);
          trigger2.removeEventListener("mouseleave", removePopper);
          scrollContainer == null ? void 0 : scrollContainer.removeEventListener("scroll", removePopper);
          removePopper = void 0;
        } catch (e2) {
        }
      };
      let popperInstance = null;
      const content = renderContent();
      const arrow2 = renderArrow();
      content.appendChild(arrow2);
      popperInstance = yn(trigger2, content, {
        strategy: "absolute",
        modifiers: [
          {
            name: "offset",
            options: {
              offset: [0, 8]
            }
          },
          {
            name: "arrow",
            options: {
              element: arrow2,
              padding: 10
            }
          }
        ],
        ...popperOptions2
      });
      trigger2.addEventListener("mouseenter", showPopper);
      trigger2.addEventListener("mouseleave", removePopper);
      scrollContainer == null ? void 0 : scrollContainer.addEventListener("scroll", removePopper);
      return popperInstance;
    }
    const isFixedColumn = (index2, fixed, store, realColumns) => {
      let start = 0;
      let after = index2;
      if (realColumns) {
        if (realColumns[index2].colSpan > 1) {
          return {};
        }
        for (let i2 = 0; i2 < index2; i2++) {
          start += realColumns[i2].colSpan;
        }
        after = start + realColumns[index2].colSpan - 1;
      } else {
        start = index2;
      }
      let fixedLayout;
      const columns2 = store.states.columns;
      switch (fixed) {
        case "left":
          if (after < store.states.fixedLeafColumnsLength.value) {
            fixedLayout = "left";
          }
          break;
        case "right":
          if (start >= columns2.value.length - store.states.rightFixedLeafColumnsLength.value) {
            fixedLayout = "right";
          }
          break;
        default:
          if (after < store.states.fixedLeafColumnsLength.value) {
            fixedLayout = "left";
          } else if (start >= columns2.value.length - store.states.rightFixedLeafColumnsLength.value) {
            fixedLayout = "right";
          }
      }
      return fixedLayout ? {
        direction: fixedLayout,
        start,
        after
      } : {};
    };
    const getFixedColumnsClass = (namespace, index2, fixed, store, realColumns) => {
      const classes = [];
      const { direction: direction2, start } = isFixedColumn(index2, fixed, store, realColumns);
      if (direction2) {
        const isLeft = direction2 === "left";
        classes.push(`${namespace}-fixed-column--${direction2}`);
        if (isLeft && start === store.states.fixedLeafColumnsLength.value - 1) {
          classes.push("is-last-column");
        } else if (!isLeft && start === store.states.columns.value.length - store.states.rightFixedLeafColumnsLength.value) {
          classes.push("is-first-column");
        }
      }
      return classes;
    };
    function getOffset(offset2, column) {
      return offset2 + (column.realWidth === null || Number.isNaN(column.realWidth) ? Number(column.width) : column.realWidth);
    }
    const getFixedColumnOffset = (index2, fixed, store, realColumns) => {
      const { direction: direction2, start = 0 } = isFixedColumn(index2, fixed, store, realColumns);
      if (!direction2) {
        return;
      }
      const styles = {};
      const isLeft = direction2 === "left";
      const columns2 = store.states.columns.value;
      if (isLeft) {
        styles.left = columns2.slice(0, index2).reduce(getOffset, 0);
      } else {
        styles.right = columns2.slice(start + 1).reverse().reduce(getOffset, 0);
      }
      return styles;
    };
    const ensurePosition = (style2, key) => {
      if (!style2)
        return;
      if (!Number.isNaN(style2[key])) {
        style2[key] = `${style2[key]}px`;
      }
    };
    function useExpand(watcherData) {
      const instance = getCurrentInstance();
      const defaultExpandAll = ref(false);
      const expandRows = ref([]);
      const updateExpandRows = () => {
        const data = watcherData.data.value || [];
        const rowKey2 = watcherData.rowKey.value;
        if (defaultExpandAll.value) {
          expandRows.value = data.slice();
        } else if (rowKey2) {
          const expandRowsMap = getKeysMap(expandRows.value, rowKey2);
          expandRows.value = data.reduce((prev, row) => {
            const rowId = getRowIdentity(row, rowKey2);
            const rowInfo = expandRowsMap[rowId];
            if (rowInfo) {
              prev.push(row);
            }
            return prev;
          }, []);
        } else {
          expandRows.value = [];
        }
      };
      const toggleRowExpansion = (row, expanded) => {
        const changed = toggleRowStatus(expandRows.value, row, expanded);
        if (changed) {
          instance.emit("expand-change", row, expandRows.value.slice());
        }
      };
      const setExpandRowKeys = (rowKeys) => {
        instance.store.assertRowKey();
        const data = watcherData.data.value || [];
        const rowKey2 = watcherData.rowKey.value;
        const keysMap = getKeysMap(data, rowKey2);
        expandRows.value = rowKeys.reduce((prev, cur) => {
          const info = keysMap[cur];
          if (info) {
            prev.push(info.row);
          }
          return prev;
        }, []);
      };
      const isRowExpanded = (row) => {
        const rowKey2 = watcherData.rowKey.value;
        if (rowKey2) {
          const expandMap = getKeysMap(expandRows.value, rowKey2);
          return !!expandMap[getRowIdentity(row, rowKey2)];
        }
        return expandRows.value.includes(row);
      };
      return {
        updateExpandRows,
        toggleRowExpansion,
        setExpandRowKeys,
        isRowExpanded,
        states: {
          expandRows,
          defaultExpandAll
        }
      };
    }
    function useCurrent(watcherData) {
      const instance = getCurrentInstance();
      const _currentRowKey = ref(null);
      const currentRow = ref(null);
      const setCurrentRowKey = (key) => {
        instance.store.assertRowKey();
        _currentRowKey.value = key;
        setCurrentRowByKey(key);
      };
      const restoreCurrentRowKey = () => {
        _currentRowKey.value = null;
      };
      const setCurrentRowByKey = (key) => {
        const { data, rowKey: rowKey2 } = watcherData;
        let _currentRow = null;
        if (rowKey2.value) {
          _currentRow = (unref(data) || []).find((item) => getRowIdentity(item, rowKey2.value) === key);
        }
        currentRow.value = _currentRow;
        instance.emit("current-change", currentRow.value, null);
      };
      const updateCurrentRow = (_currentRow) => {
        const oldCurrentRow = currentRow.value;
        if (_currentRow && _currentRow !== oldCurrentRow) {
          currentRow.value = _currentRow;
          instance.emit("current-change", currentRow.value, oldCurrentRow);
          return;
        }
        if (!_currentRow && oldCurrentRow) {
          currentRow.value = null;
          instance.emit("current-change", null, oldCurrentRow);
        }
      };
      const updateCurrentRowData = () => {
        const rowKey2 = watcherData.rowKey.value;
        const data = watcherData.data.value || [];
        const oldCurrentRow = currentRow.value;
        if (!data.includes(oldCurrentRow) && oldCurrentRow) {
          if (rowKey2) {
            const currentRowKey = getRowIdentity(oldCurrentRow, rowKey2);
            setCurrentRowByKey(currentRowKey);
          } else {
            currentRow.value = null;
          }
          if (currentRow.value === null) {
            instance.emit("current-change", null, oldCurrentRow);
          }
        } else if (_currentRowKey.value) {
          setCurrentRowByKey(_currentRowKey.value);
          restoreCurrentRowKey();
        }
      };
      return {
        setCurrentRowKey,
        restoreCurrentRowKey,
        setCurrentRowByKey,
        updateCurrentRow,
        updateCurrentRowData,
        states: {
          _currentRowKey,
          currentRow
        }
      };
    }
    function useTree$2(watcherData) {
      const expandRowKeys = ref([]);
      const treeData = ref({});
      const indent = ref(16);
      const lazy = ref(false);
      const lazyTreeNodeMap = ref({});
      const lazyColumnIdentifier = ref("hasChildren");
      const childrenColumnName = ref("children");
      const instance = getCurrentInstance();
      const normalizedData = computed(() => {
        if (!watcherData.rowKey.value)
          return {};
        const data = watcherData.data.value || [];
        return normalize(data);
      });
      const normalizedLazyNode = computed(() => {
        const rowKey2 = watcherData.rowKey.value;
        const keys2 = Object.keys(lazyTreeNodeMap.value);
        const res = {};
        if (!keys2.length)
          return res;
        keys2.forEach((key) => {
          if (lazyTreeNodeMap.value[key].length) {
            const item = { children: [] };
            lazyTreeNodeMap.value[key].forEach((row) => {
              const currentRowKey = getRowIdentity(row, rowKey2);
              item.children.push(currentRowKey);
              if (row[lazyColumnIdentifier.value] && !res[currentRowKey]) {
                res[currentRowKey] = { children: [] };
              }
            });
            res[key] = item;
          }
        });
        return res;
      });
      const normalize = (data) => {
        const rowKey2 = watcherData.rowKey.value;
        const res = {};
        walkTreeNode(data, (parent, children, level) => {
          const parentId = getRowIdentity(parent, rowKey2);
          if (Array.isArray(children)) {
            res[parentId] = {
              children: children.map((row) => getRowIdentity(row, rowKey2)),
              level
            };
          } else if (lazy.value) {
            res[parentId] = {
              children: [],
              lazy: true,
              level
            };
          }
        }, childrenColumnName.value, lazyColumnIdentifier.value);
        return res;
      };
      const updateTreeData = (ifChangeExpandRowKeys = false, ifExpandAll = ((_a2) => (_a2 = instance.store) == null ? void 0 : _a2.states.defaultExpandAll.value)()) => {
        var _a2;
        const nested = normalizedData.value;
        const normalizedLazyNode_ = normalizedLazyNode.value;
        const keys2 = Object.keys(nested);
        const newTreeData = {};
        if (keys2.length) {
          const oldTreeData = unref(treeData);
          const rootLazyRowKeys = [];
          const getExpanded = (oldValue, key) => {
            if (ifChangeExpandRowKeys) {
              if (expandRowKeys.value) {
                return ifExpandAll || expandRowKeys.value.includes(key);
              } else {
                return !!(ifExpandAll || (oldValue == null ? void 0 : oldValue.expanded));
              }
            } else {
              const included = ifExpandAll || expandRowKeys.value && expandRowKeys.value.includes(key);
              return !!((oldValue == null ? void 0 : oldValue.expanded) || included);
            }
          };
          keys2.forEach((key) => {
            const oldValue = oldTreeData[key];
            const newValue = { ...nested[key] };
            newValue.expanded = getExpanded(oldValue, key);
            if (newValue.lazy) {
              const { loaded = false, loading = false } = oldValue || {};
              newValue.loaded = !!loaded;
              newValue.loading = !!loading;
              rootLazyRowKeys.push(key);
            }
            newTreeData[key] = newValue;
          });
          const lazyKeys = Object.keys(normalizedLazyNode_);
          if (lazy.value && lazyKeys.length && rootLazyRowKeys.length) {
            lazyKeys.forEach((key) => {
              const oldValue = oldTreeData[key];
              const lazyNodeChildren = normalizedLazyNode_[key].children;
              if (rootLazyRowKeys.includes(key)) {
                if (newTreeData[key].children.length !== 0) {
                  throw new Error("[ElTable]children must be an empty array.");
                }
                newTreeData[key].children = lazyNodeChildren;
              } else {
                const { loaded = false, loading = false } = oldValue || {};
                newTreeData[key] = {
                  lazy: true,
                  loaded: !!loaded,
                  loading: !!loading,
                  expanded: getExpanded(oldValue, key),
                  children: lazyNodeChildren,
                  level: ""
                };
              }
            });
          }
        }
        treeData.value = newTreeData;
        (_a2 = instance.store) == null ? void 0 : _a2.updateTableScrollY();
      };
      watch(() => expandRowKeys.value, () => {
        updateTreeData(true);
      });
      watch(() => normalizedData.value, () => {
        updateTreeData();
      });
      watch(() => normalizedLazyNode.value, () => {
        updateTreeData();
      });
      const updateTreeExpandKeys = (value) => {
        expandRowKeys.value = value;
        updateTreeData();
      };
      const toggleTreeExpansion = (row, expanded) => {
        instance.store.assertRowKey();
        const rowKey2 = watcherData.rowKey.value;
        const id2 = getRowIdentity(row, rowKey2);
        const data = id2 && treeData.value[id2];
        if (id2 && data && "expanded" in data) {
          const oldExpanded = data.expanded;
          expanded = typeof expanded === "undefined" ? !data.expanded : expanded;
          treeData.value[id2].expanded = expanded;
          if (oldExpanded !== expanded) {
            instance.emit("expand-change", row, expanded);
          }
          instance.store.updateTableScrollY();
        }
      };
      const loadOrToggle = (row) => {
        instance.store.assertRowKey();
        const rowKey2 = watcherData.rowKey.value;
        const id2 = getRowIdentity(row, rowKey2);
        const data = treeData.value[id2];
        if (lazy.value && data && "loaded" in data && !data.loaded) {
          loadData(row, id2, data);
        } else {
          toggleTreeExpansion(row, void 0);
        }
      };
      const loadData = (row, key, treeNode) => {
        const { load: load2 } = instance.props;
        if (load2 && !treeData.value[key].loaded) {
          treeData.value[key].loading = true;
          load2(row, treeNode, (data) => {
            if (!Array.isArray(data)) {
              throw new TypeError("[ElTable] data must be an array");
            }
            treeData.value[key].loading = false;
            treeData.value[key].loaded = true;
            treeData.value[key].expanded = true;
            if (data.length) {
              lazyTreeNodeMap.value[key] = data;
            }
            instance.emit("expand-change", row, true);
          });
        }
      };
      return {
        loadData,
        loadOrToggle,
        toggleTreeExpansion,
        updateTreeExpandKeys,
        updateTreeData,
        normalize,
        states: {
          expandRowKeys,
          treeData,
          indent,
          lazy,
          lazyTreeNodeMap,
          lazyColumnIdentifier,
          childrenColumnName
        }
      };
    }
    const sortData = (data, states) => {
      const sortingColumn = states.sortingColumn;
      if (!sortingColumn || typeof sortingColumn.sortable === "string") {
        return data;
      }
      return orderBy(data, states.sortProp, states.sortOrder, sortingColumn.sortMethod, sortingColumn.sortBy);
    };
    const doFlattenColumns = (columns2) => {
      const result = [];
      columns2.forEach((column) => {
        if (column.children) {
          result.push.apply(result, doFlattenColumns(column.children));
        } else {
          result.push(column);
        }
      });
      return result;
    };
    function useWatcher$1() {
      var _a2;
      const instance = getCurrentInstance();
      const { size: tableSize } = toRefs((_a2 = instance.proxy) == null ? void 0 : _a2.$props);
      const rowKey2 = ref(null);
      const data = ref([]);
      const _data = ref([]);
      const isComplex = ref(false);
      const _columns = ref([]);
      const originColumns = ref([]);
      const columns2 = ref([]);
      const fixedColumns = ref([]);
      const rightFixedColumns = ref([]);
      const leafColumns = ref([]);
      const fixedLeafColumns = ref([]);
      const rightFixedLeafColumns = ref([]);
      const leafColumnsLength = ref(0);
      const fixedLeafColumnsLength = ref(0);
      const rightFixedLeafColumnsLength = ref(0);
      const isAllSelected = ref(false);
      const selection = ref([]);
      const reserveSelection = ref(false);
      const selectOnIndeterminate = ref(false);
      const selectable = ref(null);
      const filters = ref({});
      const filteredData = ref(null);
      const sortingColumn = ref(null);
      const sortProp = ref(null);
      const sortOrder = ref(null);
      const hoverRow = ref(null);
      watch(data, () => instance.state && scheduleLayout(false), {
        deep: true
      });
      const assertRowKey = () => {
        if (!rowKey2.value)
          throw new Error("[ElTable] prop row-key is required");
      };
      const updateColumns = () => {
        fixedColumns.value = _columns.value.filter((column) => column.fixed === true || column.fixed === "left");
        rightFixedColumns.value = _columns.value.filter((column) => column.fixed === "right");
        if (fixedColumns.value.length > 0 && _columns.value[0] && _columns.value[0].type === "selection" && !_columns.value[0].fixed) {
          _columns.value[0].fixed = true;
          fixedColumns.value.unshift(_columns.value[0]);
        }
        const notFixedColumns = _columns.value.filter((column) => !column.fixed);
        originColumns.value = [].concat(fixedColumns.value).concat(notFixedColumns).concat(rightFixedColumns.value);
        const leafColumns2 = doFlattenColumns(notFixedColumns);
        const fixedLeafColumns2 = doFlattenColumns(fixedColumns.value);
        const rightFixedLeafColumns2 = doFlattenColumns(rightFixedColumns.value);
        leafColumnsLength.value = leafColumns2.length;
        fixedLeafColumnsLength.value = fixedLeafColumns2.length;
        rightFixedLeafColumnsLength.value = rightFixedLeafColumns2.length;
        columns2.value = [].concat(fixedLeafColumns2).concat(leafColumns2).concat(rightFixedLeafColumns2);
        isComplex.value = fixedColumns.value.length > 0 || rightFixedColumns.value.length > 0;
      };
      const scheduleLayout = (needUpdateColumns, immediate = false) => {
        if (needUpdateColumns) {
          updateColumns();
        }
        if (immediate) {
          instance.state.doLayout();
        } else {
          instance.state.debouncedUpdateLayout();
        }
      };
      const isSelected = (row) => {
        return selection.value.includes(row);
      };
      const clearSelection = () => {
        isAllSelected.value = false;
        const oldSelection = selection.value;
        if (oldSelection.length) {
          selection.value = [];
          instance.emit("selection-change", []);
        }
      };
      const cleanSelection = () => {
        let deleted;
        if (rowKey2.value) {
          deleted = [];
          const selectedMap = getKeysMap(selection.value, rowKey2.value);
          const dataMap = getKeysMap(data.value, rowKey2.value);
          for (const key in selectedMap) {
            if (hasOwn$2(selectedMap, key) && !dataMap[key]) {
              deleted.push(selectedMap[key].row);
            }
          }
        } else {
          deleted = selection.value.filter((item) => !data.value.includes(item));
        }
        if (deleted.length) {
          const newSelection = selection.value.filter((item) => !deleted.includes(item));
          selection.value = newSelection;
          instance.emit("selection-change", newSelection.slice());
        }
      };
      const getSelectionRows = () => {
        return (selection.value || []).slice();
      };
      const toggleRowSelection = (row, selected = void 0, emitChange = true) => {
        const changed = toggleRowStatus(selection.value, row, selected);
        if (changed) {
          const newSelection = (selection.value || []).slice();
          if (emitChange) {
            instance.emit("select", newSelection, row);
          }
          instance.emit("selection-change", newSelection);
        }
      };
      const _toggleAllSelection = () => {
        var _a22, _b;
        const value = selectOnIndeterminate.value ? !isAllSelected.value : !(isAllSelected.value || selection.value.length);
        isAllSelected.value = value;
        let selectionChanged = false;
        let childrenCount = 0;
        const rowKey22 = (_b = (_a22 = instance == null ? void 0 : instance.store) == null ? void 0 : _a22.states) == null ? void 0 : _b.rowKey.value;
        data.value.forEach((row, index2) => {
          const rowIndex = index2 + childrenCount;
          if (selectable.value) {
            if (selectable.value.call(null, row, rowIndex) && toggleRowStatus(selection.value, row, value)) {
              selectionChanged = true;
            }
          } else {
            if (toggleRowStatus(selection.value, row, value)) {
              selectionChanged = true;
            }
          }
          childrenCount += getChildrenCount(getRowIdentity(row, rowKey22));
        });
        if (selectionChanged) {
          instance.emit("selection-change", selection.value ? selection.value.slice() : []);
        }
        instance.emit("select-all", selection.value);
      };
      const updateSelectionByRowKey = () => {
        const selectedMap = getKeysMap(selection.value, rowKey2.value);
        data.value.forEach((row) => {
          const rowId = getRowIdentity(row, rowKey2.value);
          const rowInfo = selectedMap[rowId];
          if (rowInfo) {
            selection.value[rowInfo.index] = row;
          }
        });
      };
      const updateAllSelected = () => {
        var _a22, _b, _c;
        if (((_a22 = data.value) == null ? void 0 : _a22.length) === 0) {
          isAllSelected.value = false;
          return;
        }
        let selectedMap;
        if (rowKey2.value) {
          selectedMap = getKeysMap(selection.value, rowKey2.value);
        }
        const isSelected2 = function(row) {
          if (selectedMap) {
            return !!selectedMap[getRowIdentity(row, rowKey2.value)];
          } else {
            return selection.value.includes(row);
          }
        };
        let isAllSelected_ = true;
        let selectedCount = 0;
        let childrenCount = 0;
        for (let i2 = 0, j2 = (data.value || []).length; i2 < j2; i2++) {
          const keyProp = (_c = (_b = instance == null ? void 0 : instance.store) == null ? void 0 : _b.states) == null ? void 0 : _c.rowKey.value;
          const rowIndex = i2 + childrenCount;
          const item = data.value[i2];
          const isRowSelectable = selectable.value && selectable.value.call(null, item, rowIndex);
          if (!isSelected2(item)) {
            if (!selectable.value || isRowSelectable) {
              isAllSelected_ = false;
              break;
            }
          } else {
            selectedCount++;
          }
          childrenCount += getChildrenCount(getRowIdentity(item, keyProp));
        }
        if (selectedCount === 0)
          isAllSelected_ = false;
        isAllSelected.value = isAllSelected_;
      };
      const getChildrenCount = (rowKey22) => {
        var _a22;
        if (!instance || !instance.store)
          return 0;
        const { treeData } = instance.store.states;
        let count = 0;
        const children = (_a22 = treeData.value[rowKey22]) == null ? void 0 : _a22.children;
        if (children) {
          count += children.length;
          children.forEach((childKey) => {
            count += getChildrenCount(childKey);
          });
        }
        return count;
      };
      const updateFilters = (columns22, values) => {
        if (!Array.isArray(columns22)) {
          columns22 = [columns22];
        }
        const filters_ = {};
        columns22.forEach((col) => {
          filters.value[col.id] = values;
          filters_[col.columnKey || col.id] = values;
        });
        return filters_;
      };
      const updateSort = (column, prop, order) => {
        if (sortingColumn.value && sortingColumn.value !== column) {
          sortingColumn.value.order = null;
        }
        sortingColumn.value = column;
        sortProp.value = prop;
        sortOrder.value = order;
      };
      const execFilter = () => {
        let sourceData = unref(_data);
        Object.keys(filters.value).forEach((columnId) => {
          const values = filters.value[columnId];
          if (!values || values.length === 0)
            return;
          const column = getColumnById({
            columns: columns2.value
          }, columnId);
          if (column && column.filterMethod) {
            sourceData = sourceData.filter((row) => {
              return values.some((value) => column.filterMethod.call(null, value, row, column));
            });
          }
        });
        filteredData.value = sourceData;
      };
      const execSort = () => {
        data.value = sortData(filteredData.value, {
          sortingColumn: sortingColumn.value,
          sortProp: sortProp.value,
          sortOrder: sortOrder.value
        });
      };
      const execQuery = (ignore = void 0) => {
        if (!(ignore && ignore.filter)) {
          execFilter();
        }
        execSort();
      };
      const clearFilter = (columnKeys) => {
        const { tableHeaderRef } = instance.refs;
        if (!tableHeaderRef)
          return;
        const panels = Object.assign({}, tableHeaderRef.filterPanels);
        const keys2 = Object.keys(panels);
        if (!keys2.length)
          return;
        if (typeof columnKeys === "string") {
          columnKeys = [columnKeys];
        }
        if (Array.isArray(columnKeys)) {
          const columns_ = columnKeys.map((key) => getColumnByKey({
            columns: columns2.value
          }, key));
          keys2.forEach((key) => {
            const column = columns_.find((col) => col.id === key);
            if (column) {
              column.filteredValue = [];
            }
          });
          instance.store.commit("filterChange", {
            column: columns_,
            values: [],
            silent: true,
            multi: true
          });
        } else {
          keys2.forEach((key) => {
            const column = columns2.value.find((col) => col.id === key);
            if (column) {
              column.filteredValue = [];
            }
          });
          filters.value = {};
          instance.store.commit("filterChange", {
            column: {},
            values: [],
            silent: true
          });
        }
      };
      const clearSort = () => {
        if (!sortingColumn.value)
          return;
        updateSort(null, null, null);
        instance.store.commit("changeSortCondition", {
          silent: true
        });
      };
      const {
        setExpandRowKeys,
        toggleRowExpansion,
        updateExpandRows,
        states: expandStates,
        isRowExpanded
      } = useExpand({
        data,
        rowKey: rowKey2
      });
      const {
        updateTreeExpandKeys,
        toggleTreeExpansion,
        updateTreeData,
        loadOrToggle,
        states: treeStates
      } = useTree$2({
        data,
        rowKey: rowKey2
      });
      const {
        updateCurrentRowData,
        updateCurrentRow,
        setCurrentRowKey,
        states: currentData
      } = useCurrent({
        data,
        rowKey: rowKey2
      });
      const setExpandRowKeysAdapter = (val) => {
        setExpandRowKeys(val);
        updateTreeExpandKeys(val);
      };
      const toggleRowExpansionAdapter = (row, expanded) => {
        const hasExpandColumn = columns2.value.some(({ type: type2 }) => type2 === "expand");
        if (hasExpandColumn) {
          toggleRowExpansion(row, expanded);
        } else {
          toggleTreeExpansion(row, expanded);
        }
      };
      return {
        assertRowKey,
        updateColumns,
        scheduleLayout,
        isSelected,
        clearSelection,
        cleanSelection,
        getSelectionRows,
        toggleRowSelection,
        _toggleAllSelection,
        toggleAllSelection: null,
        updateSelectionByRowKey,
        updateAllSelected,
        updateFilters,
        updateCurrentRow,
        updateSort,
        execFilter,
        execSort,
        execQuery,
        clearFilter,
        clearSort,
        toggleRowExpansion,
        setExpandRowKeysAdapter,
        setCurrentRowKey,
        toggleRowExpansionAdapter,
        isRowExpanded,
        updateExpandRows,
        updateCurrentRowData,
        loadOrToggle,
        updateTreeData,
        states: {
          tableSize,
          rowKey: rowKey2,
          data,
          _data,
          isComplex,
          _columns,
          originColumns,
          columns: columns2,
          fixedColumns,
          rightFixedColumns,
          leafColumns,
          fixedLeafColumns,
          rightFixedLeafColumns,
          leafColumnsLength,
          fixedLeafColumnsLength,
          rightFixedLeafColumnsLength,
          isAllSelected,
          selection,
          reserveSelection,
          selectOnIndeterminate,
          selectable,
          filters,
          filteredData,
          sortingColumn,
          sortProp,
          sortOrder,
          hoverRow,
          ...expandStates,
          ...treeStates,
          ...currentData
        }
      };
    }
    function replaceColumn(array2, column) {
      return array2.map((item) => {
        var _a2;
        if (item.id === column.id) {
          return column;
        } else if ((_a2 = item.children) == null ? void 0 : _a2.length) {
          item.children = replaceColumn(item.children, column);
        }
        return item;
      });
    }
    function sortColumn(array2) {
      array2.forEach((item) => {
        var _a2, _b;
        item.no = (_a2 = item.getColumnIndex) == null ? void 0 : _a2.call(item);
        if ((_b = item.children) == null ? void 0 : _b.length) {
          sortColumn(item.children);
        }
      });
      array2.sort((cur, pre) => cur.no - pre.no);
    }
    function useStore() {
      const instance = getCurrentInstance();
      const watcher = useWatcher$1();
      const ns2 = useNamespace("table");
      const mutations = {
        setData(states, data) {
          const dataInstanceChanged = unref(states._data) !== data;
          states.data.value = data;
          states._data.value = data;
          instance.store.execQuery();
          instance.store.updateCurrentRowData();
          instance.store.updateExpandRows();
          instance.store.updateTreeData(instance.store.states.defaultExpandAll.value);
          if (unref(states.reserveSelection)) {
            instance.store.assertRowKey();
            instance.store.updateSelectionByRowKey();
          } else {
            if (dataInstanceChanged) {
              instance.store.clearSelection();
            } else {
              instance.store.cleanSelection();
            }
          }
          instance.store.updateAllSelected();
          if (instance.$ready) {
            instance.store.scheduleLayout();
          }
        },
        insertColumn(states, column, parent) {
          const array2 = unref(states._columns);
          let newColumns = [];
          if (!parent) {
            array2.push(column);
            newColumns = array2;
          } else {
            if (parent && !parent.children) {
              parent.children = [];
            }
            parent.children.push(column);
            newColumns = replaceColumn(array2, parent);
          }
          sortColumn(newColumns);
          states._columns.value = newColumns;
          if (column.type === "selection") {
            states.selectable.value = column.selectable;
            states.reserveSelection.value = column.reserveSelection;
          }
          if (instance.$ready) {
            instance.store.updateColumns();
            instance.store.scheduleLayout();
          }
        },
        removeColumn(states, column, parent) {
          const array2 = unref(states._columns) || [];
          if (parent) {
            parent.children.splice(parent.children.findIndex((item) => item.id === column.id), 1);
            if (parent.children.length === 0) {
              delete parent.children;
            }
            states._columns.value = replaceColumn(array2, parent);
          } else {
            const index2 = array2.indexOf(column);
            if (index2 > -1) {
              array2.splice(index2, 1);
              states._columns.value = array2;
            }
          }
          if (instance.$ready) {
            instance.store.updateColumns();
            instance.store.scheduleLayout();
          }
        },
        sort(states, options) {
          const { prop, order, init: init2 } = options;
          if (prop) {
            const column = unref(states.columns).find((column2) => column2.property === prop);
            if (column) {
              column.order = order;
              instance.store.updateSort(column, prop, order);
              instance.store.commit("changeSortCondition", { init: init2 });
            }
          }
        },
        changeSortCondition(states, options) {
          const { sortingColumn: column, sortProp: prop, sortOrder: order } = states;
          if (unref(order) === null) {
            states.sortingColumn.value = null;
            states.sortProp.value = null;
          }
          const ingore = { filter: true };
          instance.store.execQuery(ingore);
          if (!options || !(options.silent || options.init)) {
            instance.emit("sort-change", {
              column: unref(column),
              prop: unref(prop),
              order: unref(order)
            });
          }
          instance.store.updateTableScrollY();
        },
        filterChange(_states, options) {
          const { column, values, silent } = options;
          const newFilters = instance.store.updateFilters(column, values);
          instance.store.execQuery();
          if (!silent) {
            instance.emit("filter-change", newFilters);
          }
          instance.store.updateTableScrollY();
        },
        toggleAllSelection() {
          instance.store.toggleAllSelection();
        },
        rowSelectedChanged(_states, row) {
          instance.store.toggleRowSelection(row);
          instance.store.updateAllSelected();
        },
        setHoverRow(states, row) {
          states.hoverRow.value = row;
        },
        setCurrentRow(_states, row) {
          instance.store.updateCurrentRow(row);
        }
      };
      const commit = function(name, ...args) {
        const mutations2 = instance.store.mutations;
        if (mutations2[name]) {
          mutations2[name].apply(instance, [instance.store.states].concat(args));
        } else {
          throw new Error(`Action not found: ${name}`);
        }
      };
      const updateTableScrollY = function() {
        nextTick$1(() => instance.layout.updateScrollY.apply(instance.layout));
      };
      return {
        ns: ns2,
        ...watcher,
        mutations,
        commit,
        updateTableScrollY
      };
    }
    const InitialStateMap = {
      rowKey: "rowKey",
      defaultExpandAll: "defaultExpandAll",
      selectOnIndeterminate: "selectOnIndeterminate",
      indent: "indent",
      lazy: "lazy",
      data: "data",
      ["treeProps.hasChildren"]: {
        key: "lazyColumnIdentifier",
        default: "hasChildren"
      },
      ["treeProps.children"]: {
        key: "childrenColumnName",
        default: "children"
      }
    };
    function createStore(table, props) {
      if (!table) {
        throw new Error("Table is required.");
      }
      const store = useStore();
      store.toggleAllSelection = debounce(store._toggleAllSelection, 10);
      Object.keys(InitialStateMap).forEach((key) => {
        handleValue(getArrKeysValue(props, key), key, store);
      });
      proxyTableProps(store, props);
      return store;
    }
    function proxyTableProps(store, props) {
      Object.keys(InitialStateMap).forEach((key) => {
        watch(() => getArrKeysValue(props, key), (value) => {
          handleValue(value, key, store);
        });
      });
    }
    function handleValue(value, propsKey, store) {
      let newVal = value;
      let storeKey = InitialStateMap[propsKey];
      if (typeof InitialStateMap[propsKey] === "object") {
        storeKey = storeKey.key;
        newVal = newVal || InitialStateMap[propsKey].default;
      }
      store.states[storeKey].value = newVal;
    }
    function getArrKeysValue(props, keys2) {
      if (keys2.includes(".")) {
        const keyList = keys2.split(".");
        let value = props;
        keyList.forEach((key) => {
          value = value[key];
        });
        return value;
      } else {
        return props[keys2];
      }
    }
    class TableLayout {
      constructor(options) {
        this.observers = [];
        this.table = null;
        this.store = null;
        this.columns = [];
        this.fit = true;
        this.showHeader = true;
        this.height = ref(null);
        this.scrollX = ref(false);
        this.scrollY = ref(false);
        this.bodyWidth = ref(null);
        this.fixedWidth = ref(null);
        this.rightFixedWidth = ref(null);
        this.gutterWidth = 0;
        for (const name in options) {
          if (hasOwn$2(options, name)) {
            if (isRef(this[name])) {
              this[name].value = options[name];
            } else {
              this[name] = options[name];
            }
          }
        }
        if (!this.table) {
          throw new Error("Table is required for Table Layout");
        }
        if (!this.store) {
          throw new Error("Store is required for Table Layout");
        }
      }
      updateScrollY() {
        const height = this.height.value;
        if (height === null)
          return false;
        const scrollBarRef = this.table.refs.scrollBarRef;
        if (this.table.vnode.el && scrollBarRef) {
          let scrollY = true;
          const prevScrollY = this.scrollY.value;
          scrollY = scrollBarRef.wrap$.scrollHeight > scrollBarRef.wrap$.clientHeight;
          this.scrollY.value = scrollY;
          return prevScrollY !== scrollY;
        }
        return false;
      }
      setHeight(value, prop = "height") {
        if (!isClient)
          return;
        const el = this.table.vnode.el;
        value = parseHeight(value);
        this.height.value = Number(value);
        if (!el && (value || value === 0))
          return nextTick$1(() => this.setHeight(value, prop));
        if (typeof value === "number") {
          el.style[prop] = `${value}px`;
          this.updateElsHeight();
        } else if (typeof value === "string") {
          el.style[prop] = value;
          this.updateElsHeight();
        }
      }
      setMaxHeight(value) {
        this.setHeight(value, "max-height");
      }
      getFlattenColumns() {
        const flattenColumns = [];
        const columns2 = this.table.store.states.columns.value;
        columns2.forEach((column) => {
          if (column.isColumnGroup) {
            flattenColumns.push.apply(flattenColumns, column.columns);
          } else {
            flattenColumns.push(column);
          }
        });
        return flattenColumns;
      }
      updateElsHeight() {
        this.updateScrollY();
        this.notifyObservers("scrollable");
      }
      headerDisplayNone(elm) {
        if (!elm)
          return true;
        let headerChild = elm;
        while (headerChild.tagName !== "DIV") {
          if (getComputedStyle(headerChild).display === "none") {
            return true;
          }
          headerChild = headerChild.parentElement;
        }
        return false;
      }
      updateColumnsWidth() {
        if (!isClient)
          return;
        const fit = this.fit;
        const bodyWidth = this.table.vnode.el.clientWidth;
        let bodyMinWidth = 0;
        const flattenColumns = this.getFlattenColumns();
        const flexColumns = flattenColumns.filter((column) => typeof column.width !== "number");
        flattenColumns.forEach((column) => {
          if (typeof column.width === "number" && column.realWidth)
            column.realWidth = null;
        });
        if (flexColumns.length > 0 && fit) {
          flattenColumns.forEach((column) => {
            bodyMinWidth += Number(column.width || column.minWidth || 80);
          });
          if (bodyMinWidth <= bodyWidth) {
            this.scrollX.value = false;
            const totalFlexWidth = bodyWidth - bodyMinWidth;
            if (flexColumns.length === 1) {
              flexColumns[0].realWidth = Number(flexColumns[0].minWidth || 80) + totalFlexWidth;
            } else {
              const allColumnsWidth = flexColumns.reduce((prev, column) => prev + Number(column.minWidth || 80), 0);
              const flexWidthPerPixel = totalFlexWidth / allColumnsWidth;
              let noneFirstWidth = 0;
              flexColumns.forEach((column, index2) => {
                if (index2 === 0)
                  return;
                const flexWidth = Math.floor(Number(column.minWidth || 80) * flexWidthPerPixel);
                noneFirstWidth += flexWidth;
                column.realWidth = Number(column.minWidth || 80) + flexWidth;
              });
              flexColumns[0].realWidth = Number(flexColumns[0].minWidth || 80) + totalFlexWidth - noneFirstWidth;
            }
          } else {
            this.scrollX.value = true;
            flexColumns.forEach((column) => {
              column.realWidth = Number(column.minWidth);
            });
          }
          this.bodyWidth.value = Math.max(bodyMinWidth, bodyWidth);
          this.table.state.resizeState.value.width = this.bodyWidth.value;
        } else {
          flattenColumns.forEach((column) => {
            if (!column.width && !column.minWidth) {
              column.realWidth = 80;
            } else {
              column.realWidth = Number(column.width || column.minWidth);
            }
            bodyMinWidth += column.realWidth;
          });
          this.scrollX.value = bodyMinWidth > bodyWidth;
          this.bodyWidth.value = bodyMinWidth;
        }
        const fixedColumns = this.store.states.fixedColumns.value;
        if (fixedColumns.length > 0) {
          let fixedWidth = 0;
          fixedColumns.forEach((column) => {
            fixedWidth += Number(column.realWidth || column.width);
          });
          this.fixedWidth.value = fixedWidth;
        }
        const rightFixedColumns = this.store.states.rightFixedColumns.value;
        if (rightFixedColumns.length > 0) {
          let rightFixedWidth = 0;
          rightFixedColumns.forEach((column) => {
            rightFixedWidth += Number(column.realWidth || column.width);
          });
          this.rightFixedWidth.value = rightFixedWidth;
        }
        this.notifyObservers("columns");
      }
      addObserver(observer) {
        this.observers.push(observer);
      }
      removeObserver(observer) {
        const index2 = this.observers.indexOf(observer);
        if (index2 !== -1) {
          this.observers.splice(index2, 1);
        }
      }
      notifyObservers(event) {
        const observers = this.observers;
        observers.forEach((observer) => {
          var _a2, _b;
          switch (event) {
            case "columns":
              (_a2 = observer.state) == null ? void 0 : _a2.onColumnsChange(this);
              break;
            case "scrollable":
              (_b = observer.state) == null ? void 0 : _b.onScrollableChange(this);
              break;
            default:
              throw new Error(`Table Layout don't have event ${event}.`);
          }
        });
      }
    }
    const { CheckboxGroup: ElCheckboxGroup } = ElCheckbox;
    const _sfc_main$R = defineComponent({
      name: "ElTableFilterPanel",
      components: {
        ElCheckbox,
        ElCheckboxGroup,
        ElScrollbar,
        ElTooltip,
        ElIcon,
        ArrowDown: arrow_down_default,
        ArrowUp: arrow_up_default
      },
      directives: { ClickOutside },
      props: {
        placement: {
          type: String,
          default: "bottom-start"
        },
        store: {
          type: Object
        },
        column: {
          type: Object
        },
        upDataColumn: {
          type: Function
        }
      },
      setup(props) {
        const instance = getCurrentInstance();
        const { t } = useLocale();
        const ns2 = useNamespace("table-filter");
        const parent = instance == null ? void 0 : instance.parent;
        if (!parent.filterPanels.value[props.column.id]) {
          parent.filterPanels.value[props.column.id] = instance;
        }
        const tooltipVisible = ref(false);
        const tooltip = ref(null);
        const filters = computed(() => {
          return props.column && props.column.filters;
        });
        const filterValue = computed({
          get: () => {
            var _a2;
            return (((_a2 = props.column) == null ? void 0 : _a2.filteredValue) || [])[0];
          },
          set: (value) => {
            if (filteredValue.value) {
              if (typeof value !== "undefined" && value !== null) {
                filteredValue.value.splice(0, 1, value);
              } else {
                filteredValue.value.splice(0, 1);
              }
            }
          }
        });
        const filteredValue = computed({
          get() {
            if (props.column) {
              return props.column.filteredValue || [];
            }
            return [];
          },
          set(value) {
            if (props.column) {
              props.upDataColumn("filteredValue", value);
            }
          }
        });
        const multiple = computed(() => {
          if (props.column) {
            return props.column.filterMultiple;
          }
          return true;
        });
        const isActive = (filter) => {
          return filter.value === filterValue.value;
        };
        const hidden = () => {
          tooltipVisible.value = false;
        };
        const showFilterPanel = (e2) => {
          e2.stopPropagation();
          tooltipVisible.value = !tooltipVisible.value;
        };
        const hideFilterPanel = () => {
          tooltipVisible.value = false;
        };
        const handleConfirm = () => {
          confirmFilter(filteredValue.value);
          hidden();
        };
        const handleReset = () => {
          filteredValue.value = [];
          confirmFilter(filteredValue.value);
          hidden();
        };
        const handleSelect = (_filterValue) => {
          filterValue.value = _filterValue;
          if (typeof _filterValue !== "undefined" && _filterValue !== null) {
            confirmFilter(filteredValue.value);
          } else {
            confirmFilter([]);
          }
          hidden();
        };
        const confirmFilter = (filteredValue2) => {
          props.store.commit("filterChange", {
            column: props.column,
            values: filteredValue2
          });
          props.store.updateAllSelected();
        };
        watch(tooltipVisible, (value) => {
          if (props.column) {
            props.upDataColumn("filterOpened", value);
          }
        }, {
          immediate: true
        });
        const popperPaneRef = computed(() => {
          var _a2, _b;
          return (_b = (_a2 = tooltip.value) == null ? void 0 : _a2.popperRef) == null ? void 0 : _b.contentRef;
        });
        return {
          tooltipVisible,
          multiple,
          filteredValue,
          filterValue,
          filters,
          handleConfirm,
          handleReset,
          handleSelect,
          isActive,
          t,
          ns: ns2,
          showFilterPanel,
          hideFilterPanel,
          popperPaneRef,
          tooltip
        };
      }
    });
    const _hoisted_1$j = { key: 0 };
    const _hoisted_2$b = ["disabled"];
    const _hoisted_3$3 = ["label", "onClick"];
    function _sfc_render$7(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_el_checkbox = resolveComponent("el-checkbox");
      const _component_el_checkbox_group = resolveComponent("el-checkbox-group");
      const _component_el_scrollbar = resolveComponent("el-scrollbar");
      const _component_arrow_up = resolveComponent("arrow-up");
      const _component_arrow_down = resolveComponent("arrow-down");
      const _component_el_icon = resolveComponent("el-icon");
      const _component_el_tooltip = resolveComponent("el-tooltip");
      const _directive_click_outside = resolveDirective("click-outside");
      return openBlock(), createBlock(_component_el_tooltip, {
        ref: "tooltip",
        visible: _ctx.tooltipVisible,
        offset: 0,
        placement: _ctx.placement,
        "show-arrow": false,
        "stop-popper-mouse-event": false,
        teleported: "",
        effect: "light",
        pure: "",
        "popper-class": _ctx.ns.b(),
        persistent: ""
      }, {
        content: withCtx(() => [
          _ctx.multiple ? (openBlock(), createElementBlock("div", _hoisted_1$j, [
            createBaseVNode("div", {
              class: normalizeClass(_ctx.ns.e("content"))
            }, [
              createVNode(_component_el_scrollbar, {
                "wrap-class": _ctx.ns.e("wrap")
              }, {
                default: withCtx(() => [
                  createVNode(_component_el_checkbox_group, {
                    modelValue: _ctx.filteredValue,
                    "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.filteredValue = $event),
                    class: normalizeClass(_ctx.ns.e("checkbox-group"))
                  }, {
                    default: withCtx(() => [
                      (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.filters, (filter) => {
                        return openBlock(), createBlock(_component_el_checkbox, {
                          key: filter.value,
                          label: filter.value
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString$1(filter.text), 1)
                          ]),
                          _: 2
                        }, 1032, ["label"]);
                      }), 128))
                    ]),
                    _: 1
                  }, 8, ["modelValue", "class"])
                ]),
                _: 1
              }, 8, ["wrap-class"])
            ], 2),
            createBaseVNode("div", {
              class: normalizeClass(_ctx.ns.e("bottom"))
            }, [
              createBaseVNode("button", {
                class: normalizeClass({ [_ctx.ns.is("disabled")]: _ctx.filteredValue.length === 0 }),
                disabled: _ctx.filteredValue.length === 0,
                type: "button",
                onClick: _cache[1] || (_cache[1] = (...args) => _ctx.handleConfirm && _ctx.handleConfirm(...args))
              }, toDisplayString$1(_ctx.t("el.table.confirmFilter")), 11, _hoisted_2$b),
              createBaseVNode("button", {
                type: "button",
                onClick: _cache[2] || (_cache[2] = (...args) => _ctx.handleReset && _ctx.handleReset(...args))
              }, toDisplayString$1(_ctx.t("el.table.resetFilter")), 1)
            ], 2)
          ])) : (openBlock(), createElementBlock("ul", {
            key: 1,
            class: normalizeClass(_ctx.ns.e("list"))
          }, [
            createBaseVNode("li", {
              class: normalizeClass([
                _ctx.ns.e("list-item"),
                {
                  [_ctx.ns.is("active")]: _ctx.filterValue === void 0 || _ctx.filterValue === null
                }
              ]),
              onClick: _cache[3] || (_cache[3] = ($event) => _ctx.handleSelect(null))
            }, toDisplayString$1(_ctx.t("el.table.clearFilter")), 3),
            (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.filters, (filter) => {
              return openBlock(), createElementBlock("li", {
                key: filter.value,
                class: normalizeClass([_ctx.ns.e("list-item"), _ctx.ns.is("active", _ctx.isActive(filter))]),
                label: filter.value,
                onClick: ($event) => _ctx.handleSelect(filter.value)
              }, toDisplayString$1(filter.text), 11, _hoisted_3$3);
            }), 128))
          ], 2))
        ]),
        default: withCtx(() => [
          withDirectives((openBlock(), createElementBlock("span", {
            class: normalizeClass([
              `${_ctx.ns.namespace.value}-table__column-filter-trigger`,
              `${_ctx.ns.namespace.value}-none-outline`
            ]),
            onClick: _cache[4] || (_cache[4] = (...args) => _ctx.showFilterPanel && _ctx.showFilterPanel(...args))
          }, [
            createVNode(_component_el_icon, null, {
              default: withCtx(() => [
                _ctx.column.filterOpened ? (openBlock(), createBlock(_component_arrow_up, { key: 0 })) : (openBlock(), createBlock(_component_arrow_down, { key: 1 }))
              ]),
              _: 1
            })
          ], 2)), [
            [_directive_click_outside, _ctx.hideFilterPanel, _ctx.popperPaneRef]
          ])
        ]),
        _: 1
      }, 8, ["visible", "placement", "popper-class"]);
    }
    var FilterPanel = /* @__PURE__ */ _export_sfc$1(_sfc_main$R, [["render", _sfc_render$7], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/table/src/filter-panel.vue"]]);
    function useLayoutObserver(root2) {
      const instance = getCurrentInstance();
      onBeforeMount(() => {
        tableLayout.value.addObserver(instance);
      });
      onMounted(() => {
        onColumnsChange(tableLayout.value);
        onScrollableChange(tableLayout.value);
      });
      onUpdated(() => {
        onColumnsChange(tableLayout.value);
        onScrollableChange(tableLayout.value);
      });
      onUnmounted(() => {
        tableLayout.value.removeObserver(instance);
      });
      const tableLayout = computed(() => {
        const layout2 = root2.layout;
        if (!layout2) {
          throw new Error("Can not find table layout.");
        }
        return layout2;
      });
      const onColumnsChange = (layout2) => {
        var _a2;
        const cols = ((_a2 = root2.vnode.el) == null ? void 0 : _a2.querySelectorAll("colgroup > col")) || [];
        if (!cols.length)
          return;
        const flattenColumns = layout2.getFlattenColumns();
        const columnsMap = {};
        flattenColumns.forEach((column) => {
          columnsMap[column.id] = column;
        });
        for (let i2 = 0, j2 = cols.length; i2 < j2; i2++) {
          const col = cols[i2];
          const name = col.getAttribute("name");
          const column = columnsMap[name];
          if (column) {
            col.setAttribute("width", column.realWidth || column.width);
          }
        }
      };
      const onScrollableChange = (layout2) => {
        var _a2, _b;
        const cols = ((_a2 = root2.vnode.el) == null ? void 0 : _a2.querySelectorAll("colgroup > col[name=gutter]")) || [];
        for (let i2 = 0, j2 = cols.length; i2 < j2; i2++) {
          const col = cols[i2];
          col.setAttribute("width", layout2.scrollY.value ? layout2.gutterWidth : "0");
        }
        const ths = ((_b = root2.vnode.el) == null ? void 0 : _b.querySelectorAll("th.gutter")) || [];
        for (let i2 = 0, j2 = ths.length; i2 < j2; i2++) {
          const th = ths[i2];
          th.style.width = layout2.scrollY.value ? `${layout2.gutterWidth}px` : "0";
          th.style.display = layout2.scrollY.value ? "" : "none";
        }
      };
      return {
        tableLayout: tableLayout.value,
        onColumnsChange,
        onScrollableChange
      };
    }
    const TABLE_INJECTION_KEY = Symbol("ElTable");
    function useEvent(props, emit2) {
      const instance = getCurrentInstance();
      const parent = inject(TABLE_INJECTION_KEY);
      const handleFilterClick = (event) => {
        event.stopPropagation();
        return;
      };
      const handleHeaderClick = (event, column) => {
        if (!column.filters && column.sortable) {
          handleSortClick(event, column, false);
        } else if (column.filterable && !column.sortable) {
          handleFilterClick(event);
        }
        parent == null ? void 0 : parent.emit("header-click", column, event);
      };
      const handleHeaderContextMenu = (event, column) => {
        parent == null ? void 0 : parent.emit("header-contextmenu", column, event);
      };
      const draggingColumn = ref(null);
      const dragging = ref(false);
      const dragState = ref({});
      const handleMouseDown = (event, column) => {
        if (!isClient)
          return;
        if (column.children && column.children.length > 0)
          return;
        if (draggingColumn.value && props.border) {
          dragging.value = true;
          const table = parent;
          emit2("set-drag-visible", true);
          const tableEl = table == null ? void 0 : table.vnode.el;
          const tableLeft = tableEl.getBoundingClientRect().left;
          const columnEl = instance.vnode.el.querySelector(`th.${column.id}`);
          const columnRect = columnEl.getBoundingClientRect();
          const minLeft = columnRect.left - tableLeft + 30;
          addClass(columnEl, "noclick");
          dragState.value = {
            startMouseLeft: event.clientX,
            startLeft: columnRect.right - tableLeft,
            startColumnLeft: columnRect.left - tableLeft,
            tableLeft
          };
          const resizeProxy = table == null ? void 0 : table.refs.resizeProxy;
          resizeProxy.style.left = `${dragState.value.startLeft}px`;
          document.onselectstart = function() {
            return false;
          };
          document.ondragstart = function() {
            return false;
          };
          const handleMouseMove2 = (event2) => {
            const deltaLeft = event2.clientX - dragState.value.startMouseLeft;
            const proxyLeft = dragState.value.startLeft + deltaLeft;
            resizeProxy.style.left = `${Math.max(minLeft, proxyLeft)}px`;
          };
          const handleMouseUp = () => {
            if (dragging.value) {
              const { startColumnLeft, startLeft } = dragState.value;
              const finalLeft = Number.parseInt(resizeProxy.style.left, 10);
              const columnWidth = finalLeft - startColumnLeft;
              column.width = column.realWidth = columnWidth;
              table == null ? void 0 : table.emit("header-dragend", column.width, startLeft - startColumnLeft, column, event);
              requestAnimationFrame(() => {
                props.store.scheduleLayout(false, true);
              });
              document.body.style.cursor = "";
              dragging.value = false;
              draggingColumn.value = null;
              dragState.value = {};
              emit2("set-drag-visible", false);
            }
            document.removeEventListener("mousemove", handleMouseMove2);
            document.removeEventListener("mouseup", handleMouseUp);
            document.onselectstart = null;
            document.ondragstart = null;
            setTimeout(() => {
              removeClass(columnEl, "noclick");
            }, 0);
          };
          document.addEventListener("mousemove", handleMouseMove2);
          document.addEventListener("mouseup", handleMouseUp);
        }
      };
      const handleMouseMove = (event, column) => {
        var _a2;
        if (column.children && column.children.length > 0)
          return;
        const target = (_a2 = event.target) == null ? void 0 : _a2.closest("th");
        if (!column || !column.resizable)
          return;
        if (!dragging.value && props.border) {
          const rect = target.getBoundingClientRect();
          const bodyStyle = document.body.style;
          if (rect.width > 12 && rect.right - event.pageX < 8) {
            bodyStyle.cursor = "col-resize";
            if (hasClass(target, "is-sortable")) {
              target.style.cursor = "col-resize";
            }
            draggingColumn.value = column;
          } else if (!dragging.value) {
            bodyStyle.cursor = "";
            if (hasClass(target, "is-sortable")) {
              target.style.cursor = "pointer";
            }
            draggingColumn.value = null;
          }
        }
      };
      const handleMouseOut = () => {
        if (!isClient)
          return;
        document.body.style.cursor = "";
      };
      const toggleOrder = ({ order, sortOrders }) => {
        if (order === "")
          return sortOrders[0];
        const index2 = sortOrders.indexOf(order || null);
        return sortOrders[index2 > sortOrders.length - 2 ? 0 : index2 + 1];
      };
      const handleSortClick = (event, column, givenOrder) => {
        var _a2;
        event.stopPropagation();
        const order = column.order === givenOrder ? null : givenOrder || toggleOrder(column);
        const target = (_a2 = event.target) == null ? void 0 : _a2.closest("th");
        if (target) {
          if (hasClass(target, "noclick")) {
            removeClass(target, "noclick");
            return;
          }
        }
        if (!column.sortable)
          return;
        const states = props.store.states;
        let sortProp = states.sortProp.value;
        let sortOrder;
        const sortingColumn = states.sortingColumn.value;
        if (sortingColumn !== column || sortingColumn === column && sortingColumn.order === null) {
          if (sortingColumn) {
            sortingColumn.order = null;
          }
          states.sortingColumn.value = column;
          sortProp = column.property;
        }
        if (!order) {
          sortOrder = column.order = null;
        } else {
          sortOrder = column.order = order;
        }
        states.sortProp.value = sortProp;
        states.sortOrder.value = sortOrder;
        parent == null ? void 0 : parent.store.commit("changeSortCondition");
      };
      return {
        handleHeaderClick,
        handleHeaderContextMenu,
        handleMouseDown,
        handleMouseMove,
        handleMouseOut,
        handleSortClick,
        handleFilterClick
      };
    }
    function useStyle$2(props) {
      const parent = inject(TABLE_INJECTION_KEY);
      const ns2 = useNamespace("table");
      const getHeaderRowStyle = (rowIndex) => {
        const headerRowStyle = parent == null ? void 0 : parent.props.headerRowStyle;
        if (typeof headerRowStyle === "function") {
          return headerRowStyle.call(null, { rowIndex });
        }
        return headerRowStyle;
      };
      const getHeaderRowClass = (rowIndex) => {
        const classes = [];
        const headerRowClassName = parent == null ? void 0 : parent.props.headerRowClassName;
        if (typeof headerRowClassName === "string") {
          classes.push(headerRowClassName);
        } else if (typeof headerRowClassName === "function") {
          classes.push(headerRowClassName.call(null, { rowIndex }));
        }
        return classes.join(" ");
      };
      const getHeaderCellStyle = (rowIndex, columnIndex, row, column) => {
        var _a2;
        let headerCellStyles = (_a2 = parent == null ? void 0 : parent.props.headerCellStyle) != null ? _a2 : {};
        if (typeof headerCellStyles === "function") {
          headerCellStyles = headerCellStyles.call(null, {
            rowIndex,
            columnIndex,
            row,
            column
          });
        }
        const fixedStyle = column.isSubColumn ? null : getFixedColumnOffset(columnIndex, column.fixed, props.store, row);
        ensurePosition(fixedStyle, "left");
        ensurePosition(fixedStyle, "right");
        return Object.assign({}, headerCellStyles, fixedStyle);
      };
      const getHeaderCellClass = (rowIndex, columnIndex, row, column) => {
        const fixedClasses = column.isSubColumn ? [] : getFixedColumnsClass(ns2.b(), columnIndex, column.fixed, props.store, row);
        const classes = [
          column.id,
          column.order,
          column.headerAlign,
          column.className,
          column.labelClassName,
          ...fixedClasses
        ];
        if (!column.children) {
          classes.push("is-leaf");
        }
        if (column.sortable) {
          classes.push("is-sortable");
        }
        const headerCellClassName = parent == null ? void 0 : parent.props.headerCellClassName;
        if (typeof headerCellClassName === "string") {
          classes.push(headerCellClassName);
        } else if (typeof headerCellClassName === "function") {
          classes.push(headerCellClassName.call(null, {
            rowIndex,
            columnIndex,
            row,
            column
          }));
        }
        classes.push(ns2.e("cell"));
        return classes.filter((className) => Boolean(className)).join(" ");
      };
      return {
        getHeaderRowStyle,
        getHeaderRowClass,
        getHeaderCellStyle,
        getHeaderCellClass
      };
    }
    const getAllColumns = (columns2) => {
      const result = [];
      columns2.forEach((column) => {
        if (column.children) {
          result.push(column);
          result.push.apply(result, getAllColumns(column.children));
        } else {
          result.push(column);
        }
      });
      return result;
    };
    const convertToRows = (originColumns) => {
      let maxLevel = 1;
      const traverse2 = (column, parent) => {
        if (parent) {
          column.level = parent.level + 1;
          if (maxLevel < column.level) {
            maxLevel = column.level;
          }
        }
        if (column.children) {
          let colSpan = 0;
          column.children.forEach((subColumn) => {
            traverse2(subColumn, column);
            colSpan += subColumn.colSpan;
          });
          column.colSpan = colSpan;
        } else {
          column.colSpan = 1;
        }
      };
      originColumns.forEach((column) => {
        column.level = 1;
        traverse2(column, void 0);
      });
      const rows = [];
      for (let i2 = 0; i2 < maxLevel; i2++) {
        rows.push([]);
      }
      const allColumns = getAllColumns(originColumns);
      allColumns.forEach((column) => {
        if (!column.children) {
          column.rowSpan = maxLevel - column.level + 1;
        } else {
          column.rowSpan = 1;
          column.children.forEach((col) => col.isSubColumn = true);
        }
        rows[column.level - 1].push(column);
      });
      return rows;
    };
    function useUtils$1(props) {
      const parent = inject(TABLE_INJECTION_KEY);
      const columnRows = computed(() => {
        return convertToRows(props.store.states.originColumns.value);
      });
      const isGroup = computed(() => {
        const result = columnRows.value.length > 1;
        if (result && parent) {
          parent.state.isGroup.value = true;
        }
        return result;
      });
      const toggleAllSelection = (event) => {
        event.stopPropagation();
        parent == null ? void 0 : parent.store.commit("toggleAllSelection");
      };
      return {
        isGroup,
        toggleAllSelection,
        columnRows
      };
    }
    var TableHeader = defineComponent({
      name: "ElTableHeader",
      components: {
        ElCheckbox
      },
      props: {
        fixed: {
          type: String,
          default: ""
        },
        store: {
          required: true,
          type: Object
        },
        border: Boolean,
        defaultSort: {
          type: Object,
          default: () => {
            return {
              prop: "",
              order: ""
            };
          }
        }
      },
      setup(props, { emit: emit2 }) {
        const instance = getCurrentInstance();
        const parent = inject(TABLE_INJECTION_KEY);
        const ns2 = useNamespace("table");
        const filterPanels = ref({});
        const { onColumnsChange, onScrollableChange } = useLayoutObserver(parent);
        onMounted(async () => {
          await nextTick$1();
          await nextTick$1();
          const { prop, order } = props.defaultSort;
          parent == null ? void 0 : parent.store.commit("sort", { prop, order, init: true });
        });
        const {
          handleHeaderClick,
          handleHeaderContextMenu,
          handleMouseDown,
          handleMouseMove,
          handleMouseOut,
          handleSortClick,
          handleFilterClick
        } = useEvent(props, emit2);
        const {
          getHeaderRowStyle,
          getHeaderRowClass,
          getHeaderCellStyle,
          getHeaderCellClass
        } = useStyle$2(props);
        const { isGroup, toggleAllSelection, columnRows } = useUtils$1(props);
        instance.state = {
          onColumnsChange,
          onScrollableChange
        };
        instance.filterPanels = filterPanels;
        return {
          ns: ns2,
          filterPanels,
          onColumnsChange,
          onScrollableChange,
          columnRows,
          getHeaderRowClass,
          getHeaderRowStyle,
          getHeaderCellClass,
          getHeaderCellStyle,
          handleHeaderClick,
          handleHeaderContextMenu,
          handleMouseDown,
          handleMouseMove,
          handleMouseOut,
          handleSortClick,
          handleFilterClick,
          isGroup,
          toggleAllSelection
        };
      },
      render() {
        const {
          ns: ns2,
          isGroup,
          columnRows,
          getHeaderCellStyle,
          getHeaderCellClass,
          getHeaderRowClass,
          getHeaderRowStyle,
          handleHeaderClick,
          handleHeaderContextMenu,
          handleMouseDown,
          handleMouseMove,
          handleSortClick,
          handleMouseOut,
          store,
          $parent
        } = this;
        let rowSpan = 1;
        return h$2("thead", {
          class: { [ns2.is("group")]: isGroup }
        }, columnRows.map((subColumns, rowIndex) => h$2("tr", {
          class: getHeaderRowClass(rowIndex),
          key: rowIndex,
          style: getHeaderRowStyle(rowIndex)
        }, subColumns.map((column, cellIndex) => {
          if (column.rowSpan > rowSpan) {
            rowSpan = column.rowSpan;
          }
          return h$2("th", {
            class: getHeaderCellClass(rowIndex, cellIndex, subColumns, column),
            colspan: column.colSpan,
            key: `${column.id}-thead`,
            rowspan: column.rowSpan,
            style: getHeaderCellStyle(rowIndex, cellIndex, subColumns, column),
            onClick: ($event) => handleHeaderClick($event, column),
            onContextmenu: ($event) => handleHeaderContextMenu($event, column),
            onMousedown: ($event) => handleMouseDown($event, column),
            onMousemove: ($event) => handleMouseMove($event, column),
            onMouseout: handleMouseOut
          }, [
            h$2("div", {
              class: [
                "cell",
                column.filteredValue && column.filteredValue.length > 0 ? "highlight" : "",
                column.labelClassName
              ]
            }, [
              column.renderHeader ? column.renderHeader({
                column,
                $index: cellIndex,
                store,
                _self: $parent
              }) : column.label,
              column.sortable && h$2("span", {
                onClick: ($event) => handleSortClick($event, column),
                class: "caret-wrapper"
              }, [
                h$2("i", {
                  onClick: ($event) => handleSortClick($event, column, "ascending"),
                  class: "sort-caret ascending"
                }),
                h$2("i", {
                  onClick: ($event) => handleSortClick($event, column, "descending"),
                  class: "sort-caret descending"
                })
              ]),
              column.filterable && h$2(FilterPanel, {
                store,
                placement: column.filterPlacement || "bottom-start",
                column,
                upDataColumn: (key, value) => {
                  column[key] = value;
                }
              })
            ])
          ]);
        }))));
      }
    });
    function useEvents(props) {
      const parent = inject(TABLE_INJECTION_KEY);
      const tooltipContent = ref("");
      const tooltipTrigger = ref(h$2("div"));
      const handleEvent = (event, row, name) => {
        var _a2;
        const table = parent;
        const cell = getCell(event);
        let column;
        const namespace = (_a2 = table == null ? void 0 : table.vnode.el) == null ? void 0 : _a2.dataset.prefix;
        if (cell) {
          column = getColumnByCell({
            columns: props.store.states.columns.value
          }, cell, namespace);
          if (column) {
            table == null ? void 0 : table.emit(`cell-${name}`, row, column, cell, event);
          }
        }
        table == null ? void 0 : table.emit(`row-${name}`, row, column, event);
      };
      const handleDoubleClick = (event, row) => {
        handleEvent(event, row, "dblclick");
      };
      const handleClick = (event, row) => {
        props.store.commit("setCurrentRow", row);
        handleEvent(event, row, "click");
      };
      const handleContextMenu = (event, row) => {
        handleEvent(event, row, "contextmenu");
      };
      const handleMouseEnter = debounce((index2) => {
        props.store.commit("setHoverRow", index2);
      }, 30);
      const handleMouseLeave = debounce(() => {
        props.store.commit("setHoverRow", null);
      }, 30);
      const handleCellMouseEnter = (event, row) => {
        var _a2;
        const table = parent;
        const cell = getCell(event);
        const namespace = (_a2 = table == null ? void 0 : table.vnode.el) == null ? void 0 : _a2.dataset.prefix;
        if (cell) {
          const column = getColumnByCell({
            columns: props.store.states.columns.value
          }, cell, namespace);
          const hoverState = table.hoverState = { cell, column, row };
          table == null ? void 0 : table.emit("cell-mouse-enter", hoverState.row, hoverState.column, hoverState.cell, event);
        }
        const cellChild = event.target.querySelector(".cell");
        if (!(hasClass(cellChild, `${namespace}-tooltip`) && cellChild.childNodes.length)) {
          return;
        }
        const range2 = document.createRange();
        range2.setStart(cellChild, 0);
        range2.setEnd(cellChild, cellChild.childNodes.length);
        const rangeWidth = range2.getBoundingClientRect().width;
        const padding = (Number.parseInt(getStyle(cellChild, "paddingLeft"), 10) || 0) + (Number.parseInt(getStyle(cellChild, "paddingRight"), 10) || 0);
        if (rangeWidth + padding > cellChild.offsetWidth || cellChild.scrollWidth > cellChild.offsetWidth) {
          createTablePopper(parent == null ? void 0 : parent.refs.tableWrapper, cell, cell.innerText || cell.textContent, {
            placement: "top",
            strategy: "fixed"
          }, row.tooltipEffect);
        }
      };
      const handleCellMouseLeave = (event) => {
        const cell = getCell(event);
        if (!cell)
          return;
        const oldHoverState = parent == null ? void 0 : parent.hoverState;
        parent == null ? void 0 : parent.emit("cell-mouse-leave", oldHoverState == null ? void 0 : oldHoverState.row, oldHoverState == null ? void 0 : oldHoverState.column, oldHoverState == null ? void 0 : oldHoverState.cell, event);
      };
      return {
        handleDoubleClick,
        handleClick,
        handleContextMenu,
        handleMouseEnter,
        handleMouseLeave,
        handleCellMouseEnter,
        handleCellMouseLeave,
        tooltipContent,
        tooltipTrigger
      };
    }
    function useStyles$1(props) {
      const parent = inject(TABLE_INJECTION_KEY);
      const ns2 = useNamespace("table");
      const getRowStyle = (row, rowIndex) => {
        const rowStyle = parent == null ? void 0 : parent.props.rowStyle;
        if (typeof rowStyle === "function") {
          return rowStyle.call(null, {
            row,
            rowIndex
          });
        }
        return rowStyle || null;
      };
      const getRowClass = (row, rowIndex) => {
        const classes = [ns2.e("row")];
        if ((parent == null ? void 0 : parent.props.highlightCurrentRow) && row === props.store.states.currentRow.value) {
          classes.push("current-row");
        }
        if (props.stripe && rowIndex % 2 === 1) {
          classes.push(ns2.em("row", "striped"));
        }
        const rowClassName = parent == null ? void 0 : parent.props.rowClassName;
        if (typeof rowClassName === "string") {
          classes.push(rowClassName);
        } else if (typeof rowClassName === "function") {
          classes.push(rowClassName.call(null, {
            row,
            rowIndex
          }));
        }
        return classes;
      };
      const getCellStyle = (rowIndex, columnIndex, row, column) => {
        const cellStyle = parent == null ? void 0 : parent.props.cellStyle;
        let cellStyles = cellStyle != null ? cellStyle : {};
        if (typeof cellStyle === "function") {
          cellStyles = cellStyle.call(null, {
            rowIndex,
            columnIndex,
            row,
            column
          });
        }
        const fixedStyle = column.isSubColumn ? null : getFixedColumnOffset(columnIndex, props == null ? void 0 : props.fixed, props.store);
        ensurePosition(fixedStyle, "left");
        ensurePosition(fixedStyle, "right");
        return Object.assign({}, cellStyles, fixedStyle);
      };
      const getCellClass = (rowIndex, columnIndex, row, column) => {
        const fixedClasses = column.isSubColumn ? [] : getFixedColumnsClass(ns2.b(), columnIndex, props == null ? void 0 : props.fixed, props.store);
        const classes = [column.id, column.align, column.className, ...fixedClasses];
        const cellClassName = parent == null ? void 0 : parent.props.cellClassName;
        if (typeof cellClassName === "string") {
          classes.push(cellClassName);
        } else if (typeof cellClassName === "function") {
          classes.push(cellClassName.call(null, {
            rowIndex,
            columnIndex,
            row,
            column
          }));
        }
        classes.push(ns2.e("cell"));
        return classes.filter((className) => Boolean(className)).join(" ");
      };
      const getSpan = (row, column, rowIndex, columnIndex) => {
        let rowspan = 1;
        let colspan = 1;
        const fn2 = parent == null ? void 0 : parent.props.spanMethod;
        if (typeof fn2 === "function") {
          const result = fn2({
            row,
            column,
            rowIndex,
            columnIndex
          });
          if (Array.isArray(result)) {
            rowspan = result[0];
            colspan = result[1];
          } else if (typeof result === "object") {
            rowspan = result.rowspan;
            colspan = result.colspan;
          }
        }
        return { rowspan, colspan };
      };
      const getColspanRealWidth = (columns2, colspan, index2) => {
        if (colspan < 1) {
          return columns2[index2].realWidth;
        }
        const widthArr = columns2.map(({ realWidth, width }) => realWidth || width).slice(index2, index2 + colspan);
        return Number(widthArr.reduce((acc, width) => Number(acc) + Number(width), -1));
      };
      return {
        getRowStyle,
        getRowClass,
        getCellStyle,
        getCellClass,
        getSpan,
        getColspanRealWidth
      };
    }
    function useRender$1(props) {
      const parent = inject(TABLE_INJECTION_KEY);
      const ns2 = useNamespace("table");
      const {
        handleDoubleClick,
        handleClick,
        handleContextMenu,
        handleMouseEnter,
        handleMouseLeave,
        handleCellMouseEnter,
        handleCellMouseLeave,
        tooltipContent,
        tooltipTrigger
      } = useEvents(props);
      const {
        getRowStyle,
        getRowClass,
        getCellStyle,
        getCellClass,
        getSpan,
        getColspanRealWidth
      } = useStyles$1(props);
      const firstDefaultColumnIndex = computed(() => {
        return props.store.states.columns.value.findIndex(({ type: type2 }) => type2 === "default");
      });
      const getKeyOfRow = (row, index2) => {
        const rowKey2 = parent.props.rowKey;
        if (rowKey2) {
          return getRowIdentity(row, rowKey2);
        }
        return index2;
      };
      const rowRender = (row, $index, treeRowData, expanded = false) => {
        const { tooltipEffect, store } = props;
        const { indent, columns: columns2 } = store.states;
        const rowClasses = getRowClass(row, $index);
        let display = true;
        if (treeRowData) {
          rowClasses.push(ns2.em("row", `level-${treeRowData.level}`));
          display = treeRowData.display;
        }
        const displayStyle = display ? null : {
          display: "none"
        };
        return h$2("tr", {
          style: [displayStyle, getRowStyle(row, $index)],
          class: rowClasses,
          key: getKeyOfRow(row, $index),
          onDblclick: ($event) => handleDoubleClick($event, row),
          onClick: ($event) => handleClick($event, row),
          onContextmenu: ($event) => handleContextMenu($event, row),
          onMouseenter: () => handleMouseEnter($index),
          onMouseleave: handleMouseLeave
        }, columns2.value.map((column, cellIndex) => {
          const { rowspan, colspan } = getSpan(row, column, $index, cellIndex);
          if (!rowspan || !colspan) {
            return null;
          }
          const columnData = { ...column };
          columnData.realWidth = getColspanRealWidth(columns2.value, colspan, cellIndex);
          const data = {
            store: props.store,
            _self: props.context || parent,
            column: columnData,
            row,
            $index,
            cellIndex,
            expanded
          };
          if (cellIndex === firstDefaultColumnIndex.value && treeRowData) {
            data.treeNode = {
              indent: treeRowData.level * indent.value,
              level: treeRowData.level
            };
            if (typeof treeRowData.expanded === "boolean") {
              data.treeNode.expanded = treeRowData.expanded;
              if ("loading" in treeRowData) {
                data.treeNode.loading = treeRowData.loading;
              }
              if ("noLazyChildren" in treeRowData) {
                data.treeNode.noLazyChildren = treeRowData.noLazyChildren;
              }
            }
          }
          const baseKey = `${$index},${cellIndex}`;
          const patchKey = columnData.columnKey || columnData.rawColumnKey || "";
          const tdChildren = cellChildren(cellIndex, column, data);
          return h$2("td", {
            style: getCellStyle($index, cellIndex, row, column),
            class: getCellClass($index, cellIndex, row, column),
            key: `${patchKey}${baseKey}`,
            rowspan,
            colspan,
            onMouseenter: ($event) => handleCellMouseEnter($event, { ...row, tooltipEffect }),
            onMouseleave: handleCellMouseLeave
          }, [tdChildren]);
        }));
      };
      const cellChildren = (cellIndex, column, data) => {
        return column.renderCell(data);
      };
      const wrappedRowRender = (row, $index) => {
        const store = props.store;
        const { isRowExpanded, assertRowKey } = store;
        const { treeData, lazyTreeNodeMap, childrenColumnName, rowKey: rowKey2 } = store.states;
        const columns2 = store.states.columns.value;
        const hasExpandColumn = columns2.some(({ type: type2 }) => type2 === "expand");
        if (hasExpandColumn) {
          const expanded = isRowExpanded(row);
          const tr = rowRender(row, $index, void 0, expanded);
          const renderExpanded = parent.renderExpanded;
          if (expanded) {
            if (!renderExpanded) {
              console.error("[Element Error]renderExpanded is required.");
              return tr;
            }
            return [
              [
                tr,
                h$2("tr", {
                  key: `expanded-row__${tr.key}`
                }, [
                  h$2("td", {
                    colspan: columns2.length,
                    class: "el-table__cell el-table__expanded-cell"
                  }, [renderExpanded({ row, $index, store, expanded })])
                ])
              ]
            ];
          } else {
            return [[tr]];
          }
        } else if (Object.keys(treeData.value).length) {
          assertRowKey();
          const key = getRowIdentity(row, rowKey2.value);
          let cur = treeData.value[key];
          let treeRowData = null;
          if (cur) {
            treeRowData = {
              expanded: cur.expanded,
              level: cur.level,
              display: true
            };
            if (typeof cur.lazy === "boolean") {
              if (typeof cur.loaded === "boolean" && cur.loaded) {
                treeRowData.noLazyChildren = !(cur.children && cur.children.length);
              }
              treeRowData.loading = cur.loading;
            }
          }
          const tmp = [rowRender(row, $index, treeRowData)];
          if (cur) {
            let i2 = 0;
            const traverse2 = (children, parent2) => {
              if (!(children && children.length && parent2))
                return;
              children.forEach((node) => {
                const innerTreeRowData = {
                  display: parent2.display && parent2.expanded,
                  level: parent2.level + 1,
                  expanded: false,
                  noLazyChildren: false,
                  loading: false
                };
                const childKey = getRowIdentity(node, rowKey2.value);
                if (childKey === void 0 || childKey === null) {
                  throw new Error("For nested data item, row-key is required.");
                }
                cur = { ...treeData.value[childKey] };
                if (cur) {
                  innerTreeRowData.expanded = cur.expanded;
                  cur.level = cur.level || innerTreeRowData.level;
                  cur.display = !!(cur.expanded && innerTreeRowData.display);
                  if (typeof cur.lazy === "boolean") {
                    if (typeof cur.loaded === "boolean" && cur.loaded) {
                      innerTreeRowData.noLazyChildren = !(cur.children && cur.children.length);
                    }
                    innerTreeRowData.loading = cur.loading;
                  }
                }
                i2++;
                tmp.push(rowRender(node, $index + i2, innerTreeRowData));
                if (cur) {
                  const nodes2 = lazyTreeNodeMap.value[childKey] || node[childrenColumnName.value];
                  traverse2(nodes2, cur);
                }
              });
            };
            cur.display = true;
            const nodes = lazyTreeNodeMap.value[key] || row[childrenColumnName.value];
            traverse2(nodes, cur);
          }
          return tmp;
        } else {
          return rowRender(row, $index, void 0);
        }
      };
      return {
        wrappedRowRender,
        tooltipContent,
        tooltipTrigger
      };
    }
    const defaultProps$2 = {
      store: {
        required: true,
        type: Object
      },
      stripe: Boolean,
      tooltipEffect: String,
      context: {
        default: () => ({}),
        type: Object
      },
      rowClassName: [String, Function],
      rowStyle: [Object, Function],
      fixed: {
        type: String,
        default: ""
      },
      highlight: Boolean
    };
    var TableBody = defineComponent({
      name: "ElTableBody",
      props: defaultProps$2,
      setup(props) {
        const instance = getCurrentInstance();
        const parent = inject(TABLE_INJECTION_KEY);
        const ns2 = useNamespace("table");
        const { wrappedRowRender, tooltipContent, tooltipTrigger } = useRender$1(props);
        const { onColumnsChange, onScrollableChange } = useLayoutObserver(parent);
        watch(props.store.states.hoverRow, (newVal, oldVal) => {
          if (!props.store.states.isComplex.value || !isClient)
            return;
          let raf = window.requestAnimationFrame;
          if (!raf) {
            raf = (fn2) => window.setTimeout(fn2, 16);
          }
          raf(() => {
            var _a2;
            const rows = (_a2 = instance == null ? void 0 : instance.vnode.el) == null ? void 0 : _a2.querySelectorAll(`.${ns2.e("row")}`);
            const oldRow = rows[oldVal];
            const newRow = rows[newVal];
            if (oldRow) {
              removeClass(oldRow, "hover-row");
            }
            if (newRow) {
              addClass(newRow, "hover-row");
            }
          });
        });
        onUnmounted(() => {
          var _a2;
          (_a2 = removePopper) == null ? void 0 : _a2();
        });
        onUpdated(() => {
          var _a2;
          (_a2 = removePopper) == null ? void 0 : _a2();
        });
        return {
          ns: ns2,
          onColumnsChange,
          onScrollableChange,
          wrappedRowRender,
          tooltipContent,
          tooltipTrigger
        };
      },
      render() {
        const { wrappedRowRender, store } = this;
        const data = store.states.data.value || [];
        return h$2("tbody", {}, [
          data.reduce((acc, row) => {
            return acc.concat(wrappedRowRender(row, acc.length));
          }, [])
        ]);
      }
    });
    function hColgroup(props) {
      const isAuto = props.tableLayout === "auto";
      let columns2 = props.columns || [];
      if (isAuto) {
        if (columns2.every((column) => column.width === void 0)) {
          columns2 = [];
        }
      }
      const getPropsData = (column) => {
        const propsData = {
          key: `${props.tableLayout}_${column.id}`,
          style: {},
          name: void 0
        };
        if (isAuto) {
          propsData.style = {
            width: `${column.width}px`
          };
        } else {
          propsData.name = column.id;
        }
        return propsData;
      };
      return h$2("colgroup", {}, columns2.map((column) => h$2("col", getPropsData(column))));
    }
    hColgroup.props = ["columns", "tableLayout"];
    function useMapState() {
      const table = inject(TABLE_INJECTION_KEY);
      const store = table == null ? void 0 : table.store;
      const leftFixedLeafCount = computed(() => {
        return store.states.fixedLeafColumnsLength.value;
      });
      const rightFixedLeafCount = computed(() => {
        return store.states.rightFixedColumns.value.length;
      });
      const columnsCount = computed(() => {
        return store.states.columns.value.length;
      });
      const leftFixedCount = computed(() => {
        return store.states.fixedColumns.value.length;
      });
      const rightFixedCount = computed(() => {
        return store.states.rightFixedColumns.value.length;
      });
      return {
        leftFixedLeafCount,
        rightFixedLeafCount,
        columnsCount,
        leftFixedCount,
        rightFixedCount,
        columns: store.states.columns
      };
    }
    function useStyle$1(props) {
      const { columns: columns2 } = useMapState();
      const ns2 = useNamespace("table");
      const getCellClasses = (columns22, cellIndex) => {
        const column = columns22[cellIndex];
        const classes = [
          ns2.e("cell"),
          column.id,
          column.align,
          column.labelClassName,
          ...getFixedColumnsClass(ns2.b(), cellIndex, column.fixed, props.store)
        ];
        if (column.className) {
          classes.push(column.className);
        }
        if (!column.children) {
          classes.push(ns2.is("leaf"));
        }
        return classes;
      };
      const getCellStyles = (column, cellIndex) => {
        const fixedStyle = getFixedColumnOffset(cellIndex, column.fixed, props.store);
        ensurePosition(fixedStyle, "left");
        ensurePosition(fixedStyle, "right");
        return fixedStyle;
      };
      return {
        getCellClasses,
        getCellStyles,
        columns: columns2
      };
    }
    var TableFooter = defineComponent({
      name: "ElTableFooter",
      props: {
        fixed: {
          type: String,
          default: ""
        },
        store: {
          required: true,
          type: Object
        },
        summaryMethod: Function,
        sumText: String,
        border: Boolean,
        defaultSort: {
          type: Object,
          default: () => {
            return {
              prop: "",
              order: ""
            };
          }
        }
      },
      setup(props) {
        const { getCellClasses, getCellStyles, columns: columns2 } = useStyle$1(props);
        const ns2 = useNamespace("table");
        return {
          ns: ns2,
          getCellClasses,
          getCellStyles,
          columns: columns2
        };
      },
      render() {
        const {
          columns: columns2,
          getCellStyles,
          getCellClasses,
          summaryMethod,
          sumText,
          ns: ns2
        } = this;
        const data = this.store.states.data.value;
        let sums = [];
        if (summaryMethod) {
          sums = summaryMethod({
            columns: columns2,
            data
          });
        } else {
          columns2.forEach((column, index2) => {
            if (index2 === 0) {
              sums[index2] = sumText;
              return;
            }
            const values = data.map((item) => Number(item[column.property]));
            const precisions = [];
            let notNumber = true;
            values.forEach((value) => {
              if (!Number.isNaN(+value)) {
                notNumber = false;
                const decimal = `${value}`.split(".")[1];
                precisions.push(decimal ? decimal.length : 0);
              }
            });
            const precision = Math.max.apply(null, precisions);
            if (!notNumber) {
              sums[index2] = values.reduce((prev, curr) => {
                const value = Number(curr);
                if (!Number.isNaN(+value)) {
                  return Number.parseFloat((prev + curr).toFixed(Math.min(precision, 20)));
                } else {
                  return prev;
                }
              }, 0);
            } else {
              sums[index2] = "";
            }
          });
        }
        return h$2("table", {
          class: ns2.e("footer"),
          cellspacing: "0",
          cellpadding: "0",
          border: "0"
        }, [
          hColgroup({
            columns: columns2
          }),
          h$2("tbody", [
            h$2("tr", {}, [
              ...columns2.map((column, cellIndex) => h$2("td", {
                key: cellIndex,
                colspan: column.colSpan,
                rowspan: column.rowSpan,
                class: getCellClasses(columns2, cellIndex),
                style: getCellStyles(column, cellIndex)
              }, [
                h$2("div", {
                  class: ["cell", column.labelClassName]
                }, [sums[cellIndex]])
              ]))
            ])
          ])
        ]);
      }
    });
    function useUtils(store) {
      const setCurrentRow = (row) => {
        store.commit("setCurrentRow", row);
      };
      const getSelectionRows = () => {
        return store.getSelectionRows();
      };
      const toggleRowSelection = (row, selected) => {
        store.toggleRowSelection(row, selected, false);
        store.updateAllSelected();
      };
      const clearSelection = () => {
        store.clearSelection();
      };
      const clearFilter = (columnKeys) => {
        store.clearFilter(columnKeys);
      };
      const toggleAllSelection = () => {
        store.commit("toggleAllSelection");
      };
      const toggleRowExpansion = (row, expanded) => {
        store.toggleRowExpansionAdapter(row, expanded);
      };
      const clearSort = () => {
        store.clearSort();
      };
      const sort = (prop, order) => {
        store.commit("sort", { prop, order });
      };
      return {
        setCurrentRow,
        getSelectionRows,
        toggleRowSelection,
        clearSelection,
        clearFilter,
        toggleAllSelection,
        toggleRowExpansion,
        clearSort,
        sort
      };
    }
    function useStyle(props, layout2, store, table) {
      const isHidden2 = ref(false);
      const renderExpanded = ref(null);
      const resizeProxyVisible = ref(false);
      const setDragVisible = (visible) => {
        resizeProxyVisible.value = visible;
      };
      const resizeState = ref({
        width: null,
        height: null,
        headerHeight: null
      });
      const isGroup = ref(false);
      const scrollbarViewStyle = {
        display: "inline-block",
        verticalAlign: "middle"
      };
      const tableWidth = ref();
      const tableScrollHeight = ref(0);
      const bodyScrollHeight = ref(0);
      const headerScrollHeight = ref(0);
      const footerScrollHeight = ref(0);
      watchEffect(() => {
        layout2.setHeight(props.height);
      });
      watchEffect(() => {
        layout2.setMaxHeight(props.maxHeight);
      });
      watch(() => [props.currentRowKey, store.states.rowKey], ([currentRowKey, rowKey2]) => {
        if (!unref(rowKey2))
          return;
        store.setCurrentRowKey(`${currentRowKey}`);
      }, {
        immediate: true
      });
      watch(() => props.data, (data) => {
        table.store.commit("setData", data);
      }, {
        immediate: true,
        deep: true
      });
      watchEffect(() => {
        if (props.expandRowKeys) {
          store.setExpandRowKeysAdapter(props.expandRowKeys);
        }
      });
      const handleMouseLeave = () => {
        table.store.commit("setHoverRow", null);
        if (table.hoverState)
          table.hoverState = null;
      };
      const handleHeaderFooterMousewheel = (event, data) => {
        const { pixelX, pixelY } = data;
        if (Math.abs(pixelX) >= Math.abs(pixelY)) {
          table.refs.bodyWrapper.scrollLeft += data.pixelX / 5;
        }
      };
      const shouldUpdateHeight = computed(() => {
        return props.height || props.maxHeight || store.states.fixedColumns.value.length > 0 || store.states.rightFixedColumns.value.length > 0;
      });
      const tableBodyStyles = computed(() => {
        return {
          width: layout2.bodyWidth.value ? `${layout2.bodyWidth.value}px` : ""
        };
      });
      const doLayout = () => {
        if (shouldUpdateHeight.value) {
          layout2.updateElsHeight();
        }
        layout2.updateColumnsWidth();
        requestAnimationFrame(syncPostion);
      };
      onMounted(async () => {
        await nextTick$1();
        store.updateColumns();
        bindEvents();
        requestAnimationFrame(doLayout);
        const el = table.vnode.el;
        const tableHeader = table.refs.headerWrapper;
        if (props.flexible && el && el.parentElement) {
          el.parentElement.style.minWidth = "0";
        }
        resizeState.value = {
          width: tableWidth.value = el.offsetWidth,
          height: el.offsetHeight,
          headerHeight: props.showHeader && tableHeader ? tableHeader.offsetHeight : null
        };
        store.states.columns.value.forEach((column) => {
          if (column.filteredValue && column.filteredValue.length) {
            table.store.commit("filterChange", {
              column,
              values: column.filteredValue,
              silent: true
            });
          }
        });
        table.$ready = true;
      });
      const setScrollClassByEl = (el, className) => {
        if (!el)
          return;
        const classList = Array.from(el.classList).filter((item) => !item.startsWith("is-scrolling-"));
        classList.push(layout2.scrollX.value ? className : "is-scrolling-none");
        el.className = classList.join(" ");
      };
      const setScrollClass = (className) => {
        const { tableWrapper } = table.refs;
        setScrollClassByEl(tableWrapper, className);
      };
      const hasScrollClass = (className) => {
        const { tableWrapper } = table.refs;
        return !!(tableWrapper && tableWrapper.classList.contains(className));
      };
      const syncPostion = function() {
        if (!table.refs.scrollBarRef)
          return;
        if (!layout2.scrollX.value) {
          const scrollingNoneClass = "is-scrolling-none";
          if (!hasScrollClass(scrollingNoneClass)) {
            setScrollClass(scrollingNoneClass);
          }
          return;
        }
        const scrollContainer = table.refs.scrollBarRef.wrap$;
        if (!scrollContainer)
          return;
        const { scrollLeft, offsetWidth, scrollWidth } = scrollContainer;
        const { headerWrapper, footerWrapper } = table.refs;
        if (headerWrapper)
          headerWrapper.scrollLeft = scrollLeft;
        if (footerWrapper)
          footerWrapper.scrollLeft = scrollLeft;
        const maxScrollLeftPosition = scrollWidth - offsetWidth - 1;
        if (scrollLeft >= maxScrollLeftPosition) {
          setScrollClass("is-scrolling-right");
        } else if (scrollLeft === 0) {
          setScrollClass("is-scrolling-left");
        } else {
          setScrollClass("is-scrolling-middle");
        }
      };
      const bindEvents = () => {
        if (!table.refs.scrollBarRef)
          return;
        if (table.refs.scrollBarRef.wrap$) {
          useEventListener(table.refs.scrollBarRef.wrap$, "scroll", syncPostion, {
            passive: true
          });
        }
        if (props.fit) {
          useResizeObserver(table.vnode.el, resizeListener);
        } else {
          useEventListener(window, "resize", resizeListener);
        }
      };
      const resizeListener = () => {
        var _a2, _b;
        if (!table.$ready)
          return;
        let shouldUpdateLayout = false;
        const el = table.vnode.el;
        const {
          width: oldWidth,
          height: oldHeight,
          headerHeight: oldHeaderHeight
        } = resizeState.value;
        const width = tableWidth.value = el.offsetWidth;
        if (oldWidth !== width) {
          shouldUpdateLayout = true;
        }
        const height = el.offsetHeight;
        if ((props.height || shouldUpdateHeight.value) && oldHeight !== height) {
          shouldUpdateLayout = true;
        }
        const tableHeader = table.refs.headerWrapper;
        if (props.showHeader && (tableHeader == null ? void 0 : tableHeader.offsetHeight) !== oldHeaderHeight) {
          shouldUpdateLayout = true;
        }
        tableScrollHeight.value = ((_a2 = table.refs.tableWrapper) == null ? void 0 : _a2.scrollHeight) || 0;
        headerScrollHeight.value = (tableHeader == null ? void 0 : tableHeader.scrollHeight) || 0;
        footerScrollHeight.value = ((_b = table.refs.footerWrapper) == null ? void 0 : _b.scrollHeight) || 0;
        bodyScrollHeight.value = tableScrollHeight.value - headerScrollHeight.value - footerScrollHeight.value;
        if (shouldUpdateLayout) {
          resizeState.value = {
            width,
            height,
            headerHeight: props.showHeader && (tableHeader == null ? void 0 : tableHeader.offsetHeight) || 0
          };
          doLayout();
        }
      };
      const tableSize = useSize();
      const bodyWidth = computed(() => {
        const { bodyWidth: bodyWidth_, scrollY, gutterWidth } = layout2;
        return bodyWidth_.value ? `${bodyWidth_.value - (scrollY.value ? gutterWidth : 0)}px` : "";
      });
      const tableLayout = computed(() => {
        if (props.maxHeight)
          return "fixed";
        return props.tableLayout;
      });
      const emptyBlockStyle = computed(() => {
        if (props.data && props.data.length)
          return null;
        let height = "100%";
        if (bodyScrollHeight.value) {
          height = `${bodyScrollHeight.value}px`;
        }
        const width = tableWidth.value;
        return {
          width: width ? `${width}px` : "",
          height
        };
      });
      const tableInnerStyle = computed(() => {
        if (props.height) {
          return {
            height: !Number.isNaN(Number(props.height)) ? `${props.height}px` : props.height
          };
        }
        if (props.maxHeight) {
          return {
            maxHeight: !Number.isNaN(Number(props.maxHeight)) ? `${props.maxHeight}px` : props.maxHeight
          };
        }
        return {};
      });
      const scrollbarStyle = computed(() => {
        var _a2, _b;
        if (props.height) {
          return {
            height: "100%"
          };
        }
        if (props.maxHeight) {
          if (!Number.isNaN(Number(props.maxHeight))) {
            const headerHeight = ((_a2 = table.refs.headerWrapper) == null ? void 0 : _a2.scrollHeight) || 0;
            const footerHeight = ((_b = table.refs.footerWrapper) == null ? void 0 : _b.scrollHeight) || 0;
            const maxHeight = props.maxHeight;
            const reachMaxHeight = tableScrollHeight.value >= Number(maxHeight);
            if (reachMaxHeight) {
              return {
                maxHeight: `${tableScrollHeight.value - headerHeight - footerHeight}px`
              };
            }
          } else {
            return {
              maxHeight: `calc(${props.maxHeight} - ${headerScrollHeight.value + footerScrollHeight.value}px)`
            };
          }
        }
        return {};
      });
      const handleFixedMousewheel = (event, data) => {
        const bodyWrapper = table.refs.bodyWrapper;
        if (Math.abs(data.spinY) > 0) {
          const currentScrollTop = bodyWrapper.scrollTop;
          if (data.pixelY < 0 && currentScrollTop !== 0) {
            event.preventDefault();
          }
          if (data.pixelY > 0 && bodyWrapper.scrollHeight - bodyWrapper.clientHeight > currentScrollTop) {
            event.preventDefault();
          }
          bodyWrapper.scrollTop += Math.ceil(data.pixelY / 5);
        } else {
          bodyWrapper.scrollLeft += Math.ceil(data.pixelX / 5);
        }
      };
      return {
        isHidden: isHidden2,
        renderExpanded,
        setDragVisible,
        isGroup,
        handleMouseLeave,
        handleHeaderFooterMousewheel,
        tableSize,
        emptyBlockStyle,
        handleFixedMousewheel,
        resizeProxyVisible,
        bodyWidth,
        resizeState,
        doLayout,
        tableBodyStyles,
        tableLayout,
        scrollbarViewStyle,
        tableInnerStyle,
        scrollbarStyle
      };
    }
    var defaultProps$1 = {
      data: {
        type: Array,
        default: () => []
      },
      size: String,
      width: [String, Number],
      height: [String, Number],
      maxHeight: [String, Number],
      fit: {
        type: Boolean,
        default: true
      },
      stripe: Boolean,
      border: Boolean,
      rowKey: [String, Function],
      showHeader: {
        type: Boolean,
        default: true
      },
      showSummary: Boolean,
      sumText: String,
      summaryMethod: Function,
      rowClassName: [String, Function],
      rowStyle: [Object, Function],
      cellClassName: [String, Function],
      cellStyle: [Object, Function],
      headerRowClassName: [String, Function],
      headerRowStyle: [Object, Function],
      headerCellClassName: [String, Function],
      headerCellStyle: [Object, Function],
      highlightCurrentRow: Boolean,
      currentRowKey: [String, Number],
      emptyText: String,
      expandRowKeys: Array,
      defaultExpandAll: Boolean,
      defaultSort: Object,
      tooltipEffect: String,
      spanMethod: Function,
      selectOnIndeterminate: {
        type: Boolean,
        default: true
      },
      indent: {
        type: Number,
        default: 16
      },
      treeProps: {
        type: Object,
        default: () => {
          return {
            hasChildren: "hasChildren",
            children: "children"
          };
        }
      },
      lazy: Boolean,
      load: Function,
      style: {
        type: Object,
        default: () => ({})
      },
      className: {
        type: String,
        default: ""
      },
      tableLayout: {
        type: String,
        default: "fixed"
      },
      scrollbarAlwaysOn: {
        type: Boolean,
        default: false
      },
      flexible: Boolean
    };
    const useScrollbar$1 = () => {
      const scrollBarRef = ref();
      const scrollTo = (options, yCoord) => {
        const scrollbar = scrollBarRef.value;
        if (scrollbar) {
          scrollbar.scrollTo(options, yCoord);
        }
      };
      const setScrollPosition = (position, offset2) => {
        const scrollbar = scrollBarRef.value;
        if (scrollbar && isNumber$1(offset2) && ["Top", "Left"].includes(position)) {
          scrollbar[`setScroll${position}`](offset2);
        }
      };
      const setScrollTop = (top) => setScrollPosition("Top", top);
      const setScrollLeft = (left2) => setScrollPosition("Left", left2);
      return {
        scrollBarRef,
        scrollTo,
        setScrollTop,
        setScrollLeft
      };
    };
    let tableIdSeed = 1;
    const _sfc_main$Q = defineComponent({
      name: "ElTable",
      directives: {
        Mousewheel
      },
      components: {
        TableHeader,
        TableBody,
        TableFooter,
        ElScrollbar,
        hColgroup
      },
      props: defaultProps$1,
      emits: [
        "select",
        "select-all",
        "selection-change",
        "cell-mouse-enter",
        "cell-mouse-leave",
        "cell-contextmenu",
        "cell-click",
        "cell-dblclick",
        "row-click",
        "row-contextmenu",
        "row-dblclick",
        "header-click",
        "header-contextmenu",
        "sort-change",
        "filter-change",
        "current-change",
        "header-dragend",
        "expand-change"
      ],
      setup(props) {
        const { t } = useLocale();
        const ns2 = useNamespace("table");
        const table = getCurrentInstance();
        provide(TABLE_INJECTION_KEY, table);
        const store = createStore(table, props);
        table.store = store;
        const layout2 = new TableLayout({
          store: table.store,
          table,
          fit: props.fit,
          showHeader: props.showHeader
        });
        table.layout = layout2;
        const isEmpty2 = computed(() => (store.states.data.value || []).length === 0);
        const {
          setCurrentRow,
          getSelectionRows,
          toggleRowSelection,
          clearSelection,
          clearFilter,
          toggleAllSelection,
          toggleRowExpansion,
          clearSort,
          sort
        } = useUtils(store);
        const {
          isHidden: isHidden2,
          renderExpanded,
          setDragVisible,
          isGroup,
          handleMouseLeave,
          handleHeaderFooterMousewheel,
          tableSize,
          emptyBlockStyle,
          handleFixedMousewheel,
          resizeProxyVisible,
          bodyWidth,
          resizeState,
          doLayout,
          tableBodyStyles,
          tableLayout,
          scrollbarViewStyle,
          tableInnerStyle,
          scrollbarStyle
        } = useStyle(props, layout2, store, table);
        const { scrollBarRef, scrollTo, setScrollLeft, setScrollTop } = useScrollbar$1();
        const debouncedUpdateLayout = debounce(doLayout, 50);
        const tableId = `el-table_${tableIdSeed++}`;
        table.tableId = tableId;
        table.state = {
          isGroup,
          resizeState,
          doLayout,
          debouncedUpdateLayout
        };
        const computedSumText = computed(() => props.sumText || t("el.table.sumText"));
        const computedEmptyText = computed(() => {
          return props.emptyText || t("el.table.emptyText");
        });
        return {
          ns: ns2,
          layout: layout2,
          store,
          handleHeaderFooterMousewheel,
          handleMouseLeave,
          tableId,
          tableSize,
          isHidden: isHidden2,
          isEmpty: isEmpty2,
          renderExpanded,
          resizeProxyVisible,
          resizeState,
          isGroup,
          bodyWidth,
          tableBodyStyles,
          emptyBlockStyle,
          debouncedUpdateLayout,
          handleFixedMousewheel,
          setCurrentRow,
          getSelectionRows,
          toggleRowSelection,
          clearSelection,
          clearFilter,
          toggleAllSelection,
          toggleRowExpansion,
          clearSort,
          doLayout,
          sort,
          t,
          setDragVisible,
          context: table,
          computedSumText,
          computedEmptyText,
          tableLayout,
          scrollbarViewStyle,
          tableInnerStyle,
          scrollbarStyle,
          scrollBarRef,
          scrollTo,
          setScrollLeft,
          setScrollTop
        };
      }
    });
    const _hoisted_1$i = ["data-prefix"];
    const _hoisted_2$a = {
      ref: "hiddenColumns",
      class: "hidden-columns"
    };
    function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_hColgroup = resolveComponent("hColgroup");
      const _component_table_header = resolveComponent("table-header");
      const _component_table_body = resolveComponent("table-body");
      const _component_el_scrollbar = resolveComponent("el-scrollbar");
      const _component_table_footer = resolveComponent("table-footer");
      const _directive_mousewheel = resolveDirective("mousewheel");
      return openBlock(), createElementBlock("div", {
        ref: "tableWrapper",
        class: normalizeClass([
          {
            [_ctx.ns.m("fit")]: _ctx.fit,
            [_ctx.ns.m("striped")]: _ctx.stripe,
            [_ctx.ns.m("border")]: _ctx.border || _ctx.isGroup,
            [_ctx.ns.m("hidden")]: _ctx.isHidden,
            [_ctx.ns.m("group")]: _ctx.isGroup,
            [_ctx.ns.m("fluid-height")]: _ctx.maxHeight,
            [_ctx.ns.m("scrollable-x")]: _ctx.layout.scrollX.value,
            [_ctx.ns.m("scrollable-y")]: _ctx.layout.scrollY.value,
            [_ctx.ns.m("enable-row-hover")]: !_ctx.store.states.isComplex.value,
            [_ctx.ns.m("enable-row-transition")]: (_ctx.store.states.data.value || []).length !== 0 && (_ctx.store.states.data.value || []).length < 100,
            "has-footer": _ctx.showSummary
          },
          _ctx.ns.m(_ctx.tableSize),
          _ctx.className,
          _ctx.ns.b(),
          _ctx.ns.m(`layout-${_ctx.tableLayout}`)
        ]),
        style: normalizeStyle(_ctx.style),
        "data-prefix": _ctx.ns.namespace.value,
        onMouseleave: _cache[0] || (_cache[0] = ($event) => _ctx.handleMouseLeave())
      }, [
        createBaseVNode("div", {
          class: normalizeClass(_ctx.ns.e("inner-wrapper")),
          style: normalizeStyle(_ctx.tableInnerStyle)
        }, [
          createBaseVNode("div", _hoisted_2$a, [
            renderSlot(_ctx.$slots, "default")
          ], 512),
          _ctx.showHeader && _ctx.tableLayout === "fixed" ? withDirectives((openBlock(), createElementBlock("div", {
            key: 0,
            ref: "headerWrapper",
            class: normalizeClass(_ctx.ns.e("header-wrapper"))
          }, [
            createBaseVNode("table", {
              ref: "tableHeader",
              class: normalizeClass(_ctx.ns.e("header")),
              style: normalizeStyle(_ctx.tableBodyStyles),
              border: "0",
              cellpadding: "0",
              cellspacing: "0"
            }, [
              createVNode(_component_hColgroup, {
                columns: _ctx.store.states.columns.value,
                "table-layout": _ctx.tableLayout
              }, null, 8, ["columns", "table-layout"]),
              createVNode(_component_table_header, {
                ref: "tableHeaderRef",
                border: _ctx.border,
                "default-sort": _ctx.defaultSort,
                store: _ctx.store,
                onSetDragVisible: _ctx.setDragVisible
              }, null, 8, ["border", "default-sort", "store", "onSetDragVisible"])
            ], 6)
          ], 2)), [
            [_directive_mousewheel, _ctx.handleHeaderFooterMousewheel]
          ]) : createCommentVNode("v-if", true),
          createBaseVNode("div", {
            ref: "bodyWrapper",
            class: normalizeClass(_ctx.ns.e("body-wrapper"))
          }, [
            createVNode(_component_el_scrollbar, {
              ref: "scrollBarRef",
              "view-style": _ctx.scrollbarViewStyle,
              "wrap-style": _ctx.scrollbarStyle,
              always: _ctx.scrollbarAlwaysOn
            }, {
              default: withCtx(() => [
                createBaseVNode("table", {
                  ref: "tableBody",
                  class: normalizeClass(_ctx.ns.e("body")),
                  cellspacing: "0",
                  cellpadding: "0",
                  border: "0",
                  style: normalizeStyle({
                    width: _ctx.bodyWidth,
                    tableLayout: _ctx.tableLayout
                  })
                }, [
                  createVNode(_component_hColgroup, {
                    columns: _ctx.store.states.columns.value,
                    "table-layout": _ctx.tableLayout
                  }, null, 8, ["columns", "table-layout"]),
                  _ctx.showHeader && _ctx.tableLayout === "auto" ? (openBlock(), createBlock(_component_table_header, {
                    key: 0,
                    ref: "tableHeaderRef",
                    border: _ctx.border,
                    "default-sort": _ctx.defaultSort,
                    store: _ctx.store,
                    onSetDragVisible: _ctx.setDragVisible
                  }, null, 8, ["border", "default-sort", "store", "onSetDragVisible"])) : createCommentVNode("v-if", true),
                  createVNode(_component_table_body, {
                    context: _ctx.context,
                    highlight: _ctx.highlightCurrentRow,
                    "row-class-name": _ctx.rowClassName,
                    "tooltip-effect": _ctx.tooltipEffect,
                    "row-style": _ctx.rowStyle,
                    store: _ctx.store,
                    stripe: _ctx.stripe
                  }, null, 8, ["context", "highlight", "row-class-name", "tooltip-effect", "row-style", "store", "stripe"])
                ], 6),
                _ctx.isEmpty ? (openBlock(), createElementBlock("div", {
                  key: 0,
                  ref: "emptyBlock",
                  style: normalizeStyle(_ctx.emptyBlockStyle),
                  class: normalizeClass(_ctx.ns.e("empty-block"))
                }, [
                  createBaseVNode("span", {
                    class: normalizeClass(_ctx.ns.e("empty-text"))
                  }, [
                    renderSlot(_ctx.$slots, "empty", {}, () => [
                      createTextVNode(toDisplayString$1(_ctx.computedEmptyText), 1)
                    ])
                  ], 2)
                ], 6)) : createCommentVNode("v-if", true),
                _ctx.$slots.append ? (openBlock(), createElementBlock("div", {
                  key: 1,
                  ref: "appendWrapper",
                  class: normalizeClass(_ctx.ns.e("append-wrapper"))
                }, [
                  renderSlot(_ctx.$slots, "append")
                ], 2)) : createCommentVNode("v-if", true)
              ]),
              _: 3
            }, 8, ["view-style", "wrap-style", "always"])
          ], 2),
          _ctx.showSummary ? withDirectives((openBlock(), createElementBlock("div", {
            key: 1,
            ref: "footerWrapper",
            class: normalizeClass(_ctx.ns.e("footer-wrapper"))
          }, [
            createVNode(_component_table_footer, {
              border: _ctx.border,
              "default-sort": _ctx.defaultSort,
              store: _ctx.store,
              style: normalizeStyle(_ctx.tableBodyStyles),
              "sum-text": _ctx.computedSumText,
              "summary-method": _ctx.summaryMethod
            }, null, 8, ["border", "default-sort", "store", "style", "sum-text", "summary-method"])
          ], 2)), [
            [vShow, !_ctx.isEmpty],
            [_directive_mousewheel, _ctx.handleHeaderFooterMousewheel]
          ]) : createCommentVNode("v-if", true),
          _ctx.border || _ctx.isGroup ? (openBlock(), createElementBlock("div", {
            key: 2,
            class: normalizeClass(_ctx.ns.e("border-left-patch"))
          }, null, 2)) : createCommentVNode("v-if", true)
        ], 6),
        withDirectives(createBaseVNode("div", {
          ref: "resizeProxy",
          class: normalizeClass(_ctx.ns.e("column-resize-proxy"))
        }, null, 2), [
          [vShow, _ctx.resizeProxyVisible]
        ])
      ], 46, _hoisted_1$i);
    }
    var Table = /* @__PURE__ */ _export_sfc$1(_sfc_main$Q, [["render", _sfc_render$6], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/table/src/table.vue"]]);
    const defaultClassNames = {
      selection: "table-column--selection",
      expand: "table__expand-column"
    };
    const cellStarts = {
      default: {
        order: ""
      },
      selection: {
        width: 48,
        minWidth: 48,
        realWidth: 48,
        order: ""
      },
      expand: {
        width: 48,
        minWidth: 48,
        realWidth: 48,
        order: ""
      },
      index: {
        width: 48,
        minWidth: 48,
        realWidth: 48,
        order: ""
      }
    };
    const getDefaultClassName = (type2) => {
      return defaultClassNames[type2] || "";
    };
    const cellForced = {
      selection: {
        renderHeader({ store }) {
          function isDisabled() {
            return store.states.data.value && store.states.data.value.length === 0;
          }
          return h$2(ElCheckbox, {
            disabled: isDisabled(),
            size: store.states.tableSize.value,
            indeterminate: store.states.selection.value.length > 0 && !store.states.isAllSelected.value,
            "onUpdate:modelValue": store.toggleAllSelection,
            modelValue: store.states.isAllSelected.value
          });
        },
        renderCell({
          row,
          column,
          store,
          $index
        }) {
          return h$2(ElCheckbox, {
            disabled: column.selectable ? !column.selectable.call(null, row, $index) : false,
            size: store.states.tableSize.value,
            onChange: () => {
              store.commit("rowSelectedChanged", row);
            },
            onClick: (event) => event.stopPropagation(),
            modelValue: store.isSelected(row)
          });
        },
        sortable: false,
        resizable: false
      },
      index: {
        renderHeader({ column }) {
          return column.label || "#";
        },
        renderCell({
          column,
          $index
        }) {
          let i2 = $index + 1;
          const index2 = column.index;
          if (typeof index2 === "number") {
            i2 = $index + index2;
          } else if (typeof index2 === "function") {
            i2 = index2($index);
          }
          return h$2("div", {}, [i2]);
        },
        sortable: false
      },
      expand: {
        renderHeader({ column }) {
          return column.label || "";
        },
        renderCell({
          row,
          store,
          expanded
        }) {
          const { ns: ns2 } = store;
          const classes = [ns2.e("expand-icon")];
          if (expanded) {
            classes.push(ns2.em("expand-icon", "expanded"));
          }
          const callback = function(e2) {
            e2.stopPropagation();
            store.toggleRowExpansion(row);
          };
          return h$2("div", {
            class: classes,
            onClick: callback
          }, {
            default: () => {
              return [
                h$2(ElIcon, null, {
                  default: () => {
                    return [h$2(arrow_right_default)];
                  }
                })
              ];
            }
          });
        },
        sortable: false,
        resizable: false
      }
    };
    function defaultRenderCell({
      row,
      column,
      $index
    }) {
      var _a2;
      const property = column.property;
      const value = property && getProp(row, property).value;
      if (column && column.formatter) {
        return column.formatter(row, column, value, $index);
      }
      return ((_a2 = value == null ? void 0 : value.toString) == null ? void 0 : _a2.call(value)) || "";
    }
    function treeCellPrefix({
      row,
      treeNode,
      store
    }, createPlacehoder = false) {
      const { ns: ns2 } = store;
      if (!treeNode) {
        if (createPlacehoder) {
          return [
            h$2("span", {
              class: ns2.e("placeholder")
            })
          ];
        }
        return null;
      }
      const ele = [];
      const callback = function(e2) {
        e2.stopPropagation();
        store.loadOrToggle(row);
      };
      if (treeNode.indent) {
        ele.push(h$2("span", {
          class: ns2.e("indent"),
          style: { "padding-left": `${treeNode.indent}px` }
        }));
      }
      if (typeof treeNode.expanded === "boolean" && !treeNode.noLazyChildren) {
        const expandClasses = [
          ns2.e("expand-icon"),
          treeNode.expanded ? ns2.em("expand-icon", "expanded") : ""
        ];
        let icon = arrow_right_default;
        if (treeNode.loading) {
          icon = loading_default;
        }
        ele.push(h$2("div", {
          class: expandClasses,
          onClick: callback
        }, {
          default: () => {
            return [
              h$2(ElIcon, { class: { [ns2.is("loading")]: treeNode.loading } }, {
                default: () => [h$2(icon)]
              })
            ];
          }
        }));
      } else {
        ele.push(h$2("span", {
          class: ns2.e("placeholder")
        }));
      }
      return ele;
    }
    function getAllAliases(props, aliases) {
      return props.reduce((prev, cur) => {
        prev[cur] = cur;
        return prev;
      }, aliases);
    }
    function useWatcher(owner, props_) {
      const instance = getCurrentInstance();
      const registerComplexWatchers = () => {
        const props = ["fixed"];
        const aliases = {
          realWidth: "width",
          realMinWidth: "minWidth"
        };
        const allAliases = getAllAliases(props, aliases);
        Object.keys(allAliases).forEach((key) => {
          const columnKey = aliases[key];
          if (hasOwn$2(props_, columnKey)) {
            watch(() => props_[columnKey], (newVal) => {
              let value = newVal;
              if (columnKey === "width" && key === "realWidth") {
                value = parseWidth(newVal);
              }
              if (columnKey === "minWidth" && key === "realMinWidth") {
                value = parseMinWidth(newVal);
              }
              instance.columnConfig.value[columnKey] = value;
              instance.columnConfig.value[key] = value;
              const updateColumns = columnKey === "fixed";
              owner.value.store.scheduleLayout(updateColumns);
            });
          }
        });
      };
      const registerNormalWatchers = () => {
        const props = [
          "label",
          "filters",
          "filterMultiple",
          "sortable",
          "index",
          "formatter",
          "className",
          "labelClassName",
          "showOverflowTooltip"
        ];
        const aliases = {
          property: "prop",
          align: "realAlign",
          headerAlign: "realHeaderAlign"
        };
        const allAliases = getAllAliases(props, aliases);
        Object.keys(allAliases).forEach((key) => {
          const columnKey = aliases[key];
          if (hasOwn$2(props_, columnKey)) {
            watch(() => props_[columnKey], (newVal) => {
              instance.columnConfig.value[key] = newVal;
            });
          }
        });
      };
      return {
        registerComplexWatchers,
        registerNormalWatchers
      };
    }
    function useRender(props, slots, owner) {
      const instance = getCurrentInstance();
      const columnId = ref("");
      const isSubColumn = ref(false);
      const realAlign = ref();
      const realHeaderAlign = ref();
      const ns2 = useNamespace("table");
      watchEffect(() => {
        realAlign.value = props.align ? `is-${props.align}` : null;
        realAlign.value;
      });
      watchEffect(() => {
        realHeaderAlign.value = props.headerAlign ? `is-${props.headerAlign}` : realAlign.value;
        realHeaderAlign.value;
      });
      const columnOrTableParent = computed(() => {
        let parent = instance.vnode.vParent || instance.parent;
        while (parent && !parent.tableId && !parent.columnId) {
          parent = parent.vnode.vParent || parent.parent;
        }
        return parent;
      });
      const hasTreeColumn = computed(() => {
        const { store } = instance.parent;
        if (!store)
          return false;
        const { treeData } = store.states;
        const treeDataValue = treeData.value;
        return treeDataValue && Object.keys(treeDataValue).length > 0;
      });
      const realWidth = ref(parseWidth(props.width));
      const realMinWidth = ref(parseMinWidth(props.minWidth));
      const setColumnWidth = (column) => {
        if (realWidth.value)
          column.width = realWidth.value;
        if (realMinWidth.value) {
          column.minWidth = realMinWidth.value;
        }
        if (!column.minWidth) {
          column.minWidth = 80;
        }
        column.realWidth = Number(column.width === void 0 ? column.minWidth : column.width);
        return column;
      };
      const setColumnForcedProps = (column) => {
        const type2 = column.type;
        const source = cellForced[type2] || {};
        Object.keys(source).forEach((prop) => {
          const value = source[prop];
          if (prop !== "className" && value !== void 0) {
            column[prop] = value;
          }
        });
        const className = getDefaultClassName(type2);
        if (className) {
          const forceClass = `${unref(ns2.namespace)}-${className}`;
          column.className = column.className ? `${column.className} ${forceClass}` : forceClass;
        }
        return column;
      };
      const checkSubColumn = (children) => {
        if (Array.isArray(children)) {
          children.forEach((child) => check(child));
        } else {
          check(children);
        }
        function check(item) {
          var _a2;
          if (((_a2 = item == null ? void 0 : item.type) == null ? void 0 : _a2.name) === "ElTableColumn") {
            item.vParent = instance;
          }
        }
      };
      const setColumnRenders = (column) => {
        if (props.renderHeader)
          ;
        else if (column.type !== "selection") {
          column.renderHeader = (scope) => {
            instance.columnConfig.value["label"];
            const renderHeader = slots.header;
            return renderHeader ? renderHeader(scope) : column.label;
          };
        }
        let originRenderCell = column.renderCell;
        const hasTreeColumnValue = hasTreeColumn.value;
        if (column.type === "expand") {
          column.renderCell = (data) => h$2("div", {
            class: "cell"
          }, [originRenderCell(data)]);
          owner.value.renderExpanded = (data) => {
            return slots.default ? slots.default(data) : slots.default;
          };
        } else {
          originRenderCell = originRenderCell || defaultRenderCell;
          column.renderCell = (data) => {
            let children = null;
            if (slots.default) {
              const vnodes = slots.default(data);
              children = vnodes.some((v2) => v2.type !== Comment) ? vnodes : originRenderCell(data);
            } else {
              children = originRenderCell(data);
            }
            const shouldCreatePlaceholder = hasTreeColumnValue && data.cellIndex === 0;
            const prefix = treeCellPrefix(data, shouldCreatePlaceholder);
            const props2 = {
              class: "cell",
              style: {}
            };
            if (column.showOverflowTooltip) {
              props2.class = `${props2.class} ${unref(ns2.namespace)}-tooltip`;
              props2.style = {
                width: `${(data.column.realWidth || Number(data.column.width)) - 1}px`
              };
            }
            checkSubColumn(children);
            return h$2("div", props2, [prefix, children]);
          };
        }
        return column;
      };
      const getPropsData = (...propsKey) => {
        return propsKey.reduce((prev, cur) => {
          if (Array.isArray(cur)) {
            cur.forEach((key) => {
              prev[key] = props[key];
            });
          }
          return prev;
        }, {});
      };
      const getColumnElIndex = (children, child) => {
        return Array.prototype.indexOf.call(children, child);
      };
      return {
        columnId,
        realAlign,
        isSubColumn,
        realHeaderAlign,
        columnOrTableParent,
        setColumnWidth,
        setColumnForcedProps,
        setColumnRenders,
        getPropsData,
        getColumnElIndex
      };
    }
    var defaultProps = {
      type: {
        type: String,
        default: "default"
      },
      label: String,
      className: String,
      labelClassName: String,
      property: String,
      prop: String,
      width: {
        type: [String, Number],
        default: ""
      },
      minWidth: {
        type: [String, Number],
        default: ""
      },
      renderHeader: Function,
      sortable: {
        type: [Boolean, String],
        default: false
      },
      sortMethod: Function,
      sortBy: [String, Function, Array],
      resizable: {
        type: Boolean,
        default: true
      },
      columnKey: String,
      align: String,
      headerAlign: String,
      showTooltipWhenOverflow: Boolean,
      showOverflowTooltip: Boolean,
      fixed: [Boolean, String],
      formatter: Function,
      selectable: Function,
      reserveSelection: Boolean,
      filterMethod: Function,
      filteredValue: Array,
      filters: Array,
      filterPlacement: String,
      filterMultiple: {
        type: Boolean,
        default: true
      },
      index: [Number, Function],
      sortOrders: {
        type: Array,
        default: () => {
          return ["ascending", "descending", null];
        },
        validator: (val) => {
          return val.every((order) => ["ascending", "descending", null].includes(order));
        }
      }
    };
    let columnIdSeed = 1;
    var ElTableColumn$1 = defineComponent({
      name: "ElTableColumn",
      components: {
        ElCheckbox
      },
      props: defaultProps,
      setup(props, { slots }) {
        const instance = getCurrentInstance();
        const columnConfig = ref({});
        const owner = computed(() => {
          let parent2 = instance.parent;
          while (parent2 && !parent2.tableId) {
            parent2 = parent2.parent;
          }
          return parent2;
        });
        const { registerNormalWatchers, registerComplexWatchers } = useWatcher(owner, props);
        const {
          columnId,
          isSubColumn,
          realHeaderAlign,
          columnOrTableParent,
          setColumnWidth,
          setColumnForcedProps,
          setColumnRenders,
          getPropsData,
          getColumnElIndex,
          realAlign
        } = useRender(props, slots, owner);
        const parent = columnOrTableParent.value;
        columnId.value = `${parent.tableId || parent.columnId}_column_${columnIdSeed++}`;
        onBeforeMount(() => {
          isSubColumn.value = owner.value !== parent;
          const type2 = props.type || "default";
          const sortable = props.sortable === "" ? true : props.sortable;
          const defaults = {
            ...cellStarts[type2],
            id: columnId.value,
            type: type2,
            property: props.prop || props.property,
            align: realAlign,
            headerAlign: realHeaderAlign,
            showOverflowTooltip: props.showOverflowTooltip || props.showTooltipWhenOverflow,
            filterable: props.filters || props.filterMethod,
            filteredValue: [],
            filterPlacement: "",
            isColumnGroup: false,
            isSubColumn: false,
            filterOpened: false,
            sortable,
            index: props.index,
            rawColumnKey: instance.vnode.key
          };
          const basicProps = [
            "columnKey",
            "label",
            "className",
            "labelClassName",
            "type",
            "renderHeader",
            "formatter",
            "fixed",
            "resizable"
          ];
          const sortProps = ["sortMethod", "sortBy", "sortOrders"];
          const selectProps = ["selectable", "reserveSelection"];
          const filterProps = [
            "filterMethod",
            "filters",
            "filterMultiple",
            "filterOpened",
            "filteredValue",
            "filterPlacement"
          ];
          let column = getPropsData(basicProps, sortProps, selectProps, filterProps);
          column = mergeOptions(defaults, column);
          const chains = compose(setColumnRenders, setColumnWidth, setColumnForcedProps);
          column = chains(column);
          columnConfig.value = column;
          registerNormalWatchers();
          registerComplexWatchers();
        });
        onMounted(() => {
          var _a2;
          const parent2 = columnOrTableParent.value;
          const children = isSubColumn.value ? parent2.vnode.el.children : (_a2 = parent2.refs.hiddenColumns) == null ? void 0 : _a2.children;
          const getColumnIndex = () => getColumnElIndex(children || [], instance.vnode.el);
          columnConfig.value.getColumnIndex = getColumnIndex;
          const columnIndex = getColumnIndex();
          columnIndex > -1 && owner.value.store.commit("insertColumn", columnConfig.value, isSubColumn.value ? parent2.columnConfig.value : null);
        });
        onBeforeUnmount(() => {
          owner.value.store.commit("removeColumn", columnConfig.value, isSubColumn.value ? parent.columnConfig.value : null);
        });
        instance.columnId = columnId.value;
        instance.columnConfig = columnConfig;
        return;
      },
      render() {
        var _a2, _b, _c;
        try {
          const renderDefault = (_b = (_a2 = this.$slots).default) == null ? void 0 : _b.call(_a2, {
            row: {},
            column: {},
            $index: -1
          });
          const children = [];
          if (Array.isArray(renderDefault)) {
            for (const childNode of renderDefault) {
              if (((_c = childNode.type) == null ? void 0 : _c.name) === "ElTableColumn" || childNode.shapeFlag & 2) {
                children.push(childNode);
              } else if (childNode.type === Fragment && Array.isArray(childNode.children)) {
                childNode.children.forEach((vnode2) => {
                  if ((vnode2 == null ? void 0 : vnode2.patchFlag) !== 1024 && !isString$3(vnode2 == null ? void 0 : vnode2.children)) {
                    children.push(vnode2);
                  }
                });
              }
            }
          }
          const vnode = h$2("div", children);
          return vnode;
        } catch (e2) {
          return h$2("div", []);
        }
      }
    });
    const ElTable = withInstall(Table, {
      TableColumn: ElTableColumn$1
    });
    const ElTableColumn = withNoopInstall(ElTableColumn$1);
    var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
      SortOrder2["ASC"] = "asc";
      SortOrder2["DESC"] = "desc";
      return SortOrder2;
    })(SortOrder || {});
    var Alignment = /* @__PURE__ */ ((Alignment2) => {
      Alignment2["CENTER"] = "center";
      Alignment2["RIGHT"] = "right";
      return Alignment2;
    })(Alignment || {});
    var FixedDir = /* @__PURE__ */ ((FixedDir2) => {
      FixedDir2["LEFT"] = "left";
      FixedDir2["RIGHT"] = "right";
      return FixedDir2;
    })(FixedDir || {});
    const oppositeOrderMap = {
      ["asc"]: "desc",
      ["desc"]: "asc"
    };
    const placeholderSign = Symbol("placeholder");
    const calcColumnStyle = (column, fixedColumn, fixed) => {
      var _a2;
      const flex = {
        flexGrow: 0,
        flexShrink: 0,
        ...fixed ? {} : {
          flexGrow: column.flexGrow || 0,
          flexShrink: column.flexShrink || 1
        }
      };
      if (!fixed) {
        flex.flexShrink = 1;
      }
      const style2 = {
        ...(_a2 = column.style) != null ? _a2 : {},
        ...flex,
        flexBasis: "auto",
        width: column.width
      };
      if (!fixedColumn) {
        if (column.maxWidth)
          style2.maxWidth = column.maxWidth;
        if (column.minWidth)
          style2.minWidth = column.minWidth;
      }
      return style2;
    };
    function useColumns(props, columns2, fixed) {
      const visibleColumns = computed(() => {
        return unref(columns2).filter((column) => !column.hidden);
      });
      const fixedColumnsOnLeft = computed(() => unref(visibleColumns).filter((column) => column.fixed === "left" || column.fixed === true));
      const fixedColumnsOnRight = computed(() => unref(visibleColumns).filter((column) => column.fixed === "right"));
      const normalColumns = computed(() => unref(visibleColumns).filter((column) => !column.fixed));
      const mainColumns = computed(() => {
        const ret = [];
        unref(fixedColumnsOnLeft).forEach((column) => {
          ret.push({
            ...column,
            placeholderSign
          });
        });
        unref(normalColumns).forEach((column) => {
          ret.push(column);
        });
        unref(fixedColumnsOnRight).forEach((column) => {
          ret.push({
            ...column,
            placeholderSign
          });
        });
        return ret;
      });
      const hasFixedColumns = computed(() => {
        return unref(fixedColumnsOnLeft).length || unref(fixedColumnsOnRight).length;
      });
      const columnsStyles = computed(() => {
        const _columns = unref(columns2);
        return _columns.reduce((style2, column) => {
          style2[column.key] = calcColumnStyle(column, unref(fixed), props.fixed);
          return style2;
        }, {});
      });
      const columnsTotalWidth = computed(() => {
        return unref(visibleColumns).reduce((width, column) => width + column.width, 0);
      });
      const getColumn = (key) => {
        return unref(columns2).find((column) => column.key === key);
      };
      const getColumnStyle = (key) => {
        return unref(columnsStyles)[key];
      };
      const updateColumnWidth = (column, width) => {
        column.width = width;
      };
      function onColumnSorted(e2) {
        var _a2;
        const { key } = e2.currentTarget.dataset;
        if (!key)
          return;
        const { sortState, sortBy } = props;
        let order = SortOrder.ASC;
        if (isObject$7(sortState)) {
          order = oppositeOrderMap[sortState[key]];
        } else {
          order = oppositeOrderMap[sortBy.order];
        }
        (_a2 = props.onColumnSort) == null ? void 0 : _a2.call(props, { column: getColumn(key), key, order });
      }
      return {
        columns: columns2,
        columnsStyles,
        columnsTotalWidth,
        fixedColumnsOnLeft,
        fixedColumnsOnRight,
        hasFixedColumns,
        mainColumns,
        normalColumns,
        visibleColumns,
        getColumn,
        getColumnStyle,
        updateColumnWidth,
        onColumnSorted
      };
    }
    const useScrollbar = (props, {
      mainTableRef,
      leftTableRef,
      rightTableRef,
      onMaybeEndReached
    }) => {
      const scrollPos = ref({ scrollLeft: 0, scrollTop: 0 });
      function doScroll(params) {
        var _a2, _b, _c;
        const { scrollTop } = params;
        (_a2 = mainTableRef.value) == null ? void 0 : _a2.scrollTo(params);
        (_b = leftTableRef.value) == null ? void 0 : _b.scrollToTop(scrollTop);
        (_c = rightTableRef.value) == null ? void 0 : _c.scrollToTop(scrollTop);
      }
      function scrollTo(params) {
        scrollPos.value = params;
        doScroll(params);
      }
      function scrollToTop(scrollTop) {
        scrollPos.value.scrollTop = scrollTop;
        doScroll(unref(scrollPos));
      }
      function scrollToLeft(scrollLeft) {
        var _a2, _b;
        scrollPos.value.scrollLeft = scrollLeft;
        (_b = (_a2 = mainTableRef.value) == null ? void 0 : _a2.scrollTo) == null ? void 0 : _b.call(_a2, unref(scrollPos));
      }
      function onScroll(params) {
        var _a2;
        scrollTo(params);
        (_a2 = props.onScroll) == null ? void 0 : _a2.call(props, params);
      }
      function onVerticalScroll({ scrollTop }) {
        const { scrollTop: currentScrollTop } = unref(scrollPos);
        if (scrollTop !== currentScrollTop)
          scrollToTop(scrollTop);
      }
      function scrollToRow(row, strategy = "auto") {
        var _a2;
        (_a2 = mainTableRef.value) == null ? void 0 : _a2.scrollToRow(row, strategy);
      }
      watch(() => unref(scrollPos).scrollTop, (cur, prev) => {
        if (cur > prev)
          onMaybeEndReached();
      });
      return {
        scrollPos,
        scrollTo,
        scrollToLeft,
        scrollToTop,
        scrollToRow,
        onScroll,
        onVerticalScroll
      };
    };
    const useRow = (props, { mainTableRef, leftTableRef, rightTableRef, onMaybeEndReached }) => {
      const vm = getCurrentInstance();
      const { emit: emit2 } = vm;
      const isResetting = shallowRef(false);
      const hoveringRowKey = shallowRef(null);
      const expandedRowKeys = ref(props.defaultExpandedRowKeys || []);
      const lastRenderedRowIndex = ref(-1);
      const resetIndex = shallowRef(null);
      const rowHeights = ref({});
      const pendingRowHeights = ref({});
      const leftTableHeights = shallowRef({});
      const mainTableHeights = shallowRef({});
      const rightTableHeights = shallowRef({});
      const isDynamic = computed(() => isNumber$1(props.estimatedRowHeight));
      function onRowsRendered(params) {
        var _a2;
        (_a2 = props.onRowsRendered) == null ? void 0 : _a2.call(props, params);
        if (params.rowCacheEnd > unref(lastRenderedRowIndex)) {
          lastRenderedRowIndex.value = params.rowCacheEnd;
        }
      }
      function onRowHovered({ hovered, rowKey: rowKey2 }) {
        hoveringRowKey.value = hovered ? rowKey2 : null;
      }
      function onRowExpanded({
        expanded,
        rowData,
        rowIndex,
        rowKey: rowKey2
      }) {
        var _a2, _b;
        const _expandedRowKeys = [...unref(expandedRowKeys)];
        const currentKeyIndex = _expandedRowKeys.indexOf(rowKey2);
        if (expanded) {
          if (currentKeyIndex === -1)
            _expandedRowKeys.push(rowKey2);
        } else {
          if (currentKeyIndex > -1)
            _expandedRowKeys.splice(currentKeyIndex, 1);
        }
        expandedRowKeys.value = _expandedRowKeys;
        emit2("update:expandedRowKeys", _expandedRowKeys);
        (_a2 = props.onRowExpand) == null ? void 0 : _a2.call(props, {
          expanded,
          rowData,
          rowIndex,
          rowKey: rowKey2
        });
        (_b = props.onExpandedRowsChange) == null ? void 0 : _b.call(props, _expandedRowKeys);
      }
      const flushingRowHeights = debounce(() => {
        var _a2, _b, _c, _d;
        isResetting.value = true;
        rowHeights.value = { ...unref(rowHeights), ...unref(pendingRowHeights) };
        resetAfterIndex(unref(resetIndex), false);
        pendingRowHeights.value = {};
        resetIndex.value = null;
        (_a2 = mainTableRef.value) == null ? void 0 : _a2.forceUpdate();
        (_b = leftTableRef.value) == null ? void 0 : _b.forceUpdate();
        (_c = rightTableRef.value) == null ? void 0 : _c.forceUpdate();
        (_d = vm.proxy) == null ? void 0 : _d.$forceUpdate();
        isResetting.value = false;
      }, 0);
      function resetAfterIndex(index2, forceUpdate = false) {
        if (!unref(isDynamic))
          return;
        [mainTableRef, leftTableRef, rightTableRef].forEach((tableRef) => {
          const table = unref(tableRef);
          if (table)
            table.resetAfterRowIndex(index2, forceUpdate);
        });
      }
      function resetHeights(rowKey2, height, rowIdx) {
        const resetIdx = unref(resetIndex);
        if (resetIdx === null) {
          resetIndex.value = rowIdx;
        } else {
          if (resetIdx > rowIdx) {
            resetIndex.value = rowIdx;
          }
        }
        pendingRowHeights.value[rowKey2] = height;
      }
      function onRowHeightChange({ rowKey: rowKey2, height, rowIndex }, fixedDir) {
        if (!fixedDir) {
          mainTableHeights.value[rowKey2] = height;
        } else {
          if (fixedDir === FixedDir.RIGHT) {
            rightTableHeights.value[rowKey2] = height;
          } else {
            leftTableHeights.value[rowKey2] = height;
          }
        }
        const maximumHeight = Math.max(...[leftTableHeights, rightTableHeights, mainTableHeights].map((records) => records.value[rowKey2] || 0));
        if (unref(rowHeights)[rowKey2] !== maximumHeight) {
          resetHeights(rowKey2, maximumHeight, rowIndex);
          flushingRowHeights();
        }
      }
      watch(lastRenderedRowIndex, () => onMaybeEndReached());
      return {
        hoveringRowKey,
        expandedRowKeys,
        lastRenderedRowIndex,
        isDynamic,
        isResetting,
        rowHeights,
        resetAfterIndex,
        onRowExpanded,
        onRowHovered,
        onRowsRendered,
        onRowHeightChange
      };
    };
    const useData = (props, { expandedRowKeys, lastRenderedRowIndex, resetAfterIndex }) => {
      const depthMap = ref({});
      const flattenedData = computed(() => {
        const depths = {};
        const { data: data2, rowKey: rowKey2 } = props;
        const _expandedRowKeys = unref(expandedRowKeys);
        if (!_expandedRowKeys || !_expandedRowKeys.length)
          return data2;
        const array2 = [];
        const keysSet = /* @__PURE__ */ new Set();
        _expandedRowKeys.forEach((x2) => keysSet.add(x2));
        let copy2 = data2.slice();
        copy2.forEach((x2) => depths[x2[rowKey2]] = 0);
        while (copy2.length > 0) {
          const item = copy2.shift();
          array2.push(item);
          if (keysSet.has(item[rowKey2]) && Array.isArray(item.children) && item.children.length > 0) {
            copy2 = [...item.children, ...copy2];
            item.children.forEach((child) => depths[child[rowKey2]] = depths[item[rowKey2]] + 1);
          }
        }
        depthMap.value = depths;
        return array2;
      });
      const data = computed(() => {
        const { data: data2, expandColumnKey: expandColumnKey2 } = props;
        return expandColumnKey2 ? unref(flattenedData) : data2;
      });
      watch(data, (val, prev) => {
        if (val !== prev) {
          lastRenderedRowIndex.value = -1;
          resetAfterIndex(0, true);
        }
      });
      return {
        data,
        depthMap
      };
    };
    const sumReducer = (sum2, num) => sum2 + num;
    const sum = (listLike) => {
      return isArray$6(listLike) ? listLike.reduce(sumReducer, 0) : listLike;
    };
    const tryCall = (fLike, params, defaultRet = {}) => {
      return isFunction$4(fLike) ? fLike(params) : fLike != null ? fLike : defaultRet;
    };
    const enforceUnit = (style2) => {
      ["width", "maxWidth", "minWidth", "height"].forEach((key) => {
        style2[key] = addUnit(style2[key]);
      });
      return style2;
    };
    const componentToSlot = (ComponentLike) => isVNode(ComponentLike) ? (props) => h$2(ComponentLike, props) : ComponentLike;
    const useStyles = (props, {
      columnsTotalWidth,
      data,
      fixedColumnsOnLeft,
      fixedColumnsOnRight
    }) => {
      const bodyWidth = computed(() => {
        const { fixed, width, vScrollbarSize } = props;
        const ret = width - vScrollbarSize;
        return fixed ? Math.max(Math.round(unref(columnsTotalWidth)), ret) : ret;
      });
      const headerWidth = computed(() => unref(bodyWidth) + (props.fixed ? props.vScrollbarSize : 0));
      const mainTableHeight = computed(() => {
        const { height = 0, maxHeight = 0, footerHeight: footerHeight2, hScrollbarSize } = props;
        if (maxHeight > 0) {
          const _fixedRowsHeight = unref(fixedRowsHeight);
          const _rowsHeight = unref(rowsHeight);
          const _headerHeight = unref(headerHeight);
          const total2 = _headerHeight + _fixedRowsHeight + _rowsHeight + hScrollbarSize;
          return Math.min(total2, maxHeight - footerHeight2);
        }
        return height - footerHeight2;
      });
      const rowsHeight = computed(() => {
        const { rowHeight, estimatedRowHeight } = props;
        const _data = unref(data);
        if (isNumber$1(estimatedRowHeight)) {
          return _data.length * estimatedRowHeight;
        }
        return _data.length * rowHeight;
      });
      const fixedTableHeight = computed(() => {
        const { maxHeight } = props;
        const tableHeight = unref(mainTableHeight);
        if (isNumber$1(maxHeight) && maxHeight > 0)
          return tableHeight;
        const totalHeight = unref(rowsHeight) + unref(headerHeight) + unref(fixedRowsHeight);
        return Math.min(tableHeight, totalHeight);
      });
      const mapColumn = (column) => column.width;
      const leftTableWidth = computed(() => sum(unref(fixedColumnsOnLeft).map(mapColumn)));
      const rightTableWidth = computed(() => sum(unref(fixedColumnsOnRight).map(mapColumn)));
      const headerHeight = computed(() => sum(props.headerHeight));
      const fixedRowsHeight = computed(() => {
        var _a2;
        return (((_a2 = props.fixedData) == null ? void 0 : _a2.length) || 0) * props.rowHeight;
      });
      const windowHeight = computed(() => {
        return unref(mainTableHeight) - unref(headerHeight) - unref(fixedRowsHeight);
      });
      const rootStyle = computed(() => {
        const { style: style2 = {}, height, width } = props;
        return enforceUnit({
          ...style2,
          height,
          width
        });
      });
      const footerHeight = computed(() => enforceUnit({ height: props.footerHeight }));
      const emptyStyle = computed(() => ({
        top: addUnit(unref(headerHeight)),
        bottom: addUnit(props.footerHeight),
        width: addUnit(props.width)
      }));
      return {
        bodyWidth,
        fixedTableHeight,
        mainTableHeight,
        leftTableWidth,
        rightTableWidth,
        headerWidth,
        rowsHeight,
        windowHeight,
        footerHeight,
        emptyStyle,
        rootStyle
      };
    };
    const useAutoResize = (props) => {
      const sizer = ref();
      const width$ = ref(0);
      const height$ = ref(0);
      let resizerStopper;
      onMounted(() => {
        resizerStopper = useResizeObserver(sizer, ([entry]) => {
          const { width, height } = entry.contentRect;
          const { paddingLeft, paddingRight, paddingTop, paddingBottom } = getComputedStyle(entry.target);
          const left2 = Number.parseInt(paddingLeft) || 0;
          const right2 = Number.parseInt(paddingRight) || 0;
          const top = Number.parseInt(paddingTop) || 0;
          const bottom = Number.parseInt(paddingBottom) || 0;
          width$.value = width - left2 - right2;
          height$.value = height - top - bottom;
        }).stop;
      });
      onBeforeUnmount(() => {
        resizerStopper == null ? void 0 : resizerStopper();
      });
      watch([width$, height$], ([width, height]) => {
        var _a2;
        (_a2 = props.onResize) == null ? void 0 : _a2.call(props, {
          width,
          height
        });
      });
      return {
        sizer,
        width: width$,
        height: height$
      };
    };
    function useTable(props) {
      const mainTableRef = ref();
      const leftTableRef = ref();
      const rightTableRef = ref();
      const {
        columns: columns2,
        columnsStyles,
        columnsTotalWidth,
        fixedColumnsOnLeft,
        fixedColumnsOnRight,
        hasFixedColumns,
        mainColumns,
        onColumnSorted
      } = useColumns(props, toRef(props, "columns"), toRef(props, "fixed"));
      const {
        scrollTo,
        scrollToLeft,
        scrollToTop,
        scrollToRow,
        onScroll,
        onVerticalScroll,
        scrollPos
      } = useScrollbar(props, {
        mainTableRef,
        leftTableRef,
        rightTableRef,
        onMaybeEndReached
      });
      const {
        expandedRowKeys,
        hoveringRowKey,
        lastRenderedRowIndex,
        isDynamic,
        isResetting,
        rowHeights,
        resetAfterIndex,
        onRowExpanded,
        onRowHeightChange,
        onRowHovered,
        onRowsRendered
      } = useRow(props, {
        mainTableRef,
        leftTableRef,
        rightTableRef,
        onMaybeEndReached
      });
      const { data, depthMap } = useData(props, {
        expandedRowKeys,
        lastRenderedRowIndex,
        resetAfterIndex
      });
      const {
        bodyWidth,
        fixedTableHeight,
        mainTableHeight,
        leftTableWidth,
        rightTableWidth,
        headerWidth,
        rowsHeight,
        windowHeight,
        footerHeight,
        emptyStyle,
        rootStyle
      } = useStyles(props, {
        columnsTotalWidth,
        data,
        fixedColumnsOnLeft,
        fixedColumnsOnRight
      });
      const isScrolling = shallowRef(false);
      const containerRef = ref();
      const showEmpty = computed(() => {
        const noData = unref(data).length === 0;
        return isArray$6(props.fixedData) ? props.fixedData.length === 0 && noData : noData;
      });
      function getRowHeight(rowIndex) {
        const { estimatedRowHeight, rowHeight, rowKey: rowKey2 } = props;
        if (!estimatedRowHeight)
          return rowHeight;
        return unref(rowHeights)[unref(data)[rowIndex][rowKey2]] || estimatedRowHeight;
      }
      function onMaybeEndReached() {
        const { onEndReached } = props;
        if (!onEndReached)
          return;
        const { scrollTop } = unref(scrollPos);
        const _totalHeight = unref(rowsHeight);
        const clientHeight = unref(windowHeight);
        const heightUntilEnd = _totalHeight - (scrollTop + clientHeight) + props.hScrollbarSize;
        if (unref(lastRenderedRowIndex) >= 0 && _totalHeight !== unref(rowsHeight)) {
          onEndReached(heightUntilEnd);
        }
      }
      watch(() => props.expandedRowKeys, (val) => expandedRowKeys.value = val, {
        deep: true
      });
      return {
        columns: columns2,
        containerRef,
        mainTableRef,
        leftTableRef,
        rightTableRef,
        isDynamic,
        isResetting,
        isScrolling,
        hoveringRowKey,
        hasFixedColumns,
        columnsStyles,
        columnsTotalWidth,
        data,
        expandedRowKeys,
        depthMap,
        fixedColumnsOnLeft,
        fixedColumnsOnRight,
        mainColumns,
        bodyWidth,
        emptyStyle,
        rootStyle,
        headerWidth,
        footerHeight,
        mainTableHeight,
        fixedTableHeight,
        leftTableWidth,
        rightTableWidth,
        showEmpty,
        getRowHeight,
        onColumnSorted,
        onRowHovered,
        onRowExpanded,
        onRowsRendered,
        onRowHeightChange,
        scrollTo,
        scrollToLeft,
        scrollToTop,
        scrollToRow,
        onScroll,
        onVerticalScroll
      };
    }
    const TableV2InjectionKey = Symbol("tableV2");
    const classType = String;
    const columns = {
      type: definePropType(Array),
      required: true
    };
    const fixedDataType = {
      type: definePropType(Array)
    };
    const dataType = {
      ...fixedDataType,
      required: true
    };
    const expandColumnKey = String;
    const expandKeys = {
      type: definePropType(Array),
      default: () => mutable([])
    };
    const requiredNumber = {
      type: Number,
      required: true
    };
    const rowKey = {
      type: definePropType([String, Number, Symbol]),
      default: "id"
    };
    const styleType = {
      type: definePropType(Object)
    };
    const tableV2RowProps = buildProps({
      class: String,
      columns,
      columnsStyles: {
        type: definePropType(Object),
        required: true
      },
      depth: Number,
      expandColumnKey,
      estimatedRowHeight: {
        ...virtualizedGridProps.estimatedRowHeight,
        default: void 0
      },
      isScrolling: Boolean,
      onRowExpand: {
        type: definePropType(Function)
      },
      onRowHover: {
        type: definePropType(Function)
      },
      onRowHeightChange: {
        type: definePropType(Function)
      },
      rowData: {
        type: definePropType(Object),
        required: true
      },
      rowEventHandlers: {
        type: definePropType(Object)
      },
      rowIndex: {
        type: Number,
        required: true
      },
      rowKey,
      style: {
        type: definePropType(Object)
      }
    });
    const requiredNumberType = {
      type: Number,
      required: true
    };
    const tableV2HeaderProps = buildProps({
      class: String,
      columns,
      fixedHeaderData: {
        type: definePropType(Array)
      },
      headerData: {
        type: definePropType(Array),
        required: true
      },
      headerHeight: {
        type: definePropType([Number, Array]),
        default: 50
      },
      rowWidth: requiredNumberType,
      rowHeight: {
        type: Number,
        default: 50
      },
      height: requiredNumberType,
      width: requiredNumberType
    });
    const tableV2GridProps = buildProps({
      columns,
      data: dataType,
      fixedData: fixedDataType,
      estimatedRowHeight: tableV2RowProps.estimatedRowHeight,
      width: requiredNumber,
      height: requiredNumber,
      headerWidth: requiredNumber,
      headerHeight: tableV2HeaderProps.headerHeight,
      bodyWidth: requiredNumber,
      rowHeight: requiredNumber,
      cache: virtualizedListProps.cache,
      useIsScrolling: Boolean,
      scrollbarAlwaysOn: virtualizedGridProps.scrollbarAlwaysOn,
      scrollbarStartGap: virtualizedGridProps.scrollbarStartGap,
      scrollbarEndGap: virtualizedGridProps.scrollbarEndGap,
      class: classType,
      style: styleType,
      containerStyle: styleType,
      getRowHeight: {
        type: definePropType(Function),
        required: true
      },
      rowKey: tableV2RowProps.rowKey,
      onRowsRendered: {
        type: definePropType(Function)
      },
      onScroll: {
        type: definePropType(Function)
      }
    });
    const tableV2Props = buildProps({
      cache: tableV2GridProps.cache,
      estimatedRowHeight: tableV2RowProps.estimatedRowHeight,
      rowKey,
      headerClass: {
        type: definePropType([
          String,
          Function
        ])
      },
      headerProps: {
        type: definePropType([
          Object,
          Function
        ])
      },
      headerCellProps: {
        type: definePropType([
          Object,
          Function
        ])
      },
      headerHeight: tableV2HeaderProps.headerHeight,
      footerHeight: {
        type: Number,
        default: 0
      },
      rowClass: {
        type: definePropType([String, Function])
      },
      rowProps: {
        type: definePropType([Object, Function])
      },
      rowHeight: {
        type: Number,
        default: 50
      },
      cellProps: {
        type: definePropType([
          Object,
          Function
        ])
      },
      columns,
      data: dataType,
      dataGetter: {
        type: definePropType(Function)
      },
      fixedData: fixedDataType,
      expandColumnKey: tableV2RowProps.expandColumnKey,
      expandedRowKeys: expandKeys,
      defaultExpandedRowKeys: expandKeys,
      class: classType,
      fixed: Boolean,
      style: {
        type: definePropType(Object)
      },
      width: requiredNumber,
      height: requiredNumber,
      maxHeight: Number,
      useIsScrolling: Boolean,
      indentSize: {
        type: Number,
        default: 12
      },
      iconSize: {
        type: Number,
        default: 12
      },
      hScrollbarSize: virtualizedGridProps.hScrollbarSize,
      vScrollbarSize: virtualizedGridProps.vScrollbarSize,
      scrollbarAlwaysOn: virtualizedScrollbarProps.alwaysOn,
      sortBy: {
        type: definePropType(Object),
        default: () => ({})
      },
      sortState: {
        type: definePropType(Object),
        default: void 0
      },
      onColumnSort: {
        type: definePropType(Function)
      },
      onExpandedRowsChange: {
        type: definePropType(Function)
      },
      onEndReached: {
        type: definePropType(Function)
      },
      onRowExpand: tableV2RowProps.onRowExpand,
      onScroll: tableV2GridProps.onScroll,
      onRowsRendered: tableV2GridProps.onRowsRendered,
      rowEventHandlers: tableV2RowProps.rowEventHandlers
    });
    const TableV2Cell = (props, {
      slots
    }) => {
      var _a2;
      const {
        cellData,
        style: style2
      } = props;
      const displayText = ((_a2 = cellData == null ? void 0 : cellData.toString) == null ? void 0 : _a2.call(cellData)) || "";
      return createVNode("div", {
        "class": props.class,
        "title": displayText,
        "style": style2
      }, [slots.default ? slots.default(props) : displayText]);
    };
    TableV2Cell.displayName = "ElTableV2Cell";
    TableV2Cell.inheritAttrs = false;
    const HeaderCell = (props, {
      slots
    }) => {
      var _a2, _b;
      return slots.default ? slots.default(props) : createVNode("div", {
        "class": props.class,
        "title": (_a2 = props.column) == null ? void 0 : _a2.title
      }, [(_b = props.column) == null ? void 0 : _b.title]);
    };
    HeaderCell.displayName = "ElTableV2HeaderCell";
    HeaderCell.inheritAttrs = false;
    const tableV2HeaderRowProps = buildProps({
      class: String,
      columns,
      columnsStyles: {
        type: definePropType(Object),
        required: true
      },
      headerIndex: Number,
      style: { type: definePropType(Object) }
    });
    const TableV2HeaderRow = defineComponent({
      name: "ElTableV2HeaderRow",
      props: tableV2HeaderRowProps,
      setup(props, {
        slots
      }) {
        return () => {
          const {
            columns: columns2,
            columnsStyles,
            headerIndex,
            style: style2
          } = props;
          let Cells = columns2.map((column, columnIndex) => {
            return slots.cell({
              columns: columns2,
              column,
              columnIndex,
              headerIndex,
              style: columnsStyles[column.key]
            });
          });
          if (slots.header) {
            Cells = slots.header({
              cells: Cells.map((node) => {
                if (isArray$6(node) && node.length === 1) {
                  return node[0];
                }
                return node;
              }),
              columns: columns2,
              headerIndex
            });
          }
          return createVNode("div", {
            "class": props.class,
            "style": style2
          }, [Cells]);
        };
      }
    });
    const COMPONENT_NAME$4 = "ElTableV2Header";
    const TableV2Header = defineComponent({
      name: COMPONENT_NAME$4,
      props: tableV2HeaderProps,
      setup(props, {
        slots,
        expose
      }) {
        const ns2 = useNamespace("table-v2");
        const headerRef = ref();
        const headerStyle = computed(() => enforceUnit({
          width: props.width,
          height: props.height
        }));
        const rowStyle = computed(() => enforceUnit({
          width: props.rowWidth,
          height: props.height
        }));
        const headerHeights = computed(() => castArray$1(unref(props.headerHeight)));
        const scrollToLeft = (left2) => {
          const headerEl = unref(headerRef);
          nextTick$1(() => {
            headerEl == null ? void 0 : headerEl.scroll({
              left: left2
            });
          });
        };
        const renderFixedRows = () => {
          const fixedRowClassName = ns2.e("fixed-header-row");
          const {
            columns: columns2,
            fixedHeaderData,
            rowHeight
          } = props;
          return fixedHeaderData == null ? void 0 : fixedHeaderData.map((fixedRowData, fixedRowIndex) => {
            var _a2;
            const style2 = enforceUnit({
              height: rowHeight,
              width: "100%"
            });
            return (_a2 = slots.fixed) == null ? void 0 : _a2.call(slots, {
              class: fixedRowClassName,
              columns: columns2,
              rowData: fixedRowData,
              rowIndex: -(fixedRowIndex + 1),
              style: style2
            });
          });
        };
        const renderDynamicRows = () => {
          const dynamicRowClassName = ns2.e("dynamic-header-row");
          const {
            columns: columns2
          } = props;
          return unref(headerHeights).map((rowHeight, rowIndex) => {
            var _a2;
            const style2 = enforceUnit({
              width: "100%",
              height: rowHeight
            });
            return (_a2 = slots.dynamic) == null ? void 0 : _a2.call(slots, {
              class: dynamicRowClassName,
              columns: columns2,
              headerIndex: rowIndex,
              style: style2
            });
          });
        };
        expose({
          scrollToLeft
        });
        return () => {
          if (props.height <= 0)
            return;
          return createVNode("div", {
            "ref": headerRef,
            "class": props.class,
            "style": unref(headerStyle)
          }, [createVNode("div", {
            "style": unref(rowStyle),
            "class": ns2.e("header")
          }, [renderDynamicRows(), renderFixedRows()])]);
        };
      }
    });
    const useTableRow = (props) => {
      const {
        isScrolling
      } = inject(TableV2InjectionKey);
      const measured = ref(false);
      const rowRef = ref();
      const measurable = computed(() => {
        return isNumber$1(props.estimatedRowHeight) && props.rowIndex >= 0;
      });
      const doMeasure = (isInit = false) => {
        const $rowRef = unref(rowRef);
        if (!$rowRef)
          return;
        const {
          columns: columns2,
          onRowHeightChange,
          rowKey: rowKey2,
          rowIndex,
          style: style2
        } = props;
        const {
          height
        } = $rowRef.getBoundingClientRect();
        measured.value = true;
        nextTick$1(() => {
          if (isInit || height !== Number.parseInt(style2.height)) {
            const firstColumn = columns2[0];
            const isPlaceholder = (firstColumn == null ? void 0 : firstColumn.placeholderSign) === placeholderSign;
            onRowHeightChange == null ? void 0 : onRowHeightChange({
              rowKey: rowKey2,
              height,
              rowIndex
            }, firstColumn && !isPlaceholder && firstColumn.fixed);
          }
        });
      };
      const eventHandlers = computed(() => {
        const {
          rowData,
          rowIndex,
          rowKey: rowKey2,
          onRowHover
        } = props;
        const handlers = props.rowEventHandlers || {};
        const eventHandlers2 = {};
        Object.entries(handlers).forEach(([eventName, handler]) => {
          if (isFunction$4(handler)) {
            eventHandlers2[eventName] = (event) => {
              handler({
                event,
                rowData,
                rowIndex,
                rowKey: rowKey2
              });
            };
          }
        });
        if (onRowHover) {
          [{
            name: "onMouseleave",
            hovered: false
          }, {
            name: "onMouseenter",
            hovered: true
          }].forEach(({
            name,
            hovered
          }) => {
            const existedHandler = eventHandlers2[name];
            eventHandlers2[name] = (event) => {
              onRowHover({
                event,
                hovered,
                rowData,
                rowIndex,
                rowKey: rowKey2
              });
              existedHandler == null ? void 0 : existedHandler(event);
            };
          });
        }
        return eventHandlers2;
      });
      const onExpand = (expanded) => {
        const {
          onRowExpand,
          rowData,
          rowIndex,
          rowKey: rowKey2
        } = props;
        onRowExpand == null ? void 0 : onRowExpand({
          expanded,
          rowData,
          rowIndex,
          rowKey: rowKey2
        });
      };
      onMounted(() => {
        if (unref(measurable)) {
          doMeasure(true);
        }
      });
      return {
        isScrolling,
        measurable,
        measured,
        rowRef,
        eventHandlers,
        onExpand
      };
    };
    const COMPONENT_NAME$3 = "ElTableV2TableRow";
    const TableV2Row = defineComponent({
      name: COMPONENT_NAME$3,
      props: tableV2RowProps,
      setup(props, {
        expose,
        slots,
        attrs
      }) {
        const {
          eventHandlers,
          isScrolling,
          measurable,
          measured,
          rowRef,
          onExpand
        } = useTableRow(props);
        expose({
          onExpand
        });
        return () => {
          const {
            columns: columns2,
            columnsStyles,
            expandColumnKey: expandColumnKey2,
            depth,
            rowData,
            rowIndex,
            style: style2
          } = props;
          let ColumnCells = columns2.map((column, columnIndex) => {
            const expandable = isArray$6(rowData.children) && rowData.children.length > 0 && column.key === expandColumnKey2;
            return slots.cell({
              column,
              columns: columns2,
              columnIndex,
              depth,
              style: columnsStyles[column.key],
              rowData,
              rowIndex,
              isScrolling: unref(isScrolling),
              expandIconProps: expandable ? {
                rowData,
                rowIndex,
                onExpand
              } : void 0
            });
          });
          if (slots.row) {
            ColumnCells = slots.row({
              cells: ColumnCells.map((node) => {
                if (isArray$6(node) && node.length === 1) {
                  return node[0];
                }
                return node;
              }),
              style: style2,
              columns: columns2,
              depth,
              rowData,
              rowIndex,
              isScrolling: unref(isScrolling)
            });
          }
          if (unref(measurable)) {
            const {
              height,
              ...exceptHeightStyle
            } = style2 || {};
            const _measured = unref(measured);
            return createVNode("div", mergeProps({
              "ref": rowRef,
              "class": props.class,
              "style": _measured ? style2 : exceptHeightStyle
            }, attrs, unref(eventHandlers)), [ColumnCells]);
          }
          return createVNode("div", mergeProps(attrs, {
            "ref": rowRef,
            "class": props.class,
            "style": style2
          }, unref(eventHandlers)), [ColumnCells]);
        };
      }
    });
    const SortIcon = (props) => {
      const {
        sortOrder
      } = props;
      return createVNode(ElIcon, {
        "size": 14,
        "class": props.class
      }, {
        default: () => [sortOrder === SortOrder.ASC ? createVNode(sort_up_default, null, null) : createVNode(sort_down_default, null, null)]
      });
    };
    const ExpandIcon = (props) => {
      const {
        expanded,
        expandable,
        onExpand,
        style: style2,
        size: size2
      } = props;
      const expandIconProps = {
        onClick: expandable ? () => onExpand(!expanded) : void 0,
        class: props.class
      };
      return createVNode(ElIcon, mergeProps(expandIconProps, {
        "size": size2,
        "style": style2
      }), {
        default: () => [createVNode(arrow_right_default, null, null)]
      });
    };
    const COMPONENT_NAME$2 = "ElTableV2Grid";
    const useTableGrid = (props) => {
      const headerRef = ref();
      const bodyRef = ref();
      const totalHeight = computed(() => {
        const {
          data,
          rowHeight,
          estimatedRowHeight
        } = props;
        if (estimatedRowHeight) {
          return;
        }
        return data.length * rowHeight;
      });
      const fixedRowHeight = computed(() => {
        const {
          fixedData,
          rowHeight
        } = props;
        return ((fixedData == null ? void 0 : fixedData.length) || 0) * rowHeight;
      });
      const headerHeight = computed(() => sum(props.headerHeight));
      const gridHeight = computed(() => {
        const {
          height
        } = props;
        return Math.max(0, height - unref(headerHeight) - unref(fixedRowHeight));
      });
      const hasHeader = computed(() => {
        return unref(headerHeight) + unref(fixedRowHeight) > 0;
      });
      const itemKey = ({
        data,
        rowIndex
      }) => data[rowIndex][props.rowKey];
      function onItemRendered({
        rowCacheStart,
        rowCacheEnd,
        rowVisibleStart,
        rowVisibleEnd
      }) {
        var _a2;
        (_a2 = props.onRowsRendered) == null ? void 0 : _a2.call(props, {
          rowCacheStart,
          rowCacheEnd,
          rowVisibleStart,
          rowVisibleEnd
        });
      }
      function resetAfterRowIndex(index2, forceUpdate2) {
        var _a2;
        (_a2 = bodyRef.value) == null ? void 0 : _a2.resetAfterRowIndex(index2, forceUpdate2);
      }
      function scrollTo(leftOrOptions, top) {
        const header$ = unref(headerRef);
        const body$ = unref(bodyRef);
        if (!header$ || !body$)
          return;
        if (isObject$7(leftOrOptions)) {
          header$.scrollToLeft(leftOrOptions.scrollLeft);
          body$.scrollTo(leftOrOptions);
        } else {
          header$.scrollToLeft(leftOrOptions);
          body$.scrollTo({
            scrollLeft: leftOrOptions,
            scrollTop: top
          });
        }
      }
      function scrollToTop(scrollTop) {
        var _a2;
        (_a2 = unref(bodyRef)) == null ? void 0 : _a2.scrollTo({
          scrollTop
        });
      }
      function scrollToRow(row, strategy) {
        var _a2;
        (_a2 = unref(bodyRef)) == null ? void 0 : _a2.scrollToItem(row, 1, strategy);
      }
      function forceUpdate() {
        var _a2, _b;
        (_a2 = unref(bodyRef)) == null ? void 0 : _a2.$forceUpdate();
        (_b = unref(headerRef)) == null ? void 0 : _b.$forceUpdate();
      }
      return {
        bodyRef,
        forceUpdate,
        fixedRowHeight,
        gridHeight,
        hasHeader,
        headerHeight,
        headerRef,
        totalHeight,
        itemKey,
        onItemRendered,
        resetAfterRowIndex,
        scrollTo,
        scrollToTop,
        scrollToRow
      };
    };
    const TableGrid = defineComponent({
      name: COMPONENT_NAME$2,
      props: tableV2GridProps,
      setup(props, {
        slots,
        expose
      }) {
        const {
          ns: ns2
        } = inject(TableV2InjectionKey);
        const {
          bodyRef,
          fixedRowHeight,
          gridHeight,
          hasHeader,
          headerRef,
          headerHeight,
          totalHeight,
          forceUpdate,
          itemKey,
          onItemRendered,
          resetAfterRowIndex,
          scrollTo,
          scrollToTop,
          scrollToRow
        } = useTableGrid(props);
        expose({
          forceUpdate,
          totalHeight,
          scrollTo,
          scrollToTop,
          scrollToRow,
          resetAfterRowIndex
        });
        const getColumnWidth = () => props.bodyWidth;
        return () => {
          const {
            cache: cache2,
            columns: columns2,
            data,
            fixedData,
            useIsScrolling,
            scrollbarAlwaysOn,
            scrollbarEndGap,
            scrollbarStartGap,
            style: style2,
            rowHeight,
            bodyWidth,
            estimatedRowHeight,
            headerWidth,
            height,
            width,
            getRowHeight,
            onScroll
          } = props;
          const isDynamicRowEnabled = isNumber$1(estimatedRowHeight);
          const Grid = isDynamicRowEnabled ? DynamicSizeGrid : FixedSizeGrid;
          const _headerHeight = unref(headerHeight);
          return createVNode("div", {
            "role": "table",
            "class": [ns2.e("table"), props.class],
            "style": style2
          }, [createVNode(Grid, {
            "ref": bodyRef,
            "data": data,
            "useIsScrolling": useIsScrolling,
            "itemKey": itemKey,
            "columnCache": 0,
            "columnWidth": isDynamicRowEnabled ? getColumnWidth : bodyWidth,
            "totalColumn": 1,
            "totalRow": data.length,
            "rowCache": cache2,
            "rowHeight": isDynamicRowEnabled ? getRowHeight : rowHeight,
            "width": width,
            "height": unref(gridHeight),
            "class": ns2.e("body"),
            "scrollbarStartGap": scrollbarStartGap,
            "scrollbarEndGap": scrollbarEndGap,
            "scrollbarAlwaysOn": scrollbarAlwaysOn,
            "onScroll": onScroll,
            "onItemRendered": onItemRendered,
            "perfMode": false
          }, {
            default: (params) => {
              var _a2;
              const rowData = data[params.rowIndex];
              return (_a2 = slots.row) == null ? void 0 : _a2.call(slots, {
                ...params,
                columns: columns2,
                rowData
              });
            }
          }), unref(hasHeader) && createVNode(TableV2Header, {
            "ref": headerRef,
            "class": ns2.e("header-wrapper"),
            "columns": columns2,
            "headerData": data,
            "headerHeight": props.headerHeight,
            "fixedHeaderData": fixedData,
            "rowWidth": headerWidth,
            "rowHeight": rowHeight,
            "width": width,
            "height": Math.min(_headerHeight + unref(fixedRowHeight), height)
          }, {
            dynamic: slots.header,
            fixed: slots.row
          })]);
        };
      }
    });
    function _isSlot$5(s2) {
      return typeof s2 === "function" || Object.prototype.toString.call(s2) === "[object Object]" && !isVNode(s2);
    }
    const MainTable = (props, {
      slots
    }) => {
      const {
        mainTableRef,
        ...rest
      } = props;
      return createVNode(TableGrid, mergeProps({
        "ref": mainTableRef
      }, rest), _isSlot$5(slots) ? slots : {
        default: () => [slots]
      });
    };
    function _isSlot$4(s2) {
      return typeof s2 === "function" || Object.prototype.toString.call(s2) === "[object Object]" && !isVNode(s2);
    }
    const LeftTable$1 = (props, {
      slots
    }) => {
      if (!props.columns.length)
        return;
      const {
        leftTableRef,
        ...rest
      } = props;
      return createVNode(TableGrid, mergeProps({
        "ref": leftTableRef
      }, rest), _isSlot$4(slots) ? slots : {
        default: () => [slots]
      });
    };
    function _isSlot$3(s2) {
      return typeof s2 === "function" || Object.prototype.toString.call(s2) === "[object Object]" && !isVNode(s2);
    }
    const LeftTable = (props, {
      slots
    }) => {
      if (!props.columns.length)
        return;
      const {
        rightTableRef,
        ...rest
      } = props;
      return createVNode(TableGrid, mergeProps({
        "ref": rightTableRef
      }, rest), _isSlot$3(slots) ? slots : {
        default: () => [slots]
      });
    };
    function _isSlot$2(s2) {
      return typeof s2 === "function" || Object.prototype.toString.call(s2) === "[object Object]" && !isVNode(s2);
    }
    const RowRenderer = (props, {
      slots
    }) => {
      const {
        columns: columns2,
        columnsStyles,
        depthMap,
        expandColumnKey: expandColumnKey2,
        expandedRowKeys,
        estimatedRowHeight,
        hasFixedColumns,
        hoveringRowKey,
        rowData,
        rowIndex,
        style: style2,
        isScrolling,
        rowProps: rowProps2,
        rowClass,
        rowKey: rowKey2,
        rowEventHandlers,
        ns: ns2,
        onRowHovered,
        onRowExpanded
      } = props;
      const rowKls = tryCall(rowClass, {
        columns: columns2,
        rowData,
        rowIndex
      }, "");
      const additionalProps = tryCall(rowProps2, {
        columns: columns2,
        rowData,
        rowIndex
      });
      const _rowKey = rowData[rowKey2];
      const depth = depthMap[_rowKey] || 0;
      const canExpand = Boolean(expandColumnKey2);
      const isFixedRow = rowIndex < 0;
      const kls = [ns2.e("row"), rowKls, {
        [ns2.e(`row-depth-${depth}`)]: canExpand && rowIndex >= 0,
        [ns2.is("expanded")]: canExpand && expandedRowKeys.includes(_rowKey),
        [ns2.is("hovered")]: !isScrolling && _rowKey === hoveringRowKey,
        [ns2.is("fixed")]: !depth && isFixedRow,
        [ns2.is("customized")]: Boolean(slots.row)
      }];
      const onRowHover = hasFixedColumns ? onRowHovered : void 0;
      const _rowProps = {
        ...additionalProps,
        columns: columns2,
        columnsStyles,
        class: kls,
        depth,
        expandColumnKey: expandColumnKey2,
        estimatedRowHeight: isFixedRow ? void 0 : estimatedRowHeight,
        isScrolling,
        rowIndex,
        rowData,
        rowKey: _rowKey,
        rowEventHandlers,
        style: style2
      };
      return createVNode(TableV2Row, mergeProps(_rowProps, {
        "onRowHover": onRowHover,
        "onRowExpand": onRowExpanded
      }), _isSlot$2(slots) ? slots : {
        default: () => [slots]
      });
    };
    const CellRenderer = ({
      columns: columns2,
      column,
      columnIndex,
      depth,
      expandIconProps,
      isScrolling,
      rowData,
      rowIndex,
      style: style2,
      expandedRowKeys,
      ns: ns2,
      cellProps: _cellProps,
      expandColumnKey: expandColumnKey2,
      indentSize,
      iconSize,
      rowKey: rowKey2
    }, {
      slots
    }) => {
      const cellStyle = enforceUnit(style2);
      if (column.placeholderSign === placeholderSign) {
        return createVNode("div", {
          "class": ns2.em("row-cell", "placeholder"),
          "style": cellStyle
        }, null);
      }
      const {
        cellRenderer,
        dataKey,
        dataGetter
      } = column;
      const columnCellRenderer = componentToSlot(cellRenderer);
      const CellComponent = columnCellRenderer || slots.default || ((props) => createVNode(TableV2Cell, props, null));
      const cellData = isFunction$4(dataGetter) ? dataGetter({
        columns: columns2,
        column,
        columnIndex,
        rowData,
        rowIndex
      }) : get$1(rowData, dataKey != null ? dataKey : "");
      const extraCellProps = tryCall(_cellProps, {
        cellData,
        columns: columns2,
        column,
        columnIndex,
        rowIndex,
        rowData
      });
      const cellProps = {
        class: ns2.e("cell-text"),
        columns: columns2,
        column,
        columnIndex,
        cellData,
        isScrolling,
        rowData,
        rowIndex
      };
      const Cell = CellComponent(cellProps);
      const kls = [ns2.e("row-cell"), column.align === Alignment.CENTER && ns2.is("align-center"), column.align === Alignment.RIGHT && ns2.is("align-right")];
      const expandable = rowIndex >= 0 && column.key === expandColumnKey2;
      const expanded = rowIndex >= 0 && expandedRowKeys.includes(rowData[rowKey2]);
      let IconOrPlaceholder;
      const iconStyle = `margin-inline-start: ${depth * indentSize}px;`;
      if (expandable) {
        if (isObject$7(expandIconProps)) {
          IconOrPlaceholder = createVNode(ExpandIcon, mergeProps(expandIconProps, {
            "class": [ns2.e("expand-icon"), ns2.is("expanded", expanded)],
            "size": iconSize,
            "expanded": expanded,
            "style": iconStyle,
            "expandable": true
          }), null);
        } else {
          IconOrPlaceholder = createVNode("div", {
            "style": [iconStyle, `width: ${iconSize}px; height: ${iconSize}px;`].join(" ")
          }, null);
        }
      }
      return createVNode("div", mergeProps({
        "class": kls,
        "style": cellStyle
      }, extraCellProps), [IconOrPlaceholder, Cell]);
    };
    CellRenderer.inheritAttrs = false;
    function _isSlot$1(s2) {
      return typeof s2 === "function" || Object.prototype.toString.call(s2) === "[object Object]" && !isVNode(s2);
    }
    const HeaderRenderer = ({
      columns: columns2,
      columnsStyles,
      headerIndex,
      style: style2,
      headerClass,
      headerProps,
      ns: ns2
    }, {
      slots
    }) => {
      const param = {
        columns: columns2,
        headerIndex
      };
      const kls = [ns2.e("header-row"), tryCall(headerClass, param, ""), {
        [ns2.is("customized")]: Boolean(slots.header)
      }];
      const extraProps = {
        ...tryCall(headerProps, param),
        columnsStyles,
        class: kls,
        columns: columns2,
        headerIndex,
        style: style2
      };
      return createVNode(TableV2HeaderRow, extraProps, _isSlot$1(slots) ? slots : {
        default: () => [slots]
      });
    };
    const HeaderCellRenderer = (props, {
      slots
    }) => {
      const {
        column,
        ns: ns2,
        style: style2,
        onColumnSorted
      } = props;
      const cellStyle = enforceUnit(style2);
      if (column.placeholderSign === placeholderSign) {
        return createVNode("div", {
          "class": ns2.em("header-row-cell", "placeholder"),
          "style": cellStyle
        }, null);
      }
      const {
        headerCellRenderer,
        headerClass,
        sortable
      } = column;
      const cellProps = {
        ...props,
        class: ns2.e("header-cell-text")
      };
      const cellRenderer = componentToSlot(headerCellRenderer) || slots.default || ((props2) => createVNode(HeaderCell, props2, null));
      const Cell = cellRenderer(cellProps);
      const {
        sortBy,
        sortState,
        headerCellProps
      } = props;
      let sorting, sortOrder;
      if (sortState) {
        const order = sortState[column.key];
        sorting = Boolean(oppositeOrderMap[order]);
        sortOrder = sorting ? order : SortOrder.ASC;
      } else {
        sorting = column.key === sortBy.key;
        sortOrder = sorting ? sortBy.order : SortOrder.ASC;
      }
      const cellKls = [ns2.e("header-cell"), tryCall(headerClass, props, ""), column.align === Alignment.CENTER && ns2.is("align-center"), column.align === Alignment.RIGHT && ns2.is("align-right"), sortable && ns2.is("sortable")];
      const cellWrapperProps = {
        ...tryCall(headerCellProps, props),
        onClick: column.sortable ? onColumnSorted : void 0,
        class: cellKls,
        style: cellStyle,
        ["data-key"]: column.key
      };
      return createVNode("div", cellWrapperProps, [Cell, sortable && createVNode(SortIcon, {
        "class": [ns2.e("sort-icon"), sorting && ns2.is("sorting")],
        "sortOrder": sortOrder
      }, null)]);
    };
    const Footer$1 = (props, {
      slots
    }) => {
      var _a2;
      return createVNode("div", {
        "class": props.class,
        "style": props.style
      }, [(_a2 = slots.default) == null ? void 0 : _a2.call(slots)]);
    };
    Footer$1.displayName = "ElTableV2Footer";
    const Footer = (props, {
      slots
    }) => {
      return createVNode("div", {
        "class": props.class,
        "style": props.style
      }, [slots.default ? slots.default() : createVNode(ElEmpty, null, null)]);
    };
    Footer.displayName = "ElTableV2Empty";
    const Overlay = (props, {
      slots
    }) => {
      var _a2;
      return createVNode("div", {
        "class": props.class,
        "style": props.style
      }, [(_a2 = slots.default) == null ? void 0 : _a2.call(slots)]);
    };
    Overlay.displayName = "ElTableV2Overlay";
    function _isSlot(s2) {
      return typeof s2 === "function" || Object.prototype.toString.call(s2) === "[object Object]" && !isVNode(s2);
    }
    const COMPONENT_NAME$1 = "ElTableV2";
    const TableV2 = defineComponent({
      name: COMPONENT_NAME$1,
      props: tableV2Props,
      setup(props, {
        slots,
        expose
      }) {
        const ns2 = useNamespace("table-v2");
        const {
          columnsStyles,
          fixedColumnsOnLeft,
          fixedColumnsOnRight,
          mainColumns,
          mainTableHeight,
          fixedTableHeight,
          leftTableWidth,
          rightTableWidth,
          data,
          depthMap,
          expandedRowKeys,
          hasFixedColumns,
          hoveringRowKey,
          mainTableRef,
          leftTableRef,
          rightTableRef,
          isDynamic,
          isResetting,
          isScrolling,
          bodyWidth,
          emptyStyle,
          rootStyle,
          headerWidth,
          footerHeight,
          showEmpty,
          scrollTo,
          scrollToLeft,
          scrollToTop,
          scrollToRow,
          getRowHeight,
          onColumnSorted,
          onRowHeightChange,
          onRowHovered,
          onRowExpanded,
          onRowsRendered,
          onScroll,
          onVerticalScroll
        } = useTable(props);
        expose({
          scrollTo,
          scrollToLeft,
          scrollToTop,
          scrollToRow
        });
        provide(TableV2InjectionKey, {
          ns: ns2,
          isResetting,
          hoveringRowKey,
          isScrolling
        });
        return () => {
          const {
            cache: cache2,
            cellProps,
            estimatedRowHeight,
            expandColumnKey: expandColumnKey2,
            fixedData,
            headerHeight,
            headerClass,
            headerProps,
            headerCellProps,
            sortBy,
            sortState,
            rowHeight,
            rowClass,
            rowEventHandlers,
            rowKey: rowKey2,
            rowProps: rowProps2,
            scrollbarAlwaysOn,
            indentSize,
            iconSize,
            useIsScrolling,
            vScrollbarSize,
            width
          } = props;
          const _data = unref(data);
          const mainTableProps = {
            cache: cache2,
            class: ns2.e("main"),
            columns: unref(mainColumns),
            data: _data,
            fixedData,
            estimatedRowHeight,
            bodyWidth: unref(bodyWidth),
            headerHeight,
            headerWidth: unref(headerWidth),
            height: unref(mainTableHeight),
            mainTableRef,
            rowKey: rowKey2,
            rowHeight,
            scrollbarAlwaysOn,
            scrollbarStartGap: 2,
            scrollbarEndGap: vScrollbarSize,
            useIsScrolling,
            width,
            getRowHeight,
            onRowsRendered,
            onScroll
          };
          const leftColumnsWidth = unref(leftTableWidth);
          const _fixedTableHeight = unref(fixedTableHeight);
          const leftTableProps = {
            cache: cache2,
            class: ns2.e("left"),
            columns: unref(fixedColumnsOnLeft),
            data: _data,
            estimatedRowHeight,
            leftTableRef,
            rowHeight,
            bodyWidth: leftColumnsWidth,
            headerWidth: leftColumnsWidth,
            headerHeight,
            height: _fixedTableHeight,
            rowKey: rowKey2,
            scrollbarAlwaysOn,
            scrollbarStartGap: 2,
            scrollbarEndGap: vScrollbarSize,
            useIsScrolling,
            width: leftColumnsWidth,
            getRowHeight,
            onScroll: onVerticalScroll
          };
          const rightColumnsWidth = unref(rightTableWidth);
          const rightColumnsWidthWithScrollbar = rightColumnsWidth + vScrollbarSize;
          const rightTableProps = {
            cache: cache2,
            class: ns2.e("right"),
            columns: unref(fixedColumnsOnRight),
            data: _data,
            estimatedRowHeight,
            rightTableRef,
            rowHeight,
            bodyWidth: rightColumnsWidthWithScrollbar,
            headerWidth: rightColumnsWidthWithScrollbar,
            headerHeight,
            height: _fixedTableHeight,
            rowKey: rowKey2,
            scrollbarAlwaysOn,
            scrollbarStartGap: 2,
            scrollbarEndGap: vScrollbarSize,
            width: rightColumnsWidthWithScrollbar,
            style: `--${unref(ns2.namespace)}-table-scrollbar-size: ${vScrollbarSize}px`,
            useIsScrolling,
            getRowHeight,
            onScroll: onVerticalScroll
          };
          const _columnsStyles = unref(columnsStyles);
          const tableRowProps = {
            ns: ns2,
            depthMap: unref(depthMap),
            columnsStyles: _columnsStyles,
            expandColumnKey: expandColumnKey2,
            expandedRowKeys: unref(expandedRowKeys),
            estimatedRowHeight,
            hasFixedColumns: unref(hasFixedColumns),
            hoveringRowKey: unref(hoveringRowKey),
            rowProps: rowProps2,
            rowClass,
            rowKey: rowKey2,
            rowEventHandlers,
            onRowHovered,
            onRowExpanded,
            onRowHeightChange
          };
          const tableCellProps = {
            cellProps,
            expandColumnKey: expandColumnKey2,
            indentSize,
            iconSize,
            rowKey: rowKey2,
            expandedRowKeys: unref(expandedRowKeys),
            ns: ns2
          };
          const tableHeaderProps = {
            ns: ns2,
            headerClass,
            headerProps,
            columnsStyles: _columnsStyles
          };
          const tableHeaderCellProps = {
            ns: ns2,
            sortBy,
            sortState,
            headerCellProps,
            onColumnSorted
          };
          const tableSlots = {
            row: (props2) => createVNode(RowRenderer, mergeProps(props2, tableRowProps), {
              row: slots.row,
              cell: (props3) => slots.cell ? createVNode(CellRenderer, mergeProps(props3, tableCellProps, {
                "style": _columnsStyles[props3.column.key]
              }), {
                default: () => [slots.cell]
              }) : createVNode(CellRenderer, mergeProps(props3, tableCellProps, {
                "style": _columnsStyles[props3.column.key]
              }), null)
            }),
            header: (props2) => createVNode(HeaderRenderer, mergeProps(props2, tableHeaderProps), {
              header: slots.header,
              cell: (props3) => slots["header-cell"] ? createVNode(HeaderCellRenderer, mergeProps(props3, tableHeaderCellProps, {
                "style": _columnsStyles[props3.column.key]
              }), {
                default: () => [slots["header-cell"]]
              }) : createVNode(HeaderCellRenderer, mergeProps(props3, tableHeaderCellProps, {
                "style": _columnsStyles[props3.column.key]
              }), null)
            })
          };
          const rootKls = [props.class, ns2.b(), ns2.e("root"), {
            [ns2.is("dynamic")]: unref(isDynamic)
          }];
          const footerProps = {
            class: ns2.e("footer"),
            style: unref(footerHeight)
          };
          return createVNode("div", {
            "class": rootKls,
            "style": unref(rootStyle)
          }, [createVNode(MainTable, mainTableProps, _isSlot(tableSlots) ? tableSlots : {
            default: () => [tableSlots]
          }), createVNode(LeftTable$1, leftTableProps, _isSlot(tableSlots) ? tableSlots : {
            default: () => [tableSlots]
          }), createVNode(LeftTable, rightTableProps, _isSlot(tableSlots) ? tableSlots : {
            default: () => [tableSlots]
          }), slots.footer && createVNode(Footer$1, footerProps, {
            default: slots.footer
          }), unref(showEmpty) && createVNode(Footer, {
            "class": ns2.e("empty"),
            "style": unref(emptyStyle)
          }, {
            default: slots.empty
          }), slots.overlay && createVNode(Overlay, {
            "class": ns2.e("overlay")
          }, {
            default: slots.overlay
          })]);
        };
      }
    });
    const autoResizerProps = buildProps({
      disableWidth: Boolean,
      disableHeight: Boolean,
      onResize: {
        type: definePropType(Function)
      }
    });
    const AutoResizer = defineComponent({
      name: "ElAutoResizer",
      props: autoResizerProps,
      setup(props, {
        slots
      }) {
        const ns2 = useNamespace("auto-resizer");
        const {
          height,
          width,
          sizer
        } = useAutoResize(props);
        const style2 = {
          width: "100%",
          height: "100%"
        };
        return () => {
          var _a2;
          return createVNode("div", {
            "ref": sizer,
            "class": ns2.b(),
            "style": style2
          }, [(_a2 = slots.default) == null ? void 0 : _a2.call(slots, {
            height: height.value,
            width: width.value
          })]);
        };
      }
    });
    const ElTableV2 = withInstall(TableV2);
    const ElAutoResizer = withInstall(AutoResizer);
    const tabBarProps = buildProps({
      tabs: {
        type: definePropType(Array),
        default: () => mutable([])
      }
    });
    const __default__$H = {
      name: "ElTabBar"
    };
    const _sfc_main$P = /* @__PURE__ */ defineComponent({
      ...__default__$H,
      props: tabBarProps,
      setup(__props, { expose }) {
        const props = __props;
        const COMPONENT_NAME2 = "ElTabBar";
        const instance = getCurrentInstance();
        const rootTabs = inject(tabsRootContextKey);
        if (!rootTabs)
          throwError(COMPONENT_NAME2, "<el-tabs><el-tab-bar /></el-tabs>");
        const ns2 = useNamespace("tabs");
        const barRef = ref();
        const barStyle = ref();
        const getBarStyle = () => {
          let offset2 = 0;
          let tabSize = 0;
          const sizeName = ["top", "bottom"].includes(rootTabs.props.tabPosition) ? "width" : "height";
          const sizeDir = sizeName === "width" ? "x" : "y";
          props.tabs.every((tab) => {
            var _a2, _b, _c, _d;
            const $el = (_b = (_a2 = instance.parent) == null ? void 0 : _a2.refs) == null ? void 0 : _b[`tab-${tab.paneName}`];
            if (!$el)
              return false;
            if (!tab.active) {
              return true;
            }
            tabSize = $el[`client${capitalize(sizeName)}`];
            const position = sizeDir === "x" ? "left" : "top";
            offset2 = $el.getBoundingClientRect()[position] - ((_d = (_c = $el.parentElement) == null ? void 0 : _c.getBoundingClientRect()[position]) != null ? _d : 0);
            const tabStyles = window.getComputedStyle($el);
            if (sizeName === "width") {
              if (props.tabs.length > 1) {
                tabSize -= Number.parseFloat(tabStyles.paddingLeft) + Number.parseFloat(tabStyles.paddingRight);
              }
              offset2 += Number.parseFloat(tabStyles.paddingLeft);
            }
            return false;
          });
          return {
            [sizeName]: `${tabSize}px`,
            transform: `translate${capitalize(sizeDir)}(${offset2}px)`
          };
        };
        const update = () => barStyle.value = getBarStyle();
        watch(() => props.tabs, async () => {
          await nextTick$1();
          update();
        }, { immediate: true });
        useResizeObserver(barRef, () => update());
        expose({
          ref: barRef,
          update
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            ref_key: "barRef",
            ref: barRef,
            class: normalizeClass([unref(ns2).e("active-bar"), unref(ns2).is(unref(rootTabs).props.tabPosition)]),
            style: normalizeStyle(barStyle.value)
          }, null, 6);
        };
      }
    });
    var TabBar = /* @__PURE__ */ _export_sfc$1(_sfc_main$P, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/tabs/src/tab-bar.vue"]]);
    const tabNavProps = buildProps({
      panes: {
        type: definePropType(Array),
        default: () => mutable([])
      },
      currentName: {
        type: [String, Number],
        default: ""
      },
      editable: Boolean,
      onTabClick: {
        type: definePropType(Function),
        default: NOOP
      },
      onTabRemove: {
        type: definePropType(Function),
        default: NOOP
      },
      type: {
        type: String,
        values: ["card", "border-card", ""],
        default: ""
      },
      stretch: Boolean
    });
    const COMPONENT_NAME = "ElTabNav";
    const TabNav = defineComponent({
      name: COMPONENT_NAME,
      props: tabNavProps,
      setup(props, {
        expose
      }) {
        const vm = getCurrentInstance();
        const rootTabs = inject(tabsRootContextKey);
        if (!rootTabs)
          throwError(COMPONENT_NAME, `<el-tabs><tab-nav /></el-tabs>`);
        const ns2 = useNamespace("tabs");
        const visibility = useDocumentVisibility();
        const focused = useWindowFocus();
        const navScroll$ = ref();
        const nav$ = ref();
        const el$ = ref();
        const scrollable = ref(false);
        const navOffset = ref(0);
        const isFocus = ref(false);
        const focusable = ref(true);
        const sizeName = computed(() => ["top", "bottom"].includes(rootTabs.props.tabPosition) ? "width" : "height");
        const navStyle = computed(() => {
          const dir = sizeName.value === "width" ? "X" : "Y";
          return {
            transform: `translate${dir}(-${navOffset.value}px)`
          };
        });
        const scrollPrev = () => {
          if (!navScroll$.value)
            return;
          const containerSize = navScroll$.value[`offset${capitalize(sizeName.value)}`];
          const currentOffset = navOffset.value;
          if (!currentOffset)
            return;
          const newOffset = currentOffset > containerSize ? currentOffset - containerSize : 0;
          navOffset.value = newOffset;
        };
        const scrollNext = () => {
          if (!navScroll$.value || !nav$.value)
            return;
          const navSize = nav$.value[`offset${capitalize(sizeName.value)}`];
          const containerSize = navScroll$.value[`offset${capitalize(sizeName.value)}`];
          const currentOffset = navOffset.value;
          if (navSize - currentOffset <= containerSize)
            return;
          const newOffset = navSize - currentOffset > containerSize * 2 ? currentOffset + containerSize : navSize - containerSize;
          navOffset.value = newOffset;
        };
        const scrollToActiveTab = async () => {
          const nav = nav$.value;
          if (!scrollable.value || !el$.value || !navScroll$.value || !nav)
            return;
          await nextTick$1();
          const activeTab = el$.value.querySelector(".is-active");
          if (!activeTab)
            return;
          const navScroll = navScroll$.value;
          const isHorizontal2 = ["top", "bottom"].includes(rootTabs.props.tabPosition);
          const activeTabBounding = activeTab.getBoundingClientRect();
          const navScrollBounding = navScroll.getBoundingClientRect();
          const maxOffset = isHorizontal2 ? nav.offsetWidth - navScrollBounding.width : nav.offsetHeight - navScrollBounding.height;
          const currentOffset = navOffset.value;
          let newOffset = currentOffset;
          if (isHorizontal2) {
            if (activeTabBounding.left < navScrollBounding.left) {
              newOffset = currentOffset - (navScrollBounding.left - activeTabBounding.left);
            }
            if (activeTabBounding.right > navScrollBounding.right) {
              newOffset = currentOffset + activeTabBounding.right - navScrollBounding.right;
            }
          } else {
            if (activeTabBounding.top < navScrollBounding.top) {
              newOffset = currentOffset - (navScrollBounding.top - activeTabBounding.top);
            }
            if (activeTabBounding.bottom > navScrollBounding.bottom) {
              newOffset = currentOffset + (activeTabBounding.bottom - navScrollBounding.bottom);
            }
          }
          newOffset = Math.max(newOffset, 0);
          navOffset.value = Math.min(newOffset, maxOffset);
        };
        const update = () => {
          if (!nav$.value || !navScroll$.value)
            return;
          const navSize = nav$.value[`offset${capitalize(sizeName.value)}`];
          const containerSize = navScroll$.value[`offset${capitalize(sizeName.value)}`];
          const currentOffset = navOffset.value;
          if (containerSize < navSize) {
            const currentOffset2 = navOffset.value;
            scrollable.value = scrollable.value || {};
            scrollable.value.prev = currentOffset2;
            scrollable.value.next = currentOffset2 + containerSize < navSize;
            if (navSize - currentOffset2 < containerSize) {
              navOffset.value = navSize - containerSize;
            }
          } else {
            scrollable.value = false;
            if (currentOffset > 0) {
              navOffset.value = 0;
            }
          }
        };
        const changeTab = (e2) => {
          const code = e2.code;
          const {
            up: up2,
            down: down2,
            left: left2,
            right: right2
          } = EVENT_CODE;
          if (![up2, down2, left2, right2].includes(code))
            return;
          const tabList = Array.from(e2.currentTarget.querySelectorAll("[role=tab]:not(.is-disabled)"));
          const currentIndex = tabList.indexOf(e2.target);
          let nextIndex;
          if (code === left2 || code === up2) {
            if (currentIndex === 0) {
              nextIndex = tabList.length - 1;
            } else {
              nextIndex = currentIndex - 1;
            }
          } else {
            if (currentIndex < tabList.length - 1) {
              nextIndex = currentIndex + 1;
            } else {
              nextIndex = 0;
            }
          }
          tabList[nextIndex].focus();
          tabList[nextIndex].click();
          setFocus();
        };
        const setFocus = () => {
          if (focusable.value)
            isFocus.value = true;
        };
        const removeFocus = () => isFocus.value = false;
        watch(visibility, (visibility2) => {
          if (visibility2 === "hidden") {
            focusable.value = false;
          } else if (visibility2 === "visible") {
            setTimeout(() => focusable.value = true, 50);
          }
        });
        watch(focused, (focused2) => {
          if (focused2) {
            setTimeout(() => focusable.value = true, 50);
          } else {
            focusable.value = false;
          }
        });
        useResizeObserver(el$, update);
        onMounted(() => setTimeout(() => scrollToActiveTab(), 0));
        onUpdated(() => update());
        expose({
          scrollToActiveTab,
          removeFocus
        });
        watch(() => props.panes, () => vm.update(), {
          flush: "post"
        });
        return () => {
          const scrollBtn = scrollable.value ? [createVNode("span", {
            "class": [ns2.e("nav-prev"), ns2.is("disabled", !scrollable.value.prev)],
            "onClick": scrollPrev
          }, [createVNode(ElIcon, null, {
            default: () => [createVNode(arrow_left_default, null, null)]
          })]), createVNode("span", {
            "class": [ns2.e("nav-next"), ns2.is("disabled", !scrollable.value.next)],
            "onClick": scrollNext
          }, [createVNode(ElIcon, null, {
            default: () => [createVNode(arrow_right_default, null, null)]
          })])] : null;
          const tabs = props.panes.map((pane, index2) => {
            var _a2, _b, _c, _d;
            const disabled = pane.props.disabled;
            const tabName = (_b = (_a2 = pane.props.name) != null ? _a2 : pane.index) != null ? _b : `${index2}`;
            const closable = !disabled && (pane.isClosable || props.editable);
            pane.index = `${index2}`;
            const btnClose = closable ? createVNode(ElIcon, {
              "class": "is-icon-close",
              "onClick": (ev) => props.onTabRemove(pane, ev)
            }, {
              default: () => [createVNode(close_default, null, null)]
            }) : null;
            const tabLabelContent = ((_d = (_c = pane.slots).label) == null ? void 0 : _d.call(_c)) || pane.props.label;
            const tabindex = !disabled && pane.active ? 0 : -1;
            return createVNode("div", {
              "ref": `tab-${tabName}`,
              "class": [ns2.e("item"), ns2.is(rootTabs.props.tabPosition), ns2.is("active", pane.active), ns2.is("disabled", disabled), ns2.is("closable", closable), ns2.is("focus", isFocus.value)],
              "id": `tab-${tabName}`,
              "key": `tab-${tabName}`,
              "aria-controls": `pane-${tabName}`,
              "role": "tab",
              "aria-selected": pane.active,
              "tabindex": tabindex,
              "onFocus": () => setFocus(),
              "onBlur": () => removeFocus(),
              "onClick": (ev) => {
                removeFocus();
                props.onTabClick(pane, tabName, ev);
              },
              "onKeydown": (ev) => {
                if (closable && (ev.code === EVENT_CODE.delete || ev.code === EVENT_CODE.backspace)) {
                  props.onTabRemove(pane, ev);
                }
              }
            }, [...[tabLabelContent, btnClose]]);
          });
          return createVNode("div", {
            "ref": el$,
            "class": [ns2.e("nav-wrap"), ns2.is("scrollable", !!scrollable.value), ns2.is(rootTabs.props.tabPosition)]
          }, [scrollBtn, createVNode("div", {
            "class": ns2.e("nav-scroll"),
            "ref": navScroll$
          }, [createVNode("div", {
            "class": [ns2.e("nav"), ns2.is(rootTabs.props.tabPosition), ns2.is("stretch", props.stretch && ["top", "bottom"].includes(rootTabs.props.tabPosition))],
            "ref": nav$,
            "style": navStyle.value,
            "role": "tablist",
            "onKeydown": changeTab
          }, [...[!props.type ? createVNode(TabBar, {
            "tabs": [...props.panes]
          }, null) : null, tabs]])])]);
        };
      }
    });
    const tabsProps = buildProps({
      type: {
        type: String,
        values: ["card", "border-card", ""],
        default: ""
      },
      activeName: {
        type: [String, Number]
      },
      closable: Boolean,
      addable: Boolean,
      modelValue: {
        type: [String, Number]
      },
      editable: Boolean,
      tabPosition: {
        type: String,
        values: ["top", "right", "bottom", "left"],
        default: "top"
      },
      beforeLeave: {
        type: definePropType(Function),
        default: () => true
      },
      stretch: Boolean
    });
    const isPanelName = (value) => isString$3(value) || isNumber$1(value);
    const tabsEmits = {
      [UPDATE_MODEL_EVENT]: (name) => isPanelName(name),
      "tab-click": (pane, ev) => ev instanceof Event,
      "tab-change": (name) => isPanelName(name),
      edit: (paneName, action) => ["remove", "add"].includes(action),
      "tab-remove": (name) => isPanelName(name),
      "tab-add": () => true
    };
    var Tabs = defineComponent({
      name: "ElTabs",
      props: tabsProps,
      emits: tabsEmits,
      setup(props, {
        emit: emit2,
        slots,
        expose
      }) {
        var _a2, _b;
        const ns2 = useNamespace("tabs");
        const nav$ = ref();
        const panes = reactive({});
        const currentName = ref((_b = (_a2 = props.modelValue) != null ? _a2 : props.activeName) != null ? _b : "0");
        const changeCurrentName = (value) => {
          currentName.value = value;
          emit2(UPDATE_MODEL_EVENT, value);
          emit2("tab-change", value);
        };
        const setCurrentName = async (value) => {
          var _a22, _b2, _c;
          if (currentName.value === value || isUndefined$1(value))
            return;
          try {
            const canLeave = await ((_a22 = props.beforeLeave) == null ? void 0 : _a22.call(props, value, currentName.value));
            if (canLeave !== false) {
              changeCurrentName(value);
              (_c = (_b2 = nav$.value) == null ? void 0 : _b2.removeFocus) == null ? void 0 : _c.call(_b2);
            }
          } catch (e2) {
          }
        };
        const handleTabClick = (tab, tabName, event) => {
          if (tab.props.disabled)
            return;
          setCurrentName(tabName);
          emit2("tab-click", tab, event);
        };
        const handleTabRemove = (pane, ev) => {
          if (pane.props.disabled || isUndefined$1(pane.props.name))
            return;
          ev.stopPropagation();
          emit2("edit", pane.props.name, "remove");
          emit2("tab-remove", pane.props.name);
        };
        const handleTabAdd = () => {
          emit2("edit", void 0, "add");
          emit2("tab-add");
        };
        useDeprecated({
          from: '"activeName"',
          replacement: '"model-value" or "v-model"',
          scope: "ElTabs",
          version: "2.3.0",
          ref: "https://element-plus.org/en-US/component/tabs.html#attributes",
          type: "Attribute"
        }, computed(() => !!props.activeName));
        watch(() => props.activeName, (modelValue) => setCurrentName(modelValue));
        watch(() => props.modelValue, (modelValue) => setCurrentName(modelValue));
        watch(currentName, async () => {
          var _a22;
          await nextTick$1();
          (_a22 = nav$.value) == null ? void 0 : _a22.scrollToActiveTab();
        });
        {
          const registerPane = (pane) => panes[pane.uid] = pane;
          const unregisterPane = (uid2) => delete panes[uid2];
          provide(tabsRootContextKey, {
            props,
            currentName,
            registerPane,
            unregisterPane
          });
        }
        expose({
          currentName
        });
        return () => {
          const newButton = props.editable || props.addable ? createVNode("span", {
            "class": ns2.e("new-tab"),
            "tabindex": "0",
            "onClick": handleTabAdd,
            "onKeydown": (ev) => {
              if (ev.code === EVENT_CODE.enter)
                handleTabAdd();
            }
          }, [createVNode(ElIcon, {
            "class": ns2.is("icon-plus")
          }, {
            default: () => [createVNode(plus_default, null, null)]
          })]) : null;
          const header = createVNode("div", {
            "class": [ns2.e("header"), ns2.is(props.tabPosition)]
          }, [newButton, createVNode(TabNav, {
            "ref": nav$,
            "currentName": currentName.value,
            "editable": props.editable,
            "type": props.type,
            "panes": Object.values(panes),
            "stretch": props.stretch,
            "onTabClick": handleTabClick,
            "onTabRemove": handleTabRemove
          }, null)]);
          const panels = createVNode("div", {
            "class": ns2.e("content")
          }, [renderSlot(slots, "default")]);
          return createVNode("div", {
            "class": [ns2.b(), ns2.m(props.tabPosition), {
              [ns2.m("card")]: props.type === "card",
              [ns2.m("border-card")]: props.type === "border-card"
            }]
          }, [...props.tabPosition !== "bottom" ? [header, panels] : [panels, header]]);
        };
      }
    });
    const tabPaneProps = buildProps({
      label: {
        type: String,
        default: ""
      },
      name: {
        type: [String, Number]
      },
      closable: Boolean,
      disabled: Boolean,
      lazy: Boolean
    });
    const _hoisted_1$h = ["id", "aria-hidden", "aria-labelledby"];
    const __default__$G = {
      name: "ElTabPane"
    };
    const _sfc_main$O = /* @__PURE__ */ defineComponent({
      ...__default__$G,
      props: tabPaneProps,
      setup(__props) {
        const props = __props;
        const COMPONENT_NAME2 = "ElTabPane";
        const instance = getCurrentInstance();
        const slots = useSlots();
        const tabsRoot = inject(tabsRootContextKey);
        if (!tabsRoot)
          throwError(COMPONENT_NAME2, "usage: <el-tabs><el-tab-pane /></el-tabs/>");
        const ns2 = useNamespace("tab-pane");
        const index2 = ref();
        const isClosable = computed(() => props.closable || tabsRoot.props.closable);
        const active = computedEager(() => {
          var _a2;
          return tabsRoot.currentName.value === ((_a2 = props.name) != null ? _a2 : index2.value);
        });
        const loaded = ref(active.value);
        const paneName = computed(() => {
          var _a2;
          return (_a2 = props.name) != null ? _a2 : index2.value;
        });
        const shouldBeRender = computedEager(() => !props.lazy || loaded.value || active.value);
        watch(active, (val) => {
          if (val)
            loaded.value = true;
        });
        const pane = reactive({
          uid: instance.uid,
          slots,
          props,
          paneName,
          active,
          index: index2,
          isClosable
        });
        onMounted(() => {
          tabsRoot.registerPane(pane);
        });
        onUnmounted(() => {
          tabsRoot.unregisterPane(pane.uid);
        });
        return (_ctx, _cache) => {
          return unref(shouldBeRender) ? withDirectives((openBlock(), createElementBlock("div", {
            key: 0,
            id: `pane-${unref(paneName)}`,
            class: normalizeClass(unref(ns2).b()),
            role: "tabpanel",
            "aria-hidden": !unref(active),
            "aria-labelledby": `tab-${unref(paneName)}`
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 10, _hoisted_1$h)), [
            [vShow, unref(active)]
          ]) : createCommentVNode("v-if", true);
        };
      }
    });
    var TabPane = /* @__PURE__ */ _export_sfc$1(_sfc_main$O, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/tabs/src/tab-pane.vue"]]);
    const ElTabs = withInstall(Tabs, {
      TabPane
    });
    const ElTabPane = withNoopInstall(TabPane);
    const timeSelectProps = buildProps({
      format: {
        type: String,
        default: "HH:mm"
      },
      modelValue: String,
      disabled: Boolean,
      editable: {
        type: Boolean,
        default: true
      },
      effect: {
        type: String,
        default: "light"
      },
      clearable: {
        type: Boolean,
        default: true
      },
      size: useSizeProp,
      placeholder: String,
      start: {
        type: String,
        default: "09:00"
      },
      end: {
        type: String,
        default: "18:00"
      },
      step: {
        type: String,
        default: "00:30"
      },
      minTime: String,
      maxTime: String,
      name: String,
      prefixIcon: {
        type: definePropType([String, Object]),
        default: () => clock_default
      },
      clearIcon: {
        type: definePropType([String, Object]),
        default: () => circle_close_default
      }
    });
    const parseTime = (time) => {
      const values = (time || "").split(":");
      if (values.length >= 2) {
        let hours = Number.parseInt(values[0], 10);
        const minutes = Number.parseInt(values[1], 10);
        const timeUpper = time.toUpperCase();
        if (timeUpper.includes("AM") && hours === 12) {
          hours = 0;
        } else if (timeUpper.includes("PM") && hours !== 12) {
          hours += 12;
        }
        return {
          hours,
          minutes
        };
      }
      return null;
    };
    const compareTime = (time1, time2) => {
      const value1 = parseTime(time1);
      if (!value1)
        return -1;
      const value2 = parseTime(time2);
      if (!value2)
        return -1;
      const minutes1 = value1.minutes + value1.hours * 60;
      const minutes2 = value2.minutes + value2.hours * 60;
      if (minutes1 === minutes2) {
        return 0;
      }
      return minutes1 > minutes2 ? 1 : -1;
    };
    const padTime = (time) => {
      return `${time}`.padStart(2, "0");
    };
    const formatTime = (time) => {
      return `${padTime(time.hours)}:${padTime(time.minutes)}`;
    };
    const nextTime = (time, step) => {
      const timeValue = parseTime(time);
      if (!timeValue)
        return "";
      const stepValue = parseTime(step);
      if (!stepValue)
        return "";
      const next = {
        hours: timeValue.hours,
        minutes: timeValue.minutes
      };
      next.minutes += stepValue.minutes;
      next.hours += stepValue.hours;
      next.hours += Math.floor(next.minutes / 60);
      next.minutes = next.minutes % 60;
      return formatTime(next);
    };
    const __default__$F = {
      name: "ElTimeSelect"
    };
    const _sfc_main$N = /* @__PURE__ */ defineComponent({
      ...__default__$F,
      props: timeSelectProps,
      emits: ["change", "blur", "focus", "update:modelValue"],
      setup(__props, { expose }) {
        const props = __props;
        dayjs.extend(customParseFormat);
        const { Option: ElOption2 } = ElSelect;
        const nsInput = useNamespace("input");
        const select = ref();
        const value = computed(() => props.modelValue);
        const start = computed(() => {
          const time = parseTime(props.start);
          return time ? formatTime(time) : null;
        });
        const end2 = computed(() => {
          const time = parseTime(props.end);
          return time ? formatTime(time) : null;
        });
        const step = computed(() => {
          const time = parseTime(props.step);
          return time ? formatTime(time) : null;
        });
        const minTime = computed(() => {
          const time = parseTime(props.minTime || "");
          return time ? formatTime(time) : null;
        });
        const maxTime = computed(() => {
          const time = parseTime(props.maxTime || "");
          return time ? formatTime(time) : null;
        });
        const items = computed(() => {
          const result = [];
          if (props.start && props.end && props.step) {
            let current = start.value;
            let currentTime;
            while (current && end2.value && compareTime(current, end2.value) <= 0) {
              currentTime = dayjs(current, "HH:mm").format(props.format);
              result.push({
                value: currentTime,
                disabled: compareTime(current, minTime.value || "-1:-1") <= 0 || compareTime(current, maxTime.value || "100:100") >= 0
              });
              current = nextTime(current, step.value);
            }
          }
          return result;
        });
        const blur = () => {
          var _a2, _b;
          (_b = (_a2 = select.value) == null ? void 0 : _a2.blur) == null ? void 0 : _b.call(_a2);
        };
        const focus = () => {
          var _a2, _b;
          (_b = (_a2 = select.value) == null ? void 0 : _a2.focus) == null ? void 0 : _b.call(_a2);
        };
        expose({
          blur,
          focus
        });
        return (_ctx, _cache) => {
          return openBlock(), createBlock(unref(ElSelect), {
            ref_key: "select",
            ref: select,
            "model-value": unref(value),
            disabled: _ctx.disabled,
            clearable: _ctx.clearable,
            "clear-icon": _ctx.clearIcon,
            size: _ctx.size,
            effect: _ctx.effect,
            placeholder: _ctx.placeholder,
            "default-first-option": "",
            filterable: _ctx.editable,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = (event) => _ctx.$emit("update:modelValue", event)),
            onChange: _cache[1] || (_cache[1] = (event) => _ctx.$emit("change", event)),
            onBlur: _cache[2] || (_cache[2] = (event) => _ctx.$emit("blur", event)),
            onFocus: _cache[3] || (_cache[3] = (event) => _ctx.$emit("focus", event))
          }, {
            prefix: withCtx(() => [
              _ctx.prefixIcon ? (openBlock(), createBlock(unref(ElIcon), {
                key: 0,
                class: normalizeClass(unref(nsInput).e("prefix-icon"))
              }, {
                default: withCtx(() => [
                  (openBlock(), createBlock(resolveDynamicComponent(_ctx.prefixIcon)))
                ]),
                _: 1
              }, 8, ["class"])) : createCommentVNode("v-if", true)
            ]),
            default: withCtx(() => [
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(items), (item) => {
                return openBlock(), createBlock(unref(ElOption2), {
                  key: item.value,
                  label: item.value,
                  value: item.value,
                  disabled: item.disabled
                }, null, 8, ["label", "value", "disabled"]);
              }), 128))
            ]),
            _: 1
          }, 8, ["model-value", "disabled", "clearable", "clear-icon", "size", "effect", "placeholder", "filterable"]);
        };
      }
    });
    var TimeSelect = /* @__PURE__ */ _export_sfc$1(_sfc_main$N, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/time-select/src/time-select.vue"]]);
    TimeSelect.install = (app2) => {
      app2.component(TimeSelect.name, TimeSelect);
    };
    const _TimeSelect = TimeSelect;
    const ElTimeSelect = _TimeSelect;
    const Timeline = defineComponent({
      name: "ElTimeline",
      setup(_2, { slots }) {
        const ns2 = useNamespace("timeline");
        provide("timeline", slots);
        return () => {
          return h$2("ul", { class: [ns2.b()] }, [renderSlot(slots, "default")]);
        };
      }
    });
    const timelineItemProps = buildProps({
      timestamp: {
        type: String,
        default: ""
      },
      hideTimestamp: {
        type: Boolean,
        default: false
      },
      center: {
        type: Boolean,
        default: false
      },
      placement: {
        type: String,
        values: ["top", "bottom"],
        default: "bottom"
      },
      type: {
        type: String,
        values: ["primary", "success", "warning", "danger", "info"],
        default: ""
      },
      color: {
        type: String,
        default: ""
      },
      size: {
        type: String,
        values: ["normal", "large"],
        default: "normal"
      },
      icon: {
        type: iconPropType,
        default: ""
      },
      hollow: {
        type: Boolean,
        default: false
      }
    });
    const __default__$E = {
      name: "ElTimelineItem"
    };
    const _sfc_main$M = /* @__PURE__ */ defineComponent({
      ...__default__$E,
      props: timelineItemProps,
      setup(__props) {
        const ns2 = useNamespace("timeline-item");
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("li", {
            class: normalizeClass([unref(ns2).b(), { [unref(ns2).e("center")]: _ctx.center }])
          }, [
            createBaseVNode("div", {
              class: normalizeClass(unref(ns2).e("tail"))
            }, null, 2),
            !_ctx.$slots.dot ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass([
                unref(ns2).e("node"),
                unref(ns2).em("node", _ctx.size || ""),
                unref(ns2).em("node", _ctx.type || ""),
                unref(ns2).is("hollow", _ctx.hollow)
              ]),
              style: normalizeStyle({
                backgroundColor: _ctx.color
              })
            }, [
              _ctx.icon ? (openBlock(), createBlock(unref(ElIcon), {
                key: 0,
                class: normalizeClass(unref(ns2).e("icon"))
              }, {
                default: withCtx(() => [
                  (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))
                ]),
                _: 1
              }, 8, ["class"])) : createCommentVNode("v-if", true)
            ], 6)) : createCommentVNode("v-if", true),
            _ctx.$slots.dot ? (openBlock(), createElementBlock("div", {
              key: 1,
              class: normalizeClass(unref(ns2).e("dot"))
            }, [
              renderSlot(_ctx.$slots, "dot")
            ], 2)) : createCommentVNode("v-if", true),
            createBaseVNode("div", {
              class: normalizeClass(unref(ns2).e("wrapper"))
            }, [
              !_ctx.hideTimestamp && _ctx.placement === "top" ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass([unref(ns2).e("timestamp"), unref(ns2).is("top")])
              }, toDisplayString$1(_ctx.timestamp), 3)) : createCommentVNode("v-if", true),
              createBaseVNode("div", {
                class: normalizeClass(unref(ns2).e("content"))
              }, [
                renderSlot(_ctx.$slots, "default")
              ], 2),
              !_ctx.hideTimestamp && _ctx.placement === "bottom" ? (openBlock(), createElementBlock("div", {
                key: 1,
                class: normalizeClass([unref(ns2).e("timestamp"), unref(ns2).is("bottom")])
              }, toDisplayString$1(_ctx.timestamp), 3)) : createCommentVNode("v-if", true)
            ], 2)
          ], 2);
        };
      }
    });
    var TimelineItem = /* @__PURE__ */ _export_sfc$1(_sfc_main$M, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/timeline/src/timeline-item.vue"]]);
    const ElTimeline = withInstall(Timeline, {
      TimelineItem
    });
    const ElTimelineItem = withNoopInstall(TimelineItem);
    const tooltipV2CommonProps = buildProps({
      nowrap: Boolean
    });
    var TooltipV2Sides = /* @__PURE__ */ ((TooltipV2Sides2) => {
      TooltipV2Sides2["top"] = "top";
      TooltipV2Sides2["bottom"] = "bottom";
      TooltipV2Sides2["left"] = "left";
      TooltipV2Sides2["right"] = "right";
      return TooltipV2Sides2;
    })(TooltipV2Sides || {});
    const tooltipV2Sides = Object.values(TooltipV2Sides);
    const tooltipV2ArrowProps = buildProps({
      width: {
        type: Number,
        default: 10
      },
      height: {
        type: Number,
        default: 10
      },
      style: {
        type: definePropType(Object),
        default: null
      }
    });
    const tooltipV2ArrowSpecialProps = buildProps({
      side: {
        type: definePropType(String),
        values: tooltipV2Sides,
        required: true
      }
    });
    const tooltipV2Strategies = ["absolute", "fixed"];
    const tooltipV2Placements = [
      "top-start",
      "top-end",
      "top",
      "bottom-start",
      "bottom-end",
      "bottom",
      "left-start",
      "left-end",
      "left",
      "right-start",
      "right-end",
      "right"
    ];
    const tooltipV2ContentProps = buildProps({
      ariaLabel: String,
      arrowPadding: {
        type: definePropType(Number),
        default: 5
      },
      effect: {
        type: String,
        default: ""
      },
      contentClass: String,
      placement: {
        type: definePropType(String),
        values: tooltipV2Placements,
        default: "bottom"
      },
      reference: {
        type: definePropType(Object),
        default: null
      },
      offset: {
        type: Number,
        default: 8
      },
      strategy: {
        type: definePropType(String),
        values: tooltipV2Strategies,
        default: "absolute"
      },
      showArrow: {
        type: Boolean,
        default: false
      }
    });
    const tooltipV2RootProps = buildProps({
      delayDuration: {
        type: Number,
        default: 300
      },
      defaultOpen: Boolean,
      open: {
        type: Boolean,
        default: void 0
      },
      onOpenChange: {
        type: definePropType(Function)
      },
      "onUpdate:open": {
        type: definePropType(Function)
      }
    });
    const EventHandler = {
      type: definePropType(Function)
    };
    const tooltipV2TriggerProps = buildProps({
      onBlur: EventHandler,
      onClick: EventHandler,
      onFocus: EventHandler,
      onMouseDown: EventHandler,
      onMouseEnter: EventHandler,
      onMouseLeave: EventHandler
    });
    const tooltipV2Props = buildProps({
      ...tooltipV2RootProps,
      ...tooltipV2ArrowProps,
      ...tooltipV2TriggerProps,
      ...tooltipV2ContentProps,
      alwaysOn: Boolean,
      fullTransition: Boolean,
      transitionProps: {
        type: definePropType(Object),
        default: null
      },
      teleported: Boolean,
      to: {
        type: definePropType(String),
        default: "body"
      }
    });
    const __default__$D = {
      name: "ElTooltipV2Root"
    };
    const _sfc_main$L = /* @__PURE__ */ defineComponent({
      ...__default__$D,
      props: tooltipV2RootProps,
      setup(__props, { expose }) {
        const props = __props;
        const _open = ref(props.defaultOpen);
        const triggerRef2 = ref(null);
        const open = computed({
          get: () => isPropAbsent(props.open) ? _open.value : props.open,
          set: (open2) => {
            var _a2;
            _open.value = open2;
            (_a2 = props["onUpdate:open"]) == null ? void 0 : _a2.call(props, open2);
          }
        });
        const isOpenDelayed = computed(() => isNumber$1(props.delayDuration) && props.delayDuration > 0);
        const { start: onDelayedOpen, stop: clearTimer } = useTimeoutFn(() => {
          open.value = true;
        }, computed(() => props.delayDuration), {
          immediate: false
        });
        const ns2 = useNamespace("tooltip-v2");
        const contentId = useId();
        const onNormalOpen = () => {
          clearTimer();
          open.value = true;
        };
        const onDelayOpen = () => {
          unref(isOpenDelayed) ? onDelayedOpen() : onNormalOpen();
        };
        const onOpen = onNormalOpen;
        const onClose = () => {
          clearTimer();
          open.value = false;
        };
        const onChange = (open2) => {
          var _a2;
          if (open2) {
            document.dispatchEvent(new CustomEvent(TOOLTIP_V2_OPEN));
            onOpen();
          }
          (_a2 = props.onOpenChange) == null ? void 0 : _a2.call(props, open2);
        };
        watch(open, onChange);
        onMounted(() => {
          document.addEventListener(TOOLTIP_V2_OPEN, onClose);
        });
        onBeforeUnmount(() => {
          clearTimer();
          document.removeEventListener(TOOLTIP_V2_OPEN, onClose);
        });
        provide(tooltipV2RootKey, {
          contentId,
          triggerRef: triggerRef2,
          ns: ns2,
          onClose,
          onDelayOpen,
          onOpen
        });
        expose({
          onOpen,
          onClose
        });
        return (_ctx, _cache) => {
          return renderSlot(_ctx.$slots, "default", { open: unref(open) });
        };
      }
    });
    var TooltipV2Root = /* @__PURE__ */ _export_sfc$1(_sfc_main$L, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/tooltip-v2/src/root.vue"]]);
    const __default__$C = {
      name: "ElTooltipV2Arrow"
    };
    const _sfc_main$K = /* @__PURE__ */ defineComponent({
      ...__default__$C,
      props: {
        ...tooltipV2ArrowProps,
        ...tooltipV2ArrowSpecialProps
      },
      setup(__props) {
        const props = __props;
        const { ns: ns2 } = inject(tooltipV2RootKey);
        const { arrowRef } = inject(tooltipV2ContentKey);
        const arrowStyle = computed(() => {
          const { style: style2, width, height } = props;
          const namespace = ns2.namespace.value;
          return {
            [`--${namespace}-tooltip-v2-arrow-width`]: `${width}px`,
            [`--${namespace}-tooltip-v2-arrow-height`]: `${height}px`,
            [`--${namespace}-tooltip-v2-arrow-border-width`]: `${width / 2}px`,
            [`--${namespace}-tooltip-v2-arrow-cover-width`]: width / 2 - 1,
            ...style2 || {}
          };
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("span", {
            ref_key: "arrowRef",
            ref: arrowRef,
            style: normalizeStyle(unref(arrowStyle)),
            class: normalizeClass(unref(ns2).e("arrow"))
          }, null, 6);
        };
      }
    });
    var TooltipV2Arrow = /* @__PURE__ */ _export_sfc$1(_sfc_main$K, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/tooltip-v2/src/arrow.vue"]]);
    const visualHiddenProps = buildProps({
      style: {
        type: definePropType([String, Object, Array]),
        default: () => ({})
      }
    });
    const __default__$B = {
      name: "ElVisuallyHidden"
    };
    const _sfc_main$J = /* @__PURE__ */ defineComponent({
      ...__default__$B,
      props: visualHiddenProps,
      setup(__props) {
        const props = __props;
        const computedStyle = computed(() => {
          return [
            props.style,
            {
              position: "absolute",
              border: 0,
              width: 1,
              height: 1,
              padding: 0,
              margin: -1,
              overflow: "hidden",
              clip: "rect(0, 0, 0, 0)",
              whiteSpace: "nowrap",
              wordWrap: "normal"
            }
          ];
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("span", mergeProps(_ctx.$attrs, { style: unref(computedStyle) }), [
            renderSlot(_ctx.$slots, "default")
          ], 16);
        };
      }
    });
    var ElVisuallyHidden = /* @__PURE__ */ _export_sfc$1(_sfc_main$J, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/visual-hidden/src/visual-hidden.vue"]]);
    const _hoisted_1$g = ["data-side"];
    const __default__$A = {
      name: "ElTooltipV2Content"
    };
    const _sfc_main$I = /* @__PURE__ */ defineComponent({
      ...__default__$A,
      props: { ...tooltipV2ContentProps, ...tooltipV2CommonProps },
      setup(__props) {
        const props = __props;
        const { triggerRef: triggerRef2, contentId } = inject(tooltipV2RootKey);
        const placement = ref(props.placement);
        const strategy = ref(props.strategy);
        const arrowRef = ref(null);
        const { referenceRef, contentRef, middlewareData, x: x2, y: y2, update } = useFloating({
          placement,
          strategy,
          middleware: computed(() => {
            const middleware = [offset(props.offset)];
            if (props.showArrow) {
              middleware.push(arrowMiddleware({
                arrowRef
              }));
            }
            return middleware;
          })
        });
        const zIndex2 = useZIndex().nextZIndex();
        const ns2 = useNamespace("tooltip-v2");
        const side = computed(() => {
          return placement.value.split("-")[0];
        });
        const contentStyle = computed(() => {
          return {
            position: unref(strategy),
            top: `${unref(y2) || 0}px`,
            left: `${unref(x2) || 0}px`,
            zIndex: zIndex2
          };
        });
        const arrowStyle = computed(() => {
          if (!props.showArrow)
            return {};
          const { arrow: arrow2 } = unref(middlewareData);
          return {
            [`--${ns2.namespace.value}-tooltip-v2-arrow-x`]: `${arrow2 == null ? void 0 : arrow2.x}px` || "",
            [`--${ns2.namespace.value}-tooltip-v2-arrow-y`]: `${arrow2 == null ? void 0 : arrow2.y}px` || ""
          };
        });
        const contentClass = computed(() => [
          ns2.e("content"),
          ns2.is("dark", props.effect === "dark"),
          ns2.is(unref(strategy)),
          props.contentClass
        ]);
        watch(arrowRef, () => update());
        watch(() => props.placement, (val) => placement.value = val);
        onMounted(() => {
          watch(() => props.reference || triggerRef2.value, (el) => {
            referenceRef.value = el || void 0;
          }, {
            immediate: true
          });
        });
        provide(tooltipV2ContentKey, { arrowRef });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            ref_key: "contentRef",
            ref: contentRef,
            style: normalizeStyle(unref(contentStyle)),
            "data-tooltip-v2-root": ""
          }, [
            !_ctx.nowrap ? (openBlock(), createElementBlock("div", {
              key: 0,
              "data-side": unref(side),
              class: normalizeClass(unref(contentClass))
            }, [
              renderSlot(_ctx.$slots, "default", {
                contentStyle: unref(contentStyle),
                contentClass: unref(contentClass)
              }),
              createVNode(unref(ElVisuallyHidden), {
                id: unref(contentId),
                role: "tooltip"
              }, {
                default: withCtx(() => [
                  _ctx.ariaLabel ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                    createTextVNode(toDisplayString$1(_ctx.ariaLabel), 1)
                  ], 64)) : renderSlot(_ctx.$slots, "default", { key: 1 })
                ]),
                _: 3
              }, 8, ["id"]),
              renderSlot(_ctx.$slots, "arrow", {
                style: normalizeStyle(unref(arrowStyle)),
                side: unref(side)
              })
            ], 10, _hoisted_1$g)) : createCommentVNode("v-if", true)
          ], 4);
        };
      }
    });
    var TooltipV2Content = /* @__PURE__ */ _export_sfc$1(_sfc_main$I, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/tooltip-v2/src/content.vue"]]);
    const forwardRefProps = buildProps({
      setRef: {
        type: definePropType(Function),
        required: true
      },
      onlyChild: Boolean
    });
    var ForwardRef = defineComponent({
      props: forwardRefProps,
      setup(props, {
        slots
      }) {
        const fragmentRef = ref();
        const setRef2 = composeRefs(fragmentRef, (el) => {
          if (el) {
            props.setRef(el.nextElementSibling);
          } else {
            props.setRef(null);
          }
        });
        return () => {
          var _a2;
          const [firstChild] = ((_a2 = slots.default) == null ? void 0 : _a2.call(slots)) || [];
          const child = props.onlyChild ? ensureOnlyChild(firstChild.children) : firstChild.children;
          return createVNode(Fragment, {
            "ref": setRef2
          }, [child]);
        };
      }
    });
    const __default__$z = {
      name: "ElTooltipV2Trigger"
    };
    const _sfc_main$H = /* @__PURE__ */ defineComponent({
      ...__default__$z,
      props: {
        ...tooltipV2CommonProps,
        ...tooltipV2TriggerProps
      },
      setup(__props) {
        const props = __props;
        const { onClose, onOpen, onDelayOpen, triggerRef: triggerRef2, contentId } = inject(tooltipV2RootKey);
        let isMousedown = false;
        const setTriggerRef = (el) => {
          triggerRef2.value = el;
        };
        const onMouseup = () => {
          isMousedown = false;
        };
        const onMouseenter = composeEventHandlers(props.onMouseEnter, onDelayOpen);
        const onMouseleave = composeEventHandlers(props.onMouseLeave, onClose);
        const onMousedown = composeEventHandlers(props.onMouseDown, () => {
          onClose();
          isMousedown = true;
          document.addEventListener("mouseup", onMouseup, { once: true });
        });
        const onFocus = composeEventHandlers(props.onFocus, () => {
          if (!isMousedown)
            onOpen();
        });
        const onBlur = composeEventHandlers(props.onBlur, onClose);
        const onClick = composeEventHandlers(props.onClick, (e2) => {
          if (e2.detail === 0)
            onClose();
        });
        const events2 = {
          blur: onBlur,
          click: onClick,
          focus: onFocus,
          mousedown: onMousedown,
          mouseenter: onMouseenter,
          mouseleave: onMouseleave
        };
        const setEvents = (el, events22, type2) => {
          if (el) {
            Object.entries(events22).forEach(([name, handler]) => {
              el[type2](name, handler);
            });
          }
        };
        watch(triggerRef2, (triggerEl, previousTriggerEl) => {
          setEvents(triggerEl, events2, "addEventListener");
          setEvents(previousTriggerEl, events2, "removeEventListener");
          if (triggerEl) {
            triggerEl.setAttribute("aria-describedby", contentId.value);
          }
        });
        onBeforeUnmount(() => {
          setEvents(triggerRef2.value, events2, "removeEventListener");
          document.removeEventListener("mouseup", onMouseup);
        });
        return (_ctx, _cache) => {
          return _ctx.nowrap ? (openBlock(), createBlock(unref(ForwardRef), {
            key: 0,
            "set-ref": setTriggerRef,
            "only-child": ""
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          })) : (openBlock(), createElementBlock("button", mergeProps({
            key: 1,
            ref_key: "triggerRef",
            ref: triggerRef2
          }, _ctx.$attrs), [
            renderSlot(_ctx.$slots, "default")
          ], 16));
        };
      }
    });
    var TooltipV2Trigger = /* @__PURE__ */ _export_sfc$1(_sfc_main$H, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/tooltip-v2/src/trigger.vue"]]);
    const __default__$y = {
      name: "ElTooltipV2"
    };
    const _sfc_main$G = /* @__PURE__ */ defineComponent({
      ...__default__$y,
      props: tooltipV2Props,
      setup(__props) {
        const props = __props;
        const refedProps = toRefs(props);
        const arrowProps = reactive(pick$1(refedProps, Object.keys(tooltipV2ArrowProps)));
        const contentProps = reactive(pick$1(refedProps, Object.keys(tooltipV2ContentProps)));
        const rootProps = reactive(pick$1(refedProps, Object.keys(tooltipV2RootProps)));
        const triggerProps = reactive(pick$1(refedProps, Object.keys(tooltipV2TriggerProps)));
        return (_ctx, _cache) => {
          return openBlock(), createBlock(TooltipV2Root, normalizeProps(guardReactiveProps(rootProps)), {
            default: withCtx(({ open }) => [
              createVNode(TooltipV2Trigger, mergeProps(triggerProps, { nowrap: "" }), {
                default: withCtx(() => [
                  renderSlot(_ctx.$slots, "trigger")
                ]),
                _: 3
              }, 16),
              (openBlock(), createBlock(Teleport, {
                to: _ctx.to,
                disabled: !_ctx.teleported
              }, [
                _ctx.fullTransition ? (openBlock(), createBlock(Transition, normalizeProps(mergeProps({ key: 0 }, _ctx.transitionProps)), {
                  default: withCtx(() => [
                    _ctx.alwaysOn || open ? (openBlock(), createBlock(TooltipV2Content, normalizeProps(mergeProps({ key: 0 }, contentProps)), {
                      arrow: withCtx(({ style: style2, side }) => [
                        _ctx.showArrow ? (openBlock(), createBlock(TooltipV2Arrow, mergeProps({ key: 0 }, arrowProps, {
                          style: style2,
                          side
                        }), null, 16, ["style", "side"])) : createCommentVNode("v-if", true)
                      ]),
                      default: withCtx(() => [
                        renderSlot(_ctx.$slots, "default")
                      ]),
                      _: 3
                    }, 16)) : createCommentVNode("v-if", true)
                  ]),
                  _: 2
                }, 1040)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  _ctx.alwaysOn || open ? (openBlock(), createBlock(TooltipV2Content, normalizeProps(mergeProps({ key: 0 }, contentProps)), {
                    arrow: withCtx(({ style: style2, side }) => [
                      _ctx.showArrow ? (openBlock(), createBlock(TooltipV2Arrow, mergeProps({ key: 0 }, arrowProps, {
                        style: style2,
                        side
                      }), null, 16, ["style", "side"])) : createCommentVNode("v-if", true)
                    ]),
                    default: withCtx(() => [
                      renderSlot(_ctx.$slots, "default")
                    ]),
                    _: 3
                  }, 16)) : createCommentVNode("v-if", true)
                ], 64))
              ], 8, ["to", "disabled"]))
            ]),
            _: 3
          }, 16);
        };
      }
    });
    var TooltipV2 = /* @__PURE__ */ _export_sfc$1(_sfc_main$G, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/tooltip-v2/src/tooltip.vue"]]);
    const ElTooltipV2 = withInstall(TooltipV2);
    const LEFT_CHECK_CHANGE_EVENT = "left-check-change";
    const RIGHT_CHECK_CHANGE_EVENT = "right-check-change";
    const transferProps = buildProps({
      data: {
        type: definePropType(Array),
        default: () => []
      },
      titles: {
        type: definePropType(Array),
        default: () => []
      },
      buttonTexts: {
        type: definePropType(Array),
        default: () => []
      },
      filterPlaceholder: String,
      filterMethod: {
        type: definePropType(Function)
      },
      leftDefaultChecked: {
        type: definePropType(Array),
        default: () => []
      },
      rightDefaultChecked: {
        type: definePropType(Array),
        default: () => []
      },
      renderContent: {
        type: definePropType(Function)
      },
      modelValue: {
        type: definePropType(Array),
        default: () => []
      },
      format: {
        type: definePropType(Object),
        default: () => ({})
      },
      filterable: Boolean,
      props: {
        type: definePropType(Object),
        default: () => mutable({
          label: "label",
          key: "key",
          disabled: "disabled"
        })
      },
      targetOrder: {
        type: String,
        values: ["original", "push", "unshift"],
        default: "original"
      },
      validateEvent: {
        type: Boolean,
        default: true
      }
    });
    const transferCheckedChangeFn = (value, movedKeys) => [value, movedKeys].every(isArray$6) || isArray$6(value) && isNil(movedKeys);
    const transferEmits = {
      [CHANGE_EVENT]: (value, direction2, movedKeys) => [value, movedKeys].every(isArray$6) && ["left", "right"].includes(direction2),
      [UPDATE_MODEL_EVENT]: (value) => isArray$6(value),
      [LEFT_CHECK_CHANGE_EVENT]: transferCheckedChangeFn,
      [RIGHT_CHECK_CHANGE_EVENT]: transferCheckedChangeFn
    };
    const CHECKED_CHANGE_EVENT = "checked-change";
    const transferPanelProps = buildProps({
      data: transferProps.data,
      optionRender: {
        type: definePropType(Function)
      },
      placeholder: String,
      title: String,
      filterable: Boolean,
      format: transferProps.format,
      filterMethod: transferProps.filterMethod,
      defaultChecked: transferProps.leftDefaultChecked,
      props: transferProps.props
    });
    const transferPanelEmits = {
      [CHECKED_CHANGE_EVENT]: transferCheckedChangeFn
    };
    const usePropsAlias = (props) => {
      const initProps2 = {
        label: "label",
        key: "key",
        disabled: "disabled"
      };
      return computed(() => ({
        ...initProps2,
        ...props.props
      }));
    };
    const useCheck$1 = (props, panelState, emit2) => {
      const propsAlias = usePropsAlias(props);
      const filteredData = computed(() => {
        return props.data.filter((item) => {
          if (isFunction$4(props.filterMethod)) {
            return props.filterMethod(panelState.query, item);
          } else {
            const label = String(item[propsAlias.value.label] || item[propsAlias.value.key]);
            return label.toLowerCase().includes(panelState.query.toLowerCase());
          }
        });
      });
      const checkableData = computed(() => filteredData.value.filter((item) => !item[propsAlias.value.disabled]));
      const checkedSummary = computed(() => {
        const checkedLength = panelState.checked.length;
        const dataLength = props.data.length;
        const { noChecked, hasChecked } = props.format;
        if (noChecked && hasChecked) {
          return checkedLength > 0 ? hasChecked.replace(/\${checked}/g, checkedLength.toString()).replace(/\${total}/g, dataLength.toString()) : noChecked.replace(/\${total}/g, dataLength.toString());
        } else {
          return `${checkedLength}/${dataLength}`;
        }
      });
      const isIndeterminate = computed(() => {
        const checkedLength = panelState.checked.length;
        return checkedLength > 0 && checkedLength < checkableData.value.length;
      });
      const updateAllChecked = () => {
        const checkableDataKeys = checkableData.value.map((item) => item[propsAlias.value.key]);
        panelState.allChecked = checkableDataKeys.length > 0 && checkableDataKeys.every((item) => panelState.checked.includes(item));
      };
      const handleAllCheckedChange = (value) => {
        panelState.checked = value ? checkableData.value.map((item) => item[propsAlias.value.key]) : [];
      };
      watch(() => panelState.checked, (val, oldVal) => {
        updateAllChecked();
        if (panelState.checkChangeByUser) {
          const movedKeys = val.concat(oldVal).filter((v2) => !val.includes(v2) || !oldVal.includes(v2));
          emit2(CHECKED_CHANGE_EVENT, val, movedKeys);
        } else {
          emit2(CHECKED_CHANGE_EVENT, val);
          panelState.checkChangeByUser = true;
        }
      });
      watch(checkableData, () => {
        updateAllChecked();
      });
      watch(() => props.data, () => {
        const checked2 = [];
        const filteredDataKeys = filteredData.value.map((item) => item[propsAlias.value.key]);
        panelState.checked.forEach((item) => {
          if (filteredDataKeys.includes(item)) {
            checked2.push(item);
          }
        });
        panelState.checkChangeByUser = false;
        panelState.checked = checked2;
      });
      watch(() => props.defaultChecked, (val, oldVal) => {
        if (oldVal && val.length === oldVal.length && val.every((item) => oldVal.includes(item)))
          return;
        const checked2 = [];
        const checkableDataKeys = checkableData.value.map((item) => item[propsAlias.value.key]);
        val.forEach((item) => {
          if (checkableDataKeys.includes(item)) {
            checked2.push(item);
          }
        });
        panelState.checkChangeByUser = false;
        panelState.checked = checked2;
      }, {
        immediate: true
      });
      return {
        filteredData,
        checkableData,
        checkedSummary,
        isIndeterminate,
        updateAllChecked,
        handleAllCheckedChange
      };
    };
    const useCheckedChange = (checkedState, emit2) => {
      const onSourceCheckedChange = (val, movedKeys) => {
        checkedState.leftChecked = val;
        if (!movedKeys)
          return;
        emit2(LEFT_CHECK_CHANGE_EVENT, val, movedKeys);
      };
      const onTargetCheckedChange = (val, movedKeys) => {
        checkedState.rightChecked = val;
        if (!movedKeys)
          return;
        emit2(RIGHT_CHECK_CHANGE_EVENT, val, movedKeys);
      };
      return {
        onSourceCheckedChange,
        onTargetCheckedChange
      };
    };
    const useComputedData = (props) => {
      const propsAlias = usePropsAlias(props);
      const dataObj = computed(() => props.data.reduce((o2, cur) => (o2[cur[propsAlias.value.key]] = cur) && o2, {}));
      const sourceData = computed(() => props.data.filter((item) => !props.modelValue.includes(item[propsAlias.value.key])));
      const targetData = computed(() => {
        if (props.targetOrder === "original") {
          return props.data.filter((item) => props.modelValue.includes(item[propsAlias.value.key]));
        } else {
          return props.modelValue.reduce((arr, cur) => {
            const val = dataObj.value[cur];
            if (val) {
              arr.push(val);
            }
            return arr;
          }, []);
        }
      });
      return {
        sourceData,
        targetData
      };
    };
    const useMove = (props, checkedState, emit2) => {
      const propsAlias = usePropsAlias(props);
      const _emit = (value, direction2, movedKeys) => {
        emit2(UPDATE_MODEL_EVENT, value);
        emit2(CHANGE_EVENT, value, direction2, movedKeys);
      };
      const addToLeft = () => {
        const currentValue = props.modelValue.slice();
        checkedState.rightChecked.forEach((item) => {
          const index2 = currentValue.indexOf(item);
          if (index2 > -1) {
            currentValue.splice(index2, 1);
          }
        });
        _emit(currentValue, "left", checkedState.rightChecked);
      };
      const addToRight = () => {
        let currentValue = props.modelValue.slice();
        const itemsToBeMoved = props.data.filter((item) => {
          const itemKey = item[propsAlias.value.key];
          return checkedState.leftChecked.includes(itemKey) && !props.modelValue.includes(itemKey);
        }).map((item) => item[propsAlias.value.key]);
        currentValue = props.targetOrder === "unshift" ? itemsToBeMoved.concat(currentValue) : currentValue.concat(itemsToBeMoved);
        if (props.targetOrder === "original") {
          currentValue = props.data.filter((item) => currentValue.includes(item[propsAlias.value.key])).map((item) => item[propsAlias.value.key]);
        }
        _emit(currentValue, "right", checkedState.leftChecked);
      };
      return {
        addToLeft,
        addToRight
      };
    };
    const __default__$x = {
      name: "ElTransferPanel"
    };
    const _sfc_main$F = /* @__PURE__ */ defineComponent({
      ...__default__$x,
      props: transferPanelProps,
      emits: transferPanelEmits,
      setup(__props, { expose, emit: emit2 }) {
        const props = __props;
        const slots = useSlots();
        const OptionContent = ({ option }) => option;
        const { t } = useLocale();
        const ns2 = useNamespace("transfer");
        const panelState = reactive({
          checked: [],
          allChecked: false,
          query: "",
          inputHover: false,
          checkChangeByUser: true
        });
        const propsAlias = usePropsAlias(props);
        const {
          filteredData,
          checkedSummary,
          isIndeterminate,
          handleAllCheckedChange
        } = useCheck$1(props, panelState, emit2);
        const hasNoMatch = computed(() => !isEmpty(panelState.query) && isEmpty(filteredData.value));
        const hasFooter = computed(() => !isEmpty(slots.default()[0].children));
        const { checked: checked2, allChecked, query, inputHover } = toRefs(panelState);
        expose({
          query
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            class: normalizeClass(unref(ns2).b("panel"))
          }, [
            createBaseVNode("p", {
              class: normalizeClass(unref(ns2).be("panel", "header"))
            }, [
              createVNode(unref(ElCheckbox), {
                modelValue: unref(allChecked),
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => isRef(allChecked) ? allChecked.value = $event : null),
                indeterminate: unref(isIndeterminate),
                onChange: unref(handleAllCheckedChange)
              }, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString$1(_ctx.title) + " ", 1),
                  createBaseVNode("span", null, toDisplayString$1(unref(checkedSummary)), 1)
                ]),
                _: 1
              }, 8, ["modelValue", "indeterminate", "onChange"])
            ], 2),
            createBaseVNode("div", {
              class: normalizeClass([unref(ns2).be("panel", "body"), unref(ns2).is("with-footer", unref(hasFooter))])
            }, [
              _ctx.filterable ? (openBlock(), createBlock(unref(ElInput), {
                key: 0,
                modelValue: unref(query),
                "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => isRef(query) ? query.value = $event : null),
                class: normalizeClass(unref(ns2).be("panel", "filter")),
                size: "default",
                placeholder: _ctx.placeholder,
                "prefix-icon": unref(search_default),
                clearable: "",
                onMouseenter: _cache[2] || (_cache[2] = ($event) => inputHover.value = true),
                onMouseleave: _cache[3] || (_cache[3] = ($event) => inputHover.value = false)
              }, null, 8, ["modelValue", "class", "placeholder", "prefix-icon"])) : createCommentVNode("v-if", true),
              withDirectives(createVNode(unref(ElCheckboxGroup$1), {
                modelValue: unref(checked2),
                "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => isRef(checked2) ? checked2.value = $event : null),
                class: normalizeClass([unref(ns2).is("filterable", _ctx.filterable), unref(ns2).be("panel", "list")])
              }, {
                default: withCtx(() => [
                  (openBlock(true), createElementBlock(Fragment, null, renderList(unref(filteredData), (item) => {
                    return openBlock(), createBlock(unref(ElCheckbox), {
                      key: item[unref(propsAlias).key],
                      class: normalizeClass(unref(ns2).be("panel", "item")),
                      label: item[unref(propsAlias).key],
                      disabled: item[unref(propsAlias).disabled]
                    }, {
                      default: withCtx(() => {
                        var _a2;
                        return [
                          createVNode(OptionContent, {
                            option: (_a2 = _ctx.optionRender) == null ? void 0 : _a2.call(_ctx, item)
                          }, null, 8, ["option"])
                        ];
                      }),
                      _: 2
                    }, 1032, ["class", "label", "disabled"]);
                  }), 128))
                ]),
                _: 1
              }, 8, ["modelValue", "class"]), [
                [vShow, !unref(hasNoMatch) && !unref(isEmpty)(_ctx.data)]
              ]),
              withDirectives(createBaseVNode("p", {
                class: normalizeClass(unref(ns2).be("panel", "empty"))
              }, toDisplayString$1(unref(hasNoMatch) ? unref(t)("el.transfer.noMatch") : unref(t)("el.transfer.noData")), 3), [
                [vShow, unref(hasNoMatch) || unref(isEmpty)(_ctx.data)]
              ])
            ], 2),
            unref(hasFooter) ? (openBlock(), createElementBlock("p", {
              key: 0,
              class: normalizeClass(unref(ns2).be("panel", "footer"))
            }, [
              renderSlot(_ctx.$slots, "default")
            ], 2)) : createCommentVNode("v-if", true)
          ], 2);
        };
      }
    });
    var TransferPanel = /* @__PURE__ */ _export_sfc$1(_sfc_main$F, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/transfer/src/transfer-panel.vue"]]);
    const _hoisted_1$f = { key: 0 };
    const _hoisted_2$9 = { key: 0 };
    const __default__$w = {
      name: "ElTransfer"
    };
    const _sfc_main$E = /* @__PURE__ */ defineComponent({
      ...__default__$w,
      props: transferProps,
      emits: transferEmits,
      setup(__props, { expose, emit: emit2 }) {
        const props = __props;
        const slots = useSlots();
        const { t } = useLocale();
        const ns2 = useNamespace("transfer");
        const { formItem } = useFormItem();
        const checkedState = reactive({
          leftChecked: [],
          rightChecked: []
        });
        const propsAlias = usePropsAlias(props);
        const { sourceData, targetData } = useComputedData(props);
        const { onSourceCheckedChange, onTargetCheckedChange } = useCheckedChange(checkedState, emit2);
        const { addToLeft, addToRight } = useMove(props, checkedState, emit2);
        const leftPanel = ref();
        const rightPanel = ref();
        const clearQuery = (which) => {
          switch (which) {
            case "left":
              leftPanel.value.query = "";
              break;
            case "right":
              rightPanel.value.query = "";
              break;
          }
        };
        const hasButtonTexts = computed(() => props.buttonTexts.length === 2);
        const leftPanelTitle = computed(() => props.titles[0] || t("el.transfer.titles.0"));
        const rightPanelTitle = computed(() => props.titles[1] || t("el.transfer.titles.1"));
        const panelFilterPlaceholder = computed(() => props.filterPlaceholder || t("el.transfer.filterPlaceholder"));
        watch(() => props.modelValue, () => {
          var _a2;
          if (props.validateEvent) {
            (_a2 = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a2.call(formItem, "change").catch((err) => debugWarn());
          }
        });
        const optionRender = computed(() => (option) => {
          if (props.renderContent)
            return props.renderContent(h$2, option);
          if (slots.default)
            return slots.default({ option });
          return h$2("span", option[propsAlias.value.label] || option[propsAlias.value.key]);
        });
        expose({
          clearQuery,
          leftPanel,
          rightPanel
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            class: normalizeClass(unref(ns2).b())
          }, [
            createVNode(TransferPanel, {
              ref_key: "leftPanel",
              ref: leftPanel,
              data: unref(sourceData),
              "option-render": unref(optionRender),
              placeholder: unref(panelFilterPlaceholder),
              title: unref(leftPanelTitle),
              filterable: _ctx.filterable,
              format: _ctx.format,
              "filter-method": _ctx.filterMethod,
              "default-checked": _ctx.leftDefaultChecked,
              props: props.props,
              onCheckedChange: unref(onSourceCheckedChange)
            }, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "left-footer")
              ]),
              _: 3
            }, 8, ["data", "option-render", "placeholder", "title", "filterable", "format", "filter-method", "default-checked", "props", "onCheckedChange"]),
            createBaseVNode("div", {
              class: normalizeClass(unref(ns2).e("buttons"))
            }, [
              createVNode(unref(ElButton), {
                type: "primary",
                class: normalizeClass([unref(ns2).e("button"), unref(ns2).is("with-texts", unref(hasButtonTexts))]),
                disabled: unref(isEmpty)(checkedState.rightChecked),
                onClick: unref(addToLeft)
              }, {
                default: withCtx(() => [
                  createVNode(unref(ElIcon), null, {
                    default: withCtx(() => [
                      createVNode(unref(arrow_left_default))
                    ]),
                    _: 1
                  }),
                  !unref(isUndefined$1)(_ctx.buttonTexts[0]) ? (openBlock(), createElementBlock("span", _hoisted_1$f, toDisplayString$1(_ctx.buttonTexts[0]), 1)) : createCommentVNode("v-if", true)
                ]),
                _: 1
              }, 8, ["class", "disabled", "onClick"]),
              createVNode(unref(ElButton), {
                type: "primary",
                class: normalizeClass([unref(ns2).e("button"), unref(ns2).is("with-texts", unref(hasButtonTexts))]),
                disabled: unref(isEmpty)(checkedState.leftChecked),
                onClick: unref(addToRight)
              }, {
                default: withCtx(() => [
                  !unref(isUndefined$1)(_ctx.buttonTexts[1]) ? (openBlock(), createElementBlock("span", _hoisted_2$9, toDisplayString$1(_ctx.buttonTexts[1]), 1)) : createCommentVNode("v-if", true),
                  createVNode(unref(ElIcon), null, {
                    default: withCtx(() => [
                      createVNode(unref(arrow_right_default))
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              }, 8, ["class", "disabled", "onClick"])
            ], 2),
            createVNode(TransferPanel, {
              ref_key: "rightPanel",
              ref: rightPanel,
              data: unref(targetData),
              "option-render": unref(optionRender),
              placeholder: unref(panelFilterPlaceholder),
              filterable: _ctx.filterable,
              format: _ctx.format,
              "filter-method": _ctx.filterMethod,
              title: unref(rightPanelTitle),
              "default-checked": _ctx.rightDefaultChecked,
              props: props.props,
              onCheckedChange: unref(onTargetCheckedChange)
            }, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "right-footer")
              ]),
              _: 3
            }, 8, ["data", "option-render", "placeholder", "filterable", "format", "filter-method", "title", "default-checked", "props", "onCheckedChange"])
          ], 2);
        };
      }
    });
    var Transfer = /* @__PURE__ */ _export_sfc$1(_sfc_main$E, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/transfer/src/transfer.vue"]]);
    const ElTransfer = withInstall(Transfer);
    const NODE_KEY = "$treeNodeId";
    const markNodeData = function(node, data) {
      if (!data || data[NODE_KEY])
        return;
      Object.defineProperty(data, NODE_KEY, {
        value: node.id,
        enumerable: false,
        configurable: false,
        writable: false
      });
    };
    const getNodeKey = function(key, data) {
      if (!key)
        return data[NODE_KEY];
      return data[key];
    };
    const getChildState = (node) => {
      let all = true;
      let none = true;
      let allWithoutDisable = true;
      for (let i2 = 0, j2 = node.length; i2 < j2; i2++) {
        const n2 = node[i2];
        if (n2.checked !== true || n2.indeterminate) {
          all = false;
          if (!n2.disabled) {
            allWithoutDisable = false;
          }
        }
        if (n2.checked !== false || n2.indeterminate) {
          none = false;
        }
      }
      return { all, none, allWithoutDisable, half: !all && !none };
    };
    const reInitChecked = function(node) {
      if (node.childNodes.length === 0)
        return;
      const { all, none, half } = getChildState(node.childNodes);
      if (all) {
        node.checked = true;
        node.indeterminate = false;
      } else if (half) {
        node.checked = false;
        node.indeterminate = true;
      } else if (none) {
        node.checked = false;
        node.indeterminate = false;
      }
      const parent = node.parent;
      if (!parent || parent.level === 0)
        return;
      if (!node.store.checkStrictly) {
        reInitChecked(parent);
      }
    };
    const getPropertyFromData = function(node, prop) {
      const props = node.store.props;
      const data = node.data || {};
      const config2 = props[prop];
      if (typeof config2 === "function") {
        return config2(data, node);
      } else if (typeof config2 === "string") {
        return data[config2];
      } else if (typeof config2 === "undefined") {
        const dataProp = data[prop];
        return dataProp === void 0 ? "" : dataProp;
      }
    };
    let nodeIdSeed = 0;
    class Node {
      constructor(options) {
        this.id = nodeIdSeed++;
        this.text = null;
        this.checked = false;
        this.indeterminate = false;
        this.data = null;
        this.expanded = false;
        this.parent = null;
        this.visible = true;
        this.isCurrent = false;
        this.canFocus = false;
        for (const name in options) {
          if (hasOwn$2(options, name)) {
            this[name] = options[name];
          }
        }
        this.level = 0;
        this.loaded = false;
        this.childNodes = [];
        this.loading = false;
        if (this.parent) {
          this.level = this.parent.level + 1;
        }
      }
      initialize() {
        const store = this.store;
        if (!store) {
          throw new Error("[Node]store is required!");
        }
        store.registerNode(this);
        const props = store.props;
        if (props && typeof props.isLeaf !== "undefined") {
          const isLeaf2 = getPropertyFromData(this, "isLeaf");
          if (typeof isLeaf2 === "boolean") {
            this.isLeafByUser = isLeaf2;
          }
        }
        if (store.lazy !== true && this.data) {
          this.setData(this.data);
          if (store.defaultExpandAll) {
            this.expanded = true;
            this.canFocus = true;
          }
        } else if (this.level > 0 && store.lazy && store.defaultExpandAll) {
          this.expand();
        }
        if (!Array.isArray(this.data)) {
          markNodeData(this, this.data);
        }
        if (!this.data)
          return;
        const defaultExpandedKeys = store.defaultExpandedKeys;
        const key = store.key;
        if (key && defaultExpandedKeys && defaultExpandedKeys.includes(this.key)) {
          this.expand(null, store.autoExpandParent);
        }
        if (key && store.currentNodeKey !== void 0 && this.key === store.currentNodeKey) {
          store.currentNode = this;
          store.currentNode.isCurrent = true;
        }
        if (store.lazy) {
          store._initDefaultCheckedNode(this);
        }
        this.updateLeafState();
        if (this.parent && (this.level === 1 || this.parent.expanded === true))
          this.canFocus = true;
      }
      setData(data) {
        if (!Array.isArray(data)) {
          markNodeData(this, data);
        }
        this.data = data;
        this.childNodes = [];
        let children;
        if (this.level === 0 && Array.isArray(this.data)) {
          children = this.data;
        } else {
          children = getPropertyFromData(this, "children") || [];
        }
        for (let i2 = 0, j2 = children.length; i2 < j2; i2++) {
          this.insertChild({ data: children[i2] });
        }
      }
      get label() {
        return getPropertyFromData(this, "label");
      }
      get key() {
        const nodeKey = this.store.key;
        if (this.data)
          return this.data[nodeKey];
        return null;
      }
      get disabled() {
        return getPropertyFromData(this, "disabled");
      }
      get nextSibling() {
        const parent = this.parent;
        if (parent) {
          const index2 = parent.childNodes.indexOf(this);
          if (index2 > -1) {
            return parent.childNodes[index2 + 1];
          }
        }
        return null;
      }
      get previousSibling() {
        const parent = this.parent;
        if (parent) {
          const index2 = parent.childNodes.indexOf(this);
          if (index2 > -1) {
            return index2 > 0 ? parent.childNodes[index2 - 1] : null;
          }
        }
        return null;
      }
      contains(target, deep = true) {
        return (this.childNodes || []).some((child) => child === target || deep && child.contains(target));
      }
      remove() {
        const parent = this.parent;
        if (parent) {
          parent.removeChild(this);
        }
      }
      insertChild(child, index2, batch) {
        if (!child)
          throw new Error("InsertChild error: child is required.");
        if (!(child instanceof Node)) {
          if (!batch) {
            const children = this.getChildren(true);
            if (!children.includes(child.data)) {
              if (typeof index2 === "undefined" || index2 < 0) {
                children.push(child.data);
              } else {
                children.splice(index2, 0, child.data);
              }
            }
          }
          Object.assign(child, {
            parent: this,
            store: this.store
          });
          child = reactive(new Node(child));
          if (child instanceof Node) {
            child.initialize();
          }
        }
        child.level = this.level + 1;
        if (typeof index2 === "undefined" || index2 < 0) {
          this.childNodes.push(child);
        } else {
          this.childNodes.splice(index2, 0, child);
        }
        this.updateLeafState();
      }
      insertBefore(child, ref2) {
        let index2;
        if (ref2) {
          index2 = this.childNodes.indexOf(ref2);
        }
        this.insertChild(child, index2);
      }
      insertAfter(child, ref2) {
        let index2;
        if (ref2) {
          index2 = this.childNodes.indexOf(ref2);
          if (index2 !== -1)
            index2 += 1;
        }
        this.insertChild(child, index2);
      }
      removeChild(child) {
        const children = this.getChildren() || [];
        const dataIndex = children.indexOf(child.data);
        if (dataIndex > -1) {
          children.splice(dataIndex, 1);
        }
        const index2 = this.childNodes.indexOf(child);
        if (index2 > -1) {
          this.store && this.store.deregisterNode(child);
          child.parent = null;
          this.childNodes.splice(index2, 1);
        }
        this.updateLeafState();
      }
      removeChildByData(data) {
        let targetNode = null;
        for (let i2 = 0; i2 < this.childNodes.length; i2++) {
          if (this.childNodes[i2].data === data) {
            targetNode = this.childNodes[i2];
            break;
          }
        }
        if (targetNode) {
          this.removeChild(targetNode);
        }
      }
      expand(callback, expandParent) {
        const done2 = () => {
          if (expandParent) {
            let parent = this.parent;
            while (parent.level > 0) {
              parent.expanded = true;
              parent = parent.parent;
            }
          }
          this.expanded = true;
          if (callback)
            callback();
          this.childNodes.forEach((item) => {
            item.canFocus = true;
          });
        };
        if (this.shouldLoadData()) {
          this.loadData((data) => {
            if (Array.isArray(data)) {
              if (this.checked) {
                this.setChecked(true, true);
              } else if (!this.store.checkStrictly) {
                reInitChecked(this);
              }
              done2();
            }
          });
        } else {
          done2();
        }
      }
      doCreateChildren(array2, defaultProps2 = {}) {
        array2.forEach((item) => {
          this.insertChild(Object.assign({ data: item }, defaultProps2), void 0, true);
        });
      }
      collapse() {
        this.expanded = false;
        this.childNodes.forEach((item) => {
          item.canFocus = false;
        });
      }
      shouldLoadData() {
        return this.store.lazy === true && this.store.load && !this.loaded;
      }
      updateLeafState() {
        if (this.store.lazy === true && this.loaded !== true && typeof this.isLeafByUser !== "undefined") {
          this.isLeaf = this.isLeafByUser;
          return;
        }
        const childNodes = this.childNodes;
        if (!this.store.lazy || this.store.lazy === true && this.loaded === true) {
          this.isLeaf = !childNodes || childNodes.length === 0;
          return;
        }
        this.isLeaf = false;
      }
      setChecked(value, deep, recursion, passValue) {
        this.indeterminate = value === "half";
        this.checked = value === true;
        if (this.store.checkStrictly)
          return;
        if (!(this.shouldLoadData() && !this.store.checkDescendants)) {
          const { all, allWithoutDisable } = getChildState(this.childNodes);
          if (!this.isLeaf && !all && allWithoutDisable) {
            this.checked = false;
            value = false;
          }
          const handleDescendants = () => {
            if (deep) {
              const childNodes = this.childNodes;
              for (let i2 = 0, j2 = childNodes.length; i2 < j2; i2++) {
                const child = childNodes[i2];
                passValue = passValue || value !== false;
                const isCheck = child.disabled ? child.checked : passValue;
                child.setChecked(isCheck, deep, true, passValue);
              }
              const { half, all: all2 } = getChildState(childNodes);
              if (!all2) {
                this.checked = all2;
                this.indeterminate = half;
              }
            }
          };
          if (this.shouldLoadData()) {
            this.loadData(() => {
              handleDescendants();
              reInitChecked(this);
            }, {
              checked: value !== false
            });
            return;
          } else {
            handleDescendants();
          }
        }
        const parent = this.parent;
        if (!parent || parent.level === 0)
          return;
        if (!recursion) {
          reInitChecked(parent);
        }
      }
      getChildren(forceInit = false) {
        if (this.level === 0)
          return this.data;
        const data = this.data;
        if (!data)
          return null;
        const props = this.store.props;
        let children = "children";
        if (props) {
          children = props.children || "children";
        }
        if (data[children] === void 0) {
          data[children] = null;
        }
        if (forceInit && !data[children]) {
          data[children] = [];
        }
        return data[children];
      }
      updateChildren() {
        const newData = this.getChildren() || [];
        const oldData = this.childNodes.map((node) => node.data);
        const newDataMap = {};
        const newNodes = [];
        newData.forEach((item, index2) => {
          const key = item[NODE_KEY];
          const isNodeExists = !!key && oldData.findIndex((data) => data[NODE_KEY] === key) >= 0;
          if (isNodeExists) {
            newDataMap[key] = { index: index2, data: item };
          } else {
            newNodes.push({ index: index2, data: item });
          }
        });
        if (!this.store.lazy) {
          oldData.forEach((item) => {
            if (!newDataMap[item[NODE_KEY]])
              this.removeChildByData(item);
          });
        }
        newNodes.forEach(({ index: index2, data }) => {
          this.insertChild({ data }, index2);
        });
        this.updateLeafState();
      }
      loadData(callback, defaultProps2 = {}) {
        if (this.store.lazy === true && this.store.load && !this.loaded && (!this.loading || Object.keys(defaultProps2).length)) {
          this.loading = true;
          const resolve2 = (children) => {
            this.loaded = true;
            this.loading = false;
            this.childNodes = [];
            this.doCreateChildren(children, defaultProps2);
            this.updateLeafState();
            if (callback) {
              callback.call(this, children);
            }
          };
          this.store.load(this, resolve2);
        } else {
          if (callback) {
            callback.call(this);
          }
        }
      }
    }
    class TreeStore {
      constructor(options) {
        this.currentNode = null;
        this.currentNodeKey = null;
        for (const option in options) {
          if (hasOwn$2(options, option)) {
            this[option] = options[option];
          }
        }
        this.nodesMap = {};
      }
      initialize() {
        this.root = new Node({
          data: this.data,
          store: this
        });
        this.root.initialize();
        if (this.lazy && this.load) {
          const loadFn = this.load;
          loadFn(this.root, (data) => {
            this.root.doCreateChildren(data);
            this._initDefaultCheckedNodes();
          });
        } else {
          this._initDefaultCheckedNodes();
        }
      }
      filter(value) {
        const filterNodeMethod = this.filterNodeMethod;
        const lazy = this.lazy;
        const traverse2 = function(node) {
          const childNodes = node.root ? node.root.childNodes : node.childNodes;
          childNodes.forEach((child) => {
            child.visible = filterNodeMethod.call(child, value, child.data, child);
            traverse2(child);
          });
          if (!node.visible && childNodes.length) {
            let allHidden = true;
            allHidden = !childNodes.some((child) => child.visible);
            if (node.root) {
              node.root.visible = allHidden === false;
            } else {
              node.visible = allHidden === false;
            }
          }
          if (!value)
            return;
          if (node.visible && !node.isLeaf && !lazy)
            node.expand();
        };
        traverse2(this);
      }
      setData(newVal) {
        const instanceChanged = newVal !== this.root.data;
        if (instanceChanged) {
          this.root.setData(newVal);
          this._initDefaultCheckedNodes();
        } else {
          this.root.updateChildren();
        }
      }
      getNode(data) {
        if (data instanceof Node)
          return data;
        const key = typeof data !== "object" ? data : getNodeKey(this.key, data);
        return this.nodesMap[key] || null;
      }
      insertBefore(data, refData) {
        const refNode = this.getNode(refData);
        refNode.parent.insertBefore({ data }, refNode);
      }
      insertAfter(data, refData) {
        const refNode = this.getNode(refData);
        refNode.parent.insertAfter({ data }, refNode);
      }
      remove(data) {
        const node = this.getNode(data);
        if (node && node.parent) {
          if (node === this.currentNode) {
            this.currentNode = null;
          }
          node.parent.removeChild(node);
        }
      }
      append(data, parentData) {
        const parentNode = parentData ? this.getNode(parentData) : this.root;
        if (parentNode) {
          parentNode.insertChild({ data });
        }
      }
      _initDefaultCheckedNodes() {
        const defaultCheckedKeys = this.defaultCheckedKeys || [];
        const nodesMap = this.nodesMap;
        defaultCheckedKeys.forEach((checkedKey) => {
          const node = nodesMap[checkedKey];
          if (node) {
            node.setChecked(true, !this.checkStrictly);
          }
        });
      }
      _initDefaultCheckedNode(node) {
        const defaultCheckedKeys = this.defaultCheckedKeys || [];
        if (defaultCheckedKeys.includes(node.key)) {
          node.setChecked(true, !this.checkStrictly);
        }
      }
      setDefaultCheckedKey(newVal) {
        if (newVal !== this.defaultCheckedKeys) {
          this.defaultCheckedKeys = newVal;
          this._initDefaultCheckedNodes();
        }
      }
      registerNode(node) {
        const key = this.key;
        if (!node || !node.data)
          return;
        if (!key) {
          this.nodesMap[node.id] = node;
        } else {
          const nodeKey = node.key;
          if (nodeKey !== void 0)
            this.nodesMap[node.key] = node;
        }
      }
      deregisterNode(node) {
        const key = this.key;
        if (!key || !node || !node.data)
          return;
        node.childNodes.forEach((child) => {
          this.deregisterNode(child);
        });
        delete this.nodesMap[node.key];
      }
      getCheckedNodes(leafOnly = false, includeHalfChecked = false) {
        const checkedNodes = [];
        const traverse2 = function(node) {
          const childNodes = node.root ? node.root.childNodes : node.childNodes;
          childNodes.forEach((child) => {
            if ((child.checked || includeHalfChecked && child.indeterminate) && (!leafOnly || leafOnly && child.isLeaf)) {
              checkedNodes.push(child.data);
            }
            traverse2(child);
          });
        };
        traverse2(this);
        return checkedNodes;
      }
      getCheckedKeys(leafOnly = false) {
        return this.getCheckedNodes(leafOnly).map((data) => (data || {})[this.key]);
      }
      getHalfCheckedNodes() {
        const nodes = [];
        const traverse2 = function(node) {
          const childNodes = node.root ? node.root.childNodes : node.childNodes;
          childNodes.forEach((child) => {
            if (child.indeterminate) {
              nodes.push(child.data);
            }
            traverse2(child);
          });
        };
        traverse2(this);
        return nodes;
      }
      getHalfCheckedKeys() {
        return this.getHalfCheckedNodes().map((data) => (data || {})[this.key]);
      }
      _getAllNodes() {
        const allNodes = [];
        const nodesMap = this.nodesMap;
        for (const nodeKey in nodesMap) {
          if (hasOwn$2(nodesMap, nodeKey)) {
            allNodes.push(nodesMap[nodeKey]);
          }
        }
        return allNodes;
      }
      updateChildren(key, data) {
        const node = this.nodesMap[key];
        if (!node)
          return;
        const childNodes = node.childNodes;
        for (let i2 = childNodes.length - 1; i2 >= 0; i2--) {
          const child = childNodes[i2];
          this.remove(child.data);
        }
        for (let i2 = 0, j2 = data.length; i2 < j2; i2++) {
          const child = data[i2];
          this.append(child, node.data);
        }
      }
      _setCheckedKeys(key, leafOnly = false, checkedKeys) {
        const allNodes = this._getAllNodes().sort((a2, b2) => b2.level - a2.level);
        const cache2 = /* @__PURE__ */ Object.create(null);
        const keys2 = Object.keys(checkedKeys);
        allNodes.forEach((node) => node.setChecked(false, false));
        for (let i2 = 0, j2 = allNodes.length; i2 < j2; i2++) {
          const node = allNodes[i2];
          const nodeKey = node.data[key].toString();
          const checked2 = keys2.includes(nodeKey);
          if (!checked2) {
            if (node.checked && !cache2[nodeKey]) {
              node.setChecked(false, false);
            }
            continue;
          }
          let parent = node.parent;
          while (parent && parent.level > 0) {
            cache2[parent.data[key]] = true;
            parent = parent.parent;
          }
          if (node.isLeaf || this.checkStrictly) {
            node.setChecked(true, false);
            continue;
          }
          node.setChecked(true, true);
          if (leafOnly) {
            node.setChecked(false, false);
            const traverse2 = function(node2) {
              const childNodes = node2.childNodes;
              childNodes.forEach((child) => {
                if (!child.isLeaf) {
                  child.setChecked(false, false);
                }
                traverse2(child);
              });
            };
            traverse2(node);
          }
        }
      }
      setCheckedNodes(array2, leafOnly = false) {
        const key = this.key;
        const checkedKeys = {};
        array2.forEach((item) => {
          checkedKeys[(item || {})[key]] = true;
        });
        this._setCheckedKeys(key, leafOnly, checkedKeys);
      }
      setCheckedKeys(keys2, leafOnly = false) {
        this.defaultCheckedKeys = keys2;
        const key = this.key;
        const checkedKeys = {};
        keys2.forEach((key2) => {
          checkedKeys[key2] = true;
        });
        this._setCheckedKeys(key, leafOnly, checkedKeys);
      }
      setDefaultExpandedKeys(keys2) {
        keys2 = keys2 || [];
        this.defaultExpandedKeys = keys2;
        keys2.forEach((key) => {
          const node = this.getNode(key);
          if (node)
            node.expand(null, this.autoExpandParent);
        });
      }
      setChecked(data, checked2, deep) {
        const node = this.getNode(data);
        if (node) {
          node.setChecked(!!checked2, deep);
        }
      }
      getCurrentNode() {
        return this.currentNode;
      }
      setCurrentNode(currentNode) {
        const prevCurrentNode = this.currentNode;
        if (prevCurrentNode) {
          prevCurrentNode.isCurrent = false;
        }
        this.currentNode = currentNode;
        this.currentNode.isCurrent = true;
      }
      setUserCurrentNode(node, shouldAutoExpandParent = true) {
        const key = node[this.key];
        const currNode = this.nodesMap[key];
        this.setCurrentNode(currNode);
        if (shouldAutoExpandParent && this.currentNode.level > 1) {
          this.currentNode.parent.expand(null, true);
        }
      }
      setCurrentNodeKey(key, shouldAutoExpandParent = true) {
        if (key === null || key === void 0) {
          this.currentNode && (this.currentNode.isCurrent = false);
          this.currentNode = null;
          return;
        }
        const node = this.getNode(key);
        if (node) {
          this.setCurrentNode(node);
          if (shouldAutoExpandParent && this.currentNode.level > 1) {
            this.currentNode.parent.expand(null, true);
          }
        }
      }
    }
    const _sfc_main$D = defineComponent({
      name: "ElTreeNodeContent",
      props: {
        node: {
          type: Object,
          required: true
        },
        renderContent: Function
      },
      setup(props) {
        const ns2 = useNamespace("tree");
        const nodeInstance = inject("NodeInstance");
        const tree = inject("RootTree");
        return () => {
          const node = props.node;
          const { data, store } = node;
          return props.renderContent ? props.renderContent(h$2, { _self: nodeInstance, node, data, store }) : tree.ctx.slots.default ? tree.ctx.slots.default({ node, data }) : h$2("span", { class: ns2.be("node", "label") }, [node.label]);
        };
      }
    });
    var NodeContent = /* @__PURE__ */ _export_sfc$1(_sfc_main$D, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/tree/src/tree-node-content.vue"]]);
    function useNodeExpandEventBroadcast(props) {
      const parentNodeMap = inject("TreeNodeMap", null);
      const currentNodeMap = {
        treeNodeExpand: (node) => {
          if (props.node !== node) {
            props.node.collapse();
          }
        },
        children: []
      };
      if (parentNodeMap) {
        parentNodeMap.children.push(currentNodeMap);
      }
      provide("TreeNodeMap", currentNodeMap);
      return {
        broadcastExpanded: (node) => {
          if (!props.accordion)
            return;
          for (const childNode of currentNodeMap.children) {
            childNode.treeNodeExpand(node);
          }
        }
      };
    }
    const dragEventsKey = Symbol("dragEvents");
    function useDragNodeHandler({ props, ctx, el$, dropIndicator$, store }) {
      const ns2 = useNamespace("tree");
      const dragState = ref({
        showDropIndicator: false,
        draggingNode: null,
        dropNode: null,
        allowDrop: true,
        dropType: null
      });
      const treeNodeDragStart = ({ event, treeNode }) => {
        if (typeof props.allowDrag === "function" && !props.allowDrag(treeNode.node)) {
          event.preventDefault();
          return false;
        }
        event.dataTransfer.effectAllowed = "move";
        try {
          event.dataTransfer.setData("text/plain", "");
        } catch (e2) {
        }
        dragState.value.draggingNode = treeNode;
        ctx.emit("node-drag-start", treeNode.node, event);
      };
      const treeNodeDragOver = ({ event, treeNode }) => {
        const dropNode = treeNode;
        const oldDropNode = dragState.value.dropNode;
        if (oldDropNode && oldDropNode !== dropNode) {
          removeClass(oldDropNode.$el, ns2.is("drop-inner"));
        }
        const draggingNode = dragState.value.draggingNode;
        if (!draggingNode || !dropNode)
          return;
        let dropPrev = true;
        let dropInner = true;
        let dropNext = true;
        let userAllowDropInner = true;
        if (typeof props.allowDrop === "function") {
          dropPrev = props.allowDrop(draggingNode.node, dropNode.node, "prev");
          userAllowDropInner = dropInner = props.allowDrop(draggingNode.node, dropNode.node, "inner");
          dropNext = props.allowDrop(draggingNode.node, dropNode.node, "next");
        }
        event.dataTransfer.dropEffect = dropInner || dropPrev || dropNext ? "move" : "none";
        if ((dropPrev || dropInner || dropNext) && oldDropNode !== dropNode) {
          if (oldDropNode) {
            ctx.emit("node-drag-leave", draggingNode.node, oldDropNode.node, event);
          }
          ctx.emit("node-drag-enter", draggingNode.node, dropNode.node, event);
        }
        if (dropPrev || dropInner || dropNext) {
          dragState.value.dropNode = dropNode;
        }
        if (dropNode.node.nextSibling === draggingNode.node) {
          dropNext = false;
        }
        if (dropNode.node.previousSibling === draggingNode.node) {
          dropPrev = false;
        }
        if (dropNode.node.contains(draggingNode.node, false)) {
          dropInner = false;
        }
        if (draggingNode.node === dropNode.node || draggingNode.node.contains(dropNode.node)) {
          dropPrev = false;
          dropInner = false;
          dropNext = false;
        }
        const targetPosition = dropNode.$el.getBoundingClientRect();
        const treePosition = el$.value.getBoundingClientRect();
        let dropType;
        const prevPercent = dropPrev ? dropInner ? 0.25 : dropNext ? 0.45 : 1 : -1;
        const nextPercent = dropNext ? dropInner ? 0.75 : dropPrev ? 0.55 : 0 : 1;
        let indicatorTop = -9999;
        const distance = event.clientY - targetPosition.top;
        if (distance < targetPosition.height * prevPercent) {
          dropType = "before";
        } else if (distance > targetPosition.height * nextPercent) {
          dropType = "after";
        } else if (dropInner) {
          dropType = "inner";
        } else {
          dropType = "none";
        }
        const iconPosition = dropNode.$el.querySelector(`.${ns2.be("node", "expand-icon")}`).getBoundingClientRect();
        const dropIndicator = dropIndicator$.value;
        if (dropType === "before") {
          indicatorTop = iconPosition.top - treePosition.top;
        } else if (dropType === "after") {
          indicatorTop = iconPosition.bottom - treePosition.top;
        }
        dropIndicator.style.top = `${indicatorTop}px`;
        dropIndicator.style.left = `${iconPosition.right - treePosition.left}px`;
        if (dropType === "inner") {
          addClass(dropNode.$el, ns2.is("drop-inner"));
        } else {
          removeClass(dropNode.$el, ns2.is("drop-inner"));
        }
        dragState.value.showDropIndicator = dropType === "before" || dropType === "after";
        dragState.value.allowDrop = dragState.value.showDropIndicator || userAllowDropInner;
        dragState.value.dropType = dropType;
        ctx.emit("node-drag-over", draggingNode.node, dropNode.node, event);
      };
      const treeNodeDragEnd = (event) => {
        const { draggingNode, dropType, dropNode } = dragState.value;
        event.preventDefault();
        event.dataTransfer.dropEffect = "move";
        if (draggingNode && dropNode) {
          const draggingNodeCopy = { data: draggingNode.node.data };
          if (dropType !== "none") {
            draggingNode.node.remove();
          }
          if (dropType === "before") {
            dropNode.node.parent.insertBefore(draggingNodeCopy, dropNode.node);
          } else if (dropType === "after") {
            dropNode.node.parent.insertAfter(draggingNodeCopy, dropNode.node);
          } else if (dropType === "inner") {
            dropNode.node.insertChild(draggingNodeCopy);
          }
          if (dropType !== "none") {
            store.value.registerNode(draggingNodeCopy);
          }
          removeClass(dropNode.$el, ns2.is("drop-inner"));
          ctx.emit("node-drag-end", draggingNode.node, dropNode.node, dropType, event);
          if (dropType !== "none") {
            ctx.emit("node-drop", draggingNode.node, dropNode.node, dropType, event);
          }
        }
        if (draggingNode && !dropNode) {
          ctx.emit("node-drag-end", draggingNode.node, null, dropType, event);
        }
        dragState.value.showDropIndicator = false;
        dragState.value.draggingNode = null;
        dragState.value.dropNode = null;
        dragState.value.allowDrop = true;
      };
      provide(dragEventsKey, {
        treeNodeDragStart,
        treeNodeDragOver,
        treeNodeDragEnd
      });
      return {
        dragState
      };
    }
    const _sfc_main$C = defineComponent({
      name: "ElTreeNode",
      components: {
        ElCollapseTransition: _CollapseTransition,
        ElCheckbox,
        NodeContent,
        ElIcon,
        Loading: loading_default
      },
      props: {
        node: {
          type: Node,
          default: () => ({})
        },
        props: {
          type: Object,
          default: () => ({})
        },
        accordion: Boolean,
        renderContent: Function,
        renderAfterExpand: Boolean,
        showCheckbox: {
          type: Boolean,
          default: false
        }
      },
      emits: ["node-expand"],
      setup(props, ctx) {
        const ns2 = useNamespace("tree");
        const { broadcastExpanded } = useNodeExpandEventBroadcast(props);
        const tree = inject("RootTree");
        const expanded = ref(false);
        const childNodeRendered = ref(false);
        const oldChecked = ref(null);
        const oldIndeterminate = ref(null);
        const node$ = ref(null);
        const dragEvents = inject(dragEventsKey);
        const instance = getCurrentInstance();
        provide("NodeInstance", instance);
        if (props.node.expanded) {
          expanded.value = true;
          childNodeRendered.value = true;
        }
        const childrenKey = tree.props["children"] || "children";
        watch(() => {
          const children = props.node.data[childrenKey];
          return children && [...children];
        }, () => {
          props.node.updateChildren();
        });
        watch(() => props.node.indeterminate, (val) => {
          handleSelectChange(props.node.checked, val);
        });
        watch(() => props.node.checked, (val) => {
          handleSelectChange(val, props.node.indeterminate);
        });
        watch(() => props.node.expanded, (val) => {
          nextTick$1(() => expanded.value = val);
          if (val) {
            childNodeRendered.value = true;
          }
        });
        const getNodeKey$1 = (node) => {
          return getNodeKey(tree.props.nodeKey, node.data);
        };
        const getNodeClass = (node) => {
          const nodeClassFunc = props.props.class;
          if (!nodeClassFunc) {
            return {};
          }
          let className;
          if (isFunction$4(nodeClassFunc)) {
            const { data } = node;
            className = nodeClassFunc(data, node);
          } else {
            className = nodeClassFunc;
          }
          if (isString$3(className)) {
            return { [className]: true };
          } else {
            return className;
          }
        };
        const handleSelectChange = (checked2, indeterminate) => {
          if (oldChecked.value !== checked2 || oldIndeterminate.value !== indeterminate) {
            tree.ctx.emit("check-change", props.node.data, checked2, indeterminate);
          }
          oldChecked.value = checked2;
          oldIndeterminate.value = indeterminate;
        };
        const handleClick = (e2) => {
          const store = tree.store.value;
          store.setCurrentNode(props.node);
          tree.ctx.emit("current-change", store.currentNode ? store.currentNode.data : null, store.currentNode);
          tree.currentNode.value = props.node;
          if (tree.props.expandOnClickNode) {
            handleExpandIconClick();
          }
          if (tree.props.checkOnClickNode && !props.node.disabled) {
            handleCheckChange(null, {
              target: { checked: !props.node.checked }
            });
          }
          tree.ctx.emit("node-click", props.node.data, props.node, instance, e2);
        };
        const handleContextMenu = (event) => {
          if (tree.instance.vnode.props["onNodeContextmenu"]) {
            event.stopPropagation();
            event.preventDefault();
          }
          tree.ctx.emit("node-contextmenu", event, props.node.data, props.node, instance);
        };
        const handleExpandIconClick = () => {
          if (props.node.isLeaf)
            return;
          if (expanded.value) {
            tree.ctx.emit("node-collapse", props.node.data, props.node, instance);
            props.node.collapse();
          } else {
            props.node.expand();
            ctx.emit("node-expand", props.node.data, props.node, instance);
          }
        };
        const handleCheckChange = (value, ev) => {
          props.node.setChecked(ev.target.checked, !tree.props.checkStrictly);
          nextTick$1(() => {
            const store = tree.store.value;
            tree.ctx.emit("check", props.node.data, {
              checkedNodes: store.getCheckedNodes(),
              checkedKeys: store.getCheckedKeys(),
              halfCheckedNodes: store.getHalfCheckedNodes(),
              halfCheckedKeys: store.getHalfCheckedKeys()
            });
          });
        };
        const handleChildNodeExpand = (nodeData, node, instance2) => {
          broadcastExpanded(node);
          tree.ctx.emit("node-expand", nodeData, node, instance2);
        };
        const handleDragStart = (event) => {
          if (!tree.props.draggable)
            return;
          dragEvents.treeNodeDragStart({ event, treeNode: props });
        };
        const handleDragOver = (event) => {
          event.preventDefault();
          if (!tree.props.draggable)
            return;
          dragEvents.treeNodeDragOver({
            event,
            treeNode: { $el: node$.value, node: props.node }
          });
        };
        const handleDrop = (event) => {
          event.preventDefault();
        };
        const handleDragEnd = (event) => {
          if (!tree.props.draggable)
            return;
          dragEvents.treeNodeDragEnd(event);
        };
        return {
          ns: ns2,
          node$,
          tree,
          expanded,
          childNodeRendered,
          oldChecked,
          oldIndeterminate,
          getNodeKey: getNodeKey$1,
          getNodeClass,
          handleSelectChange,
          handleClick,
          handleContextMenu,
          handleExpandIconClick,
          handleCheckChange,
          handleChildNodeExpand,
          handleDragStart,
          handleDragOver,
          handleDrop,
          handleDragEnd,
          CaretRight: caret_right_default
        };
      }
    });
    const _hoisted_1$e = ["aria-expanded", "aria-disabled", "aria-checked", "draggable", "data-key"];
    const _hoisted_2$8 = ["aria-expanded"];
    function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_el_icon = resolveComponent("el-icon");
      const _component_el_checkbox = resolveComponent("el-checkbox");
      const _component_loading = resolveComponent("loading");
      const _component_node_content = resolveComponent("node-content");
      const _component_el_tree_node = resolveComponent("el-tree-node");
      const _component_el_collapse_transition = resolveComponent("el-collapse-transition");
      return withDirectives((openBlock(), createElementBlock("div", {
        ref: "node$",
        class: normalizeClass([
          _ctx.ns.b("node"),
          _ctx.ns.is("expanded", _ctx.expanded),
          _ctx.ns.is("current", _ctx.node.isCurrent),
          _ctx.ns.is("hidden", !_ctx.node.visible),
          _ctx.ns.is("focusable", !_ctx.node.disabled),
          _ctx.ns.is("checked", !_ctx.node.disabled && _ctx.node.checked),
          _ctx.getNodeClass(_ctx.node)
        ]),
        role: "treeitem",
        tabindex: "-1",
        "aria-expanded": _ctx.expanded,
        "aria-disabled": _ctx.node.disabled,
        "aria-checked": _ctx.node.checked,
        draggable: _ctx.tree.props.draggable,
        "data-key": _ctx.getNodeKey(_ctx.node),
        onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.handleClick && _ctx.handleClick(...args), ["stop"])),
        onContextmenu: _cache[2] || (_cache[2] = (...args) => _ctx.handleContextMenu && _ctx.handleContextMenu(...args)),
        onDragstart: _cache[3] || (_cache[3] = withModifiers((...args) => _ctx.handleDragStart && _ctx.handleDragStart(...args), ["stop"])),
        onDragover: _cache[4] || (_cache[4] = withModifiers((...args) => _ctx.handleDragOver && _ctx.handleDragOver(...args), ["stop"])),
        onDragend: _cache[5] || (_cache[5] = withModifiers((...args) => _ctx.handleDragEnd && _ctx.handleDragEnd(...args), ["stop"])),
        onDrop: _cache[6] || (_cache[6] = withModifiers((...args) => _ctx.handleDrop && _ctx.handleDrop(...args), ["stop"]))
      }, [
        createBaseVNode("div", {
          class: normalizeClass(_ctx.ns.be("node", "content")),
          style: normalizeStyle({ paddingLeft: (_ctx.node.level - 1) * _ctx.tree.props.indent + "px" })
        }, [
          _ctx.tree.props.icon || _ctx.CaretRight ? (openBlock(), createBlock(_component_el_icon, {
            key: 0,
            class: normalizeClass([
              _ctx.ns.be("node", "expand-icon"),
              _ctx.ns.is("leaf", _ctx.node.isLeaf),
              {
                expanded: !_ctx.node.isLeaf && _ctx.expanded
              }
            ]),
            onClick: withModifiers(_ctx.handleExpandIconClick, ["stop"])
          }, {
            default: withCtx(() => [
              (openBlock(), createBlock(resolveDynamicComponent(_ctx.tree.props.icon || _ctx.CaretRight)))
            ]),
            _: 1
          }, 8, ["class", "onClick"])) : createCommentVNode("v-if", true),
          _ctx.showCheckbox ? (openBlock(), createBlock(_component_el_checkbox, {
            key: 1,
            "model-value": _ctx.node.checked,
            indeterminate: _ctx.node.indeterminate,
            disabled: !!_ctx.node.disabled,
            onClick: _cache[0] || (_cache[0] = withModifiers(() => {
            }, ["stop"])),
            onChange: _ctx.handleCheckChange
          }, null, 8, ["model-value", "indeterminate", "disabled", "onChange"])) : createCommentVNode("v-if", true),
          _ctx.node.loading ? (openBlock(), createBlock(_component_el_icon, {
            key: 2,
            class: normalizeClass([_ctx.ns.be("node", "loading-icon"), _ctx.ns.is("loading")])
          }, {
            default: withCtx(() => [
              createVNode(_component_loading)
            ]),
            _: 1
          }, 8, ["class"])) : createCommentVNode("v-if", true),
          createVNode(_component_node_content, {
            node: _ctx.node,
            "render-content": _ctx.renderContent
          }, null, 8, ["node", "render-content"])
        ], 6),
        createVNode(_component_el_collapse_transition, null, {
          default: withCtx(() => [
            !_ctx.renderAfterExpand || _ctx.childNodeRendered ? withDirectives((openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(_ctx.ns.be("node", "children")),
              role: "group",
              "aria-expanded": _ctx.expanded
            }, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.node.childNodes, (child) => {
                return openBlock(), createBlock(_component_el_tree_node, {
                  key: _ctx.getNodeKey(child),
                  "render-content": _ctx.renderContent,
                  "render-after-expand": _ctx.renderAfterExpand,
                  "show-checkbox": _ctx.showCheckbox,
                  node: child,
                  accordion: _ctx.accordion,
                  props: _ctx.props,
                  onNodeExpand: _ctx.handleChildNodeExpand
                }, null, 8, ["render-content", "render-after-expand", "show-checkbox", "node", "accordion", "props", "onNodeExpand"]);
              }), 128))
            ], 10, _hoisted_2$8)), [
              [vShow, _ctx.expanded]
            ]) : createCommentVNode("v-if", true)
          ]),
          _: 1
        })
      ], 42, _hoisted_1$e)), [
        [vShow, _ctx.node.visible]
      ]);
    }
    var ElTreeNode$1 = /* @__PURE__ */ _export_sfc$1(_sfc_main$C, [["render", _sfc_render$5], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/tree/src/tree-node.vue"]]);
    function useKeydown({ el$ }, store) {
      const ns2 = useNamespace("tree");
      const treeItems = shallowRef([]);
      const checkboxItems = shallowRef([]);
      onMounted(() => {
        initTabIndex();
      });
      onUpdated(() => {
        treeItems.value = Array.from(el$.value.querySelectorAll("[role=treeitem]"));
        checkboxItems.value = Array.from(el$.value.querySelectorAll("input[type=checkbox]"));
      });
      watch(checkboxItems, (val) => {
        val.forEach((checkbox) => {
          checkbox.setAttribute("tabindex", "-1");
        });
      });
      const handleKeydown = (ev) => {
        const currentItem = ev.target;
        if (!currentItem.className.includes(ns2.b("node")))
          return;
        const code = ev.code;
        treeItems.value = Array.from(el$.value.querySelectorAll(`.${ns2.is("focusable")}[role=treeitem]`));
        const currentIndex = treeItems.value.indexOf(currentItem);
        let nextIndex;
        if ([EVENT_CODE.up, EVENT_CODE.down].includes(code)) {
          ev.preventDefault();
          if (code === EVENT_CODE.up) {
            nextIndex = currentIndex === -1 ? 0 : currentIndex !== 0 ? currentIndex - 1 : treeItems.value.length - 1;
            const startIndex = nextIndex;
            while (true) {
              if (store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus)
                break;
              nextIndex--;
              if (nextIndex === startIndex) {
                nextIndex = -1;
                break;
              }
              if (nextIndex < 0) {
                nextIndex = treeItems.value.length - 1;
              }
            }
          } else {
            nextIndex = currentIndex === -1 ? 0 : currentIndex < treeItems.value.length - 1 ? currentIndex + 1 : 0;
            const startIndex = nextIndex;
            while (true) {
              if (store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus)
                break;
              nextIndex++;
              if (nextIndex === startIndex) {
                nextIndex = -1;
                break;
              }
              if (nextIndex >= treeItems.value.length) {
                nextIndex = 0;
              }
            }
          }
          nextIndex !== -1 && treeItems.value[nextIndex].focus();
        }
        if ([EVENT_CODE.left, EVENT_CODE.right].includes(code)) {
          ev.preventDefault();
          currentItem.click();
        }
        const hasInput = currentItem.querySelector('[type="checkbox"]');
        if ([EVENT_CODE.enter, EVENT_CODE.space].includes(code) && hasInput) {
          ev.preventDefault();
          hasInput.click();
        }
      };
      useEventListener(el$, "keydown", handleKeydown);
      const initTabIndex = () => {
        var _a2;
        treeItems.value = Array.from(el$.value.querySelectorAll(`.${ns2.is("focusable")}[role=treeitem]`));
        checkboxItems.value = Array.from(el$.value.querySelectorAll("input[type=checkbox]"));
        const checkedItem = el$.value.querySelectorAll(`.${ns2.is("checked")}[role=treeitem]`);
        if (checkedItem.length) {
          checkedItem[0].setAttribute("tabindex", "0");
          return;
        }
        (_a2 = treeItems.value[0]) == null ? void 0 : _a2.setAttribute("tabindex", "0");
      };
    }
    const _sfc_main$B = defineComponent({
      name: "ElTree",
      components: { ElTreeNode: ElTreeNode$1 },
      props: {
        data: {
          type: Array,
          default: () => []
        },
        emptyText: {
          type: String
        },
        renderAfterExpand: {
          type: Boolean,
          default: true
        },
        nodeKey: String,
        checkStrictly: Boolean,
        defaultExpandAll: Boolean,
        expandOnClickNode: {
          type: Boolean,
          default: true
        },
        checkOnClickNode: Boolean,
        checkDescendants: {
          type: Boolean,
          default: false
        },
        autoExpandParent: {
          type: Boolean,
          default: true
        },
        defaultCheckedKeys: Array,
        defaultExpandedKeys: Array,
        currentNodeKey: [String, Number],
        renderContent: Function,
        showCheckbox: {
          type: Boolean,
          default: false
        },
        draggable: {
          type: Boolean,
          default: false
        },
        allowDrag: Function,
        allowDrop: Function,
        props: {
          type: Object,
          default: () => ({
            children: "children",
            label: "label",
            disabled: "disabled"
          })
        },
        lazy: {
          type: Boolean,
          default: false
        },
        highlightCurrent: Boolean,
        load: Function,
        filterNodeMethod: Function,
        accordion: Boolean,
        indent: {
          type: Number,
          default: 18
        },
        icon: [String, Object]
      },
      emits: [
        "check-change",
        "current-change",
        "node-click",
        "node-contextmenu",
        "node-collapse",
        "node-expand",
        "check",
        "node-drag-start",
        "node-drag-end",
        "node-drop",
        "node-drag-leave",
        "node-drag-enter",
        "node-drag-over"
      ],
      setup(props, ctx) {
        const { t } = useLocale();
        const ns2 = useNamespace("tree");
        const store = ref(new TreeStore({
          key: props.nodeKey,
          data: props.data,
          lazy: props.lazy,
          props: props.props,
          load: props.load,
          currentNodeKey: props.currentNodeKey,
          checkStrictly: props.checkStrictly,
          checkDescendants: props.checkDescendants,
          defaultCheckedKeys: props.defaultCheckedKeys,
          defaultExpandedKeys: props.defaultExpandedKeys,
          autoExpandParent: props.autoExpandParent,
          defaultExpandAll: props.defaultExpandAll,
          filterNodeMethod: props.filterNodeMethod
        }));
        store.value.initialize();
        const root2 = ref(store.value.root);
        const currentNode = ref(null);
        const el$ = ref(null);
        const dropIndicator$ = ref(null);
        const { broadcastExpanded } = useNodeExpandEventBroadcast(props);
        const { dragState } = useDragNodeHandler({
          props,
          ctx,
          el$,
          dropIndicator$,
          store
        });
        useKeydown({ el$ }, store);
        const isEmpty2 = computed(() => {
          const { childNodes } = root2.value;
          return !childNodes || childNodes.length === 0 || childNodes.every(({ visible }) => !visible);
        });
        watch(() => props.defaultCheckedKeys, (newVal) => {
          store.value.setDefaultCheckedKey(newVal);
        });
        watch(() => props.defaultExpandedKeys, (newVal) => {
          store.value.setDefaultExpandedKeys(newVal);
        });
        watch(() => props.data, (newVal) => {
          store.value.setData(newVal);
        }, { deep: true });
        watch(() => props.checkStrictly, (newVal) => {
          store.value.checkStrictly = newVal;
        });
        const filter = (value) => {
          if (!props.filterNodeMethod)
            throw new Error("[Tree] filterNodeMethod is required when filter");
          store.value.filter(value);
        };
        const getNodeKey$1 = (node) => {
          return getNodeKey(props.nodeKey, node.data);
        };
        const getNodePath = (data) => {
          if (!props.nodeKey)
            throw new Error("[Tree] nodeKey is required in getNodePath");
          const node = store.value.getNode(data);
          if (!node)
            return [];
          const path = [node.data];
          let parent = node.parent;
          while (parent && parent !== root2.value) {
            path.push(parent.data);
            parent = parent.parent;
          }
          return path.reverse();
        };
        const getCheckedNodes = (leafOnly, includeHalfChecked) => {
          return store.value.getCheckedNodes(leafOnly, includeHalfChecked);
        };
        const getCheckedKeys = (leafOnly) => {
          return store.value.getCheckedKeys(leafOnly);
        };
        const getCurrentNode = () => {
          const currentNode2 = store.value.getCurrentNode();
          return currentNode2 ? currentNode2.data : null;
        };
        const getCurrentKey = () => {
          if (!props.nodeKey)
            throw new Error("[Tree] nodeKey is required in getCurrentKey");
          const currentNode2 = getCurrentNode();
          return currentNode2 ? currentNode2[props.nodeKey] : null;
        };
        const setCheckedNodes = (nodes, leafOnly) => {
          if (!props.nodeKey)
            throw new Error("[Tree] nodeKey is required in setCheckedNodes");
          store.value.setCheckedNodes(nodes, leafOnly);
        };
        const setCheckedKeys = (keys2, leafOnly) => {
          if (!props.nodeKey)
            throw new Error("[Tree] nodeKey is required in setCheckedKeys");
          store.value.setCheckedKeys(keys2, leafOnly);
        };
        const setChecked2 = (data, checked2, deep) => {
          store.value.setChecked(data, checked2, deep);
        };
        const getHalfCheckedNodes = () => {
          return store.value.getHalfCheckedNodes();
        };
        const getHalfCheckedKeys = () => {
          return store.value.getHalfCheckedKeys();
        };
        const setCurrentNode = (node, shouldAutoExpandParent = true) => {
          if (!props.nodeKey)
            throw new Error("[Tree] nodeKey is required in setCurrentNode");
          store.value.setUserCurrentNode(node, shouldAutoExpandParent);
        };
        const setCurrentKey = (key, shouldAutoExpandParent = true) => {
          if (!props.nodeKey)
            throw new Error("[Tree] nodeKey is required in setCurrentKey");
          store.value.setCurrentNodeKey(key, shouldAutoExpandParent);
        };
        const getNode = (data) => {
          return store.value.getNode(data);
        };
        const remove2 = (data) => {
          store.value.remove(data);
        };
        const append = (data, parentNode) => {
          store.value.append(data, parentNode);
        };
        const insertBefore = (data, refNode) => {
          store.value.insertBefore(data, refNode);
        };
        const insertAfter = (data, refNode) => {
          store.value.insertAfter(data, refNode);
        };
        const handleNodeExpand = (nodeData, node, instance) => {
          broadcastExpanded(node);
          ctx.emit("node-expand", nodeData, node, instance);
        };
        const updateKeyChildren = (key, data) => {
          if (!props.nodeKey)
            throw new Error("[Tree] nodeKey is required in updateKeyChild");
          store.value.updateChildren(key, data);
        };
        provide("RootTree", {
          ctx,
          props,
          store,
          root: root2,
          currentNode,
          instance: getCurrentInstance()
        });
        provide(formItemContextKey, void 0);
        return {
          ns: ns2,
          store,
          root: root2,
          currentNode,
          dragState,
          el$,
          dropIndicator$,
          isEmpty: isEmpty2,
          filter,
          getNodeKey: getNodeKey$1,
          getNodePath,
          getCheckedNodes,
          getCheckedKeys,
          getCurrentNode,
          getCurrentKey,
          setCheckedNodes,
          setCheckedKeys,
          setChecked: setChecked2,
          getHalfCheckedNodes,
          getHalfCheckedKeys,
          setCurrentNode,
          setCurrentKey,
          t,
          getNode,
          remove: remove2,
          append,
          insertBefore,
          insertAfter,
          handleNodeExpand,
          updateKeyChildren
        };
      }
    });
    function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
      var _a2;
      const _component_el_tree_node = resolveComponent("el-tree-node");
      return openBlock(), createElementBlock("div", {
        ref: "el$",
        class: normalizeClass([
          _ctx.ns.b(),
          _ctx.ns.is("dragging", !!_ctx.dragState.draggingNode),
          _ctx.ns.is("drop-not-allow", !_ctx.dragState.allowDrop),
          _ctx.ns.is("drop-inner", _ctx.dragState.dropType === "inner"),
          { [_ctx.ns.m("highlight-current")]: _ctx.highlightCurrent }
        ]),
        role: "tree"
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.root.childNodes, (child) => {
          return openBlock(), createBlock(_component_el_tree_node, {
            key: _ctx.getNodeKey(child),
            node: child,
            props: _ctx.props,
            accordion: _ctx.accordion,
            "render-after-expand": _ctx.renderAfterExpand,
            "show-checkbox": _ctx.showCheckbox,
            "render-content": _ctx.renderContent,
            onNodeExpand: _ctx.handleNodeExpand
          }, null, 8, ["node", "props", "accordion", "render-after-expand", "show-checkbox", "render-content", "onNodeExpand"]);
        }), 128)),
        _ctx.isEmpty ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(_ctx.ns.e("empty-block"))
        }, [
          createBaseVNode("span", {
            class: normalizeClass(_ctx.ns.e("empty-text"))
          }, toDisplayString$1((_a2 = _ctx.emptyText) != null ? _a2 : _ctx.t("el.tree.emptyText")), 3)
        ], 2)) : createCommentVNode("v-if", true),
        withDirectives(createBaseVNode("div", {
          ref: "dropIndicator$",
          class: normalizeClass(_ctx.ns.e("drop-indicator"))
        }, null, 2), [
          [vShow, _ctx.dragState.showDropIndicator]
        ])
      ], 2);
    }
    var Tree = /* @__PURE__ */ _export_sfc$1(_sfc_main$B, [["render", _sfc_render$4], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/tree/src/tree.vue"]]);
    Tree.install = (app2) => {
      app2.component(Tree.name, Tree);
    };
    const _Tree = Tree;
    const ElTree = _Tree;
    const useSelect = (props, { attrs }, {
      tree,
      key
    }) => {
      const ns2 = useNamespace("tree-select");
      const result = {
        ...pick$1(toRefs(props), Object.keys(ElSelect.props)),
        ...attrs,
        valueKey: key,
        popperClass: computed(() => {
          const classes = [ns2.e("popper")];
          if (props.popperClass)
            classes.push(props.popperClass);
          return classes.join(" ");
        }),
        filterMethod: (keyword = "") => {
          if (props.filterMethod)
            props.filterMethod(keyword);
          nextTick$1(() => {
            var _a2;
            (_a2 = tree.value) == null ? void 0 : _a2.filter(keyword);
          });
        },
        onVisibleChange: (visible) => {
          var _a2;
          (_a2 = attrs.onVisibleChange) == null ? void 0 : _a2.call(attrs, visible);
          if (props.filterable && visible) {
            result.filterMethod();
          }
        }
      };
      return result;
    };
    const component = defineComponent({
      extends: ElOption,
      setup(props, ctx) {
        const result = ElOption.setup(props, ctx);
        delete result.selectOptionClick;
        const vm = getCurrentInstance().proxy;
        nextTick$1(() => {
          if (!result.select.cachedOptions.get(vm.value)) {
            result.select.onOptionCreate(vm);
          }
        });
        return result;
      },
      methods: {
        selectOptionClick() {
          this.$el.parentElement.click();
        }
      }
    });
    function isValidValue(val) {
      return val || val === 0;
    }
    function isValidArray(val) {
      return Array.isArray(val) && val.length;
    }
    function toValidArray(val) {
      return Array.isArray(val) ? val : isValidValue(val) ? [val] : [];
    }
    function treeFind(treeData, findCallback, getChildren, resultCallback, parent) {
      for (let i2 = 0; i2 < treeData.length; i2++) {
        const data = treeData[i2];
        if (findCallback(data, i2, treeData, parent)) {
          return resultCallback ? resultCallback(data, i2, treeData, parent) : data;
        } else {
          const children = getChildren(data);
          if (isValidArray(children)) {
            const find = treeFind(children, findCallback, getChildren, resultCallback, data);
            if (find)
              return find;
          }
        }
      }
    }
    const useTree$1 = (props, { attrs, slots, emit: emit2 }, {
      select,
      tree,
      key
    }) => {
      watch(() => props.modelValue, () => {
        if (props.showCheckbox) {
          nextTick$1(() => {
            const treeInstance = tree.value;
            if (treeInstance && !isEqual$1(treeInstance.getCheckedKeys(), toValidArray(props.modelValue))) {
              treeInstance.setCheckedKeys(toValidArray(props.modelValue));
            }
          });
        }
      }, {
        immediate: true,
        deep: true
      });
      const propsMap = computed(() => ({
        value: key.value,
        ...props.props
      }));
      const getNodeValByProp = (prop, data) => {
        var _a2;
        const propVal = propsMap.value[prop];
        if (isFunction$4(propVal)) {
          return propVal(data, (_a2 = tree.value) == null ? void 0 : _a2.getNode(getNodeValByProp("value", data)));
        } else {
          return data[propVal];
        }
      };
      const defaultExpandedParentKeys = toValidArray(props.modelValue).map((value) => {
        return treeFind(props.data || [], (data) => getNodeValByProp("value", data) === value, (data) => getNodeValByProp("children", data), (data, index2, array2, parent) => parent && getNodeValByProp("value", parent));
      }).filter((item) => isValidValue(item));
      return {
        ...pick$1(toRefs(props), Object.keys(_Tree.props)),
        ...attrs,
        nodeKey: key,
        expandOnClickNode: computed(() => {
          return !props.checkStrictly;
        }),
        defaultExpandedKeys: computed(() => {
          return props.defaultExpandedKeys ? props.defaultExpandedKeys.concat(defaultExpandedParentKeys) : defaultExpandedParentKeys;
        }),
        renderContent: (h2, { node, data, store }) => {
          return h2(component, {
            value: getNodeValByProp("value", data),
            label: getNodeValByProp("label", data),
            disabled: getNodeValByProp("disabled", data)
          }, props.renderContent ? () => props.renderContent(h2, { node, data, store }) : slots.default ? () => slots.default({ node, data, store }) : void 0);
        },
        filterNodeMethod: (value, data, node) => {
          var _a2;
          if (props.filterNodeMethod)
            return props.filterNodeMethod(value, data, node);
          if (!value)
            return true;
          return (_a2 = getNodeValByProp("label", data)) == null ? void 0 : _a2.includes(value);
        },
        onNodeClick: (data, node, e2) => {
          var _a2, _b, _c;
          (_a2 = attrs.onNodeClick) == null ? void 0 : _a2.call(attrs, data, node, e2);
          if (props.showCheckbox && props.checkOnClickNode)
            return;
          if (!props.showCheckbox && (props.checkStrictly || node.isLeaf)) {
            if (!getNodeValByProp("disabled", data)) {
              const option = (_b = select.value) == null ? void 0 : _b.options.get(getNodeValByProp("value", data));
              (_c = select.value) == null ? void 0 : _c.handleOptionSelect(option, true);
            }
          } else {
            e2.proxy.handleExpandIconClick();
          }
        },
        onCheck: (data, params) => {
          var _a2;
          (_a2 = attrs.onCheck) == null ? void 0 : _a2.call(attrs, data, params);
          const dataValue = getNodeValByProp("value", data);
          if (props.checkStrictly) {
            emit2(UPDATE_MODEL_EVENT, props.multiple ? params.checkedKeys : params.checkedKeys.includes(dataValue) ? dataValue : void 0);
          } else {
            if (props.multiple) {
              emit2(UPDATE_MODEL_EVENT, tree.value.getCheckedKeys(true));
            } else {
              const firstLeaf = treeFind([data], (data2) => !isValidArray(getNodeValByProp("children", data2)) && !getNodeValByProp("disabled", data2), (data2) => getNodeValByProp("children", data2));
              const firstLeafKey = firstLeaf ? getNodeValByProp("value", firstLeaf) : void 0;
              const hasCheckedChild = isValidValue(props.modelValue) && !!treeFind([data], (data2) => getNodeValByProp("value", data2) === props.modelValue, (data2) => getNodeValByProp("children", data2));
              emit2(UPDATE_MODEL_EVENT, firstLeafKey === props.modelValue || hasCheckedChild ? void 0 : firstLeafKey);
            }
          }
        }
      };
    };
    const _sfc_main$A = defineComponent({
      name: "ElTreeSelect",
      inheritAttrs: false,
      props: {
        ...ElSelect.props,
        ..._Tree.props
      },
      setup(props, context) {
        const { slots, expose } = context;
        const select = ref();
        const tree = ref();
        const key = computed(() => props.nodeKey || props.valueKey || "value");
        const selectProps = useSelect(props, context, { select, tree, key });
        const treeProps2 = useTree$1(props, context, { select, tree, key });
        const methods = reactive({});
        expose(methods);
        onMounted(() => {
          Object.assign(methods, {
            ...pick$1(tree.value, [
              "filter",
              "updateKeyChildren",
              "getCheckedNodes",
              "setCheckedNodes",
              "getCheckedKeys",
              "setCheckedKeys",
              "setChecked",
              "getHalfCheckedNodes",
              "getHalfCheckedKeys",
              "getCurrentKey",
              "getCurrentNode",
              "setCurrentKey",
              "setCurrentNode",
              "getNode",
              "remove",
              "append",
              "insertBefore",
              "insertAfter"
            ]),
            ...pick$1(select.value, ["focus", "blur"])
          });
        });
        return () => h$2(ElSelect, reactive({
          ...selectProps,
          ref: (ref2) => select.value = ref2
        }), {
          ...slots,
          default: () => h$2(_Tree, reactive({
            ...treeProps2,
            ref: (ref2) => tree.value = ref2
          }))
        });
      }
    });
    var TreeSelect = /* @__PURE__ */ _export_sfc$1(_sfc_main$A, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/tree-select/src/tree-select.vue"]]);
    TreeSelect.install = (app2) => {
      app2.component(TreeSelect.name, TreeSelect);
    };
    const _TreeSelect = TreeSelect;
    const ElTreeSelect = _TreeSelect;
    const ROOT_TREE_INJECTION_KEY = Symbol();
    const EMPTY_NODE = {
      key: -1,
      level: -1,
      data: {}
    };
    var TreeOptionsEnum = /* @__PURE__ */ ((TreeOptionsEnum2) => {
      TreeOptionsEnum2["KEY"] = "id";
      TreeOptionsEnum2["LABEL"] = "label";
      TreeOptionsEnum2["CHILDREN"] = "children";
      TreeOptionsEnum2["DISABLED"] = "disabled";
      return TreeOptionsEnum2;
    })(TreeOptionsEnum || {});
    var SetOperationEnum = /* @__PURE__ */ ((SetOperationEnum2) => {
      SetOperationEnum2["ADD"] = "add";
      SetOperationEnum2["DELETE"] = "delete";
      return SetOperationEnum2;
    })(SetOperationEnum || {});
    const treeProps = buildProps({
      data: {
        type: definePropType(Array),
        default: () => mutable([])
      },
      emptyText: {
        type: String
      },
      height: {
        type: Number,
        default: 200
      },
      props: {
        type: definePropType(Object),
        default: () => mutable({
          children: "children",
          label: "label",
          disabled: "disabled",
          value: "id"
        })
      },
      highlightCurrent: {
        type: Boolean,
        default: false
      },
      showCheckbox: {
        type: Boolean,
        default: false
      },
      defaultCheckedKeys: {
        type: definePropType(Array),
        default: () => mutable([])
      },
      checkStrictly: {
        type: Boolean,
        default: false
      },
      defaultExpandedKeys: {
        type: definePropType(Array),
        default: () => mutable([])
      },
      indent: {
        type: Number,
        default: 16
      },
      icon: {
        type: iconPropType
      },
      expandOnClickNode: {
        type: Boolean,
        default: true
      },
      checkOnClickNode: {
        type: Boolean,
        default: false
      },
      currentNodeKey: {
        type: definePropType([String, Number])
      },
      accordion: {
        type: Boolean,
        default: false
      },
      filterMethod: {
        type: definePropType(Function)
      },
      perfMode: {
        type: Boolean,
        default: true
      }
    });
    const treeNodeProps = buildProps({
      node: {
        type: definePropType(Object),
        default: () => mutable(EMPTY_NODE)
      },
      expanded: {
        type: Boolean,
        default: false
      },
      checked: {
        type: Boolean,
        default: false
      },
      indeterminate: {
        type: Boolean,
        default: false
      },
      showCheckbox: {
        type: Boolean,
        default: false
      },
      disabled: {
        type: Boolean,
        default: false
      },
      current: {
        type: Boolean,
        default: false
      },
      hiddenExpandIcon: {
        type: Boolean,
        default: false
      }
    });
    const treeNodeContentProps = buildProps({
      node: {
        type: definePropType(Object),
        required: true
      }
    });
    const NODE_CLICK = "node-click";
    const NODE_EXPAND = "node-expand";
    const NODE_COLLAPSE = "node-collapse";
    const CURRENT_CHANGE = "current-change";
    const NODE_CHECK = "check";
    const NODE_CHECK_CHANGE = "check-change";
    const NODE_CONTEXTMENU = "node-contextmenu";
    const treeEmits = {
      [NODE_CLICK]: (data, node, e2) => data && node && e2,
      [NODE_EXPAND]: (data, node) => data && node,
      [NODE_COLLAPSE]: (data, node) => data && node,
      [CURRENT_CHANGE]: (data, node) => data && node,
      [NODE_CHECK]: (data, checkedInfo) => data && checkedInfo,
      [NODE_CHECK_CHANGE]: (data, checked2) => data && typeof checked2 === "boolean",
      [NODE_CONTEXTMENU]: (event, data, node) => event && data && node
    };
    const treeNodeEmits = {
      click: (node, e2) => !!(node && e2),
      toggle: (node) => !!node,
      check: (node, checked2) => node && typeof checked2 === "boolean"
    };
    function useCheck(props, tree) {
      const checkedKeys = ref(/* @__PURE__ */ new Set());
      const indeterminateKeys = ref(/* @__PURE__ */ new Set());
      const { emit: emit2 } = getCurrentInstance();
      watch(() => tree.value, () => {
        return nextTick$1(() => {
          _setCheckedKeys(props.defaultCheckedKeys);
        });
      }, {
        immediate: true
      });
      const updateCheckedKeys = () => {
        if (!tree.value || !props.showCheckbox || props.checkStrictly) {
          return;
        }
        const { levelTreeNodeMap, maxLevel } = tree.value;
        const checkedKeySet = checkedKeys.value;
        const indeterminateKeySet = /* @__PURE__ */ new Set();
        for (let level = maxLevel - 1; level >= 1; --level) {
          const nodes = levelTreeNodeMap.get(level);
          if (!nodes)
            continue;
          nodes.forEach((node) => {
            const children = node.children;
            if (children) {
              let allChecked = true;
              let hasChecked = false;
              for (const childNode of children) {
                const key = childNode.key;
                if (checkedKeySet.has(key)) {
                  hasChecked = true;
                } else if (indeterminateKeySet.has(key)) {
                  allChecked = false;
                  hasChecked = true;
                  break;
                } else {
                  allChecked = false;
                }
              }
              if (allChecked) {
                checkedKeySet.add(node.key);
              } else if (hasChecked) {
                indeterminateKeySet.add(node.key);
                checkedKeySet.delete(node.key);
              } else {
                checkedKeySet.delete(node.key);
                indeterminateKeySet.delete(node.key);
              }
            }
          });
        }
        indeterminateKeys.value = indeterminateKeySet;
      };
      const isChecked = (node) => checkedKeys.value.has(node.key);
      const isIndeterminate = (node) => indeterminateKeys.value.has(node.key);
      const toggleCheckbox = (node, isChecked2, nodeClick = true) => {
        const checkedKeySet = checkedKeys.value;
        const toggle = (node2, checked2) => {
          checkedKeySet[checked2 ? SetOperationEnum.ADD : SetOperationEnum.DELETE](node2.key);
          const children = node2.children;
          if (!props.checkStrictly && children) {
            children.forEach((childNode) => {
              if (!childNode.disabled) {
                toggle(childNode, checked2);
              }
            });
          }
        };
        toggle(node, isChecked2);
        updateCheckedKeys();
        if (nodeClick) {
          afterNodeCheck(node, isChecked2);
        }
      };
      const afterNodeCheck = (node, checked2) => {
        const { checkedNodes, checkedKeys: checkedKeys2 } = getChecked();
        const { halfCheckedNodes, halfCheckedKeys } = getHalfChecked();
        emit2(NODE_CHECK, node.data, {
          checkedKeys: checkedKeys2,
          checkedNodes,
          halfCheckedKeys,
          halfCheckedNodes
        });
        emit2(NODE_CHECK_CHANGE, node.data, checked2);
      };
      function getCheckedKeys(leafOnly = false) {
        return getChecked(leafOnly).checkedKeys;
      }
      function getCheckedNodes(leafOnly = false) {
        return getChecked(leafOnly).checkedNodes;
      }
      function getHalfCheckedKeys() {
        return getHalfChecked().halfCheckedKeys;
      }
      function getHalfCheckedNodes() {
        return getHalfChecked().halfCheckedNodes;
      }
      function getChecked(leafOnly = false) {
        const checkedNodes = [];
        const keys2 = [];
        if ((tree == null ? void 0 : tree.value) && props.showCheckbox) {
          const { treeNodeMap } = tree.value;
          checkedKeys.value.forEach((key) => {
            const node = treeNodeMap.get(key);
            if (node && (!leafOnly || leafOnly && node.isLeaf)) {
              keys2.push(key);
              checkedNodes.push(node.data);
            }
          });
        }
        return {
          checkedKeys: keys2,
          checkedNodes
        };
      }
      function getHalfChecked() {
        const halfCheckedNodes = [];
        const halfCheckedKeys = [];
        if ((tree == null ? void 0 : tree.value) && props.showCheckbox) {
          const { treeNodeMap } = tree.value;
          indeterminateKeys.value.forEach((key) => {
            const node = treeNodeMap.get(key);
            if (node) {
              halfCheckedKeys.push(key);
              halfCheckedNodes.push(node.data);
            }
          });
        }
        return {
          halfCheckedNodes,
          halfCheckedKeys
        };
      }
      function setCheckedKeys(keys2) {
        checkedKeys.value.clear();
        indeterminateKeys.value.clear();
        _setCheckedKeys(keys2);
      }
      function setChecked2(key, isChecked2) {
        if ((tree == null ? void 0 : tree.value) && props.showCheckbox) {
          const node = tree.value.treeNodeMap.get(key);
          if (node) {
            toggleCheckbox(node, isChecked2, false);
          }
        }
      }
      function _setCheckedKeys(keys2) {
        if (tree == null ? void 0 : tree.value) {
          const { treeNodeMap } = tree.value;
          if (props.showCheckbox && treeNodeMap && keys2) {
            for (const key of keys2) {
              const node = treeNodeMap.get(key);
              if (node && !isChecked(node)) {
                toggleCheckbox(node, true, false);
              }
            }
          }
        }
      }
      return {
        updateCheckedKeys,
        toggleCheckbox,
        isChecked,
        isIndeterminate,
        getCheckedKeys,
        getCheckedNodes,
        getHalfCheckedKeys,
        getHalfCheckedNodes,
        setChecked: setChecked2,
        setCheckedKeys
      };
    }
    function useFilter(props, tree) {
      const hiddenNodeKeySet = ref(/* @__PURE__ */ new Set([]));
      const hiddenExpandIconKeySet = ref(/* @__PURE__ */ new Set([]));
      const filterable = computed(() => {
        return isFunction$4(props.filterMethod);
      });
      function doFilter(query) {
        var _a2;
        if (!filterable.value) {
          return;
        }
        const expandKeySet = /* @__PURE__ */ new Set();
        const hiddenExpandIconKeys = hiddenExpandIconKeySet.value;
        const hiddenKeys = hiddenNodeKeySet.value;
        const family = [];
        const nodes = ((_a2 = tree.value) == null ? void 0 : _a2.treeNodes) || [];
        const filter = props.filterMethod;
        hiddenKeys.clear();
        function traverse2(nodes2) {
          nodes2.forEach((node) => {
            family.push(node);
            if (filter == null ? void 0 : filter(query, node.data)) {
              family.forEach((member) => {
                expandKeySet.add(member.key);
              });
            } else if (node.isLeaf) {
              hiddenKeys.add(node.key);
            }
            const children = node.children;
            if (children) {
              traverse2(children);
            }
            if (!node.isLeaf) {
              if (!expandKeySet.has(node.key)) {
                hiddenKeys.add(node.key);
              } else if (children) {
                let allHidden = true;
                for (const childNode of children) {
                  if (!hiddenKeys.has(childNode.key)) {
                    allHidden = false;
                    break;
                  }
                }
                if (allHidden) {
                  hiddenExpandIconKeys.add(node.key);
                } else {
                  hiddenExpandIconKeys.delete(node.key);
                }
              }
            }
            family.pop();
          });
        }
        traverse2(nodes);
        return expandKeySet;
      }
      function isForceHiddenExpandIcon(node) {
        return hiddenExpandIconKeySet.value.has(node.key);
      }
      return {
        hiddenExpandIconKeySet,
        hiddenNodeKeySet,
        doFilter,
        isForceHiddenExpandIcon
      };
    }
    function useTree(props, emit2) {
      const expandedKeySet = ref(new Set(props.defaultExpandedKeys));
      const currentKey = ref();
      const tree = shallowRef();
      watch(() => props.currentNodeKey, (key) => {
        currentKey.value = key;
      }, {
        immediate: true
      });
      watch(() => props.data, (data) => {
        setData(data);
      }, {
        immediate: true
      });
      const {
        isIndeterminate,
        isChecked,
        toggleCheckbox,
        getCheckedKeys,
        getCheckedNodes,
        getHalfCheckedKeys,
        getHalfCheckedNodes,
        setChecked: setChecked2,
        setCheckedKeys
      } = useCheck(props, tree);
      const { doFilter, hiddenNodeKeySet, isForceHiddenExpandIcon } = useFilter(props, tree);
      const valueKey = computed(() => {
        var _a2;
        return ((_a2 = props.props) == null ? void 0 : _a2.value) || TreeOptionsEnum.KEY;
      });
      const childrenKey = computed(() => {
        var _a2;
        return ((_a2 = props.props) == null ? void 0 : _a2.children) || TreeOptionsEnum.CHILDREN;
      });
      const disabledKey = computed(() => {
        var _a2;
        return ((_a2 = props.props) == null ? void 0 : _a2.disabled) || TreeOptionsEnum.DISABLED;
      });
      const labelKey = computed(() => {
        var _a2;
        return ((_a2 = props.props) == null ? void 0 : _a2.label) || TreeOptionsEnum.LABEL;
      });
      const flattenTree = computed(() => {
        const expandedKeys = expandedKeySet.value;
        const hiddenKeys = hiddenNodeKeySet.value;
        const flattenNodes = [];
        const nodes = tree.value && tree.value.treeNodes || [];
        function traverse2() {
          const stack2 = [];
          for (let i2 = nodes.length - 1; i2 >= 0; --i2) {
            stack2.push(nodes[i2]);
          }
          while (stack2.length) {
            const node = stack2.pop();
            if (!node)
              continue;
            if (!hiddenKeys.has(node.key)) {
              flattenNodes.push(node);
            }
            if (expandedKeys.has(node.key)) {
              const children = node.children;
              if (children) {
                const length = children.length;
                for (let i2 = length - 1; i2 >= 0; --i2) {
                  stack2.push(children[i2]);
                }
              }
            }
          }
        }
        traverse2();
        return flattenNodes;
      });
      const isNotEmpty = computed(() => {
        return flattenTree.value.length > 0;
      });
      function createTree(data) {
        const treeNodeMap = /* @__PURE__ */ new Map();
        const levelTreeNodeMap = /* @__PURE__ */ new Map();
        let maxLevel = 1;
        function traverse2(nodes, level = 1, parent = void 0) {
          var _a2;
          const siblings = [];
          for (const rawNode of nodes) {
            const value = getKey(rawNode);
            const node = {
              level,
              key: value,
              data: rawNode
            };
            node.label = getLabel(rawNode);
            node.parent = parent;
            const children = getChildren(rawNode);
            node.disabled = getDisabled(rawNode);
            node.isLeaf = !children || children.length === 0;
            if (children && children.length) {
              node.children = traverse2(children, level + 1, node);
            }
            siblings.push(node);
            treeNodeMap.set(value, node);
            if (!levelTreeNodeMap.has(level)) {
              levelTreeNodeMap.set(level, []);
            }
            (_a2 = levelTreeNodeMap.get(level)) == null ? void 0 : _a2.push(node);
          }
          if (level > maxLevel) {
            maxLevel = level;
          }
          return siblings;
        }
        const treeNodes = traverse2(data);
        return {
          treeNodeMap,
          levelTreeNodeMap,
          maxLevel,
          treeNodes
        };
      }
      function filter(query) {
        const keys2 = doFilter(query);
        if (keys2) {
          expandedKeySet.value = keys2;
        }
      }
      function getChildren(node) {
        return node[childrenKey.value];
      }
      function getKey(node) {
        if (!node) {
          return "";
        }
        return node[valueKey.value];
      }
      function getDisabled(node) {
        return node[disabledKey.value];
      }
      function getLabel(node) {
        return node[labelKey.value];
      }
      function toggleExpand(node) {
        const expandedKeys = expandedKeySet.value;
        if (expandedKeys.has(node.key)) {
          collapse(node);
        } else {
          expand2(node);
        }
      }
      function handleNodeClick(node, e2) {
        emit2(NODE_CLICK, node.data, node, e2);
        handleCurrentChange(node);
        if (props.expandOnClickNode) {
          toggleExpand(node);
        }
        if (props.showCheckbox && props.checkOnClickNode && !node.disabled) {
          toggleCheckbox(node, !isChecked(node), true);
        }
      }
      function handleCurrentChange(node) {
        if (!isCurrent(node)) {
          currentKey.value = node.key;
          emit2(CURRENT_CHANGE, node.data, node);
        }
      }
      function handleNodeCheck(node, checked2) {
        toggleCheckbox(node, checked2);
      }
      function expand2(node) {
        const keySet = expandedKeySet.value;
        if ((tree == null ? void 0 : tree.value) && props.accordion) {
          const { treeNodeMap } = tree.value;
          keySet.forEach((key) => {
            const node2 = treeNodeMap.get(key);
            if (node2 && node2.level === node2.level) {
              keySet.delete(key);
            }
          });
        }
        keySet.add(node.key);
        emit2(NODE_EXPAND, node.data, node);
      }
      function collapse(node) {
        expandedKeySet.value.delete(node.key);
        emit2(NODE_COLLAPSE, node.data, node);
      }
      function isExpanded(node) {
        return expandedKeySet.value.has(node.key);
      }
      function isDisabled(node) {
        return !!node.disabled;
      }
      function isCurrent(node) {
        const current = currentKey.value;
        return !!current && current === node.key;
      }
      function getCurrentNode() {
        var _a2, _b;
        if (!currentKey.value)
          return void 0;
        return (_b = (_a2 = tree == null ? void 0 : tree.value) == null ? void 0 : _a2.treeNodeMap.get(currentKey.value)) == null ? void 0 : _b.data;
      }
      function getCurrentKey() {
        return currentKey.value;
      }
      function setCurrentKey(key) {
        currentKey.value = key;
      }
      function setData(data) {
        nextTick$1(() => tree.value = createTree(data));
      }
      return {
        tree,
        flattenTree,
        isNotEmpty,
        getKey,
        getChildren,
        toggleExpand,
        toggleCheckbox,
        isExpanded,
        isChecked,
        isIndeterminate,
        isDisabled,
        isCurrent,
        isForceHiddenExpandIcon,
        handleNodeClick,
        handleNodeCheck,
        getCurrentNode,
        getCurrentKey,
        setCurrentKey,
        getCheckedKeys,
        getCheckedNodes,
        getHalfCheckedKeys,
        getHalfCheckedNodes,
        setChecked: setChecked2,
        setCheckedKeys,
        filter,
        setData
      };
    }
    var ElNodeContent = defineComponent({
      name: "ElTreeNodeContent",
      props: treeNodeContentProps,
      setup(props) {
        const tree = inject(ROOT_TREE_INJECTION_KEY);
        const ns2 = useNamespace("tree");
        return () => {
          const node = props.node;
          const { data } = node;
          return (tree == null ? void 0 : tree.ctx.slots.default) ? tree.ctx.slots.default({ node, data }) : h$2("span", { class: ns2.be("node", "label") }, [node == null ? void 0 : node.label]);
        };
      }
    });
    const DEFAULT_ICON = "caret-right";
    const _sfc_main$z = defineComponent({
      name: "ElTreeNode",
      components: {
        ElIcon,
        CaretRight: caret_right_default,
        ElCheckbox,
        ElNodeContent
      },
      props: treeNodeProps,
      emits: treeNodeEmits,
      setup(props, { emit: emit2 }) {
        const tree = inject(ROOT_TREE_INJECTION_KEY);
        const ns2 = useNamespace("tree");
        const indent = computed(() => {
          var _a2;
          return (_a2 = tree == null ? void 0 : tree.props.indent) != null ? _a2 : 16;
        });
        const icon = computed(() => {
          var _a2;
          return (_a2 = tree == null ? void 0 : tree.props.icon) != null ? _a2 : DEFAULT_ICON;
        });
        const handleClick = (e2) => {
          emit2("click", props.node, e2);
        };
        const handleExpandIconClick = () => {
          emit2("toggle", props.node);
        };
        const handleCheckChange = (value) => {
          emit2("check", props.node, value);
        };
        const handleContextMenu = (event) => {
          var _a2, _b, _c, _d;
          if ((_c = (_b = (_a2 = tree == null ? void 0 : tree.instance) == null ? void 0 : _a2.vnode) == null ? void 0 : _b.props) == null ? void 0 : _c["onNodeContextmenu"]) {
            event.stopPropagation();
            event.preventDefault();
          }
          tree == null ? void 0 : tree.ctx.emit(NODE_CONTEXTMENU, event, (_d = props.node) == null ? void 0 : _d.data, props.node);
        };
        return {
          ns: ns2,
          indent,
          icon,
          handleClick,
          handleExpandIconClick,
          handleCheckChange,
          handleContextMenu
        };
      }
    });
    const _hoisted_1$d = ["aria-expanded", "aria-disabled", "aria-checked", "data-key"];
    function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
      var _a2, _b, _c;
      const _component_el_icon = resolveComponent("el-icon");
      const _component_el_checkbox = resolveComponent("el-checkbox");
      const _component_el_node_content = resolveComponent("el-node-content");
      return openBlock(), createElementBlock("div", {
        ref: "node$",
        class: normalizeClass([
          _ctx.ns.b("node"),
          _ctx.ns.is("expanded", _ctx.expanded),
          _ctx.ns.is("current", _ctx.current),
          _ctx.ns.is("focusable", !_ctx.disabled),
          _ctx.ns.is("checked", !_ctx.disabled && _ctx.checked)
        ]),
        role: "treeitem",
        tabindex: "-1",
        "aria-expanded": _ctx.expanded,
        "aria-disabled": _ctx.disabled,
        "aria-checked": _ctx.checked,
        "data-key": (_a2 = _ctx.node) == null ? void 0 : _a2.key,
        onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.handleClick && _ctx.handleClick(...args), ["stop"])),
        onContextmenu: _cache[2] || (_cache[2] = (...args) => _ctx.handleContextMenu && _ctx.handleContextMenu(...args))
      }, [
        createBaseVNode("div", {
          class: normalizeClass(_ctx.ns.be("node", "content")),
          style: normalizeStyle({ paddingLeft: `${(_ctx.node.level - 1) * _ctx.indent}px` })
        }, [
          _ctx.icon ? (openBlock(), createBlock(_component_el_icon, {
            key: 0,
            class: normalizeClass([
              _ctx.ns.is("leaf", !!((_b = _ctx.node) == null ? void 0 : _b.isLeaf)),
              _ctx.ns.is("hidden", _ctx.hiddenExpandIcon),
              {
                expanded: !((_c = _ctx.node) == null ? void 0 : _c.isLeaf) && _ctx.expanded
              },
              _ctx.ns.be("node", "expand-icon")
            ]),
            onClick: withModifiers(_ctx.handleExpandIconClick, ["stop"])
          }, {
            default: withCtx(() => [
              (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))
            ]),
            _: 1
          }, 8, ["class", "onClick"])) : createCommentVNode("v-if", true),
          _ctx.showCheckbox ? (openBlock(), createBlock(_component_el_checkbox, {
            key: 1,
            "model-value": _ctx.checked,
            indeterminate: _ctx.indeterminate,
            disabled: _ctx.disabled,
            onChange: _ctx.handleCheckChange,
            onClick: _cache[0] || (_cache[0] = withModifiers(() => {
            }, ["stop"]))
          }, null, 8, ["model-value", "indeterminate", "disabled", "onChange"])) : createCommentVNode("v-if", true),
          createVNode(_component_el_node_content, { node: _ctx.node }, null, 8, ["node"])
        ], 6)
      ], 42, _hoisted_1$d);
    }
    var ElTreeNode = /* @__PURE__ */ _export_sfc$1(_sfc_main$z, [["render", _sfc_render$3], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/tree-v2/src/tree-node.vue"]]);
    const _sfc_main$y = defineComponent({
      name: "ElTreeV2",
      components: {
        ElTreeNode,
        FixedSizeList
      },
      props: treeProps,
      emits: treeEmits,
      setup(props, ctx) {
        provide(ROOT_TREE_INJECTION_KEY, {
          ctx,
          props,
          instance: getCurrentInstance()
        });
        provide(formItemContextKey, void 0);
        const { t } = useLocale();
        const ns2 = useNamespace("tree");
        const {
          flattenTree,
          isNotEmpty,
          toggleExpand,
          isExpanded,
          isIndeterminate,
          isChecked,
          isDisabled,
          isCurrent,
          isForceHiddenExpandIcon,
          toggleCheckbox,
          handleNodeClick,
          handleNodeCheck,
          getCurrentNode,
          getCurrentKey,
          setCurrentKey,
          getCheckedKeys,
          getCheckedNodes,
          getHalfCheckedKeys,
          getHalfCheckedNodes,
          setChecked: setChecked2,
          setCheckedKeys,
          filter,
          setData
        } = useTree(props, ctx.emit);
        ctx.expose({
          getCurrentNode,
          getCurrentKey,
          setCurrentKey,
          getCheckedKeys,
          getCheckedNodes,
          getHalfCheckedKeys,
          getHalfCheckedNodes,
          setChecked: setChecked2,
          setCheckedKeys,
          filter,
          setData
        });
        return {
          t,
          ns: ns2,
          flattenTree,
          itemSize: 26,
          isNotEmpty,
          toggleExpand,
          toggleCheckbox,
          isExpanded,
          isIndeterminate,
          isChecked,
          isDisabled,
          isCurrent,
          isForceHiddenExpandIcon,
          handleNodeClick,
          handleNodeCheck
        };
      }
    });
    function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
      var _a2;
      const _component_el_tree_node = resolveComponent("el-tree-node");
      const _component_fixed_size_list = resolveComponent("fixed-size-list");
      return openBlock(), createElementBlock("div", {
        class: normalizeClass([_ctx.ns.b(), { [_ctx.ns.m("highlight-current")]: _ctx.highlightCurrent }]),
        role: "tree"
      }, [
        _ctx.isNotEmpty ? (openBlock(), createBlock(_component_fixed_size_list, {
          key: 0,
          "class-name": _ctx.ns.b("virtual-list"),
          data: _ctx.flattenTree,
          total: _ctx.flattenTree.length,
          height: _ctx.height,
          "item-size": _ctx.itemSize,
          "perf-mode": _ctx.perfMode
        }, {
          default: withCtx(({ data, index: index2, style: style2 }) => [
            (openBlock(), createBlock(_component_el_tree_node, {
              key: data[index2].key,
              style: normalizeStyle(style2),
              node: data[index2],
              expanded: _ctx.isExpanded(data[index2]),
              "show-checkbox": _ctx.showCheckbox,
              checked: _ctx.isChecked(data[index2]),
              indeterminate: _ctx.isIndeterminate(data[index2]),
              disabled: _ctx.isDisabled(data[index2]),
              current: _ctx.isCurrent(data[index2]),
              "hidden-expand-icon": _ctx.isForceHiddenExpandIcon(data[index2]),
              onClick: _ctx.handleNodeClick,
              onToggle: _ctx.toggleExpand,
              onCheck: _ctx.handleNodeCheck
            }, null, 8, ["style", "node", "expanded", "show-checkbox", "checked", "indeterminate", "disabled", "current", "hidden-expand-icon", "onClick", "onToggle", "onCheck"]))
          ]),
          _: 1
        }, 8, ["class-name", "data", "total", "height", "item-size", "perf-mode"])) : (openBlock(), createElementBlock("div", {
          key: 1,
          class: normalizeClass(_ctx.ns.e("empty-block"))
        }, [
          createBaseVNode("span", {
            class: normalizeClass(_ctx.ns.e("empty-text"))
          }, toDisplayString$1((_a2 = _ctx.emptyText) != null ? _a2 : _ctx.t("el.tree.emptyText")), 3)
        ], 2))
      ], 2);
    }
    var TreeV2 = /* @__PURE__ */ _export_sfc$1(_sfc_main$y, [["render", _sfc_render$2], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/tree-v2/src/tree.vue"]]);
    const ElTreeV2 = withInstall(TreeV2);
    const SCOPE$2 = "ElUpload";
    class UploadAjaxError extends Error {
      constructor(message2, status, method2, url2) {
        super(message2);
        this.name = "UploadAjaxError";
        this.status = status;
        this.method = method2;
        this.url = url2;
      }
    }
    function getError(action, option, xhr2) {
      let msg;
      if (xhr2.response) {
        msg = `${xhr2.response.error || xhr2.response}`;
      } else if (xhr2.responseText) {
        msg = `${xhr2.responseText}`;
      } else {
        msg = `fail to ${option.method} ${action} ${xhr2.status}`;
      }
      return new UploadAjaxError(msg, xhr2.status, option.method, action);
    }
    function getBody(xhr2) {
      const text = xhr2.responseText || xhr2.response;
      if (!text) {
        return text;
      }
      try {
        return JSON.parse(text);
      } catch (e2) {
        return text;
      }
    }
    const ajaxUpload = (option) => {
      if (typeof XMLHttpRequest === "undefined")
        throwError(SCOPE$2, "XMLHttpRequest is undefined");
      const xhr2 = new XMLHttpRequest();
      const action = option.action;
      if (xhr2.upload) {
        xhr2.upload.addEventListener("progress", (evt) => {
          const progressEvt = evt;
          progressEvt.percent = evt.total > 0 ? evt.loaded / evt.total * 100 : 0;
          option.onProgress(progressEvt);
        });
      }
      const formData = new FormData();
      if (option.data) {
        for (const [key, value] of Object.entries(option.data)) {
          if (Array.isArray(value))
            formData.append(key, ...value);
          else
            formData.append(key, value);
        }
      }
      formData.append(option.filename, option.file, option.file.name);
      xhr2.addEventListener("error", () => {
        option.onError(getError(action, option, xhr2));
      });
      xhr2.addEventListener("load", () => {
        if (xhr2.status < 200 || xhr2.status >= 300) {
          return option.onError(getError(action, option, xhr2));
        }
        option.onSuccess(getBody(xhr2));
      });
      xhr2.open(option.method, action, true);
      if (option.withCredentials && "withCredentials" in xhr2) {
        xhr2.withCredentials = true;
      }
      const headers = option.headers || {};
      if (headers instanceof Headers) {
        headers.forEach((value, key) => xhr2.setRequestHeader(key, value));
      } else {
        for (const [key, value] of Object.entries(headers)) {
          if (isNil(value))
            continue;
          xhr2.setRequestHeader(key, String(value));
        }
      }
      xhr2.send(formData);
      return xhr2;
    };
    const uploadListTypes = ["text", "picture", "picture-card"];
    let fileId = 1;
    const genFileId = () => Date.now() + fileId++;
    const uploadBaseProps = buildProps({
      action: {
        type: String,
        default: "#"
      },
      headers: {
        type: definePropType(Object)
      },
      method: {
        type: String,
        default: "post"
      },
      data: {
        type: Object,
        default: () => mutable({})
      },
      multiple: {
        type: Boolean,
        default: false
      },
      name: {
        type: String,
        default: "file"
      },
      drag: {
        type: Boolean,
        default: false
      },
      withCredentials: Boolean,
      showFileList: {
        type: Boolean,
        default: true
      },
      accept: {
        type: String,
        default: ""
      },
      type: {
        type: String,
        default: "select"
      },
      fileList: {
        type: definePropType(Array),
        default: () => mutable([])
      },
      autoUpload: {
        type: Boolean,
        default: true
      },
      listType: {
        type: String,
        values: uploadListTypes,
        default: "text"
      },
      httpRequest: {
        type: definePropType(Function),
        default: ajaxUpload
      },
      disabled: Boolean,
      limit: Number
    });
    const uploadProps = buildProps({
      ...uploadBaseProps,
      beforeUpload: {
        type: definePropType(Function),
        default: NOOP
      },
      beforeRemove: {
        type: definePropType(Function)
      },
      onRemove: {
        type: definePropType(Function),
        default: NOOP
      },
      onChange: {
        type: definePropType(Function),
        default: NOOP
      },
      onPreview: {
        type: definePropType(Function),
        default: NOOP
      },
      onSuccess: {
        type: definePropType(Function),
        default: NOOP
      },
      onProgress: {
        type: definePropType(Function),
        default: NOOP
      },
      onError: {
        type: definePropType(Function),
        default: NOOP
      },
      onExceed: {
        type: definePropType(Function),
        default: NOOP
      }
    });
    const uploadListProps = buildProps({
      files: {
        type: definePropType(Array),
        default: () => mutable([])
      },
      disabled: {
        type: Boolean,
        default: false
      },
      handlePreview: {
        type: definePropType(Function),
        default: NOOP
      },
      listType: {
        type: String,
        values: uploadListTypes,
        default: "text"
      }
    });
    const uploadListEmits = {
      remove: (file) => !!file
    };
    const _hoisted_1$c = ["onKeydown"];
    const _hoisted_2$7 = ["src"];
    const _hoisted_3$2 = ["onClick"];
    const _hoisted_4$1 = ["onClick"];
    const _hoisted_5 = ["onClick"];
    const __default__$v = {
      name: "ElUploadList"
    };
    const _sfc_main$x = /* @__PURE__ */ defineComponent({
      ...__default__$v,
      props: uploadListProps,
      emits: uploadListEmits,
      setup(__props, { emit: emit2 }) {
        const props = __props;
        const { t } = useLocale();
        const nsUpload = useNamespace("upload");
        const nsIcon = useNamespace("icon");
        const nsList = useNamespace("list");
        const focusing = ref(false);
        const handleClick = (file) => {
          props.handlePreview(file);
        };
        const handleRemove = (file) => {
          emit2("remove", file);
        };
        return (_ctx, _cache) => {
          return openBlock(), createBlock(TransitionGroup, {
            tag: "ul",
            class: normalizeClass([
              unref(nsUpload).b("list"),
              unref(nsUpload).bm("list", _ctx.listType),
              unref(nsUpload).is("disabled", _ctx.disabled)
            ]),
            name: unref(nsList).b()
          }, {
            default: withCtx(() => [
              (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.files, (file) => {
                return openBlock(), createElementBlock("li", {
                  key: file.uid || file.name,
                  class: normalizeClass([
                    unref(nsUpload).be("list", "item"),
                    unref(nsUpload).is(file.status),
                    { focusing: focusing.value }
                  ]),
                  tabindex: "0",
                  onKeydown: withKeys(($event) => !_ctx.disabled && handleRemove(file), ["delete"]),
                  onFocus: _cache[0] || (_cache[0] = ($event) => focusing.value = true),
                  onBlur: _cache[1] || (_cache[1] = ($event) => focusing.value = false),
                  onClick: _cache[2] || (_cache[2] = ($event) => focusing.value = false)
                }, [
                  renderSlot(_ctx.$slots, "default", { file }, () => [
                    _ctx.listType === "picture" || file.status !== "uploading" && _ctx.listType === "picture-card" ? (openBlock(), createElementBlock("img", {
                      key: 0,
                      class: normalizeClass(unref(nsUpload).be("list", "item-thumbnail")),
                      src: file.url,
                      alt: ""
                    }, null, 10, _hoisted_2$7)) : createCommentVNode("v-if", true),
                    _ctx.listType !== "picture" && (file.status === "uploading" || _ctx.listType !== "picture-card") ? (openBlock(), createElementBlock("div", {
                      key: 1,
                      class: normalizeClass(unref(nsUpload).be("list", "item-info"))
                    }, [
                      createBaseVNode("a", {
                        class: normalizeClass(unref(nsUpload).be("list", "item-name")),
                        onClick: withModifiers(($event) => handleClick(file), ["prevent"])
                      }, [
                        createVNode(unref(ElIcon), {
                          class: normalizeClass(unref(nsIcon).m("document"))
                        }, {
                          default: withCtx(() => [
                            createVNode(unref(document_default))
                          ]),
                          _: 1
                        }, 8, ["class"]),
                        createBaseVNode("span", {
                          class: normalizeClass(unref(nsUpload).be("list", "item-file-name"))
                        }, toDisplayString$1(file.name), 3)
                      ], 10, _hoisted_3$2),
                      file.status === "uploading" ? (openBlock(), createBlock(unref(ElProgress), {
                        key: 0,
                        type: _ctx.listType === "picture-card" ? "circle" : "line",
                        "stroke-width": _ctx.listType === "picture-card" ? 6 : 2,
                        percentage: Number(file.percentage),
                        style: normalizeStyle(_ctx.listType === "picture-card" ? "" : "margin-top: 0.5rem")
                      }, null, 8, ["type", "stroke-width", "percentage", "style"])) : createCommentVNode("v-if", true)
                    ], 2)) : createCommentVNode("v-if", true),
                    createBaseVNode("label", {
                      class: normalizeClass(unref(nsUpload).be("list", "item-status-label"))
                    }, [
                      _ctx.listType === "text" ? (openBlock(), createBlock(unref(ElIcon), {
                        key: 0,
                        class: normalizeClass([unref(nsIcon).m("upload-success"), unref(nsIcon).m("circle-check")])
                      }, {
                        default: withCtx(() => [
                          createVNode(unref(circle_check_default))
                        ]),
                        _: 1
                      }, 8, ["class"])) : ["picture-card", "picture"].includes(_ctx.listType) ? (openBlock(), createBlock(unref(ElIcon), {
                        key: 1,
                        class: normalizeClass([unref(nsIcon).m("upload-success"), unref(nsIcon).m("check")])
                      }, {
                        default: withCtx(() => [
                          createVNode(unref(check_default))
                        ]),
                        _: 1
                      }, 8, ["class"])) : createCommentVNode("v-if", true)
                    ], 2),
                    !_ctx.disabled ? (openBlock(), createBlock(unref(ElIcon), {
                      key: 2,
                      class: normalizeClass(unref(nsIcon).m("close")),
                      onClick: ($event) => handleRemove(file)
                    }, {
                      default: withCtx(() => [
                        createVNode(unref(close_default))
                      ]),
                      _: 2
                    }, 1032, ["class", "onClick"])) : createCommentVNode("v-if", true),
                    createCommentVNode(" Due to close btn only appears when li gets focused disappears after li gets blurred, thus keyboard navigation can never reach close btn"),
                    createCommentVNode(" This is a bug which needs to be fixed "),
                    createCommentVNode(" TODO: Fix the incorrect navigation interaction "),
                    !_ctx.disabled ? (openBlock(), createElementBlock("i", {
                      key: 3,
                      class: normalizeClass(unref(nsIcon).m("close-tip"))
                    }, toDisplayString$1(unref(t)("el.upload.deleteTip")), 3)) : createCommentVNode("v-if", true),
                    _ctx.listType === "picture-card" ? (openBlock(), createElementBlock("span", {
                      key: 4,
                      class: normalizeClass(unref(nsUpload).be("list", "item-actions"))
                    }, [
                      createBaseVNode("span", {
                        class: normalizeClass(unref(nsUpload).be("list", "item-preview")),
                        onClick: ($event) => _ctx.handlePreview(file)
                      }, [
                        createVNode(unref(ElIcon), {
                          class: normalizeClass(unref(nsIcon).m("zoom-in"))
                        }, {
                          default: withCtx(() => [
                            createVNode(unref(zoom_in_default))
                          ]),
                          _: 1
                        }, 8, ["class"])
                      ], 10, _hoisted_4$1),
                      !_ctx.disabled ? (openBlock(), createElementBlock("span", {
                        key: 0,
                        class: normalizeClass(unref(nsUpload).be("list", "item-delete")),
                        onClick: ($event) => handleRemove(file)
                      }, [
                        createVNode(unref(ElIcon), {
                          class: normalizeClass(unref(nsIcon).m("delete"))
                        }, {
                          default: withCtx(() => [
                            createVNode(unref(delete_default))
                          ]),
                          _: 1
                        }, 8, ["class"])
                      ], 10, _hoisted_5)) : createCommentVNode("v-if", true)
                    ], 2)) : createCommentVNode("v-if", true)
                  ])
                ], 42, _hoisted_1$c);
              }), 128)),
              renderSlot(_ctx.$slots, "append")
            ]),
            _: 3
          }, 8, ["class", "name"]);
        };
      }
    });
    var UploadList = /* @__PURE__ */ _export_sfc$1(_sfc_main$x, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/upload/src/upload-list.vue"]]);
    const uploadDraggerProps = buildProps({
      disabled: {
        type: Boolean,
        default: false
      }
    });
    const uploadDraggerEmits = {
      file: (file) => isArray$6(file)
    };
    const _hoisted_1$b = ["onDrop", "onDragover"];
    const __default__$u = {
      name: "ElUploadDrag"
    };
    const _sfc_main$w = /* @__PURE__ */ defineComponent({
      ...__default__$u,
      props: uploadDraggerProps,
      emits: uploadDraggerEmits,
      setup(__props, { emit: emit2 }) {
        const props = __props;
        const COMPONENT_NAME2 = "ElUploadDrag";
        const uploaderContext = inject(uploadContextKey);
        if (!uploaderContext) {
          throwError(COMPONENT_NAME2, "usage: <el-upload><el-upload-dragger /></el-upload>");
        }
        const ns2 = useNamespace("upload");
        const dragover = ref(false);
        const onDrop = (e2) => {
          if (props.disabled)
            return;
          dragover.value = false;
          const files = Array.from(e2.dataTransfer.files);
          const accept = uploaderContext.accept.value;
          if (!accept) {
            emit2("file", files);
            return;
          }
          const filesFiltered = files.filter((file) => {
            const { type: type2, name } = file;
            const extension = name.includes(".") ? `.${name.split(".").pop()}` : "";
            const baseType = type2.replace(/\/.*$/, "");
            return accept.split(",").map((type22) => type22.trim()).filter((type22) => type22).some((acceptedType) => {
              if (acceptedType.startsWith(".")) {
                return extension === acceptedType;
              }
              if (/\/\*$/.test(acceptedType)) {
                return baseType === acceptedType.replace(/\/\*$/, "");
              }
              if (/^[^/]+\/[^/]+$/.test(acceptedType)) {
                return type2 === acceptedType;
              }
              return false;
            });
          });
          emit2("file", filesFiltered);
        };
        const onDragover = () => {
          if (!props.disabled)
            dragover.value = true;
        };
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            class: normalizeClass([unref(ns2).b("dragger"), unref(ns2).is("dragover", dragover.value)]),
            onDrop: withModifiers(onDrop, ["prevent"]),
            onDragover: withModifiers(onDragover, ["prevent"]),
            onDragleave: _cache[0] || (_cache[0] = withModifiers(($event) => dragover.value = false, ["prevent"]))
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 42, _hoisted_1$b);
        };
      }
    });
    var UploadDragger = /* @__PURE__ */ _export_sfc$1(_sfc_main$w, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/upload/src/upload-dragger.vue"]]);
    const uploadContentProps = buildProps({
      ...uploadBaseProps,
      beforeUpload: {
        type: definePropType(Function),
        default: NOOP
      },
      onRemove: {
        type: definePropType(Function),
        default: NOOP
      },
      onStart: {
        type: definePropType(Function),
        default: NOOP
      },
      onSuccess: {
        type: definePropType(Function),
        default: NOOP
      },
      onProgress: {
        type: definePropType(Function),
        default: NOOP
      },
      onError: {
        type: definePropType(Function),
        default: NOOP
      },
      onExceed: {
        type: definePropType(Function),
        default: NOOP
      }
    });
    const _hoisted_1$a = ["onKeydown"];
    const _hoisted_2$6 = ["name", "multiple", "accept"];
    const __default__$t = {
      name: "ElUploadContent",
      inheritAttrs: false
    };
    const _sfc_main$v = /* @__PURE__ */ defineComponent({
      ...__default__$t,
      props: uploadContentProps,
      setup(__props, { expose }) {
        const props = __props;
        const ns2 = useNamespace("upload");
        const requests = shallowRef({});
        const inputRef = shallowRef();
        const uploadFiles = (files) => {
          if (files.length === 0)
            return;
          const { autoUpload, limit, fileList, multiple, onStart, onExceed } = props;
          if (limit && fileList.length + files.length > limit) {
            onExceed(files, fileList);
            return;
          }
          if (!multiple) {
            files = files.slice(0, 1);
          }
          for (const file of files) {
            const rawFile = file;
            rawFile.uid = genFileId();
            onStart(rawFile);
            if (autoUpload)
              upload(rawFile);
          }
        };
        const upload = async (rawFile) => {
          inputRef.value.value = "";
          if (!props.beforeUpload) {
            return doUpload(rawFile);
          }
          let hookResult;
          try {
            hookResult = await props.beforeUpload(rawFile);
          } catch (e2) {
            hookResult = false;
          }
          if (hookResult === false) {
            props.onRemove(rawFile);
            return;
          }
          let file = rawFile;
          if (hookResult instanceof Blob) {
            if (hookResult instanceof File) {
              file = hookResult;
            } else {
              file = new File([hookResult], rawFile.name, {
                type: rawFile.type
              });
            }
          }
          doUpload(Object.assign(file, {
            uid: rawFile.uid
          }));
        };
        const doUpload = (rawFile) => {
          const {
            headers,
            data,
            method: method2,
            withCredentials,
            name: filename,
            action,
            onProgress,
            onSuccess,
            onError,
            httpRequest
          } = props;
          const { uid: uid2 } = rawFile;
          const options = {
            headers: headers || {},
            withCredentials,
            file: rawFile,
            data,
            method: method2,
            filename,
            action,
            onProgress: (evt) => {
              onProgress(evt, rawFile);
            },
            onSuccess: (res) => {
              onSuccess(res, rawFile);
              delete requests.value[uid2];
            },
            onError: (err) => {
              onError(err, rawFile);
              delete requests.value[uid2];
            }
          };
          const request2 = httpRequest(options);
          requests.value[uid2] = request2;
          if (request2 instanceof Promise) {
            request2.then(options.onSuccess, options.onError);
          }
        };
        const handleChange = (e2) => {
          const files = e2.target.files;
          if (!files)
            return;
          uploadFiles(Array.from(files));
        };
        const handleClick = () => {
          if (!props.disabled) {
            inputRef.value.value = "";
            inputRef.value.click();
          }
        };
        const handleKeydown = () => {
          handleClick();
        };
        const abort = (file) => {
          const _reqs = entriesOf(requests.value).filter(file ? ([uid2]) => String(file.uid) === uid2 : () => true);
          _reqs.forEach(([uid2, req]) => {
            if (req instanceof XMLHttpRequest)
              req.abort();
            delete requests.value[uid2];
          });
        };
        expose({
          abort,
          upload
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", {
            class: normalizeClass([unref(ns2).b(), unref(ns2).m(_ctx.listType), unref(ns2).is("drag", _ctx.drag)]),
            tabindex: "0",
            onClick: handleClick,
            onKeydown: withKeys(withModifiers(handleKeydown, ["self"]), ["enter", "space"])
          }, [
            _ctx.drag ? (openBlock(), createBlock(UploadDragger, {
              key: 0,
              disabled: _ctx.disabled,
              onFile: uploadFiles
            }, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "default")
              ]),
              _: 3
            }, 8, ["disabled"])) : renderSlot(_ctx.$slots, "default", { key: 1 }),
            createBaseVNode("input", {
              ref_key: "inputRef",
              ref: inputRef,
              class: normalizeClass(unref(ns2).e("input")),
              name: _ctx.name,
              multiple: _ctx.multiple,
              accept: _ctx.accept,
              type: "file",
              onChange: handleChange,
              onClick: _cache[0] || (_cache[0] = withModifiers(() => {
              }, ["stop"]))
            }, null, 42, _hoisted_2$6)
          ], 42, _hoisted_1$a);
        };
      }
    });
    var UploadContent = /* @__PURE__ */ _export_sfc$1(_sfc_main$v, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/upload/src/upload-content.vue"]]);
    const SCOPE$1 = "ElUpload";
    const revokeObjectURL = (file) => {
      var _a2;
      if ((_a2 = file.url) == null ? void 0 : _a2.startsWith("blob:")) {
        URL.revokeObjectURL(file.url);
      }
    };
    const useHandlers = (props, uploadRef) => {
      const uploadFiles = useVModel(props, "fileList", void 0, { passive: true });
      const getFile = (rawFile) => uploadFiles.value.find((file) => file.uid === rawFile.uid);
      function abort(file) {
        var _a2;
        (_a2 = uploadRef.value) == null ? void 0 : _a2.abort(file);
      }
      function clearFiles(states = ["ready", "uploading", "success", "fail"]) {
        uploadFiles.value = uploadFiles.value.filter((row) => !states.includes(row.status));
      }
      const handleError2 = (err, rawFile) => {
        const file = getFile(rawFile);
        if (!file)
          return;
        console.error(err);
        file.status = "fail";
        uploadFiles.value.splice(uploadFiles.value.indexOf(file), 1);
        props.onError(err, file, uploadFiles.value);
        props.onChange(file, uploadFiles.value);
      };
      const handleProgress = (evt, rawFile) => {
        const file = getFile(rawFile);
        if (!file)
          return;
        props.onProgress(evt, file, uploadFiles.value);
        file.status = "uploading";
        file.percentage = Math.round(evt.percent);
      };
      const handleSuccess = (response, rawFile) => {
        const file = getFile(rawFile);
        if (!file)
          return;
        file.status = "success";
        file.response = response;
        props.onSuccess(response, file, uploadFiles.value);
        props.onChange(file, uploadFiles.value);
      };
      const handleStart = (file) => {
        const uploadFile = {
          name: file.name,
          percentage: 0,
          status: "ready",
          size: file.size,
          raw: file,
          uid: file.uid
        };
        if (props.listType === "picture-card" || props.listType === "picture") {
          try {
            uploadFile.url = URL.createObjectURL(file);
          } catch (err) {
            debugWarn(SCOPE$1, err.message);
            props.onError(err, uploadFile, uploadFiles.value);
          }
        }
        uploadFiles.value = [...uploadFiles.value, uploadFile];
        props.onChange(uploadFile, uploadFiles.value);
      };
      const handleRemove = async (file) => {
        const uploadFile = file instanceof File ? getFile(file) : file;
        if (!uploadFile)
          throwError(SCOPE$1, "file to be removed not found");
        const doRemove = (file2) => {
          abort(file2);
          const fileList = uploadFiles.value;
          fileList.splice(fileList.indexOf(file2), 1);
          props.onRemove(file2, fileList);
          revokeObjectURL(file2);
        };
        if (props.beforeRemove) {
          const before = await props.beforeRemove(uploadFile, uploadFiles.value);
          if (before !== false)
            doRemove(uploadFile);
        } else {
          doRemove(uploadFile);
        }
      };
      function submit() {
        uploadFiles.value.filter(({ status }) => status === "ready").forEach(({ raw }) => {
          var _a2;
          return raw && ((_a2 = uploadRef.value) == null ? void 0 : _a2.upload(raw));
        });
      }
      watch(() => props.listType, (val) => {
        if (val !== "picture-card" && val !== "picture") {
          return;
        }
        uploadFiles.value = uploadFiles.value.map((file) => {
          const { raw, url: url2 } = file;
          if (!url2 && raw) {
            try {
              file.url = URL.createObjectURL(raw);
            } catch (err) {
              props.onError(err, file, uploadFiles.value);
            }
          }
          return file;
        });
      });
      watch(uploadFiles, (files) => {
        for (const file of files) {
          file.uid || (file.uid = genFileId());
          file.status || (file.status = "success");
        }
      }, { immediate: true, deep: true });
      return {
        uploadFiles,
        abort,
        clearFiles,
        handleError: handleError2,
        handleProgress,
        handleStart,
        handleSuccess,
        handleRemove,
        submit
      };
    };
    const __default__$s = {
      name: "ElUpload"
    };
    const _sfc_main$u = /* @__PURE__ */ defineComponent({
      ...__default__$s,
      props: uploadProps,
      setup(__props, { expose }) {
        const props = __props;
        const slots = useSlots();
        const disabled = useDisabled$1();
        const uploadRef = shallowRef();
        const {
          abort,
          submit,
          clearFiles,
          uploadFiles,
          handleStart,
          handleError: handleError2,
          handleRemove,
          handleSuccess,
          handleProgress
        } = useHandlers(props, uploadRef);
        const isPictureCard = computed(() => props.listType === "picture-card");
        const uploadContentProps2 = computed(() => ({
          ...props,
          onStart: handleStart,
          onProgress: handleProgress,
          onSuccess: handleSuccess,
          onError: handleError2,
          onRemove: handleRemove
        }));
        onBeforeUnmount(() => {
          uploadFiles.value.forEach(({ url: url2 }) => {
            if (url2 == null ? void 0 : url2.startsWith("blob:"))
              URL.revokeObjectURL(url2);
          });
        });
        provide(uploadContextKey, {
          accept: toRef(props, "accept")
        });
        expose({
          abort,
          submit,
          clearFiles,
          handleStart,
          handleRemove
        });
        return (_ctx, _cache) => {
          return openBlock(), createElementBlock("div", null, [
            unref(isPictureCard) && _ctx.showFileList ? (openBlock(), createBlock(UploadList, {
              key: 0,
              disabled: unref(disabled),
              "list-type": _ctx.listType,
              files: unref(uploadFiles),
              "handle-preview": _ctx.onPreview,
              onRemove: unref(handleRemove)
            }, createSlots({
              append: withCtx(() => [
                _ctx.listType === "picture-card" ? (openBlock(), createBlock(UploadContent, mergeProps({
                  key: 0,
                  ref_key: "uploadRef",
                  ref: uploadRef
                }, unref(uploadContentProps2)), {
                  default: withCtx(() => [
                    unref(slots).trigger ? renderSlot(_ctx.$slots, "trigger", { key: 0 }) : createCommentVNode("v-if", true),
                    !unref(slots).trigger && unref(slots).default ? renderSlot(_ctx.$slots, "default", { key: 1 }) : createCommentVNode("v-if", true)
                  ]),
                  _: 3
                }, 16)) : createCommentVNode("v-if", true)
              ]),
              _: 2
            }, [
              _ctx.$slots.file ? {
                name: "default",
                fn: withCtx(({ file }) => [
                  renderSlot(_ctx.$slots, "file", { file })
                ])
              } : void 0
            ]), 1032, ["disabled", "list-type", "files", "handle-preview", "onRemove"])) : createCommentVNode("v-if", true),
            _ctx.listType !== "picture-card" ? (openBlock(), createBlock(UploadContent, mergeProps({
              key: 1,
              ref_key: "uploadRef",
              ref: uploadRef
            }, unref(uploadContentProps2)), {
              default: withCtx(() => [
                unref(slots).trigger ? renderSlot(_ctx.$slots, "trigger", { key: 0 }) : createCommentVNode("v-if", true),
                !unref(slots).trigger && unref(slots).default ? renderSlot(_ctx.$slots, "default", { key: 1 }) : createCommentVNode("v-if", true)
              ]),
              _: 3
            }, 16)) : createCommentVNode("v-if", true),
            _ctx.$slots.trigger ? renderSlot(_ctx.$slots, "default", { key: 2 }) : createCommentVNode("v-if", true),
            renderSlot(_ctx.$slots, "tip"),
            !unref(isPictureCard) && _ctx.showFileList ? (openBlock(), createBlock(UploadList, {
              key: 3,
              disabled: unref(disabled),
              "list-type": _ctx.listType,
              files: unref(uploadFiles),
              "handle-preview": _ctx.onPreview,
              onRemove: unref(handleRemove)
            }, createSlots({ _: 2 }, [
              _ctx.$slots.file ? {
                name: "default",
                fn: withCtx(({ file }) => [
                  renderSlot(_ctx.$slots, "file", { file })
                ])
              } : void 0
            ]), 1032, ["disabled", "list-type", "files", "handle-preview", "onRemove"])) : createCommentVNode("v-if", true)
          ]);
        };
      }
    });
    var Upload = /* @__PURE__ */ _export_sfc$1(_sfc_main$u, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/upload/src/upload.vue"]]);
    const ElUpload = withInstall(Upload);
    var Components = [
      ElAffix,
      ElAlert,
      ElAutocomplete,
      ElAutoResizer,
      ElAvatar,
      ElBacktop,
      ElBadge,
      ElBreadcrumb,
      ElBreadcrumbItem,
      ElButton,
      ElButtonGroup$1,
      ElCalendar,
      ElCard,
      ElCarousel,
      ElCarouselItem,
      ElCascader,
      ElCascaderPanel,
      ElCheckTag,
      ElCheckbox,
      ElCheckboxButton,
      ElCheckboxGroup$1,
      ElCol,
      ElCollapse,
      ElCollapseItem,
      ElCollapseTransition,
      ElColorPicker,
      ElConfigProvider,
      ElContainer,
      ElAside,
      ElFooter,
      ElHeader,
      ElMain,
      ElDatePicker,
      ElDescriptions,
      ElDescriptionsItem,
      ElDialog,
      ElDivider,
      ElDrawer,
      ElDropdown,
      ElDropdownItem,
      ElDropdownMenu,
      ElEmpty,
      ElForm,
      ElFormItem,
      ElIcon,
      ElImage,
      ElImageViewer,
      ElInput,
      ElInputNumber,
      ElLink,
      ElMenu,
      ElMenuItem,
      ElMenuItemGroup,
      ElPageHeader,
      ElPagination,
      ElPopconfirm,
      ElPopover,
      ElPopper,
      ElProgress,
      ElRadio,
      ElRadioButton,
      ElRadioGroup,
      ElRate,
      ElResult,
      ElRow,
      ElScrollbar,
      ElSelect,
      ElOption,
      ElOptionGroup,
      ElSelectV2,
      ElSkeleton,
      ElSkeletonItem,
      ElSlider,
      ElSpace,
      ElSteps,
      ElStep,
      ElSwitch,
      ElTable,
      ElTableColumn,
      ElTableV2,
      ElTabs,
      ElTabPane,
      ElTag,
      ElTimePicker,
      ElTimeSelect,
      ElTimeline,
      ElTimelineItem,
      ElTooltip,
      ElTooltipV2,
      ElTransfer,
      ElTree,
      ElTreeSelect,
      ElTreeV2,
      ElUpload
    ];
    const SCOPE = "ElInfiniteScroll";
    const CHECK_INTERVAL = 50;
    const DEFAULT_DELAY = 200;
    const DEFAULT_DISTANCE = 0;
    const attributes = {
      delay: {
        type: Number,
        default: DEFAULT_DELAY
      },
      distance: {
        type: Number,
        default: DEFAULT_DISTANCE
      },
      disabled: {
        type: Boolean,
        default: false
      },
      immediate: {
        type: Boolean,
        default: true
      }
    };
    const getScrollOptions = (el, instance) => {
      return Object.entries(attributes).reduce((acm, [name, option]) => {
        var _a2, _b;
        const { type: type2, default: defaultValue } = option;
        const attrVal = el.getAttribute(`infinite-scroll-${name}`);
        let value = (_b = (_a2 = instance[attrVal]) != null ? _a2 : attrVal) != null ? _b : defaultValue;
        value = value === "false" ? false : value;
        value = type2(value);
        acm[name] = Number.isNaN(value) ? defaultValue : value;
        return acm;
      }, {});
    };
    const destroyObserver = (el) => {
      const { observer } = el[SCOPE];
      if (observer) {
        observer.disconnect();
        delete el[SCOPE].observer;
      }
    };
    const handleScroll = (el, cb) => {
      const { container, containerEl, instance, observer, lastScrollTop } = el[SCOPE];
      const { disabled, distance } = getScrollOptions(el, instance);
      const { clientHeight, scrollHeight, scrollTop } = containerEl;
      const delta = scrollTop - lastScrollTop;
      el[SCOPE].lastScrollTop = scrollTop;
      if (observer || disabled || delta < 0)
        return;
      let shouldTrigger = false;
      if (container === el) {
        shouldTrigger = scrollHeight - (clientHeight + scrollTop) <= distance;
      } else {
        const { clientTop, scrollHeight: height } = el;
        const offsetTop = getOffsetTopDistance(el, containerEl);
        shouldTrigger = scrollTop + clientHeight >= offsetTop + clientTop + height - distance;
      }
      if (shouldTrigger) {
        cb.call(instance);
      }
    };
    function checkFull(el, cb) {
      const { containerEl, instance } = el[SCOPE];
      const { disabled } = getScrollOptions(el, instance);
      if (disabled || containerEl.clientHeight === 0)
        return;
      if (containerEl.scrollHeight <= containerEl.clientHeight) {
        cb.call(instance);
      } else {
        destroyObserver(el);
      }
    }
    const InfiniteScroll = {
      async mounted(el, binding2) {
        const { instance, value: cb } = binding2;
        if (!isFunction$4(cb)) {
          throwError(SCOPE, "'v-infinite-scroll' binding value must be a function");
        }
        await nextTick$1();
        const { delay, immediate } = getScrollOptions(el, instance);
        const container = getScrollContainer(el, true);
        const containerEl = container === window ? document.documentElement : container;
        const onScroll = throttle(handleScroll.bind(null, el, cb), delay);
        if (!container)
          return;
        el[SCOPE] = {
          instance,
          container,
          containerEl,
          delay,
          cb,
          onScroll,
          lastScrollTop: containerEl.scrollTop
        };
        if (immediate) {
          const observer = new MutationObserver(throttle(checkFull.bind(null, el, cb), CHECK_INTERVAL));
          el[SCOPE].observer = observer;
          observer.observe(el, { childList: true, subtree: true });
          checkFull(el, cb);
        }
        container.addEventListener("scroll", onScroll);
      },
      unmounted(el) {
        const { container, onScroll } = el[SCOPE];
        container == null ? void 0 : container.removeEventListener("scroll", onScroll);
        destroyObserver(el);
      },
      async updated(el) {
        if (!el[SCOPE]) {
          await nextTick$1();
        }
        const { containerEl, cb, observer } = el[SCOPE];
        if (containerEl.clientHeight && observer) {
          checkFull(el, cb);
        }
      }
    };
    const _InfiniteScroll = InfiniteScroll;
    _InfiniteScroll.install = (app2) => {
      app2.directive("InfiniteScroll", _InfiniteScroll);
    };
    const ElInfiniteScroll = _InfiniteScroll;
    function createLoadingComponent(options) {
      let afterLeaveTimer;
      const ns2 = useNamespace("loading");
      const afterLeaveFlag = ref(false);
      const data = reactive({
        ...options,
        originalPosition: "",
        originalOverflow: "",
        visible: false
      });
      function setText(text) {
        data.text = text;
      }
      function destroySelf() {
        const target = data.parent;
        if (!target.vLoadingAddClassList) {
          let loadingNumber = target.getAttribute("loading-number");
          loadingNumber = Number.parseInt(loadingNumber) - 1;
          if (!loadingNumber) {
            removeClass(target, ns2.bm("parent", "relative"));
            target.removeAttribute("loading-number");
          } else {
            target.setAttribute("loading-number", loadingNumber.toString());
          }
          removeClass(target, ns2.bm("parent", "hidden"));
        }
        removeElLoadingChild();
        loadingInstance.unmount();
      }
      function removeElLoadingChild() {
        var _a2, _b;
        (_b = (_a2 = vm.$el) == null ? void 0 : _a2.parentNode) == null ? void 0 : _b.removeChild(vm.$el);
      }
      function close2() {
        var _a2;
        if (options.beforeClose && !options.beforeClose())
          return;
        const target = data.parent;
        target.vLoadingAddClassList = void 0;
        afterLeaveFlag.value = true;
        clearTimeout(afterLeaveTimer);
        afterLeaveTimer = window.setTimeout(() => {
          if (afterLeaveFlag.value) {
            afterLeaveFlag.value = false;
            destroySelf();
          }
        }, 400);
        data.visible = false;
        (_a2 = options.closed) == null ? void 0 : _a2.call(options);
      }
      function handleAfterLeave() {
        if (!afterLeaveFlag.value)
          return;
        afterLeaveFlag.value = false;
        destroySelf();
      }
      const elLoadingComponent = {
        name: "ElLoading",
        setup() {
          return () => {
            const svg = data.spinner || data.svg;
            const spinner = h$2("svg", {
              class: "circular",
              viewBox: data.svgViewBox ? data.svgViewBox : "25 25 50 50",
              ...svg ? { innerHTML: svg } : {}
            }, [
              h$2("circle", {
                class: "path",
                cx: "50",
                cy: "50",
                r: "20",
                fill: "none"
              })
            ]);
            const spinnerText = data.text ? h$2("p", { class: ns2.b("text") }, [data.text]) : void 0;
            return h$2(Transition, {
              name: ns2.b("fade"),
              onAfterLeave: handleAfterLeave
            }, {
              default: withCtx(() => [
                withDirectives(createVNode("div", {
                  style: {
                    backgroundColor: data.background || ""
                  },
                  class: [
                    ns2.b("mask"),
                    data.customClass,
                    data.fullscreen ? "is-fullscreen" : ""
                  ]
                }, [
                  h$2("div", {
                    class: ns2.b("spinner")
                  }, [spinner, spinnerText])
                ]), [[vShow, data.visible]])
              ])
            });
          };
        }
      };
      const loadingInstance = createApp(elLoadingComponent);
      const vm = loadingInstance.mount(document.createElement("div"));
      return {
        ...toRefs(data),
        setText,
        removeElLoadingChild,
        close: close2,
        handleAfterLeave,
        vm,
        get $el() {
          return vm.$el;
        }
      };
    }
    let fullscreenInstance = void 0;
    const Loading = function(options = {}) {
      if (!isClient)
        return void 0;
      const resolved = resolveOptions(options);
      if (resolved.fullscreen && fullscreenInstance) {
        return fullscreenInstance;
      }
      const instance = createLoadingComponent({
        ...resolved,
        closed: () => {
          var _a2;
          (_a2 = resolved.closed) == null ? void 0 : _a2.call(resolved);
          if (resolved.fullscreen)
            fullscreenInstance = void 0;
        }
      });
      addStyle(resolved, resolved.parent, instance);
      addClassList(resolved, resolved.parent, instance);
      resolved.parent.vLoadingAddClassList = () => addClassList(resolved, resolved.parent, instance);
      let loadingNumber = resolved.parent.getAttribute("loading-number");
      if (!loadingNumber) {
        loadingNumber = "1";
      } else {
        loadingNumber = `${Number.parseInt(loadingNumber) + 1}`;
      }
      resolved.parent.setAttribute("loading-number", loadingNumber);
      resolved.parent.appendChild(instance.$el);
      nextTick$1(() => instance.visible.value = resolved.visible);
      if (resolved.fullscreen) {
        fullscreenInstance = instance;
      }
      return instance;
    };
    const resolveOptions = (options) => {
      var _a2, _b, _c, _d;
      let target;
      if (isString$3(options.target)) {
        target = (_a2 = document.querySelector(options.target)) != null ? _a2 : document.body;
      } else {
        target = options.target || document.body;
      }
      return {
        parent: target === document.body || options.body ? document.body : target,
        background: options.background || "",
        svg: options.svg || "",
        svgViewBox: options.svgViewBox || "",
        spinner: options.spinner || false,
        text: options.text || "",
        fullscreen: target === document.body && ((_b = options.fullscreen) != null ? _b : true),
        lock: (_c = options.lock) != null ? _c : false,
        customClass: options.customClass || "",
        visible: (_d = options.visible) != null ? _d : true,
        target
      };
    };
    const addStyle = async (options, parent, instance) => {
      const { nextZIndex } = useZIndex();
      const maskStyle = {};
      if (options.fullscreen) {
        instance.originalPosition.value = getStyle(document.body, "position");
        instance.originalOverflow.value = getStyle(document.body, "overflow");
        maskStyle.zIndex = nextZIndex();
      } else if (options.parent === document.body) {
        instance.originalPosition.value = getStyle(document.body, "position");
        await nextTick$1();
        for (const property of ["top", "left"]) {
          const scroll = property === "top" ? "scrollTop" : "scrollLeft";
          maskStyle[property] = `${options.target.getBoundingClientRect()[property] + document.body[scroll] + document.documentElement[scroll] - Number.parseInt(getStyle(document.body, `margin-${property}`), 10)}px`;
        }
        for (const property of ["height", "width"]) {
          maskStyle[property] = `${options.target.getBoundingClientRect()[property]}px`;
        }
      } else {
        instance.originalPosition.value = getStyle(parent, "position");
      }
      for (const [key, value] of Object.entries(maskStyle)) {
        instance.$el.style[key] = value;
      }
    };
    const addClassList = (options, parent, instance) => {
      const ns2 = useNamespace("loading");
      if (instance.originalPosition.value !== "absolute" && instance.originalPosition.value !== "fixed") {
        addClass(parent, ns2.bm("parent", "relative"));
      } else {
        removeClass(parent, ns2.bm("parent", "relative"));
      }
      if (options.fullscreen && options.lock) {
        addClass(parent, ns2.bm("parent", "hidden"));
      } else {
        removeClass(parent, ns2.bm("parent", "hidden"));
      }
    };
    const INSTANCE_KEY = Symbol("ElLoading");
    const createInstance = (el, binding2) => {
      var _a2, _b, _c, _d;
      const vm = binding2.instance;
      const getBindingProp = (key) => isObject$7(binding2.value) ? binding2.value[key] : void 0;
      const resolveExpression = (key) => {
        const data = isString$3(key) && (vm == null ? void 0 : vm[key]) || key;
        if (data)
          return ref(data);
        else
          return data;
      };
      const getProp2 = (name) => resolveExpression(getBindingProp(name) || el.getAttribute(`element-loading-${hyphenate(name)}`));
      const fullscreen = (_a2 = getBindingProp("fullscreen")) != null ? _a2 : binding2.modifiers.fullscreen;
      const options = {
        text: getProp2("text"),
        svg: getProp2("svg"),
        svgViewBox: getProp2("svgViewBox"),
        spinner: getProp2("spinner"),
        background: getProp2("background"),
        customClass: getProp2("customClass"),
        fullscreen,
        target: (_b = getBindingProp("target")) != null ? _b : fullscreen ? void 0 : el,
        body: (_c = getBindingProp("body")) != null ? _c : binding2.modifiers.body,
        lock: (_d = getBindingProp("lock")) != null ? _d : binding2.modifiers.lock
      };
      el[INSTANCE_KEY] = {
        options,
        instance: Loading(options)
      };
    };
    const updateOptions = (newOptions, originalOptions) => {
      for (const key of Object.keys(originalOptions)) {
        if (isRef(originalOptions[key]))
          originalOptions[key].value = newOptions[key];
      }
    };
    const vLoading = {
      mounted(el, binding2) {
        if (binding2.value) {
          createInstance(el, binding2);
        }
      },
      updated(el, binding2) {
        const instance = el[INSTANCE_KEY];
        if (binding2.oldValue !== binding2.value) {
          if (binding2.value && !binding2.oldValue) {
            createInstance(el, binding2);
          } else if (binding2.value && binding2.oldValue) {
            if (isObject$7(binding2.value))
              updateOptions(binding2.value, instance.options);
          } else {
            instance == null ? void 0 : instance.instance.close();
          }
        }
      },
      unmounted(el) {
        var _a2;
        (_a2 = el[INSTANCE_KEY]) == null ? void 0 : _a2.instance.close();
      }
    };
    const ElLoading = {
      install(app2) {
        app2.directive("loading", vLoading);
        app2.config.globalProperties.$loading = Loading;
      },
      directive: vLoading,
      service: Loading
    };
    const messageTypes = ["success", "info", "warning", "error"];
    const messageDefaults = mutable({
      customClass: "",
      center: false,
      dangerouslyUseHTMLString: false,
      duration: 3e3,
      icon: "",
      id: "",
      message: "",
      onClose: void 0,
      showClose: false,
      type: "info",
      offset: 16,
      zIndex: 0,
      grouping: false,
      repeatNum: 1,
      appendTo: isClient ? document.body : void 0
    });
    const messageProps = buildProps({
      customClass: {
        type: String,
        default: messageDefaults.customClass
      },
      center: {
        type: Boolean,
        default: messageDefaults.center
      },
      dangerouslyUseHTMLString: {
        type: Boolean,
        default: messageDefaults.dangerouslyUseHTMLString
      },
      duration: {
        type: Number,
        default: messageDefaults.duration
      },
      icon: {
        type: iconPropType,
        default: messageDefaults.icon
      },
      id: {
        type: String,
        default: messageDefaults.id
      },
      message: {
        type: definePropType([
          String,
          Object,
          Function
        ]),
        default: messageDefaults.message
      },
      onClose: {
        type: definePropType(Function),
        required: false
      },
      showClose: {
        type: Boolean,
        default: messageDefaults.showClose
      },
      type: {
        type: String,
        values: messageTypes,
        default: messageDefaults.type
      },
      offset: {
        type: Number,
        default: messageDefaults.offset
      },
      zIndex: {
        type: Number,
        default: messageDefaults.zIndex
      },
      grouping: {
        type: Boolean,
        default: messageDefaults.grouping
      },
      repeatNum: {
        type: Number,
        default: messageDefaults.repeatNum
      }
    });
    const messageEmits = {
      destroy: () => true
    };
    const instances = shallowReactive([]);
    const getInstance = (id2) => {
      const idx = instances.findIndex((instance) => instance.id === id2);
      const current = instances[idx];
      let prev;
      if (idx > 0) {
        prev = instances[idx - 1];
      }
      return { current, prev };
    };
    const getLastOffset = (id2) => {
      const { prev } = getInstance(id2);
      if (!prev)
        return 0;
      return prev.vm.exposeProxy.bottom;
    };
    const _hoisted_1$9 = ["id"];
    const _hoisted_2$5 = ["innerHTML"];
    const __default__$r = {
      name: "ElMessage"
    };
    const _sfc_main$t = /* @__PURE__ */ defineComponent({
      ...__default__$r,
      props: messageProps,
      emits: messageEmits,
      setup(__props, { expose }) {
        const props = __props;
        const { Close } = TypeComponents;
        const ns2 = useNamespace("message");
        const messageRef = ref();
        const visible = ref(false);
        const height = ref(0);
        let stopTimer = void 0;
        const badgeType = computed(() => props.type ? props.type === "error" ? "danger" : props.type : "info");
        const typeClass = computed(() => {
          const type2 = props.type;
          return { [ns2.bm("icon", type2)]: type2 && TypeComponentsMap[type2] };
        });
        const iconComponent = computed(() => props.icon || TypeComponentsMap[props.type] || "");
        const lastOffset = computed(() => getLastOffset(props.id));
        const offset2 = computed(() => props.offset + lastOffset.value);
        const bottom = computed(() => height.value + offset2.value);
        const customStyle = computed(() => ({
          top: `${offset2.value}px`,
          zIndex: props.zIndex
        }));
        function startTimer() {
          if (props.duration === 0)
            return;
          ({ stop: stopTimer } = useTimeoutFn(() => {
            close2();
          }, props.duration));
        }
        function clearTimer() {
          stopTimer == null ? void 0 : stopTimer();
        }
        function close2() {
          visible.value = false;
        }
        function keydown({ code }) {
          if (code === EVENT_CODE.esc) {
            close2();
          }
        }
        onMounted(() => {
          startTimer();
          visible.value = true;
        });
        watch(() => props.repeatNum, () => {
          clearTimer();
          startTimer();
        });
        useEventListener(document, "keydown", keydown);
        useResizeObserver(messageRef, () => {
          height.value = messageRef.value.getBoundingClientRect().height;
        });
        expose({
          visible,
          bottom,
          close: close2
        });
        return (_ctx, _cache) => {
          return openBlock(), createBlock(Transition, {
            name: unref(ns2).b("fade"),
            onBeforeLeave: _ctx.onClose,
            onAfterLeave: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("destroy")),
            persisted: ""
          }, {
            default: withCtx(() => [
              withDirectives(createBaseVNode("div", {
                id: _ctx.id,
                ref_key: "messageRef",
                ref: messageRef,
                class: normalizeClass([
                  unref(ns2).b(),
                  { [unref(ns2).m(_ctx.type)]: _ctx.type && !_ctx.icon },
                  unref(ns2).is("center", _ctx.center),
                  unref(ns2).is("closable", _ctx.showClose),
                  _ctx.customClass
                ]),
                style: normalizeStyle(unref(customStyle)),
                role: "alert",
                onMouseenter: clearTimer,
                onMouseleave: startTimer
              }, [
                _ctx.repeatNum > 1 ? (openBlock(), createBlock(unref(ElBadge), {
                  key: 0,
                  value: _ctx.repeatNum,
                  type: unref(badgeType),
                  class: normalizeClass(unref(ns2).e("badge"))
                }, null, 8, ["value", "type", "class"])) : createCommentVNode("v-if", true),
                unref(iconComponent) ? (openBlock(), createBlock(unref(ElIcon), {
                  key: 1,
                  class: normalizeClass([unref(ns2).e("icon"), unref(typeClass)])
                }, {
                  default: withCtx(() => [
                    (openBlock(), createBlock(resolveDynamicComponent(unref(iconComponent))))
                  ]),
                  _: 1
                }, 8, ["class"])) : createCommentVNode("v-if", true),
                renderSlot(_ctx.$slots, "default", {}, () => [
                  !_ctx.dangerouslyUseHTMLString ? (openBlock(), createElementBlock("p", {
                    key: 0,
                    class: normalizeClass(unref(ns2).e("content"))
                  }, toDisplayString$1(_ctx.message), 3)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                    createCommentVNode(" Caution here, message could've been compromised, never use user's input as message "),
                    createBaseVNode("p", {
                      class: normalizeClass(unref(ns2).e("content")),
                      innerHTML: _ctx.message
                    }, null, 10, _hoisted_2$5)
                  ], 2112))
                ]),
                _ctx.showClose ? (openBlock(), createBlock(unref(ElIcon), {
                  key: 2,
                  class: normalizeClass(unref(ns2).e("closeBtn")),
                  onClick: withModifiers(close2, ["stop"])
                }, {
                  default: withCtx(() => [
                    createVNode(unref(Close))
                  ]),
                  _: 1
                }, 8, ["class", "onClick"])) : createCommentVNode("v-if", true)
              ], 46, _hoisted_1$9), [
                [vShow, visible.value]
              ])
            ]),
            _: 3
          }, 8, ["name", "onBeforeLeave"]);
        };
      }
    });
    var MessageConstructor = /* @__PURE__ */ _export_sfc$1(_sfc_main$t, [["__file", "/home/runner/work/element-plus/element-plus/packages/components/message/src/message.vue"]]);
    let seed$1 = 1;
    const normalizeOptions = (params) => {
      const options = !params || isString$3(params) || isVNode(params) || isFunction$4(params) ? { message: params } : params;
      const normalized = {
        ...messageDefaults,
        ...options
      };
      if (!normalized.appendTo) {
        normalized.appendTo = document.body;
      } else if (isString$3(normalized.appendTo)) {
        let appendTo = document.querySelector(normalized.appendTo);
        if (!isElement$1(appendTo)) {
          appendTo = document.body;
        }
        normalized.appendTo = appendTo;
      }
      return normalized;
    };
    const closeMessage = (instance) => {
      const idx = instances.indexOf(instance);
      if (idx === -1)
        return;
      instances.splice(idx, 1);
      const { handler } = instance;
      handler.close();
    };
    const createMessage = ({ appendTo, ...options }, context) => {
      const { nextZIndex } = useZIndex();
      const id2 = `message_${seed$1++}`;
      const userOnClose = options.onClose;
      const container = document.createElement("div");
      const props = {
        ...options,
        zIndex: nextZIndex() + options.zIndex,
        id: id2,
        onClose: () => {
          userOnClose == null ? void 0 : userOnClose();
          closeMessage(instance);
        },
        onDestroy: () => {
          render$1(null, container);
        }
      };
      const vnode = createVNode(MessageConstructor, props, isFunction$4(props.message) || isVNode(props.message) ? { default: props.message } : null);
      vnode.appContext = context || message._context;
      render$1(vnode, container);
      appendTo.appendChild(container.firstElementChild);
      const vm = vnode.component;
      const handler = {
        close: () => {
          vm.exposeProxy.visible = false;
        }
      };
      const instance = {
        id: id2,
        vnode,
        vm,
        handler,
        props: vnode.component.props
      };
      return instance;
    };
    const message = (options = {}, context) => {
      if (!isClient)
        return { close: () => void 0 };
      if (isNumber$1(messageConfig.max) && instances.length >= messageConfig.max) {
        return { close: () => void 0 };
      }
      const normalized = normalizeOptions(options);
      if (normalized.grouping && instances.length) {
        const instance2 = instances.find(({ vnode: vm }) => {
          var _a2;
          return ((_a2 = vm.props) == null ? void 0 : _a2.message) === normalized.message;
        });
        if (instance2) {
          instance2.props.repeatNum += 1;
          instance2.props.type = normalized.type;
          return instance2.handler;
        }
      }
      const instance = createMessage(normalized, context);
      instances.push(instance);
      return instance.handler;
    };
    messageTypes.forEach((type2) => {
      message[type2] = (options = {}, appContext) => {
        const normalized = normalizeOptions(options);
        return message({ ...normalized, type: type2 }, appContext);
      };
    });
    function closeAll$1(type2) {
      for (const instance of instances) {
        if (!type2 || type2 === instance.props.type) {
          instance.handler.close();
        }
      }
    }
    message.closeAll = closeAll$1;
    message._context = null;
    const ElMessage = withInstallFunction(message, "$message");
    const _sfc_main$s = defineComponent({
      name: "ElMessageBox",
      directives: {
        TrapFocus
      },
      components: {
        ElButton,
        ElFocusTrap,
        ElInput,
        ElOverlay,
        ElIcon,
        ...TypeComponents
      },
      inheritAttrs: false,
      props: {
        buttonSize: {
          type: String,
          validator: isValidComponentSize
        },
        modal: {
          type: Boolean,
          default: true
        },
        lockScroll: {
          type: Boolean,
          default: true
        },
        showClose: {
          type: Boolean,
          default: true
        },
        closeOnClickModal: {
          type: Boolean,
          default: true
        },
        closeOnPressEscape: {
          type: Boolean,
          default: true
        },
        closeOnHashChange: {
          type: Boolean,
          default: true
        },
        center: Boolean,
        draggable: Boolean,
        roundButton: {
          default: false,
          type: Boolean
        },
        container: {
          type: String,
          default: "body"
        },
        boxType: {
          type: String,
          default: ""
        }
      },
      emits: ["vanish", "action"],
      setup(props, { emit: emit2 }) {
        const { t } = useLocale();
        const ns2 = useNamespace("message-box");
        const visible = ref(false);
        const { nextZIndex } = useZIndex();
        const state = reactive({
          autofocus: true,
          beforeClose: null,
          callback: null,
          cancelButtonText: "",
          cancelButtonClass: "",
          confirmButtonText: "",
          confirmButtonClass: "",
          customClass: "",
          customStyle: {},
          dangerouslyUseHTMLString: false,
          distinguishCancelAndClose: false,
          icon: "",
          inputPattern: null,
          inputPlaceholder: "",
          inputType: "text",
          inputValue: null,
          inputValidator: null,
          inputErrorMessage: "",
          message: null,
          modalFade: true,
          modalClass: "",
          showCancelButton: false,
          showConfirmButton: true,
          type: "",
          title: void 0,
          showInput: false,
          action: "",
          confirmButtonLoading: false,
          cancelButtonLoading: false,
          confirmButtonDisabled: false,
          editorErrorMessage: "",
          validateError: false,
          zIndex: nextZIndex()
        });
        const typeClass = computed(() => {
          const type2 = state.type;
          return { [ns2.bm("icon", type2)]: type2 && TypeComponentsMap[type2] };
        });
        const contentId = useId();
        const inputId = useId();
        const btnSize = useSize(computed(() => props.buttonSize), { prop: true, form: true, formItem: true });
        const iconComponent = computed(() => state.icon || TypeComponentsMap[state.type] || "");
        const hasMessage = computed(() => !!state.message);
        const rootRef = ref();
        const headerRef = ref();
        const focusStartRef = ref();
        const inputRef = ref();
        const confirmRef = ref();
        const confirmButtonClasses = computed(() => state.confirmButtonClass);
        watch(() => state.inputValue, async (val) => {
          await nextTick$1();
          if (props.boxType === "prompt" && val !== null) {
            validate();
          }
        }, { immediate: true });
        watch(() => visible.value, (val) => {
          var _a2, _b;
          if (val) {
            if (props.boxType !== "prompt") {
              if (state.autofocus) {
                focusStartRef.value = (_b = (_a2 = confirmRef.value) == null ? void 0 : _a2.$el) != null ? _b : rootRef.value;
              } else {
                focusStartRef.value = rootRef.value;
              }
            }
            state.zIndex = nextZIndex();
          }
          if (props.boxType !== "prompt")
            return;
          if (val) {
            nextTick$1().then(() => {
              var _a22;
              if (inputRef.value && inputRef.value.$el) {
                if (state.autofocus) {
                  focusStartRef.value = (_a22 = getInputElement()) != null ? _a22 : rootRef.value;
                } else {
                  focusStartRef.value = rootRef.value;
                }
              }
            });
          } else {
            state.editorErrorMessage = "";
            state.validateError = false;
          }
        });
        const draggable2 = computed(() => props.draggable);
        useDraggable(rootRef, headerRef, draggable2);
        onMounted(async () => {
          await nextTick$1();
          if (props.closeOnHashChange) {
            window.addEventListener("hashchange", doClose);
          }
        });
        onBeforeUnmount(() => {
          if (props.closeOnHashChange) {
            window.removeEventListener("hashchange", doClose);
          }
        });
        function doClose() {
          if (!visible.value)
            return;
          visible.value = false;
          nextTick$1(() => {
            if (state.action)
              emit2("action", state.action);
          });
        }
        const handleWrapperClick = () => {
          if (props.closeOnClickModal) {
            handleAction(state.distinguishCancelAndClose ? "close" : "cancel");
          }
        };
        const overlayEvent = useSameTarget(handleWrapperClick);
        const handleInputEnter = (e2) => {
          if (state.inputType !== "textarea") {
            e2.preventDefault();
            return handleAction("confirm");
          }
        };
        const handleAction = (action) => {
          var _a2;
          if (props.boxType === "prompt" && action === "confirm" && !validate()) {
            return;
          }
          state.action = action;
          if (state.beforeClose) {
            (_a2 = state.beforeClose) == null ? void 0 : _a2.call(state, action, state, doClose);
          } else {
            doClose();
          }
        };
        const validate = () => {
          if (props.boxType === "prompt") {
            const inputPattern = state.inputPattern;
            if (inputPattern && !inputPattern.test(state.inputValue || "")) {
              state.editorErrorMessage = state.inputErrorMessage || t("el.messagebox.error");
              state.validateError = true;
              return false;
            }
            const inputValidator = state.inputValidator;
            if (typeof inputValidator === "function") {
              const validateResult = inputValidator(state.inputValue);
              if (validateResult === false) {
                state.editorErrorMessage = state.inputErrorMessage || t("el.messagebox.error");
                state.validateError = true;
                return false;
              }
              if (typeof validateResult === "string") {
                state.editorErrorMessage = validateResult;
                state.validateError = true;
                return false;
              }
            }
          }
          state.editorErrorMessage = "";
          state.validateError = false;
          return true;
        };
        const getInputElement = () => {
          const inputRefs = inputRef.value.$refs;
          return inputRefs.input || inputRefs.textarea;
        };
        const handleClose = () => {
          handleAction("close");
        };
        const onCloseRequested = () => {
          if (props.closeOnPressEscape) {
            handleClose();
          }
        };
        if (props.lockScroll) {
          useLockscreen(visible);
        }
        useRestoreActive(visible);
        return {
          ...toRefs(state),
          ns: ns2,
          overlayEvent,
          visible,
          hasMessage,
          typeClass,
          contentId,
          inputId,
          btnSize,
          iconComponent,
          confirmButtonClasses,
          rootRef,
          focusStartRef,
          headerRef,
          inputRef,
          confirmRef,
          doClose,
          handleClose,
          onCloseRequested,
          handleWrapperClick,
          handleInputEnter,
          handleAction,
          t
        };
      }
    });
    const _hoisted_1$8 = ["aria-label", "aria-describedby"];
    const _hoisted_2$4 = ["aria-label"];
    const _hoisted_3$1 = ["id"];
    function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_el_icon = resolveComponent("el-icon");
      const _component_close = resolveComponent("close");
      const _component_el_input = resolveComponent("el-input");
      const _component_el_button = resolveComponent("el-button");
      const _component_el_focus_trap = resolveComponent("el-focus-trap");
      const _component_el_overlay = resolveComponent("el-overlay");
      return openBlock(), createBlock(Transition, {
        name: "fade-in-linear",
        onAfterLeave: _cache[11] || (_cache[11] = ($event) => _ctx.$emit("vanish")),
        persisted: ""
      }, {
        default: withCtx(() => [
          withDirectives(createVNode(_component_el_overlay, {
            "z-index": _ctx.zIndex,
            "overlay-class": [_ctx.ns.is("message-box"), _ctx.modalClass],
            mask: _ctx.modal
          }, {
            default: withCtx(() => [
              createBaseVNode("div", {
                role: "dialog",
                "aria-label": _ctx.title,
                "aria-modal": "true",
                "aria-describedby": !_ctx.showInput ? _ctx.contentId : void 0,
                class: normalizeClass(`${_ctx.ns.namespace.value}-overlay-message-box`),
                onClick: _cache[8] || (_cache[8] = (...args) => _ctx.overlayEvent.onClick && _ctx.overlayEvent.onClick(...args)),
                onMousedown: _cache[9] || (_cache[9] = (...args) => _ctx.overlayEvent.onMousedown && _ctx.overlayEvent.onMousedown(...args)),
                onMouseup: _cache[10] || (_cache[10] = (...args) => _ctx.overlayEvent.onMouseup && _ctx.overlayEvent.onMouseup(...args))
              }, [
                createVNode(_component_el_focus_trap, {
                  loop: "",
                  trapped: _ctx.visible,
                  "focus-trap-el": _ctx.rootRef,
                  "focus-start-el": _ctx.focusStartRef,
                  onReleaseRequested: _ctx.onCloseRequested
                }, {
                  default: withCtx(() => [
                    createBaseVNode("div", {
                      ref: "rootRef",
                      class: normalizeClass([
                        _ctx.ns.b(),
                        _ctx.customClass,
                        _ctx.ns.is("draggable", _ctx.draggable),
                        { [_ctx.ns.m("center")]: _ctx.center }
                      ]),
                      style: normalizeStyle(_ctx.customStyle),
                      tabindex: "-1",
                      onClick: _cache[7] || (_cache[7] = withModifiers(() => {
                      }, ["stop"]))
                    }, [
                      _ctx.title !== null && _ctx.title !== void 0 ? (openBlock(), createElementBlock("div", {
                        key: 0,
                        ref: "headerRef",
                        class: normalizeClass(_ctx.ns.e("header"))
                      }, [
                        createBaseVNode("div", {
                          class: normalizeClass(_ctx.ns.e("title"))
                        }, [
                          _ctx.iconComponent && _ctx.center ? (openBlock(), createBlock(_component_el_icon, {
                            key: 0,
                            class: normalizeClass([_ctx.ns.e("status"), _ctx.typeClass])
                          }, {
                            default: withCtx(() => [
                              (openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent)))
                            ]),
                            _: 1
                          }, 8, ["class"])) : createCommentVNode("v-if", true),
                          createBaseVNode("span", null, toDisplayString$1(_ctx.title), 1)
                        ], 2),
                        _ctx.showClose ? (openBlock(), createElementBlock("button", {
                          key: 0,
                          type: "button",
                          class: normalizeClass(_ctx.ns.e("headerbtn")),
                          "aria-label": _ctx.t("el.messagebox.close"),
                          onClick: _cache[0] || (_cache[0] = ($event) => _ctx.handleAction(_ctx.distinguishCancelAndClose ? "close" : "cancel")),
                          onKeydown: _cache[1] || (_cache[1] = withKeys(withModifiers(($event) => _ctx.handleAction(_ctx.distinguishCancelAndClose ? "close" : "cancel"), ["prevent"]), ["enter"]))
                        }, [
                          createVNode(_component_el_icon, {
                            class: normalizeClass(_ctx.ns.e("close"))
                          }, {
                            default: withCtx(() => [
                              createVNode(_component_close)
                            ]),
                            _: 1
                          }, 8, ["class"])
                        ], 42, _hoisted_2$4)) : createCommentVNode("v-if", true)
                      ], 2)) : createCommentVNode("v-if", true),
                      createBaseVNode("div", {
                        id: _ctx.contentId,
                        class: normalizeClass(_ctx.ns.e("content"))
                      }, [
                        createBaseVNode("div", {
                          class: normalizeClass(_ctx.ns.e("container"))
                        }, [
                          _ctx.iconComponent && !_ctx.center && _ctx.hasMessage ? (openBlock(), createBlock(_component_el_icon, {
                            key: 0,
                            class: normalizeClass([_ctx.ns.e("status"), _ctx.typeClass])
                          }, {
                            default: withCtx(() => [
                              (openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent)))
                            ]),
                            _: 1
                          }, 8, ["class"])) : createCommentVNode("v-if", true),
                          _ctx.hasMessage ? (openBlock(), createElementBlock("div", {
                            key: 1,
                            class: normalizeClass(_ctx.ns.e("message"))
                          }, [
                            renderSlot(_ctx.$slots, "default", {}, () => [
                              !_ctx.dangerouslyUseHTMLString ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.showInput ? "label" : "p"), {
                                key: 0,
                                for: _ctx.showInput ? _ctx.inputId : void 0
                              }, {
                                default: withCtx(() => [
                                  createTextVNode(toDisplayString$1(!_ctx.dangerouslyUseHTMLString ? _ctx.message : ""), 1)
                                ]),
                                _: 1
                              }, 8, ["for"])) : (openBlock(), createBlock(resolveDynamicComponent(_ctx.showInput ? "label" : "p"), {
                                key: 1,
                                for: _ctx.showInput ? _ctx.inputId : void 0,
                                innerHTML: _ctx.message
                              }, null, 8, ["for", "innerHTML"]))
                            ])
                          ], 2)) : createCommentVNode("v-if", true)
                        ], 2),
                        withDirectives(createBaseVNode("div", {
                          class: normalizeClass(_ctx.ns.e("input"))
                        }, [
                          createVNode(_component_el_input, {
                            id: _ctx.inputId,
                            ref: "inputRef",
                            modelValue: _ctx.inputValue,
                            "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => _ctx.inputValue = $event),
                            type: _ctx.inputType,
                            placeholder: _ctx.inputPlaceholder,
                            "aria-invalid": _ctx.validateError,
                            class: normalizeClass({ invalid: _ctx.validateError }),
                            onKeydown: withKeys(_ctx.handleInputEnter, ["enter"])
                          }, null, 8, ["id", "modelValue", "type", "placeholder", "aria-invalid", "class", "onKeydown"]),
                          createBaseVNode("div", {
                            class: normalizeClass(_ctx.ns.e("errormsg")),
                            style: normalizeStyle({
                              visibility: !!_ctx.editorErrorMessage ? "visible" : "hidden"
                            })
                          }, toDisplayString$1(_ctx.editorErrorMessage), 7)
                        ], 2), [
                          [vShow, _ctx.showInput]
                        ])
                      ], 10, _hoisted_3$1),
                      createBaseVNode("div", {
                        class: normalizeClass(_ctx.ns.e("btns"))
                      }, [
                        _ctx.showCancelButton ? (openBlock(), createBlock(_component_el_button, {
                          key: 0,
                          loading: _ctx.cancelButtonLoading,
                          class: normalizeClass([_ctx.cancelButtonClass]),
                          round: _ctx.roundButton,
                          size: _ctx.btnSize,
                          onClick: _cache[3] || (_cache[3] = ($event) => _ctx.handleAction("cancel")),
                          onKeydown: _cache[4] || (_cache[4] = withKeys(withModifiers(($event) => _ctx.handleAction("cancel"), ["prevent"]), ["enter"]))
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString$1(_ctx.cancelButtonText || _ctx.t("el.messagebox.cancel")), 1)
                          ]),
                          _: 1
                        }, 8, ["loading", "class", "round", "size"])) : createCommentVNode("v-if", true),
                        withDirectives(createVNode(_component_el_button, {
                          ref: "confirmRef",
                          type: "primary",
                          loading: _ctx.confirmButtonLoading,
                          class: normalizeClass([_ctx.confirmButtonClasses]),
                          round: _ctx.roundButton,
                          disabled: _ctx.confirmButtonDisabled,
                          size: _ctx.btnSize,
                          onClick: _cache[5] || (_cache[5] = ($event) => _ctx.handleAction("confirm")),
                          onKeydown: _cache[6] || (_cache[6] = withKeys(withModifiers(($event) => _ctx.handleAction("confirm"), ["prevent"]), ["enter"]))
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString$1(_ctx.confirmButtonText || _ctx.t("el.messagebox.confirm")), 1)
                          ]),
                          _: 1
                        }, 8, ["loading", "class", "round", "disabled", "size"]), [
                          [vShow, _ctx.showConfirmButton]
                        ])
                      ], 2)
                    ], 6)
                  ]),
                  _: 3
                }, 8, ["trapped", "focus-trap-el", "focus-start-el", "onReleaseRequested"])
              ], 42, _hoisted_1$8)
            ]),
            _: 3
          }, 8, ["z-index", "overlay-class", "mask"]), [
            [vShow, _ctx.visible]
          ])
        ]),
        _: 3
      });
    }
    var MessageBoxConstructor = /* @__PURE__ */ _export_sfc$1(_sfc_main$s, [["render", _sfc_render$1], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/message-box/src/index.vue"]]);
    const messageInstance = /* @__PURE__ */ new Map();
    const initInstance = (props, container, appContext = null) => {
      const vnode = h$2(MessageBoxConstructor, props);
      vnode.appContext = appContext;
      render$1(vnode, container);
      document.body.appendChild(container.firstElementChild);
      return vnode.component;
    };
    const genContainer = () => {
      return document.createElement("div");
    };
    const showMessage = (options, appContext) => {
      const container = genContainer();
      options.onVanish = () => {
        render$1(null, container);
        messageInstance.delete(vm);
      };
      options.onAction = (action) => {
        const currentMsg = messageInstance.get(vm);
        let resolve2;
        if (options.showInput) {
          resolve2 = { value: vm.inputValue, action };
        } else {
          resolve2 = action;
        }
        if (options.callback) {
          options.callback(resolve2, instance.proxy);
        } else {
          if (action === "cancel" || action === "close") {
            if (options.distinguishCancelAndClose && action !== "cancel") {
              currentMsg.reject("close");
            } else {
              currentMsg.reject("cancel");
            }
          } else {
            currentMsg.resolve(resolve2);
          }
        }
      };
      const instance = initInstance(options, container, appContext);
      const vm = instance.proxy;
      for (const prop in options) {
        if (hasOwn$2(options, prop) && !hasOwn$2(vm.$props, prop)) {
          vm[prop] = options[prop];
        }
      }
      watch(() => vm.message, (newVal, oldVal) => {
        if (isVNode(newVal)) {
          instance.slots.default = () => [newVal];
        } else if (isVNode(oldVal) && !isVNode(newVal)) {
          delete instance.slots.default;
        }
      }, {
        immediate: true
      });
      vm.visible = true;
      return vm;
    };
    function MessageBox(options, appContext = null) {
      if (!isClient)
        return Promise.reject();
      let callback;
      if (isString$3(options) || isVNode(options)) {
        options = {
          message: options
        };
      } else {
        callback = options.callback;
      }
      return new Promise((resolve2, reject) => {
        const vm = showMessage(options, appContext != null ? appContext : MessageBox._context);
        messageInstance.set(vm, {
          options,
          callback,
          resolve: resolve2,
          reject
        });
      });
    }
    const MESSAGE_BOX_VARIANTS = ["alert", "confirm", "prompt"];
    const MESSAGE_BOX_DEFAULT_OPTS = {
      alert: { closeOnPressEscape: false, closeOnClickModal: false },
      confirm: { showCancelButton: true },
      prompt: { showCancelButton: true, showInput: true }
    };
    MESSAGE_BOX_VARIANTS.forEach((boxType) => {
      MessageBox[boxType] = messageBoxFactory(boxType);
    });
    function messageBoxFactory(boxType) {
      return (message2, titleOrOpts, options, appContext) => {
        let title2;
        if (isObject$7(titleOrOpts)) {
          options = titleOrOpts;
          title2 = "";
        } else if (isUndefined$1(titleOrOpts)) {
          title2 = "";
        } else {
          title2 = titleOrOpts;
        }
        return MessageBox(Object.assign({
          title: title2,
          message: message2,
          type: "",
          ...MESSAGE_BOX_DEFAULT_OPTS[boxType]
        }, options, {
          boxType
        }), appContext);
      };
    }
    MessageBox.close = () => {
      messageInstance.forEach((_2, vm) => {
        vm.doClose();
      });
      messageInstance.clear();
    };
    MessageBox._context = null;
    const _MessageBox = MessageBox;
    _MessageBox.install = (app2) => {
      _MessageBox._context = app2._context;
      app2.config.globalProperties.$msgbox = _MessageBox;
      app2.config.globalProperties.$messageBox = _MessageBox;
      app2.config.globalProperties.$alert = _MessageBox.alert;
      app2.config.globalProperties.$confirm = _MessageBox.confirm;
      app2.config.globalProperties.$prompt = _MessageBox.prompt;
    };
    const ElMessageBox = _MessageBox;
    const notificationTypes = [
      "success",
      "info",
      "warning",
      "error"
    ];
    const notificationProps = buildProps({
      customClass: {
        type: String,
        default: ""
      },
      dangerouslyUseHTMLString: {
        type: Boolean,
        default: false
      },
      duration: {
        type: Number,
        default: 4500
      },
      icon: {
        type: definePropType([String, Object]),
        default: ""
      },
      id: {
        type: String,
        default: ""
      },
      message: {
        type: definePropType([String, Object]),
        default: ""
      },
      offset: {
        type: Number,
        default: 0
      },
      onClick: {
        type: definePropType(Function),
        default: () => void 0
      },
      onClose: {
        type: definePropType(Function),
        required: true
      },
      position: {
        type: String,
        values: ["top-right", "top-left", "bottom-right", "bottom-left"],
        default: "top-right"
      },
      showClose: {
        type: Boolean,
        default: true
      },
      title: {
        type: String,
        default: ""
      },
      type: {
        type: String,
        values: [...notificationTypes, ""],
        default: ""
      },
      zIndex: {
        type: Number,
        default: 0
      }
    });
    const notificationEmits = {
      destroy: () => true
    };
    const _sfc_main$r = defineComponent({
      name: "ElNotification",
      components: {
        ElIcon,
        ...TypeComponents
      },
      props: notificationProps,
      emits: notificationEmits,
      setup(props) {
        const ns2 = useNamespace("notification");
        const visible = ref(false);
        let timer = void 0;
        const typeClass = computed(() => {
          const type2 = props.type;
          return type2 && TypeComponentsMap[props.type] ? ns2.m(type2) : "";
        });
        const iconComponent = computed(() => {
          return TypeComponentsMap[props.type] || props.icon || "";
        });
        const horizontalClass = computed(() => props.position.endsWith("right") ? "right" : "left");
        const verticalProperty = computed(() => props.position.startsWith("top") ? "top" : "bottom");
        const positionStyle = computed(() => {
          return {
            [verticalProperty.value]: `${props.offset}px`,
            zIndex: props.zIndex
          };
        });
        function startTimer() {
          if (props.duration > 0) {
            ({ stop: timer } = useTimeoutFn(() => {
              if (visible.value)
                close2();
            }, props.duration));
          }
        }
        function clearTimer() {
          timer == null ? void 0 : timer();
        }
        function close2() {
          visible.value = false;
        }
        function onKeydown({ code }) {
          if (code === EVENT_CODE.delete || code === EVENT_CODE.backspace) {
            clearTimer();
          } else if (code === EVENT_CODE.esc) {
            if (visible.value) {
              close2();
            }
          } else {
            startTimer();
          }
        }
        onMounted(() => {
          startTimer();
          visible.value = true;
        });
        useEventListener(document, "keydown", onKeydown);
        return {
          ns: ns2,
          horizontalClass,
          typeClass,
          iconComponent,
          positionStyle,
          visible,
          close: close2,
          clearTimer,
          startTimer
        };
      }
    });
    const _hoisted_1$7 = ["id"];
    const _hoisted_2$3 = ["textContent"];
    const _hoisted_3 = { key: 0 };
    const _hoisted_4 = ["innerHTML"];
    function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
      const _component_el_icon = resolveComponent("el-icon");
      const _component_close = resolveComponent("close");
      return openBlock(), createBlock(Transition, {
        name: _ctx.ns.b("fade"),
        onBeforeLeave: _ctx.onClose,
        onAfterLeave: _cache[3] || (_cache[3] = ($event) => _ctx.$emit("destroy")),
        persisted: ""
      }, {
        default: withCtx(() => [
          withDirectives(createBaseVNode("div", {
            id: _ctx.id,
            class: normalizeClass([_ctx.ns.b(), _ctx.customClass, _ctx.horizontalClass]),
            style: normalizeStyle(_ctx.positionStyle),
            role: "alert",
            onMouseenter: _cache[0] || (_cache[0] = (...args) => _ctx.clearTimer && _ctx.clearTimer(...args)),
            onMouseleave: _cache[1] || (_cache[1] = (...args) => _ctx.startTimer && _ctx.startTimer(...args)),
            onClick: _cache[2] || (_cache[2] = (...args) => _ctx.onClick && _ctx.onClick(...args))
          }, [
            _ctx.iconComponent ? (openBlock(), createBlock(_component_el_icon, {
              key: 0,
              class: normalizeClass([_ctx.ns.e("icon"), _ctx.typeClass])
            }, {
              default: withCtx(() => [
                (openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent)))
              ]),
              _: 1
            }, 8, ["class"])) : createCommentVNode("v-if", true),
            createBaseVNode("div", {
              class: normalizeClass(_ctx.ns.e("group"))
            }, [
              createBaseVNode("h2", {
                class: normalizeClass(_ctx.ns.e("title")),
                textContent: toDisplayString$1(_ctx.title)
              }, null, 10, _hoisted_2$3),
              withDirectives(createBaseVNode("div", {
                class: normalizeClass(_ctx.ns.e("content")),
                style: normalizeStyle(!!_ctx.title ? void 0 : { margin: 0 })
              }, [
                renderSlot(_ctx.$slots, "default", {}, () => [
                  !_ctx.dangerouslyUseHTMLString ? (openBlock(), createElementBlock("p", _hoisted_3, toDisplayString$1(_ctx.message), 1)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                    createCommentVNode(" Caution here, message could've been compromized, nerver use user's input as message "),
                    createCommentVNode(" eslint-disable-next-line "),
                    createBaseVNode("p", { innerHTML: _ctx.message }, null, 8, _hoisted_4)
                  ], 2112))
                ])
              ], 6), [
                [vShow, _ctx.message]
              ]),
              _ctx.showClose ? (openBlock(), createBlock(_component_el_icon, {
                key: 0,
                class: normalizeClass(_ctx.ns.e("closeBtn")),
                onClick: withModifiers(_ctx.close, ["stop"])
              }, {
                default: withCtx(() => [
                  createVNode(_component_close)
                ]),
                _: 1
              }, 8, ["class", "onClick"])) : createCommentVNode("v-if", true)
            ], 2)
          ], 46, _hoisted_1$7), [
            [vShow, _ctx.visible]
          ])
        ]),
        _: 3
      }, 8, ["name", "onBeforeLeave"]);
    }
    var NotificationConstructor = /* @__PURE__ */ _export_sfc$1(_sfc_main$r, [["render", _sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/notification/src/notification.vue"]]);
    const notifications = {
      "top-left": [],
      "top-right": [],
      "bottom-left": [],
      "bottom-right": []
    };
    const GAP_SIZE = 16;
    let seed = 1;
    const notify = function(options = {}, context = null) {
      if (!isClient)
        return { close: () => void 0 };
      if (typeof options === "string" || isVNode(options)) {
        options = { message: options };
      }
      const position = options.position || "top-right";
      let verticalOffset = options.offset || 0;
      notifications[position].forEach(({ vm: vm2 }) => {
        var _a2;
        verticalOffset += (((_a2 = vm2.el) == null ? void 0 : _a2.offsetHeight) || 0) + GAP_SIZE;
      });
      verticalOffset += GAP_SIZE;
      const { nextZIndex } = useZIndex();
      const id2 = `notification_${seed++}`;
      const userOnClose = options.onClose;
      const props = {
        zIndex: nextZIndex(),
        offset: verticalOffset,
        ...options,
        id: id2,
        onClose: () => {
          close(id2, position, userOnClose);
        }
      };
      let appendTo = document.body;
      if (isElement$1(options.appendTo)) {
        appendTo = options.appendTo;
      } else if (isString$3(options.appendTo)) {
        appendTo = document.querySelector(options.appendTo);
      }
      if (!isElement$1(appendTo)) {
        appendTo = document.body;
      }
      const container = document.createElement("div");
      const vm = createVNode(NotificationConstructor, props, isVNode(props.message) ? {
        default: () => props.message
      } : null);
      vm.appContext = context != null ? context : notify._context;
      vm.props.onDestroy = () => {
        render$1(null, container);
      };
      render$1(vm, container);
      notifications[position].push({ vm });
      appendTo.appendChild(container.firstElementChild);
      return {
        close: () => {
          vm.component.proxy.visible = false;
        }
      };
    };
    notificationTypes.forEach((type2) => {
      notify[type2] = (options = {}) => {
        if (typeof options === "string" || isVNode(options)) {
          options = {
            message: options
          };
        }
        return notify({
          ...options,
          type: type2
        });
      };
    });
    function close(id2, position, userOnClose) {
      const orientedNotifications = notifications[position];
      const idx = orientedNotifications.findIndex(({ vm: vm2 }) => {
        var _a2;
        return ((_a2 = vm2.component) == null ? void 0 : _a2.props.id) === id2;
      });
      if (idx === -1)
        return;
      const { vm } = orientedNotifications[idx];
      if (!vm)
        return;
      userOnClose == null ? void 0 : userOnClose(vm);
      const removedHeight = vm.el.offsetHeight;
      const verticalPos = position.split("-")[0];
      orientedNotifications.splice(idx, 1);
      const len = orientedNotifications.length;
      if (len < 1)
        return;
      for (let i2 = idx; i2 < len; i2++) {
        const { el, component: component2 } = orientedNotifications[i2].vm;
        const pos = Number.parseInt(el.style[verticalPos], 10) - removedHeight - GAP_SIZE;
        component2.props.offset = pos;
      }
    }
    function closeAll() {
      for (const orientedNotifications of Object.values(notifications)) {
        orientedNotifications.forEach(({ vm }) => {
          vm.component.proxy.visible = false;
        });
      }
    }
    notify.closeAll = closeAll;
    notify._context = null;
    const ElNotification = withInstallFunction(notify, "$notify");
    var Plugins = [
      ElInfiniteScroll,
      ElLoading,
      ElMessage,
      ElMessageBox,
      ElNotification,
      ElPopoverDirective
    ];
    var installer = makeInstaller([...Components, ...Plugins]);
    var PageType = /* @__PURE__ */ ((PageType2) => {
      PageType2[PageType2["Markdown"] = 0] = "Markdown";
      PageType2[PageType2["Html"] = 1] = "Html";
      return PageType2;
    })(PageType || {});
    class MetaweblogCfg {
      constructor(home2, apiUrl, username, password) {
        __publicField(this, "apiStatus");
        __publicField(this, "blogName");
        __publicField(this, "posidKey");
        __publicField(this, "previewUrl");
        __publicField(this, "pageType");
        this.home = home2;
        this.apiUrl = apiUrl;
        this.username = username;
        this.password = password;
        this.home = home2;
        this.apiUrl = apiUrl;
        this.username = username;
        this.password = password;
        this.apiStatus = false;
        this.blogName = "";
        this.posidKey = "";
        this.previewUrl = "";
        this.pageType = PageType.Markdown;
      }
    }
    const config = {
      baseUrl: getEnv("VITE_SIYUAN_API_URL"),
      token: getEnv("VITE_SIYUAN_CONFIG_TOKEN")
    };
    async function request$2(url2, data, method2, useToken) {
      let resData = null;
      if (config.baseUrl != "") {
        url2 = config.baseUrl + url2;
      }
      let m2 = "POST";
      if (method2) {
        m2 = method2;
      }
      let fetchOps = {
        body: JSON.stringify(data),
        method: m2
      };
      if (useToken != false) {
        Object.assign(fetchOps, {
          headers: {
            Authorization: `Token ${config.token}`
          }
        });
      }
      logUtil.logInfo("\u5411\u601D\u6E90\u8BF7\u6C42\u6570\u636E\uFF0Curl=>", url2);
      logUtil.logInfo("\u5411\u601D\u6E90\u8BF7\u6C42\u6570\u636E\uFF0CfetchOps=>", fetchOps);
      await fetch(url2, fetchOps).then(function(response) {
        resData = response.json();
        logUtil.logInfo("\u5411\u601D\u6E90\u8BF7\u6C42\u6570\u636E\uFF0CresData=>", resData);
      });
      return resData;
    }
    async function parseBody(response) {
      let r = await response;
      return r.code === 0 ? r.data : null;
    }
    async function sql(sql2) {
      let sqldata = {
        stmt: sql2
      };
      let url2 = "/api/query/sql";
      return parseBody(request$2(url2, sqldata));
    }
    async function getRootBlocks(page, pagesize, keyword) {
      let stmt = `SELECT b.content, tmp.root_id
                FROM (SELECT DISTINCT root_id
                      FROM blocks
                      WHERE 1 = 1
                        AND content LIKE '%${keyword}%'
                      ORDER BY created DESC LIMIT ${page}, ${pagesize}) tmp,
                     blocks b
                WHERE tmp.root_id = b.root_id
                  AND b.parent_id = ''
                ORDER BY b.created DESC`;
      let data = await sql(stmt);
      return data;
    }
    async function getBlockByID(blockId) {
      let stmt = `select *
                from blocks
                where id = '${blockId}'`;
      let data = await sql(stmt);
      logUtil.logInfo(data);
      return data[0];
    }
    async function getBlockBySlug(slug) {
      let stmt = `select root_id from attributes 
               where name='custom-slug' and value='${slug}' 
               limit 1`;
      let data = await sql(stmt);
      logUtil.logInfo(data);
      return data[0];
    }
    async function exportMdContent(docId) {
      let data = {
        id: docId
      };
      let url2 = "/api/export/exportMdContent";
      return parseBody(request$2(url2, data));
    }
    async function getBlockAttrs(blockId) {
      let data = {
        id: blockId
      };
      let url2 = "/api/attr/getBlockAttrs";
      return parseBody(request$2(url2, data));
    }
    async function setBlockAttrs(blockId, attrs) {
      let url2 = "/api/attr/setBlockAttrs";
      return parseBody(request$2(url2, {
        id: blockId,
        attrs
      }));
    }
    const POST_STATUS_PUBLISH = "publish";
    const POST_TYPE_DRAFT = "draft";
    const POST_TYPE_INHERIT = "inherit";
    const POST_STATUS_CONSTANTS = {
      POST_STATUS_PUBLISH,
      POST_TYPE_DRAFT,
      POST_TYPE_INHERIT
    };
    class Post {
      constructor() {
        __publicField(this, "postid");
        __publicField(this, "title");
        __publicField(this, "mt_keywords");
        __publicField(this, "link");
        __publicField(this, "permalink");
        __publicField(this, "shortDesc");
        __publicField(this, "description");
        __publicField(this, "mt_excerpt");
        __publicField(this, "wp_slug");
        __publicField(this, "dateCreated");
        __publicField(this, "categories");
        __publicField(this, "mt_text_more");
        __publicField(this, "post_status");
        __publicField(this, "wp_password");
        this.postid = "";
        this.title = "";
        this.mt_keywords = "";
        this.permalink = "";
        this.description = "";
        this.wp_slug = "";
        this.dateCreated = new Date();
        this.categories = [];
        this.post_status = POST_STATUS_CONSTANTS.POST_STATUS_PUBLISH;
        this.wp_password = "";
      }
    }
    class UserBlog {
      constructor() {
        __publicField(this, "blogid");
        __publicField(this, "url");
        __publicField(this, "blogName");
        __publicField(this, "isAdmin");
        __publicField(this, "xmlrpc");
        this.blogid = "";
        this.url = "";
        this.blogName = "";
      }
    }
    class SiYuanApiAdaptor {
      async getUsersBlogs() {
        let result = [];
        const userBlog = new UserBlog();
        userBlog.blogid = API_TYPE_CONSTANTS.API_TYPE_SIYUAN;
        userBlog.blogName = API_TYPE_CONSTANTS.API_TYPE_SIYUAN;
        userBlog.url = { "VITE_LOG_INFO_ENABLED": "false", "VITE_SIYUAN_API_URL": "http://127.0.0.1:6806", "VITE_SIYUAN_CONFIG_TOKEN": "", "VITE_OPT_PWD": "123456", "VITE_SIYUAN_DEV_PAGE_ID": "20220723100458-kqacgb2", "VITE_DEBUG_MODE": "false" }.SIYUAN_API_URL || "";
        result.push(userBlog);
        return result;
      }
      async getRecentPosts(numOfPosts, page, keyword) {
        let result = [];
        let pg = 0;
        if (page) {
          pg = page;
        }
        let k = keyword || "";
        const siyuanPosts = await getRootBlocks(pg, numOfPosts, k);
        for (let i2 = 0; i2 < siyuanPosts.length; i2++) {
          const siyuanPost = siyuanPosts[i2];
          const attrs = await getBlockAttrs(siyuanPost.root_id);
          const customSlug = attrs["custom-slug"] || "";
          let commonPost = new Post();
          commonPost.postid = siyuanPost.root_id;
          commonPost.title = siyuanPost.content;
          commonPost.permalink = customSlug == "" ? "/post/" + siyuanPost.root_id : "/post/" + customSlug + ".html";
          result.push(commonPost);
        }
        return Promise.resolve(result);
      }
      async getPost(postid, useSlug) {
        let pid = postid;
        if (useSlug) {
          const pidObj = await getBlockBySlug(postid);
          if (pidObj) {
            pid = pidObj.root_id;
          }
        }
        const siyuanPost = await getBlockByID(pid);
        if (!siyuanPost) {
          throw new Error("\u6587\u7AE0\u4E0D\u5B58\u5B58\u5728\uFF0Cpostid=>" + pid);
        }
        const attrs = await getBlockAttrs(pid);
        const md = await exportMdContent(pid);
        let isPublished = true;
        const publishStatus = attrs["custom-publish-status"] || "draft";
        if (publishStatus == "secret") {
          isPublished = false;
        }
        const postPassword = attrs["custom-post-password"] || "";
        const shortDesc = attrs["custom-desc"] || "";
        let html = render(md.content);
        html = removeWidgetTag(html);
        let commonPost = new Post();
        commonPost.postid = siyuanPost.root_id || "";
        commonPost.title = siyuanPost.content || "";
        commonPost.description = html || "";
        commonPost.shortDesc = shortDesc || "";
        commonPost.mt_keywords = attrs.tags || "";
        commonPost.post_status = isPublished ? POST_STATUS_CONSTANTS.POST_STATUS_PUBLISH : POST_STATUS_CONSTANTS.POST_TYPE_DRAFT;
        commonPost.wp_password = postPassword;
        return commonPost;
      }
      async editPost(postid, post, publish) {
        return Promise.resolve(false);
      }
      async newPost(post, publish) {
        return Promise.resolve("");
      }
      async deletePost(postid) {
        return Promise.resolve(false);
      }
    }
    async function getWidgetId() {
      if (!window.frameElement || !window.frameElement.parentElement || !window.frameElement.parentElement.parentElement) {
        logUtil.logWarn("\u6B63\u5728\u5DF2\u975E\u6302\u4EF6\u6A21\u5F0F\u8FD0\u884C\uFF0C\u90E8\u5206\u529F\u80FD\u5C06\u4E0D\u53EF\u7528\uFF0C\u8BF7\u77E5\u6089");
        return {
          isInSiyuan: false,
          widgetId: ""
        };
      }
      let self2 = window.frameElement.parentElement.parentElement;
      if (!self2) {
        logUtil.logWarn("\u6B63\u5728\u5DF2\u975E\u6302\u4EF6\u6A21\u5F0F\u8FD0\u884C\uFF0C\u90E8\u5206\u529F\u80FD\u5C06\u4E0D\u53EF\u7528\uFF0C\u8BF7\u77E5\u6089");
        return {
          isInSiyuan: false,
          widgetId: ""
        };
      }
      const widgetId = self2.getAttribute("data-node-id");
      if (!widgetId) {
        logUtil.logWarn("\u6B63\u5728\u5DF2\u975E\u6302\u4EF6\u6A21\u5F0F\u8FD0\u884C\uFF0C\u90E8\u5206\u529F\u80FD\u5C06\u4E0D\u53EF\u7528\uFF0C\u8BF7\u77E5\u6089");
        return {
          isInSiyuan: false,
          widgetId: ""
        };
      }
      logUtil.logWarn("\u606D\u559C\u4F60\uFF0C\u6B63\u5728\u5DF2\u6302\u4EF6\u6A21\u5F0F\u8FD0\u884C");
      return {
        isInSiyuan: true,
        widgetId
      };
    }
    async function getWidgetPage(force) {
      const widgetResult = await getWidgetId();
      if (!widgetResult.isInSiyuan) {
        return;
      }
      const widgetId = widgetResult.widgetId;
      logUtil.logInfo("\u83B7\u53D6\u6302\u4EF6\u7684widgetId=>", widgetId);
      const pageObj = getJSONConf(widgetId);
      if (!force && pageObj) {
        logUtil.logInfo("\u83B7\u53D6\u672C\u5730\u7F13\u5B58\u7684\u601D\u6E90\u7B14\u8BB0\u9875\u9762\u4FE1\u606F\uFF08\u4E0D\u662F\u5B9E\u65F6\u7684\uFF09=>", pageObj);
        return pageObj;
      }
      const page = await getBlockByID(widgetId);
      if (page) {
        setJSONConf(widgetId, page);
        logUtil.logInfo("\u8C03\u7528API\u8BBE\u7F6E\u67E5\u8BE2\u601D\u6E90\u9875\u9762\u4FE1\u606F\u5E76\u66F4\u65B0\u672C\u5730\u7F13\u5B58", page);
      }
      return page;
    }
    async function getSiyuanPageId(force) {
      const page = await getWidgetPage(force);
      if (!page) {
        return;
      }
      const pageId = page.root_id;
      logUtil.logInfo("\u83B7\u53D6\u601D\u6E90\u7B14\u8BB0\u9875\u9762ID=>", pageId);
      return pageId;
    }
    async function getPageId(force, pageId) {
      let syPageId = await getSiyuanPageId(force);
      if (!syPageId) {
        if (pageId) {
          syPageId = pageId;
        }
        if (!pageId) {
          const testPageId = getEnv("VITE_SIYUAN_DEV_PAGE_ID");
          if (!testPageId && inBrowser()) {
            const curl = window.location.href;
            const urlIdx = curl.lastIndexOf("=");
            const qPageId = curl.substring(urlIdx + 1, curl.length);
            if (qPageId != "") {
              syPageId = qPageId;
            }
          } else {
            syPageId = testPageId;
          }
        }
      }
      logUtil.logWarn("\u5F53\u524D\u9875\u9762ID\u662F=>", syPageId);
      return syPageId;
    }
    async function getPage(pageId) {
      return await getBlockByID(pageId);
    }
    async function getPageAttrs(pageId) {
      return await getBlockAttrs(pageId);
    }
    async function setPageAttrs(pageId, attrs) {
      return await setBlockAttrs(pageId, attrs);
    }
    async function getPageMd(pageId) {
      return await exportMdContent(pageId);
    }
    var xmlrpc$1 = {};
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var inited = false;
    function init() {
      inited = true;
      var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      for (var i2 = 0, len = code.length; i2 < len; ++i2) {
        lookup[i2] = code[i2];
        revLookup[code.charCodeAt(i2)] = i2;
      }
      revLookup["-".charCodeAt(0)] = 62;
      revLookup["_".charCodeAt(0)] = 63;
    }
    function toByteArray(b64) {
      if (!inited) {
        init();
      }
      var i2, j2, l2, tmp, placeHolders, arr;
      var len = b64.length;
      if (len % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }
      placeHolders = b64[len - 2] === "=" ? 2 : b64[len - 1] === "=" ? 1 : 0;
      arr = new Arr(len * 3 / 4 - placeHolders);
      l2 = placeHolders > 0 ? len - 4 : len;
      var L = 0;
      for (i2 = 0, j2 = 0; i2 < l2; i2 += 4, j2 += 3) {
        tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
        arr[L++] = tmp >> 16 & 255;
        arr[L++] = tmp >> 8 & 255;
        arr[L++] = tmp & 255;
      }
      if (placeHolders === 2) {
        tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
        arr[L++] = tmp & 255;
      } else if (placeHolders === 1) {
        tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
        arr[L++] = tmp >> 8 & 255;
        arr[L++] = tmp & 255;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
    }
    function encodeChunk(uint8, start, end2) {
      var tmp;
      var output = [];
      for (var i2 = start; i2 < end2; i2 += 3) {
        tmp = (uint8[i2] << 16) + (uint8[i2 + 1] << 8) + uint8[i2 + 2];
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      if (!inited) {
        init();
      }
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3;
      var output = "";
      var parts = [];
      var maxChunkLength = 16383;
      for (var i2 = 0, len2 = len - extraBytes; i2 < len2; i2 += maxChunkLength) {
        parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len2 ? len2 : i2 + maxChunkLength));
      }
      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        output += lookup[tmp >> 2];
        output += lookup[tmp << 4 & 63];
        output += "==";
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        output += lookup[tmp >> 10];
        output += lookup[tmp >> 4 & 63];
        output += lookup[tmp << 2 & 63];
        output += "=";
      }
      parts.push(output);
      return parts.join("");
    }
    function read(buffer2, offset2, isLE, mLen, nBytes) {
      var e2, m2;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i2 = isLE ? nBytes - 1 : 0;
      var d2 = isLE ? -1 : 1;
      var s2 = buffer2[offset2 + i2];
      i2 += d2;
      e2 = s2 & (1 << -nBits) - 1;
      s2 >>= -nBits;
      nBits += eLen;
      for (; nBits > 0; e2 = e2 * 256 + buffer2[offset2 + i2], i2 += d2, nBits -= 8) {
      }
      m2 = e2 & (1 << -nBits) - 1;
      e2 >>= -nBits;
      nBits += mLen;
      for (; nBits > 0; m2 = m2 * 256 + buffer2[offset2 + i2], i2 += d2, nBits -= 8) {
      }
      if (e2 === 0) {
        e2 = 1 - eBias;
      } else if (e2 === eMax) {
        return m2 ? NaN : (s2 ? -1 : 1) * Infinity;
      } else {
        m2 = m2 + Math.pow(2, mLen);
        e2 = e2 - eBias;
      }
      return (s2 ? -1 : 1) * m2 * Math.pow(2, e2 - mLen);
    }
    function write(buffer2, value, offset2, isLE, mLen, nBytes) {
      var e2, m2, c2;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt2 = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i2 = isLE ? 0 : nBytes - 1;
      var d2 = isLE ? 1 : -1;
      var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);
      if (isNaN(value) || value === Infinity) {
        m2 = isNaN(value) ? 1 : 0;
        e2 = eMax;
      } else {
        e2 = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c2 = Math.pow(2, -e2)) < 1) {
          e2--;
          c2 *= 2;
        }
        if (e2 + eBias >= 1) {
          value += rt2 / c2;
        } else {
          value += rt2 * Math.pow(2, 1 - eBias);
        }
        if (value * c2 >= 2) {
          e2++;
          c2 /= 2;
        }
        if (e2 + eBias >= eMax) {
          m2 = 0;
          e2 = eMax;
        } else if (e2 + eBias >= 1) {
          m2 = (value * c2 - 1) * Math.pow(2, mLen);
          e2 = e2 + eBias;
        } else {
          m2 = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e2 = 0;
        }
      }
      for (; mLen >= 8; buffer2[offset2 + i2] = m2 & 255, i2 += d2, m2 /= 256, mLen -= 8) {
      }
      e2 = e2 << mLen | m2;
      eLen += mLen;
      for (; eLen > 0; buffer2[offset2 + i2] = e2 & 255, i2 += d2, e2 /= 256, eLen -= 8) {
      }
      buffer2[offset2 + i2 - d2] |= s2 * 128;
    }
    var toString = {}.toString;
    var isArray$2 = Array.isArray || function(arr) {
      return toString.call(arr) == "[object Array]";
    };
    /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
     * @license  MIT
     */
    var INSPECT_MAX_BYTES = 50;
    Buffer$1.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== void 0 ? global$1.TYPED_ARRAY_SUPPORT : true;
    kMaxLength();
    function kMaxLength() {
      return Buffer$1.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
    }
    function createBuffer(that, length) {
      if (kMaxLength() < length) {
        throw new RangeError("Invalid typed array length");
      }
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        that = new Uint8Array(length);
        that.__proto__ = Buffer$1.prototype;
      } else {
        if (that === null) {
          that = new Buffer$1(length);
        }
        that.length = length;
      }
      return that;
    }
    function Buffer$1(arg, encodingOrOffset, length) {
      if (!Buffer$1.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$1)) {
        return new Buffer$1(arg, encodingOrOffset, length);
      }
      if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") {
          throw new Error(
            "If encoding is specified then the first argument must be a string"
          );
        }
        return allocUnsafe(this, arg);
      }
      return from(this, arg, encodingOrOffset, length);
    }
    Buffer$1.poolSize = 8192;
    Buffer$1._augment = function(arr) {
      arr.__proto__ = Buffer$1.prototype;
      return arr;
    };
    function from(that, value, encodingOrOffset, length) {
      if (typeof value === "number") {
        throw new TypeError('"value" argument must not be a number');
      }
      if (typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer) {
        return fromArrayBuffer(that, value, encodingOrOffset, length);
      }
      if (typeof value === "string") {
        return fromString(that, value, encodingOrOffset);
      }
      return fromObject(that, value);
    }
    Buffer$1.from = function(value, encodingOrOffset, length) {
      return from(null, value, encodingOrOffset, length);
    };
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      Buffer$1.prototype.__proto__ = Uint8Array.prototype;
      Buffer$1.__proto__ = Uint8Array;
    }
    function assertSize(size2) {
      if (typeof size2 !== "number") {
        throw new TypeError('"size" argument must be a number');
      } else if (size2 < 0) {
        throw new RangeError('"size" argument must not be negative');
      }
    }
    function alloc(that, size2, fill, encoding) {
      assertSize(size2);
      if (size2 <= 0) {
        return createBuffer(that, size2);
      }
      if (fill !== void 0) {
        return typeof encoding === "string" ? createBuffer(that, size2).fill(fill, encoding) : createBuffer(that, size2).fill(fill);
      }
      return createBuffer(that, size2);
    }
    Buffer$1.alloc = function(size2, fill, encoding) {
      return alloc(null, size2, fill, encoding);
    };
    function allocUnsafe(that, size2) {
      assertSize(size2);
      that = createBuffer(that, size2 < 0 ? 0 : checked(size2) | 0);
      if (!Buffer$1.TYPED_ARRAY_SUPPORT) {
        for (var i2 = 0; i2 < size2; ++i2) {
          that[i2] = 0;
        }
      }
      return that;
    }
    Buffer$1.allocUnsafe = function(size2) {
      return allocUnsafe(null, size2);
    };
    Buffer$1.allocUnsafeSlow = function(size2) {
      return allocUnsafe(null, size2);
    };
    function fromString(that, string2, encoding) {
      if (typeof encoding !== "string" || encoding === "") {
        encoding = "utf8";
      }
      if (!Buffer$1.isEncoding(encoding)) {
        throw new TypeError('"encoding" must be a valid string encoding');
      }
      var length = byteLength(string2, encoding) | 0;
      that = createBuffer(that, length);
      var actual = that.write(string2, encoding);
      if (actual !== length) {
        that = that.slice(0, actual);
      }
      return that;
    }
    function fromArrayLike(that, array2) {
      var length = array2.length < 0 ? 0 : checked(array2.length) | 0;
      that = createBuffer(that, length);
      for (var i2 = 0; i2 < length; i2 += 1) {
        that[i2] = array2[i2] & 255;
      }
      return that;
    }
    function fromArrayBuffer(that, array2, byteOffset, length) {
      array2.byteLength;
      if (byteOffset < 0 || array2.byteLength < byteOffset) {
        throw new RangeError("'offset' is out of bounds");
      }
      if (array2.byteLength < byteOffset + (length || 0)) {
        throw new RangeError("'length' is out of bounds");
      }
      if (byteOffset === void 0 && length === void 0) {
        array2 = new Uint8Array(array2);
      } else if (length === void 0) {
        array2 = new Uint8Array(array2, byteOffset);
      } else {
        array2 = new Uint8Array(array2, byteOffset, length);
      }
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        that = array2;
        that.__proto__ = Buffer$1.prototype;
      } else {
        that = fromArrayLike(that, array2);
      }
      return that;
    }
    function fromObject(that, obj) {
      if (internalIsBuffer(obj)) {
        var len = checked(obj.length) | 0;
        that = createBuffer(that, len);
        if (that.length === 0) {
          return that;
        }
        obj.copy(that, 0, 0, len);
        return that;
      }
      if (obj) {
        if (typeof ArrayBuffer !== "undefined" && obj.buffer instanceof ArrayBuffer || "length" in obj) {
          if (typeof obj.length !== "number" || isnan(obj.length)) {
            return createBuffer(that, 0);
          }
          return fromArrayLike(that, obj);
        }
        if (obj.type === "Buffer" && isArray$2(obj.data)) {
          return fromArrayLike(that, obj.data);
        }
      }
      throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
    }
    function checked(length) {
      if (length >= kMaxLength()) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength().toString(16) + " bytes");
      }
      return length | 0;
    }
    Buffer$1.isBuffer = isBuffer;
    function internalIsBuffer(b2) {
      return !!(b2 != null && b2._isBuffer);
    }
    Buffer$1.compare = function compare(a2, b2) {
      if (!internalIsBuffer(a2) || !internalIsBuffer(b2)) {
        throw new TypeError("Arguments must be Buffers");
      }
      if (a2 === b2)
        return 0;
      var x2 = a2.length;
      var y2 = b2.length;
      for (var i2 = 0, len = Math.min(x2, y2); i2 < len; ++i2) {
        if (a2[i2] !== b2[i2]) {
          x2 = a2[i2];
          y2 = b2[i2];
          break;
        }
      }
      if (x2 < y2)
        return -1;
      if (y2 < x2)
        return 1;
      return 0;
    };
    Buffer$1.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer$1.concat = function concat(list, length) {
      if (!isArray$2(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer$1.alloc(0);
      }
      var i2;
      if (length === void 0) {
        length = 0;
        for (i2 = 0; i2 < list.length; ++i2) {
          length += list[i2].length;
        }
      }
      var buffer2 = Buffer$1.allocUnsafe(length);
      var pos = 0;
      for (i2 = 0; i2 < list.length; ++i2) {
        var buf = list[i2];
        if (!internalIsBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        buf.copy(buffer2, pos);
        pos += buf.length;
      }
      return buffer2;
    };
    function byteLength(string2, encoding) {
      if (internalIsBuffer(string2)) {
        return string2.length;
      }
      if (typeof ArrayBuffer !== "undefined" && typeof ArrayBuffer.isView === "function" && (ArrayBuffer.isView(string2) || string2 instanceof ArrayBuffer)) {
        return string2.byteLength;
      }
      if (typeof string2 !== "string") {
        string2 = "" + string2;
      }
      var len = string2.length;
      if (len === 0)
        return 0;
      var loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "ascii":
          case "latin1":
          case "binary":
            return len;
          case "utf8":
          case "utf-8":
          case void 0:
            return utf8ToBytes(string2).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return len * 2;
          case "hex":
            return len >>> 1;
          case "base64":
            return base64ToBytes(string2).length;
          default:
            if (loweredCase)
              return utf8ToBytes(string2).length;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer$1.byteLength = byteLength;
    function slowToString(encoding, start, end2) {
      var loweredCase = false;
      if (start === void 0 || start < 0) {
        start = 0;
      }
      if (start > this.length) {
        return "";
      }
      if (end2 === void 0 || end2 > this.length) {
        end2 = this.length;
      }
      if (end2 <= 0) {
        return "";
      }
      end2 >>>= 0;
      start >>>= 0;
      if (end2 <= start) {
        return "";
      }
      if (!encoding)
        encoding = "utf8";
      while (true) {
        switch (encoding) {
          case "hex":
            return hexSlice(this, start, end2);
          case "utf8":
          case "utf-8":
            return utf8Slice(this, start, end2);
          case "ascii":
            return asciiSlice(this, start, end2);
          case "latin1":
          case "binary":
            return latin1Slice(this, start, end2);
          case "base64":
            return base64Slice(this, start, end2);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return utf16leSlice(this, start, end2);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer$1.prototype._isBuffer = true;
    function swap(b2, n2, m2) {
      var i2 = b2[n2];
      b2[n2] = b2[m2];
      b2[m2] = i2;
    }
    Buffer$1.prototype.swap16 = function swap16() {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (var i2 = 0; i2 < len; i2 += 2) {
        swap(this, i2, i2 + 1);
      }
      return this;
    };
    Buffer$1.prototype.swap32 = function swap32() {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (var i2 = 0; i2 < len; i2 += 4) {
        swap(this, i2, i2 + 3);
        swap(this, i2 + 1, i2 + 2);
      }
      return this;
    };
    Buffer$1.prototype.swap64 = function swap64() {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (var i2 = 0; i2 < len; i2 += 8) {
        swap(this, i2, i2 + 7);
        swap(this, i2 + 1, i2 + 6);
        swap(this, i2 + 2, i2 + 5);
        swap(this, i2 + 3, i2 + 4);
      }
      return this;
    };
    Buffer$1.prototype.toString = function toString2() {
      var length = this.length | 0;
      if (length === 0)
        return "";
      if (arguments.length === 0)
        return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
    };
    Buffer$1.prototype.equals = function equals(b2) {
      if (!internalIsBuffer(b2))
        throw new TypeError("Argument must be a Buffer");
      if (this === b2)
        return true;
      return Buffer$1.compare(this, b2) === 0;
    };
    Buffer$1.prototype.inspect = function inspect2() {
      var str2 = "";
      var max2 = INSPECT_MAX_BYTES;
      if (this.length > 0) {
        str2 = this.toString("hex", 0, max2).match(/.{2}/g).join(" ");
        if (this.length > max2)
          str2 += " ... ";
      }
      return "<Buffer " + str2 + ">";
    };
    Buffer$1.prototype.compare = function compare(target, start, end2, thisStart, thisEnd) {
      if (!internalIsBuffer(target)) {
        throw new TypeError("Argument must be a Buffer");
      }
      if (start === void 0) {
        start = 0;
      }
      if (end2 === void 0) {
        end2 = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end2 > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end2) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end2) {
        return 1;
      }
      start >>>= 0;
      end2 >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target)
        return 0;
      var x2 = thisEnd - thisStart;
      var y2 = end2 - start;
      var len = Math.min(x2, y2);
      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end2);
      for (var i2 = 0; i2 < len; ++i2) {
        if (thisCopy[i2] !== targetCopy[i2]) {
          x2 = thisCopy[i2];
          y2 = targetCopy[i2];
          break;
        }
      }
      if (x2 < y2)
        return -1;
      if (y2 < x2)
        return 1;
      return 0;
    };
    function bidirectionalIndexOf(buffer2, val, byteOffset, encoding, dir) {
      if (buffer2.length === 0)
        return -1;
      if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 2147483647) {
        byteOffset = 2147483647;
      } else if (byteOffset < -2147483648) {
        byteOffset = -2147483648;
      }
      byteOffset = +byteOffset;
      if (isNaN(byteOffset)) {
        byteOffset = dir ? 0 : buffer2.length - 1;
      }
      if (byteOffset < 0)
        byteOffset = buffer2.length + byteOffset;
      if (byteOffset >= buffer2.length) {
        if (dir)
          return -1;
        else
          byteOffset = buffer2.length - 1;
      } else if (byteOffset < 0) {
        if (dir)
          byteOffset = 0;
        else
          return -1;
      }
      if (typeof val === "string") {
        val = Buffer$1.from(val, encoding);
      }
      if (internalIsBuffer(val)) {
        if (val.length === 0) {
          return -1;
        }
        return arrayIndexOf(buffer2, val, byteOffset, encoding, dir);
      } else if (typeof val === "number") {
        val = val & 255;
        if (Buffer$1.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === "function") {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer2, val, byteOffset);
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer2, val, byteOffset);
          }
        }
        return arrayIndexOf(buffer2, [val], byteOffset, encoding, dir);
      }
      throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;
      if (encoding !== void 0) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }
      function read2(buf, i3) {
        if (indexSize === 1) {
          return buf[i3];
        } else {
          return buf.readUInt16BE(i3 * indexSize);
        }
      }
      var i2;
      if (dir) {
        var foundIndex = -1;
        for (i2 = byteOffset; i2 < arrLength; i2++) {
          if (read2(arr, i2) === read2(val, foundIndex === -1 ? 0 : i2 - foundIndex)) {
            if (foundIndex === -1)
              foundIndex = i2;
            if (i2 - foundIndex + 1 === valLength)
              return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1)
              i2 -= i2 - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength)
          byteOffset = arrLength - valLength;
        for (i2 = byteOffset; i2 >= 0; i2--) {
          var found = true;
          for (var j2 = 0; j2 < valLength; j2++) {
            if (read2(arr, i2 + j2) !== read2(val, j2)) {
              found = false;
              break;
            }
          }
          if (found)
            return i2;
        }
      }
      return -1;
    }
    Buffer$1.prototype.includes = function includes(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer$1.prototype.indexOf = function indexOf2(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };
    Buffer$1.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };
    function hexWrite(buf, string2, offset2, length) {
      offset2 = Number(offset2) || 0;
      var remaining = buf.length - offset2;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }
      var strLen = string2.length;
      if (strLen % 2 !== 0)
        throw new TypeError("Invalid hex string");
      if (length > strLen / 2) {
        length = strLen / 2;
      }
      for (var i2 = 0; i2 < length; ++i2) {
        var parsed = parseInt(string2.substr(i2 * 2, 2), 16);
        if (isNaN(parsed))
          return i2;
        buf[offset2 + i2] = parsed;
      }
      return i2;
    }
    function utf8Write(buf, string2, offset2, length) {
      return blitBuffer(utf8ToBytes(string2, buf.length - offset2), buf, offset2, length);
    }
    function asciiWrite(buf, string2, offset2, length) {
      return blitBuffer(asciiToBytes(string2), buf, offset2, length);
    }
    function latin1Write(buf, string2, offset2, length) {
      return asciiWrite(buf, string2, offset2, length);
    }
    function base64Write(buf, string2, offset2, length) {
      return blitBuffer(base64ToBytes(string2), buf, offset2, length);
    }
    function ucs2Write(buf, string2, offset2, length) {
      return blitBuffer(utf16leToBytes(string2, buf.length - offset2), buf, offset2, length);
    }
    Buffer$1.prototype.write = function write2(string2, offset2, length, encoding) {
      if (offset2 === void 0) {
        encoding = "utf8";
        length = this.length;
        offset2 = 0;
      } else if (length === void 0 && typeof offset2 === "string") {
        encoding = offset2;
        length = this.length;
        offset2 = 0;
      } else if (isFinite(offset2)) {
        offset2 = offset2 | 0;
        if (isFinite(length)) {
          length = length | 0;
          if (encoding === void 0)
            encoding = "utf8";
        } else {
          encoding = length;
          length = void 0;
        }
      } else {
        throw new Error(
          "Buffer.write(string, encoding, offset[, length]) is no longer supported"
        );
      }
      var remaining = this.length - offset2;
      if (length === void 0 || length > remaining)
        length = remaining;
      if (string2.length > 0 && (length < 0 || offset2 < 0) || offset2 > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding)
        encoding = "utf8";
      var loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "hex":
            return hexWrite(this, string2, offset2, length);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string2, offset2, length);
          case "ascii":
            return asciiWrite(this, string2, offset2, length);
          case "latin1":
          case "binary":
            return latin1Write(this, string2, offset2, length);
          case "base64":
            return base64Write(this, string2, offset2, length);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string2, offset2, length);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer$1.prototype.toJSON = function toJSON() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    function base64Slice(buf, start, end2) {
      if (start === 0 && end2 === buf.length) {
        return fromByteArray(buf);
      } else {
        return fromByteArray(buf.slice(start, end2));
      }
    }
    function utf8Slice(buf, start, end2) {
      end2 = Math.min(buf.length, end2);
      var res = [];
      var i2 = start;
      while (i2 < end2) {
        var firstByte = buf[i2];
        var codePoint = null;
        var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i2 + bytesPerSequence <= end2) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 128) {
                codePoint = firstByte;
              }
              break;
            case 2:
              secondByte = buf[i2 + 1];
              if ((secondByte & 192) === 128) {
                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                if (tempCodePoint > 127) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 3:
              secondByte = buf[i2 + 1];
              thirdByte = buf[i2 + 2];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 4:
              secondByte = buf[i2 + 1];
              thirdByte = buf[i2 + 2];
              fourthByte = buf[i2 + 3];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }
        if (codePoint === null) {
          codePoint = 65533;
          bytesPerSequence = 1;
        } else if (codePoint > 65535) {
          codePoint -= 65536;
          res.push(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i2 += bytesPerSequence;
      }
      return decodeCodePointsArray(res);
    }
    var MAX_ARGUMENTS_LENGTH = 4096;
    function decodeCodePointsArray(codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints);
      }
      var res = "";
      var i2 = 0;
      while (i2 < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i2, i2 += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res;
    }
    function asciiSlice(buf, start, end2) {
      var ret = "";
      end2 = Math.min(buf.length, end2);
      for (var i2 = start; i2 < end2; ++i2) {
        ret += String.fromCharCode(buf[i2] & 127);
      }
      return ret;
    }
    function latin1Slice(buf, start, end2) {
      var ret = "";
      end2 = Math.min(buf.length, end2);
      for (var i2 = start; i2 < end2; ++i2) {
        ret += String.fromCharCode(buf[i2]);
      }
      return ret;
    }
    function hexSlice(buf, start, end2) {
      var len = buf.length;
      if (!start || start < 0)
        start = 0;
      if (!end2 || end2 < 0 || end2 > len)
        end2 = len;
      var out = "";
      for (var i2 = start; i2 < end2; ++i2) {
        out += toHex(buf[i2]);
      }
      return out;
    }
    function utf16leSlice(buf, start, end2) {
      var bytes = buf.slice(start, end2);
      var res = "";
      for (var i2 = 0; i2 < bytes.length; i2 += 2) {
        res += String.fromCharCode(bytes[i2] + bytes[i2 + 1] * 256);
      }
      return res;
    }
    Buffer$1.prototype.slice = function slice(start, end2) {
      var len = this.length;
      start = ~~start;
      end2 = end2 === void 0 ? len : ~~end2;
      if (start < 0) {
        start += len;
        if (start < 0)
          start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end2 < 0) {
        end2 += len;
        if (end2 < 0)
          end2 = 0;
      } else if (end2 > len) {
        end2 = len;
      }
      if (end2 < start)
        end2 = start;
      var newBuf;
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end2);
        newBuf.__proto__ = Buffer$1.prototype;
      } else {
        var sliceLen = end2 - start;
        newBuf = new Buffer$1(sliceLen, void 0);
        for (var i2 = 0; i2 < sliceLen; ++i2) {
          newBuf[i2] = this[i2 + start];
        }
      }
      return newBuf;
    };
    function checkOffset(offset2, ext, length) {
      if (offset2 % 1 !== 0 || offset2 < 0)
        throw new RangeError("offset is not uint");
      if (offset2 + ext > length)
        throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer$1.prototype.readUIntLE = function readUIntLE(offset2, byteLength2, noAssert) {
      offset2 = offset2 | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert)
        checkOffset(offset2, byteLength2, this.length);
      var val = this[offset2];
      var mul = 1;
      var i2 = 0;
      while (++i2 < byteLength2 && (mul *= 256)) {
        val += this[offset2 + i2] * mul;
      }
      return val;
    };
    Buffer$1.prototype.readUIntBE = function readUIntBE(offset2, byteLength2, noAssert) {
      offset2 = offset2 | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert) {
        checkOffset(offset2, byteLength2, this.length);
      }
      var val = this[offset2 + --byteLength2];
      var mul = 1;
      while (byteLength2 > 0 && (mul *= 256)) {
        val += this[offset2 + --byteLength2] * mul;
      }
      return val;
    };
    Buffer$1.prototype.readUInt8 = function readUInt8(offset2, noAssert) {
      if (!noAssert)
        checkOffset(offset2, 1, this.length);
      return this[offset2];
    };
    Buffer$1.prototype.readUInt16LE = function readUInt16LE(offset2, noAssert) {
      if (!noAssert)
        checkOffset(offset2, 2, this.length);
      return this[offset2] | this[offset2 + 1] << 8;
    };
    Buffer$1.prototype.readUInt16BE = function readUInt16BE(offset2, noAssert) {
      if (!noAssert)
        checkOffset(offset2, 2, this.length);
      return this[offset2] << 8 | this[offset2 + 1];
    };
    Buffer$1.prototype.readUInt32LE = function readUInt32LE(offset2, noAssert) {
      if (!noAssert)
        checkOffset(offset2, 4, this.length);
      return (this[offset2] | this[offset2 + 1] << 8 | this[offset2 + 2] << 16) + this[offset2 + 3] * 16777216;
    };
    Buffer$1.prototype.readUInt32BE = function readUInt32BE(offset2, noAssert) {
      if (!noAssert)
        checkOffset(offset2, 4, this.length);
      return this[offset2] * 16777216 + (this[offset2 + 1] << 16 | this[offset2 + 2] << 8 | this[offset2 + 3]);
    };
    Buffer$1.prototype.readIntLE = function readIntLE(offset2, byteLength2, noAssert) {
      offset2 = offset2 | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert)
        checkOffset(offset2, byteLength2, this.length);
      var val = this[offset2];
      var mul = 1;
      var i2 = 0;
      while (++i2 < byteLength2 && (mul *= 256)) {
        val += this[offset2 + i2] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer$1.prototype.readIntBE = function readIntBE(offset2, byteLength2, noAssert) {
      offset2 = offset2 | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert)
        checkOffset(offset2, byteLength2, this.length);
      var i2 = byteLength2;
      var mul = 1;
      var val = this[offset2 + --i2];
      while (i2 > 0 && (mul *= 256)) {
        val += this[offset2 + --i2] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer$1.prototype.readInt8 = function readInt8(offset2, noAssert) {
      if (!noAssert)
        checkOffset(offset2, 1, this.length);
      if (!(this[offset2] & 128))
        return this[offset2];
      return (255 - this[offset2] + 1) * -1;
    };
    Buffer$1.prototype.readInt16LE = function readInt16LE(offset2, noAssert) {
      if (!noAssert)
        checkOffset(offset2, 2, this.length);
      var val = this[offset2] | this[offset2 + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer$1.prototype.readInt16BE = function readInt16BE(offset2, noAssert) {
      if (!noAssert)
        checkOffset(offset2, 2, this.length);
      var val = this[offset2 + 1] | this[offset2] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer$1.prototype.readInt32LE = function readInt32LE(offset2, noAssert) {
      if (!noAssert)
        checkOffset(offset2, 4, this.length);
      return this[offset2] | this[offset2 + 1] << 8 | this[offset2 + 2] << 16 | this[offset2 + 3] << 24;
    };
    Buffer$1.prototype.readInt32BE = function readInt32BE(offset2, noAssert) {
      if (!noAssert)
        checkOffset(offset2, 4, this.length);
      return this[offset2] << 24 | this[offset2 + 1] << 16 | this[offset2 + 2] << 8 | this[offset2 + 3];
    };
    Buffer$1.prototype.readFloatLE = function readFloatLE(offset2, noAssert) {
      if (!noAssert)
        checkOffset(offset2, 4, this.length);
      return read(this, offset2, true, 23, 4);
    };
    Buffer$1.prototype.readFloatBE = function readFloatBE(offset2, noAssert) {
      if (!noAssert)
        checkOffset(offset2, 4, this.length);
      return read(this, offset2, false, 23, 4);
    };
    Buffer$1.prototype.readDoubleLE = function readDoubleLE(offset2, noAssert) {
      if (!noAssert)
        checkOffset(offset2, 8, this.length);
      return read(this, offset2, true, 52, 8);
    };
    Buffer$1.prototype.readDoubleBE = function readDoubleBE(offset2, noAssert) {
      if (!noAssert)
        checkOffset(offset2, 8, this.length);
      return read(this, offset2, false, 52, 8);
    };
    function checkInt(buf, value, offset2, ext, max2, min2) {
      if (!internalIsBuffer(buf))
        throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value > max2 || value < min2)
        throw new RangeError('"value" argument is out of bounds');
      if (offset2 + ext > buf.length)
        throw new RangeError("Index out of range");
    }
    Buffer$1.prototype.writeUIntLE = function writeUIntLE(value, offset2, byteLength2, noAssert) {
      value = +value;
      offset2 = offset2 | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset2, byteLength2, maxBytes, 0);
      }
      var mul = 1;
      var i2 = 0;
      this[offset2] = value & 255;
      while (++i2 < byteLength2 && (mul *= 256)) {
        this[offset2 + i2] = value / mul & 255;
      }
      return offset2 + byteLength2;
    };
    Buffer$1.prototype.writeUIntBE = function writeUIntBE(value, offset2, byteLength2, noAssert) {
      value = +value;
      offset2 = offset2 | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset2, byteLength2, maxBytes, 0);
      }
      var i2 = byteLength2 - 1;
      var mul = 1;
      this[offset2 + i2] = value & 255;
      while (--i2 >= 0 && (mul *= 256)) {
        this[offset2 + i2] = value / mul & 255;
      }
      return offset2 + byteLength2;
    };
    Buffer$1.prototype.writeUInt8 = function writeUInt8(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 | 0;
      if (!noAssert)
        checkInt(this, value, offset2, 1, 255, 0);
      if (!Buffer$1.TYPED_ARRAY_SUPPORT)
        value = Math.floor(value);
      this[offset2] = value & 255;
      return offset2 + 1;
    };
    function objectWriteUInt16(buf, value, offset2, littleEndian) {
      if (value < 0)
        value = 65535 + value + 1;
      for (var i2 = 0, j2 = Math.min(buf.length - offset2, 2); i2 < j2; ++i2) {
        buf[offset2 + i2] = (value & 255 << 8 * (littleEndian ? i2 : 1 - i2)) >>> (littleEndian ? i2 : 1 - i2) * 8;
      }
    }
    Buffer$1.prototype.writeUInt16LE = function writeUInt16LE(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 | 0;
      if (!noAssert)
        checkInt(this, value, offset2, 2, 65535, 0);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset2] = value & 255;
        this[offset2 + 1] = value >>> 8;
      } else {
        objectWriteUInt16(this, value, offset2, true);
      }
      return offset2 + 2;
    };
    Buffer$1.prototype.writeUInt16BE = function writeUInt16BE(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 | 0;
      if (!noAssert)
        checkInt(this, value, offset2, 2, 65535, 0);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset2] = value >>> 8;
        this[offset2 + 1] = value & 255;
      } else {
        objectWriteUInt16(this, value, offset2, false);
      }
      return offset2 + 2;
    };
    function objectWriteUInt32(buf, value, offset2, littleEndian) {
      if (value < 0)
        value = 4294967295 + value + 1;
      for (var i2 = 0, j2 = Math.min(buf.length - offset2, 4); i2 < j2; ++i2) {
        buf[offset2 + i2] = value >>> (littleEndian ? i2 : 3 - i2) * 8 & 255;
      }
    }
    Buffer$1.prototype.writeUInt32LE = function writeUInt32LE(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 | 0;
      if (!noAssert)
        checkInt(this, value, offset2, 4, 4294967295, 0);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset2 + 3] = value >>> 24;
        this[offset2 + 2] = value >>> 16;
        this[offset2 + 1] = value >>> 8;
        this[offset2] = value & 255;
      } else {
        objectWriteUInt32(this, value, offset2, true);
      }
      return offset2 + 4;
    };
    Buffer$1.prototype.writeUInt32BE = function writeUInt32BE(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 | 0;
      if (!noAssert)
        checkInt(this, value, offset2, 4, 4294967295, 0);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset2] = value >>> 24;
        this[offset2 + 1] = value >>> 16;
        this[offset2 + 2] = value >>> 8;
        this[offset2 + 3] = value & 255;
      } else {
        objectWriteUInt32(this, value, offset2, false);
      }
      return offset2 + 4;
    };
    Buffer$1.prototype.writeIntLE = function writeIntLE(value, offset2, byteLength2, noAssert) {
      value = +value;
      offset2 = offset2 | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset2, byteLength2, limit - 1, -limit);
      }
      var i2 = 0;
      var mul = 1;
      var sub = 0;
      this[offset2] = value & 255;
      while (++i2 < byteLength2 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset2 + i2 - 1] !== 0) {
          sub = 1;
        }
        this[offset2 + i2] = (value / mul >> 0) - sub & 255;
      }
      return offset2 + byteLength2;
    };
    Buffer$1.prototype.writeIntBE = function writeIntBE(value, offset2, byteLength2, noAssert) {
      value = +value;
      offset2 = offset2 | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset2, byteLength2, limit - 1, -limit);
      }
      var i2 = byteLength2 - 1;
      var mul = 1;
      var sub = 0;
      this[offset2 + i2] = value & 255;
      while (--i2 >= 0 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset2 + i2 + 1] !== 0) {
          sub = 1;
        }
        this[offset2 + i2] = (value / mul >> 0) - sub & 255;
      }
      return offset2 + byteLength2;
    };
    Buffer$1.prototype.writeInt8 = function writeInt8(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 | 0;
      if (!noAssert)
        checkInt(this, value, offset2, 1, 127, -128);
      if (!Buffer$1.TYPED_ARRAY_SUPPORT)
        value = Math.floor(value);
      if (value < 0)
        value = 255 + value + 1;
      this[offset2] = value & 255;
      return offset2 + 1;
    };
    Buffer$1.prototype.writeInt16LE = function writeInt16LE(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 | 0;
      if (!noAssert)
        checkInt(this, value, offset2, 2, 32767, -32768);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset2] = value & 255;
        this[offset2 + 1] = value >>> 8;
      } else {
        objectWriteUInt16(this, value, offset2, true);
      }
      return offset2 + 2;
    };
    Buffer$1.prototype.writeInt16BE = function writeInt16BE(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 | 0;
      if (!noAssert)
        checkInt(this, value, offset2, 2, 32767, -32768);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset2] = value >>> 8;
        this[offset2 + 1] = value & 255;
      } else {
        objectWriteUInt16(this, value, offset2, false);
      }
      return offset2 + 2;
    };
    Buffer$1.prototype.writeInt32LE = function writeInt32LE(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 | 0;
      if (!noAssert)
        checkInt(this, value, offset2, 4, 2147483647, -2147483648);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset2] = value & 255;
        this[offset2 + 1] = value >>> 8;
        this[offset2 + 2] = value >>> 16;
        this[offset2 + 3] = value >>> 24;
      } else {
        objectWriteUInt32(this, value, offset2, true);
      }
      return offset2 + 4;
    };
    Buffer$1.prototype.writeInt32BE = function writeInt32BE(value, offset2, noAssert) {
      value = +value;
      offset2 = offset2 | 0;
      if (!noAssert)
        checkInt(this, value, offset2, 4, 2147483647, -2147483648);
      if (value < 0)
        value = 4294967295 + value + 1;
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset2] = value >>> 24;
        this[offset2 + 1] = value >>> 16;
        this[offset2 + 2] = value >>> 8;
        this[offset2 + 3] = value & 255;
      } else {
        objectWriteUInt32(this, value, offset2, false);
      }
      return offset2 + 4;
    };
    function checkIEEE754(buf, value, offset2, ext, max2, min2) {
      if (offset2 + ext > buf.length)
        throw new RangeError("Index out of range");
      if (offset2 < 0)
        throw new RangeError("Index out of range");
    }
    function writeFloat(buf, value, offset2, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset2, 4);
      }
      write(buf, value, offset2, littleEndian, 23, 4);
      return offset2 + 4;
    }
    Buffer$1.prototype.writeFloatLE = function writeFloatLE(value, offset2, noAssert) {
      return writeFloat(this, value, offset2, true, noAssert);
    };
    Buffer$1.prototype.writeFloatBE = function writeFloatBE(value, offset2, noAssert) {
      return writeFloat(this, value, offset2, false, noAssert);
    };
    function writeDouble(buf, value, offset2, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset2, 8);
      }
      write(buf, value, offset2, littleEndian, 52, 8);
      return offset2 + 8;
    }
    Buffer$1.prototype.writeDoubleLE = function writeDoubleLE(value, offset2, noAssert) {
      return writeDouble(this, value, offset2, true, noAssert);
    };
    Buffer$1.prototype.writeDoubleBE = function writeDoubleBE(value, offset2, noAssert) {
      return writeDouble(this, value, offset2, false, noAssert);
    };
    Buffer$1.prototype.copy = function copy2(target, targetStart, start, end2) {
      if (!start)
        start = 0;
      if (!end2 && end2 !== 0)
        end2 = this.length;
      if (targetStart >= target.length)
        targetStart = target.length;
      if (!targetStart)
        targetStart = 0;
      if (end2 > 0 && end2 < start)
        end2 = start;
      if (end2 === start)
        return 0;
      if (target.length === 0 || this.length === 0)
        return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length)
        throw new RangeError("sourceStart out of bounds");
      if (end2 < 0)
        throw new RangeError("sourceEnd out of bounds");
      if (end2 > this.length)
        end2 = this.length;
      if (target.length - targetStart < end2 - start) {
        end2 = target.length - targetStart + start;
      }
      var len = end2 - start;
      var i2;
      if (this === target && start < targetStart && targetStart < end2) {
        for (i2 = len - 1; i2 >= 0; --i2) {
          target[i2 + targetStart] = this[i2 + start];
        }
      } else if (len < 1e3 || !Buffer$1.TYPED_ARRAY_SUPPORT) {
        for (i2 = 0; i2 < len; ++i2) {
          target[i2 + targetStart] = this[i2 + start];
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, start + len),
          targetStart
        );
      }
      return len;
    };
    Buffer$1.prototype.fill = function fill(val, start, end2, encoding) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding = start;
          start = 0;
          end2 = this.length;
        } else if (typeof end2 === "string") {
          encoding = end2;
          end2 = this.length;
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (code < 256) {
            val = code;
          }
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer$1.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
      } else if (typeof val === "number") {
        val = val & 255;
      }
      if (start < 0 || this.length < start || this.length < end2) {
        throw new RangeError("Out of range index");
      }
      if (end2 <= start) {
        return this;
      }
      start = start >>> 0;
      end2 = end2 === void 0 ? this.length : end2 >>> 0;
      if (!val)
        val = 0;
      var i2;
      if (typeof val === "number") {
        for (i2 = start; i2 < end2; ++i2) {
          this[i2] = val;
        }
      } else {
        var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer$1(val, encoding).toString());
        var len = bytes.length;
        for (i2 = 0; i2 < end2 - start; ++i2) {
          this[i2 + start] = bytes[i2 % len];
        }
      }
      return this;
    };
    var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
    function base64clean(str2) {
      str2 = stringtrim(str2).replace(INVALID_BASE64_RE, "");
      if (str2.length < 2)
        return "";
      while (str2.length % 4 !== 0) {
        str2 = str2 + "=";
      }
      return str2;
    }
    function stringtrim(str2) {
      if (str2.trim)
        return str2.trim();
      return str2.replace(/^\s+|\s+$/g, "");
    }
    function toHex(n2) {
      if (n2 < 16)
        return "0" + n2.toString(16);
      return n2.toString(16);
    }
    function utf8ToBytes(string2, units) {
      units = units || Infinity;
      var codePoint;
      var length = string2.length;
      var leadSurrogate = null;
      var bytes = [];
      for (var i2 = 0; i2 < length; ++i2) {
        codePoint = string2.charCodeAt(i2);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            } else if (i2 + 1 === length) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units -= 1) < 0)
            break;
          bytes.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units -= 2) < 0)
            break;
          bytes.push(
            codePoint >> 6 | 192,
            codePoint & 63 | 128
          );
        } else if (codePoint < 65536) {
          if ((units -= 3) < 0)
            break;
          bytes.push(
            codePoint >> 12 | 224,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else if (codePoint < 1114112) {
          if ((units -= 4) < 0)
            break;
          bytes.push(
            codePoint >> 18 | 240,
            codePoint >> 12 & 63 | 128,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes;
    }
    function asciiToBytes(str2) {
      var byteArray = [];
      for (var i2 = 0; i2 < str2.length; ++i2) {
        byteArray.push(str2.charCodeAt(i2) & 255);
      }
      return byteArray;
    }
    function utf16leToBytes(str2, units) {
      var c2, hi, lo;
      var byteArray = [];
      for (var i2 = 0; i2 < str2.length; ++i2) {
        if ((units -= 2) < 0)
          break;
        c2 = str2.charCodeAt(i2);
        hi = c2 >> 8;
        lo = c2 % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }
      return byteArray;
    }
    function base64ToBytes(str2) {
      return toByteArray(base64clean(str2));
    }
    function blitBuffer(src, dst, offset2, length) {
      for (var i2 = 0; i2 < length; ++i2) {
        if (i2 + offset2 >= dst.length || i2 >= src.length)
          break;
        dst[i2 + offset2] = src[i2];
      }
      return i2;
    }
    function isnan(val) {
      return val !== val;
    }
    function isBuffer(obj) {
      return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));
    }
    function isFastBuffer(obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
    }
    function isSlowBuffer(obj) {
      return typeof obj.readFloatLE === "function" && typeof obj.slice === "function" && isFastBuffer(obj.slice(0, 0));
    }
    var hasFetch = isFunction$1(global$1.fetch) && isFunction$1(global$1.ReadableStream);
    var _blobConstructor;
    function blobConstructor() {
      if (typeof _blobConstructor !== "undefined") {
        return _blobConstructor;
      }
      try {
        new global$1.Blob([new ArrayBuffer(1)]);
        _blobConstructor = true;
      } catch (e2) {
        _blobConstructor = false;
      }
      return _blobConstructor;
    }
    var xhr;
    function checkTypeSupport(type2) {
      if (!xhr) {
        xhr = new global$1.XMLHttpRequest();
        xhr.open("GET", global$1.location.host ? "/" : "https://example.com");
      }
      try {
        xhr.responseType = type2;
        return xhr.responseType === type2;
      } catch (e2) {
        return false;
      }
    }
    var haveArrayBuffer = typeof global$1.ArrayBuffer !== "undefined";
    var haveSlice = haveArrayBuffer && isFunction$1(global$1.ArrayBuffer.prototype.slice);
    var arraybuffer = haveArrayBuffer && checkTypeSupport("arraybuffer");
    var msstream = !hasFetch && haveSlice && checkTypeSupport("ms-stream");
    var mozchunkedarraybuffer = !hasFetch && haveArrayBuffer && checkTypeSupport("moz-chunked-arraybuffer");
    var overrideMimeType = isFunction$1(xhr.overrideMimeType);
    var vbArray = isFunction$1(global$1.VBArray);
    function isFunction$1(value) {
      return typeof value === "function";
    }
    xhr = null;
    var inherits;
    if (typeof Object.create === "function") {
      inherits = function inherits2(ctor, superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      };
    } else {
      inherits = function inherits2(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      };
    }
    const inherits$1 = inherits;
    var formatRegExp = /%[sdj%]/g;
    function format$2(f2) {
      if (!isString(f2)) {
        var objects = [];
        for (var i2 = 0; i2 < arguments.length; i2++) {
          objects.push(inspect(arguments[i2]));
        }
        return objects.join(" ");
      }
      var i2 = 1;
      var args = arguments;
      var len = args.length;
      var str2 = String(f2).replace(formatRegExp, function(x3) {
        if (x3 === "%%")
          return "%";
        if (i2 >= len)
          return x3;
        switch (x3) {
          case "%s":
            return String(args[i2++]);
          case "%d":
            return Number(args[i2++]);
          case "%j":
            try {
              return JSON.stringify(args[i2++]);
            } catch (_2) {
              return "[Circular]";
            }
          default:
            return x3;
        }
      });
      for (var x2 = args[i2]; i2 < len; x2 = args[++i2]) {
        if (isNull(x2) || !isObject$1(x2)) {
          str2 += " " + x2;
        } else {
          str2 += " " + inspect(x2);
        }
      }
      return str2;
    }
    function deprecate(fn2, msg) {
      if (isUndefined(global$1.process)) {
        return function() {
          return deprecate(fn2, msg).apply(this, arguments);
        };
      }
      if (browser$1.noDeprecation === true) {
        return fn2;
      }
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (browser$1.throwDeprecation) {
            throw new Error(msg);
          } else if (browser$1.traceDeprecation) {
            console.trace(msg);
          } else {
            console.error(msg);
          }
          warned = true;
        }
        return fn2.apply(this, arguments);
      }
      return deprecated;
    }
    var debugs = {};
    var debugEnviron;
    function debuglog(set2) {
      if (isUndefined(debugEnviron))
        debugEnviron = { "VITE_LOG_INFO_ENABLED": "false", "VITE_SIYUAN_API_URL": "http://127.0.0.1:6806", "VITE_SIYUAN_CONFIG_TOKEN": "", "VITE_OPT_PWD": "123456", "VITE_SIYUAN_DEV_PAGE_ID": "20220723100458-kqacgb2", "VITE_DEBUG_MODE": "false" }.NODE_DEBUG || "";
      set2 = set2.toUpperCase();
      if (!debugs[set2]) {
        if (new RegExp("\\b" + set2 + "\\b", "i").test(debugEnviron)) {
          var pid = 0;
          debugs[set2] = function() {
            var msg = format$2.apply(null, arguments);
            console.error("%s %d: %s", set2, pid, msg);
          };
        } else {
          debugs[set2] = function() {
          };
        }
      }
      return debugs[set2];
    }
    function inspect(obj, opts) {
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      if (arguments.length >= 3)
        ctx.depth = arguments[2];
      if (arguments.length >= 4)
        ctx.colors = arguments[3];
      if (isBoolean(opts)) {
        ctx.showHidden = opts;
      } else if (opts) {
        _extend(ctx, opts);
      }
      if (isUndefined(ctx.showHidden))
        ctx.showHidden = false;
      if (isUndefined(ctx.depth))
        ctx.depth = 2;
      if (isUndefined(ctx.colors))
        ctx.colors = false;
      if (isUndefined(ctx.customInspect))
        ctx.customInspect = true;
      if (ctx.colors)
        ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }
    inspect.colors = {
      "bold": [1, 22],
      "italic": [3, 23],
      "underline": [4, 24],
      "inverse": [7, 27],
      "white": [37, 39],
      "grey": [90, 39],
      "black": [30, 39],
      "blue": [34, 39],
      "cyan": [36, 39],
      "green": [32, 39],
      "magenta": [35, 39],
      "red": [31, 39],
      "yellow": [33, 39]
    };
    inspect.styles = {
      "special": "cyan",
      "number": "yellow",
      "boolean": "yellow",
      "undefined": "grey",
      "null": "bold",
      "string": "green",
      "date": "magenta",
      "regexp": "red"
    };
    function stylizeWithColor(str2, styleType2) {
      var style2 = inspect.styles[styleType2];
      if (style2) {
        return "\x1B[" + inspect.colors[style2][0] + "m" + str2 + "\x1B[" + inspect.colors[style2][1] + "m";
      } else {
        return str2;
      }
    }
    function stylizeNoColor(str2, styleType2) {
      return str2;
    }
    function arrayToHash(array2) {
      var hash = {};
      array2.forEach(function(val, idx) {
        hash[val] = true;
      });
      return hash;
    }
    function formatValue(ctx, value, recurseTimes) {
      if (ctx.customInspect && value && isFunction(value.inspect) && value.inspect !== inspect && !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }
      var keys2 = Object.keys(value);
      var visibleKeys = arrayToHash(keys2);
      if (ctx.showHidden) {
        keys2 = Object.getOwnPropertyNames(value);
      }
      if (isError(value) && (keys2.indexOf("message") >= 0 || keys2.indexOf("description") >= 0)) {
        return formatError(value);
      }
      if (keys2.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ": " + value.name : "";
          return ctx.stylize("[Function" + name + "]", "special");
        }
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        }
        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), "date");
        }
        if (isError(value)) {
          return formatError(value);
        }
      }
      var base2 = "", array2 = false, braces = ["{", "}"];
      if (isArray$1(value)) {
        array2 = true;
        braces = ["[", "]"];
      }
      if (isFunction(value)) {
        var n2 = value.name ? ": " + value.name : "";
        base2 = " [Function" + n2 + "]";
      }
      if (isRegExp(value)) {
        base2 = " " + RegExp.prototype.toString.call(value);
      }
      if (isDate(value)) {
        base2 = " " + Date.prototype.toUTCString.call(value);
      }
      if (isError(value)) {
        base2 = " " + formatError(value);
      }
      if (keys2.length === 0 && (!array2 || value.length == 0)) {
        return braces[0] + base2 + braces[1];
      }
      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        } else {
          return ctx.stylize("[Object]", "special");
        }
      }
      ctx.seen.push(value);
      var output;
      if (array2) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys2);
      } else {
        output = keys2.map(function(key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array2);
        });
      }
      ctx.seen.pop();
      return reduceToSingleString(output, base2, braces);
    }
    function formatPrimitive(ctx, value) {
      if (isUndefined(value))
        return ctx.stylize("undefined", "undefined");
      if (isString(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, "string");
      }
      if (isNumber(value))
        return ctx.stylize("" + value, "number");
      if (isBoolean(value))
        return ctx.stylize("" + value, "boolean");
      if (isNull(value))
        return ctx.stylize("null", "null");
    }
    function formatError(value) {
      return "[" + Error.prototype.toString.call(value) + "]";
    }
    function formatArray(ctx, value, recurseTimes, visibleKeys, keys2) {
      var output = [];
      for (var i2 = 0, l2 = value.length; i2 < l2; ++i2) {
        if (hasOwnProperty$1(value, String(i2))) {
          output.push(formatProperty(
            ctx,
            value,
            recurseTimes,
            visibleKeys,
            String(i2),
            true
          ));
        } else {
          output.push("");
        }
      }
      keys2.forEach(function(key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(
            ctx,
            value,
            recurseTimes,
            visibleKeys,
            key,
            true
          ));
        }
      });
      return output;
    }
    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array2) {
      var name, str2, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
      if (desc.get) {
        if (desc.set) {
          str2 = ctx.stylize("[Getter/Setter]", "special");
        } else {
          str2 = ctx.stylize("[Getter]", "special");
        }
      } else {
        if (desc.set) {
          str2 = ctx.stylize("[Setter]", "special");
        }
      }
      if (!hasOwnProperty$1(visibleKeys, key)) {
        name = "[" + key + "]";
      }
      if (!str2) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str2 = formatValue(ctx, desc.value, null);
          } else {
            str2 = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str2.indexOf("\n") > -1) {
            if (array2) {
              str2 = str2.split("\n").map(function(line) {
                return "  " + line;
              }).join("\n").substr(2);
            } else {
              str2 = "\n" + str2.split("\n").map(function(line) {
                return "   " + line;
              }).join("\n");
            }
          }
        } else {
          str2 = ctx.stylize("[Circular]", "special");
        }
      }
      if (isUndefined(name)) {
        if (array2 && key.match(/^\d+$/)) {
          return str2;
        }
        name = JSON.stringify("" + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, "name");
        } else {
          name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, "string");
        }
      }
      return name + ": " + str2;
    }
    function reduceToSingleString(output, base2, braces) {
      var length = output.reduce(function(prev, cur) {
        if (cur.indexOf("\n") >= 0)
          ;
        return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
      }, 0);
      if (length > 60) {
        return braces[0] + (base2 === "" ? "" : base2 + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
      }
      return braces[0] + base2 + " " + output.join(", ") + " " + braces[1];
    }
    function isArray$1(ar) {
      return Array.isArray(ar);
    }
    function isBoolean(arg) {
      return typeof arg === "boolean";
    }
    function isNull(arg) {
      return arg === null;
    }
    function isNullOrUndefined(arg) {
      return arg == null;
    }
    function isNumber(arg) {
      return typeof arg === "number";
    }
    function isString(arg) {
      return typeof arg === "string";
    }
    function isUndefined(arg) {
      return arg === void 0;
    }
    function isRegExp(re) {
      return isObject$1(re) && objectToString(re) === "[object RegExp]";
    }
    function isObject$1(arg) {
      return typeof arg === "object" && arg !== null;
    }
    function isDate(d2) {
      return isObject$1(d2) && objectToString(d2) === "[object Date]";
    }
    function isError(e2) {
      return isObject$1(e2) && (objectToString(e2) === "[object Error]" || e2 instanceof Error);
    }
    function isFunction(arg) {
      return typeof arg === "function";
    }
    function objectToString(o2) {
      return Object.prototype.toString.call(o2);
    }
    function _extend(origin, add2) {
      if (!add2 || !isObject$1(add2))
        return origin;
      var keys2 = Object.keys(add2);
      var i2 = keys2.length;
      while (i2--) {
        origin[keys2[i2]] = add2[keys2[i2]];
      }
      return origin;
    }
    function hasOwnProperty$1(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    var domain;
    function EventHandlers() {
    }
    EventHandlers.prototype = /* @__PURE__ */ Object.create(null);
    function EventEmitter$1() {
      EventEmitter$1.init.call(this);
    }
    EventEmitter$1.EventEmitter = EventEmitter$1;
    EventEmitter$1.usingDomains = false;
    EventEmitter$1.prototype.domain = void 0;
    EventEmitter$1.prototype._events = void 0;
    EventEmitter$1.prototype._maxListeners = void 0;
    EventEmitter$1.defaultMaxListeners = 10;
    EventEmitter$1.init = function() {
      this.domain = null;
      if (EventEmitter$1.usingDomains) {
        if (domain.active)
          ;
      }
      if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
        this._events = new EventHandlers();
        this._eventsCount = 0;
      }
      this._maxListeners = this._maxListeners || void 0;
    };
    EventEmitter$1.prototype.setMaxListeners = function setMaxListeners(n2) {
      if (typeof n2 !== "number" || n2 < 0 || isNaN(n2))
        throw new TypeError('"n" argument must be a positive number');
      this._maxListeners = n2;
      return this;
    };
    function $getMaxListeners(that) {
      if (that._maxListeners === void 0)
        return EventEmitter$1.defaultMaxListeners;
      return that._maxListeners;
    }
    EventEmitter$1.prototype.getMaxListeners = function getMaxListeners() {
      return $getMaxListeners(this);
    };
    function emitNone(handler, isFn, self2) {
      if (isFn)
        handler.call(self2);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i2 = 0; i2 < len; ++i2)
          listeners[i2].call(self2);
      }
    }
    function emitOne(handler, isFn, self2, arg1) {
      if (isFn)
        handler.call(self2, arg1);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i2 = 0; i2 < len; ++i2)
          listeners[i2].call(self2, arg1);
      }
    }
    function emitTwo(handler, isFn, self2, arg1, arg2) {
      if (isFn)
        handler.call(self2, arg1, arg2);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i2 = 0; i2 < len; ++i2)
          listeners[i2].call(self2, arg1, arg2);
      }
    }
    function emitThree(handler, isFn, self2, arg1, arg2, arg3) {
      if (isFn)
        handler.call(self2, arg1, arg2, arg3);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i2 = 0; i2 < len; ++i2)
          listeners[i2].call(self2, arg1, arg2, arg3);
      }
    }
    function emitMany(handler, isFn, self2, args) {
      if (isFn)
        handler.apply(self2, args);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i2 = 0; i2 < len; ++i2)
          listeners[i2].apply(self2, args);
      }
    }
    EventEmitter$1.prototype.emit = function emit2(type2) {
      var er, handler, len, args, i2, events2, domain2;
      var doError = type2 === "error";
      events2 = this._events;
      if (events2)
        doError = doError && events2.error == null;
      else if (!doError)
        return false;
      domain2 = this.domain;
      if (doError) {
        er = arguments[1];
        if (domain2) {
          if (!er)
            er = new Error('Uncaught, unspecified "error" event');
          er.domainEmitter = this;
          er.domain = domain2;
          er.domainThrown = false;
          domain2.emit("error", er);
        } else if (er instanceof Error) {
          throw er;
        } else {
          var err = new Error('Uncaught, unspecified "error" event. (' + er + ")");
          err.context = er;
          throw err;
        }
        return false;
      }
      handler = events2[type2];
      if (!handler)
        return false;
      var isFn = typeof handler === "function";
      len = arguments.length;
      switch (len) {
        case 1:
          emitNone(handler, isFn, this);
          break;
        case 2:
          emitOne(handler, isFn, this, arguments[1]);
          break;
        case 3:
          emitTwo(handler, isFn, this, arguments[1], arguments[2]);
          break;
        case 4:
          emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
          break;
        default:
          args = new Array(len - 1);
          for (i2 = 1; i2 < len; i2++)
            args[i2 - 1] = arguments[i2];
          emitMany(handler, isFn, this, args);
      }
      return true;
    };
    function _addListener(target, type2, listener, prepend) {
      var m2;
      var events2;
      var existing;
      if (typeof listener !== "function")
        throw new TypeError('"listener" argument must be a function');
      events2 = target._events;
      if (!events2) {
        events2 = target._events = new EventHandlers();
        target._eventsCount = 0;
      } else {
        if (events2.newListener) {
          target.emit(
            "newListener",
            type2,
            listener.listener ? listener.listener : listener
          );
          events2 = target._events;
        }
        existing = events2[type2];
      }
      if (!existing) {
        existing = events2[type2] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === "function") {
          existing = events2[type2] = prepend ? [listener, existing] : [existing, listener];
        } else {
          if (prepend) {
            existing.unshift(listener);
          } else {
            existing.push(listener);
          }
        }
        if (!existing.warned) {
          m2 = $getMaxListeners(target);
          if (m2 && m2 > 0 && existing.length > m2) {
            existing.warned = true;
            var w2 = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + type2 + " listeners added. Use emitter.setMaxListeners() to increase limit");
            w2.name = "MaxListenersExceededWarning";
            w2.emitter = target;
            w2.type = type2;
            w2.count = existing.length;
            emitWarning(w2);
          }
        }
      }
      return target;
    }
    function emitWarning(e2) {
      typeof console.warn === "function" ? console.warn(e2) : console.log(e2);
    }
    EventEmitter$1.prototype.addListener = function addListener2(type2, listener) {
      return _addListener(this, type2, listener, false);
    };
    EventEmitter$1.prototype.on = EventEmitter$1.prototype.addListener;
    EventEmitter$1.prototype.prependListener = function prependListener2(type2, listener) {
      return _addListener(this, type2, listener, true);
    };
    function _onceWrap(target, type2, listener) {
      var fired = false;
      function g2() {
        target.removeListener(type2, g2);
        if (!fired) {
          fired = true;
          listener.apply(target, arguments);
        }
      }
      g2.listener = listener;
      return g2;
    }
    EventEmitter$1.prototype.once = function once2(type2, listener) {
      if (typeof listener !== "function")
        throw new TypeError('"listener" argument must be a function');
      this.on(type2, _onceWrap(this, type2, listener));
      return this;
    };
    EventEmitter$1.prototype.prependOnceListener = function prependOnceListener(type2, listener) {
      if (typeof listener !== "function")
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type2, _onceWrap(this, type2, listener));
      return this;
    };
    EventEmitter$1.prototype.removeListener = function removeListener2(type2, listener) {
      var list, events2, position, i2, originalListener;
      if (typeof listener !== "function")
        throw new TypeError('"listener" argument must be a function');
      events2 = this._events;
      if (!events2)
        return this;
      list = events2[type2];
      if (!list)
        return this;
      if (list === listener || list.listener && list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = new EventHandlers();
        else {
          delete events2[type2];
          if (events2.removeListener)
            this.emit("removeListener", type2, list.listener || listener);
        }
      } else if (typeof list !== "function") {
        position = -1;
        for (i2 = list.length; i2-- > 0; ) {
          if (list[i2] === listener || list[i2].listener && list[i2].listener === listener) {
            originalListener = list[i2].listener;
            position = i2;
            break;
          }
        }
        if (position < 0)
          return this;
        if (list.length === 1) {
          list[0] = void 0;
          if (--this._eventsCount === 0) {
            this._events = new EventHandlers();
            return this;
          } else {
            delete events2[type2];
          }
        } else {
          spliceOne(list, position);
        }
        if (events2.removeListener)
          this.emit("removeListener", type2, originalListener || listener);
      }
      return this;
    };
    EventEmitter$1.prototype.removeAllListeners = function removeAllListeners2(type2) {
      var listeners, events2;
      events2 = this._events;
      if (!events2)
        return this;
      if (!events2.removeListener) {
        if (arguments.length === 0) {
          this._events = new EventHandlers();
          this._eventsCount = 0;
        } else if (events2[type2]) {
          if (--this._eventsCount === 0)
            this._events = new EventHandlers();
          else
            delete events2[type2];
        }
        return this;
      }
      if (arguments.length === 0) {
        var keys2 = Object.keys(events2);
        for (var i2 = 0, key; i2 < keys2.length; ++i2) {
          key = keys2[i2];
          if (key === "removeListener")
            continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = new EventHandlers();
        this._eventsCount = 0;
        return this;
      }
      listeners = events2[type2];
      if (typeof listeners === "function") {
        this.removeListener(type2, listeners);
      } else if (listeners) {
        do {
          this.removeListener(type2, listeners[listeners.length - 1]);
        } while (listeners[0]);
      }
      return this;
    };
    EventEmitter$1.prototype.listeners = function listeners(type2) {
      var evlistener;
      var ret;
      var events2 = this._events;
      if (!events2)
        ret = [];
      else {
        evlistener = events2[type2];
        if (!evlistener)
          ret = [];
        else if (typeof evlistener === "function")
          ret = [evlistener.listener || evlistener];
        else
          ret = unwrapListeners(evlistener);
      }
      return ret;
    };
    EventEmitter$1.listenerCount = function(emitter, type2) {
      if (typeof emitter.listenerCount === "function") {
        return emitter.listenerCount(type2);
      } else {
        return listenerCount$1.call(emitter, type2);
      }
    };
    EventEmitter$1.prototype.listenerCount = listenerCount$1;
    function listenerCount$1(type2) {
      var events2 = this._events;
      if (events2) {
        var evlistener = events2[type2];
        if (typeof evlistener === "function") {
          return 1;
        } else if (evlistener) {
          return evlistener.length;
        }
      }
      return 0;
    }
    EventEmitter$1.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
    };
    function spliceOne(list, index2) {
      for (var i2 = index2, k = i2 + 1, n2 = list.length; k < n2; i2 += 1, k += 1)
        list[i2] = list[k];
      list.pop();
    }
    function arrayClone(arr, i2) {
      var copy2 = new Array(i2);
      while (i2--)
        copy2[i2] = arr[i2];
      return copy2;
    }
    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i2 = 0; i2 < ret.length; ++i2) {
        ret[i2] = arr[i2].listener || arr[i2];
      }
      return ret;
    }
    const events = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      default: EventEmitter$1,
      EventEmitter: EventEmitter$1
    }, Symbol.toStringTag, { value: "Module" }));
    function BufferList() {
      this.head = null;
      this.tail = null;
      this.length = 0;
    }
    BufferList.prototype.push = function(v2) {
      var entry = { data: v2, next: null };
      if (this.length > 0)
        this.tail.next = entry;
      else
        this.head = entry;
      this.tail = entry;
      ++this.length;
    };
    BufferList.prototype.unshift = function(v2) {
      var entry = { data: v2, next: this.head };
      if (this.length === 0)
        this.tail = entry;
      this.head = entry;
      ++this.length;
    };
    BufferList.prototype.shift = function() {
      if (this.length === 0)
        return;
      var ret = this.head.data;
      if (this.length === 1)
        this.head = this.tail = null;
      else
        this.head = this.head.next;
      --this.length;
      return ret;
    };
    BufferList.prototype.clear = function() {
      this.head = this.tail = null;
      this.length = 0;
    };
    BufferList.prototype.join = function(s2) {
      if (this.length === 0)
        return "";
      var p2 = this.head;
      var ret = "" + p2.data;
      while (p2 = p2.next) {
        ret += s2 + p2.data;
      }
      return ret;
    };
    BufferList.prototype.concat = function(n2) {
      if (this.length === 0)
        return Buffer$1.alloc(0);
      if (this.length === 1)
        return this.head.data;
      var ret = Buffer$1.allocUnsafe(n2 >>> 0);
      var p2 = this.head;
      var i2 = 0;
      while (p2) {
        p2.data.copy(ret, i2);
        i2 += p2.data.length;
        p2 = p2.next;
      }
      return ret;
    };
    var isBufferEncoding = Buffer$1.isEncoding || function(encoding) {
      switch (encoding && encoding.toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
          return true;
        default:
          return false;
      }
    };
    function assertEncoding(encoding) {
      if (encoding && !isBufferEncoding(encoding)) {
        throw new Error("Unknown encoding: " + encoding);
      }
    }
    function StringDecoder(encoding) {
      this.encoding = (encoding || "utf8").toLowerCase().replace(/[-_]/, "");
      assertEncoding(encoding);
      switch (this.encoding) {
        case "utf8":
          this.surrogateSize = 3;
          break;
        case "ucs2":
        case "utf16le":
          this.surrogateSize = 2;
          this.detectIncompleteChar = utf16DetectIncompleteChar;
          break;
        case "base64":
          this.surrogateSize = 3;
          this.detectIncompleteChar = base64DetectIncompleteChar;
          break;
        default:
          this.write = passThroughWrite;
          return;
      }
      this.charBuffer = new Buffer$1(6);
      this.charReceived = 0;
      this.charLength = 0;
    }
    StringDecoder.prototype.write = function(buffer2) {
      var charStr = "";
      while (this.charLength) {
        var available = buffer2.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer2.length;
        buffer2.copy(this.charBuffer, this.charReceived, 0, available);
        this.charReceived += available;
        if (this.charReceived < this.charLength) {
          return "";
        }
        buffer2 = buffer2.slice(available, buffer2.length);
        charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
        var charCode = charStr.charCodeAt(charStr.length - 1);
        if (charCode >= 55296 && charCode <= 56319) {
          this.charLength += this.surrogateSize;
          charStr = "";
          continue;
        }
        this.charReceived = this.charLength = 0;
        if (buffer2.length === 0) {
          return charStr;
        }
        break;
      }
      this.detectIncompleteChar(buffer2);
      var end2 = buffer2.length;
      if (this.charLength) {
        buffer2.copy(this.charBuffer, 0, buffer2.length - this.charReceived, end2);
        end2 -= this.charReceived;
      }
      charStr += buffer2.toString(this.encoding, 0, end2);
      var end2 = charStr.length - 1;
      var charCode = charStr.charCodeAt(end2);
      if (charCode >= 55296 && charCode <= 56319) {
        var size2 = this.surrogateSize;
        this.charLength += size2;
        this.charReceived += size2;
        this.charBuffer.copy(this.charBuffer, size2, 0, size2);
        buffer2.copy(this.charBuffer, 0, 0, size2);
        return charStr.substring(0, end2);
      }
      return charStr;
    };
    StringDecoder.prototype.detectIncompleteChar = function(buffer2) {
      var i2 = buffer2.length >= 3 ? 3 : buffer2.length;
      for (; i2 > 0; i2--) {
        var c2 = buffer2[buffer2.length - i2];
        if (i2 == 1 && c2 >> 5 == 6) {
          this.charLength = 2;
          break;
        }
        if (i2 <= 2 && c2 >> 4 == 14) {
          this.charLength = 3;
          break;
        }
        if (i2 <= 3 && c2 >> 3 == 30) {
          this.charLength = 4;
          break;
        }
      }
      this.charReceived = i2;
    };
    StringDecoder.prototype.end = function(buffer2) {
      var res = "";
      if (buffer2 && buffer2.length)
        res = this.write(buffer2);
      if (this.charReceived) {
        var cr = this.charReceived;
        var buf = this.charBuffer;
        var enc = this.encoding;
        res += buf.slice(0, cr).toString(enc);
      }
      return res;
    };
    function passThroughWrite(buffer2) {
      return buffer2.toString(this.encoding);
    }
    function utf16DetectIncompleteChar(buffer2) {
      this.charReceived = buffer2.length % 2;
      this.charLength = this.charReceived ? 2 : 0;
    }
    function base64DetectIncompleteChar(buffer2) {
      this.charReceived = buffer2.length % 3;
      this.charLength = this.charReceived ? 3 : 0;
    }
    const stringDecoder = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      StringDecoder
    }, Symbol.toStringTag, { value: "Module" }));
    Readable.ReadableState = ReadableState;
    var debug = debuglog("stream");
    inherits$1(Readable, EventEmitter$1);
    function prependListener(emitter, event, fn2) {
      if (typeof emitter.prependListener === "function") {
        return emitter.prependListener(event, fn2);
      } else {
        if (!emitter._events || !emitter._events[event])
          emitter.on(event, fn2);
        else if (Array.isArray(emitter._events[event]))
          emitter._events[event].unshift(fn2);
        else
          emitter._events[event] = [fn2, emitter._events[event]];
      }
    }
    function listenerCount(emitter, type2) {
      return emitter.listeners(type2).length;
    }
    function ReadableState(options, stream2) {
      options = options || {};
      this.objectMode = !!options.objectMode;
      if (stream2 instanceof Duplex)
        this.objectMode = this.objectMode || !!options.readableObjectMode;
      var hwm = options.highWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
      this.highWaterMark = ~~this.highWaterMark;
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;
      this.sync = true;
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.ranOut = false;
      this.awaitDrain = 0;
      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {
      if (!(this instanceof Readable))
        return new Readable(options);
      this._readableState = new ReadableState(options, this);
      this.readable = true;
      if (options && typeof options.read === "function")
        this._read = options.read;
      EventEmitter$1.call(this);
    }
    Readable.prototype.push = function(chunk, encoding) {
      var state = this._readableState;
      if (!state.objectMode && typeof chunk === "string") {
        encoding = encoding || state.defaultEncoding;
        if (encoding !== state.encoding) {
          chunk = Buffer$1.from(chunk, encoding);
          encoding = "";
        }
      }
      return readableAddChunk(this, state, chunk, encoding, false);
    };
    Readable.prototype.unshift = function(chunk) {
      var state = this._readableState;
      return readableAddChunk(this, state, chunk, "", true);
    };
    Readable.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    function readableAddChunk(stream2, state, chunk, encoding, addToFront) {
      var er = chunkInvalid(state, chunk);
      if (er) {
        stream2.emit("error", er);
      } else if (chunk === null) {
        state.reading = false;
        onEofChunk(stream2, state);
      } else if (state.objectMode || chunk && chunk.length > 0) {
        if (state.ended && !addToFront) {
          var e2 = new Error("stream.push() after EOF");
          stream2.emit("error", e2);
        } else if (state.endEmitted && addToFront) {
          var _e = new Error("stream.unshift() after end event");
          stream2.emit("error", _e);
        } else {
          var skipAdd;
          if (state.decoder && !addToFront && !encoding) {
            chunk = state.decoder.write(chunk);
            skipAdd = !state.objectMode && chunk.length === 0;
          }
          if (!addToFront)
            state.reading = false;
          if (!skipAdd) {
            if (state.flowing && state.length === 0 && !state.sync) {
              stream2.emit("data", chunk);
              stream2.read(0);
            } else {
              state.length += state.objectMode ? 1 : chunk.length;
              if (addToFront)
                state.buffer.unshift(chunk);
              else
                state.buffer.push(chunk);
              if (state.needReadable)
                emitReadable(stream2);
            }
          }
          maybeReadMore(stream2, state);
        }
      } else if (!addToFront) {
        state.reading = false;
      }
      return needMoreData(state);
    }
    function needMoreData(state) {
      return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
    }
    Readable.prototype.setEncoding = function(enc) {
      this._readableState.decoder = new StringDecoder(enc);
      this._readableState.encoding = enc;
      return this;
    };
    var MAX_HWM = 8388608;
    function computeNewHighWaterMark(n2) {
      if (n2 >= MAX_HWM) {
        n2 = MAX_HWM;
      } else {
        n2--;
        n2 |= n2 >>> 1;
        n2 |= n2 >>> 2;
        n2 |= n2 >>> 4;
        n2 |= n2 >>> 8;
        n2 |= n2 >>> 16;
        n2++;
      }
      return n2;
    }
    function howMuchToRead(n2, state) {
      if (n2 <= 0 || state.length === 0 && state.ended)
        return 0;
      if (state.objectMode)
        return 1;
      if (n2 !== n2) {
        if (state.flowing && state.length)
          return state.buffer.head.data.length;
        else
          return state.length;
      }
      if (n2 > state.highWaterMark)
        state.highWaterMark = computeNewHighWaterMark(n2);
      if (n2 <= state.length)
        return n2;
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }
    Readable.prototype.read = function(n2) {
      debug("read", n2);
      n2 = parseInt(n2, 10);
      var state = this._readableState;
      var nOrig = n2;
      if (n2 !== 0)
        state.emittedReadable = false;
      if (n2 === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended)
          endReadable(this);
        else
          emitReadable(this);
        return null;
      }
      n2 = howMuchToRead(n2, state);
      if (n2 === 0 && state.ended) {
        if (state.length === 0)
          endReadable(this);
        return null;
      }
      var doRead = state.needReadable;
      debug("need readable", doRead);
      if (state.length === 0 || state.length - n2 < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
      }
      if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
      } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true;
        if (state.length === 0)
          state.needReadable = true;
        this._read(state.highWaterMark);
        state.sync = false;
        if (!state.reading)
          n2 = howMuchToRead(nOrig, state);
      }
      var ret;
      if (n2 > 0)
        ret = fromList(n2, state);
      else
        ret = null;
      if (ret === null) {
        state.needReadable = true;
        n2 = 0;
      } else {
        state.length -= n2;
      }
      if (state.length === 0) {
        if (!state.ended)
          state.needReadable = true;
        if (nOrig !== n2 && state.ended)
          endReadable(this);
      }
      if (ret !== null)
        this.emit("data", ret);
      return ret;
    };
    function chunkInvalid(state, chunk) {
      var er = null;
      if (!Buffer$1.isBuffer(chunk) && typeof chunk !== "string" && chunk !== null && chunk !== void 0 && !state.objectMode) {
        er = new TypeError("Invalid non-string/buffer chunk");
      }
      return er;
    }
    function onEofChunk(stream2, state) {
      if (state.ended)
        return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;
      emitReadable(stream2);
    }
    function emitReadable(stream2) {
      var state = stream2._readableState;
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        if (state.sync)
          nextTick(emitReadable_, stream2);
        else
          emitReadable_(stream2);
      }
    }
    function emitReadable_(stream2) {
      debug("emit readable");
      stream2.emit("readable");
      flow(stream2);
    }
    function maybeReadMore(stream2, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        nextTick(maybeReadMore_, stream2, state);
      }
    }
    function maybeReadMore_(stream2, state) {
      var len = state.length;
      while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
        debug("maybeReadMore read 0");
        stream2.read(0);
        if (len === state.length)
          break;
        else
          len = state.length;
      }
      state.readingMore = false;
    }
    Readable.prototype._read = function(n2) {
      this.emit("error", new Error("not implemented"));
    };
    Readable.prototype.pipe = function(dest, pipeOpts) {
      var src = this;
      var state = this._readableState;
      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
      var doEnd = !pipeOpts || pipeOpts.end !== false;
      var endFn = doEnd ? onend2 : cleanup;
      if (state.endEmitted)
        nextTick(endFn);
      else
        src.once("end", endFn);
      dest.on("unpipe", onunpipe);
      function onunpipe(readable) {
        debug("onunpipe");
        if (readable === src) {
          cleanup();
        }
      }
      function onend2() {
        debug("onend");
        dest.end();
      }
      var ondrain = pipeOnDrain(src);
      dest.on("drain", ondrain);
      var cleanedUp = false;
      function cleanup() {
        debug("cleanup");
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend2);
        src.removeListener("end", cleanup);
        src.removeListener("data", ondata);
        cleanedUp = true;
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
          ondrain();
      }
      var increasedAwaitDrain = false;
      src.on("data", ondata);
      function ondata(chunk) {
        debug("ondata");
        increasedAwaitDrain = false;
        var ret = dest.write(chunk);
        if (false === ret && !increasedAwaitDrain) {
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug("false write response, pause", src._readableState.awaitDrain);
            src._readableState.awaitDrain++;
            increasedAwaitDrain = true;
          }
          src.pause();
        }
      }
      function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (listenerCount(dest, "error") === 0)
          dest.emit("error", er);
      }
      prependListener(dest, "error", onerror);
      function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
      }
      dest.once("close", onclose);
      function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
      }
      dest.once("finish", onfinish);
      function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
      }
      dest.emit("pipe", src);
      if (!state.flowing) {
        debug("pipe resume");
        src.resume();
      }
      return dest;
    };
    function pipeOnDrain(src) {
      return function() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain)
          state.awaitDrain--;
        if (state.awaitDrain === 0 && src.listeners("data").length) {
          state.flowing = true;
          flow(src);
        }
      };
    }
    Readable.prototype.unpipe = function(dest) {
      var state = this._readableState;
      if (state.pipesCount === 0)
        return this;
      if (state.pipesCount === 1) {
        if (dest && dest !== state.pipes)
          return this;
        if (!dest)
          dest = state.pipes;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest)
          dest.emit("unpipe", this);
        return this;
      }
      if (!dest) {
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for (var _i = 0; _i < len; _i++) {
          dests[_i].emit("unpipe", this);
        }
        return this;
      }
      var i2 = indexOf(state.pipes, dest);
      if (i2 === -1)
        return this;
      state.pipes.splice(i2, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1)
        state.pipes = state.pipes[0];
      dest.emit("unpipe", this);
      return this;
    };
    Readable.prototype.on = function(ev, fn2) {
      var res = EventEmitter$1.prototype.on.call(this, ev, fn2);
      if (ev === "data") {
        if (this._readableState.flowing !== false)
          this.resume();
      } else if (ev === "readable") {
        var state = this._readableState;
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.emittedReadable = false;
          if (!state.reading) {
            nextTick(nReadingNextTick, this);
          } else if (state.length) {
            emitReadable(this);
          }
        }
      }
      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;
    function nReadingNextTick(self2) {
      debug("readable nexttick read 0");
      self2.read(0);
    }
    Readable.prototype.resume = function() {
      var state = this._readableState;
      if (!state.flowing) {
        debug("resume");
        state.flowing = true;
        resume(this, state);
      }
      return this;
    };
    function resume(stream2, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        nextTick(resume_, stream2, state);
      }
    }
    function resume_(stream2, state) {
      if (!state.reading) {
        debug("resume read 0");
        stream2.read(0);
      }
      state.resumeScheduled = false;
      state.awaitDrain = 0;
      stream2.emit("resume");
      flow(stream2);
      if (state.flowing && !state.reading)
        stream2.read(0);
    }
    Readable.prototype.pause = function() {
      debug("call pause flowing=%j", this._readableState.flowing);
      if (false !== this._readableState.flowing) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
      }
      return this;
    };
    function flow(stream2) {
      var state = stream2._readableState;
      debug("flow", state.flowing);
      while (state.flowing && stream2.read() !== null) {
      }
    }
    Readable.prototype.wrap = function(stream2) {
      var state = this._readableState;
      var paused = false;
      var self2 = this;
      stream2.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length)
            self2.push(chunk);
        }
        self2.push(null);
      });
      stream2.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder)
          chunk = state.decoder.write(chunk);
        if (state.objectMode && (chunk === null || chunk === void 0))
          return;
        else if (!state.objectMode && (!chunk || !chunk.length))
          return;
        var ret = self2.push(chunk);
        if (!ret) {
          paused = true;
          stream2.pause();
        }
      });
      for (var i2 in stream2) {
        if (this[i2] === void 0 && typeof stream2[i2] === "function") {
          this[i2] = function(method2) {
            return function() {
              return stream2[method2].apply(stream2, arguments);
            };
          }(i2);
        }
      }
      var events2 = ["error", "close", "destroy", "pause", "resume"];
      forEach(events2, function(ev) {
        stream2.on(ev, self2.emit.bind(self2, ev));
      });
      self2._read = function(n2) {
        debug("wrapped _read", n2);
        if (paused) {
          paused = false;
          stream2.resume();
        }
      };
      return self2;
    };
    Readable._fromList = fromList;
    function fromList(n2, state) {
      if (state.length === 0)
        return null;
      var ret;
      if (state.objectMode)
        ret = state.buffer.shift();
      else if (!n2 || n2 >= state.length) {
        if (state.decoder)
          ret = state.buffer.join("");
        else if (state.buffer.length === 1)
          ret = state.buffer.head.data;
        else
          ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        ret = fromListPartial(n2, state.buffer, state.decoder);
      }
      return ret;
    }
    function fromListPartial(n2, list, hasStrings) {
      var ret;
      if (n2 < list.head.data.length) {
        ret = list.head.data.slice(0, n2);
        list.head.data = list.head.data.slice(n2);
      } else if (n2 === list.head.data.length) {
        ret = list.shift();
      } else {
        ret = hasStrings ? copyFromBufferString(n2, list) : copyFromBuffer(n2, list);
      }
      return ret;
    }
    function copyFromBufferString(n2, list) {
      var p2 = list.head;
      var c2 = 1;
      var ret = p2.data;
      n2 -= ret.length;
      while (p2 = p2.next) {
        var str2 = p2.data;
        var nb = n2 > str2.length ? str2.length : n2;
        if (nb === str2.length)
          ret += str2;
        else
          ret += str2.slice(0, n2);
        n2 -= nb;
        if (n2 === 0) {
          if (nb === str2.length) {
            ++c2;
            if (p2.next)
              list.head = p2.next;
            else
              list.head = list.tail = null;
          } else {
            list.head = p2;
            p2.data = str2.slice(nb);
          }
          break;
        }
        ++c2;
      }
      list.length -= c2;
      return ret;
    }
    function copyFromBuffer(n2, list) {
      var ret = Buffer$1.allocUnsafe(n2);
      var p2 = list.head;
      var c2 = 1;
      p2.data.copy(ret);
      n2 -= p2.data.length;
      while (p2 = p2.next) {
        var buf = p2.data;
        var nb = n2 > buf.length ? buf.length : n2;
        buf.copy(ret, ret.length - n2, 0, nb);
        n2 -= nb;
        if (n2 === 0) {
          if (nb === buf.length) {
            ++c2;
            if (p2.next)
              list.head = p2.next;
            else
              list.head = list.tail = null;
          } else {
            list.head = p2;
            p2.data = buf.slice(nb);
          }
          break;
        }
        ++c2;
      }
      list.length -= c2;
      return ret;
    }
    function endReadable(stream2) {
      var state = stream2._readableState;
      if (state.length > 0)
        throw new Error('"endReadable()" called on non-empty stream');
      if (!state.endEmitted) {
        state.ended = true;
        nextTick(endReadableNT, state, stream2);
      }
    }
    function endReadableNT(state, stream2) {
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream2.readable = false;
        stream2.emit("end");
      }
    }
    function forEach(xs, f2) {
      for (var i2 = 0, l2 = xs.length; i2 < l2; i2++) {
        f2(xs[i2], i2);
      }
    }
    function indexOf(xs, x2) {
      for (var i2 = 0, l2 = xs.length; i2 < l2; i2++) {
        if (xs[i2] === x2)
          return i2;
      }
      return -1;
    }
    Writable.WritableState = WritableState;
    inherits$1(Writable, EventEmitter$1);
    function nop() {
    }
    function WriteReq(chunk, encoding, cb) {
      this.chunk = chunk;
      this.encoding = encoding;
      this.callback = cb;
      this.next = null;
    }
    function WritableState(options, stream2) {
      Object.defineProperty(this, "buffer", {
        get: deprecate(function() {
          return this.getBuffer();
        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.")
      });
      options = options || {};
      this.objectMode = !!options.objectMode;
      if (stream2 instanceof Duplex)
        this.objectMode = this.objectMode || !!options.writableObjectMode;
      var hwm = options.highWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
      this.highWaterMark = ~~this.highWaterMark;
      this.needDrain = false;
      this.ending = false;
      this.ended = false;
      this.finished = false;
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.length = 0;
      this.writing = false;
      this.corked = 0;
      this.sync = true;
      this.bufferProcessing = false;
      this.onwrite = function(er) {
        onwrite(stream2, er);
      };
      this.writecb = null;
      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null;
      this.pendingcb = 0;
      this.prefinished = false;
      this.errorEmitted = false;
      this.bufferedRequestCount = 0;
      this.corkedRequestsFree = new CorkedRequest(this);
    }
    WritableState.prototype.getBuffer = function writableStateGetBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    function Writable(options) {
      if (!(this instanceof Writable) && !(this instanceof Duplex))
        return new Writable(options);
      this._writableState = new WritableState(options, this);
      this.writable = true;
      if (options) {
        if (typeof options.write === "function")
          this._write = options.write;
        if (typeof options.writev === "function")
          this._writev = options.writev;
      }
      EventEmitter$1.call(this);
    }
    Writable.prototype.pipe = function() {
      this.emit("error", new Error("Cannot pipe, not readable"));
    };
    function writeAfterEnd(stream2, cb) {
      var er = new Error("write after end");
      stream2.emit("error", er);
      nextTick(cb, er);
    }
    function validChunk(stream2, state, chunk, cb) {
      var valid = true;
      var er = false;
      if (chunk === null) {
        er = new TypeError("May not write null values to stream");
      } else if (!Buffer$1.isBuffer(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
        er = new TypeError("Invalid non-string/buffer chunk");
      }
      if (er) {
        stream2.emit("error", er);
        nextTick(cb, er);
        valid = false;
      }
      return valid;
    }
    Writable.prototype.write = function(chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;
      if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (Buffer$1.isBuffer(chunk))
        encoding = "buffer";
      else if (!encoding)
        encoding = state.defaultEncoding;
      if (typeof cb !== "function")
        cb = nop;
      if (state.ended)
        writeAfterEnd(this, cb);
      else if (validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, chunk, encoding, cb);
      }
      return ret;
    };
    Writable.prototype.cork = function() {
      var state = this._writableState;
      state.corked++;
    };
    Writable.prototype.uncork = function() {
      var state = this._writableState;
      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest)
          clearBuffer(this, state);
      }
    };
    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      if (typeof encoding === "string")
        encoding = encoding.toLowerCase();
      if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
        throw new TypeError("Unknown encoding: " + encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };
    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
        chunk = Buffer$1.from(chunk, encoding);
      }
      return chunk;
    }
    function writeOrBuffer(stream2, state, chunk, encoding, cb) {
      chunk = decodeChunk(state, chunk, encoding);
      if (Buffer$1.isBuffer(chunk))
        encoding = "buffer";
      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark;
      if (!ret)
        state.needDrain = true;
      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream2, state, false, len, chunk, encoding, cb);
      }
      return ret;
    }
    function doWrite(stream2, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (writev)
        stream2._writev(chunk, state.onwrite);
      else
        stream2._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }
    function onwriteError(stream2, state, sync, er, cb) {
      --state.pendingcb;
      if (sync)
        nextTick(cb, er);
      else
        cb(er);
      stream2._writableState.errorEmitted = true;
      stream2.emit("error", er);
    }
    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }
    function onwrite(stream2, er) {
      var state = stream2._writableState;
      var sync = state.sync;
      var cb = state.writecb;
      onwriteStateUpdate(state);
      if (er)
        onwriteError(stream2, state, sync, er, cb);
      else {
        var finished = needFinish(state);
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream2, state);
        }
        if (sync) {
          nextTick(afterWrite, stream2, state, finished, cb);
        } else {
          afterWrite(stream2, state, finished, cb);
        }
      }
    }
    function afterWrite(stream2, state, finished, cb) {
      if (!finished)
        onwriteDrain(stream2, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream2, state);
    }
    function onwriteDrain(stream2, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream2.emit("drain");
      }
    }
    function clearBuffer(stream2, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;
      if (stream2._writev && entry && entry.next) {
        var l2 = state.bufferedRequestCount;
        var buffer2 = new Array(l2);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        while (entry) {
          buffer2[count] = entry;
          entry = entry.next;
          count += 1;
        }
        doWrite(stream2, state, true, state.length, buffer2, "", holder.finish);
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
      } else {
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite(stream2, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          if (state.writing) {
            break;
          }
        }
        if (entry === null)
          state.lastBufferedRequest = null;
      }
      state.bufferedRequestCount = 0;
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }
    Writable.prototype._write = function(chunk, encoding, cb) {
      cb(new Error("not implemented"));
    };
    Writable.prototype._writev = null;
    Writable.prototype.end = function(chunk, encoding, cb) {
      var state = this._writableState;
      if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (chunk !== null && chunk !== void 0)
        this.write(chunk, encoding);
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }
      if (!state.ending && !state.finished)
        endWritable(this, state, cb);
    };
    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }
    function prefinish(stream2, state) {
      if (!state.prefinished) {
        state.prefinished = true;
        stream2.emit("prefinish");
      }
    }
    function finishMaybe(stream2, state) {
      var need = needFinish(state);
      if (need) {
        if (state.pendingcb === 0) {
          prefinish(stream2, state);
          state.finished = true;
          stream2.emit("finish");
        } else {
          prefinish(stream2, state);
        }
      }
      return need;
    }
    function endWritable(stream2, state, cb) {
      state.ending = true;
      finishMaybe(stream2, state);
      if (cb) {
        if (state.finished)
          nextTick(cb);
        else
          stream2.once("finish", cb);
      }
      state.ended = true;
      stream2.writable = false;
    }
    function CorkedRequest(state) {
      var _this = this;
      this.next = null;
      this.entry = null;
      this.finish = function(err) {
        var entry = _this.entry;
        _this.entry = null;
        while (entry) {
          var cb = entry.callback;
          state.pendingcb--;
          cb(err);
          entry = entry.next;
        }
        if (state.corkedRequestsFree) {
          state.corkedRequestsFree.next = _this;
        } else {
          state.corkedRequestsFree = _this;
        }
      };
    }
    inherits$1(Duplex, Readable);
    var keys = Object.keys(Writable.prototype);
    for (var v = 0; v < keys.length; v++) {
      var method = keys[v];
      if (!Duplex.prototype[method])
        Duplex.prototype[method] = Writable.prototype[method];
    }
    function Duplex(options) {
      if (!(this instanceof Duplex))
        return new Duplex(options);
      Readable.call(this, options);
      Writable.call(this, options);
      if (options && options.readable === false)
        this.readable = false;
      if (options && options.writable === false)
        this.writable = false;
      this.allowHalfOpen = true;
      if (options && options.allowHalfOpen === false)
        this.allowHalfOpen = false;
      this.once("end", onend);
    }
    function onend() {
      if (this.allowHalfOpen || this._writableState.ended)
        return;
      nextTick(onEndNT, this);
    }
    function onEndNT(self2) {
      self2.end();
    }
    inherits$1(Transform, Duplex);
    function TransformState(stream2) {
      this.afterTransform = function(er, data) {
        return afterTransform(stream2, er, data);
      };
      this.needTransform = false;
      this.transforming = false;
      this.writecb = null;
      this.writechunk = null;
      this.writeencoding = null;
    }
    function afterTransform(stream2, er, data) {
      var ts = stream2._transformState;
      ts.transforming = false;
      var cb = ts.writecb;
      if (!cb)
        return stream2.emit("error", new Error("no writecb in Transform class"));
      ts.writechunk = null;
      ts.writecb = null;
      if (data !== null && data !== void 0)
        stream2.push(data);
      cb(er);
      var rs = stream2._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        stream2._read(rs.highWaterMark);
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform))
        return new Transform(options);
      Duplex.call(this, options);
      this._transformState = new TransformState(this);
      var stream2 = this;
      this._readableState.needReadable = true;
      this._readableState.sync = false;
      if (options) {
        if (typeof options.transform === "function")
          this._transform = options.transform;
        if (typeof options.flush === "function")
          this._flush = options.flush;
      }
      this.once("prefinish", function() {
        if (typeof this._flush === "function")
          this._flush(function(er) {
            done(stream2, er);
          });
        else
          done(stream2);
      });
    }
    Transform.prototype.push = function(chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };
    Transform.prototype._transform = function(chunk, encoding, cb) {
      throw new Error("Not implemented");
    };
    Transform.prototype._write = function(chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
          this._read(rs.highWaterMark);
      }
    };
    Transform.prototype._read = function(n2) {
      var ts = this._transformState;
      if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        ts.needTransform = true;
      }
    };
    function done(stream2, er) {
      if (er)
        return stream2.emit("error", er);
      var ws = stream2._writableState;
      var ts = stream2._transformState;
      if (ws.length)
        throw new Error("Calling transform done when ws.length != 0");
      if (ts.transforming)
        throw new Error("Calling transform done when still transforming");
      return stream2.push(null);
    }
    inherits$1(PassThrough, Transform);
    function PassThrough(options) {
      if (!(this instanceof PassThrough))
        return new PassThrough(options);
      Transform.call(this, options);
    }
    PassThrough.prototype._transform = function(chunk, encoding, cb) {
      cb(null, chunk);
    };
    inherits$1(Stream, EventEmitter$1);
    Stream.Readable = Readable;
    Stream.Writable = Writable;
    Stream.Duplex = Duplex;
    Stream.Transform = Transform;
    Stream.PassThrough = PassThrough;
    Stream.Stream = Stream;
    function Stream() {
      EventEmitter$1.call(this);
    }
    Stream.prototype.pipe = function(dest, options) {
      var source = this;
      function ondata(chunk) {
        if (dest.writable) {
          if (false === dest.write(chunk) && source.pause) {
            source.pause();
          }
        }
      }
      source.on("data", ondata);
      function ondrain() {
        if (source.readable && source.resume) {
          source.resume();
        }
      }
      dest.on("drain", ondrain);
      if (!dest._isStdio && (!options || options.end !== false)) {
        source.on("end", onend2);
        source.on("close", onclose);
      }
      var didOnEnd = false;
      function onend2() {
        if (didOnEnd)
          return;
        didOnEnd = true;
        dest.end();
      }
      function onclose() {
        if (didOnEnd)
          return;
        didOnEnd = true;
        if (typeof dest.destroy === "function")
          dest.destroy();
      }
      function onerror(er) {
        cleanup();
        if (EventEmitter$1.listenerCount(this, "error") === 0) {
          throw er;
        }
      }
      source.on("error", onerror);
      dest.on("error", onerror);
      function cleanup() {
        source.removeListener("data", ondata);
        dest.removeListener("drain", ondrain);
        source.removeListener("end", onend2);
        source.removeListener("close", onclose);
        source.removeListener("error", onerror);
        dest.removeListener("error", onerror);
        source.removeListener("end", cleanup);
        source.removeListener("close", cleanup);
        dest.removeListener("close", cleanup);
      }
      source.on("end", cleanup);
      source.on("close", cleanup);
      dest.on("close", cleanup);
      dest.emit("pipe", source);
      return dest;
    };
    const stream = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      default: Stream,
      Readable,
      Writable,
      Duplex,
      Transform,
      PassThrough,
      Stream
    }, Symbol.toStringTag, { value: "Module" }));
    var rStates = {
      UNSENT: 0,
      OPENED: 1,
      HEADERS_RECEIVED: 2,
      LOADING: 3,
      DONE: 4
    };
    function IncomingMessage(xhr2, response, mode) {
      var self2 = this;
      Readable.call(self2);
      self2._mode = mode;
      self2.headers = {};
      self2.rawHeaders = [];
      self2.trailers = {};
      self2.rawTrailers = [];
      self2.on("end", function() {
        browser$1.nextTick(function() {
          self2.emit("close");
        });
      });
      var read2;
      if (mode === "fetch") {
        self2._fetchResponse = response;
        self2.url = response.url;
        self2.statusCode = response.status;
        self2.statusMessage = response.statusText;
        for (var header, _i, _it = response.headers[Symbol.iterator](); header = (_i = _it.next()).value, !_i.done; ) {
          self2.headers[header[0].toLowerCase()] = header[1];
          self2.rawHeaders.push(header[0], header[1]);
        }
        var reader = response.body.getReader();
        read2 = function() {
          reader.read().then(function(result) {
            if (self2._destroyed)
              return;
            if (result.done) {
              self2.push(null);
              return;
            }
            self2.push(new Buffer$1(result.value));
            read2();
          });
        };
        read2();
      } else {
        self2._xhr = xhr2;
        self2._pos = 0;
        self2.url = xhr2.responseURL;
        self2.statusCode = xhr2.status;
        self2.statusMessage = xhr2.statusText;
        var headers = xhr2.getAllResponseHeaders().split(/\r?\n/);
        headers.forEach(function(header2) {
          var matches2 = header2.match(/^([^:]+):\s*(.*)/);
          if (matches2) {
            var key = matches2[1].toLowerCase();
            if (key === "set-cookie") {
              if (self2.headers[key] === void 0) {
                self2.headers[key] = [];
              }
              self2.headers[key].push(matches2[2]);
            } else if (self2.headers[key] !== void 0) {
              self2.headers[key] += ", " + matches2[2];
            } else {
              self2.headers[key] = matches2[2];
            }
            self2.rawHeaders.push(matches2[1], matches2[2]);
          }
        });
        self2._charset = "x-user-defined";
        if (!overrideMimeType) {
          var mimeType = self2.rawHeaders["mime-type"];
          if (mimeType) {
            var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
            if (charsetMatch) {
              self2._charset = charsetMatch[1].toLowerCase();
            }
          }
          if (!self2._charset)
            self2._charset = "utf-8";
        }
      }
    }
    inherits$1(IncomingMessage, Readable);
    IncomingMessage.prototype._read = function() {
    };
    IncomingMessage.prototype._onXHRProgress = function() {
      var self2 = this;
      var xhr2 = self2._xhr;
      var response = null;
      switch (self2._mode) {
        case "text:vbarray":
          if (xhr2.readyState !== rStates.DONE)
            break;
          try {
            response = new global$1.VBArray(xhr2.responseBody).toArray();
          } catch (e2) {
          }
          if (response !== null) {
            self2.push(new Buffer$1(response));
            break;
          }
        case "text":
          try {
            response = xhr2.responseText;
          } catch (e2) {
            self2._mode = "text:vbarray";
            break;
          }
          if (response.length > self2._pos) {
            var newData = response.substr(self2._pos);
            if (self2._charset === "x-user-defined") {
              var buffer2 = new Buffer$1(newData.length);
              for (var i2 = 0; i2 < newData.length; i2++)
                buffer2[i2] = newData.charCodeAt(i2) & 255;
              self2.push(buffer2);
            } else {
              self2.push(newData, self2._charset);
            }
            self2._pos = response.length;
          }
          break;
        case "arraybuffer":
          if (xhr2.readyState !== rStates.DONE || !xhr2.response)
            break;
          response = xhr2.response;
          self2.push(new Buffer$1(new Uint8Array(response)));
          break;
        case "moz-chunked-arraybuffer":
          response = xhr2.response;
          if (xhr2.readyState !== rStates.LOADING || !response)
            break;
          self2.push(new Buffer$1(new Uint8Array(response)));
          break;
        case "ms-stream":
          response = xhr2.response;
          if (xhr2.readyState !== rStates.LOADING)
            break;
          var reader = new global$1.MSStreamReader();
          reader.onprogress = function() {
            if (reader.result.byteLength > self2._pos) {
              self2.push(new Buffer$1(new Uint8Array(reader.result.slice(self2._pos))));
              self2._pos = reader.result.byteLength;
            }
          };
          reader.onload = function() {
            self2.push(null);
          };
          reader.readAsArrayBuffer(response);
          break;
      }
      if (self2._xhr.readyState === rStates.DONE && self2._mode !== "ms-stream") {
        self2.push(null);
      }
    };
    function toArrayBuffer(buf) {
      if (buf instanceof Uint8Array) {
        if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
          return buf.buffer;
        } else if (typeof buf.buffer.slice === "function") {
          return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        }
      }
      if (isBuffer(buf)) {
        var arrayCopy = new Uint8Array(buf.length);
        var len = buf.length;
        for (var i2 = 0; i2 < len; i2++) {
          arrayCopy[i2] = buf[i2];
        }
        return arrayCopy.buffer;
      } else {
        throw new Error("Argument must be a Buffer");
      }
    }
    function decideMode(preferBinary, useFetch) {
      if (hasFetch && useFetch) {
        return "fetch";
      } else if (mozchunkedarraybuffer) {
        return "moz-chunked-arraybuffer";
      } else if (msstream) {
        return "ms-stream";
      } else if (arraybuffer && preferBinary) {
        return "arraybuffer";
      } else if (vbArray && preferBinary) {
        return "text:vbarray";
      } else {
        return "text";
      }
    }
    function ClientRequest(opts) {
      var self2 = this;
      Writable.call(self2);
      self2._opts = opts;
      self2._body = [];
      self2._headers = {};
      if (opts.auth)
        self2.setHeader("Authorization", "Basic " + new Buffer$1(opts.auth).toString("base64"));
      Object.keys(opts.headers).forEach(function(name) {
        self2.setHeader(name, opts.headers[name]);
      });
      var preferBinary;
      var useFetch = true;
      if (opts.mode === "disable-fetch") {
        useFetch = false;
        preferBinary = true;
      } else if (opts.mode === "prefer-streaming") {
        preferBinary = false;
      } else if (opts.mode === "allow-wrong-content-type") {
        preferBinary = !overrideMimeType;
      } else if (!opts.mode || opts.mode === "default" || opts.mode === "prefer-fast") {
        preferBinary = true;
      } else {
        throw new Error("Invalid value for opts.mode");
      }
      self2._mode = decideMode(preferBinary, useFetch);
      self2.on("finish", function() {
        self2._onFinish();
      });
    }
    inherits$1(ClientRequest, Writable);
    var unsafeHeaders = [
      "accept-charset",
      "accept-encoding",
      "access-control-request-headers",
      "access-control-request-method",
      "connection",
      "content-length",
      "cookie",
      "cookie2",
      "date",
      "dnt",
      "expect",
      "host",
      "keep-alive",
      "origin",
      "referer",
      "te",
      "trailer",
      "transfer-encoding",
      "upgrade",
      "user-agent",
      "via"
    ];
    ClientRequest.prototype.setHeader = function(name, value) {
      var self2 = this;
      var lowerName = name.toLowerCase();
      if (unsafeHeaders.indexOf(lowerName) !== -1)
        return;
      self2._headers[lowerName] = {
        name,
        value
      };
    };
    ClientRequest.prototype.getHeader = function(name) {
      var self2 = this;
      return self2._headers[name.toLowerCase()].value;
    };
    ClientRequest.prototype.removeHeader = function(name) {
      var self2 = this;
      delete self2._headers[name.toLowerCase()];
    };
    ClientRequest.prototype._onFinish = function() {
      var self2 = this;
      if (self2._destroyed)
        return;
      var opts = self2._opts;
      var headersObj = self2._headers;
      var body;
      if (opts.method === "POST" || opts.method === "PUT" || opts.method === "PATCH") {
        if (blobConstructor()) {
          body = new global$1.Blob(self2._body.map(function(buffer2) {
            return toArrayBuffer(buffer2);
          }), {
            type: (headersObj["content-type"] || {}).value || ""
          });
        } else {
          body = Buffer$1.concat(self2._body).toString();
        }
      }
      if (self2._mode === "fetch") {
        var headers = Object.keys(headersObj).map(function(name) {
          return [headersObj[name].name, headersObj[name].value];
        });
        global$1.fetch(self2._opts.url, {
          method: self2._opts.method,
          headers,
          body,
          mode: "cors",
          credentials: opts.withCredentials ? "include" : "same-origin"
        }).then(function(response) {
          self2._fetchResponse = response;
          self2._connect();
        }, function(reason) {
          self2.emit("error", reason);
        });
      } else {
        var xhr2 = self2._xhr = new global$1.XMLHttpRequest();
        try {
          xhr2.open(self2._opts.method, self2._opts.url, true);
        } catch (err) {
          browser$1.nextTick(function() {
            self2.emit("error", err);
          });
          return;
        }
        if ("responseType" in xhr2)
          xhr2.responseType = self2._mode.split(":")[0];
        if ("withCredentials" in xhr2)
          xhr2.withCredentials = !!opts.withCredentials;
        if (self2._mode === "text" && "overrideMimeType" in xhr2)
          xhr2.overrideMimeType("text/plain; charset=x-user-defined");
        Object.keys(headersObj).forEach(function(name) {
          xhr2.setRequestHeader(headersObj[name].name, headersObj[name].value);
        });
        self2._response = null;
        xhr2.onreadystatechange = function() {
          switch (xhr2.readyState) {
            case rStates.LOADING:
            case rStates.DONE:
              self2._onXHRProgress();
              break;
          }
        };
        if (self2._mode === "moz-chunked-arraybuffer") {
          xhr2.onprogress = function() {
            self2._onXHRProgress();
          };
        }
        xhr2.onerror = function() {
          if (self2._destroyed)
            return;
          self2.emit("error", new Error("XHR error"));
        };
        try {
          xhr2.send(body);
        } catch (err) {
          browser$1.nextTick(function() {
            self2.emit("error", err);
          });
          return;
        }
      }
    };
    function statusValid(xhr2) {
      try {
        var status = xhr2.status;
        return status !== null && status !== 0;
      } catch (e2) {
        return false;
      }
    }
    ClientRequest.prototype._onXHRProgress = function() {
      var self2 = this;
      if (!statusValid(self2._xhr) || self2._destroyed)
        return;
      if (!self2._response)
        self2._connect();
      self2._response._onXHRProgress();
    };
    ClientRequest.prototype._connect = function() {
      var self2 = this;
      if (self2._destroyed)
        return;
      self2._response = new IncomingMessage(self2._xhr, self2._fetchResponse, self2._mode);
      self2.emit("response", self2._response);
    };
    ClientRequest.prototype._write = function(chunk, encoding, cb) {
      var self2 = this;
      self2._body.push(chunk);
      cb();
    };
    ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function() {
      var self2 = this;
      self2._destroyed = true;
      if (self2._response)
        self2._response._destroyed = true;
      if (self2._xhr)
        self2._xhr.abort();
    };
    ClientRequest.prototype.end = function(data, encoding, cb) {
      var self2 = this;
      if (typeof data === "function") {
        cb = data;
        data = void 0;
      }
      Writable.prototype.end.call(self2, data, encoding, cb);
    };
    ClientRequest.prototype.flushHeaders = function() {
    };
    ClientRequest.prototype.setTimeout = function() {
    };
    ClientRequest.prototype.setNoDelay = function() {
    };
    ClientRequest.prototype.setSocketKeepAlive = function() {
    };
    /*! https://mths.be/punycode v1.4.1 by @mathias */
    var maxInt = 2147483647;
    var base = 36;
    var tMin = 1;
    var tMax = 26;
    var skew = 38;
    var damp = 700;
    var initialBias = 72;
    var initialN = 128;
    var delimiter = "-";
    var regexNonASCII = /[^\x20-\x7E]/;
    var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
    var errors = {
      "overflow": "Overflow: input needs wider integers to process",
      "not-basic": "Illegal input >= 0x80 (not a basic code point)",
      "invalid-input": "Invalid input"
    };
    var baseMinusTMin = base - tMin;
    var floor = Math.floor;
    var stringFromCharCode = String.fromCharCode;
    function error(type2) {
      throw new RangeError(errors[type2]);
    }
    function map$1(array2, fn2) {
      var length = array2.length;
      var result = [];
      while (length--) {
        result[length] = fn2(array2[length]);
      }
      return result;
    }
    function mapDomain(string2, fn2) {
      var parts = string2.split("@");
      var result = "";
      if (parts.length > 1) {
        result = parts[0] + "@";
        string2 = parts[1];
      }
      string2 = string2.replace(regexSeparators, ".");
      var labels = string2.split(".");
      var encoded = map$1(labels, fn2).join(".");
      return result + encoded;
    }
    function ucs2decode(string2) {
      var output = [], counter = 0, length = string2.length, value, extra;
      while (counter < length) {
        value = string2.charCodeAt(counter++);
        if (value >= 55296 && value <= 56319 && counter < length) {
          extra = string2.charCodeAt(counter++);
          if ((extra & 64512) == 56320) {
            output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
          } else {
            output.push(value);
            counter--;
          }
        } else {
          output.push(value);
        }
      }
      return output;
    }
    function digitToBasic(digit, flag) {
      return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    }
    function adapt(delta, numPoints, firstTime) {
      var k = 0;
      delta = firstTime ? floor(delta / damp) : delta >> 1;
      delta += floor(delta / numPoints);
      for (; delta > baseMinusTMin * tMax >> 1; k += base) {
        delta = floor(delta / baseMinusTMin);
      }
      return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    }
    function encode$1(input) {
      var n2, delta, handledCPCount, basicLength, bias, j2, m2, q2, k, t, currentValue, output = [], inputLength, handledCPCountPlusOne, baseMinusT, qMinusT;
      input = ucs2decode(input);
      inputLength = input.length;
      n2 = initialN;
      delta = 0;
      bias = initialBias;
      for (j2 = 0; j2 < inputLength; ++j2) {
        currentValue = input[j2];
        if (currentValue < 128) {
          output.push(stringFromCharCode(currentValue));
        }
      }
      handledCPCount = basicLength = output.length;
      if (basicLength) {
        output.push(delimiter);
      }
      while (handledCPCount < inputLength) {
        for (m2 = maxInt, j2 = 0; j2 < inputLength; ++j2) {
          currentValue = input[j2];
          if (currentValue >= n2 && currentValue < m2) {
            m2 = currentValue;
          }
        }
        handledCPCountPlusOne = handledCPCount + 1;
        if (m2 - n2 > floor((maxInt - delta) / handledCPCountPlusOne)) {
          error("overflow");
        }
        delta += (m2 - n2) * handledCPCountPlusOne;
        n2 = m2;
        for (j2 = 0; j2 < inputLength; ++j2) {
          currentValue = input[j2];
          if (currentValue < n2 && ++delta > maxInt) {
            error("overflow");
          }
          if (currentValue == n2) {
            for (q2 = delta, k = base; ; k += base) {
              t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
              if (q2 < t) {
                break;
              }
              qMinusT = q2 - t;
              baseMinusT = base - t;
              output.push(
                stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
              );
              q2 = floor(qMinusT / baseMinusT);
            }
            output.push(stringFromCharCode(digitToBasic(q2, 0)));
            bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
            delta = 0;
            ++handledCPCount;
          }
        }
        ++delta;
        ++n2;
      }
      return output.join("");
    }
    function toASCII(input) {
      return mapDomain(input, function(string2) {
        return regexNonASCII.test(string2) ? "xn--" + encode$1(string2) : string2;
      });
    }
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    var isArray = Array.isArray || function(xs) {
      return Object.prototype.toString.call(xs) === "[object Array]";
    };
    function stringifyPrimitive(v2) {
      switch (typeof v2) {
        case "string":
          return v2;
        case "boolean":
          return v2 ? "true" : "false";
        case "number":
          return isFinite(v2) ? v2 : "";
        default:
          return "";
      }
    }
    function stringify(obj, sep, eq2, name) {
      sep = sep || "&";
      eq2 = eq2 || "=";
      if (obj === null) {
        obj = void 0;
      }
      if (typeof obj === "object") {
        return map(objectKeys(obj), function(k) {
          var ks = encodeURIComponent(stringifyPrimitive(k)) + eq2;
          if (isArray(obj[k])) {
            return map(obj[k], function(v2) {
              return ks + encodeURIComponent(stringifyPrimitive(v2));
            }).join(sep);
          } else {
            return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
          }
        }).join(sep);
      }
      if (!name)
        return "";
      return encodeURIComponent(stringifyPrimitive(name)) + eq2 + encodeURIComponent(stringifyPrimitive(obj));
    }
    function map(xs, f2) {
      if (xs.map)
        return xs.map(f2);
      var res = [];
      for (var i2 = 0; i2 < xs.length; i2++) {
        res.push(f2(xs[i2], i2));
      }
      return res;
    }
    var objectKeys = Object.keys || function(obj) {
      var res = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key))
          res.push(key);
      }
      return res;
    };
    function parse$2(qs, sep, eq2, options) {
      sep = sep || "&";
      eq2 = eq2 || "=";
      var obj = {};
      if (typeof qs !== "string" || qs.length === 0) {
        return obj;
      }
      var regexp2 = /\+/g;
      qs = qs.split(sep);
      var maxKeys = 1e3;
      if (options && typeof options.maxKeys === "number") {
        maxKeys = options.maxKeys;
      }
      var len = qs.length;
      if (maxKeys > 0 && len > maxKeys) {
        len = maxKeys;
      }
      for (var i2 = 0; i2 < len; ++i2) {
        var x2 = qs[i2].replace(regexp2, "%20"), idx = x2.indexOf(eq2), kstr, vstr, k, v2;
        if (idx >= 0) {
          kstr = x2.substr(0, idx);
          vstr = x2.substr(idx + 1);
        } else {
          kstr = x2;
          vstr = "";
        }
        k = decodeURIComponent(kstr);
        v2 = decodeURIComponent(vstr);
        if (!hasOwnProperty(obj, k)) {
          obj[k] = v2;
        } else if (isArray(obj[k])) {
          obj[k].push(v2);
        } else {
          obj[k] = [obj[k], v2];
        }
      }
      return obj;
    }
    const url$2 = {
      parse: urlParse,
      resolve: urlResolve,
      resolveObject: urlResolveObject,
      format: urlFormat,
      Url
    };
    function Url() {
      this.protocol = null;
      this.slashes = null;
      this.auth = null;
      this.host = null;
      this.port = null;
      this.hostname = null;
      this.hash = null;
      this.search = null;
      this.query = null;
      this.pathname = null;
      this.path = null;
      this.href = null;
    }
    var protocolPattern = /^([a-z0-9.+-]+:)/i, portPattern = /:[0-9]*$/, simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, delims = ["<", ">", '"', "`", " ", "\r", "\n", "	"], unwise = ["{", "}", "|", "\\", "^", "`"].concat(delims), autoEscape = ["'"].concat(unwise), nonHostChars = ["%", "/", "?", ";", "#"].concat(autoEscape), hostEndingChars = ["/", "?", "#"], hostnameMaxLen = 255, hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/, hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, unsafeProtocol = {
      "javascript": true,
      "javascript:": true
    }, hostlessProtocol = {
      "javascript": true,
      "javascript:": true
    }, slashedProtocol = {
      "http": true,
      "https": true,
      "ftp": true,
      "gopher": true,
      "file": true,
      "http:": true,
      "https:": true,
      "ftp:": true,
      "gopher:": true,
      "file:": true
    };
    function urlParse(url2, parseQueryString, slashesDenoteHost) {
      if (url2 && isObject$1(url2) && url2 instanceof Url)
        return url2;
      var u2 = new Url();
      u2.parse(url2, parseQueryString, slashesDenoteHost);
      return u2;
    }
    Url.prototype.parse = function(url2, parseQueryString, slashesDenoteHost) {
      return parse$1(this, url2, parseQueryString, slashesDenoteHost);
    };
    function parse$1(self2, url2, parseQueryString, slashesDenoteHost) {
      if (!isString(url2)) {
        throw new TypeError("Parameter 'url' must be a string, not " + typeof url2);
      }
      var queryIndex = url2.indexOf("?"), splitter = queryIndex !== -1 && queryIndex < url2.indexOf("#") ? "?" : "#", uSplit = url2.split(splitter), slashRegex = /\\/g;
      uSplit[0] = uSplit[0].replace(slashRegex, "/");
      url2 = uSplit.join(splitter);
      var rest = url2;
      rest = rest.trim();
      if (!slashesDenoteHost && url2.split("#").length === 1) {
        var simplePath = simplePathPattern.exec(rest);
        if (simplePath) {
          self2.path = rest;
          self2.href = rest;
          self2.pathname = simplePath[1];
          if (simplePath[2]) {
            self2.search = simplePath[2];
            if (parseQueryString) {
              self2.query = parse$2(self2.search.substr(1));
            } else {
              self2.query = self2.search.substr(1);
            }
          } else if (parseQueryString) {
            self2.search = "";
            self2.query = {};
          }
          return self2;
        }
      }
      var proto = protocolPattern.exec(rest);
      if (proto) {
        proto = proto[0];
        var lowerProto = proto.toLowerCase();
        self2.protocol = lowerProto;
        rest = rest.substr(proto.length);
      }
      if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        var slashes = rest.substr(0, 2) === "//";
        if (slashes && !(proto && hostlessProtocol[proto])) {
          rest = rest.substr(2);
          self2.slashes = true;
        }
      }
      var i2, hec, l2, p2;
      if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
        var hostEnd = -1;
        for (i2 = 0; i2 < hostEndingChars.length; i2++) {
          hec = rest.indexOf(hostEndingChars[i2]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
            hostEnd = hec;
        }
        var auth2, atSign;
        if (hostEnd === -1) {
          atSign = rest.lastIndexOf("@");
        } else {
          atSign = rest.lastIndexOf("@", hostEnd);
        }
        if (atSign !== -1) {
          auth2 = rest.slice(0, atSign);
          rest = rest.slice(atSign + 1);
          self2.auth = decodeURIComponent(auth2);
        }
        hostEnd = -1;
        for (i2 = 0; i2 < nonHostChars.length; i2++) {
          hec = rest.indexOf(nonHostChars[i2]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
            hostEnd = hec;
        }
        if (hostEnd === -1)
          hostEnd = rest.length;
        self2.host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);
        parseHost(self2);
        self2.hostname = self2.hostname || "";
        var ipv6Hostname = self2.hostname[0] === "[" && self2.hostname[self2.hostname.length - 1] === "]";
        if (!ipv6Hostname) {
          var hostparts = self2.hostname.split(/\./);
          for (i2 = 0, l2 = hostparts.length; i2 < l2; i2++) {
            var part = hostparts[i2];
            if (!part)
              continue;
            if (!part.match(hostnamePartPattern)) {
              var newpart = "";
              for (var j2 = 0, k = part.length; j2 < k; j2++) {
                if (part.charCodeAt(j2) > 127) {
                  newpart += "x";
                } else {
                  newpart += part[j2];
                }
              }
              if (!newpart.match(hostnamePartPattern)) {
                var validParts = hostparts.slice(0, i2);
                var notHost = hostparts.slice(i2 + 1);
                var bit = part.match(hostnamePartStart);
                if (bit) {
                  validParts.push(bit[1]);
                  notHost.unshift(bit[2]);
                }
                if (notHost.length) {
                  rest = "/" + notHost.join(".") + rest;
                }
                self2.hostname = validParts.join(".");
                break;
              }
            }
          }
        }
        if (self2.hostname.length > hostnameMaxLen) {
          self2.hostname = "";
        } else {
          self2.hostname = self2.hostname.toLowerCase();
        }
        if (!ipv6Hostname) {
          self2.hostname = toASCII(self2.hostname);
        }
        p2 = self2.port ? ":" + self2.port : "";
        var h2 = self2.hostname || "";
        self2.host = h2 + p2;
        self2.href += self2.host;
        if (ipv6Hostname) {
          self2.hostname = self2.hostname.substr(1, self2.hostname.length - 2);
          if (rest[0] !== "/") {
            rest = "/" + rest;
          }
        }
      }
      if (!unsafeProtocol[lowerProto]) {
        for (i2 = 0, l2 = autoEscape.length; i2 < l2; i2++) {
          var ae = autoEscape[i2];
          if (rest.indexOf(ae) === -1)
            continue;
          var esc = encodeURIComponent(ae);
          if (esc === ae) {
            esc = escape(ae);
          }
          rest = rest.split(ae).join(esc);
        }
      }
      var hash = rest.indexOf("#");
      if (hash !== -1) {
        self2.hash = rest.substr(hash);
        rest = rest.slice(0, hash);
      }
      var qm = rest.indexOf("?");
      if (qm !== -1) {
        self2.search = rest.substr(qm);
        self2.query = rest.substr(qm + 1);
        if (parseQueryString) {
          self2.query = parse$2(self2.query);
        }
        rest = rest.slice(0, qm);
      } else if (parseQueryString) {
        self2.search = "";
        self2.query = {};
      }
      if (rest)
        self2.pathname = rest;
      if (slashedProtocol[lowerProto] && self2.hostname && !self2.pathname) {
        self2.pathname = "/";
      }
      if (self2.pathname || self2.search) {
        p2 = self2.pathname || "";
        var s2 = self2.search || "";
        self2.path = p2 + s2;
      }
      self2.href = format$1(self2);
      return self2;
    }
    function urlFormat(obj) {
      if (isString(obj))
        obj = parse$1({}, obj);
      return format$1(obj);
    }
    function format$1(self2) {
      var auth2 = self2.auth || "";
      if (auth2) {
        auth2 = encodeURIComponent(auth2);
        auth2 = auth2.replace(/%3A/i, ":");
        auth2 += "@";
      }
      var protocol = self2.protocol || "", pathname = self2.pathname || "", hash = self2.hash || "", host = false, query = "";
      if (self2.host) {
        host = auth2 + self2.host;
      } else if (self2.hostname) {
        host = auth2 + (self2.hostname.indexOf(":") === -1 ? self2.hostname : "[" + this.hostname + "]");
        if (self2.port) {
          host += ":" + self2.port;
        }
      }
      if (self2.query && isObject$1(self2.query) && Object.keys(self2.query).length) {
        query = stringify(self2.query);
      }
      var search = self2.search || query && "?" + query || "";
      if (protocol && protocol.substr(-1) !== ":")
        protocol += ":";
      if (self2.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
        host = "//" + (host || "");
        if (pathname && pathname.charAt(0) !== "/")
          pathname = "/" + pathname;
      } else if (!host) {
        host = "";
      }
      if (hash && hash.charAt(0) !== "#")
        hash = "#" + hash;
      if (search && search.charAt(0) !== "?")
        search = "?" + search;
      pathname = pathname.replace(/[?#]/g, function(match) {
        return encodeURIComponent(match);
      });
      search = search.replace("#", "%23");
      return protocol + host + pathname + search + hash;
    }
    Url.prototype.format = function() {
      return format$1(this);
    };
    function urlResolve(source, relative) {
      return urlParse(source, false, true).resolve(relative);
    }
    Url.prototype.resolve = function(relative) {
      return this.resolveObject(urlParse(relative, false, true)).format();
    };
    function urlResolveObject(source, relative) {
      if (!source)
        return relative;
      return urlParse(source, false, true).resolveObject(relative);
    }
    Url.prototype.resolveObject = function(relative) {
      if (isString(relative)) {
        var rel = new Url();
        rel.parse(relative, false, true);
        relative = rel;
      }
      var result = new Url();
      var tkeys = Object.keys(this);
      for (var tk = 0; tk < tkeys.length; tk++) {
        var tkey = tkeys[tk];
        result[tkey] = this[tkey];
      }
      result.hash = relative.hash;
      if (relative.href === "") {
        result.href = result.format();
        return result;
      }
      if (relative.slashes && !relative.protocol) {
        var rkeys = Object.keys(relative);
        for (var rk = 0; rk < rkeys.length; rk++) {
          var rkey = rkeys[rk];
          if (rkey !== "protocol")
            result[rkey] = relative[rkey];
        }
        if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
          result.path = result.pathname = "/";
        }
        result.href = result.format();
        return result;
      }
      var relPath;
      if (relative.protocol && relative.protocol !== result.protocol) {
        if (!slashedProtocol[relative.protocol]) {
          var keys2 = Object.keys(relative);
          for (var v2 = 0; v2 < keys2.length; v2++) {
            var k = keys2[v2];
            result[k] = relative[k];
          }
          result.href = result.format();
          return result;
        }
        result.protocol = relative.protocol;
        if (!relative.host && !hostlessProtocol[relative.protocol]) {
          relPath = (relative.pathname || "").split("/");
          while (relPath.length && !(relative.host = relPath.shift()))
            ;
          if (!relative.host)
            relative.host = "";
          if (!relative.hostname)
            relative.hostname = "";
          if (relPath[0] !== "")
            relPath.unshift("");
          if (relPath.length < 2)
            relPath.unshift("");
          result.pathname = relPath.join("/");
        } else {
          result.pathname = relative.pathname;
        }
        result.search = relative.search;
        result.query = relative.query;
        result.host = relative.host || "";
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result.port = relative.port;
        if (result.pathname || result.search) {
          var p2 = result.pathname || "";
          var s2 = result.search || "";
          result.path = p2 + s2;
        }
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
      }
      var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/", isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], psychotic = result.protocol && !slashedProtocol[result.protocol];
      relPath = relative.pathname && relative.pathname.split("/") || [];
      if (psychotic) {
        result.hostname = "";
        result.port = null;
        if (result.host) {
          if (srcPath[0] === "")
            srcPath[0] = result.host;
          else
            srcPath.unshift(result.host);
        }
        result.host = "";
        if (relative.protocol) {
          relative.hostname = null;
          relative.port = null;
          if (relative.host) {
            if (relPath[0] === "")
              relPath[0] = relative.host;
            else
              relPath.unshift(relative.host);
          }
          relative.host = null;
        }
        mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
      }
      var authInHost;
      if (isRelAbs) {
        result.host = relative.host || relative.host === "" ? relative.host : result.host;
        result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
        result.search = relative.search;
        result.query = relative.query;
        srcPath = relPath;
      } else if (relPath.length) {
        if (!srcPath)
          srcPath = [];
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
        result.query = relative.query;
      } else if (!isNullOrUndefined(relative.search)) {
        if (psychotic) {
          result.hostname = result.host = srcPath.shift();
          authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
          if (authInHost) {
            result.auth = authInHost.shift();
            result.host = result.hostname = authInHost.shift();
          }
        }
        result.search = relative.search;
        result.query = relative.query;
        if (!isNull(result.pathname) || !isNull(result.search)) {
          result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
        }
        result.href = result.format();
        return result;
      }
      if (!srcPath.length) {
        result.pathname = null;
        if (result.search) {
          result.path = "/" + result.search;
        } else {
          result.path = null;
        }
        result.href = result.format();
        return result;
      }
      var last = srcPath.slice(-1)[0];
      var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === "." || last === "..") || last === "";
      var up2 = 0;
      for (var i2 = srcPath.length; i2 >= 0; i2--) {
        last = srcPath[i2];
        if (last === ".") {
          srcPath.splice(i2, 1);
        } else if (last === "..") {
          srcPath.splice(i2, 1);
          up2++;
        } else if (up2) {
          srcPath.splice(i2, 1);
          up2--;
        }
      }
      if (!mustEndAbs && !removeAllDots) {
        for (; up2--; up2) {
          srcPath.unshift("..");
        }
      }
      if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) {
        srcPath.unshift("");
      }
      if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") {
        srcPath.push("");
      }
      var isAbsolute = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
      if (psychotic) {
        result.hostname = result.host = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
        authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
        if (authInHost) {
          result.auth = authInHost.shift();
          result.host = result.hostname = authInHost.shift();
        }
      }
      mustEndAbs = mustEndAbs || result.host && srcPath.length;
      if (mustEndAbs && !isAbsolute) {
        srcPath.unshift("");
      }
      if (!srcPath.length) {
        result.pathname = null;
        result.path = null;
      } else {
        result.pathname = srcPath.join("/");
      }
      if (!isNull(result.pathname) || !isNull(result.search)) {
        result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
      }
      result.auth = relative.auth || result.auth;
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    };
    Url.prototype.parseHost = function() {
      return parseHost(this);
    };
    function parseHost(self2) {
      var host = self2.host;
      var port = portPattern.exec(host);
      if (port) {
        port = port[0];
        if (port !== ":") {
          self2.port = port.substr(1);
        }
        host = host.substr(0, host.length - port.length);
      }
      if (host)
        self2.hostname = host;
    }
    const url$3 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      parse: urlParse,
      resolve: urlResolve,
      resolveObject: urlResolveObject,
      format: urlFormat,
      default: url$2,
      Url
    }, Symbol.toStringTag, { value: "Module" }));
    function request$1(opts, cb) {
      if (typeof opts === "string")
        opts = urlParse(opts);
      var defaultProtocol = global$1.location.protocol.search(/^https?:$/) === -1 ? "http:" : "";
      var protocol = opts.protocol || defaultProtocol;
      var host = opts.hostname || opts.host;
      var port = opts.port;
      var path = opts.path || "/";
      if (host && host.indexOf(":") !== -1)
        host = "[" + host + "]";
      opts.url = (host ? protocol + "//" + host : "") + (port ? ":" + port : "") + path;
      opts.method = (opts.method || "GET").toUpperCase();
      opts.headers = opts.headers || {};
      var req = new ClientRequest(opts);
      if (cb)
        req.on("response", cb);
      return req;
    }
    function get(opts, cb) {
      var req = request$1(opts, cb);
      req.end();
      return req;
    }
    function Agent() {
    }
    Agent.defaultMaxSockets = 4;
    var METHODS = [
      "CHECKOUT",
      "CONNECT",
      "COPY",
      "DELETE",
      "GET",
      "HEAD",
      "LOCK",
      "M-SEARCH",
      "MERGE",
      "MKACTIVITY",
      "MKCOL",
      "MOVE",
      "NOTIFY",
      "OPTIONS",
      "PATCH",
      "POST",
      "PROPFIND",
      "PROPPATCH",
      "PURGE",
      "PUT",
      "REPORT",
      "SEARCH",
      "SUBSCRIBE",
      "TRACE",
      "UNLOCK",
      "UNSUBSCRIBE"
    ];
    var STATUS_CODES = {
      100: "Continue",
      101: "Switching Protocols",
      102: "Processing",
      200: "OK",
      201: "Created",
      202: "Accepted",
      203: "Non-Authoritative Information",
      204: "No Content",
      205: "Reset Content",
      206: "Partial Content",
      207: "Multi-Status",
      300: "Multiple Choices",
      301: "Moved Permanently",
      302: "Moved Temporarily",
      303: "See Other",
      304: "Not Modified",
      305: "Use Proxy",
      307: "Temporary Redirect",
      400: "Bad Request",
      401: "Unauthorized",
      402: "Payment Required",
      403: "Forbidden",
      404: "Not Found",
      405: "Method Not Allowed",
      406: "Not Acceptable",
      407: "Proxy Authentication Required",
      408: "Request Time-out",
      409: "Conflict",
      410: "Gone",
      411: "Length Required",
      412: "Precondition Failed",
      413: "Request Entity Too Large",
      414: "Request-URI Too Large",
      415: "Unsupported Media Type",
      416: "Requested Range Not Satisfiable",
      417: "Expectation Failed",
      418: "I'm a teapot",
      422: "Unprocessable Entity",
      423: "Locked",
      424: "Failed Dependency",
      425: "Unordered Collection",
      426: "Upgrade Required",
      428: "Precondition Required",
      429: "Too Many Requests",
      431: "Request Header Fields Too Large",
      500: "Internal Server Error",
      501: "Not Implemented",
      502: "Bad Gateway",
      503: "Service Unavailable",
      504: "Gateway Time-out",
      505: "HTTP Version Not Supported",
      506: "Variant Also Negotiates",
      507: "Insufficient Storage",
      509: "Bandwidth Limit Exceeded",
      510: "Not Extended",
      511: "Network Authentication Required"
    };
    const http$2 = {
      request: request$1,
      get,
      Agent,
      METHODS,
      STATUS_CODES
    };
    const http$3 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      request: request$1,
      get,
      Agent,
      METHODS,
      STATUS_CODES,
      default: http$2
    }, Symbol.toStringTag, { value: "Module" }));
    const require$$1$1 = /* @__PURE__ */ getAugmentedNamespace(http$3);
    const require$$2 = /* @__PURE__ */ getAugmentedNamespace(url$3);
    var serializer = {};
    var lib = {};
    var Utility = {};
    var hasRequiredUtility;
    function requireUtility() {
      if (hasRequiredUtility)
        return Utility;
      hasRequiredUtility = 1;
      (function() {
        var assign2, camelCase, capitalize2, isArray2, isEmpty2, isFunction2, isObject2, isPlainObject2, kebabCase, snakeCase, titleCase, words, slice = [].slice, hasProp = {}.hasOwnProperty;
        assign2 = function() {
          var i2, key, len, source, sources, target;
          target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];
          if (isFunction2(Object.assign)) {
            Object.assign.apply(null, arguments);
          } else {
            for (i2 = 0, len = sources.length; i2 < len; i2++) {
              source = sources[i2];
              if (source != null) {
                for (key in source) {
                  if (!hasProp.call(source, key))
                    continue;
                  target[key] = source[key];
                }
              }
            }
          }
          return target;
        };
        isFunction2 = function(val) {
          return !!val && Object.prototype.toString.call(val) === "[object Function]";
        };
        isObject2 = function(val) {
          var ref2;
          return !!val && ((ref2 = typeof val) === "function" || ref2 === "object");
        };
        isArray2 = function(val) {
          if (isFunction2(Array.isArray)) {
            return Array.isArray(val);
          } else {
            return Object.prototype.toString.call(val) === "[object Array]";
          }
        };
        isEmpty2 = function(val) {
          var key;
          if (isArray2(val)) {
            return !val.length;
          } else {
            for (key in val) {
              if (!hasProp.call(val, key))
                continue;
              return false;
            }
            return true;
          }
        };
        isPlainObject2 = function(val) {
          var ctor, proto;
          return isObject2(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && typeof ctor === "function" && ctor instanceof ctor && Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object);
        };
        words = function(val) {
          return (val.split(/[-_\s]+|(?=[A-Z][a-z])/) || []).filter(function(n2) {
            return !!n2;
          });
        };
        camelCase = function(val) {
          var i2, index2, len, r, ref2, word;
          r = "";
          ref2 = words(val);
          for (index2 = i2 = 0, len = ref2.length; i2 < len; index2 = ++i2) {
            word = ref2[index2];
            r += index2 ? capitalize2(word.toLowerCase()) : word.toLowerCase();
          }
          return r;
        };
        titleCase = function(val) {
          var i2, index2, len, r, ref2, word;
          r = "";
          ref2 = words(val);
          for (index2 = i2 = 0, len = ref2.length; i2 < len; index2 = ++i2) {
            word = ref2[index2];
            r += capitalize2(word.toLowerCase());
          }
          return r;
        };
        kebabCase = function(val) {
          var i2, index2, len, r, ref2, word;
          r = "";
          ref2 = words(val);
          for (index2 = i2 = 0, len = ref2.length; i2 < len; index2 = ++i2) {
            word = ref2[index2];
            r += (index2 ? "-" : "") + word.toLowerCase();
          }
          return r;
        };
        snakeCase = function(val) {
          var i2, index2, len, r, ref2, word;
          r = "";
          ref2 = words(val);
          for (index2 = i2 = 0, len = ref2.length; i2 < len; index2 = ++i2) {
            word = ref2[index2];
            r += (index2 ? "_" : "") + word.toLowerCase();
          }
          return r;
        };
        capitalize2 = function(val) {
          return val.charAt(0).toUpperCase() + val.slice(1);
        };
        Utility.assign = assign2;
        Utility.isFunction = isFunction2;
        Utility.isObject = isObject2;
        Utility.isArray = isArray2;
        Utility.isEmpty = isEmpty2;
        Utility.isPlainObject = isPlainObject2;
        Utility.camelCase = camelCase;
        Utility.titleCase = titleCase;
        Utility.kebabCase = kebabCase;
        Utility.snakeCase = snakeCase;
        Utility.capitalize = capitalize2;
        Utility.words = words;
      }).call(commonjsGlobal);
      return Utility;
    }
    var XMLDocument = { exports: {} };
    var XMLNode = { exports: {} };
    var XMLElement = { exports: {} };
    var XMLAttribute = { exports: {} };
    var hasRequiredXMLAttribute;
    function requireXMLAttribute() {
      if (hasRequiredXMLAttribute)
        return XMLAttribute.exports;
      hasRequiredXMLAttribute = 1;
      (function() {
        XMLAttribute.exports = function() {
          function XMLAttribute2(parent, name, value) {
            this.options = parent.options;
            this.stringify = parent.stringify;
            if (name == null) {
              throw new Error("Missing attribute name of element " + parent.name);
            }
            if (value == null) {
              throw new Error("Missing attribute value for attribute " + name + " of element " + parent.name);
            }
            this.name = this.stringify.attName(name);
            this.value = this.stringify.attValue(value);
          }
          XMLAttribute2.prototype.clone = function() {
            return Object.create(this);
          };
          XMLAttribute2.prototype.toString = function(options) {
            return this.options.writer.set(options).attribute(this);
          };
          return XMLAttribute2;
        }();
      }).call(commonjsGlobal);
      return XMLAttribute.exports;
    }
    var hasRequiredXMLElement;
    function requireXMLElement() {
      if (hasRequiredXMLElement)
        return XMLElement.exports;
      hasRequiredXMLElement = 1;
      (function() {
        var XMLAttribute2, XMLNode2, isFunction2, isObject2, ref2, extend2 = function(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key))
              child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        }, hasProp = {}.hasOwnProperty;
        ref2 = requireUtility(), isObject2 = ref2.isObject, isFunction2 = ref2.isFunction;
        XMLNode2 = requireXMLNode();
        XMLAttribute2 = requireXMLAttribute();
        XMLElement.exports = function(superClass) {
          extend2(XMLElement2, superClass);
          function XMLElement2(parent, name, attributes2) {
            XMLElement2.__super__.constructor.call(this, parent);
            if (name == null) {
              throw new Error("Missing element name");
            }
            this.name = this.stringify.eleName(name);
            this.attributes = {};
            if (attributes2 != null) {
              this.attribute(attributes2);
            }
            if (parent.isDocument) {
              this.isRoot = true;
              this.documentObject = parent;
              parent.rootObject = this;
            }
          }
          XMLElement2.prototype.clone = function() {
            var att, attName, clonedSelf, ref1;
            clonedSelf = Object.create(this);
            if (clonedSelf.isRoot) {
              clonedSelf.documentObject = null;
            }
            clonedSelf.attributes = {};
            ref1 = this.attributes;
            for (attName in ref1) {
              if (!hasProp.call(ref1, attName))
                continue;
              att = ref1[attName];
              clonedSelf.attributes[attName] = att.clone();
            }
            clonedSelf.children = [];
            this.children.forEach(function(child) {
              var clonedChild;
              clonedChild = child.clone();
              clonedChild.parent = clonedSelf;
              return clonedSelf.children.push(clonedChild);
            });
            return clonedSelf;
          };
          XMLElement2.prototype.attribute = function(name, value) {
            var attName, attValue;
            if (name != null) {
              name = name.valueOf();
            }
            if (isObject2(name)) {
              for (attName in name) {
                if (!hasProp.call(name, attName))
                  continue;
                attValue = name[attName];
                this.attribute(attName, attValue);
              }
            } else {
              if (isFunction2(value)) {
                value = value.apply();
              }
              if (!this.options.skipNullAttributes || value != null) {
                this.attributes[name] = new XMLAttribute2(this, name, value);
              }
            }
            return this;
          };
          XMLElement2.prototype.removeAttribute = function(name) {
            var attName, i2, len;
            if (name == null) {
              throw new Error("Missing attribute name");
            }
            name = name.valueOf();
            if (Array.isArray(name)) {
              for (i2 = 0, len = name.length; i2 < len; i2++) {
                attName = name[i2];
                delete this.attributes[attName];
              }
            } else {
              delete this.attributes[name];
            }
            return this;
          };
          XMLElement2.prototype.toString = function(options) {
            return this.options.writer.set(options).element(this);
          };
          XMLElement2.prototype.att = function(name, value) {
            return this.attribute(name, value);
          };
          XMLElement2.prototype.a = function(name, value) {
            return this.attribute(name, value);
          };
          return XMLElement2;
        }(XMLNode2);
      }).call(commonjsGlobal);
      return XMLElement.exports;
    }
    var XMLCData = { exports: {} };
    var hasRequiredXMLCData;
    function requireXMLCData() {
      if (hasRequiredXMLCData)
        return XMLCData.exports;
      hasRequiredXMLCData = 1;
      (function() {
        var XMLNode2, extend2 = function(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key))
              child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        }, hasProp = {}.hasOwnProperty;
        XMLNode2 = requireXMLNode();
        XMLCData.exports = function(superClass) {
          extend2(XMLCData2, superClass);
          function XMLCData2(parent, text) {
            XMLCData2.__super__.constructor.call(this, parent);
            if (text == null) {
              throw new Error("Missing CDATA text");
            }
            this.text = this.stringify.cdata(text);
          }
          XMLCData2.prototype.clone = function() {
            return Object.create(this);
          };
          XMLCData2.prototype.toString = function(options) {
            return this.options.writer.set(options).cdata(this);
          };
          return XMLCData2;
        }(XMLNode2);
      }).call(commonjsGlobal);
      return XMLCData.exports;
    }
    var XMLComment = { exports: {} };
    var hasRequiredXMLComment;
    function requireXMLComment() {
      if (hasRequiredXMLComment)
        return XMLComment.exports;
      hasRequiredXMLComment = 1;
      (function() {
        var XMLNode2, extend2 = function(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key))
              child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        }, hasProp = {}.hasOwnProperty;
        XMLNode2 = requireXMLNode();
        XMLComment.exports = function(superClass) {
          extend2(XMLComment2, superClass);
          function XMLComment2(parent, text) {
            XMLComment2.__super__.constructor.call(this, parent);
            if (text == null) {
              throw new Error("Missing comment text");
            }
            this.text = this.stringify.comment(text);
          }
          XMLComment2.prototype.clone = function() {
            return Object.create(this);
          };
          XMLComment2.prototype.toString = function(options) {
            return this.options.writer.set(options).comment(this);
          };
          return XMLComment2;
        }(XMLNode2);
      }).call(commonjsGlobal);
      return XMLComment.exports;
    }
    var XMLDeclaration = { exports: {} };
    var hasRequiredXMLDeclaration;
    function requireXMLDeclaration() {
      if (hasRequiredXMLDeclaration)
        return XMLDeclaration.exports;
      hasRequiredXMLDeclaration = 1;
      (function() {
        var XMLNode2, isObject2, extend2 = function(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key))
              child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        }, hasProp = {}.hasOwnProperty;
        isObject2 = requireUtility().isObject;
        XMLNode2 = requireXMLNode();
        XMLDeclaration.exports = function(superClass) {
          extend2(XMLDeclaration2, superClass);
          function XMLDeclaration2(parent, version2, encoding, standalone) {
            var ref2;
            XMLDeclaration2.__super__.constructor.call(this, parent);
            if (isObject2(version2)) {
              ref2 = version2, version2 = ref2.version, encoding = ref2.encoding, standalone = ref2.standalone;
            }
            if (!version2) {
              version2 = "1.0";
            }
            this.version = this.stringify.xmlVersion(version2);
            if (encoding != null) {
              this.encoding = this.stringify.xmlEncoding(encoding);
            }
            if (standalone != null) {
              this.standalone = this.stringify.xmlStandalone(standalone);
            }
          }
          XMLDeclaration2.prototype.toString = function(options) {
            return this.options.writer.set(options).declaration(this);
          };
          return XMLDeclaration2;
        }(XMLNode2);
      }).call(commonjsGlobal);
      return XMLDeclaration.exports;
    }
    var XMLDocType = { exports: {} };
    var XMLDTDAttList = { exports: {} };
    var hasRequiredXMLDTDAttList;
    function requireXMLDTDAttList() {
      if (hasRequiredXMLDTDAttList)
        return XMLDTDAttList.exports;
      hasRequiredXMLDTDAttList = 1;
      (function() {
        var XMLNode2, extend2 = function(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key))
              child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        }, hasProp = {}.hasOwnProperty;
        XMLNode2 = requireXMLNode();
        XMLDTDAttList.exports = function(superClass) {
          extend2(XMLDTDAttList2, superClass);
          function XMLDTDAttList2(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
            XMLDTDAttList2.__super__.constructor.call(this, parent);
            if (elementName == null) {
              throw new Error("Missing DTD element name");
            }
            if (attributeName == null) {
              throw new Error("Missing DTD attribute name");
            }
            if (!attributeType) {
              throw new Error("Missing DTD attribute type");
            }
            if (!defaultValueType) {
              throw new Error("Missing DTD attribute default");
            }
            if (defaultValueType.indexOf("#") !== 0) {
              defaultValueType = "#" + defaultValueType;
            }
            if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {
              throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT");
            }
            if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {
              throw new Error("Default value only applies to #FIXED or #DEFAULT");
            }
            this.elementName = this.stringify.eleName(elementName);
            this.attributeName = this.stringify.attName(attributeName);
            this.attributeType = this.stringify.dtdAttType(attributeType);
            this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
            this.defaultValueType = defaultValueType;
          }
          XMLDTDAttList2.prototype.toString = function(options) {
            return this.options.writer.set(options).dtdAttList(this);
          };
          return XMLDTDAttList2;
        }(XMLNode2);
      }).call(commonjsGlobal);
      return XMLDTDAttList.exports;
    }
    var XMLDTDEntity = { exports: {} };
    var hasRequiredXMLDTDEntity;
    function requireXMLDTDEntity() {
      if (hasRequiredXMLDTDEntity)
        return XMLDTDEntity.exports;
      hasRequiredXMLDTDEntity = 1;
      (function() {
        var XMLNode2, isObject2, extend2 = function(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key))
              child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        }, hasProp = {}.hasOwnProperty;
        isObject2 = requireUtility().isObject;
        XMLNode2 = requireXMLNode();
        XMLDTDEntity.exports = function(superClass) {
          extend2(XMLDTDEntity2, superClass);
          function XMLDTDEntity2(parent, pe, name, value) {
            XMLDTDEntity2.__super__.constructor.call(this, parent);
            if (name == null) {
              throw new Error("Missing entity name");
            }
            if (value == null) {
              throw new Error("Missing entity value");
            }
            this.pe = !!pe;
            this.name = this.stringify.eleName(name);
            if (!isObject2(value)) {
              this.value = this.stringify.dtdEntityValue(value);
            } else {
              if (!value.pubID && !value.sysID) {
                throw new Error("Public and/or system identifiers are required for an external entity");
              }
              if (value.pubID && !value.sysID) {
                throw new Error("System identifier is required for a public external entity");
              }
              if (value.pubID != null) {
                this.pubID = this.stringify.dtdPubID(value.pubID);
              }
              if (value.sysID != null) {
                this.sysID = this.stringify.dtdSysID(value.sysID);
              }
              if (value.nData != null) {
                this.nData = this.stringify.dtdNData(value.nData);
              }
              if (this.pe && this.nData) {
                throw new Error("Notation declaration is not allowed in a parameter entity");
              }
            }
          }
          XMLDTDEntity2.prototype.toString = function(options) {
            return this.options.writer.set(options).dtdEntity(this);
          };
          return XMLDTDEntity2;
        }(XMLNode2);
      }).call(commonjsGlobal);
      return XMLDTDEntity.exports;
    }
    var XMLDTDElement = { exports: {} };
    var hasRequiredXMLDTDElement;
    function requireXMLDTDElement() {
      if (hasRequiredXMLDTDElement)
        return XMLDTDElement.exports;
      hasRequiredXMLDTDElement = 1;
      (function() {
        var XMLNode2, extend2 = function(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key))
              child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        }, hasProp = {}.hasOwnProperty;
        XMLNode2 = requireXMLNode();
        XMLDTDElement.exports = function(superClass) {
          extend2(XMLDTDElement2, superClass);
          function XMLDTDElement2(parent, name, value) {
            XMLDTDElement2.__super__.constructor.call(this, parent);
            if (name == null) {
              throw new Error("Missing DTD element name");
            }
            if (!value) {
              value = "(#PCDATA)";
            }
            if (Array.isArray(value)) {
              value = "(" + value.join(",") + ")";
            }
            this.name = this.stringify.eleName(name);
            this.value = this.stringify.dtdElementValue(value);
          }
          XMLDTDElement2.prototype.toString = function(options) {
            return this.options.writer.set(options).dtdElement(this);
          };
          return XMLDTDElement2;
        }(XMLNode2);
      }).call(commonjsGlobal);
      return XMLDTDElement.exports;
    }
    var XMLDTDNotation = { exports: {} };
    var hasRequiredXMLDTDNotation;
    function requireXMLDTDNotation() {
      if (hasRequiredXMLDTDNotation)
        return XMLDTDNotation.exports;
      hasRequiredXMLDTDNotation = 1;
      (function() {
        var XMLNode2, extend2 = function(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key))
              child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        }, hasProp = {}.hasOwnProperty;
        XMLNode2 = requireXMLNode();
        XMLDTDNotation.exports = function(superClass) {
          extend2(XMLDTDNotation2, superClass);
          function XMLDTDNotation2(parent, name, value) {
            XMLDTDNotation2.__super__.constructor.call(this, parent);
            if (name == null) {
              throw new Error("Missing notation name");
            }
            if (!value.pubID && !value.sysID) {
              throw new Error("Public or system identifiers are required for an external entity");
            }
            this.name = this.stringify.eleName(name);
            if (value.pubID != null) {
              this.pubID = this.stringify.dtdPubID(value.pubID);
            }
            if (value.sysID != null) {
              this.sysID = this.stringify.dtdSysID(value.sysID);
            }
          }
          XMLDTDNotation2.prototype.toString = function(options) {
            return this.options.writer.set(options).dtdNotation(this);
          };
          return XMLDTDNotation2;
        }(XMLNode2);
      }).call(commonjsGlobal);
      return XMLDTDNotation.exports;
    }
    var hasRequiredXMLDocType;
    function requireXMLDocType() {
      if (hasRequiredXMLDocType)
        return XMLDocType.exports;
      hasRequiredXMLDocType = 1;
      (function() {
        var XMLDTDAttList2, XMLDTDElement2, XMLDTDEntity2, XMLDTDNotation2, XMLNode2, isObject2, extend2 = function(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key))
              child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        }, hasProp = {}.hasOwnProperty;
        isObject2 = requireUtility().isObject;
        XMLNode2 = requireXMLNode();
        XMLDTDAttList2 = requireXMLDTDAttList();
        XMLDTDEntity2 = requireXMLDTDEntity();
        XMLDTDElement2 = requireXMLDTDElement();
        XMLDTDNotation2 = requireXMLDTDNotation();
        XMLDocType.exports = function(superClass) {
          extend2(XMLDocType2, superClass);
          function XMLDocType2(parent, pubID, sysID) {
            var ref2, ref1;
            XMLDocType2.__super__.constructor.call(this, parent);
            this.documentObject = parent;
            if (isObject2(pubID)) {
              ref2 = pubID, pubID = ref2.pubID, sysID = ref2.sysID;
            }
            if (sysID == null) {
              ref1 = [pubID, sysID], sysID = ref1[0], pubID = ref1[1];
            }
            if (pubID != null) {
              this.pubID = this.stringify.dtdPubID(pubID);
            }
            if (sysID != null) {
              this.sysID = this.stringify.dtdSysID(sysID);
            }
          }
          XMLDocType2.prototype.element = function(name, value) {
            var child;
            child = new XMLDTDElement2(this, name, value);
            this.children.push(child);
            return this;
          };
          XMLDocType2.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
            var child;
            child = new XMLDTDAttList2(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
            this.children.push(child);
            return this;
          };
          XMLDocType2.prototype.entity = function(name, value) {
            var child;
            child = new XMLDTDEntity2(this, false, name, value);
            this.children.push(child);
            return this;
          };
          XMLDocType2.prototype.pEntity = function(name, value) {
            var child;
            child = new XMLDTDEntity2(this, true, name, value);
            this.children.push(child);
            return this;
          };
          XMLDocType2.prototype.notation = function(name, value) {
            var child;
            child = new XMLDTDNotation2(this, name, value);
            this.children.push(child);
            return this;
          };
          XMLDocType2.prototype.toString = function(options) {
            return this.options.writer.set(options).docType(this);
          };
          XMLDocType2.prototype.ele = function(name, value) {
            return this.element(name, value);
          };
          XMLDocType2.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
            return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);
          };
          XMLDocType2.prototype.ent = function(name, value) {
            return this.entity(name, value);
          };
          XMLDocType2.prototype.pent = function(name, value) {
            return this.pEntity(name, value);
          };
          XMLDocType2.prototype.not = function(name, value) {
            return this.notation(name, value);
          };
          XMLDocType2.prototype.up = function() {
            return this.root() || this.documentObject;
          };
          return XMLDocType2;
        }(XMLNode2);
      }).call(commonjsGlobal);
      return XMLDocType.exports;
    }
    var XMLRaw = { exports: {} };
    var hasRequiredXMLRaw;
    function requireXMLRaw() {
      if (hasRequiredXMLRaw)
        return XMLRaw.exports;
      hasRequiredXMLRaw = 1;
      (function() {
        var XMLNode2, extend2 = function(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key))
              child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        }, hasProp = {}.hasOwnProperty;
        XMLNode2 = requireXMLNode();
        XMLRaw.exports = function(superClass) {
          extend2(XMLRaw2, superClass);
          function XMLRaw2(parent, text) {
            XMLRaw2.__super__.constructor.call(this, parent);
            if (text == null) {
              throw new Error("Missing raw text");
            }
            this.value = this.stringify.raw(text);
          }
          XMLRaw2.prototype.clone = function() {
            return Object.create(this);
          };
          XMLRaw2.prototype.toString = function(options) {
            return this.options.writer.set(options).raw(this);
          };
          return XMLRaw2;
        }(XMLNode2);
      }).call(commonjsGlobal);
      return XMLRaw.exports;
    }
    var XMLText = { exports: {} };
    var hasRequiredXMLText;
    function requireXMLText() {
      if (hasRequiredXMLText)
        return XMLText.exports;
      hasRequiredXMLText = 1;
      (function() {
        var XMLNode2, extend2 = function(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key))
              child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        }, hasProp = {}.hasOwnProperty;
        XMLNode2 = requireXMLNode();
        XMLText.exports = function(superClass) {
          extend2(XMLText2, superClass);
          function XMLText2(parent, text) {
            XMLText2.__super__.constructor.call(this, parent);
            if (text == null) {
              throw new Error("Missing element text");
            }
            this.value = this.stringify.eleText(text);
          }
          XMLText2.prototype.clone = function() {
            return Object.create(this);
          };
          XMLText2.prototype.toString = function(options) {
            return this.options.writer.set(options).text(this);
          };
          return XMLText2;
        }(XMLNode2);
      }).call(commonjsGlobal);
      return XMLText.exports;
    }
    var XMLProcessingInstruction = { exports: {} };
    var hasRequiredXMLProcessingInstruction;
    function requireXMLProcessingInstruction() {
      if (hasRequiredXMLProcessingInstruction)
        return XMLProcessingInstruction.exports;
      hasRequiredXMLProcessingInstruction = 1;
      (function() {
        var XMLNode2, extend2 = function(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key))
              child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        }, hasProp = {}.hasOwnProperty;
        XMLNode2 = requireXMLNode();
        XMLProcessingInstruction.exports = function(superClass) {
          extend2(XMLProcessingInstruction2, superClass);
          function XMLProcessingInstruction2(parent, target, value) {
            XMLProcessingInstruction2.__super__.constructor.call(this, parent);
            if (target == null) {
              throw new Error("Missing instruction target");
            }
            this.target = this.stringify.insTarget(target);
            if (value) {
              this.value = this.stringify.insValue(value);
            }
          }
          XMLProcessingInstruction2.prototype.clone = function() {
            return Object.create(this);
          };
          XMLProcessingInstruction2.prototype.toString = function(options) {
            return this.options.writer.set(options).processingInstruction(this);
          };
          return XMLProcessingInstruction2;
        }(XMLNode2);
      }).call(commonjsGlobal);
      return XMLProcessingInstruction.exports;
    }
    var hasRequiredXMLNode;
    function requireXMLNode() {
      if (hasRequiredXMLNode)
        return XMLNode.exports;
      hasRequiredXMLNode = 1;
      (function() {
        var XMLCData2, XMLComment2, XMLDeclaration2, XMLDocType2, XMLElement2, XMLProcessingInstruction2, XMLRaw2, XMLText2, isEmpty2, isFunction2, isObject2, ref2, hasProp = {}.hasOwnProperty;
        ref2 = requireUtility(), isObject2 = ref2.isObject, isFunction2 = ref2.isFunction, isEmpty2 = ref2.isEmpty;
        XMLElement2 = null;
        XMLCData2 = null;
        XMLComment2 = null;
        XMLDeclaration2 = null;
        XMLDocType2 = null;
        XMLRaw2 = null;
        XMLText2 = null;
        XMLProcessingInstruction2 = null;
        XMLNode.exports = function() {
          function XMLNode2(parent) {
            this.parent = parent;
            if (this.parent) {
              this.options = this.parent.options;
              this.stringify = this.parent.stringify;
            }
            this.children = [];
            if (!XMLElement2) {
              XMLElement2 = requireXMLElement();
              XMLCData2 = requireXMLCData();
              XMLComment2 = requireXMLComment();
              XMLDeclaration2 = requireXMLDeclaration();
              XMLDocType2 = requireXMLDocType();
              XMLRaw2 = requireXMLRaw();
              XMLText2 = requireXMLText();
              XMLProcessingInstruction2 = requireXMLProcessingInstruction();
            }
          }
          XMLNode2.prototype.element = function(name, attributes2, text) {
            var childNode, item, j2, k, key, lastChild, len, len1, ref1, val;
            lastChild = null;
            if (attributes2 == null) {
              attributes2 = {};
            }
            attributes2 = attributes2.valueOf();
            if (!isObject2(attributes2)) {
              ref1 = [attributes2, text], text = ref1[0], attributes2 = ref1[1];
            }
            if (name != null) {
              name = name.valueOf();
            }
            if (Array.isArray(name)) {
              for (j2 = 0, len = name.length; j2 < len; j2++) {
                item = name[j2];
                lastChild = this.element(item);
              }
            } else if (isFunction2(name)) {
              lastChild = this.element(name.apply());
            } else if (isObject2(name)) {
              for (key in name) {
                if (!hasProp.call(name, key))
                  continue;
                val = name[key];
                if (isFunction2(val)) {
                  val = val.apply();
                }
                if (isObject2(val) && isEmpty2(val)) {
                  val = null;
                }
                if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {
                  lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);
                } else if (!this.options.separateArrayItems && Array.isArray(val)) {
                  for (k = 0, len1 = val.length; k < len1; k++) {
                    item = val[k];
                    childNode = {};
                    childNode[key] = item;
                    lastChild = this.element(childNode);
                  }
                } else if (isObject2(val)) {
                  lastChild = this.element(key);
                  lastChild.element(val);
                } else {
                  lastChild = this.element(key, val);
                }
              }
            } else {
              if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {
                lastChild = this.text(text);
              } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {
                lastChild = this.cdata(text);
              } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {
                lastChild = this.comment(text);
              } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {
                lastChild = this.raw(text);
              } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && name.indexOf(this.stringify.convertPIKey) === 0) {
                lastChild = this.instruction(name.substr(this.stringify.convertPIKey.length), text);
              } else {
                lastChild = this.node(name, attributes2, text);
              }
            }
            if (lastChild == null) {
              throw new Error("Could not create any elements with: " + name);
            }
            return lastChild;
          };
          XMLNode2.prototype.insertBefore = function(name, attributes2, text) {
            var child, i2, removed;
            if (this.isRoot) {
              throw new Error("Cannot insert elements at root level");
            }
            i2 = this.parent.children.indexOf(this);
            removed = this.parent.children.splice(i2);
            child = this.parent.element(name, attributes2, text);
            Array.prototype.push.apply(this.parent.children, removed);
            return child;
          };
          XMLNode2.prototype.insertAfter = function(name, attributes2, text) {
            var child, i2, removed;
            if (this.isRoot) {
              throw new Error("Cannot insert elements at root level");
            }
            i2 = this.parent.children.indexOf(this);
            removed = this.parent.children.splice(i2 + 1);
            child = this.parent.element(name, attributes2, text);
            Array.prototype.push.apply(this.parent.children, removed);
            return child;
          };
          XMLNode2.prototype.remove = function() {
            var i2;
            if (this.isRoot) {
              throw new Error("Cannot remove the root element");
            }
            i2 = this.parent.children.indexOf(this);
            [].splice.apply(this.parent.children, [i2, i2 - i2 + 1].concat([]));
            return this.parent;
          };
          XMLNode2.prototype.node = function(name, attributes2, text) {
            var child, ref1;
            if (name != null) {
              name = name.valueOf();
            }
            attributes2 || (attributes2 = {});
            attributes2 = attributes2.valueOf();
            if (!isObject2(attributes2)) {
              ref1 = [attributes2, text], text = ref1[0], attributes2 = ref1[1];
            }
            child = new XMLElement2(this, name, attributes2);
            if (text != null) {
              child.text(text);
            }
            this.children.push(child);
            return child;
          };
          XMLNode2.prototype.text = function(value) {
            var child;
            child = new XMLText2(this, value);
            this.children.push(child);
            return this;
          };
          XMLNode2.prototype.cdata = function(value) {
            var child;
            child = new XMLCData2(this, value);
            this.children.push(child);
            return this;
          };
          XMLNode2.prototype.comment = function(value) {
            var child;
            child = new XMLComment2(this, value);
            this.children.push(child);
            return this;
          };
          XMLNode2.prototype.commentBefore = function(value) {
            var i2, removed;
            i2 = this.parent.children.indexOf(this);
            removed = this.parent.children.splice(i2);
            this.parent.comment(value);
            Array.prototype.push.apply(this.parent.children, removed);
            return this;
          };
          XMLNode2.prototype.commentAfter = function(value) {
            var i2, removed;
            i2 = this.parent.children.indexOf(this);
            removed = this.parent.children.splice(i2 + 1);
            this.parent.comment(value);
            Array.prototype.push.apply(this.parent.children, removed);
            return this;
          };
          XMLNode2.prototype.raw = function(value) {
            var child;
            child = new XMLRaw2(this, value);
            this.children.push(child);
            return this;
          };
          XMLNode2.prototype.instruction = function(target, value) {
            var insTarget, insValue, instruction, j2, len;
            if (target != null) {
              target = target.valueOf();
            }
            if (value != null) {
              value = value.valueOf();
            }
            if (Array.isArray(target)) {
              for (j2 = 0, len = target.length; j2 < len; j2++) {
                insTarget = target[j2];
                this.instruction(insTarget);
              }
            } else if (isObject2(target)) {
              for (insTarget in target) {
                if (!hasProp.call(target, insTarget))
                  continue;
                insValue = target[insTarget];
                this.instruction(insTarget, insValue);
              }
            } else {
              if (isFunction2(value)) {
                value = value.apply();
              }
              instruction = new XMLProcessingInstruction2(this, target, value);
              this.children.push(instruction);
            }
            return this;
          };
          XMLNode2.prototype.instructionBefore = function(target, value) {
            var i2, removed;
            i2 = this.parent.children.indexOf(this);
            removed = this.parent.children.splice(i2);
            this.parent.instruction(target, value);
            Array.prototype.push.apply(this.parent.children, removed);
            return this;
          };
          XMLNode2.prototype.instructionAfter = function(target, value) {
            var i2, removed;
            i2 = this.parent.children.indexOf(this);
            removed = this.parent.children.splice(i2 + 1);
            this.parent.instruction(target, value);
            Array.prototype.push.apply(this.parent.children, removed);
            return this;
          };
          XMLNode2.prototype.declaration = function(version2, encoding, standalone) {
            var doc2, xmldec;
            doc2 = this.document();
            xmldec = new XMLDeclaration2(doc2, version2, encoding, standalone);
            if (doc2.children[0] instanceof XMLDeclaration2) {
              doc2.children[0] = xmldec;
            } else {
              doc2.children.unshift(xmldec);
            }
            return doc2.root() || doc2;
          };
          XMLNode2.prototype.doctype = function(pubID, sysID) {
            var child, doc2, doctype, i2, j2, k, len, len1, ref1, ref22;
            doc2 = this.document();
            doctype = new XMLDocType2(doc2, pubID, sysID);
            ref1 = doc2.children;
            for (i2 = j2 = 0, len = ref1.length; j2 < len; i2 = ++j2) {
              child = ref1[i2];
              if (child instanceof XMLDocType2) {
                doc2.children[i2] = doctype;
                return doctype;
              }
            }
            ref22 = doc2.children;
            for (i2 = k = 0, len1 = ref22.length; k < len1; i2 = ++k) {
              child = ref22[i2];
              if (child.isRoot) {
                doc2.children.splice(i2, 0, doctype);
                return doctype;
              }
            }
            doc2.children.push(doctype);
            return doctype;
          };
          XMLNode2.prototype.up = function() {
            if (this.isRoot) {
              throw new Error("The root node has no parent. Use doc() if you need to get the document object.");
            }
            return this.parent;
          };
          XMLNode2.prototype.root = function() {
            var node;
            node = this;
            while (node) {
              if (node.isDocument) {
                return node.rootObject;
              } else if (node.isRoot) {
                return node;
              } else {
                node = node.parent;
              }
            }
          };
          XMLNode2.prototype.document = function() {
            var node;
            node = this;
            while (node) {
              if (node.isDocument) {
                return node;
              } else {
                node = node.parent;
              }
            }
          };
          XMLNode2.prototype.end = function(options) {
            return this.document().end(options);
          };
          XMLNode2.prototype.prev = function() {
            var i2;
            i2 = this.parent.children.indexOf(this);
            if (i2 < 1) {
              throw new Error("Already at the first node");
            }
            return this.parent.children[i2 - 1];
          };
          XMLNode2.prototype.next = function() {
            var i2;
            i2 = this.parent.children.indexOf(this);
            if (i2 === -1 || i2 === this.parent.children.length - 1) {
              throw new Error("Already at the last node");
            }
            return this.parent.children[i2 + 1];
          };
          XMLNode2.prototype.importDocument = function(doc2) {
            var clonedRoot;
            clonedRoot = doc2.root().clone();
            clonedRoot.parent = this;
            clonedRoot.isRoot = false;
            this.children.push(clonedRoot);
            return this;
          };
          XMLNode2.prototype.ele = function(name, attributes2, text) {
            return this.element(name, attributes2, text);
          };
          XMLNode2.prototype.nod = function(name, attributes2, text) {
            return this.node(name, attributes2, text);
          };
          XMLNode2.prototype.txt = function(value) {
            return this.text(value);
          };
          XMLNode2.prototype.dat = function(value) {
            return this.cdata(value);
          };
          XMLNode2.prototype.com = function(value) {
            return this.comment(value);
          };
          XMLNode2.prototype.ins = function(target, value) {
            return this.instruction(target, value);
          };
          XMLNode2.prototype.doc = function() {
            return this.document();
          };
          XMLNode2.prototype.dec = function(version2, encoding, standalone) {
            return this.declaration(version2, encoding, standalone);
          };
          XMLNode2.prototype.dtd = function(pubID, sysID) {
            return this.doctype(pubID, sysID);
          };
          XMLNode2.prototype.e = function(name, attributes2, text) {
            return this.element(name, attributes2, text);
          };
          XMLNode2.prototype.n = function(name, attributes2, text) {
            return this.node(name, attributes2, text);
          };
          XMLNode2.prototype.t = function(value) {
            return this.text(value);
          };
          XMLNode2.prototype.d = function(value) {
            return this.cdata(value);
          };
          XMLNode2.prototype.c = function(value) {
            return this.comment(value);
          };
          XMLNode2.prototype.r = function(value) {
            return this.raw(value);
          };
          XMLNode2.prototype.i = function(target, value) {
            return this.instruction(target, value);
          };
          XMLNode2.prototype.u = function() {
            return this.up();
          };
          XMLNode2.prototype.importXMLBuilder = function(doc2) {
            return this.importDocument(doc2);
          };
          return XMLNode2;
        }();
      }).call(commonjsGlobal);
      return XMLNode.exports;
    }
    var XMLStringifier = { exports: {} };
    var hasRequiredXMLStringifier;
    function requireXMLStringifier() {
      if (hasRequiredXMLStringifier)
        return XMLStringifier.exports;
      hasRequiredXMLStringifier = 1;
      (function() {
        var camelCase, kebabCase, ref2, snakeCase, titleCase, bind2 = function(fn2, me2) {
          return function() {
            return fn2.apply(me2, arguments);
          };
        }, hasProp = {}.hasOwnProperty;
        ref2 = requireUtility(), camelCase = ref2.camelCase, titleCase = ref2.titleCase, kebabCase = ref2.kebabCase, snakeCase = ref2.snakeCase;
        XMLStringifier.exports = function() {
          function XMLStringifier2(options) {
            this.assertLegalChar = bind2(this.assertLegalChar, this);
            var key, ref1, value;
            options || (options = {});
            this.allowSurrogateChars = options.allowSurrogateChars;
            this.noDoubleEncoding = options.noDoubleEncoding;
            this.textCase = options.textCase;
            ref1 = options.stringify || {};
            for (key in ref1) {
              if (!hasProp.call(ref1, key))
                continue;
              value = ref1[key];
              this[key] = value;
            }
          }
          XMLStringifier2.prototype.eleName = function(val) {
            val = "" + val || "";
            val = this.applyCase(val);
            return this.assertLegalChar(val);
          };
          XMLStringifier2.prototype.eleText = function(val) {
            val = "" + val || "";
            return this.assertLegalChar(this.elEscape(val));
          };
          XMLStringifier2.prototype.cdata = function(val) {
            val = "" + val || "";
            val = val.replace("]]>", "]]]]><![CDATA[>");
            return this.assertLegalChar(val);
          };
          XMLStringifier2.prototype.comment = function(val) {
            val = "" + val || "";
            if (val.match(/--/)) {
              throw new Error("Comment text cannot contain double-hypen: " + val);
            }
            return this.assertLegalChar(val);
          };
          XMLStringifier2.prototype.raw = function(val) {
            return "" + val || "";
          };
          XMLStringifier2.prototype.attName = function(val) {
            val = "" + val || "";
            return val = this.applyCase(val);
          };
          XMLStringifier2.prototype.attValue = function(val) {
            val = "" + val || "";
            return this.attEscape(val);
          };
          XMLStringifier2.prototype.insTarget = function(val) {
            return "" + val || "";
          };
          XMLStringifier2.prototype.insValue = function(val) {
            val = "" + val || "";
            if (val.match(/\?>/)) {
              throw new Error("Invalid processing instruction value: " + val);
            }
            return val;
          };
          XMLStringifier2.prototype.xmlVersion = function(val) {
            val = "" + val || "";
            if (!val.match(/1\.[0-9]+/)) {
              throw new Error("Invalid version number: " + val);
            }
            return val;
          };
          XMLStringifier2.prototype.xmlEncoding = function(val) {
            val = "" + val || "";
            if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-]|-)*$/)) {
              throw new Error("Invalid encoding: " + val);
            }
            return val;
          };
          XMLStringifier2.prototype.xmlStandalone = function(val) {
            if (val) {
              return "yes";
            } else {
              return "no";
            }
          };
          XMLStringifier2.prototype.dtdPubID = function(val) {
            return "" + val || "";
          };
          XMLStringifier2.prototype.dtdSysID = function(val) {
            return "" + val || "";
          };
          XMLStringifier2.prototype.dtdElementValue = function(val) {
            return "" + val || "";
          };
          XMLStringifier2.prototype.dtdAttType = function(val) {
            return "" + val || "";
          };
          XMLStringifier2.prototype.dtdAttDefault = function(val) {
            if (val != null) {
              return "" + val || "";
            } else {
              return val;
            }
          };
          XMLStringifier2.prototype.dtdEntityValue = function(val) {
            return "" + val || "";
          };
          XMLStringifier2.prototype.dtdNData = function(val) {
            return "" + val || "";
          };
          XMLStringifier2.prototype.convertAttKey = "@";
          XMLStringifier2.prototype.convertPIKey = "?";
          XMLStringifier2.prototype.convertTextKey = "#text";
          XMLStringifier2.prototype.convertCDataKey = "#cdata";
          XMLStringifier2.prototype.convertCommentKey = "#comment";
          XMLStringifier2.prototype.convertRawKey = "#raw";
          XMLStringifier2.prototype.assertLegalChar = function(str2) {
            var chars, chr;
            if (this.allowSurrogateChars) {
              chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uFFFE-\uFFFF]/;
            } else {
              chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uD800-\uDFFF\uFFFE-\uFFFF]/;
            }
            chr = str2.match(chars);
            if (chr) {
              throw new Error("Invalid character (" + chr + ") in string: " + str2 + " at index " + chr.index);
            }
            return str2;
          };
          XMLStringifier2.prototype.applyCase = function(str2) {
            switch (this.textCase) {
              case "camel":
                return camelCase(str2);
              case "title":
                return titleCase(str2);
              case "kebab":
              case "lower":
                return kebabCase(str2);
              case "snake":
                return snakeCase(str2);
              case "upper":
                return kebabCase(str2).toUpperCase();
              default:
                return str2;
            }
          };
          XMLStringifier2.prototype.elEscape = function(str2) {
            var ampregex;
            ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
            return str2.replace(ampregex, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\r/g, "&#xD;");
          };
          XMLStringifier2.prototype.attEscape = function(str2) {
            var ampregex;
            ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
            return str2.replace(ampregex, "&amp;").replace(/</g, "&lt;").replace(/"/g, "&quot;").replace(/\t/g, "&#x9;").replace(/\n/g, "&#xA;").replace(/\r/g, "&#xD;");
          };
          return XMLStringifier2;
        }();
      }).call(commonjsGlobal);
      return XMLStringifier.exports;
    }
    var XMLStringWriter = { exports: {} };
    var XMLWriterBase = { exports: {} };
    var hasRequiredXMLWriterBase;
    function requireXMLWriterBase() {
      if (hasRequiredXMLWriterBase)
        return XMLWriterBase.exports;
      hasRequiredXMLWriterBase = 1;
      (function() {
        var hasProp = {}.hasOwnProperty;
        XMLWriterBase.exports = function() {
          function XMLWriterBase2(options) {
            var key, ref2, ref1, ref22, ref3, ref4, value;
            options || (options = {});
            this.pretty = options.pretty || false;
            this.allowEmpty = (ref2 = options.allowEmpty) != null ? ref2 : false;
            if (this.pretty) {
              this.indent = (ref1 = options.indent) != null ? ref1 : "  ";
              this.newline = (ref22 = options.newline) != null ? ref22 : "\n";
              this.offset = (ref3 = options.offset) != null ? ref3 : 0;
            } else {
              this.indent = "";
              this.newline = "";
              this.offset = 0;
            }
            ref4 = options.writer || {};
            for (key in ref4) {
              if (!hasProp.call(ref4, key))
                continue;
              value = ref4[key];
              this[key] = value;
            }
          }
          XMLWriterBase2.prototype.set = function(options) {
            var key, ref2, value;
            options || (options = {});
            if ("pretty" in options) {
              this.pretty = options.pretty;
            }
            if ("allowEmpty" in options) {
              this.allowEmpty = options.allowEmpty;
            }
            if (this.pretty) {
              this.indent = "indent" in options ? options.indent : "  ";
              this.newline = "newline" in options ? options.newline : "\n";
              this.offset = "offset" in options ? options.offset : 0;
            } else {
              this.indent = "";
              this.newline = "";
              this.offset = 0;
            }
            ref2 = options.writer || {};
            for (key in ref2) {
              if (!hasProp.call(ref2, key))
                continue;
              value = ref2[key];
              this[key] = value;
            }
            return this;
          };
          XMLWriterBase2.prototype.space = function(level) {
            if (this.pretty) {
              return new Array((level || 0) + this.offset + 1).join(this.indent);
            } else {
              return "";
            }
          };
          return XMLWriterBase2;
        }();
      }).call(commonjsGlobal);
      return XMLWriterBase.exports;
    }
    var hasRequiredXMLStringWriter;
    function requireXMLStringWriter() {
      if (hasRequiredXMLStringWriter)
        return XMLStringWriter.exports;
      hasRequiredXMLStringWriter = 1;
      (function() {
        var XMLCData2, XMLComment2, XMLDTDAttList2, XMLDTDElement2, XMLDTDEntity2, XMLDTDNotation2, XMLDeclaration2, XMLDocType2, XMLElement2, XMLProcessingInstruction2, XMLRaw2, XMLText2, XMLWriterBase2, extend2 = function(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key))
              child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        }, hasProp = {}.hasOwnProperty;
        XMLDeclaration2 = requireXMLDeclaration();
        XMLDocType2 = requireXMLDocType();
        XMLCData2 = requireXMLCData();
        XMLComment2 = requireXMLComment();
        XMLElement2 = requireXMLElement();
        XMLRaw2 = requireXMLRaw();
        XMLText2 = requireXMLText();
        XMLProcessingInstruction2 = requireXMLProcessingInstruction();
        XMLDTDAttList2 = requireXMLDTDAttList();
        XMLDTDElement2 = requireXMLDTDElement();
        XMLDTDEntity2 = requireXMLDTDEntity();
        XMLDTDNotation2 = requireXMLDTDNotation();
        XMLWriterBase2 = requireXMLWriterBase();
        XMLStringWriter.exports = function(superClass) {
          extend2(XMLStringWriter2, superClass);
          function XMLStringWriter2(options) {
            XMLStringWriter2.__super__.constructor.call(this, options);
          }
          XMLStringWriter2.prototype.document = function(doc2) {
            var child, i2, len, r, ref2;
            r = "";
            ref2 = doc2.children;
            for (i2 = 0, len = ref2.length; i2 < len; i2++) {
              child = ref2[i2];
              r += function() {
                switch (false) {
                  case !(child instanceof XMLDeclaration2):
                    return this.declaration(child);
                  case !(child instanceof XMLDocType2):
                    return this.docType(child);
                  case !(child instanceof XMLComment2):
                    return this.comment(child);
                  case !(child instanceof XMLProcessingInstruction2):
                    return this.processingInstruction(child);
                  default:
                    return this.element(child, 0);
                }
              }.call(this);
            }
            if (this.pretty && r.slice(-this.newline.length) === this.newline) {
              r = r.slice(0, -this.newline.length);
            }
            return r;
          };
          XMLStringWriter2.prototype.attribute = function(att) {
            return " " + att.name + '="' + att.value + '"';
          };
          XMLStringWriter2.prototype.cdata = function(node, level) {
            return this.space(level) + "<![CDATA[" + node.text + "]]>" + this.newline;
          };
          XMLStringWriter2.prototype.comment = function(node, level) {
            return this.space(level) + "<!-- " + node.text + " -->" + this.newline;
          };
          XMLStringWriter2.prototype.declaration = function(node, level) {
            var r;
            r = this.space(level);
            r += '<?xml version="' + node.version + '"';
            if (node.encoding != null) {
              r += ' encoding="' + node.encoding + '"';
            }
            if (node.standalone != null) {
              r += ' standalone="' + node.standalone + '"';
            }
            r += "?>";
            r += this.newline;
            return r;
          };
          XMLStringWriter2.prototype.docType = function(node, level) {
            var child, i2, len, r, ref2;
            level || (level = 0);
            r = this.space(level);
            r += "<!DOCTYPE " + node.root().name;
            if (node.pubID && node.sysID) {
              r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
            } else if (node.sysID) {
              r += ' SYSTEM "' + node.sysID + '"';
            }
            if (node.children.length > 0) {
              r += " [";
              r += this.newline;
              ref2 = node.children;
              for (i2 = 0, len = ref2.length; i2 < len; i2++) {
                child = ref2[i2];
                r += function() {
                  switch (false) {
                    case !(child instanceof XMLDTDAttList2):
                      return this.dtdAttList(child, level + 1);
                    case !(child instanceof XMLDTDElement2):
                      return this.dtdElement(child, level + 1);
                    case !(child instanceof XMLDTDEntity2):
                      return this.dtdEntity(child, level + 1);
                    case !(child instanceof XMLDTDNotation2):
                      return this.dtdNotation(child, level + 1);
                    case !(child instanceof XMLCData2):
                      return this.cdata(child, level + 1);
                    case !(child instanceof XMLComment2):
                      return this.comment(child, level + 1);
                    case !(child instanceof XMLProcessingInstruction2):
                      return this.processingInstruction(child, level + 1);
                    default:
                      throw new Error("Unknown DTD node type: " + child.constructor.name);
                  }
                }.call(this);
              }
              r += "]";
            }
            r += ">";
            r += this.newline;
            return r;
          };
          XMLStringWriter2.prototype.element = function(node, level) {
            var att, child, i2, len, name, r, ref2, ref1, space;
            level || (level = 0);
            space = this.space(level);
            r = "";
            r += space + "<" + node.name;
            ref2 = node.attributes;
            for (name in ref2) {
              if (!hasProp.call(ref2, name))
                continue;
              att = ref2[name];
              r += this.attribute(att);
            }
            if (node.children.length === 0 || node.children.every(function(e2) {
              return e2.value === "";
            })) {
              if (this.allowEmpty) {
                r += "></" + node.name + ">" + this.newline;
              } else {
                r += "/>" + this.newline;
              }
            } else if (this.pretty && node.children.length === 1 && node.children[0].value != null) {
              r += ">";
              r += node.children[0].value;
              r += "</" + node.name + ">" + this.newline;
            } else {
              r += ">" + this.newline;
              ref1 = node.children;
              for (i2 = 0, len = ref1.length; i2 < len; i2++) {
                child = ref1[i2];
                r += function() {
                  switch (false) {
                    case !(child instanceof XMLCData2):
                      return this.cdata(child, level + 1);
                    case !(child instanceof XMLComment2):
                      return this.comment(child, level + 1);
                    case !(child instanceof XMLElement2):
                      return this.element(child, level + 1);
                    case !(child instanceof XMLRaw2):
                      return this.raw(child, level + 1);
                    case !(child instanceof XMLText2):
                      return this.text(child, level + 1);
                    case !(child instanceof XMLProcessingInstruction2):
                      return this.processingInstruction(child, level + 1);
                    default:
                      throw new Error("Unknown XML node type: " + child.constructor.name);
                  }
                }.call(this);
              }
              r += space + "</" + node.name + ">" + this.newline;
            }
            return r;
          };
          XMLStringWriter2.prototype.processingInstruction = function(node, level) {
            var r;
            r = this.space(level) + "<?" + node.target;
            if (node.value) {
              r += " " + node.value;
            }
            r += "?>" + this.newline;
            return r;
          };
          XMLStringWriter2.prototype.raw = function(node, level) {
            return this.space(level) + node.value + this.newline;
          };
          XMLStringWriter2.prototype.text = function(node, level) {
            return this.space(level) + node.value + this.newline;
          };
          XMLStringWriter2.prototype.dtdAttList = function(node, level) {
            var r;
            r = this.space(level) + "<!ATTLIST " + node.elementName + " " + node.attributeName + " " + node.attributeType;
            if (node.defaultValueType !== "#DEFAULT") {
              r += " " + node.defaultValueType;
            }
            if (node.defaultValue) {
              r += ' "' + node.defaultValue + '"';
            }
            r += ">" + this.newline;
            return r;
          };
          XMLStringWriter2.prototype.dtdElement = function(node, level) {
            return this.space(level) + "<!ELEMENT " + node.name + " " + node.value + ">" + this.newline;
          };
          XMLStringWriter2.prototype.dtdEntity = function(node, level) {
            var r;
            r = this.space(level) + "<!ENTITY";
            if (node.pe) {
              r += " %";
            }
            r += " " + node.name;
            if (node.value) {
              r += ' "' + node.value + '"';
            } else {
              if (node.pubID && node.sysID) {
                r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
              } else if (node.sysID) {
                r += ' SYSTEM "' + node.sysID + '"';
              }
              if (node.nData) {
                r += " NDATA " + node.nData;
              }
            }
            r += ">" + this.newline;
            return r;
          };
          XMLStringWriter2.prototype.dtdNotation = function(node, level) {
            var r;
            r = this.space(level) + "<!NOTATION " + node.name;
            if (node.pubID && node.sysID) {
              r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
            } else if (node.pubID) {
              r += ' PUBLIC "' + node.pubID + '"';
            } else if (node.sysID) {
              r += ' SYSTEM "' + node.sysID + '"';
            }
            r += ">" + this.newline;
            return r;
          };
          XMLStringWriter2.prototype.openNode = function(node, level) {
            var att, name, r, ref2;
            level || (level = 0);
            if (node instanceof XMLElement2) {
              r = this.space(level) + "<" + node.name;
              ref2 = node.attributes;
              for (name in ref2) {
                if (!hasProp.call(ref2, name))
                  continue;
                att = ref2[name];
                r += this.attribute(att);
              }
              r += (node.children ? ">" : "/>") + this.newline;
              return r;
            } else {
              r = this.space(level) + "<!DOCTYPE " + node.rootNodeName;
              if (node.pubID && node.sysID) {
                r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
              } else if (node.sysID) {
                r += ' SYSTEM "' + node.sysID + '"';
              }
              r += (node.children ? " [" : ">") + this.newline;
              return r;
            }
          };
          XMLStringWriter2.prototype.closeNode = function(node, level) {
            level || (level = 0);
            switch (false) {
              case !(node instanceof XMLElement2):
                return this.space(level) + "</" + node.name + ">" + this.newline;
              case !(node instanceof XMLDocType2):
                return this.space(level) + "]>" + this.newline;
            }
          };
          return XMLStringWriter2;
        }(XMLWriterBase2);
      }).call(commonjsGlobal);
      return XMLStringWriter.exports;
    }
    var hasRequiredXMLDocument;
    function requireXMLDocument() {
      if (hasRequiredXMLDocument)
        return XMLDocument.exports;
      hasRequiredXMLDocument = 1;
      (function() {
        var XMLNode2, XMLStringWriter2, XMLStringifier2, isPlainObject2, extend2 = function(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key))
              child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        }, hasProp = {}.hasOwnProperty;
        isPlainObject2 = requireUtility().isPlainObject;
        XMLNode2 = requireXMLNode();
        XMLStringifier2 = requireXMLStringifier();
        XMLStringWriter2 = requireXMLStringWriter();
        XMLDocument.exports = function(superClass) {
          extend2(XMLDocument2, superClass);
          function XMLDocument2(options) {
            XMLDocument2.__super__.constructor.call(this, null);
            options || (options = {});
            if (!options.writer) {
              options.writer = new XMLStringWriter2();
            }
            this.options = options;
            this.stringify = new XMLStringifier2(options);
            this.isDocument = true;
          }
          XMLDocument2.prototype.end = function(writer) {
            var writerOptions;
            if (!writer) {
              writer = this.options.writer;
            } else if (isPlainObject2(writer)) {
              writerOptions = writer;
              writer = this.options.writer.set(writerOptions);
            }
            return writer.document(this);
          };
          XMLDocument2.prototype.toString = function(options) {
            return this.options.writer.set(options).document(this);
          };
          return XMLDocument2;
        }(XMLNode2);
      }).call(commonjsGlobal);
      return XMLDocument.exports;
    }
    var XMLDocumentCB = { exports: {} };
    var hasRequiredXMLDocumentCB;
    function requireXMLDocumentCB() {
      if (hasRequiredXMLDocumentCB)
        return XMLDocumentCB.exports;
      hasRequiredXMLDocumentCB = 1;
      (function() {
        var XMLAttribute2, XMLCData2, XMLComment2, XMLDTDAttList2, XMLDTDElement2, XMLDTDEntity2, XMLDTDNotation2, XMLDeclaration2, XMLDocType2, XMLElement2, XMLProcessingInstruction2, XMLRaw2, XMLStringWriter2, XMLStringifier2, XMLText2, isFunction2, isObject2, isPlainObject2, ref2, hasProp = {}.hasOwnProperty;
        ref2 = requireUtility(), isObject2 = ref2.isObject, isFunction2 = ref2.isFunction, isPlainObject2 = ref2.isPlainObject;
        XMLElement2 = requireXMLElement();
        XMLCData2 = requireXMLCData();
        XMLComment2 = requireXMLComment();
        XMLRaw2 = requireXMLRaw();
        XMLText2 = requireXMLText();
        XMLProcessingInstruction2 = requireXMLProcessingInstruction();
        XMLDeclaration2 = requireXMLDeclaration();
        XMLDocType2 = requireXMLDocType();
        XMLDTDAttList2 = requireXMLDTDAttList();
        XMLDTDEntity2 = requireXMLDTDEntity();
        XMLDTDElement2 = requireXMLDTDElement();
        XMLDTDNotation2 = requireXMLDTDNotation();
        XMLAttribute2 = requireXMLAttribute();
        XMLStringifier2 = requireXMLStringifier();
        XMLStringWriter2 = requireXMLStringWriter();
        XMLDocumentCB.exports = function() {
          function XMLDocumentCB2(options, onData, onEnd) {
            var writerOptions;
            options || (options = {});
            if (!options.writer) {
              options.writer = new XMLStringWriter2(options);
            } else if (isPlainObject2(options.writer)) {
              writerOptions = options.writer;
              options.writer = new XMLStringWriter2(writerOptions);
            }
            this.options = options;
            this.writer = options.writer;
            this.stringify = new XMLStringifier2(options);
            this.onDataCallback = onData || function() {
            };
            this.onEndCallback = onEnd || function() {
            };
            this.currentNode = null;
            this.currentLevel = -1;
            this.openTags = {};
            this.documentStarted = false;
            this.documentCompleted = false;
            this.root = null;
          }
          XMLDocumentCB2.prototype.node = function(name, attributes2, text) {
            var ref1;
            if (name == null) {
              throw new Error("Missing node name");
            }
            if (this.root && this.currentLevel === -1) {
              throw new Error("Document can only have one root node");
            }
            this.openCurrent();
            name = name.valueOf();
            if (attributes2 == null) {
              attributes2 = {};
            }
            attributes2 = attributes2.valueOf();
            if (!isObject2(attributes2)) {
              ref1 = [attributes2, text], text = ref1[0], attributes2 = ref1[1];
            }
            this.currentNode = new XMLElement2(this, name, attributes2);
            this.currentNode.children = false;
            this.currentLevel++;
            this.openTags[this.currentLevel] = this.currentNode;
            if (text != null) {
              this.text(text);
            }
            return this;
          };
          XMLDocumentCB2.prototype.element = function(name, attributes2, text) {
            if (this.currentNode && this.currentNode instanceof XMLDocType2) {
              return this.dtdElement.apply(this, arguments);
            } else {
              return this.node(name, attributes2, text);
            }
          };
          XMLDocumentCB2.prototype.attribute = function(name, value) {
            var attName, attValue;
            if (!this.currentNode || this.currentNode.children) {
              throw new Error("att() can only be used immediately after an ele() call in callback mode");
            }
            if (name != null) {
              name = name.valueOf();
            }
            if (isObject2(name)) {
              for (attName in name) {
                if (!hasProp.call(name, attName))
                  continue;
                attValue = name[attName];
                this.attribute(attName, attValue);
              }
            } else {
              if (isFunction2(value)) {
                value = value.apply();
              }
              if (!this.options.skipNullAttributes || value != null) {
                this.currentNode.attributes[name] = new XMLAttribute2(this, name, value);
              }
            }
            return this;
          };
          XMLDocumentCB2.prototype.text = function(value) {
            var node;
            this.openCurrent();
            node = new XMLText2(this, value);
            this.onData(this.writer.text(node, this.currentLevel + 1));
            return this;
          };
          XMLDocumentCB2.prototype.cdata = function(value) {
            var node;
            this.openCurrent();
            node = new XMLCData2(this, value);
            this.onData(this.writer.cdata(node, this.currentLevel + 1));
            return this;
          };
          XMLDocumentCB2.prototype.comment = function(value) {
            var node;
            this.openCurrent();
            node = new XMLComment2(this, value);
            this.onData(this.writer.comment(node, this.currentLevel + 1));
            return this;
          };
          XMLDocumentCB2.prototype.raw = function(value) {
            var node;
            this.openCurrent();
            node = new XMLRaw2(this, value);
            this.onData(this.writer.raw(node, this.currentLevel + 1));
            return this;
          };
          XMLDocumentCB2.prototype.instruction = function(target, value) {
            var i2, insTarget, insValue, len, node;
            this.openCurrent();
            if (target != null) {
              target = target.valueOf();
            }
            if (value != null) {
              value = value.valueOf();
            }
            if (Array.isArray(target)) {
              for (i2 = 0, len = target.length; i2 < len; i2++) {
                insTarget = target[i2];
                this.instruction(insTarget);
              }
            } else if (isObject2(target)) {
              for (insTarget in target) {
                if (!hasProp.call(target, insTarget))
                  continue;
                insValue = target[insTarget];
                this.instruction(insTarget, insValue);
              }
            } else {
              if (isFunction2(value)) {
                value = value.apply();
              }
              node = new XMLProcessingInstruction2(this, target, value);
              this.onData(this.writer.processingInstruction(node, this.currentLevel + 1));
            }
            return this;
          };
          XMLDocumentCB2.prototype.declaration = function(version2, encoding, standalone) {
            var node;
            this.openCurrent();
            if (this.documentStarted) {
              throw new Error("declaration() must be the first node");
            }
            node = new XMLDeclaration2(this, version2, encoding, standalone);
            this.onData(this.writer.declaration(node, this.currentLevel + 1));
            return this;
          };
          XMLDocumentCB2.prototype.doctype = function(root2, pubID, sysID) {
            this.openCurrent();
            if (root2 == null) {
              throw new Error("Missing root node name");
            }
            if (this.root) {
              throw new Error("dtd() must come before the root node");
            }
            this.currentNode = new XMLDocType2(this, pubID, sysID);
            this.currentNode.rootNodeName = root2;
            this.currentNode.children = false;
            this.currentLevel++;
            this.openTags[this.currentLevel] = this.currentNode;
            return this;
          };
          XMLDocumentCB2.prototype.dtdElement = function(name, value) {
            var node;
            this.openCurrent();
            node = new XMLDTDElement2(this, name, value);
            this.onData(this.writer.dtdElement(node, this.currentLevel + 1));
            return this;
          };
          XMLDocumentCB2.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
            var node;
            this.openCurrent();
            node = new XMLDTDAttList2(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
            this.onData(this.writer.dtdAttList(node, this.currentLevel + 1));
            return this;
          };
          XMLDocumentCB2.prototype.entity = function(name, value) {
            var node;
            this.openCurrent();
            node = new XMLDTDEntity2(this, false, name, value);
            this.onData(this.writer.dtdEntity(node, this.currentLevel + 1));
            return this;
          };
          XMLDocumentCB2.prototype.pEntity = function(name, value) {
            var node;
            this.openCurrent();
            node = new XMLDTDEntity2(this, true, name, value);
            this.onData(this.writer.dtdEntity(node, this.currentLevel + 1));
            return this;
          };
          XMLDocumentCB2.prototype.notation = function(name, value) {
            var node;
            this.openCurrent();
            node = new XMLDTDNotation2(this, name, value);
            this.onData(this.writer.dtdNotation(node, this.currentLevel + 1));
            return this;
          };
          XMLDocumentCB2.prototype.up = function() {
            if (this.currentLevel < 0) {
              throw new Error("The document node has no parent");
            }
            if (this.currentNode) {
              if (this.currentNode.children) {
                this.closeNode(this.currentNode);
              } else {
                this.openNode(this.currentNode);
              }
              this.currentNode = null;
            } else {
              this.closeNode(this.openTags[this.currentLevel]);
            }
            delete this.openTags[this.currentLevel];
            this.currentLevel--;
            return this;
          };
          XMLDocumentCB2.prototype.end = function() {
            while (this.currentLevel >= 0) {
              this.up();
            }
            return this.onEnd();
          };
          XMLDocumentCB2.prototype.openCurrent = function() {
            if (this.currentNode) {
              this.currentNode.children = true;
              return this.openNode(this.currentNode);
            }
          };
          XMLDocumentCB2.prototype.openNode = function(node) {
            if (!node.isOpen) {
              if (!this.root && this.currentLevel === 0 && node instanceof XMLElement2) {
                this.root = node;
              }
              this.onData(this.writer.openNode(node, this.currentLevel));
              return node.isOpen = true;
            }
          };
          XMLDocumentCB2.prototype.closeNode = function(node) {
            if (!node.isClosed) {
              this.onData(this.writer.closeNode(node, this.currentLevel));
              return node.isClosed = true;
            }
          };
          XMLDocumentCB2.prototype.onData = function(chunk) {
            this.documentStarted = true;
            return this.onDataCallback(chunk);
          };
          XMLDocumentCB2.prototype.onEnd = function() {
            this.documentCompleted = true;
            return this.onEndCallback();
          };
          XMLDocumentCB2.prototype.ele = function() {
            return this.element.apply(this, arguments);
          };
          XMLDocumentCB2.prototype.nod = function(name, attributes2, text) {
            return this.node(name, attributes2, text);
          };
          XMLDocumentCB2.prototype.txt = function(value) {
            return this.text(value);
          };
          XMLDocumentCB2.prototype.dat = function(value) {
            return this.cdata(value);
          };
          XMLDocumentCB2.prototype.com = function(value) {
            return this.comment(value);
          };
          XMLDocumentCB2.prototype.ins = function(target, value) {
            return this.instruction(target, value);
          };
          XMLDocumentCB2.prototype.dec = function(version2, encoding, standalone) {
            return this.declaration(version2, encoding, standalone);
          };
          XMLDocumentCB2.prototype.dtd = function(root2, pubID, sysID) {
            return this.doctype(root2, pubID, sysID);
          };
          XMLDocumentCB2.prototype.e = function(name, attributes2, text) {
            return this.element(name, attributes2, text);
          };
          XMLDocumentCB2.prototype.n = function(name, attributes2, text) {
            return this.node(name, attributes2, text);
          };
          XMLDocumentCB2.prototype.t = function(value) {
            return this.text(value);
          };
          XMLDocumentCB2.prototype.d = function(value) {
            return this.cdata(value);
          };
          XMLDocumentCB2.prototype.c = function(value) {
            return this.comment(value);
          };
          XMLDocumentCB2.prototype.r = function(value) {
            return this.raw(value);
          };
          XMLDocumentCB2.prototype.i = function(target, value) {
            return this.instruction(target, value);
          };
          XMLDocumentCB2.prototype.att = function() {
            if (this.currentNode && this.currentNode instanceof XMLDocType2) {
              return this.attList.apply(this, arguments);
            } else {
              return this.attribute.apply(this, arguments);
            }
          };
          XMLDocumentCB2.prototype.a = function() {
            if (this.currentNode && this.currentNode instanceof XMLDocType2) {
              return this.attList.apply(this, arguments);
            } else {
              return this.attribute.apply(this, arguments);
            }
          };
          XMLDocumentCB2.prototype.ent = function(name, value) {
            return this.entity(name, value);
          };
          XMLDocumentCB2.prototype.pent = function(name, value) {
            return this.pEntity(name, value);
          };
          XMLDocumentCB2.prototype.not = function(name, value) {
            return this.notation(name, value);
          };
          return XMLDocumentCB2;
        }();
      }).call(commonjsGlobal);
      return XMLDocumentCB.exports;
    }
    var XMLStreamWriter = { exports: {} };
    var hasRequiredXMLStreamWriter;
    function requireXMLStreamWriter() {
      if (hasRequiredXMLStreamWriter)
        return XMLStreamWriter.exports;
      hasRequiredXMLStreamWriter = 1;
      (function() {
        var XMLCData2, XMLComment2, XMLDTDAttList2, XMLDTDElement2, XMLDTDEntity2, XMLDTDNotation2, XMLDeclaration2, XMLDocType2, XMLElement2, XMLProcessingInstruction2, XMLRaw2, XMLText2, XMLWriterBase2, extend2 = function(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key))
              child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        }, hasProp = {}.hasOwnProperty;
        XMLDeclaration2 = requireXMLDeclaration();
        XMLDocType2 = requireXMLDocType();
        XMLCData2 = requireXMLCData();
        XMLComment2 = requireXMLComment();
        XMLElement2 = requireXMLElement();
        XMLRaw2 = requireXMLRaw();
        XMLText2 = requireXMLText();
        XMLProcessingInstruction2 = requireXMLProcessingInstruction();
        XMLDTDAttList2 = requireXMLDTDAttList();
        XMLDTDElement2 = requireXMLDTDElement();
        XMLDTDEntity2 = requireXMLDTDEntity();
        XMLDTDNotation2 = requireXMLDTDNotation();
        XMLWriterBase2 = requireXMLWriterBase();
        XMLStreamWriter.exports = function(superClass) {
          extend2(XMLStreamWriter2, superClass);
          function XMLStreamWriter2(stream2, options) {
            this.stream = stream2;
            XMLStreamWriter2.__super__.constructor.call(this, options);
          }
          XMLStreamWriter2.prototype.document = function(doc2) {
            var child, i2, j2, len, len1, ref2, ref1, results;
            ref2 = doc2.children;
            for (i2 = 0, len = ref2.length; i2 < len; i2++) {
              child = ref2[i2];
              child.isLastRootNode = false;
            }
            doc2.children[doc2.children.length - 1].isLastRootNode = true;
            ref1 = doc2.children;
            results = [];
            for (j2 = 0, len1 = ref1.length; j2 < len1; j2++) {
              child = ref1[j2];
              switch (false) {
                case !(child instanceof XMLDeclaration2):
                  results.push(this.declaration(child));
                  break;
                case !(child instanceof XMLDocType2):
                  results.push(this.docType(child));
                  break;
                case !(child instanceof XMLComment2):
                  results.push(this.comment(child));
                  break;
                case !(child instanceof XMLProcessingInstruction2):
                  results.push(this.processingInstruction(child));
                  break;
                default:
                  results.push(this.element(child));
              }
            }
            return results;
          };
          XMLStreamWriter2.prototype.attribute = function(att) {
            return this.stream.write(" " + att.name + '="' + att.value + '"');
          };
          XMLStreamWriter2.prototype.cdata = function(node, level) {
            return this.stream.write(this.space(level) + "<![CDATA[" + node.text + "]]>" + this.endline(node));
          };
          XMLStreamWriter2.prototype.comment = function(node, level) {
            return this.stream.write(this.space(level) + "<!-- " + node.text + " -->" + this.endline(node));
          };
          XMLStreamWriter2.prototype.declaration = function(node, level) {
            this.stream.write(this.space(level));
            this.stream.write('<?xml version="' + node.version + '"');
            if (node.encoding != null) {
              this.stream.write(' encoding="' + node.encoding + '"');
            }
            if (node.standalone != null) {
              this.stream.write(' standalone="' + node.standalone + '"');
            }
            this.stream.write("?>");
            return this.stream.write(this.endline(node));
          };
          XMLStreamWriter2.prototype.docType = function(node, level) {
            var child, i2, len, ref2;
            level || (level = 0);
            this.stream.write(this.space(level));
            this.stream.write("<!DOCTYPE " + node.root().name);
            if (node.pubID && node.sysID) {
              this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
            } else if (node.sysID) {
              this.stream.write(' SYSTEM "' + node.sysID + '"');
            }
            if (node.children.length > 0) {
              this.stream.write(" [");
              this.stream.write(this.endline(node));
              ref2 = node.children;
              for (i2 = 0, len = ref2.length; i2 < len; i2++) {
                child = ref2[i2];
                switch (false) {
                  case !(child instanceof XMLDTDAttList2):
                    this.dtdAttList(child, level + 1);
                    break;
                  case !(child instanceof XMLDTDElement2):
                    this.dtdElement(child, level + 1);
                    break;
                  case !(child instanceof XMLDTDEntity2):
                    this.dtdEntity(child, level + 1);
                    break;
                  case !(child instanceof XMLDTDNotation2):
                    this.dtdNotation(child, level + 1);
                    break;
                  case !(child instanceof XMLCData2):
                    this.cdata(child, level + 1);
                    break;
                  case !(child instanceof XMLComment2):
                    this.comment(child, level + 1);
                    break;
                  case !(child instanceof XMLProcessingInstruction2):
                    this.processingInstruction(child, level + 1);
                    break;
                  default:
                    throw new Error("Unknown DTD node type: " + child.constructor.name);
                }
              }
              this.stream.write("]");
            }
            this.stream.write(">");
            return this.stream.write(this.endline(node));
          };
          XMLStreamWriter2.prototype.element = function(node, level) {
            var att, child, i2, len, name, ref2, ref1, space;
            level || (level = 0);
            space = this.space(level);
            this.stream.write(space + "<" + node.name);
            ref2 = node.attributes;
            for (name in ref2) {
              if (!hasProp.call(ref2, name))
                continue;
              att = ref2[name];
              this.attribute(att);
            }
            if (node.children.length === 0 || node.children.every(function(e2) {
              return e2.value === "";
            })) {
              if (this.allowEmpty) {
                this.stream.write("></" + node.name + ">");
              } else {
                this.stream.write("/>");
              }
            } else if (this.pretty && node.children.length === 1 && node.children[0].value != null) {
              this.stream.write(">");
              this.stream.write(node.children[0].value);
              this.stream.write("</" + node.name + ">");
            } else {
              this.stream.write(">" + this.newline);
              ref1 = node.children;
              for (i2 = 0, len = ref1.length; i2 < len; i2++) {
                child = ref1[i2];
                switch (false) {
                  case !(child instanceof XMLCData2):
                    this.cdata(child, level + 1);
                    break;
                  case !(child instanceof XMLComment2):
                    this.comment(child, level + 1);
                    break;
                  case !(child instanceof XMLElement2):
                    this.element(child, level + 1);
                    break;
                  case !(child instanceof XMLRaw2):
                    this.raw(child, level + 1);
                    break;
                  case !(child instanceof XMLText2):
                    this.text(child, level + 1);
                    break;
                  case !(child instanceof XMLProcessingInstruction2):
                    this.processingInstruction(child, level + 1);
                    break;
                  default:
                    throw new Error("Unknown XML node type: " + child.constructor.name);
                }
              }
              this.stream.write(space + "</" + node.name + ">");
            }
            return this.stream.write(this.endline(node));
          };
          XMLStreamWriter2.prototype.processingInstruction = function(node, level) {
            this.stream.write(this.space(level) + "<?" + node.target);
            if (node.value) {
              this.stream.write(" " + node.value);
            }
            return this.stream.write("?>" + this.endline(node));
          };
          XMLStreamWriter2.prototype.raw = function(node, level) {
            return this.stream.write(this.space(level) + node.value + this.endline(node));
          };
          XMLStreamWriter2.prototype.text = function(node, level) {
            return this.stream.write(this.space(level) + node.value + this.endline(node));
          };
          XMLStreamWriter2.prototype.dtdAttList = function(node, level) {
            this.stream.write(this.space(level) + "<!ATTLIST " + node.elementName + " " + node.attributeName + " " + node.attributeType);
            if (node.defaultValueType !== "#DEFAULT") {
              this.stream.write(" " + node.defaultValueType);
            }
            if (node.defaultValue) {
              this.stream.write(' "' + node.defaultValue + '"');
            }
            return this.stream.write(">" + this.endline(node));
          };
          XMLStreamWriter2.prototype.dtdElement = function(node, level) {
            return this.stream.write(this.space(level) + "<!ELEMENT " + node.name + " " + node.value + ">" + this.endline(node));
          };
          XMLStreamWriter2.prototype.dtdEntity = function(node, level) {
            this.stream.write(this.space(level) + "<!ENTITY");
            if (node.pe) {
              this.stream.write(" %");
            }
            this.stream.write(" " + node.name);
            if (node.value) {
              this.stream.write(' "' + node.value + '"');
            } else {
              if (node.pubID && node.sysID) {
                this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
              } else if (node.sysID) {
                this.stream.write(' SYSTEM "' + node.sysID + '"');
              }
              if (node.nData) {
                this.stream.write(" NDATA " + node.nData);
              }
            }
            return this.stream.write(">" + this.endline(node));
          };
          XMLStreamWriter2.prototype.dtdNotation = function(node, level) {
            this.stream.write(this.space(level) + "<!NOTATION " + node.name);
            if (node.pubID && node.sysID) {
              this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
            } else if (node.pubID) {
              this.stream.write(' PUBLIC "' + node.pubID + '"');
            } else if (node.sysID) {
              this.stream.write(' SYSTEM "' + node.sysID + '"');
            }
            return this.stream.write(">" + this.endline(node));
          };
          XMLStreamWriter2.prototype.endline = function(node) {
            if (!node.isLastRootNode) {
              return this.newline;
            } else {
              return "";
            }
          };
          return XMLStreamWriter2;
        }(XMLWriterBase2);
      }).call(commonjsGlobal);
      return XMLStreamWriter.exports;
    }
    (function() {
      var XMLDocument2, XMLDocumentCB2, XMLStreamWriter2, XMLStringWriter2, assign2, isFunction2, ref2;
      ref2 = requireUtility(), assign2 = ref2.assign, isFunction2 = ref2.isFunction;
      XMLDocument2 = requireXMLDocument();
      XMLDocumentCB2 = requireXMLDocumentCB();
      XMLStringWriter2 = requireXMLStringWriter();
      XMLStreamWriter2 = requireXMLStreamWriter();
      lib.create = function(name, xmldec, doctype, options) {
        var doc2, root2;
        if (name == null) {
          throw new Error("Root element needs a name");
        }
        options = assign2({}, xmldec, doctype, options);
        doc2 = new XMLDocument2(options);
        root2 = doc2.element(name);
        if (!options.headless) {
          doc2.declaration(options);
          if (options.pubID != null || options.sysID != null) {
            doc2.doctype(options);
          }
        }
        return root2;
      };
      lib.begin = function(options, onData, onEnd) {
        var ref1;
        if (isFunction2(options)) {
          ref1 = [options, onData], onData = ref1[0], onEnd = ref1[1];
          options = {};
        }
        if (onData) {
          return new XMLDocumentCB2(options, onData, onEnd);
        } else {
          return new XMLDocument2(options);
        }
      };
      lib.stringWriter = function(options) {
        return new XMLStringWriter2(options);
      };
      lib.streamWriter = function(stream2, options) {
        return new XMLStreamWriter2(stream2, options);
      };
    }).call(commonjsGlobal);
    var DateFormatter = function(opts) {
      this.opts = {};
      this.setOpts(opts);
    };
    DateFormatter.DEFAULT_OPTIONS = {
      colons: true,
      hyphens: false,
      local: true,
      ms: false,
      offset: false
    };
    DateFormatter.ISO8601 = new RegExp(
      "([0-9]{4})([-]?([0-9]{2}))([-]?([0-9]{2}))(T([0-9]{2})(((:?([0-9]{2}))?((:?([0-9]{2}))?(.([0-9]+))?))?)(Z|([+-]([0-9]{2}(:?([0-9]{2}))?)))?)?"
    );
    DateFormatter.prototype.setOpts = function(opts) {
      if (!opts)
        opts = DateFormatter.DEFAULT_OPTIONS;
      var ctx = this;
      Object.keys(DateFormatter.DEFAULT_OPTIONS).forEach(function(k) {
        ctx.opts[k] = opts.hasOwnProperty(k) ? opts[k] : DateFormatter.DEFAULT_OPTIONS[k];
      });
    };
    DateFormatter.prototype.decodeIso8601 = function(time) {
      var dateParts = time.toString().match(DateFormatter.ISO8601);
      if (!dateParts) {
        throw new Error("Expected a ISO8601 datetime but got '" + time + "'");
      }
      var date2 = [
        [dateParts[1], dateParts[3] || "01", dateParts[5] || "01"].join("-"),
        "T",
        [
          dateParts[7] || "00",
          dateParts[11] || "00",
          dateParts[14] || "00"
        ].join(":"),
        ".",
        dateParts[16] || "000"
      ].join("");
      date2 += dateParts[17] !== void 0 ? dateParts[17] + (dateParts[19] && dateParts[20] === void 0 ? "00" : "") : DateFormatter.formatCurrentOffset(new Date(date2));
      return new Date(date2);
    };
    DateFormatter.prototype.encodeIso8601 = function(date2) {
      var parts = this.opts.local ? DateFormatter.getLocalDateParts(date2) : DateFormatter.getUTCDateParts(date2);
      return [
        [parts[0], parts[1], parts[2]].join(this.opts.hyphens ? "-" : ""),
        "T",
        [parts[3], parts[4], parts[5]].join(this.opts.colons ? ":" : ""),
        this.opts.ms ? "." + parts[6] : "",
        this.opts.local ? this.opts.offset ? DateFormatter.formatCurrentOffset(date2) : "" : "Z"
      ].join("");
    };
    DateFormatter.getUTCDateParts = function(date2) {
      return [
        date2.getUTCFullYear(),
        DateFormatter.zeroPad(date2.getUTCMonth() + 1, 2),
        DateFormatter.zeroPad(date2.getUTCDate(), 2),
        DateFormatter.zeroPad(date2.getUTCHours(), 2),
        DateFormatter.zeroPad(date2.getUTCMinutes(), 2),
        DateFormatter.zeroPad(date2.getUTCSeconds(), 2),
        DateFormatter.zeroPad(date2.getUTCMilliseconds(), 3)
      ];
    };
    DateFormatter.getLocalDateParts = function(date2) {
      return [
        date2.getFullYear(),
        DateFormatter.zeroPad(date2.getMonth() + 1, 2),
        DateFormatter.zeroPad(date2.getDate(), 2),
        DateFormatter.zeroPad(date2.getHours(), 2),
        DateFormatter.zeroPad(date2.getMinutes(), 2),
        DateFormatter.zeroPad(date2.getSeconds(), 2),
        DateFormatter.zeroPad(date2.getMilliseconds(), 3)
      ];
    };
    DateFormatter.zeroPad = function(digit, length) {
      var padded = "" + digit;
      while (padded.length < length) {
        padded = "0" + padded;
      }
      return padded;
    };
    DateFormatter.formatCurrentOffset = function(d2) {
      var offset2 = (d2 || new Date()).getTimezoneOffset();
      return offset2 === 0 ? "Z" : [
        offset2 < 0 ? "+" : "-",
        DateFormatter.zeroPad(Math.abs(Math.floor(offset2 / 60)), 2),
        ":",
        DateFormatter.zeroPad(Math.abs(offset2 % 60), 2)
      ].join("");
    };
    var date_formatter = new DateFormatter();
    var customtype = { exports: {} };
    var CustomType$1 = customtype.exports = function(raw) {
      this.raw = raw;
    };
    CustomType$1.prototype.serialize = function(xml) {
      return xml.ele(this.tagName).txt(this.raw);
    };
    CustomType$1.prototype.tagName = "customType";
    var xmlBuilder = lib, dateFormatter$1 = date_formatter, CustomType = customtype.exports;
    serializer.serializeMethodCall = function(method2, params, encoding) {
      var params = params || [];
      var options = { version: "1.0", allowSurrogateChars: true };
      if (encoding) {
        options.encoding = encoding;
      }
      var xml = xmlBuilder.create("methodCall", options).ele("methodName").txt(method2).up().ele("params");
      params.forEach(function(param) {
        serializeValue(param, xml.ele("param"));
      });
      return xml.doc().toString();
    };
    serializer.serializeMethodResponse = function(result) {
      var xml = xmlBuilder.create("methodResponse", { version: "1.0", allowSurrogateChars: true }).ele("params").ele("param");
      serializeValue(result, xml);
      return xml.doc().toString();
    };
    serializer.serializeFault = function(fault) {
      var xml = xmlBuilder.create("methodResponse", { version: "1.0", allowSurrogateChars: true }).ele("fault");
      serializeValue(fault, xml);
      return xml.doc().toString();
    };
    function serializeValue(value, xml) {
      var stack2 = [{ value, xml }], current = null, valueNode = null, next = null;
      while (stack2.length > 0) {
        current = stack2[stack2.length - 1];
        if (current.index !== void 0) {
          next = getNextItemsFrame(current);
          if (next) {
            stack2.push(next);
          } else {
            stack2.pop();
          }
        } else {
          valueNode = current.xml.ele("value");
          switch (typeof current.value) {
            case "boolean":
              appendBoolean(current.value, valueNode);
              stack2.pop();
              break;
            case "string":
              appendString(current.value, valueNode);
              stack2.pop();
              break;
            case "number":
              appendNumber(current.value, valueNode);
              stack2.pop();
              break;
            case "object":
              if (current.value === null) {
                valueNode.ele("nil");
                stack2.pop();
              } else if (current.value instanceof Date) {
                appendDatetime(current.value, valueNode);
                stack2.pop();
              } else if (Buffer$1.isBuffer(current.value)) {
                appendBuffer(current.value, valueNode);
                stack2.pop();
              } else if (current.value instanceof CustomType) {
                current.value.serialize(valueNode);
                stack2.pop();
              } else {
                if (Array.isArray(current.value)) {
                  current.xml = valueNode.ele("array").ele("data");
                } else {
                  current.xml = valueNode.ele("struct");
                  current.keys = Object.keys(current.value);
                }
                current.index = 0;
                next = getNextItemsFrame(current);
                if (next) {
                  stack2.push(next);
                } else {
                  stack2.pop();
                }
              }
              break;
            default:
              stack2.pop();
              break;
          }
        }
      }
    }
    function getNextItemsFrame(frame) {
      var nextFrame2 = null;
      if (frame.keys) {
        if (frame.index < frame.keys.length) {
          var key = frame.keys[frame.index++], member = frame.xml.ele("member").ele("name").text(key).up();
          nextFrame2 = {
            value: frame.value[key],
            xml: member
          };
        }
      } else if (frame.index < frame.value.length) {
        nextFrame2 = {
          value: frame.value[frame.index],
          xml: frame.xml
        };
        frame.index++;
      }
      return nextFrame2;
    }
    function appendBoolean(value, xml) {
      xml.ele("boolean").txt(value ? 1 : 0);
    }
    var illegalChars = /^(?![^<&]*]]>[^<&]*)[^<&]*$/;
    function appendString(value, xml) {
      if (value.length === 0) {
        xml.ele("string");
      } else if (!illegalChars.test(value)) {
        xml.ele("string").d(value);
      } else {
        xml.ele("string").txt(value);
      }
    }
    function appendNumber(value, xml) {
      if (value % 1 == 0) {
        xml.ele("int").txt(value);
      } else {
        xml.ele("double").txt(value);
      }
    }
    function appendDatetime(value, xml) {
      xml.ele("dateTime.iso8601").txt(dateFormatter$1.encodeIso8601(value));
    }
    function appendBuffer(value, xml) {
      xml.ele("base64").txt(value.toString("base64"));
    }
    var sax$1 = {};
    const require$$0 = /* @__PURE__ */ getAugmentedNamespace(stream);
    const require$$1 = /* @__PURE__ */ getAugmentedNamespace(stringDecoder);
    (function(exports2) {
      (function(sax2) {
        sax2.parser = function(strict, opt) {
          return new SAXParser(strict, opt);
        };
        sax2.SAXParser = SAXParser;
        sax2.SAXStream = SAXStream;
        sax2.createStream = createStream;
        sax2.MAX_BUFFER_LENGTH = 64 * 1024;
        var buffers = [
          "comment",
          "sgmlDecl",
          "textNode",
          "tagName",
          "doctype",
          "procInstName",
          "procInstBody",
          "entity",
          "attribName",
          "attribValue",
          "cdata",
          "script"
        ];
        sax2.EVENTS = [
          "text",
          "processinginstruction",
          "sgmldeclaration",
          "doctype",
          "comment",
          "opentagstart",
          "attribute",
          "opentag",
          "closetag",
          "opencdata",
          "cdata",
          "closecdata",
          "error",
          "end",
          "ready",
          "script",
          "opennamespace",
          "closenamespace"
        ];
        function SAXParser(strict, opt) {
          if (!(this instanceof SAXParser)) {
            return new SAXParser(strict, opt);
          }
          var parser = this;
          clearBuffers(parser);
          parser.q = parser.c = "";
          parser.bufferCheckPosition = sax2.MAX_BUFFER_LENGTH;
          parser.opt = opt || {};
          parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;
          parser.looseCase = parser.opt.lowercase ? "toLowerCase" : "toUpperCase";
          parser.tags = [];
          parser.closed = parser.closedRoot = parser.sawRoot = false;
          parser.tag = parser.error = null;
          parser.strict = !!strict;
          parser.noscript = !!(strict || parser.opt.noscript);
          parser.state = S2.BEGIN;
          parser.strictEntities = parser.opt.strictEntities;
          parser.ENTITIES = parser.strictEntities ? Object.create(sax2.XML_ENTITIES) : Object.create(sax2.ENTITIES);
          parser.attribList = [];
          if (parser.opt.xmlns) {
            parser.ns = Object.create(rootNS);
          }
          parser.trackPosition = parser.opt.position !== false;
          if (parser.trackPosition) {
            parser.position = parser.line = parser.column = 0;
          }
          emit2(parser, "onready");
        }
        if (!Object.create) {
          Object.create = function(o2) {
            function F2() {
            }
            F2.prototype = o2;
            var newf = new F2();
            return newf;
          };
        }
        if (!Object.keys) {
          Object.keys = function(o2) {
            var a2 = [];
            for (var i2 in o2)
              if (o2.hasOwnProperty(i2))
                a2.push(i2);
            return a2;
          };
        }
        function checkBufferLength(parser) {
          var maxAllowed = Math.max(sax2.MAX_BUFFER_LENGTH, 10);
          var maxActual = 0;
          for (var i2 = 0, l2 = buffers.length; i2 < l2; i2++) {
            var len = parser[buffers[i2]].length;
            if (len > maxAllowed) {
              switch (buffers[i2]) {
                case "textNode":
                  closeText(parser);
                  break;
                case "cdata":
                  emitNode(parser, "oncdata", parser.cdata);
                  parser.cdata = "";
                  break;
                case "script":
                  emitNode(parser, "onscript", parser.script);
                  parser.script = "";
                  break;
                default:
                  error2(parser, "Max buffer length exceeded: " + buffers[i2]);
              }
            }
            maxActual = Math.max(maxActual, len);
          }
          var m2 = sax2.MAX_BUFFER_LENGTH - maxActual;
          parser.bufferCheckPosition = m2 + parser.position;
        }
        function clearBuffers(parser) {
          for (var i2 = 0, l2 = buffers.length; i2 < l2; i2++) {
            parser[buffers[i2]] = "";
          }
        }
        function flushBuffers(parser) {
          closeText(parser);
          if (parser.cdata !== "") {
            emitNode(parser, "oncdata", parser.cdata);
            parser.cdata = "";
          }
          if (parser.script !== "") {
            emitNode(parser, "onscript", parser.script);
            parser.script = "";
          }
        }
        SAXParser.prototype = {
          end: function() {
            end2(this);
          },
          write: write2,
          resume: function() {
            this.error = null;
            return this;
          },
          close: function() {
            return this.write(null);
          },
          flush: function() {
            flushBuffers(this);
          }
        };
        var Stream2;
        try {
          Stream2 = require$$0.Stream;
        } catch (ex) {
          Stream2 = function() {
          };
        }
        var streamWraps = sax2.EVENTS.filter(function(ev) {
          return ev !== "error" && ev !== "end";
        });
        function createStream(strict, opt) {
          return new SAXStream(strict, opt);
        }
        function SAXStream(strict, opt) {
          if (!(this instanceof SAXStream)) {
            return new SAXStream(strict, opt);
          }
          Stream2.apply(this);
          this._parser = new SAXParser(strict, opt);
          this.writable = true;
          this.readable = true;
          var me2 = this;
          this._parser.onend = function() {
            me2.emit("end");
          };
          this._parser.onerror = function(er) {
            me2.emit("error", er);
            me2._parser.error = null;
          };
          this._decoder = null;
          streamWraps.forEach(function(ev) {
            Object.defineProperty(me2, "on" + ev, {
              get: function() {
                return me2._parser["on" + ev];
              },
              set: function(h2) {
                if (!h2) {
                  me2.removeAllListeners(ev);
                  me2._parser["on" + ev] = h2;
                  return h2;
                }
                me2.on(ev, h2);
              },
              enumerable: true,
              configurable: false
            });
          });
        }
        SAXStream.prototype = Object.create(Stream2.prototype, {
          constructor: {
            value: SAXStream
          }
        });
        SAXStream.prototype.write = function(data) {
          if (typeof Buffer$1 === "function" && typeof Buffer$1.isBuffer === "function" && Buffer$1.isBuffer(data)) {
            if (!this._decoder) {
              var SD = require$$1.StringDecoder;
              this._decoder = new SD("utf8");
            }
            data = this._decoder.write(data);
          }
          this._parser.write(data.toString());
          this.emit("data", data);
          return true;
        };
        SAXStream.prototype.end = function(chunk) {
          if (chunk && chunk.length) {
            this.write(chunk);
          }
          this._parser.end();
          return true;
        };
        SAXStream.prototype.on = function(ev, handler) {
          var me2 = this;
          if (!me2._parser["on" + ev] && streamWraps.indexOf(ev) !== -1) {
            me2._parser["on" + ev] = function() {
              var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);
              args.splice(0, 0, ev);
              me2.emit.apply(me2, args);
            };
          }
          return Stream2.prototype.on.call(me2, ev, handler);
        };
        var CDATA = "[CDATA[";
        var DOCTYPE = "DOCTYPE";
        var XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace";
        var XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/";
        var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE };
        var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
        var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
        var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
        var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
        function isWhitespace2(c2) {
          return c2 === " " || c2 === "\n" || c2 === "\r" || c2 === "	";
        }
        function isQuote(c2) {
          return c2 === '"' || c2 === "'";
        }
        function isAttribEnd(c2) {
          return c2 === ">" || isWhitespace2(c2);
        }
        function isMatch(regex, c2) {
          return regex.test(c2);
        }
        function notMatch(regex, c2) {
          return !isMatch(regex, c2);
        }
        var S2 = 0;
        sax2.STATE = {
          BEGIN: S2++,
          BEGIN_WHITESPACE: S2++,
          TEXT: S2++,
          TEXT_ENTITY: S2++,
          OPEN_WAKA: S2++,
          SGML_DECL: S2++,
          SGML_DECL_QUOTED: S2++,
          DOCTYPE: S2++,
          DOCTYPE_QUOTED: S2++,
          DOCTYPE_DTD: S2++,
          DOCTYPE_DTD_QUOTED: S2++,
          COMMENT_STARTING: S2++,
          COMMENT: S2++,
          COMMENT_ENDING: S2++,
          COMMENT_ENDED: S2++,
          CDATA: S2++,
          CDATA_ENDING: S2++,
          CDATA_ENDING_2: S2++,
          PROC_INST: S2++,
          PROC_INST_BODY: S2++,
          PROC_INST_ENDING: S2++,
          OPEN_TAG: S2++,
          OPEN_TAG_SLASH: S2++,
          ATTRIB: S2++,
          ATTRIB_NAME: S2++,
          ATTRIB_NAME_SAW_WHITE: S2++,
          ATTRIB_VALUE: S2++,
          ATTRIB_VALUE_QUOTED: S2++,
          ATTRIB_VALUE_CLOSED: S2++,
          ATTRIB_VALUE_UNQUOTED: S2++,
          ATTRIB_VALUE_ENTITY_Q: S2++,
          ATTRIB_VALUE_ENTITY_U: S2++,
          CLOSE_TAG: S2++,
          CLOSE_TAG_SAW_WHITE: S2++,
          SCRIPT: S2++,
          SCRIPT_ENDING: S2++
        };
        sax2.XML_ENTITIES = {
          "amp": "&",
          "gt": ">",
          "lt": "<",
          "quot": '"',
          "apos": "'"
        };
        sax2.ENTITIES = {
          "amp": "&",
          "gt": ">",
          "lt": "<",
          "quot": '"',
          "apos": "'",
          "AElig": 198,
          "Aacute": 193,
          "Acirc": 194,
          "Agrave": 192,
          "Aring": 197,
          "Atilde": 195,
          "Auml": 196,
          "Ccedil": 199,
          "ETH": 208,
          "Eacute": 201,
          "Ecirc": 202,
          "Egrave": 200,
          "Euml": 203,
          "Iacute": 205,
          "Icirc": 206,
          "Igrave": 204,
          "Iuml": 207,
          "Ntilde": 209,
          "Oacute": 211,
          "Ocirc": 212,
          "Ograve": 210,
          "Oslash": 216,
          "Otilde": 213,
          "Ouml": 214,
          "THORN": 222,
          "Uacute": 218,
          "Ucirc": 219,
          "Ugrave": 217,
          "Uuml": 220,
          "Yacute": 221,
          "aacute": 225,
          "acirc": 226,
          "aelig": 230,
          "agrave": 224,
          "aring": 229,
          "atilde": 227,
          "auml": 228,
          "ccedil": 231,
          "eacute": 233,
          "ecirc": 234,
          "egrave": 232,
          "eth": 240,
          "euml": 235,
          "iacute": 237,
          "icirc": 238,
          "igrave": 236,
          "iuml": 239,
          "ntilde": 241,
          "oacute": 243,
          "ocirc": 244,
          "ograve": 242,
          "oslash": 248,
          "otilde": 245,
          "ouml": 246,
          "szlig": 223,
          "thorn": 254,
          "uacute": 250,
          "ucirc": 251,
          "ugrave": 249,
          "uuml": 252,
          "yacute": 253,
          "yuml": 255,
          "copy": 169,
          "reg": 174,
          "nbsp": 160,
          "iexcl": 161,
          "cent": 162,
          "pound": 163,
          "curren": 164,
          "yen": 165,
          "brvbar": 166,
          "sect": 167,
          "uml": 168,
          "ordf": 170,
          "laquo": 171,
          "not": 172,
          "shy": 173,
          "macr": 175,
          "deg": 176,
          "plusmn": 177,
          "sup1": 185,
          "sup2": 178,
          "sup3": 179,
          "acute": 180,
          "micro": 181,
          "para": 182,
          "middot": 183,
          "cedil": 184,
          "ordm": 186,
          "raquo": 187,
          "frac14": 188,
          "frac12": 189,
          "frac34": 190,
          "iquest": 191,
          "times": 215,
          "divide": 247,
          "OElig": 338,
          "oelig": 339,
          "Scaron": 352,
          "scaron": 353,
          "Yuml": 376,
          "fnof": 402,
          "circ": 710,
          "tilde": 732,
          "Alpha": 913,
          "Beta": 914,
          "Gamma": 915,
          "Delta": 916,
          "Epsilon": 917,
          "Zeta": 918,
          "Eta": 919,
          "Theta": 920,
          "Iota": 921,
          "Kappa": 922,
          "Lambda": 923,
          "Mu": 924,
          "Nu": 925,
          "Xi": 926,
          "Omicron": 927,
          "Pi": 928,
          "Rho": 929,
          "Sigma": 931,
          "Tau": 932,
          "Upsilon": 933,
          "Phi": 934,
          "Chi": 935,
          "Psi": 936,
          "Omega": 937,
          "alpha": 945,
          "beta": 946,
          "gamma": 947,
          "delta": 948,
          "epsilon": 949,
          "zeta": 950,
          "eta": 951,
          "theta": 952,
          "iota": 953,
          "kappa": 954,
          "lambda": 955,
          "mu": 956,
          "nu": 957,
          "xi": 958,
          "omicron": 959,
          "pi": 960,
          "rho": 961,
          "sigmaf": 962,
          "sigma": 963,
          "tau": 964,
          "upsilon": 965,
          "phi": 966,
          "chi": 967,
          "psi": 968,
          "omega": 969,
          "thetasym": 977,
          "upsih": 978,
          "piv": 982,
          "ensp": 8194,
          "emsp": 8195,
          "thinsp": 8201,
          "zwnj": 8204,
          "zwj": 8205,
          "lrm": 8206,
          "rlm": 8207,
          "ndash": 8211,
          "mdash": 8212,
          "lsquo": 8216,
          "rsquo": 8217,
          "sbquo": 8218,
          "ldquo": 8220,
          "rdquo": 8221,
          "bdquo": 8222,
          "dagger": 8224,
          "Dagger": 8225,
          "bull": 8226,
          "hellip": 8230,
          "permil": 8240,
          "prime": 8242,
          "Prime": 8243,
          "lsaquo": 8249,
          "rsaquo": 8250,
          "oline": 8254,
          "frasl": 8260,
          "euro": 8364,
          "image": 8465,
          "weierp": 8472,
          "real": 8476,
          "trade": 8482,
          "alefsym": 8501,
          "larr": 8592,
          "uarr": 8593,
          "rarr": 8594,
          "darr": 8595,
          "harr": 8596,
          "crarr": 8629,
          "lArr": 8656,
          "uArr": 8657,
          "rArr": 8658,
          "dArr": 8659,
          "hArr": 8660,
          "forall": 8704,
          "part": 8706,
          "exist": 8707,
          "empty": 8709,
          "nabla": 8711,
          "isin": 8712,
          "notin": 8713,
          "ni": 8715,
          "prod": 8719,
          "sum": 8721,
          "minus": 8722,
          "lowast": 8727,
          "radic": 8730,
          "prop": 8733,
          "infin": 8734,
          "ang": 8736,
          "and": 8743,
          "or": 8744,
          "cap": 8745,
          "cup": 8746,
          "int": 8747,
          "there4": 8756,
          "sim": 8764,
          "cong": 8773,
          "asymp": 8776,
          "ne": 8800,
          "equiv": 8801,
          "le": 8804,
          "ge": 8805,
          "sub": 8834,
          "sup": 8835,
          "nsub": 8836,
          "sube": 8838,
          "supe": 8839,
          "oplus": 8853,
          "otimes": 8855,
          "perp": 8869,
          "sdot": 8901,
          "lceil": 8968,
          "rceil": 8969,
          "lfloor": 8970,
          "rfloor": 8971,
          "lang": 9001,
          "rang": 9002,
          "loz": 9674,
          "spades": 9824,
          "clubs": 9827,
          "hearts": 9829,
          "diams": 9830
        };
        Object.keys(sax2.ENTITIES).forEach(function(key) {
          var e2 = sax2.ENTITIES[key];
          var s3 = typeof e2 === "number" ? String.fromCharCode(e2) : e2;
          sax2.ENTITIES[key] = s3;
        });
        for (var s2 in sax2.STATE) {
          sax2.STATE[sax2.STATE[s2]] = s2;
        }
        S2 = sax2.STATE;
        function emit2(parser, event, data) {
          parser[event] && parser[event](data);
        }
        function emitNode(parser, nodeType, data) {
          if (parser.textNode)
            closeText(parser);
          emit2(parser, nodeType, data);
        }
        function closeText(parser) {
          parser.textNode = textopts(parser.opt, parser.textNode);
          if (parser.textNode)
            emit2(parser, "ontext", parser.textNode);
          parser.textNode = "";
        }
        function textopts(opt, text) {
          if (opt.trim)
            text = text.trim();
          if (opt.normalize)
            text = text.replace(/\s+/g, " ");
          return text;
        }
        function error2(parser, er) {
          closeText(parser);
          if (parser.trackPosition) {
            er += "\nLine: " + parser.line + "\nColumn: " + parser.column + "\nChar: " + parser.c;
          }
          er = new Error(er);
          parser.error = er;
          emit2(parser, "onerror", er);
          return parser;
        }
        function end2(parser) {
          if (parser.sawRoot && !parser.closedRoot)
            strictFail(parser, "Unclosed root tag");
          if (parser.state !== S2.BEGIN && parser.state !== S2.BEGIN_WHITESPACE && parser.state !== S2.TEXT) {
            error2(parser, "Unexpected end");
          }
          closeText(parser);
          parser.c = "";
          parser.closed = true;
          emit2(parser, "onend");
          SAXParser.call(parser, parser.strict, parser.opt);
          return parser;
        }
        function strictFail(parser, message2) {
          if (typeof parser !== "object" || !(parser instanceof SAXParser)) {
            throw new Error("bad call to strictFail");
          }
          if (parser.strict) {
            error2(parser, message2);
          }
        }
        function newTag(parser) {
          if (!parser.strict)
            parser.tagName = parser.tagName[parser.looseCase]();
          var parent = parser.tags[parser.tags.length - 1] || parser;
          var tag = parser.tag = { name: parser.tagName, attributes: {} };
          if (parser.opt.xmlns) {
            tag.ns = parent.ns;
          }
          parser.attribList.length = 0;
          emitNode(parser, "onopentagstart", tag);
        }
        function qname(name, attribute) {
          var i2 = name.indexOf(":");
          var qualName = i2 < 0 ? ["", name] : name.split(":");
          var prefix = qualName[0];
          var local = qualName[1];
          if (attribute && name === "xmlns") {
            prefix = "xmlns";
            local = "";
          }
          return { prefix, local };
        }
        function attrib(parser) {
          if (!parser.strict) {
            parser.attribName = parser.attribName[parser.looseCase]();
          }
          if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {
            parser.attribName = parser.attribValue = "";
            return;
          }
          if (parser.opt.xmlns) {
            var qn = qname(parser.attribName, true);
            var prefix = qn.prefix;
            var local = qn.local;
            if (prefix === "xmlns") {
              if (local === "xml" && parser.attribValue !== XML_NAMESPACE) {
                strictFail(
                  parser,
                  "xml: prefix must be bound to " + XML_NAMESPACE + "\nActual: " + parser.attribValue
                );
              } else if (local === "xmlns" && parser.attribValue !== XMLNS_NAMESPACE) {
                strictFail(
                  parser,
                  "xmlns: prefix must be bound to " + XMLNS_NAMESPACE + "\nActual: " + parser.attribValue
                );
              } else {
                var tag = parser.tag;
                var parent = parser.tags[parser.tags.length - 1] || parser;
                if (tag.ns === parent.ns) {
                  tag.ns = Object.create(parent.ns);
                }
                tag.ns[local] = parser.attribValue;
              }
            }
            parser.attribList.push([parser.attribName, parser.attribValue]);
          } else {
            parser.tag.attributes[parser.attribName] = parser.attribValue;
            emitNode(parser, "onattribute", {
              name: parser.attribName,
              value: parser.attribValue
            });
          }
          parser.attribName = parser.attribValue = "";
        }
        function openTag(parser, selfClosing) {
          if (parser.opt.xmlns) {
            var tag = parser.tag;
            var qn = qname(parser.tagName);
            tag.prefix = qn.prefix;
            tag.local = qn.local;
            tag.uri = tag.ns[qn.prefix] || "";
            if (tag.prefix && !tag.uri) {
              strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(parser.tagName));
              tag.uri = qn.prefix;
            }
            var parent = parser.tags[parser.tags.length - 1] || parser;
            if (tag.ns && parent.ns !== tag.ns) {
              Object.keys(tag.ns).forEach(function(p2) {
                emitNode(parser, "onopennamespace", {
                  prefix: p2,
                  uri: tag.ns[p2]
                });
              });
            }
            for (var i2 = 0, l2 = parser.attribList.length; i2 < l2; i2++) {
              var nv = parser.attribList[i2];
              var name = nv[0];
              var value = nv[1];
              var qualName = qname(name, true);
              var prefix = qualName.prefix;
              var local = qualName.local;
              var uri = prefix === "" ? "" : tag.ns[prefix] || "";
              var a2 = {
                name,
                value,
                prefix,
                local,
                uri
              };
              if (prefix && prefix !== "xmlns" && !uri) {
                strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(prefix));
                a2.uri = prefix;
              }
              parser.tag.attributes[name] = a2;
              emitNode(parser, "onattribute", a2);
            }
            parser.attribList.length = 0;
          }
          parser.tag.isSelfClosing = !!selfClosing;
          parser.sawRoot = true;
          parser.tags.push(parser.tag);
          emitNode(parser, "onopentag", parser.tag);
          if (!selfClosing) {
            if (!parser.noscript && parser.tagName.toLowerCase() === "script") {
              parser.state = S2.SCRIPT;
            } else {
              parser.state = S2.TEXT;
            }
            parser.tag = null;
            parser.tagName = "";
          }
          parser.attribName = parser.attribValue = "";
          parser.attribList.length = 0;
        }
        function closeTag(parser) {
          if (!parser.tagName) {
            strictFail(parser, "Weird empty close tag.");
            parser.textNode += "</>";
            parser.state = S2.TEXT;
            return;
          }
          if (parser.script) {
            if (parser.tagName !== "script") {
              parser.script += "</" + parser.tagName + ">";
              parser.tagName = "";
              parser.state = S2.SCRIPT;
              return;
            }
            emitNode(parser, "onscript", parser.script);
            parser.script = "";
          }
          var t = parser.tags.length;
          var tagName = parser.tagName;
          if (!parser.strict) {
            tagName = tagName[parser.looseCase]();
          }
          var closeTo = tagName;
          while (t--) {
            var close2 = parser.tags[t];
            if (close2.name !== closeTo) {
              strictFail(parser, "Unexpected close tag");
            } else {
              break;
            }
          }
          if (t < 0) {
            strictFail(parser, "Unmatched closing tag: " + parser.tagName);
            parser.textNode += "</" + parser.tagName + ">";
            parser.state = S2.TEXT;
            return;
          }
          parser.tagName = tagName;
          var s3 = parser.tags.length;
          while (s3-- > t) {
            var tag = parser.tag = parser.tags.pop();
            parser.tagName = parser.tag.name;
            emitNode(parser, "onclosetag", parser.tagName);
            var x2 = {};
            for (var i2 in tag.ns) {
              x2[i2] = tag.ns[i2];
            }
            var parent = parser.tags[parser.tags.length - 1] || parser;
            if (parser.opt.xmlns && tag.ns !== parent.ns) {
              Object.keys(tag.ns).forEach(function(p2) {
                var n2 = tag.ns[p2];
                emitNode(parser, "onclosenamespace", { prefix: p2, uri: n2 });
              });
            }
          }
          if (t === 0)
            parser.closedRoot = true;
          parser.tagName = parser.attribValue = parser.attribName = "";
          parser.attribList.length = 0;
          parser.state = S2.TEXT;
        }
        function parseEntity(parser) {
          var entity = parser.entity;
          var entityLC = entity.toLowerCase();
          var num;
          var numStr = "";
          if (parser.ENTITIES[entity]) {
            return parser.ENTITIES[entity];
          }
          if (parser.ENTITIES[entityLC]) {
            return parser.ENTITIES[entityLC];
          }
          entity = entityLC;
          if (entity.charAt(0) === "#") {
            if (entity.charAt(1) === "x") {
              entity = entity.slice(2);
              num = parseInt(entity, 16);
              numStr = num.toString(16);
            } else {
              entity = entity.slice(1);
              num = parseInt(entity, 10);
              numStr = num.toString(10);
            }
          }
          entity = entity.replace(/^0+/, "");
          if (isNaN(num) || numStr.toLowerCase() !== entity) {
            strictFail(parser, "Invalid character entity");
            return "&" + parser.entity + ";";
          }
          return String.fromCodePoint(num);
        }
        function beginWhiteSpace(parser, c2) {
          if (c2 === "<") {
            parser.state = S2.OPEN_WAKA;
            parser.startTagPosition = parser.position;
          } else if (!isWhitespace2(c2)) {
            strictFail(parser, "Non-whitespace before first tag.");
            parser.textNode = c2;
            parser.state = S2.TEXT;
          }
        }
        function charAt(chunk, i2) {
          var result = "";
          if (i2 < chunk.length) {
            result = chunk.charAt(i2);
          }
          return result;
        }
        function write2(chunk) {
          var parser = this;
          if (this.error) {
            throw this.error;
          }
          if (parser.closed) {
            return error2(
              parser,
              "Cannot write after close. Assign an onready handler."
            );
          }
          if (chunk === null) {
            return end2(parser);
          }
          if (typeof chunk === "object") {
            chunk = chunk.toString();
          }
          var i2 = 0;
          var c2 = "";
          while (true) {
            c2 = charAt(chunk, i2++);
            parser.c = c2;
            if (!c2) {
              break;
            }
            if (parser.trackPosition) {
              parser.position++;
              if (c2 === "\n") {
                parser.line++;
                parser.column = 0;
              } else {
                parser.column++;
              }
            }
            switch (parser.state) {
              case S2.BEGIN:
                parser.state = S2.BEGIN_WHITESPACE;
                if (c2 === "\uFEFF") {
                  continue;
                }
                beginWhiteSpace(parser, c2);
                continue;
              case S2.BEGIN_WHITESPACE:
                beginWhiteSpace(parser, c2);
                continue;
              case S2.TEXT:
                if (parser.sawRoot && !parser.closedRoot) {
                  var starti = i2 - 1;
                  while (c2 && c2 !== "<" && c2 !== "&") {
                    c2 = charAt(chunk, i2++);
                    if (c2 && parser.trackPosition) {
                      parser.position++;
                      if (c2 === "\n") {
                        parser.line++;
                        parser.column = 0;
                      } else {
                        parser.column++;
                      }
                    }
                  }
                  parser.textNode += chunk.substring(starti, i2 - 1);
                }
                if (c2 === "<" && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
                  parser.state = S2.OPEN_WAKA;
                  parser.startTagPosition = parser.position;
                } else {
                  if (!isWhitespace2(c2) && (!parser.sawRoot || parser.closedRoot)) {
                    strictFail(parser, "Text data outside of root node.");
                  }
                  if (c2 === "&") {
                    parser.state = S2.TEXT_ENTITY;
                  } else {
                    parser.textNode += c2;
                  }
                }
                continue;
              case S2.SCRIPT:
                if (c2 === "<") {
                  parser.state = S2.SCRIPT_ENDING;
                } else {
                  parser.script += c2;
                }
                continue;
              case S2.SCRIPT_ENDING:
                if (c2 === "/") {
                  parser.state = S2.CLOSE_TAG;
                } else {
                  parser.script += "<" + c2;
                  parser.state = S2.SCRIPT;
                }
                continue;
              case S2.OPEN_WAKA:
                if (c2 === "!") {
                  parser.state = S2.SGML_DECL;
                  parser.sgmlDecl = "";
                } else if (isWhitespace2(c2))
                  ;
                else if (isMatch(nameStart, c2)) {
                  parser.state = S2.OPEN_TAG;
                  parser.tagName = c2;
                } else if (c2 === "/") {
                  parser.state = S2.CLOSE_TAG;
                  parser.tagName = "";
                } else if (c2 === "?") {
                  parser.state = S2.PROC_INST;
                  parser.procInstName = parser.procInstBody = "";
                } else {
                  strictFail(parser, "Unencoded <");
                  if (parser.startTagPosition + 1 < parser.position) {
                    var pad = parser.position - parser.startTagPosition;
                    c2 = new Array(pad).join(" ") + c2;
                  }
                  parser.textNode += "<" + c2;
                  parser.state = S2.TEXT;
                }
                continue;
              case S2.SGML_DECL:
                if ((parser.sgmlDecl + c2).toUpperCase() === CDATA) {
                  emitNode(parser, "onopencdata");
                  parser.state = S2.CDATA;
                  parser.sgmlDecl = "";
                  parser.cdata = "";
                } else if (parser.sgmlDecl + c2 === "--") {
                  parser.state = S2.COMMENT;
                  parser.comment = "";
                  parser.sgmlDecl = "";
                } else if ((parser.sgmlDecl + c2).toUpperCase() === DOCTYPE) {
                  parser.state = S2.DOCTYPE;
                  if (parser.doctype || parser.sawRoot) {
                    strictFail(
                      parser,
                      "Inappropriately located doctype declaration"
                    );
                  }
                  parser.doctype = "";
                  parser.sgmlDecl = "";
                } else if (c2 === ">") {
                  emitNode(parser, "onsgmldeclaration", parser.sgmlDecl);
                  parser.sgmlDecl = "";
                  parser.state = S2.TEXT;
                } else if (isQuote(c2)) {
                  parser.state = S2.SGML_DECL_QUOTED;
                  parser.sgmlDecl += c2;
                } else {
                  parser.sgmlDecl += c2;
                }
                continue;
              case S2.SGML_DECL_QUOTED:
                if (c2 === parser.q) {
                  parser.state = S2.SGML_DECL;
                  parser.q = "";
                }
                parser.sgmlDecl += c2;
                continue;
              case S2.DOCTYPE:
                if (c2 === ">") {
                  parser.state = S2.TEXT;
                  emitNode(parser, "ondoctype", parser.doctype);
                  parser.doctype = true;
                } else {
                  parser.doctype += c2;
                  if (c2 === "[") {
                    parser.state = S2.DOCTYPE_DTD;
                  } else if (isQuote(c2)) {
                    parser.state = S2.DOCTYPE_QUOTED;
                    parser.q = c2;
                  }
                }
                continue;
              case S2.DOCTYPE_QUOTED:
                parser.doctype += c2;
                if (c2 === parser.q) {
                  parser.q = "";
                  parser.state = S2.DOCTYPE;
                }
                continue;
              case S2.DOCTYPE_DTD:
                parser.doctype += c2;
                if (c2 === "]") {
                  parser.state = S2.DOCTYPE;
                } else if (isQuote(c2)) {
                  parser.state = S2.DOCTYPE_DTD_QUOTED;
                  parser.q = c2;
                }
                continue;
              case S2.DOCTYPE_DTD_QUOTED:
                parser.doctype += c2;
                if (c2 === parser.q) {
                  parser.state = S2.DOCTYPE_DTD;
                  parser.q = "";
                }
                continue;
              case S2.COMMENT:
                if (c2 === "-") {
                  parser.state = S2.COMMENT_ENDING;
                } else {
                  parser.comment += c2;
                }
                continue;
              case S2.COMMENT_ENDING:
                if (c2 === "-") {
                  parser.state = S2.COMMENT_ENDED;
                  parser.comment = textopts(parser.opt, parser.comment);
                  if (parser.comment) {
                    emitNode(parser, "oncomment", parser.comment);
                  }
                  parser.comment = "";
                } else {
                  parser.comment += "-" + c2;
                  parser.state = S2.COMMENT;
                }
                continue;
              case S2.COMMENT_ENDED:
                if (c2 !== ">") {
                  strictFail(parser, "Malformed comment");
                  parser.comment += "--" + c2;
                  parser.state = S2.COMMENT;
                } else {
                  parser.state = S2.TEXT;
                }
                continue;
              case S2.CDATA:
                if (c2 === "]") {
                  parser.state = S2.CDATA_ENDING;
                } else {
                  parser.cdata += c2;
                }
                continue;
              case S2.CDATA_ENDING:
                if (c2 === "]") {
                  parser.state = S2.CDATA_ENDING_2;
                } else {
                  parser.cdata += "]" + c2;
                  parser.state = S2.CDATA;
                }
                continue;
              case S2.CDATA_ENDING_2:
                if (c2 === ">") {
                  if (parser.cdata) {
                    emitNode(parser, "oncdata", parser.cdata);
                  }
                  emitNode(parser, "onclosecdata");
                  parser.cdata = "";
                  parser.state = S2.TEXT;
                } else if (c2 === "]") {
                  parser.cdata += "]";
                } else {
                  parser.cdata += "]]" + c2;
                  parser.state = S2.CDATA;
                }
                continue;
              case S2.PROC_INST:
                if (c2 === "?") {
                  parser.state = S2.PROC_INST_ENDING;
                } else if (isWhitespace2(c2)) {
                  parser.state = S2.PROC_INST_BODY;
                } else {
                  parser.procInstName += c2;
                }
                continue;
              case S2.PROC_INST_BODY:
                if (!parser.procInstBody && isWhitespace2(c2)) {
                  continue;
                } else if (c2 === "?") {
                  parser.state = S2.PROC_INST_ENDING;
                } else {
                  parser.procInstBody += c2;
                }
                continue;
              case S2.PROC_INST_ENDING:
                if (c2 === ">") {
                  emitNode(parser, "onprocessinginstruction", {
                    name: parser.procInstName,
                    body: parser.procInstBody
                  });
                  parser.procInstName = parser.procInstBody = "";
                  parser.state = S2.TEXT;
                } else {
                  parser.procInstBody += "?" + c2;
                  parser.state = S2.PROC_INST_BODY;
                }
                continue;
              case S2.OPEN_TAG:
                if (isMatch(nameBody, c2)) {
                  parser.tagName += c2;
                } else {
                  newTag(parser);
                  if (c2 === ">") {
                    openTag(parser);
                  } else if (c2 === "/") {
                    parser.state = S2.OPEN_TAG_SLASH;
                  } else {
                    if (!isWhitespace2(c2)) {
                      strictFail(parser, "Invalid character in tag name");
                    }
                    parser.state = S2.ATTRIB;
                  }
                }
                continue;
              case S2.OPEN_TAG_SLASH:
                if (c2 === ">") {
                  openTag(parser, true);
                  closeTag(parser);
                } else {
                  strictFail(parser, "Forward-slash in opening tag not followed by >");
                  parser.state = S2.ATTRIB;
                }
                continue;
              case S2.ATTRIB:
                if (isWhitespace2(c2)) {
                  continue;
                } else if (c2 === ">") {
                  openTag(parser);
                } else if (c2 === "/") {
                  parser.state = S2.OPEN_TAG_SLASH;
                } else if (isMatch(nameStart, c2)) {
                  parser.attribName = c2;
                  parser.attribValue = "";
                  parser.state = S2.ATTRIB_NAME;
                } else {
                  strictFail(parser, "Invalid attribute name");
                }
                continue;
              case S2.ATTRIB_NAME:
                if (c2 === "=") {
                  parser.state = S2.ATTRIB_VALUE;
                } else if (c2 === ">") {
                  strictFail(parser, "Attribute without value");
                  parser.attribValue = parser.attribName;
                  attrib(parser);
                  openTag(parser);
                } else if (isWhitespace2(c2)) {
                  parser.state = S2.ATTRIB_NAME_SAW_WHITE;
                } else if (isMatch(nameBody, c2)) {
                  parser.attribName += c2;
                } else {
                  strictFail(parser, "Invalid attribute name");
                }
                continue;
              case S2.ATTRIB_NAME_SAW_WHITE:
                if (c2 === "=") {
                  parser.state = S2.ATTRIB_VALUE;
                } else if (isWhitespace2(c2)) {
                  continue;
                } else {
                  strictFail(parser, "Attribute without value");
                  parser.tag.attributes[parser.attribName] = "";
                  parser.attribValue = "";
                  emitNode(parser, "onattribute", {
                    name: parser.attribName,
                    value: ""
                  });
                  parser.attribName = "";
                  if (c2 === ">") {
                    openTag(parser);
                  } else if (isMatch(nameStart, c2)) {
                    parser.attribName = c2;
                    parser.state = S2.ATTRIB_NAME;
                  } else {
                    strictFail(parser, "Invalid attribute name");
                    parser.state = S2.ATTRIB;
                  }
                }
                continue;
              case S2.ATTRIB_VALUE:
                if (isWhitespace2(c2)) {
                  continue;
                } else if (isQuote(c2)) {
                  parser.q = c2;
                  parser.state = S2.ATTRIB_VALUE_QUOTED;
                } else {
                  strictFail(parser, "Unquoted attribute value");
                  parser.state = S2.ATTRIB_VALUE_UNQUOTED;
                  parser.attribValue = c2;
                }
                continue;
              case S2.ATTRIB_VALUE_QUOTED:
                if (c2 !== parser.q) {
                  if (c2 === "&") {
                    parser.state = S2.ATTRIB_VALUE_ENTITY_Q;
                  } else {
                    parser.attribValue += c2;
                  }
                  continue;
                }
                attrib(parser);
                parser.q = "";
                parser.state = S2.ATTRIB_VALUE_CLOSED;
                continue;
              case S2.ATTRIB_VALUE_CLOSED:
                if (isWhitespace2(c2)) {
                  parser.state = S2.ATTRIB;
                } else if (c2 === ">") {
                  openTag(parser);
                } else if (c2 === "/") {
                  parser.state = S2.OPEN_TAG_SLASH;
                } else if (isMatch(nameStart, c2)) {
                  strictFail(parser, "No whitespace between attributes");
                  parser.attribName = c2;
                  parser.attribValue = "";
                  parser.state = S2.ATTRIB_NAME;
                } else {
                  strictFail(parser, "Invalid attribute name");
                }
                continue;
              case S2.ATTRIB_VALUE_UNQUOTED:
                if (!isAttribEnd(c2)) {
                  if (c2 === "&") {
                    parser.state = S2.ATTRIB_VALUE_ENTITY_U;
                  } else {
                    parser.attribValue += c2;
                  }
                  continue;
                }
                attrib(parser);
                if (c2 === ">") {
                  openTag(parser);
                } else {
                  parser.state = S2.ATTRIB;
                }
                continue;
              case S2.CLOSE_TAG:
                if (!parser.tagName) {
                  if (isWhitespace2(c2)) {
                    continue;
                  } else if (notMatch(nameStart, c2)) {
                    if (parser.script) {
                      parser.script += "</" + c2;
                      parser.state = S2.SCRIPT;
                    } else {
                      strictFail(parser, "Invalid tagname in closing tag.");
                    }
                  } else {
                    parser.tagName = c2;
                  }
                } else if (c2 === ">") {
                  closeTag(parser);
                } else if (isMatch(nameBody, c2)) {
                  parser.tagName += c2;
                } else if (parser.script) {
                  parser.script += "</" + parser.tagName;
                  parser.tagName = "";
                  parser.state = S2.SCRIPT;
                } else {
                  if (!isWhitespace2(c2)) {
                    strictFail(parser, "Invalid tagname in closing tag");
                  }
                  parser.state = S2.CLOSE_TAG_SAW_WHITE;
                }
                continue;
              case S2.CLOSE_TAG_SAW_WHITE:
                if (isWhitespace2(c2)) {
                  continue;
                }
                if (c2 === ">") {
                  closeTag(parser);
                } else {
                  strictFail(parser, "Invalid characters in closing tag");
                }
                continue;
              case S2.TEXT_ENTITY:
              case S2.ATTRIB_VALUE_ENTITY_Q:
              case S2.ATTRIB_VALUE_ENTITY_U:
                var returnState;
                var buffer2;
                switch (parser.state) {
                  case S2.TEXT_ENTITY:
                    returnState = S2.TEXT;
                    buffer2 = "textNode";
                    break;
                  case S2.ATTRIB_VALUE_ENTITY_Q:
                    returnState = S2.ATTRIB_VALUE_QUOTED;
                    buffer2 = "attribValue";
                    break;
                  case S2.ATTRIB_VALUE_ENTITY_U:
                    returnState = S2.ATTRIB_VALUE_UNQUOTED;
                    buffer2 = "attribValue";
                    break;
                }
                if (c2 === ";") {
                  parser[buffer2] += parseEntity(parser);
                  parser.entity = "";
                  parser.state = returnState;
                } else if (isMatch(parser.entity.length ? entityBody : entityStart, c2)) {
                  parser.entity += c2;
                } else {
                  strictFail(parser, "Invalid character in entity name");
                  parser[buffer2] += "&" + parser.entity + c2;
                  parser.entity = "";
                  parser.state = returnState;
                }
                continue;
              default:
                throw new Error(parser, "Unknown state: " + parser.state);
            }
          }
          if (parser.position >= parser.bufferCheckPosition) {
            checkBufferLength(parser);
          }
          return parser;
        }
        /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
        if (!String.fromCodePoint) {
          (function() {
            var stringFromCharCode2 = String.fromCharCode;
            var floor2 = Math.floor;
            var fromCodePoint = function() {
              var MAX_SIZE = 16384;
              var codeUnits = [];
              var highSurrogate;
              var lowSurrogate;
              var index2 = -1;
              var length = arguments.length;
              if (!length) {
                return "";
              }
              var result = "";
              while (++index2 < length) {
                var codePoint = Number(arguments[index2]);
                if (!isFinite(codePoint) || codePoint < 0 || codePoint > 1114111 || floor2(codePoint) !== codePoint) {
                  throw RangeError("Invalid code point: " + codePoint);
                }
                if (codePoint <= 65535) {
                  codeUnits.push(codePoint);
                } else {
                  codePoint -= 65536;
                  highSurrogate = (codePoint >> 10) + 55296;
                  lowSurrogate = codePoint % 1024 + 56320;
                  codeUnits.push(highSurrogate, lowSurrogate);
                }
                if (index2 + 1 === length || codeUnits.length > MAX_SIZE) {
                  result += stringFromCharCode2.apply(null, codeUnits);
                  codeUnits.length = 0;
                }
              }
              return result;
            };
            if (Object.defineProperty) {
              Object.defineProperty(String, "fromCodePoint", {
                value: fromCodePoint,
                configurable: true,
                writable: true
              });
            } else {
              String.fromCodePoint = fromCodePoint;
            }
          })();
        }
      })(exports2);
    })(sax$1);
    var sax = sax$1, dateFormatter = date_formatter;
    var Deserializer$2 = function(encoding) {
      this.type = null;
      this.responseType = null;
      this.stack = [];
      this.marks = [];
      this.data = [];
      this.methodname = null;
      this.encoding = encoding || "utf8";
      this.value = false;
      this.callback = null;
      this.error = null;
      this.parser = sax.createStream();
      this.parser.on("opentag", this.onOpentag.bind(this));
      this.parser.on("closetag", this.onClosetag.bind(this));
      this.parser.on("text", this.onText.bind(this));
      this.parser.on("cdata", this.onCDATA.bind(this));
      this.parser.on("end", this.onDone.bind(this));
      this.parser.on("error", this.onError.bind(this));
    };
    Deserializer$2.prototype.deserializeMethodResponse = function(stream2, callback) {
      var that = this;
      this.callback = function(error2, result) {
        if (error2) {
          callback(error2);
        } else if (result.length > 1) {
          callback(new Error("Response has more than one param"));
        } else if (that.type !== "methodresponse") {
          callback(new Error("Not a method response"));
        } else if (!that.responseType) {
          callback(new Error("Invalid method response"));
        } else {
          callback(null, result[0]);
        }
      };
      stream2.setEncoding(this.encoding);
      stream2.on("error", this.onError.bind(this));
      stream2.pipe(this.parser);
    };
    Deserializer$2.prototype.deserializeMethodCall = function(stream2, callback) {
      var that = this;
      this.callback = function(error2, result) {
        if (error2) {
          callback(error2);
        } else if (that.type !== "methodcall") {
          callback(new Error("Not a method call"));
        } else if (!that.methodname) {
          callback(new Error("Method call did not contain a method name"));
        } else {
          callback(null, that.methodname, result);
        }
      };
      stream2.setEncoding(this.encoding);
      stream2.on("error", this.onError.bind(this));
      stream2.pipe(this.parser);
    };
    Deserializer$2.prototype.onDone = function() {
      if (!this.error) {
        if (this.type === null || this.marks.length) {
          this.callback(new Error("Invalid XML-RPC message"));
        } else if (this.responseType === "fault") {
          var createFault = function(fault) {
            var error2 = new Error("XML-RPC fault" + (fault.faultString ? ": " + fault.faultString : ""));
            error2.code = fault.faultCode;
            error2.faultCode = fault.faultCode;
            error2.faultString = fault.faultString;
            return error2;
          };
          this.callback(createFault(this.stack[0]));
        } else {
          this.callback(void 0, this.stack);
        }
      }
    };
    Deserializer$2.prototype.onError = function(msg) {
      if (!this.error) {
        if (typeof msg === "string") {
          this.error = new Error(msg);
        } else {
          this.error = msg;
        }
        this.callback(this.error);
      }
    };
    Deserializer$2.prototype.push = function(value) {
      this.stack.push(value);
    };
    Deserializer$2.prototype.onOpentag = function(node) {
      if (node.name === "ARRAY" || node.name === "STRUCT") {
        this.marks.push(this.stack.length);
      }
      this.data = [];
      this.value = node.name === "VALUE";
    };
    Deserializer$2.prototype.onText = function(text) {
      this.data.push(text);
    };
    Deserializer$2.prototype.onCDATA = function(cdata) {
      this.data.push(cdata);
    };
    Deserializer$2.prototype.onClosetag = function(el) {
      var data = this.data.join("");
      try {
        switch (el) {
          case "BOOLEAN":
            this.endBoolean(data);
            break;
          case "INT":
          case "I4":
            this.endInt(data);
            break;
          case "I8":
            this.endI8(data);
            break;
          case "DOUBLE":
            this.endDouble(data);
            break;
          case "STRING":
          case "NAME":
            this.endString(data);
            break;
          case "ARRAY":
            this.endArray(data);
            break;
          case "STRUCT":
            this.endStruct(data);
            break;
          case "BASE64":
            this.endBase64(data);
            break;
          case "DATETIME.ISO8601":
            this.endDateTime(data);
            break;
          case "VALUE":
            this.endValue(data);
            break;
          case "PARAMS":
            this.endParams(data);
            break;
          case "FAULT":
            this.endFault(data);
            break;
          case "METHODRESPONSE":
            this.endMethodResponse(data);
            break;
          case "METHODNAME":
            this.endMethodName(data);
            break;
          case "METHODCALL":
            this.endMethodCall(data);
            break;
          case "NIL":
            this.endNil(data);
            break;
          case "DATA":
          case "PARAM":
          case "MEMBER":
            break;
          default:
            this.onError("Unknown XML-RPC tag '" + el + "'");
            break;
        }
      } catch (e2) {
        this.onError(e2);
      }
    };
    Deserializer$2.prototype.endNil = function(data) {
      this.push(null);
      this.value = false;
    };
    Deserializer$2.prototype.endBoolean = function(data) {
      if (data === "1") {
        this.push(true);
      } else if (data === "0") {
        this.push(false);
      } else {
        throw new Error("Illegal boolean value '" + data + "'");
      }
      this.value = false;
    };
    Deserializer$2.prototype.endInt = function(data) {
      var value = parseInt(data, 10);
      if (isNaN(value)) {
        throw new Error("Expected an integer but got '" + data + "'");
      } else {
        this.push(value);
        this.value = false;
      }
    };
    Deserializer$2.prototype.endDouble = function(data) {
      var value = parseFloat(data);
      if (isNaN(value)) {
        throw new Error("Expected a double but got '" + data + "'");
      } else {
        this.push(value);
        this.value = false;
      }
    };
    Deserializer$2.prototype.endString = function(data) {
      this.push(data);
      this.value = false;
    };
    Deserializer$2.prototype.endArray = function(data) {
      var mark2 = this.marks.pop();
      this.stack.splice(mark2, this.stack.length - mark2, this.stack.slice(mark2));
      this.value = false;
    };
    Deserializer$2.prototype.endStruct = function(data) {
      var mark2 = this.marks.pop(), struct = {}, items = this.stack.slice(mark2), i2 = 0;
      for (; i2 < items.length; i2 += 2) {
        struct[items[i2]] = items[i2 + 1];
      }
      this.stack.splice(mark2, this.stack.length - mark2, struct);
      this.value = false;
    };
    Deserializer$2.prototype.endBase64 = function(data) {
      var buffer2 = new Buffer$1(data, "base64");
      this.push(buffer2);
      this.value = false;
    };
    Deserializer$2.prototype.endDateTime = function(data) {
      var date2 = dateFormatter.decodeIso8601(data);
      this.push(date2);
      this.value = false;
    };
    var isInteger = /^-?\d+$/;
    Deserializer$2.prototype.endI8 = function(data) {
      if (!isInteger.test(data)) {
        throw new Error("Expected integer (I8) value but got '" + data + "'");
      } else {
        this.endString(data);
      }
    };
    Deserializer$2.prototype.endValue = function(data) {
      if (this.value) {
        this.endString(data);
      }
    };
    Deserializer$2.prototype.endParams = function(data) {
      this.responseType = "params";
    };
    Deserializer$2.prototype.endFault = function(data) {
      this.responseType = "fault";
    };
    Deserializer$2.prototype.endMethodResponse = function(data) {
      this.type = "methodresponse";
    };
    Deserializer$2.prototype.endMethodName = function(data) {
      this.methodname = data;
    };
    Deserializer$2.prototype.endMethodCall = function(data) {
      this.type = "methodcall";
    };
    var deserializer = Deserializer$2;
    function Cookies$1() {
      this.cookies = {};
    }
    Cookies$1.prototype = {
      get: function(name) {
        var cookie = this.cookies[name];
        if (cookie && this.checkNotExpired(name)) {
          return this.cookies[name].value;
        }
        return null;
      },
      set: function(name, value, options) {
        var cookie = typeof options == "object" ? { value, expires: options.expires, secure: options.secure || false, new: options.new || false } : { value };
        if (this.checkNotExpired(name, cookie)) {
          this.cookies[name] = cookie;
        }
      },
      getExpirationDate: function(name) {
        return this.cookies[name] ? this.cookies[name].expires : null;
      },
      checkNotExpired: function(name, cookie) {
        if (typeof cookie === "undefined") {
          cookie = this.cookies[name];
        }
        var now2 = new Date();
        if (cookie && cookie.expires && now2 > cookie.expires) {
          delete this.cookies[name];
          return false;
        }
        return true;
      },
      parseResponse: function(headers) {
        var cookies2 = headers["set-cookie"];
        if (cookies2) {
          cookies2.forEach(function(c2) {
            var cookiesParams = c2.split(";");
            var cookiePair = cookiesParams.shift().split("=");
            var options = {};
            cookiesParams.forEach(function(param) {
              param = param.trim();
              if (param.toLowerCase().indexOf("expires") == 0) {
                var date2 = param.split("=")[1].trim();
                options.expires = new Date(date2);
              }
            });
            this.set(cookiePair[0].trim(), cookiePair[1].trim(), options);
          }.bind(this));
        }
      },
      composeRequest: function(headers) {
        if (Object.keys(this.cookies).length == 0) {
          return;
        }
        headers["Cookie"] = this.toString();
      },
      toString: function() {
        return Object.keys(this.cookies).filter(this.checkNotExpired.bind(this)).map(function(name) {
          return name + "=" + this.cookies[name].value;
        }.bind(this)).join(";");
      }
    };
    var cookies = Cookies$1;
    var http$1 = require$$1$1, https$1 = require$$1$1, url$1 = require$$2, Serializer$1 = serializer, Deserializer$1 = deserializer, Cookies = cookies;
    function Client(options, isSecure) {
      if (false === this instanceof Client) {
        return new Client(options, isSecure);
      }
      if (typeof options === "string") {
        options = url$1.parse(options);
        options.host = options.hostname;
        options.path = options.pathname;
      }
      if (typeof options.url !== "undefined") {
        var parsedUrl = url$1.parse(options.url);
        options.host = parsedUrl.hostname;
        options.path = parsedUrl.pathname;
        options.port = parsedUrl.port;
      }
      var headers = {
        "User-Agent": "NodeJS XML-RPC Client",
        "Content-Type": "text/xml",
        "Accept": "text/xml",
        "Accept-Charset": "UTF8",
        "Connection": "Keep-Alive"
      };
      options.headers = options.headers || {};
      if (options.headers.Authorization == null && options.basic_auth != null && options.basic_auth.user != null && options.basic_auth.pass != null) {
        var auth2 = options.basic_auth.user + ":" + options.basic_auth.pass;
        options.headers["Authorization"] = "Basic " + new Buffer$1(auth2).toString("base64");
      }
      for (var attribute in headers) {
        if (options.headers[attribute] === void 0) {
          options.headers[attribute] = headers[attribute];
        }
      }
      options.method = "POST";
      this.options = options;
      this.isSecure = isSecure;
      this.headersProcessors = {
        processors: [],
        composeRequest: function(headers2) {
          this.processors.forEach(function(p2) {
            p2.composeRequest(headers2);
          });
        },
        parseResponse: function(headers2) {
          this.processors.forEach(function(p2) {
            p2.parseResponse(headers2);
          });
        }
      };
      if (options.cookies) {
        this.cookies = new Cookies();
        this.headersProcessors.processors.unshift(this.cookies);
      }
    }
    Client.prototype.methodCall = function methodCall(method2, params, callback) {
      var options = this.options;
      var xml = Serializer$1.serializeMethodCall(method2, params, options.encoding);
      var transport = this.isSecure ? https$1 : http$1;
      options.headers["Content-Length"] = Buffer$1.byteLength(xml, "utf8");
      this.headersProcessors.composeRequest(options.headers);
      var request2 = transport.request(options, function(response) {
        var body = [];
        response.on("data", function(chunk) {
          body.push(chunk);
        });
        function __enrichError(err) {
          Object.defineProperty(err, "req", { value: request2 });
          Object.defineProperty(err, "res", { value: response });
          Object.defineProperty(err, "body", { value: body.join("") });
          return err;
        }
        if (response.statusCode == 404) {
          callback(__enrichError(new Error("Not Found")));
        } else {
          this.headersProcessors.parseResponse(response.headers);
          var deserializer2 = new Deserializer$1(options.responseEncoding);
          deserializer2.deserializeMethodResponse(response, function(err, result) {
            if (err) {
              err = __enrichError(err);
            }
            callback(err, result);
          });
        }
      }.bind(this));
      request2.on("error", callback);
      request2.write(xml, "utf8");
      request2.end();
    };
    Client.prototype.getCookie = function getCookie(name) {
      if (!this.cookies) {
        throw "Cookies support is not turned on for this client instance";
      }
      return this.cookies.get(name);
    };
    Client.prototype.setCookie = function setCookie(name, value) {
      if (!this.cookies) {
        throw "Cookies support is not turned on for this client instance";
      }
      this.cookies.set(name, value);
      return this;
    };
    var client = Client;
    const require$$3 = /* @__PURE__ */ getAugmentedNamespace(events);
    var http = require$$1$1, https = require$$1$1, url = require$$2, EventEmitter = require$$3.EventEmitter, Serializer = serializer, Deserializer = deserializer;
    function Server(options, isSecure, onListening) {
      if (false === this instanceof Server) {
        return new Server(options, isSecure);
      }
      onListening = onListening || function() {
      };
      var that = this;
      if (typeof options === "string") {
        options = url.parse(options);
        options.host = options.hostname;
        options.path = options.pathname;
      }
      function handleMethodCall(request2, response) {
        var deserializer2 = new Deserializer();
        deserializer2.deserializeMethodCall(request2, function(error2, methodName, params) {
          if (Object.prototype.hasOwnProperty.call(that._events, methodName)) {
            that.emit(methodName, null, params, function(error3, value) {
              var xml = null;
              if (error3 !== null) {
                xml = Serializer.serializeFault(error3);
              } else {
                xml = Serializer.serializeMethodResponse(value);
              }
              response.writeHead(200, { "Content-Type": "text/xml" });
              response.end(xml);
            });
          } else {
            that.emit("NotFound", methodName, params);
            response.writeHead(404);
            response.end();
          }
        });
      }
      this.httpServer = isSecure ? https.createServer(options, handleMethodCall) : http.createServer(handleMethodCall);
      browser$1.nextTick(function() {
        this.httpServer.listen(options.port, options.host, onListening);
      }.bind(this));
      this.close = function(callback) {
        this.httpServer.once("close", callback);
        this.httpServer.close();
      }.bind(this);
    }
    Server.prototype.__proto__ = EventEmitter.prototype;
    var server = Server;
    (function(exports2) {
      var Client2 = client, Server2 = server, CustomType2 = customtype.exports, dateFormatter2 = date_formatter;
      var xmlrpc2 = exports2;
      xmlrpc2.createClient = function(options) {
        return new Client2(options, false);
      };
      xmlrpc2.createSecureClient = function(options) {
        return new Client2(options, true);
      };
      xmlrpc2.createServer = function(options, callback) {
        return new Server2(options, false, callback);
      };
      xmlrpc2.createSecureServer = function(options, callback) {
        return new Server2(options, true, callback);
      };
      xmlrpc2.CustomType = CustomType2;
      xmlrpc2.dateFormatter = dateFormatter2;
    })(xmlrpc$1);
    const _vite_plugin_require_transform_xmlrpc = {
      createSecureClient: xmlrpc$1.createSecureClient,
      createClient: xmlrpc$1.createClient
    };
    const xmlrpc = _vite_plugin_require_transform_xmlrpc;
    async function fetchNode(apiUrl, reqMethod, reqParams) {
      let client2;
      const secure = apiUrl.indexOf("https:") > -1;
      if (secure) {
        client2 = xmlrpc.createSecureClient(apiUrl);
      } else {
        client2 = xmlrpc.createClient(apiUrl);
      }
      try {
        logUtil.logWarn("methodCallDirectNode\u5F00\u59CB");
        logUtil.logWarn("xmlrpcNodeParams.reqMethod=>");
        logUtil.logWarn(reqMethod);
        logUtil.logWarn("xmlrpcNodeParams.reqParams=>");
        logUtil.logWarn(reqParams);
        const data = await methodCallDirectNode(client2, reqMethod, reqParams);
        const dataJson = JSON.stringify(data);
        return dataJson;
      } catch (e2) {
        logUtil.logError(e2);
        throw new Error("\u8BF7\u6C42\u5904\u7406\u5F02\u5E38");
      }
    }
    async function methodCallDirectNode(client2, methodName, params) {
      return new Promise(function(resolve2, reject) {
        client2.methodCall(methodName, params, function(error2, data) {
          if (!error2) {
            logUtil.logInfo("resolve=>");
            logUtil.logInfo(data);
            resolve2(data);
          } else {
            reject(error2);
          }
        });
      });
    }
    class XmlrpcClient {
      constructor(apiType, apiUrl, username, password) {
        __publicField(this, "apiType");
        __publicField(this, "apiUrl");
        __publicField(this, "username");
        __publicField(this, "password");
        this.apiType = apiType;
        this.apiUrl = apiUrl;
        this.username = username;
        this.password = password;
      }
      async fetchCORS(apiUrl, reqMethod, reqParams) {
        const middleWareUrl = getEnv("VITE_MIDDLEWARE_URL") || "/api/middleware";
        const middleApiUrl = middleWareUrl + "/xmlrpc";
        logUtil.logInfo("apiUrl=>");
        logUtil.logInfo(apiUrl);
        const fetchCORSParams = {
          reqMethod,
          reqParams
        };
        logUtil.logInfo("fetchCORSParams=>");
        logUtil.logInfo(fetchCORSParams);
        const data = {
          fetchParams: {
            apiUrl,
            fetchCORSParams
          }
        };
        let middleFetchOption = {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(data)
        };
        logUtil.logInfo("middleApiUrl=>");
        logUtil.logInfo(middleApiUrl);
        logUtil.logInfo("middleFetchOption=>");
        logUtil.logInfo(middleFetchOption);
        const response = await fetch(middleApiUrl, middleFetchOption);
        return await response.text();
      }
      async fetchXmlrpc(apiUrl, reqMethod, reqParams) {
        let result;
        const widgetResult = await getWidgetId();
        if (widgetResult.isInSiyuan) {
          logUtil.logWarn("\u5F53\u524D\u5904\u4E8E\u6302\u4EF6\u6A21\u5F0F\uFF0C\u4F7F\u7528electron\u7684fetch\u83B7\u53D6\u6570\u636E");
          result = await fetchNode(apiUrl, reqMethod, reqParams);
        } else {
          logUtil.logWarn("\u5F53\u524D\u5904\u4E8E\u975E\u6302\u4EF6\u6A21\u5F0F\uFF0C\u5DF2\u5F00\u542F\u8BF7\u6C42\u4EE3\u7406\u89E3\u51B3CORS\u8DE8\u57DF\u95EE\u9898");
          result = await this.fetchCORS(apiUrl, reqMethod, reqParams);
        }
        if (!result || result == "") {
          throw new Error("\u8BF7\u6C42\u9519\u8BEF\u6216\u8005\u8FD4\u56DE\u7ED3\u679C\u4E3A\u7A7A");
        }
        logUtil.logInfo("\u6700\u7EC8\u8FD4\u56DE\u7ED9\u524D\u7AEF\u7684\u6570\u636E=>", result);
        return result;
      }
      async methodCallEntry(reqMethod, reqMarams) {
        const result = await this.fetchXmlrpc(this.apiUrl, reqMethod, reqMarams);
        logUtil.logInfo("\u8BF7\u6C42\u7ED3\u679C\uFF0Cresult=>");
        logUtil.logInfo(result);
        return result;
      }
    }
    const GET_USERS_BLOGS = "blogger.getUsersBlogs";
    const NEW_POST = "metaWeblog.newPost";
    const EDIT_POST = "metaWeblog.editPost";
    const DELETE_POST = "blogger.deletePost";
    const METAWEBLOG_METHOD_CONSTANTS = {
      GET_USERS_BLOGS,
      NEW_POST,
      EDIT_POST,
      DELETE_POST
    };
    class MetaWeblogApi {
      constructor(apiType) {
        __publicField(this, "apiType");
        __publicField(this, "cfg");
        __publicField(this, "xmlrpcClient");
        this.apiType = apiType;
        this.cfg = getJSONConf(apiType);
        this.xmlrpcClient = new XmlrpcClient(this.apiType, this.cfg.apiUrl, this.cfg.username, this.cfg.password);
      }
      async getUsersBlogs(appkey, username, password) {
        const usersBlogs = [];
        let ret = await this.xmlrpcClient.methodCallEntry(METAWEBLOG_METHOD_CONSTANTS.GET_USERS_BLOGS, [this.apiType, username, password]);
        logUtil.logInfo("ret=>");
        logUtil.logInfo(ret);
        const dataObj = JSON.parse(ret) || [];
        if (dataObj.faultCode) {
          throw new Error(dataObj.faultString);
        }
        const dataArr = JSON.parse(ret) || [];
        for (let i2 = 0; i2 < dataArr.length; i2++) {
          const userBlog = new UserBlog();
          const item = dataArr[i2];
          userBlog.blogid = item.blogid || "";
          userBlog.url = item.url;
          userBlog.blogName = item.blogName;
          usersBlogs.push(userBlog);
        }
        return usersBlogs;
      }
      async getRecentPosts(appkey, username, password, numOfPosts) {
        return Promise.resolve([]);
      }
      async getPost(postid, username, password) {
        return Promise.resolve(new Post());
      }
      async newPost(blogid, username, password, post, publish) {
        if (!publish) {
          post.post_status = POST_STATUS_CONSTANTS.POST_TYPE_DRAFT;
        }
        const postStruct = this.createPostStruct(post);
        logUtil.logWarn("postStruct=>");
        logUtil.logWarn(postStruct);
        let ret = await this.xmlrpcClient.methodCallEntry(METAWEBLOG_METHOD_CONSTANTS.NEW_POST, [this.apiType, username, password, postStruct, publish]);
        ret = ret.replace(/"/g, "");
        logUtil.logInfo("ret=>");
        logUtil.logInfo(ret);
        return ret;
      }
      async editPost(postid, username, password, post, publish) {
        if (!publish) {
          post.post_status = POST_STATUS_CONSTANTS.POST_TYPE_DRAFT;
        }
        const postStruct = this.createPostStruct(post);
        logUtil.logWarn("postStruct=>");
        logUtil.logWarn(postStruct);
        const ret = await this.xmlrpcClient.methodCallEntry(METAWEBLOG_METHOD_CONSTANTS.EDIT_POST, [postid, username, password, postStruct, publish]);
        logUtil.logInfo("ret=>");
        logUtil.logInfo(ret);
        return ret;
      }
      async deletePost(appKey, postid, username, password, publish) {
        const ret = await this.xmlrpcClient.methodCallEntry(METAWEBLOG_METHOD_CONSTANTS.DELETE_POST, [appKey, postid, username, password, publish]);
        logUtil.logInfo("ret=>");
        logUtil.logInfo(ret);
        return ret;
      }
      createPostStruct(post) {
        let postObj = {};
        if (!isEmptyString(post.title)) {
          Object.assign(postObj, {
            title: post.title
          });
        }
        if (!isEmptyString(post.mt_keywords)) {
          Object.assign(postObj, {
            mt_keywords: post.mt_keywords
          });
        }
        if (!isEmptyString(post.description)) {
          Object.assign(postObj, {
            description: post.description
          });
        }
        if (!isEmptyString(post.wp_slug)) {
          Object.assign(postObj, {
            wp_slug: post.wp_slug
          });
        }
        if (!inBrowser()) {
          Object.assign(postObj, {
            dateCreated: post.dateCreated || new Date()
          });
        }
        Object.assign(postObj, {
          categories: post.categories || []
        });
        Object.assign(postObj, {
          post_status: post.post_status || POST_STATUS_CONSTANTS.POST_STATUS_PUBLISH
        });
        if (!isEmptyString(post.wp_password)) {
          Object.assign(postObj, {
            wp_password: post.wp_password
          });
        }
        return postObj;
      }
    }
    class MetaWeblogApiAdaptor {
      constructor(apiType) {
        __publicField(this, "metaWeblogApi");
        __publicField(this, "username");
        __publicField(this, "password");
        __publicField(this, "appkey");
        const cfg = getJSONConf(apiType);
        this.metaWeblogApi = new MetaWeblogApi(apiType);
        this.username = cfg.username;
        this.password = cfg.password;
        this.appkey = apiType;
      }
      async getUsersBlogs() {
        const data = await this.metaWeblogApi.getUsersBlogs(this.appkey, this.username, this.password);
        logUtil.logInfo("getUsersBlogs=>");
        logUtil.logInfo(data);
        return data;
      }
      async getRecentPosts(numOfPosts) {
        let result = [];
        const blogPosts = await this.metaWeblogApi.getRecentPosts(this.appkey, this.username, this.password, numOfPosts);
        for (let i2 = 0; i2 < blogPosts.length; i2++) {
          const blogPost = blogPosts[i2];
          let commonPost = new Post();
          commonPost.postid = blogPost.postid;
          commonPost.title = blogPost.title;
          commonPost.mt_keywords = blogPost.mt_keywords;
          commonPost.permalink = blogPost.permalink;
          commonPost.description = blogPost.description;
          commonPost.wp_slug = blogPost.wp_slug;
          commonPost.dateCreated = blogPost.dateCreated;
          commonPost.categories = blogPost.categories;
          result.push(commonPost);
        }
        return result;
      }
      async getPost(postid) {
        const data = await this.metaWeblogApi.getPost(postid, this.username, this.password);
        return data;
      }
      async editPost(postid, post, publish) {
        return await this.metaWeblogApi.editPost(postid, this.username, this.password, post, publish || true);
      }
      async newPost(post, publish) {
        return await this.metaWeblogApi.newPost(this.appkey, this.username, this.password, post, publish || true);
      }
      async deletePost(postid) {
        return await this.metaWeblogApi.deletePost(this.appkey, postid, this.username, this.password, true);
      }
    }
    class JVueApiAdaptor extends MetaWeblogApiAdaptor {
      constructor() {
        super(API_TYPE_CONSTANTS.API_TYPE_JVUE);
      }
    }
    class ConfApiAdaptor extends MetaWeblogApiAdaptor {
      constructor() {
        super(API_TYPE_CONSTANTS.API_TYPE_CONFLUENCE);
      }
    }
    class CnblogsApiAdaptor extends MetaWeblogApiAdaptor {
      constructor() {
        super(API_TYPE_CONSTANTS.API_TYPE_CNBLOGS);
      }
    }
    class CommonblogApiAdaptor {
      constructor(apiType) {
        __publicField(this, "apiType");
        __publicField(this, "cfg");
        this.apiType = apiType;
        this.cfg = getJSONConf(apiType);
      }
      async deletePost(postid) {
        throw new Error("\u8BE5\u529F\u80FD\u672A\u5B9E\u73B0\uFF0C\u8BF7\u5728\u5B50\u7C7B\u91CD\u5199\u8BE5\u65B9\u6CD5");
      }
      async editPost(postid, post, publish) {
        throw new Error("\u8BE5\u529F\u80FD\u672A\u5B9E\u73B0\uFF0C\u8BF7\u5728\u5B50\u7C7B\u91CD\u5199\u8BE5\u65B9\u6CD5");
      }
      async getPost(postid, useSlug) {
        throw new Error("\u8BE5\u529F\u80FD\u672A\u5B9E\u73B0\uFF0C\u8BF7\u5728\u5B50\u7C7B\u91CD\u5199\u8BE5\u65B9\u6CD5");
      }
      async getRecentPosts(numOfPosts, page, keyword) {
        throw new Error("\u8BE5\u529F\u80FD\u672A\u5B9E\u73B0\uFF0C\u8BF7\u5728\u5B50\u7C7B\u91CD\u5199\u8BE5\u65B9\u6CD5");
      }
      async getUsersBlogs() {
        throw new Error("\u8BE5\u529F\u80FD\u672A\u5B9E\u73B0\uFF0C\u8BF7\u5728\u5B50\u7C7B\u91CD\u5199\u8BE5\u65B9\u6CD5");
      }
      async newPost(post, publish) {
        throw new Error("\u8BE5\u529F\u80FD\u672A\u5B9E\u73B0\uFF0C\u8BF7\u5728\u5B50\u7C7B\u91CD\u5199\u8BE5\u65B9\u6CD5");
      }
    }
    const version = "3.7.2";
    const VERSION$4 = version;
    const _hasatob = typeof atob === "function";
    const _hasbtoa = typeof btoa === "function";
    const _hasBuffer = typeof Buffer === "function";
    const _TD = typeof TextDecoder === "function" ? new TextDecoder() : void 0;
    const _TE = typeof TextEncoder === "function" ? new TextEncoder() : void 0;
    const b64ch = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    const b64chs = Array.prototype.slice.call(b64ch);
    const b64tab = ((a2) => {
      let tab = {};
      a2.forEach((c2, i2) => tab[c2] = i2);
      return tab;
    })(b64chs);
    const b64re = /^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/;
    const _fromCC = String.fromCharCode.bind(String);
    const _U8Afrom = typeof Uint8Array.from === "function" ? Uint8Array.from.bind(Uint8Array) : (it2, fn2 = (x2) => x2) => new Uint8Array(Array.prototype.slice.call(it2, 0).map(fn2));
    const _mkUriSafe = (src) => src.replace(/=/g, "").replace(/[+\/]/g, (m0) => m0 == "+" ? "-" : "_");
    const _tidyB64 = (s2) => s2.replace(/[^A-Za-z0-9\+\/]/g, "");
    const btoaPolyfill = (bin) => {
      let u32, c0, c1, c2, asc = "";
      const pad = bin.length % 3;
      for (let i2 = 0; i2 < bin.length; ) {
        if ((c0 = bin.charCodeAt(i2++)) > 255 || (c1 = bin.charCodeAt(i2++)) > 255 || (c2 = bin.charCodeAt(i2++)) > 255)
          throw new TypeError("invalid character found");
        u32 = c0 << 16 | c1 << 8 | c2;
        asc += b64chs[u32 >> 18 & 63] + b64chs[u32 >> 12 & 63] + b64chs[u32 >> 6 & 63] + b64chs[u32 & 63];
      }
      return pad ? asc.slice(0, pad - 3) + "===".substring(pad) : asc;
    };
    const _btoa = _hasbtoa ? (bin) => btoa(bin) : _hasBuffer ? (bin) => Buffer.from(bin, "binary").toString("base64") : btoaPolyfill;
    const _fromUint8Array = _hasBuffer ? (u8a) => Buffer.from(u8a).toString("base64") : (u8a) => {
      const maxargs = 4096;
      let strs = [];
      for (let i2 = 0, l2 = u8a.length; i2 < l2; i2 += maxargs) {
        strs.push(_fromCC.apply(null, u8a.subarray(i2, i2 + maxargs)));
      }
      return _btoa(strs.join(""));
    };
    const fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);
    const cb_utob = (c2) => {
      if (c2.length < 2) {
        var cc = c2.charCodeAt(0);
        return cc < 128 ? c2 : cc < 2048 ? _fromCC(192 | cc >>> 6) + _fromCC(128 | cc & 63) : _fromCC(224 | cc >>> 12 & 15) + _fromCC(128 | cc >>> 6 & 63) + _fromCC(128 | cc & 63);
      } else {
        var cc = 65536 + (c2.charCodeAt(0) - 55296) * 1024 + (c2.charCodeAt(1) - 56320);
        return _fromCC(240 | cc >>> 18 & 7) + _fromCC(128 | cc >>> 12 & 63) + _fromCC(128 | cc >>> 6 & 63) + _fromCC(128 | cc & 63);
      }
    };
    const re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;
    const utob = (u2) => u2.replace(re_utob, cb_utob);
    const _encode = _hasBuffer ? (s2) => Buffer.from(s2, "utf8").toString("base64") : _TE ? (s2) => _fromUint8Array(_TE.encode(s2)) : (s2) => _btoa(utob(s2));
    const encode = (src, urlsafe = false) => urlsafe ? _mkUriSafe(_encode(src)) : _encode(src);
    const encodeURI$1 = (src) => encode(src, true);
    const re_btou = /[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g;
    const cb_btou = (cccc) => {
      switch (cccc.length) {
        case 4:
          var cp = (7 & cccc.charCodeAt(0)) << 18 | (63 & cccc.charCodeAt(1)) << 12 | (63 & cccc.charCodeAt(2)) << 6 | 63 & cccc.charCodeAt(3), offset2 = cp - 65536;
          return _fromCC((offset2 >>> 10) + 55296) + _fromCC((offset2 & 1023) + 56320);
        case 3:
          return _fromCC((15 & cccc.charCodeAt(0)) << 12 | (63 & cccc.charCodeAt(1)) << 6 | 63 & cccc.charCodeAt(2));
        default:
          return _fromCC((31 & cccc.charCodeAt(0)) << 6 | 63 & cccc.charCodeAt(1));
      }
    };
    const btou = (b2) => b2.replace(re_btou, cb_btou);
    const atobPolyfill = (asc) => {
      asc = asc.replace(/\s+/g, "");
      if (!b64re.test(asc))
        throw new TypeError("malformed base64.");
      asc += "==".slice(2 - (asc.length & 3));
      let u24, bin = "", r1, r2;
      for (let i2 = 0; i2 < asc.length; ) {
        u24 = b64tab[asc.charAt(i2++)] << 18 | b64tab[asc.charAt(i2++)] << 12 | (r1 = b64tab[asc.charAt(i2++)]) << 6 | (r2 = b64tab[asc.charAt(i2++)]);
        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255) : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255) : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);
      }
      return bin;
    };
    const _atob = _hasatob ? (asc) => atob(_tidyB64(asc)) : _hasBuffer ? (asc) => Buffer.from(asc, "base64").toString("binary") : atobPolyfill;
    const _toUint8Array = _hasBuffer ? (a2) => _U8Afrom(Buffer.from(a2, "base64")) : (a2) => _U8Afrom(_atob(a2), (c2) => c2.charCodeAt(0));
    const toUint8Array = (a2) => _toUint8Array(_unURI(a2));
    const _decode = _hasBuffer ? (a2) => Buffer.from(a2, "base64").toString("utf8") : _TD ? (a2) => _TD.decode(_toUint8Array(a2)) : (a2) => btou(_atob(a2));
    const _unURI = (a2) => _tidyB64(a2.replace(/[-_]/g, (m0) => m0 == "-" ? "+" : "/"));
    const decode = (src) => _decode(_unURI(src));
    const isValid = (src) => {
      if (typeof src !== "string")
        return false;
      const s2 = src.replace(/\s+/g, "").replace(/={0,2}$/, "");
      return !/[^\s0-9a-zA-Z\+/]/.test(s2) || !/[^\s0-9a-zA-Z\-_]/.test(s2);
    };
    const _noEnum = (v2) => {
      return {
        value: v2,
        enumerable: false,
        writable: true,
        configurable: true
      };
    };
    const extendString = function() {
      const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));
      _add("fromBase64", function() {
        return decode(this);
      });
      _add("toBase64", function(urlsafe) {
        return encode(this, urlsafe);
      });
      _add("toBase64URI", function() {
        return encode(this, true);
      });
      _add("toBase64URL", function() {
        return encode(this, true);
      });
      _add("toUint8Array", function() {
        return toUint8Array(this);
      });
    };
    const extendUint8Array = function() {
      const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));
      _add("toBase64", function(urlsafe) {
        return fromUint8Array(this, urlsafe);
      });
      _add("toBase64URI", function() {
        return fromUint8Array(this, true);
      });
      _add("toBase64URL", function() {
        return fromUint8Array(this, true);
      });
    };
    const extendBuiltins = () => {
      extendString();
      extendUint8Array();
    };
    const gBase64 = {
      version,
      VERSION: VERSION$4,
      atob: _atob,
      atobPolyfill,
      btoa: _btoa,
      btoaPolyfill,
      fromBase64: decode,
      toBase64: encode,
      encode,
      encodeURI: encodeURI$1,
      encodeURL: encodeURI$1,
      utob,
      btou,
      decode,
      isValid,
      fromUint8Array,
      toUint8Array,
      extendString,
      extendUint8Array,
      extendBuiltins
    };
    class CommonblogApi {
      constructor() {
      }
      async fetchCORS(apiUrl, fetchOptions, formJson) {
        const middleWareUrl = getEnv("VITE_MIDDLEWARE_URL") || "/api/middleware";
        const middleApiUrl = middleWareUrl + "/fetch";
        logUtil.logInfo("apiUrl=>");
        logUtil.logInfo(apiUrl);
        logUtil.logInfo("fetchOptions=>");
        logUtil.logInfo(fetchOptions);
        const originalFetchParams = {
          apiUrl,
          fetchOptions
        };
        if (formJson) {
          Object.assign(originalFetchParams, {
            formJson
          });
        }
        const data = {
          fetchParams: originalFetchParams
        };
        let middleFetchOption = {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(data)
        };
        logUtil.logInfo("middleApiUrl=>");
        logUtil.logInfo(middleApiUrl);
        logUtil.logInfo("middleFetchOption=>");
        logUtil.logInfo(middleFetchOption);
        return await fetch(middleApiUrl, middleFetchOption);
      }
      async fetchCall(apiUrl, fetchOptions, formJson) {
        let result;
        const widgetResult = await getWidgetId();
        if (widgetResult.isInSiyuan) {
          logUtil.logWarn("\u5F53\u524D\u5904\u4E8E\u6302\u4EF6\u6A21\u5F0F\uFF0C\u4F7F\u7528electron\u7684fetch\u83B7\u53D6\u6570\u636E");
          result = await fetch(apiUrl, fetchOptions);
        } else {
          logUtil.logWarn("\u5F53\u524D\u5904\u4E8E\u975E\u6302\u4EF6\u6A21\u5F0F\uFF0C\u5DF2\u5F00\u542F\u8BF7\u6C42\u4EE3\u7406\u89E3\u51B3CORS\u8DE8\u57DF\u95EE\u9898");
          logUtil.logInfo("formJson=>", formJson);
          result = await this.fetchCORS(apiUrl, fetchOptions, formJson);
        }
        if (!result) {
          throw new Error("\u8BF7\u6C42\u9519\u8BEF\u6216\u8005\u8FD4\u56DE\u7ED3\u679C\u4E3A\u7A7A");
        }
        logUtil.logInfo("\u6700\u7EC8\u8FD4\u56DE\u7ED9\u524D\u7AEF\u7684\u6570\u636E=>", result);
        return result;
      }
      async fetchEntry(apiUrl, fetchOptions, formJson) {
        const result = await this.fetchCall(apiUrl, fetchOptions, formJson);
        logUtil.logInfo("\u8BF7\u6C42\u7ED3\u679C\uFF0Cresult=>");
        logUtil.logInfo(result);
        return result;
      }
      parseCORSBody(corsjson) {
        return corsjson.body;
      }
      async doFetch(apiUrl, fetchOptions, formJson) {
        const response = await this.fetchEntry(apiUrl, fetchOptions, formJson);
        if (!response) {
          throw new Error("\u8BF7\u6C42\u5F02\u5E38");
        }
        const statusCode = response.status;
        if (200 != statusCode) {
          if (401 == statusCode) {
            throw new Error("\u56E0\u6743\u9650\u4E0D\u8DB3\u64CD\u4F5C\u5DF2\u88AB\u7981\u6B62");
          } else {
            throw new Error("\u8BF7\u6C42\u9519\u8BEF");
          }
        }
        let resJson;
        const widgetResult = await getWidgetId();
        if (widgetResult.isInSiyuan) {
          resJson = await response.json();
        } else {
          const corsJson = await response.json();
          resJson = this.parseCORSBody(corsJson);
        }
        return resJson;
      }
      async doFormFetch(apiUrl, fetchOptions, formJson) {
        const widgetResult = await getWidgetId();
        if (widgetResult.isInSiyuan) {
          const form = new URLSearchParams();
          formJson.forEach((item) => {
            form.append(item.key, item.value);
          });
          fetchOptions.body = form;
          return await this.doFetch(apiUrl, fetchOptions);
        } else {
          return await this.doFetch(apiUrl, fetchOptions, formJson);
        }
      }
    }
    class KmsApi extends CommonblogApi {
      constructor(baseUrl, basicToken) {
        super();
        __publicField(this, "baseUrl");
        __publicField(this, "basicToken");
        this.baseUrl = baseUrl;
        this.basicToken = basicToken;
      }
      async addDoc(title2, content) {
        let url2 = "/addDoc";
        const formJson = [{
          key: "fdDocTemplateId",
          value: "181f20dcfc5744e90b0b8254499b4af0"
        }, {
          key: "docSubject",
          value: title2
        }, {
          key: "docContent",
          value: content
        }, {
          key: "fdDocCreator",
          value: "180f58069509ef61dd964994e4591dab"
        }, {
          key: "authorType",
          value: "1"
        }, {
          key: "docAuthor",
          value: "180f58069509ef61dd964994e4591dab"
        }];
        const result = await this.kmsRequestForm(url2, formJson);
        return result.fdId;
      }
      async updateDoc(fdId, title2, content) {
        let url2 = "/updateDoc";
        const formJson = [{
          key: "fdId",
          value: fdId
        }, {
          key: "docSubject",
          value: title2
        }, {
          key: "docContent",
          value: content
        }];
        const result = await this.kmsRequestForm(url2, formJson);
        return result.fdId;
      }
      async delDoc(fdId) {
        let url2 = "/delDoc";
        const formJson = {
          "fdId": fdId
        };
        await this.kmsRequestJson(url2, formJson);
        return true;
      }
      async kmsRequestForm(url2, formJson) {
        const apiUrl = this.baseUrl + url2;
        const fetchOps = {
          headers: {
            Authorization: `Basic ${this.basicToken}`
          },
          method: "POST"
        };
        const json2 = await this.doFormFetch(apiUrl, fetchOps, formJson);
        const statusCode = json2.code;
        const msg = json2.msg;
        if (200 != statusCode) {
          if (401 == statusCode) {
            throw new Error("\u56E0\u6743\u9650\u4E0D\u8DB3\u64CD\u4F5C\u5DF2\u88AB\u7981\u6B62\uFF1A" + msg);
          } else {
            throw new Error("\u8BF7\u6C42\u9519\u8BEF");
          }
        }
        return json2.data;
      }
      async kmsRequestJson(url2, formJson) {
        const apiUrl = this.baseUrl + url2;
        const fetchOps = {
          body: JSON.stringify(formJson),
          headers: {
            "Content-Type": "application/json",
            Authorization: `Basic ${this.basicToken}`
          },
          method: "POST"
        };
        const json2 = await this.doFetch(apiUrl, fetchOps);
        const statusCode = json2.code;
        const msg = json2.msg;
        if (200 != statusCode) {
          if (401 == statusCode) {
            throw new Error("\u56E0\u6743\u9650\u4E0D\u8DB3\u64CD\u4F5C\u5DF2\u88AB\u7981\u6B62\uFF1A" + msg);
          } else {
            throw new Error("\u8BF7\u6C42\u9519\u8BEF");
          }
        }
        return json2.data;
      }
    }
    class KmsApiAdaptor extends CommonblogApiAdaptor {
      constructor() {
        super(API_TYPE_CONSTANTS.API_TYPE_KMS);
        __publicField(this, "kmsApi");
        const kmsUsername = this.cfg.username || "";
        const kmsPassword = this.cfg.password || "";
        const basicToken = gBase64.toBase64(`${kmsUsername}:${kmsPassword}`);
        this.kmsApi = new KmsApi(this.cfg.apiUrl, basicToken);
      }
      async getUsersBlogs() {
        let result = [];
        const userblog = new UserBlog();
        userblog.blogid = this.apiType;
        userblog.blogName = "KMS";
        userblog.url = this.cfg.apiUrl;
        result.push(userblog);
        return result;
      }
      async deletePost(postid) {
        return await this.kmsApi.delDoc(postid);
      }
      async editPost(postid, post, publish) {
        return await this.kmsApi.updateDoc(postid, post.title, post.description);
      }
      async newPost(post, publish) {
        return await this.kmsApi.addDoc(post.title, post.description);
      }
    }
    class WordpressApiAdaptor extends MetaWeblogApiAdaptor {
      constructor() {
        super(API_TYPE_CONSTANTS.API_TYPE_WORDPRESS);
      }
    }
    class LiandiApi extends CommonblogApi {
      constructor(baseUrl, username, token) {
        super();
        __publicField(this, "rewardContent", "\u5982\u679C\u60A8\u89C9\u5F97\u6B64\u6587\u7AE0\u4E0D\u9519\uFF0C\u8BF7\u968F\u610F\u6253\u8D4F\u54E6~");
        __publicField(this, "rewardCount", 5);
        __publicField(this, "baseUrl");
        __publicField(this, "username");
        __publicField(this, "token");
        this.baseUrl = baseUrl;
        this.username = username;
        this.token = token;
      }
      async getUser() {
        let url2 = "/user";
        let data = {};
        return this.liandiRequest(url2, data, "GET", true);
      }
      async addArticle(title2, content, tags) {
        let url2 = "/article";
        let data = {
          "articleTitle": title2,
          "articleTags": tags,
          "articleContent": content,
          "articleRewardContent": this.rewardContent,
          "articleRewardPoint": this.rewardCount
        };
        let postid;
        await this.liandiRequest(url2, data, "POST", true);
        postid = await this.getFirstArticleId();
        logUtil.logInfo("liandi addArticle postid=>", postid);
        return postid;
      }
      async getFirstArticleId() {
        let url2 = "/user/" + this.username + "/articles?p=1";
        let data = {};
        const result = await this.liandiRequest(url2, data, "GET", true);
        const articles = result.articles;
        if (articles.length == 0) {
          throw new Error("\u672A\u83B7\u53D6\u5230\u5E16\u5B50");
        }
        return articles[0].oId;
      }
      async updateArticle(articleId, title2, content, tags) {
        let url2 = "/article/" + articleId;
        let data = {
          "articleTitle": title2,
          "articleTags": tags,
          "articleContent": content,
          "articleRewardContent": this.rewardContent,
          "articleRewardPoint": this.rewardCount
        };
        await this.liandiRequest(url2, data, "PUT", true);
        return true;
      }
      async liandiRequest(url2, data, method2, useToken) {
        const apiUrl = this.baseUrl + url2;
        let m2 = "POST";
        if (method2) {
          m2 = method2;
        }
        let fetchOps = {
          method: m2
        };
        if (!isEmptyObject(data)) {
          Object.assign(fetchOps, {
            body: JSON.stringify(data)
          });
        }
        if (useToken != false) {
          Object.assign(fetchOps, {
            headers: {
              Authorization: `token ${this.token}`,
              "User-Agent": "Terwer/0.0.2"
            }
          });
        }
        logUtil.logInfo("\u5411\u94FE\u6EF4\u8BF7\u6C42\u6570\u636E\uFF0CapiUrl=>", apiUrl);
        logUtil.logInfo("\u5411\u94FE\u6EF4\u8BF7\u6C42\u6570\u636E\uFF0CfetchOps=>", fetchOps);
        const resJson = await this.doFetch(apiUrl, fetchOps);
        logUtil.logInfo("\u5411\u94FE\u6EF4\u8BF7\u6C42\u6570\u636E\uFF0CresJson=>", resJson);
        if (resJson.code == 0) {
          return resJson.data;
        } else {
          throw new Error("\u53D1\u5E03\u5E16\u5B50\u53D7\u9650\u6216\u8005\u7CFB\u7EDF\u5F02\u5E38");
        }
      }
    }
    class LiandiApiAdaptor extends CommonblogApiAdaptor {
      constructor() {
        super(API_TYPE_CONSTANTS.API_TYPE_LIANDI);
        __publicField(this, "liandiApi");
        this.liandiApi = new LiandiApi(this.cfg.apiUrl, this.cfg.username || "", this.cfg.token || "");
      }
      async getUsersBlogs() {
        let result = [];
        const user = await this.liandiApi.getUser();
        logUtil.logInfo("user=>", user);
        const userblog = new UserBlog();
        userblog.blogid = this.apiType;
        userblog.blogName = user.user.userName || this.cfg.blogName || "\u94FE\u6EF4";
        userblog.url = this.cfg.apiUrl;
        result.push(userblog);
        return result;
      }
      async deletePost(postid) {
        throw new Error("\u94FE\u6EF4\u793E\u533AAPI\u4E0D\u652F\u6301\u5220\u9664\u5E16\u5B50");
      }
      async editPost(postid, post, publish) {
        const result = await this.liandiApi.updateArticle(postid, post.title, post.description, post.mt_keywords);
        logUtil.logInfo("liandi newPost=>", result);
        return result;
      }
      async newPost(post, publish) {
        const result = await this.liandiApi.addArticle(post.title, post.description, post.mt_keywords);
        logUtil.logInfo("liandi newPost=>", result);
        return result;
      }
    }
    class YuqueApi extends CommonblogApi {
      constructor(baseUrl, blogid, username, token) {
        super();
        __publicField(this, "baseUrl");
        __publicField(this, "blogid");
        __publicField(this, "username");
        __publicField(this, "token");
        this.baseUrl = baseUrl;
        this.blogid = blogid;
        this.username = username;
        this.token = token;
      }
      async repos() {
        let url2 = "/users/" + this.username + "/repos";
        let data = {};
        return await this.yuqueRequest(url2, data, "GET");
      }
      async addDoc(title2, slug, content) {
        let url2 = "/repos/" + this.blogid + "/docs";
        let data = {
          title: title2,
          slug,
          format: "markdown",
          body: content
        };
        const result = await this.yuqueRequest(url2, data, "POST");
        logUtil.logInfo("yuqueRequest addDoc=>", result);
        if (!result) {
          throw new Error("\u8BF7\u6C42\u8BED\u96C0API\u5F02\u5E38");
        }
        return result.id + "";
      }
      async updateDoc(docId, title2, slug, content) {
        let url2 = "/repos/" + this.blogid + "/docs/" + docId;
        let data = {
          title: title2,
          slug,
          body: content,
          _force_asl: 1
        };
        const result = await this.yuqueRequest(url2, data, "PUT");
        if (!result) {
          throw new Error("\u8BF7\u6C42\u8BED\u96C0API\u5F02\u5E38");
        }
        return true;
      }
      async delDoc(docId) {
        let url2 = "/repos/" + this.blogid + "/docs/" + docId;
        let data = {};
        const result = await this.yuqueRequest(url2, data, "DELETE");
        if (!result) {
          throw new Error("\u8BF7\u6C42\u8BED\u96C0API\u5F02\u5E38");
        }
        return true;
      }
      async yuqueRequest(url2, data, method2) {
        const apiUrl = this.baseUrl + url2;
        let m2 = "POST";
        if (method2) {
          m2 = method2;
        }
        let fetchOps = {
          method: m2
        };
        if (!isEmptyObject(data)) {
          Object.assign(fetchOps, {
            body: JSON.stringify(data)
          });
        }
        Object.assign(fetchOps, {
          headers: {
            "Content-Type": "application/json",
            "X-Auth-Token": this.token,
            "User-Agent": "Terwer/0.0.2"
          }
        });
        logUtil.logInfo("\u5411\u8BED\u96C0\u8BF7\u6C42\u6570\u636E\uFF0CapiUrl=>", apiUrl);
        logUtil.logInfo("\u5411\u8BED\u96C0\u8BF7\u6C42\u6570\u636E\uFF0CfetchOps=>", fetchOps);
        const resJson = await this.doFetch(apiUrl, fetchOps);
        logUtil.logInfo("\u5411\u8BED\u96C0\u8BF7\u6C42\u6570\u636E\uFF0CresJson=>", resJson);
        return resJson.data ? resJson.data : null;
      }
    }
    class YuqueApiAdaptor extends CommonblogApiAdaptor {
      constructor() {
        super(API_TYPE_CONSTANTS.API_TYPE_YUQUE);
        __publicField(this, "yuqueApi");
        this.yuqueApi = new YuqueApi(this.cfg.apiUrl, this.cfg.blogid || "", this.cfg.username || "", this.cfg.token || "");
      }
      async getUsersBlogs() {
        let result = [];
        const repos = await this.yuqueApi.repos();
        logUtil.logInfo("repos=>", repos);
        repos.forEach((item) => {
          const userblog = new UserBlog();
          userblog.blogid = item.namespace;
          userblog.blogName = item.name;
          userblog.url = item.namespace;
          result.push(userblog);
        });
        return result;
      }
      async deletePost(postid) {
        return await this.yuqueApi.delDoc(postid);
      }
      async editPost(postid, post, publish) {
        return await this.yuqueApi.updateDoc(postid, post.title, post.wp_slug, post.description);
      }
      async newPost(post, publish) {
        return await this.yuqueApi.addDoc(post.title, post.wp_slug, post.description);
      }
    }
    class API {
      constructor(type2) {
        __publicField(this, "type");
        __publicField(this, "apiAdaptor");
        this.type = type2;
        if (type2.indexOf("-") > -1) {
          const typeArr = type2.split("-");
          if (typeArr.length > 0) {
            const ptype = typeArr[0];
            if (ptype == PlantformType.Metaweblog.toLowerCase()) {
              this.apiAdaptor = new MetaWeblogApiAdaptor(type2);
              return;
            } else if (ptype == PlantformType.Wordpress.toLowerCase()) {
              this.apiAdaptor = new MetaWeblogApiAdaptor(type2);
              return;
            }
          }
        }
        switch (this.type) {
          case API_TYPE_CONSTANTS.API_TYPE_SIYUAN:
            this.apiAdaptor = new SiYuanApiAdaptor();
            break;
          case API_TYPE_CONSTANTS.API_TYPE_JVUE:
            this.apiAdaptor = new JVueApiAdaptor();
            break;
          case API_TYPE_CONSTANTS.API_TYPE_CONFLUENCE:
            this.apiAdaptor = new ConfApiAdaptor();
            break;
          case API_TYPE_CONSTANTS.API_TYPE_CNBLOGS:
            this.apiAdaptor = new CnblogsApiAdaptor();
            break;
          case API_TYPE_CONSTANTS.API_TYPE_WORDPRESS:
            this.apiAdaptor = new WordpressApiAdaptor();
            break;
          case API_TYPE_CONSTANTS.API_TYPE_LIANDI:
            this.apiAdaptor = new LiandiApiAdaptor();
            break;
          case API_TYPE_CONSTANTS.API_TYPE_YUQUE:
            this.apiAdaptor = new YuqueApiAdaptor();
            break;
          case API_TYPE_CONSTANTS.API_TYPE_KMS:
            this.apiAdaptor = new KmsApiAdaptor();
            break;
          default:
            throw new Error("\u672A\u627E\u5230\u63A5\u53E3\u9002\u914D\u5668\uFF0C\u8BF7\u68C0\u67E5\u53C2\u6570");
        }
      }
      async getRecentPosts(numOfPosts, page, keyword) {
        return await this.apiAdaptor.getRecentPosts(numOfPosts, page, keyword);
      }
      async getUsersBlogs() {
        return await this.apiAdaptor.getUsersBlogs();
      }
      async getPost(postid, useSlug) {
        return await this.apiAdaptor.getPost(postid, useSlug);
      }
      async editPost(postid, post, publish) {
        return await this.apiAdaptor.editPost(postid, post, publish);
      }
      async newPost(post, publish) {
        return await this.apiAdaptor.newPost(post, publish);
      }
      async deletePost(postid) {
        return await this.apiAdaptor.deletePost(postid);
      }
    }
    const __default__$q = {
      name: "MetaweblogSetting"
    };
    const _sfc_main$q = /* @__PURE__ */ defineComponent({
      ...__default__$q,
      props: {
        isReload: {
          type: Boolean,
          default: false
        },
        apiType: {
          type: String,
          default: ""
        },
        cfg: {
          type: MetaweblogCfg,
          default: null
        }
      },
      setup(__props) {
        const props = __props;
        const {
          t
        } = useI18n_1();
        const home2 = ref("");
        const apiUrl = ref("");
        const username = ref("");
        const password = ref("");
        const isLoading = ref(false);
        const apiStatus = ref(false);
        const blogName = ref("");
        const apiTypeInfo = ref(t("setting.blog.platform.support.metaweblog") + props.apiType + " ");
        const valiConf = async () => {
          isLoading.value = true;
          try {
            saveConf(true);
            const cfg = getJSONConf(props.apiType);
            const api = new API(props.apiType);
            const usersBlogs = await api.getUsersBlogs();
            if (usersBlogs && usersBlogs.length > 0) {
              const userBlog = usersBlogs[0];
              cfg.apiStatus = true;
              apiStatus.value = true;
              cfg.blogName = userBlog.blogName;
              blogName.value = userBlog.blogName;
              setJSONConf(props.apiType, cfg);
            } else {
              cfg.apiStatus = false;
              apiStatus.value = false;
              setJSONConf(props.apiType, cfg);
            }
          } catch (e2) {
            console.error(e2);
          }
          if (!apiStatus.value) {
            ElMessage.error(t("setting.blog.vali.error"));
          } else {
            ElMessage.success(t("main.opt.success"));
          }
          isLoading.value = false;
          logUtil.logInfo("Metaweblog\u901A\u7528Setting\u9A8C\u8BC1\u5B8C\u6BD5");
        };
        const saveConf = (hideTip) => {
          logUtil.logInfo("Metaweblog\u901A\u7528Setting\u4FDD\u5B58\u914D\u7F6E");
          const cfg = props.cfg;
          cfg.home = home2.value;
          cfg.username = username.value;
          cfg.password = password.value;
          cfg.apiUrl = apiUrl.value;
          cfg.apiStatus = apiStatus.value;
          cfg.blogName = blogName.value;
          setJSONConf(props.apiType, cfg);
          if (hideTip != true) {
            ElMessage.success(t("main.opt.success"));
          }
        };
        const initConf = () => {
          logUtil.logInfo("Metaweblog\u901A\u7528Setting\u914D\u7F6E\u521D\u59CB\u5316");
          let conf = getJSONConf(props.apiType);
          if (isEmptyObject(conf)) {
            conf = props.cfg;
          }
          if (conf) {
            logUtil.logInfo("get setting conf=>", conf);
            home2.value = conf.home;
            apiUrl.value = conf.apiUrl;
            username.value = conf.username;
            password.value = conf.password;
            apiStatus.value = conf.apiStatus;
            blogName.value = conf.blogName;
          }
        };
        onMounted(async () => {
          initConf();
        });
        return (_ctx, _cache) => {
          const _component_el_alert = resolveComponent("el-alert");
          const _component_el_input = resolveComponent("el-input");
          const _component_el_form_item = resolveComponent("el-form-item");
          const _component_el_button = resolveComponent("el-button");
          const _component_el_form = resolveComponent("el-form");
          return openBlock(), createBlock(_component_el_form, {
            "label-width": "120px"
          }, {
            default: withCtx(() => [createVNode(_component_el_alert, {
              class: "top-version-tip",
              title: apiTypeInfo.value + blogName.value,
              type: "info",
              closable: false
            }, null, 8, ["title"]), createVNode(_component_el_form_item, {
              label: _ctx.$t("setting.blog.url")
            }, {
              default: withCtx(() => [createVNode(_component_el_input, {
                modelValue: home2.value,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => home2.value = $event)
              }, null, 8, ["modelValue"])]),
              _: 1
            }, 8, ["label"]), createVNode(_component_el_form_item, {
              label: _ctx.$t("setting.blog.username")
            }, {
              default: withCtx(() => [createVNode(_component_el_input, {
                modelValue: username.value,
                "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => username.value = $event)
              }, null, 8, ["modelValue"])]),
              _: 1
            }, 8, ["label"]), createVNode(_component_el_form_item, {
              label: _ctx.$t("setting.blog.password")
            }, {
              default: withCtx(() => [createVNode(_component_el_input, {
                type: "password",
                modelValue: password.value,
                "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => password.value = $event),
                "show-password": ""
              }, null, 8, ["modelValue"])]),
              _: 1
            }, 8, ["label"]), createVNode(_component_el_form_item, {
              label: _ctx.$t("setting.blog.apiurl")
            }, {
              default: withCtx(() => [createVNode(_component_el_input, {
                modelValue: apiUrl.value,
                "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => apiUrl.value = $event)
              }, null, 8, ["modelValue"])]),
              _: 1
            }, 8, ["label"]), createVNode(_component_el_form_item, null, {
              default: withCtx(() => [createVNode(_component_el_button, {
                type: "primary",
                onClick: valiConf,
                loading: isLoading.value
              }, {
                default: withCtx(() => [createTextVNode(toDisplayString$1(isLoading.value ? _ctx.$t("setting.blog.vali.ing") : _ctx.$t("setting.blog.vali")), 1)]),
                _: 1
              }, 8, ["loading"]), !apiStatus.value ? (openBlock(), createBlock(_component_el_alert, {
                key: 0,
                title: _ctx.$t("setting.blog.vali.tip.metaweblog"),
                type: "warning",
                closable: false
              }, null, 8, ["title"])) : createCommentVNode("", true), apiStatus.value ? (openBlock(), createBlock(_component_el_alert, {
                key: 1,
                title: _ctx.$t("setting.blog.vali.ok.metaweblog"),
                type: "success",
                closable: false
              }, null, 8, ["title"])) : createCommentVNode("", true)]),
              _: 1
            }), createVNode(_component_el_form_item, null, {
              default: withCtx(() => [createVNode(_component_el_button, {
                type: "primary",
                onClick: saveConf
              }, {
                default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("setting.blog.save")), 1)]),
                _: 1
              }), createVNode(_component_el_button, null, {
                default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("setting.blog.cancel")), 1)]),
                _: 1
              })]),
              _: 1
            })]),
            _: 1
          });
        };
      }
    });
    const CNBLOGS_POSTID_KEY = "custom-cnblogs-post-id";
    const WORDPRESS_POSTID_KEY = "custom-wordpress-post-id";
    const CONFLUENCE_POSTID_KEY = "custom-conf-post-id";
    const JVUE_POSTID_KEY = "custom-jvue-post-id";
    const YUQUE_POSTID_KEY = "custom-yuque-post-id";
    const WECHAT_POSTID_KEY = "custom-wechat-post-id";
    const LIANDI_POSTID_KEY = "custom-liandi-post-id";
    const VUEPRESS_POSTID_KEY = "custom-vuepress-slug";
    const KMS_POSTID_KEY = "custom-kms-post-id";
    const POSTID_KEY_CONSTANTS = {
      CNBLOGS_POSTID_KEY,
      WORDPRESS_POSTID_KEY,
      CONFLUENCE_POSTID_KEY,
      JVUE_POSTID_KEY,
      YUQUE_POSTID_KEY,
      WECHAT_POSTID_KEY,
      LIANDI_POSTID_KEY,
      VUEPRESS_POSTID_KEY,
      KMS_POSTID_KEY
    };
    class JVueCfg extends MetaweblogCfg {
      constructor() {
        super("https://[your-jvue-site]", "https://[your-jvue-site]/xmlrpc", "", "");
        this.posidKey = POSTID_KEY_CONSTANTS.JVUE_POSTID_KEY;
        this.previewUrl = "/post/[postid].html";
        this.pageType = PageType.Markdown;
      }
    }
    const __default__$p = {
      name: "JVueSetting",
      components: {
        MetaweblogSetting: _sfc_main$q
      }
    };
    const _sfc_main$p = /* @__PURE__ */ defineComponent({
      ...__default__$p,
      setup(__props) {
        const apiType = ref(API_TYPE_CONSTANTS.API_TYPE_JVUE);
        const cfg = ref(new JVueCfg());
        return (_ctx, _cache) => {
          return openBlock(), createBlock(_sfc_main$q, {
            "api-type": apiType.value,
            cfg: cfg.value
          }, null, 8, ["api-type", "cfg"]);
        };
      }
    });
    function getUserAgent() {
      if (typeof navigator === "object" && "userAgent" in navigator) {
        return navigator.userAgent;
      }
      if (typeof browser$1 === "object" && "version" in browser$1) {
        return `Node.js/${browser$1.version.substr(1)} (${browser$1.platform}; ${browser$1.arch})`;
      }
      return "<environment undetectable>";
    }
    var beforeAfterHook = { exports: {} };
    var register_1 = register$1;
    function register$1(state, name, method2, options) {
      if (typeof method2 !== "function") {
        throw new Error("method for before hook must be a function");
      }
      if (!options) {
        options = {};
      }
      if (Array.isArray(name)) {
        return name.reverse().reduce(function(callback, name2) {
          return register$1.bind(null, state, name2, callback, options);
        }, method2)();
      }
      return Promise.resolve().then(function() {
        if (!state.registry[name]) {
          return method2(options);
        }
        return state.registry[name].reduce(function(method3, registered) {
          return registered.hook.bind(null, method3, options);
        }, method2)();
      });
    }
    var add = addHook$1;
    function addHook$1(state, kind, name, hook2) {
      var orig = hook2;
      if (!state.registry[name]) {
        state.registry[name] = [];
      }
      if (kind === "before") {
        hook2 = function(method2, options) {
          return Promise.resolve().then(orig.bind(null, options)).then(method2.bind(null, options));
        };
      }
      if (kind === "after") {
        hook2 = function(method2, options) {
          var result;
          return Promise.resolve().then(method2.bind(null, options)).then(function(result_) {
            result = result_;
            return orig(result, options);
          }).then(function() {
            return result;
          });
        };
      }
      if (kind === "error") {
        hook2 = function(method2, options) {
          return Promise.resolve().then(method2.bind(null, options)).catch(function(error2) {
            return orig(error2, options);
          });
        };
      }
      state.registry[name].push({
        hook: hook2,
        orig
      });
    }
    var remove = removeHook$1;
    function removeHook$1(state, name, method2) {
      if (!state.registry[name]) {
        return;
      }
      var index2 = state.registry[name].map(function(registered) {
        return registered.orig;
      }).indexOf(method2);
      if (index2 === -1) {
        return;
      }
      state.registry[name].splice(index2, 1);
    }
    var register = register_1;
    var addHook = add;
    var removeHook = remove;
    var bind = Function.bind;
    var bindable = bind.bind(bind);
    function bindApi(hook2, state, name) {
      var removeHookRef = bindable(removeHook, null).apply(null, name ? [state, name] : [state]);
      hook2.api = { remove: removeHookRef };
      hook2.remove = removeHookRef;
      ["before", "error", "after", "wrap"].forEach(function(kind) {
        var args = name ? [state, kind, name] : [state, kind];
        hook2[kind] = hook2.api[kind] = bindable(addHook, null).apply(null, args);
      });
    }
    function HookSingular() {
      var singularHookName = "h";
      var singularHookState = {
        registry: {}
      };
      var singularHook = register.bind(null, singularHookState, singularHookName);
      bindApi(singularHook, singularHookState, singularHookName);
      return singularHook;
    }
    function HookCollection() {
      var state = {
        registry: {}
      };
      var hook2 = register.bind(null, state);
      bindApi(hook2, state);
      return hook2;
    }
    var collectionHookDeprecationMessageDisplayed = false;
    function Hook() {
      if (!collectionHookDeprecationMessageDisplayed) {
        console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4');
        collectionHookDeprecationMessageDisplayed = true;
      }
      return HookCollection();
    }
    Hook.Singular = HookSingular.bind();
    Hook.Collection = HookCollection.bind();
    beforeAfterHook.exports = Hook;
    beforeAfterHook.exports.Hook = Hook;
    beforeAfterHook.exports.Singular = Hook.Singular;
    var Collection = beforeAfterHook.exports.Collection = Hook.Collection;
    /*!
     * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
     *
     * Copyright (c) 2014-2017, Jon Schlinkert.
     * Released under the MIT License.
     */
    function isObject(o2) {
      return Object.prototype.toString.call(o2) === "[object Object]";
    }
    function isPlainObject(o2) {
      var ctor, prot;
      if (isObject(o2) === false)
        return false;
      ctor = o2.constructor;
      if (ctor === void 0)
        return true;
      prot = ctor.prototype;
      if (isObject(prot) === false)
        return false;
      if (prot.hasOwnProperty("isPrototypeOf") === false) {
        return false;
      }
      return true;
    }
    function lowercaseKeys(object2) {
      if (!object2) {
        return {};
      }
      return Object.keys(object2).reduce((newObj, key) => {
        newObj[key.toLowerCase()] = object2[key];
        return newObj;
      }, {});
    }
    function mergeDeep(defaults, options) {
      const result = Object.assign({}, defaults);
      Object.keys(options).forEach((key) => {
        if (isPlainObject(options[key])) {
          if (!(key in defaults))
            Object.assign(result, { [key]: options[key] });
          else
            result[key] = mergeDeep(defaults[key], options[key]);
        } else {
          Object.assign(result, { [key]: options[key] });
        }
      });
      return result;
    }
    function removeUndefinedProperties(obj) {
      for (const key in obj) {
        if (obj[key] === void 0) {
          delete obj[key];
        }
      }
      return obj;
    }
    function merge(defaults, route, options) {
      if (typeof route === "string") {
        let [method2, url2] = route.split(" ");
        options = Object.assign(url2 ? { method: method2, url: url2 } : { url: method2 }, options);
      } else {
        options = Object.assign({}, route);
      }
      options.headers = lowercaseKeys(options.headers);
      removeUndefinedProperties(options);
      removeUndefinedProperties(options.headers);
      const mergedOptions = mergeDeep(defaults || {}, options);
      if (defaults && defaults.mediaType.previews.length) {
        mergedOptions.mediaType.previews = defaults.mediaType.previews.filter((preview) => !mergedOptions.mediaType.previews.includes(preview)).concat(mergedOptions.mediaType.previews);
      }
      mergedOptions.mediaType.previews = mergedOptions.mediaType.previews.map((preview) => preview.replace(/-preview/, ""));
      return mergedOptions;
    }
    function addQueryParameters(url2, parameters) {
      const separator = /\?/.test(url2) ? "&" : "?";
      const names2 = Object.keys(parameters);
      if (names2.length === 0) {
        return url2;
      }
      return url2 + separator + names2.map((name) => {
        if (name === "q") {
          return "q=" + parameters.q.split("+").map(encodeURIComponent).join("+");
        }
        return `${name}=${encodeURIComponent(parameters[name])}`;
      }).join("&");
    }
    const urlVariableRegex = /\{[^}]+\}/g;
    function removeNonChars(variableName) {
      return variableName.replace(/^\W+|\W+$/g, "").split(/,/);
    }
    function extractUrlVariableNames(url2) {
      const matches2 = url2.match(urlVariableRegex);
      if (!matches2) {
        return [];
      }
      return matches2.map(removeNonChars).reduce((a2, b2) => a2.concat(b2), []);
    }
    function omit(object2, keysToOmit) {
      return Object.keys(object2).filter((option) => !keysToOmit.includes(option)).reduce((obj, key) => {
        obj[key] = object2[key];
        return obj;
      }, {});
    }
    function encodeReserved(str2) {
      return str2.split(/(%[0-9A-Fa-f]{2})/g).map(function(part) {
        if (!/%[0-9A-Fa-f]/.test(part)) {
          part = encodeURI(part).replace(/%5B/g, "[").replace(/%5D/g, "]");
        }
        return part;
      }).join("");
    }
    function encodeUnreserved(str2) {
      return encodeURIComponent(str2).replace(/[!'()*]/g, function(c2) {
        return "%" + c2.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    function encodeValue(operator, value, key) {
      value = operator === "+" || operator === "#" ? encodeReserved(value) : encodeUnreserved(value);
      if (key) {
        return encodeUnreserved(key) + "=" + value;
      } else {
        return value;
      }
    }
    function isDefined(value) {
      return value !== void 0 && value !== null;
    }
    function isKeyOperator(operator) {
      return operator === ";" || operator === "&" || operator === "?";
    }
    function getValues(context, operator, key, modifier) {
      var value = context[key], result = [];
      if (isDefined(value) && value !== "") {
        if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
          value = value.toString();
          if (modifier && modifier !== "*") {
            value = value.substring(0, parseInt(modifier, 10));
          }
          result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : ""));
        } else {
          if (modifier === "*") {
            if (Array.isArray(value)) {
              value.filter(isDefined).forEach(function(value2) {
                result.push(encodeValue(operator, value2, isKeyOperator(operator) ? key : ""));
              });
            } else {
              Object.keys(value).forEach(function(k) {
                if (isDefined(value[k])) {
                  result.push(encodeValue(operator, value[k], k));
                }
              });
            }
          } else {
            const tmp = [];
            if (Array.isArray(value)) {
              value.filter(isDefined).forEach(function(value2) {
                tmp.push(encodeValue(operator, value2));
              });
            } else {
              Object.keys(value).forEach(function(k) {
                if (isDefined(value[k])) {
                  tmp.push(encodeUnreserved(k));
                  tmp.push(encodeValue(operator, value[k].toString()));
                }
              });
            }
            if (isKeyOperator(operator)) {
              result.push(encodeUnreserved(key) + "=" + tmp.join(","));
            } else if (tmp.length !== 0) {
              result.push(tmp.join(","));
            }
          }
        }
      } else {
        if (operator === ";") {
          if (isDefined(value)) {
            result.push(encodeUnreserved(key));
          }
        } else if (value === "" && (operator === "&" || operator === "?")) {
          result.push(encodeUnreserved(key) + "=");
        } else if (value === "") {
          result.push("");
        }
      }
      return result;
    }
    function parseUrl(template) {
      return {
        expand: expand.bind(null, template)
      };
    }
    function expand(template, context) {
      var operators = ["+", "#", ".", "/", ";", "?", "&"];
      return template.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function(_2, expression, literal) {
        if (expression) {
          let operator = "";
          const values = [];
          if (operators.indexOf(expression.charAt(0)) !== -1) {
            operator = expression.charAt(0);
            expression = expression.substr(1);
          }
          expression.split(/,/g).forEach(function(variable) {
            var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
            values.push(getValues(context, operator, tmp[1], tmp[2] || tmp[3]));
          });
          if (operator && operator !== "+") {
            var separator = ",";
            if (operator === "?") {
              separator = "&";
            } else if (operator !== "#") {
              separator = operator;
            }
            return (values.length !== 0 ? operator : "") + values.join(separator);
          } else {
            return values.join(",");
          }
        } else {
          return encodeReserved(literal);
        }
      });
    }
    function parse(options) {
      let method2 = options.method.toUpperCase();
      let url2 = (options.url || "/").replace(/:([a-z]\w+)/g, "{$1}");
      let headers = Object.assign({}, options.headers);
      let body;
      let parameters = omit(options, [
        "method",
        "baseUrl",
        "url",
        "headers",
        "request",
        "mediaType"
      ]);
      const urlVariableNames = extractUrlVariableNames(url2);
      url2 = parseUrl(url2).expand(parameters);
      if (!/^http/.test(url2)) {
        url2 = options.baseUrl + url2;
      }
      const omittedParameters = Object.keys(options).filter((option) => urlVariableNames.includes(option)).concat("baseUrl");
      const remainingParameters = omit(parameters, omittedParameters);
      const isBinaryRequest = /application\/octet-stream/i.test(headers.accept);
      if (!isBinaryRequest) {
        if (options.mediaType.format) {
          headers.accept = headers.accept.split(/,/).map((preview) => preview.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/, `application/vnd$1$2.${options.mediaType.format}`)).join(",");
        }
        if (options.mediaType.previews.length) {
          const previewsFromAcceptHeader = headers.accept.match(/[\w-]+(?=-preview)/g) || [];
          headers.accept = previewsFromAcceptHeader.concat(options.mediaType.previews).map((preview) => {
            const format2 = options.mediaType.format ? `.${options.mediaType.format}` : "+json";
            return `application/vnd.github.${preview}-preview${format2}`;
          }).join(",");
        }
      }
      if (["GET", "HEAD"].includes(method2)) {
        url2 = addQueryParameters(url2, remainingParameters);
      } else {
        if ("data" in remainingParameters) {
          body = remainingParameters.data;
        } else {
          if (Object.keys(remainingParameters).length) {
            body = remainingParameters;
          } else {
            headers["content-length"] = 0;
          }
        }
      }
      if (!headers["content-type"] && typeof body !== "undefined") {
        headers["content-type"] = "application/json; charset=utf-8";
      }
      if (["PATCH", "PUT"].includes(method2) && typeof body === "undefined") {
        body = "";
      }
      return Object.assign({ method: method2, url: url2, headers }, typeof body !== "undefined" ? { body } : null, options.request ? { request: options.request } : null);
    }
    function endpointWithDefaults(defaults, route, options) {
      return parse(merge(defaults, route, options));
    }
    function withDefaults$2(oldDefaults, newDefaults) {
      const DEFAULTS2 = merge(oldDefaults, newDefaults);
      const endpoint2 = endpointWithDefaults.bind(null, DEFAULTS2);
      return Object.assign(endpoint2, {
        DEFAULTS: DEFAULTS2,
        defaults: withDefaults$2.bind(null, DEFAULTS2),
        merge: merge.bind(null, DEFAULTS2),
        parse
      });
    }
    const VERSION$3 = "7.0.0";
    const userAgent = `octokit-endpoint.js/${VERSION$3} ${getUserAgent()}`;
    const DEFAULTS = {
      method: "GET",
      baseUrl: "https://api.github.com",
      headers: {
        accept: "application/vnd.github.v3+json",
        "user-agent": userAgent
      },
      mediaType: {
        format: "",
        previews: []
      }
    };
    const endpoint = withDefaults$2(null, DEFAULTS);
    var browserPonyfill = { exports: {} };
    (function(module2, exports2) {
      var global2 = typeof self !== "undefined" ? self : commonjsGlobal;
      var __self__ = function() {
        function F2() {
          this.fetch = false;
          this.DOMException = global2.DOMException;
        }
        F2.prototype = global2;
        return new F2();
      }();
      (function(self2) {
        (function(exports3) {
          var support = {
            searchParams: "URLSearchParams" in self2,
            iterable: "Symbol" in self2 && "iterator" in Symbol,
            blob: "FileReader" in self2 && "Blob" in self2 && function() {
              try {
                new Blob();
                return true;
              } catch (e2) {
                return false;
              }
            }(),
            formData: "FormData" in self2,
            arrayBuffer: "ArrayBuffer" in self2
          };
          function isDataView(obj) {
            return obj && DataView.prototype.isPrototypeOf(obj);
          }
          if (support.arrayBuffer) {
            var viewClasses = [
              "[object Int8Array]",
              "[object Uint8Array]",
              "[object Uint8ClampedArray]",
              "[object Int16Array]",
              "[object Uint16Array]",
              "[object Int32Array]",
              "[object Uint32Array]",
              "[object Float32Array]",
              "[object Float64Array]"
            ];
            var isArrayBufferView = ArrayBuffer.isView || function(obj) {
              return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
            };
          }
          function normalizeName(name) {
            if (typeof name !== "string") {
              name = String(name);
            }
            if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
              throw new TypeError("Invalid character in header field name");
            }
            return name.toLowerCase();
          }
          function normalizeValue(value) {
            if (typeof value !== "string") {
              value = String(value);
            }
            return value;
          }
          function iteratorFor(items) {
            var iterator = {
              next: function() {
                var value = items.shift();
                return { done: value === void 0, value };
              }
            };
            if (support.iterable) {
              iterator[Symbol.iterator] = function() {
                return iterator;
              };
            }
            return iterator;
          }
          function Headers2(headers) {
            this.map = {};
            if (headers instanceof Headers2) {
              headers.forEach(function(value, name) {
                this.append(name, value);
              }, this);
            } else if (Array.isArray(headers)) {
              headers.forEach(function(header) {
                this.append(header[0], header[1]);
              }, this);
            } else if (headers) {
              Object.getOwnPropertyNames(headers).forEach(function(name) {
                this.append(name, headers[name]);
              }, this);
            }
          }
          Headers2.prototype.append = function(name, value) {
            name = normalizeName(name);
            value = normalizeValue(value);
            var oldValue = this.map[name];
            this.map[name] = oldValue ? oldValue + ", " + value : value;
          };
          Headers2.prototype["delete"] = function(name) {
            delete this.map[normalizeName(name)];
          };
          Headers2.prototype.get = function(name) {
            name = normalizeName(name);
            return this.has(name) ? this.map[name] : null;
          };
          Headers2.prototype.has = function(name) {
            return this.map.hasOwnProperty(normalizeName(name));
          };
          Headers2.prototype.set = function(name, value) {
            this.map[normalizeName(name)] = normalizeValue(value);
          };
          Headers2.prototype.forEach = function(callback, thisArg) {
            for (var name in this.map) {
              if (this.map.hasOwnProperty(name)) {
                callback.call(thisArg, this.map[name], name, this);
              }
            }
          };
          Headers2.prototype.keys = function() {
            var items = [];
            this.forEach(function(value, name) {
              items.push(name);
            });
            return iteratorFor(items);
          };
          Headers2.prototype.values = function() {
            var items = [];
            this.forEach(function(value) {
              items.push(value);
            });
            return iteratorFor(items);
          };
          Headers2.prototype.entries = function() {
            var items = [];
            this.forEach(function(value, name) {
              items.push([name, value]);
            });
            return iteratorFor(items);
          };
          if (support.iterable) {
            Headers2.prototype[Symbol.iterator] = Headers2.prototype.entries;
          }
          function consumed(body) {
            if (body.bodyUsed) {
              return Promise.reject(new TypeError("Already read"));
            }
            body.bodyUsed = true;
          }
          function fileReaderReady(reader) {
            return new Promise(function(resolve2, reject) {
              reader.onload = function() {
                resolve2(reader.result);
              };
              reader.onerror = function() {
                reject(reader.error);
              };
            });
          }
          function readBlobAsArrayBuffer(blob) {
            var reader = new FileReader();
            var promise = fileReaderReady(reader);
            reader.readAsArrayBuffer(blob);
            return promise;
          }
          function readBlobAsText(blob) {
            var reader = new FileReader();
            var promise = fileReaderReady(reader);
            reader.readAsText(blob);
            return promise;
          }
          function readArrayBufferAsText(buf) {
            var view = new Uint8Array(buf);
            var chars = new Array(view.length);
            for (var i2 = 0; i2 < view.length; i2++) {
              chars[i2] = String.fromCharCode(view[i2]);
            }
            return chars.join("");
          }
          function bufferClone(buf) {
            if (buf.slice) {
              return buf.slice(0);
            } else {
              var view = new Uint8Array(buf.byteLength);
              view.set(new Uint8Array(buf));
              return view.buffer;
            }
          }
          function Body() {
            this.bodyUsed = false;
            this._initBody = function(body) {
              this._bodyInit = body;
              if (!body) {
                this._bodyText = "";
              } else if (typeof body === "string") {
                this._bodyText = body;
              } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
                this._bodyBlob = body;
              } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
                this._bodyFormData = body;
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this._bodyText = body.toString();
              } else if (support.arrayBuffer && support.blob && isDataView(body)) {
                this._bodyArrayBuffer = bufferClone(body.buffer);
                this._bodyInit = new Blob([this._bodyArrayBuffer]);
              } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
                this._bodyArrayBuffer = bufferClone(body);
              } else {
                this._bodyText = body = Object.prototype.toString.call(body);
              }
              if (!this.headers.get("content-type")) {
                if (typeof body === "string") {
                  this.headers.set("content-type", "text/plain;charset=UTF-8");
                } else if (this._bodyBlob && this._bodyBlob.type) {
                  this.headers.set("content-type", this._bodyBlob.type);
                } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                  this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
                }
              }
            };
            if (support.blob) {
              this.blob = function() {
                var rejected = consumed(this);
                if (rejected) {
                  return rejected;
                }
                if (this._bodyBlob) {
                  return Promise.resolve(this._bodyBlob);
                } else if (this._bodyArrayBuffer) {
                  return Promise.resolve(new Blob([this._bodyArrayBuffer]));
                } else if (this._bodyFormData) {
                  throw new Error("could not read FormData body as blob");
                } else {
                  return Promise.resolve(new Blob([this._bodyText]));
                }
              };
              this.arrayBuffer = function() {
                if (this._bodyArrayBuffer) {
                  return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
                } else {
                  return this.blob().then(readBlobAsArrayBuffer);
                }
              };
            }
            this.text = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return readBlobAsText(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as text");
              } else {
                return Promise.resolve(this._bodyText);
              }
            };
            if (support.formData) {
              this.formData = function() {
                return this.text().then(decode2);
              };
            }
            this.json = function() {
              return this.text().then(JSON.parse);
            };
            return this;
          }
          var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
          function normalizeMethod(method2) {
            var upcased = method2.toUpperCase();
            return methods.indexOf(upcased) > -1 ? upcased : method2;
          }
          function Request(input, options) {
            options = options || {};
            var body = options.body;
            if (input instanceof Request) {
              if (input.bodyUsed) {
                throw new TypeError("Already read");
              }
              this.url = input.url;
              this.credentials = input.credentials;
              if (!options.headers) {
                this.headers = new Headers2(input.headers);
              }
              this.method = input.method;
              this.mode = input.mode;
              this.signal = input.signal;
              if (!body && input._bodyInit != null) {
                body = input._bodyInit;
                input.bodyUsed = true;
              }
            } else {
              this.url = String(input);
            }
            this.credentials = options.credentials || this.credentials || "same-origin";
            if (options.headers || !this.headers) {
              this.headers = new Headers2(options.headers);
            }
            this.method = normalizeMethod(options.method || this.method || "GET");
            this.mode = options.mode || this.mode || null;
            this.signal = options.signal || this.signal;
            this.referrer = null;
            if ((this.method === "GET" || this.method === "HEAD") && body) {
              throw new TypeError("Body not allowed for GET or HEAD requests");
            }
            this._initBody(body);
          }
          Request.prototype.clone = function() {
            return new Request(this, { body: this._bodyInit });
          };
          function decode2(body) {
            var form = new FormData();
            body.trim().split("&").forEach(function(bytes) {
              if (bytes) {
                var split = bytes.split("=");
                var name = split.shift().replace(/\+/g, " ");
                var value = split.join("=").replace(/\+/g, " ");
                form.append(decodeURIComponent(name), decodeURIComponent(value));
              }
            });
            return form;
          }
          function parseHeaders(rawHeaders) {
            var headers = new Headers2();
            var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
            preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
              var parts = line.split(":");
              var key = parts.shift().trim();
              if (key) {
                var value = parts.join(":").trim();
                headers.append(key, value);
              }
            });
            return headers;
          }
          Body.call(Request.prototype);
          function Response(bodyInit, options) {
            if (!options) {
              options = {};
            }
            this.type = "default";
            this.status = options.status === void 0 ? 200 : options.status;
            this.ok = this.status >= 200 && this.status < 300;
            this.statusText = "statusText" in options ? options.statusText : "OK";
            this.headers = new Headers2(options.headers);
            this.url = options.url || "";
            this._initBody(bodyInit);
          }
          Body.call(Response.prototype);
          Response.prototype.clone = function() {
            return new Response(this._bodyInit, {
              status: this.status,
              statusText: this.statusText,
              headers: new Headers2(this.headers),
              url: this.url
            });
          };
          Response.error = function() {
            var response = new Response(null, { status: 0, statusText: "" });
            response.type = "error";
            return response;
          };
          var redirectStatuses = [301, 302, 303, 307, 308];
          Response.redirect = function(url2, status) {
            if (redirectStatuses.indexOf(status) === -1) {
              throw new RangeError("Invalid status code");
            }
            return new Response(null, { status, headers: { location: url2 } });
          };
          exports3.DOMException = self2.DOMException;
          try {
            new exports3.DOMException();
          } catch (err) {
            exports3.DOMException = function(message2, name) {
              this.message = message2;
              this.name = name;
              var error2 = Error(message2);
              this.stack = error2.stack;
            };
            exports3.DOMException.prototype = Object.create(Error.prototype);
            exports3.DOMException.prototype.constructor = exports3.DOMException;
          }
          function fetch2(input, init2) {
            return new Promise(function(resolve2, reject) {
              var request2 = new Request(input, init2);
              if (request2.signal && request2.signal.aborted) {
                return reject(new exports3.DOMException("Aborted", "AbortError"));
              }
              var xhr2 = new XMLHttpRequest();
              function abortXhr() {
                xhr2.abort();
              }
              xhr2.onload = function() {
                var options = {
                  status: xhr2.status,
                  statusText: xhr2.statusText,
                  headers: parseHeaders(xhr2.getAllResponseHeaders() || "")
                };
                options.url = "responseURL" in xhr2 ? xhr2.responseURL : options.headers.get("X-Request-URL");
                var body = "response" in xhr2 ? xhr2.response : xhr2.responseText;
                resolve2(new Response(body, options));
              };
              xhr2.onerror = function() {
                reject(new TypeError("Network request failed"));
              };
              xhr2.ontimeout = function() {
                reject(new TypeError("Network request failed"));
              };
              xhr2.onabort = function() {
                reject(new exports3.DOMException("Aborted", "AbortError"));
              };
              xhr2.open(request2.method, request2.url, true);
              if (request2.credentials === "include") {
                xhr2.withCredentials = true;
              } else if (request2.credentials === "omit") {
                xhr2.withCredentials = false;
              }
              if ("responseType" in xhr2 && support.blob) {
                xhr2.responseType = "blob";
              }
              request2.headers.forEach(function(value, name) {
                xhr2.setRequestHeader(name, value);
              });
              if (request2.signal) {
                request2.signal.addEventListener("abort", abortXhr);
                xhr2.onreadystatechange = function() {
                  if (xhr2.readyState === 4) {
                    request2.signal.removeEventListener("abort", abortXhr);
                  }
                };
              }
              xhr2.send(typeof request2._bodyInit === "undefined" ? null : request2._bodyInit);
            });
          }
          fetch2.polyfill = true;
          if (!self2.fetch) {
            self2.fetch = fetch2;
            self2.Headers = Headers2;
            self2.Request = Request;
            self2.Response = Response;
          }
          exports3.Headers = Headers2;
          exports3.Request = Request;
          exports3.Response = Response;
          exports3.fetch = fetch2;
          Object.defineProperty(exports3, "__esModule", { value: true });
          return exports3;
        })({});
      })(__self__);
      __self__.fetch.ponyfill = true;
      delete __self__.fetch.polyfill;
      var ctx = __self__;
      exports2 = ctx.fetch;
      exports2.default = ctx.fetch;
      exports2.fetch = ctx.fetch;
      exports2.Headers = ctx.Headers;
      exports2.Request = ctx.Request;
      exports2.Response = ctx.Response;
      module2.exports = exports2;
    })(browserPonyfill, browserPonyfill.exports);
    const nodeFetch = /* @__PURE__ */ getDefaultExportFromCjs(browserPonyfill.exports);
    class Deprecation extends Error {
      constructor(message2) {
        super(message2);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
        this.name = "Deprecation";
      }
    }
    var once$1 = { exports: {} };
    var wrappy_1 = wrappy$1;
    function wrappy$1(fn2, cb) {
      if (fn2 && cb)
        return wrappy$1(fn2)(cb);
      if (typeof fn2 !== "function")
        throw new TypeError("need wrapper function");
      Object.keys(fn2).forEach(function(k) {
        wrapper[k] = fn2[k];
      });
      return wrapper;
      function wrapper() {
        var args = new Array(arguments.length);
        for (var i2 = 0; i2 < args.length; i2++) {
          args[i2] = arguments[i2];
        }
        var ret = fn2.apply(this, args);
        var cb2 = args[args.length - 1];
        if (typeof ret === "function" && ret !== cb2) {
          Object.keys(cb2).forEach(function(k) {
            ret[k] = cb2[k];
          });
        }
        return ret;
      }
    }
    var wrappy = wrappy_1;
    once$1.exports = wrappy(once);
    once$1.exports.strict = wrappy(onceStrict);
    once.proto = once(function() {
      Object.defineProperty(Function.prototype, "once", {
        value: function() {
          return once(this);
        },
        configurable: true
      });
      Object.defineProperty(Function.prototype, "onceStrict", {
        value: function() {
          return onceStrict(this);
        },
        configurable: true
      });
    });
    function once(fn2) {
      var f2 = function() {
        if (f2.called)
          return f2.value;
        f2.called = true;
        return f2.value = fn2.apply(this, arguments);
      };
      f2.called = false;
      return f2;
    }
    function onceStrict(fn2) {
      var f2 = function() {
        if (f2.called)
          throw new Error(f2.onceError);
        f2.called = true;
        return f2.value = fn2.apply(this, arguments);
      };
      var name = fn2.name || "Function wrapped with `once`";
      f2.onceError = name + " shouldn't be called more than once";
      f2.called = false;
      return f2;
    }
    const logOnceCode = once$1.exports((deprecation) => console.warn(deprecation));
    const logOnceHeaders = once$1.exports((deprecation) => console.warn(deprecation));
    class RequestError extends Error {
      constructor(message2, statusCode, options) {
        super(message2);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
        this.name = "HttpError";
        this.status = statusCode;
        let headers;
        if ("headers" in options && typeof options.headers !== "undefined") {
          headers = options.headers;
        }
        if ("response" in options) {
          this.response = options.response;
          headers = options.response.headers;
        }
        const requestCopy = Object.assign({}, options.request);
        if (options.request.headers.authorization) {
          requestCopy.headers = Object.assign({}, options.request.headers, {
            authorization: options.request.headers.authorization.replace(/ .*$/, " [REDACTED]")
          });
        }
        requestCopy.url = requestCopy.url.replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]").replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");
        this.request = requestCopy;
        Object.defineProperty(this, "code", {
          get() {
            logOnceCode(new Deprecation("[@octokit/request-error] `error.code` is deprecated, use `error.status`."));
            return statusCode;
          }
        });
        Object.defineProperty(this, "headers", {
          get() {
            logOnceHeaders(new Deprecation("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`."));
            return headers || {};
          }
        });
      }
    }
    const VERSION$2 = "6.2.0";
    function getBufferResponse(response) {
      return response.arrayBuffer();
    }
    function fetchWrapper(requestOptions) {
      const log = requestOptions.request && requestOptions.request.log ? requestOptions.request.log : console;
      if (isPlainObject(requestOptions.body) || Array.isArray(requestOptions.body)) {
        requestOptions.body = JSON.stringify(requestOptions.body);
      }
      let headers = {};
      let status;
      let url2;
      const fetch2 = requestOptions.request && requestOptions.request.fetch || globalThis.fetch || nodeFetch;
      return fetch2(requestOptions.url, Object.assign(
        {
          method: requestOptions.method,
          body: requestOptions.body,
          headers: requestOptions.headers,
          redirect: requestOptions.redirect
        },
        requestOptions.request
      )).then(async (response) => {
        url2 = response.url;
        status = response.status;
        for (const keyAndValue of response.headers) {
          headers[keyAndValue[0]] = keyAndValue[1];
        }
        if ("deprecation" in headers) {
          const matches2 = headers.link && headers.link.match(/<([^>]+)>; rel="deprecation"/);
          const deprecationLink = matches2 && matches2.pop();
          log.warn(`[@octokit/request] "${requestOptions.method} ${requestOptions.url}" is deprecated. It is scheduled to be removed on ${headers.sunset}${deprecationLink ? `. See ${deprecationLink}` : ""}`);
        }
        if (status === 204 || status === 205) {
          return;
        }
        if (requestOptions.method === "HEAD") {
          if (status < 400) {
            return;
          }
          throw new RequestError(response.statusText, status, {
            response: {
              url: url2,
              status,
              headers,
              data: void 0
            },
            request: requestOptions
          });
        }
        if (status === 304) {
          throw new RequestError("Not modified", status, {
            response: {
              url: url2,
              status,
              headers,
              data: await getResponseData(response)
            },
            request: requestOptions
          });
        }
        if (status >= 400) {
          const data = await getResponseData(response);
          const error2 = new RequestError(toErrorMessage(data), status, {
            response: {
              url: url2,
              status,
              headers,
              data
            },
            request: requestOptions
          });
          throw error2;
        }
        return getResponseData(response);
      }).then((data) => {
        return {
          status,
          url: url2,
          headers,
          data
        };
      }).catch((error2) => {
        if (error2 instanceof RequestError)
          throw error2;
        else if (error2.name === "AbortError")
          throw error2;
        throw new RequestError(error2.message, 500, {
          request: requestOptions
        });
      });
    }
    async function getResponseData(response) {
      const contentType = response.headers.get("content-type");
      if (/application\/json/.test(contentType)) {
        return response.json();
      }
      if (!contentType || /^text\/|charset=utf-8$/.test(contentType)) {
        return response.text();
      }
      return getBufferResponse(response);
    }
    function toErrorMessage(data) {
      if (typeof data === "string")
        return data;
      if ("message" in data) {
        if (Array.isArray(data.errors)) {
          return `${data.message}: ${data.errors.map(JSON.stringify).join(", ")}`;
        }
        return data.message;
      }
      return `Unknown error: ${JSON.stringify(data)}`;
    }
    function withDefaults$1(oldEndpoint, newDefaults) {
      const endpoint2 = oldEndpoint.defaults(newDefaults);
      const newApi = function(route, parameters) {
        const endpointOptions = endpoint2.merge(route, parameters);
        if (!endpointOptions.request || !endpointOptions.request.hook) {
          return fetchWrapper(endpoint2.parse(endpointOptions));
        }
        const request2 = (route2, parameters2) => {
          return fetchWrapper(endpoint2.parse(endpoint2.merge(route2, parameters2)));
        };
        Object.assign(request2, {
          endpoint: endpoint2,
          defaults: withDefaults$1.bind(null, endpoint2)
        });
        return endpointOptions.request.hook(request2, endpointOptions);
      };
      return Object.assign(newApi, {
        endpoint: endpoint2,
        defaults: withDefaults$1.bind(null, endpoint2)
      });
    }
    const request = withDefaults$1(endpoint, {
      headers: {
        "user-agent": `octokit-request.js/${VERSION$2} ${getUserAgent()}`
      }
    });
    const VERSION$1 = "5.0.0";
    function _buildMessageForResponseErrors(data) {
      return `Request failed due to following response errors:
` + data.errors.map((e2) => ` - ${e2.message}`).join("\n");
    }
    class GraphqlResponseError extends Error {
      constructor(request2, headers, response) {
        super(_buildMessageForResponseErrors(response));
        this.request = request2;
        this.headers = headers;
        this.response = response;
        this.name = "GraphqlResponseError";
        this.errors = response.errors;
        this.data = response.data;
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
      }
    }
    const NON_VARIABLE_OPTIONS = [
      "method",
      "baseUrl",
      "url",
      "headers",
      "request",
      "query",
      "mediaType"
    ];
    const FORBIDDEN_VARIABLE_OPTIONS = ["query", "method", "url"];
    const GHES_V3_SUFFIX_REGEX = /\/api\/v3\/?$/;
    function graphql(request2, query, options) {
      if (options) {
        if (typeof query === "string" && "query" in options) {
          return Promise.reject(new Error(`[@octokit/graphql] "query" cannot be used as variable name`));
        }
        for (const key in options) {
          if (!FORBIDDEN_VARIABLE_OPTIONS.includes(key))
            continue;
          return Promise.reject(new Error(`[@octokit/graphql] "${key}" cannot be used as variable name`));
        }
      }
      const parsedOptions = typeof query === "string" ? Object.assign({ query }, options) : query;
      const requestOptions = Object.keys(parsedOptions).reduce((result, key) => {
        if (NON_VARIABLE_OPTIONS.includes(key)) {
          result[key] = parsedOptions[key];
          return result;
        }
        if (!result.variables) {
          result.variables = {};
        }
        result.variables[key] = parsedOptions[key];
        return result;
      }, {});
      const baseUrl = parsedOptions.baseUrl || request2.endpoint.DEFAULTS.baseUrl;
      if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {
        requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, "/api/graphql");
      }
      return request2(requestOptions).then((response) => {
        if (response.data.errors) {
          const headers = {};
          for (const key of Object.keys(response.headers)) {
            headers[key] = response.headers[key];
          }
          throw new GraphqlResponseError(requestOptions, headers, response.data);
        }
        return response.data.data;
      });
    }
    function withDefaults(request$12, newDefaults) {
      const newRequest = request$12.defaults(newDefaults);
      const newApi = (query, options) => {
        return graphql(newRequest, query, options);
      };
      return Object.assign(newApi, {
        defaults: withDefaults.bind(null, newRequest),
        endpoint: request.endpoint
      });
    }
    withDefaults(request, {
      headers: {
        "user-agent": `octokit-graphql.js/${VERSION$1} ${getUserAgent()}`
      },
      method: "POST",
      url: "/graphql"
    });
    function withCustomRequest(customRequest) {
      return withDefaults(customRequest, {
        method: "POST",
        url: "/graphql"
      });
    }
    const REGEX_IS_INSTALLATION_LEGACY = /^v1\./;
    const REGEX_IS_INSTALLATION = /^ghs_/;
    const REGEX_IS_USER_TO_SERVER = /^ghu_/;
    async function auth(token) {
      const isApp = token.split(/\./).length === 3;
      const isInstallation = REGEX_IS_INSTALLATION_LEGACY.test(token) || REGEX_IS_INSTALLATION.test(token);
      const isUserToServer = REGEX_IS_USER_TO_SERVER.test(token);
      const tokenType = isApp ? "app" : isInstallation ? "installation" : isUserToServer ? "user-to-server" : "oauth";
      return {
        type: "token",
        token,
        tokenType
      };
    }
    function withAuthorizationPrefix(token) {
      if (token.split(/\./).length === 3) {
        return `bearer ${token}`;
      }
      return `token ${token}`;
    }
    async function hook(token, request2, route, parameters) {
      const endpoint2 = request2.endpoint.merge(route, parameters);
      endpoint2.headers.authorization = withAuthorizationPrefix(token);
      return request2(endpoint2);
    }
    const createTokenAuth = function createTokenAuth2(token) {
      if (!token) {
        throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");
      }
      if (typeof token !== "string") {
        throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");
      }
      token = token.replace(/^(token|bearer) +/i, "");
      return Object.assign(auth.bind(null, token), {
        hook: hook.bind(null, token)
      });
    };
    const VERSION = "4.0.4";
    class Octokit {
      constructor(options = {}) {
        const hook2 = new Collection();
        const requestDefaults = {
          baseUrl: request.endpoint.DEFAULTS.baseUrl,
          headers: {},
          request: Object.assign({}, options.request, {
            hook: hook2.bind(null, "request")
          }),
          mediaType: {
            previews: [],
            format: ""
          }
        };
        requestDefaults.headers["user-agent"] = [
          options.userAgent,
          `octokit-core.js/${VERSION} ${getUserAgent()}`
        ].filter(Boolean).join(" ");
        if (options.baseUrl) {
          requestDefaults.baseUrl = options.baseUrl;
        }
        if (options.previews) {
          requestDefaults.mediaType.previews = options.previews;
        }
        if (options.timeZone) {
          requestDefaults.headers["time-zone"] = options.timeZone;
        }
        this.request = request.defaults(requestDefaults);
        this.graphql = withCustomRequest(this.request).defaults(requestDefaults);
        this.log = Object.assign({
          debug: () => {
          },
          info: () => {
          },
          warn: console.warn.bind(console),
          error: console.error.bind(console)
        }, options.log);
        this.hook = hook2;
        if (!options.authStrategy) {
          if (!options.auth) {
            this.auth = async () => ({
              type: "unauthenticated"
            });
          } else {
            const auth2 = createTokenAuth(options.auth);
            hook2.wrap("request", auth2.hook);
            this.auth = auth2;
          }
        } else {
          const { authStrategy, ...otherOptions } = options;
          const auth2 = authStrategy(Object.assign({
            request: this.request,
            log: this.log,
            octokit: this,
            octokitOptions: otherOptions
          }, options.auth));
          hook2.wrap("request", auth2.hook);
          this.auth = auth2;
        }
        const classConstructor = this.constructor;
        classConstructor.plugins.forEach((plugin) => {
          Object.assign(this, plugin(this, options));
        });
      }
      static defaults(defaults) {
        const OctokitWithDefaults = class extends this {
          constructor(...args) {
            const options = args[0] || {};
            if (typeof defaults === "function") {
              super(defaults(options));
              return;
            }
            super(Object.assign({}, defaults, options, options.userAgent && defaults.userAgent ? {
              userAgent: `${options.userAgent} ${defaults.userAgent}`
            } : null));
          }
        };
        return OctokitWithDefaults;
      }
      static plugin(...newPlugins) {
        var _a2;
        const currentPlugins = this.plugins;
        const NewOctokit = (_a2 = class extends this {
        }, _a2.plugins = currentPlugins.concat(newPlugins.filter((plugin) => !currentPlugins.includes(plugin))), _a2);
        return NewOctokit;
      }
    }
    Octokit.VERSION = VERSION;
    Octokit.plugins = [];
    class VuepressApiV1 {
      constructor(vuepressCfg, octokit) {
        __publicField(this, "vuepressCfg", {});
        __publicField(this, "octokit", {});
        this.vuepressCfg = vuepressCfg;
        this.octokit = octokit;
      }
      async getPageSha(docPath) {
        let sha;
        const data = await this.getPageData(docPath);
        if (data) {
          sha = data.sha;
        }
        return sha;
      }
      async getPageData(docPath) {
        let data;
        let res;
        try {
          const route = "GET /repos/" + this.vuepressCfg.githubUser + "/" + this.vuepressCfg.githubRepo + "/contents/" + docPath;
          logUtil.logInfo("getPage route=>", route);
          res = await this.octokit.request(route, {
            owner: this.vuepressCfg.githubUser,
            repo: this.vuepressCfg.githubRepo,
            path: docPath
          });
          logUtil.logInfo("getPage res=>", res);
        } catch (e2) {
          logUtil.logError("getPage error=>", e2);
        }
        if (res) {
          data = res.data;
        }
        return data;
      }
      async createOrUpdatePage(docPath, mdContent, sha) {
        let res;
        try {
          const base64 = gBase64.toBase64(mdContent);
          const route = "PUT /repos/" + this.vuepressCfg.githubUser + "/" + this.vuepressCfg.githubRepo + "/contents/" + docPath;
          let options = {
            owner: this.vuepressCfg.githubUser,
            repo: this.vuepressCfg.githubRepo,
            path: docPath,
            message: this.vuepressCfg.defaultMsg,
            committer: {
              name: this.vuepressCfg.author,
              email: this.vuepressCfg.email
            },
            content: base64
          };
          if (sha) {
            Object.assign(options, {
              sha
            });
          }
          res = await this.octokit.request(route, options);
          logUtil.logInfo("createOrUpdatePage res=>", res);
        } catch (e2) {
          logUtil.logError("createOrUpdatePage error=>", e2);
        }
        return res;
      }
      async deletePage(docPath, sha) {
        let res;
        try {
          const route = "DELETE /repos/" + this.vuepressCfg.githubUser + "/" + this.vuepressCfg.githubRepo + "/contents/" + docPath;
          let options = {
            owner: this.vuepressCfg.githubUser,
            repo: this.vuepressCfg.githubRepo,
            path: docPath,
            message: this.vuepressCfg.defaultMsg,
            committer: {
              name: this.vuepressCfg.author,
              email: this.vuepressCfg.email
            },
            sha
          };
          res = await this.octokit.request(route, options);
          logUtil.logInfo("deletePage res=>", res);
        } catch (e2) {
          logUtil.logError("deletePage error=>", e2);
        }
        return res;
      }
    }
    async function publishPage(vuepressCfg, docPath, mdContent) {
      const octokit = new Octokit({
        auth: vuepressCfg.githubToken
      });
      const v1 = new VuepressApiV1(vuepressCfg, octokit);
      const sha = void 0;
      let res;
      res = await v1.createOrUpdatePage(docPath, mdContent, sha);
      logUtil.logInfo("Vuepress V1 publishPage,res=>", res);
      return res;
    }
    async function deletePage(vuepressCfg, docPath) {
      const octokit = new Octokit({
        auth: vuepressCfg.githubToken
      });
      const v1 = new VuepressApiV1(vuepressCfg, octokit);
      const sha = await v1.getPageSha(docPath);
      let res;
      res = await v1.deletePage(docPath, sha);
      logUtil.logInfo("Vuepress V1 deletePage,res=>", res);
      return res;
    }
    async function getPageTreeNode(vuepressCfg, docPath) {
      const octokit = new Octokit({
        auth: vuepressCfg.githubToken
      });
      const v1 = new VuepressApiV1(vuepressCfg, octokit);
      const data = await v1.getPageData(docPath);
      let treeNode = [];
      if (data && data.length > 0) {
        for (let i2 = 0; i2 < data.length; i2++) {
          const item = data[i2];
          if (item.name.indexOf(".vuepress") > -1) {
            continue;
          }
          if (item.name.indexOf("@pages") > -1) {
            continue;
          }
          if (item.name.indexOf("_posts") > -1) {
            continue;
          }
          let node = {
            value: item.path,
            label: item.name,
            isLeaf: item.name.indexOf(".md") > -1
          };
          treeNode.push(node);
        }
        logUtil.logInfo("getPageTreeNode,data=>", data);
      }
      return treeNode;
    }
    class VuepressCfg {
      constructor(githubUser, githubRepo, githubToken, defaultBranch, defaultPath, defaultMsg, author, email) {
        __publicField(this, "posidKey", "");
        this.githubUser = githubUser;
        this.githubRepo = githubRepo;
        this.githubToken = githubToken;
        this.defaultBranch = defaultBranch;
        this.defaultPath = defaultPath;
        this.defaultMsg = defaultMsg;
        this.author = author;
        this.email = email;
        this.githubUser = githubUser;
        this.githubRepo = githubRepo;
        this.githubToken = githubToken;
        this.defaultBranch = defaultBranch;
        this.defaultPath = defaultPath;
        this.defaultMsg = defaultMsg;
        this.author = author;
        this.email = email;
        this.posidKey = POSTID_KEY_CONSTANTS.VUEPRESS_POSTID_KEY;
      }
    }
    const API_STATUS_VUEPRESS = "vuepress-status";
    const API_STATUS_CNBLPGS = "cnblogs-status";
    const API_STATUS_WORDPRESS = "wordpress-status";
    const API_STATUS_CONFLUENCE = "confluence-status";
    const API_STATUS_JVUE = "jvue-status";
    const API_STATUS_YUQUE = "yuque-status";
    const API_STATUS_WECHAT = "wechat-status";
    const API_STATUS_LIANDI = "liandi-status";
    const API_STATUS_CONSTANTS = {
      API_STATUS_VUEPRESS,
      API_STATUS_CNBLPGS,
      API_STATUS_WORDPRESS,
      API_STATUS_CONFLUENCE,
      API_STATUS_JVUE,
      API_STATUS_YUQUE,
      API_STATUS_WECHAT,
      API_STATUS_LIANDI
    };
    const _hoisted_1$6 = {
      href: "https://github.com/settings/tokens/new",
      target: "_blank"
    };
    const _hoisted_2$2 = ["href"];
    const __default__$o = {
      name: "VuepressSetting"
    };
    const _sfc_main$o = /* @__PURE__ */ defineComponent({
      ...__default__$o,
      setup(__props) {
        const {
          t
        } = useI18n_1();
        const isLoading = ref(false);
        const apiStatus = ref(false);
        const autoDeleteTest = ref(true);
        const formSize = ref("default");
        const formRef = ref();
        const formData = reactive({
          githubUser: "",
          githubRepo: "",
          githubToken: "",
          defaultBranch: "main",
          defaultPath: "docs/_posts/",
          msg: "auto published by sy-post-publisher",
          author: "terwer",
          email: "youweics@163.com",
          previewUrl: "#preview"
        });
        const rules2 = reactive({
          githubUser: [{
            required: true,
            message: () => t("form.validate.name.required")
          }],
          githubRepo: [{
            required: true,
            message: () => t("form.validate.name.required")
          }],
          githubToken: [{
            required: true,
            message: () => t("form.validate.name.required")
          }],
          defaultBranch: [{
            required: true,
            message: () => t("form.validate.name.required")
          }],
          defaultPath: [{
            required: true,
            message: () => t("form.validate.name.required")
          }],
          msg: [{
            required: true,
            message: () => t("form.validate.name.required")
          }],
          author: [{
            required: true,
            message: () => t("form.validate.name.required")
          }],
          email: [{
            required: true,
            message: () => t("form.validate.name.required")
          }]
        });
        const testOnChange = (val) => {
          autoDeleteTest.value = val;
        };
        const submitForm = async (formEl) => {
          if (!formEl)
            return;
          const result = await formEl.validate((valid, fields) => {
            if (valid) {
              logUtil.logInfo("\u6821\u9A8C\u6210\u529F");
            } else {
              logUtil.logError(t("main.opt.failure"), fields);
              return;
            }
          });
          if (!result) {
            return;
          }
          const vuepressCfg = new VuepressCfg(formData.githubUser, formData.githubRepo, formData.githubToken, formData.defaultBranch, formData.defaultPath, formData.msg, formData.author, formData.email);
          setJSONConf(API_TYPE_CONSTANTS.API_TYPE_VUEPRESS, vuepressCfg);
          ElMessage.success(t("main.opt.success"));
        };
        const valiConf = async () => {
          isLoading.value = true;
          const vuepressCfg = new VuepressCfg(formData.githubUser, formData.githubRepo, formData.githubToken, formData.defaultBranch, formData.defaultPath, formData.msg, formData.author, formData.email);
          const testFile = "test.md";
          const docPath = formData.defaultPath + testFile;
          const mdContent = "Hello World!" + formatIsoToZhDate(new Date().toISOString(), true);
          const res = await publishPage(vuepressCfg, docPath, mdContent);
          isLoading.value = false;
          if (!res) {
            apiStatus.value = false;
            setBooleanConf(API_STATUS_CONSTANTS.API_STATUS_VUEPRESS, apiStatus.value);
            ElMessage.error(t("main.opt.failure"));
            return;
          }
          if (autoDeleteTest.value) {
            await deletePage(vuepressCfg, docPath);
          }
          apiStatus.value = true;
          setBooleanConf(API_STATUS_CONSTANTS.API_STATUS_VUEPRESS, apiStatus.value);
          formData.previewUrl = "https://github.com/" + formData.githubUser + "/" + formData.githubRepo + "/blob/" + formData.defaultBranch + "/" + formData.defaultPath + testFile;
          ElMessage.success(t("main.opt.success"));
        };
        const resetForm = (formEl) => {
          if (!formEl)
            return;
          formEl.resetFields();
        };
        const initConf = () => {
          logUtil.logInfo("Vuepress\u914D\u7F6E\u521D\u59CB\u5316");
          const conf = getJSONConf(API_TYPE_CONSTANTS.API_TYPE_VUEPRESS);
          if (conf) {
            logUtil.logInfo("vuepress conf=>", conf);
            formData.githubUser = conf.githubUser;
            formData.githubRepo = conf.githubRepo;
            formData.githubToken = conf.githubToken;
            formData.defaultBranch = conf.defaultBranch;
            formData.defaultPath = conf.defaultPath;
            formData.msg = conf.defaultMsg;
            formData.author = conf.author;
            formData.email = conf.email;
          }
          apiStatus.value = getBooleanConf(API_STATUS_CONSTANTS.API_STATUS_VUEPRESS);
        };
        onBeforeMount(async () => {
          initConf();
        });
        return (_ctx, _cache) => {
          const _component_el_input = resolveComponent("el-input");
          const _component_el_form_item = resolveComponent("el-form-item");
          const _component_el_switch = resolveComponent("el-switch");
          const _component_el_button = resolveComponent("el-button");
          const _component_el_alert = resolveComponent("el-alert");
          const _component_el_form = resolveComponent("el-form");
          return openBlock(), createBlock(_component_el_form, {
            "label-width": "120px",
            ref_key: "formRef",
            ref: formRef,
            model: formData,
            rules: rules2,
            size: formSize.value,
            "status-icon": ""
          }, {
            default: withCtx(() => [createVNode(_component_el_form_item, {
              label: _ctx.$t("setting.blog.type.vuepress.github.user"),
              prop: "githubUser"
            }, {
              default: withCtx(() => [createVNode(_component_el_input, {
                modelValue: formData.githubUser,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => formData.githubUser = $event),
                placeholder: _ctx.$t("setting.blog.type.vuepress.github.user.tip")
              }, null, 8, ["modelValue", "placeholder"])]),
              _: 1
            }, 8, ["label"]), createVNode(_component_el_form_item, {
              label: _ctx.$t("setting.blog.type.vuepress.github.repo"),
              prop: "githubRepo"
            }, {
              default: withCtx(() => [createVNode(_component_el_input, {
                modelValue: formData.githubRepo,
                "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => formData.githubRepo = $event),
                placeholder: _ctx.$t("setting.blog.type.vuepress.github.repo.tip")
              }, null, 8, ["modelValue", "placeholder"])]),
              _: 1
            }, 8, ["label"]), createVNode(_component_el_form_item, {
              label: _ctx.$t("setting.blog.type.vuepress.github.token"),
              prop: "githubToken"
            }, {
              default: withCtx(() => [createVNode(_component_el_input, {
                type: "password",
                modelValue: formData.githubToken,
                "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => formData.githubToken = $event),
                placeholder: _ctx.$t("setting.blog.type.vuepress.github.token.tip"),
                "show-password": ""
              }, null, 8, ["modelValue", "placeholder"]), createBaseVNode("a", _hoisted_1$6, toDisplayString$1(_ctx.$t("setting.blog.type.vuepress.github.token.gen")), 1)]),
              _: 1
            }, 8, ["label"]), createVNode(_component_el_form_item, {
              label: _ctx.$t("setting.blog.type.vuepress.github.default.path"),
              prop: "defaultPath"
            }, {
              default: withCtx(() => [createVNode(_component_el_input, {
                modelValue: formData.defaultPath,
                "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => formData.defaultPath = $event),
                placeholder: _ctx.$t("setting.blog.type.vuepress.github.default.path.tip")
              }, null, 8, ["modelValue", "placeholder"])]),
              _: 1
            }, 8, ["label"]), createVNode(_component_el_form_item, {
              label: _ctx.$t("setting.blog.type.vuepress.github.default.branch"),
              prop: "defaultBranch"
            }, {
              default: withCtx(() => [createVNode(_component_el_input, {
                modelValue: formData.defaultBranch,
                "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => formData.defaultBranch = $event),
                placeholder: _ctx.$t("setting.blog.type.vuepress.github.default.branch.tip")
              }, null, 8, ["modelValue", "placeholder"])]),
              _: 1
            }, 8, ["label"]), createVNode(_component_el_form_item, {
              label: _ctx.$t("setting.blog.type.vuepress.github.msg"),
              prop: "msg"
            }, {
              default: withCtx(() => [createVNode(_component_el_input, {
                modelValue: formData.msg,
                "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => formData.msg = $event),
                placeholder: _ctx.$t("setting.blog.type.vuepress.github.msg.tip")
              }, null, 8, ["modelValue", "placeholder"])]),
              _: 1
            }, 8, ["label"]), createVNode(_component_el_form_item, {
              label: _ctx.$t("setting.blog.type.vuepress.github.author"),
              prop: "author"
            }, {
              default: withCtx(() => [createVNode(_component_el_input, {
                modelValue: formData.author,
                "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => formData.author = $event),
                placeholder: _ctx.$t("setting.blog.type.vuepress.github.author.tip")
              }, null, 8, ["modelValue", "placeholder"])]),
              _: 1
            }, 8, ["label"]), createVNode(_component_el_form_item, {
              label: _ctx.$t("setting.blog.type.vuepress.github.email"),
              prop: "email"
            }, {
              default: withCtx(() => [createVNode(_component_el_input, {
                modelValue: formData.email,
                "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => formData.email = $event),
                placeholder: _ctx.$t("setting.blog.type.vuepress.github.email.tip")
              }, null, 8, ["modelValue", "placeholder"])]),
              _: 1
            }, 8, ["label"]), createVNode(_component_el_form_item, {
              label: _ctx.$t("form.validate.vuepress.auto.delete")
            }, {
              default: withCtx(() => [createVNode(_component_el_switch, {
                modelValue: autoDeleteTest.value,
                "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => autoDeleteTest.value = $event),
                onChange: testOnChange
              }, null, 8, ["modelValue"])]),
              _: 1
            }, 8, ["label"]), createVNode(_component_el_form_item, null, {
              default: withCtx(() => [createVNode(_component_el_button, {
                type: "primary",
                onClick: valiConf,
                loading: isLoading.value
              }, {
                default: withCtx(() => [createTextVNode(toDisplayString$1(isLoading.value ? _ctx.$t("setting.blog.vali.ing") : _ctx.$t("setting.blog.vali")), 1)]),
                _: 1
              }, 8, ["loading"]), !apiStatus.value ? (openBlock(), createBlock(_component_el_alert, {
                key: 0,
                title: _ctx.$t("setting.blog.vali.tip"),
                type: "warning",
                closable: false
              }, null, 8, ["title"])) : createCommentVNode("", true), apiStatus.value ? (openBlock(), createBlock(_component_el_alert, {
                key: 1,
                title: _ctx.$t("setting.blog.vali.ok"),
                type: "success",
                closable: false
              }, null, 8, ["title"])) : createCommentVNode("", true)]),
              _: 1
            }), createVNode(_component_el_form_item, null, {
              default: withCtx(() => [createVNode(_component_el_button, {
                type: "primary",
                onClick: _cache[9] || (_cache[9] = ($event) => submitForm(formRef.value))
              }, {
                default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("setting.blog.save")), 1)]),
                _: 1
              }), createVNode(_component_el_button, {
                onClick: _cache[10] || (_cache[10] = ($event) => resetForm(formRef.value))
              }, {
                default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("setting.blog.cancel")), 1)]),
                _: 1
              })]),
              _: 1
            }), createVNode(_component_el_form_item, null, {
              default: withCtx(() => [createBaseVNode("a", {
                href: formData.previewUrl,
                target: "_blank"
              }, toDisplayString$1(formData.previewUrl), 9, _hoisted_2$2)]),
              _: 1
            })]),
            _: 1
          }, 8, ["model", "rules", "size"]);
        };
      }
    });
    const VuepressSetting_vue_vue_type_style_index_0_scoped_10057320_lang = "";
    const _export_sfc = (sfc, props) => {
      const target = sfc.__vccOpts || sfc;
      for (const [key, val] of props) {
        target[key] = val;
      }
      return target;
    };
    const VuepressSetting = /* @__PURE__ */ _export_sfc(_sfc_main$o, [["__scopeId", "data-v-10057320"]]);
    class CnblogsCfg extends MetaweblogCfg {
      constructor() {
        super("https://www.cnblogs.com/[yourblog]", "https://rpc.cnblogs.com/metaweblog/[yourblog]", "", "");
        this.posidKey = POSTID_KEY_CONSTANTS.CNBLOGS_POSTID_KEY;
        this.previewUrl = "/p/[postid].html";
        this.pageType = PageType.Markdown;
      }
    }
    const __default__$n = {
      name: "CnblogsSetting",
      components: {
        MetaweblogSetting: _sfc_main$q
      }
    };
    const _sfc_main$n = /* @__PURE__ */ defineComponent({
      ...__default__$n,
      setup(__props) {
        const apiType = ref(API_TYPE_CONSTANTS.API_TYPE_CNBLOGS);
        const cnblogsCfg = new CnblogsCfg();
        const cfg = ref(cnblogsCfg);
        return (_ctx, _cache) => {
          return openBlock(), createBlock(_sfc_main$q, {
            "api-type": apiType.value,
            cfg: cfg.value
          }, null, 8, ["api-type", "cfg"]);
        };
      }
    });
    class ConfCfg extends MetaweblogCfg {
      constructor() {
        super("https://youweics.atlassian.net/wiki/spaces/[spaceKey]", "http://localhost:3000/api/xmlrpc", "", "");
        this.posidKey = POSTID_KEY_CONSTANTS.CONFLUENCE_POSTID_KEY;
        this.previewUrl = "pages/[postid]";
        this.pageType = PageType.Html;
      }
    }
    const __default__$m = {
      name: "ConfluenceSetting"
    };
    const _sfc_main$m = /* @__PURE__ */ defineComponent({
      ...__default__$m,
      setup(__props) {
        const apiType = ref(API_TYPE_CONSTANTS.API_TYPE_CONFLUENCE);
        const cfg = ref(new ConfCfg());
        return (_ctx, _cache) => {
          return openBlock(), createBlock(_sfc_main$q, {
            "api-type": apiType.value,
            cfg: cfg.value
          }, null, 8, ["api-type", "cfg"]);
        };
      }
    });
    class CommonblogCfg {
      constructor() {
        __publicField(this, "home");
        __publicField(this, "apiUrl");
        __publicField(this, "username");
        __publicField(this, "password");
        __publicField(this, "token");
        __publicField(this, "apiStatus");
        __publicField(this, "blogName");
        __publicField(this, "blogid");
        __publicField(this, "posidKey");
        __publicField(this, "previewUrl");
        __publicField(this, "pageType");
        __publicField(this, "tokenSettingUrl");
        this.home = "";
        this.apiUrl = "";
        this.username = "";
        this.password = "";
        this.token = "";
        this.apiStatus = false;
        this.blogName = "";
        this.blogid = "";
        this.posidKey = "";
        this.previewUrl = "";
        this.pageType = PageType.Markdown;
        this.tokenSettingUrl = "";
      }
    }
    const _hoisted_1$5 = ["href"];
    const _hoisted_2$1 = ["href"];
    const __default__$l = {
      name: "CommonBlogSetting"
    };
    const _sfc_main$l = /* @__PURE__ */ defineComponent({
      ...__default__$l,
      props: {
        isReload: {
          type: Boolean,
          default: false
        },
        apiType: {
          type: String,
          default: ""
        },
        cfg: {
          type: CommonblogCfg,
          default: null
        },
        usernameEnabled: {
          type: Boolean,
          default: false
        },
        passwordEnabled: {
          type: Boolean,
          default: false
        },
        tokenEnabled: {
          type: Boolean,
          default: false
        }
      },
      setup(__props) {
        const props = __props;
        const {
          t
        } = useI18n_1();
        const home2 = ref("");
        const apiUrl = ref("");
        const username = ref("");
        const password = ref("");
        const token = ref("");
        const isLoading = ref(false);
        const apiStatus = ref(false);
        const blogName = ref("");
        const tokenSettingUrl = ref("");
        const apiTypeInfo = ref(t("setting.blog.platform.support.common") + props.apiType + " ");
        const valiConf = async () => {
          isLoading.value = true;
          try {
            saveConf(true);
            const cfg = getJSONConf(props.apiType);
            const api = new API(props.apiType);
            const usersBlogs = await api.getUsersBlogs();
            if (usersBlogs && usersBlogs.length > 0) {
              const userBlog = usersBlogs[0];
              cfg.apiStatus = true;
              apiStatus.value = true;
              cfg.blogName = userBlog.blogName;
              blogName.value = userBlog.blogName;
              cfg.blogid = userBlog.blogid;
              setJSONConf(props.apiType, cfg);
            } else {
              cfg.apiStatus = false;
              apiStatus.value = false;
              setJSONConf(props.apiType, cfg);
            }
          } catch (e2) {
            console.error(e2);
          }
          if (!apiStatus.value) {
            ElMessage.error(t("setting.blog.vali.error"));
          } else {
            ElMessage.success(t("main.opt.success"));
          }
          isLoading.value = false;
          logUtil.logInfo("\u901A\u7528Setting\u9A8C\u8BC1\u5B8C\u6BD5");
        };
        const saveConf = (hideTip) => {
          logUtil.logInfo("Metaweblog\u901A\u7528Setting\u4FDD\u5B58\u914D\u7F6E");
          const cfg = props.cfg;
          cfg.home = home2.value;
          cfg.username = username.value;
          cfg.password = password.value;
          cfg.token = token.value;
          cfg.apiUrl = apiUrl.value;
          cfg.apiStatus = apiStatus.value;
          cfg.blogName = blogName.value;
          setJSONConf(props.apiType, cfg);
          if (hideTip != true) {
            ElMessage.success(t("main.opt.success"));
          }
        };
        const initConf = () => {
          logUtil.logInfo("\u901A\u7528Setting\u914D\u7F6E\u521D\u59CB\u5316");
          let conf = getJSONConf(props.apiType);
          if (isEmptyObject(conf)) {
            conf = props.cfg;
          }
          if (conf) {
            logUtil.logInfo("get setting conf=>", conf);
            home2.value = conf.home || "";
            apiUrl.value = conf.apiUrl || "";
            username.value = conf.username || "";
            password.value = conf.password || "";
            token.value = conf.token || "";
            apiStatus.value = conf.apiStatus || false;
            blogName.value = conf.blogName || "";
            tokenSettingUrl.value = conf.tokenSettingUrl || "";
          }
        };
        onMounted(async () => {
          initConf();
        });
        return (_ctx, _cache) => {
          const _component_el_alert = resolveComponent("el-alert");
          const _component_el_input = resolveComponent("el-input");
          const _component_el_form_item = resolveComponent("el-form-item");
          const _component_el_button = resolveComponent("el-button");
          const _component_el_form = resolveComponent("el-form");
          return openBlock(), createBlock(_component_el_form, {
            "label-width": "120px"
          }, {
            default: withCtx(() => [createVNode(_component_el_alert, {
              class: "top-version-tip",
              title: apiTypeInfo.value + blogName.value,
              type: "info",
              closable: false
            }, null, 8, ["title"]), createVNode(_component_el_form_item, {
              label: _ctx.$t("setting.common.home")
            }, {
              default: withCtx(() => [createVNode(_component_el_input, {
                modelValue: home2.value,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => home2.value = $event)
              }, null, 8, ["modelValue"])]),
              _: 1
            }, 8, ["label"]), props.usernameEnabled ? (openBlock(), createBlock(_component_el_form_item, {
              key: 0,
              label: _ctx.$t("setting.common.username")
            }, {
              default: withCtx(() => [createVNode(_component_el_input, {
                modelValue: username.value,
                "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => username.value = $event)
              }, null, 8, ["modelValue"])]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), props.passwordEnabled ? (openBlock(), createBlock(_component_el_form_item, {
              key: 1,
              label: _ctx.$t("setting.common.password")
            }, {
              default: withCtx(() => [createVNode(_component_el_input, {
                type: "password",
                modelValue: password.value,
                "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => password.value = $event),
                "show-password": ""
              }, null, 8, ["modelValue"]), createBaseVNode("a", {
                href: tokenSettingUrl.value,
                target: "_blank"
              }, toDisplayString$1(_ctx.$t("setting.common.username.gen")) + "\uFF1A" + toDisplayString$1(tokenSettingUrl.value), 9, _hoisted_1$5)]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), props.tokenEnabled ? (openBlock(), createBlock(_component_el_form_item, {
              key: 2,
              label: _ctx.$t("setting.common.token")
            }, {
              default: withCtx(() => [createVNode(_component_el_input, {
                type: "password",
                modelValue: token.value,
                "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => token.value = $event),
                "show-password": ""
              }, null, 8, ["modelValue"]), createBaseVNode("a", {
                href: tokenSettingUrl.value,
                target: "_blank"
              }, toDisplayString$1(_ctx.$t("setting.common.token.gen")) + "\uFF1A" + toDisplayString$1(tokenSettingUrl.value), 9, _hoisted_2$1)]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), createVNode(_component_el_form_item, {
              label: _ctx.$t("setting.common.apiurl")
            }, {
              default: withCtx(() => [createVNode(_component_el_input, {
                modelValue: apiUrl.value,
                "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => apiUrl.value = $event)
              }, null, 8, ["modelValue"])]),
              _: 1
            }, 8, ["label"]), createVNode(_component_el_form_item, null, {
              default: withCtx(() => [createVNode(_component_el_button, {
                type: "primary",
                onClick: valiConf,
                loading: isLoading.value
              }, {
                default: withCtx(() => [createTextVNode(toDisplayString$1(isLoading.value ? _ctx.$t("setting.blog.vali.ing") : _ctx.$t("setting.blog.vali")), 1)]),
                _: 1
              }, 8, ["loading"]), !apiStatus.value ? (openBlock(), createBlock(_component_el_alert, {
                key: 0,
                title: _ctx.$t("setting.blog.vali.tip.metaweblog"),
                type: "warning",
                closable: false
              }, null, 8, ["title"])) : createCommentVNode("", true), apiStatus.value ? (openBlock(), createBlock(_component_el_alert, {
                key: 1,
                title: _ctx.$t("setting.blog.vali.ok.metaweblog"),
                type: "success",
                closable: false
              }, null, 8, ["title"])) : createCommentVNode("", true)]),
              _: 1
            }), createVNode(_component_el_form_item, null, {
              default: withCtx(() => [createVNode(_component_el_button, {
                type: "primary",
                onClick: saveConf
              }, {
                default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("setting.blog.save")), 1)]),
                _: 1
              }), createVNode(_component_el_button, null, {
                default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("setting.blog.cancel")), 1)]),
                _: 1
              })]),
              _: 1
            })]),
            _: 1
          });
        };
      }
    });
    class LiandiCfg extends CommonblogCfg {
      constructor() {
        super();
        this.home = "https://ld246.com/";
        this.apiUrl = "https://ld246.com/api/v2";
        this.tokenSettingUrl = "https://ld246.com/settings/account";
        this.posidKey = POSTID_KEY_CONSTANTS.LIANDI_POSTID_KEY;
        this.previewUrl = "/article/[postid]";
        this.pageType = PageType.Markdown;
      }
    }
    const __default__$k = {
      name: "LiandiSetting",
      components: {
        CommonBlogSetting: _sfc_main$l
      }
    };
    const _sfc_main$k = /* @__PURE__ */ defineComponent({
      ...__default__$k,
      setup(__props) {
        const apiType = ref(API_TYPE_CONSTANTS.API_TYPE_LIANDI);
        const liandiCfg = new LiandiCfg();
        const cfg = ref(liandiCfg);
        return (_ctx, _cache) => {
          return openBlock(), createBlock(_sfc_main$l, {
            "api-type": apiType.value,
            "username-enabled": true,
            "token-enabled": true,
            cfg: cfg.value
          }, null, 8, ["api-type", "cfg"]);
        };
      }
    });
    class YuqueCfg extends CommonblogCfg {
      constructor() {
        super();
        this.home = "https://www.yuque.com/";
        this.apiUrl = "https://www.yuque.com/api/v2";
        this.tokenSettingUrl = "https://www.yuque.com/settings/tokens";
        this.posidKey = POSTID_KEY_CONSTANTS.YUQUE_POSTID_KEY;
        this.previewUrl = "/[notebook]/[postid]";
        this.pageType = PageType.Markdown;
      }
    }
    const __default__$j = {
      name: "YuqueSetting",
      components: {
        CommonBlogSetting: _sfc_main$l
      }
    };
    const _sfc_main$j = /* @__PURE__ */ defineComponent({
      ...__default__$j,
      setup(__props) {
        const apiType = ref(API_TYPE_CONSTANTS.API_TYPE_YUQUE);
        const yuqueCfg = new YuqueCfg();
        const cfg = ref(yuqueCfg);
        return (_ctx, _cache) => {
          return openBlock(), createBlock(_sfc_main$l, {
            "api-type": apiType.value,
            "username-enabled": true,
            "token-enabled": true,
            cfg: cfg.value
          }, null, 8, ["api-type", "cfg"]);
        };
      }
    });
    class KmsCfg extends CommonblogCfg {
      constructor() {
        super();
        this.home = "http://localhost:9564/kms16_release/kms/multidoc";
        this.apiUrl = "http://localhost:9564/kms16_release/api/kms-multidoc/kmsMultidocKnowledgeRestService";
        this.tokenSettingUrl = "http://localhost:9564/kms16_release/sys/profile/index.jsp#integrate/RestService/";
        this.posidKey = POSTID_KEY_CONSTANTS.KMS_POSTID_KEY;
        this.previewUrl = "/kms_multidoc_knowledge/kmsMultidocKnowledge.do?method=view&fdId=[postid]";
        this.pageType = PageType.Html;
      }
    }
    const __default__$i = {
      name: "KmsSetting",
      components: {
        CommonBlogSetting: _sfc_main$l
      }
    };
    const _sfc_main$i = /* @__PURE__ */ defineComponent({
      ...__default__$i,
      setup(__props) {
        const apiType = ref(API_TYPE_CONSTANTS.API_TYPE_KMS);
        const kmsCfg = new KmsCfg();
        const cfg = ref(kmsCfg);
        return (_ctx, _cache) => {
          return openBlock(), createBlock(_sfc_main$l, {
            "api-type": apiType.value,
            "username-enabled": true,
            "password-enabled": true,
            cfg: cfg.value
          }, null, 8, ["api-type", "cfg"]);
        };
      }
    });
    class WordpressCfg extends MetaweblogCfg {
      constructor() {
        super("http://localhost:8000", "http://localhost:8000/xmlrpc.php", "", "");
        this.posidKey = POSTID_KEY_CONSTANTS.WORDPRESS_POSTID_KEY;
        this.previewUrl = "/?p=[postid]";
        this.pageType = PageType.Html;
      }
    }
    const __default__$h = {
      name: "WordpressSetting",
      components: {
        MetaweblogSetting: _sfc_main$q
      }
    };
    const _sfc_main$h = /* @__PURE__ */ defineComponent({
      ...__default__$h,
      props: {
        isReload: {
          type: Boolean,
          default: false
        },
        apiType: {
          type: String,
          default: ""
        },
        cfg: {
          type: MetaweblogCfg,
          default: null
        }
      },
      setup(__props) {
        const props = __props;
        const apiType = ref(API_TYPE_CONSTANTS.API_TYPE_WORDPRESS);
        const cfg = ref(new WordpressCfg());
        if (props.apiType) {
          apiType.value = props.apiType;
        }
        if (props.cfg) {
          cfg.value = props.cfg;
        }
        return (_ctx, _cache) => {
          return openBlock(), createBlock(_sfc_main$q, {
            "api-type": apiType.value,
            cfg: cfg.value
          }, null, 8, ["api-type", "cfg"]);
        };
      }
    });
    class DynamicMCfg extends MetaweblogCfg {
      constructor(postidKey) {
        super("", "", "", "");
        this.posidKey = postidKey;
        this.previewUrl = "/p/[postid].html";
        this.pageType = PageType.Html;
      }
    }
    class DynamicWCfg extends MetaweblogCfg {
      constructor(postidKey) {
        super("http://localhost:8000", "http://localhost:8000/xmlrpc.php", "", "");
        this.posidKey = postidKey;
        this.previewUrl = "/?p=[postid]";
        this.pageType = PageType.Html;
      }
    }
    const __default__$g = {
      name: "PlantformSetting",
      components: {
        VuepressSetting,
        JVueSetting: _sfc_main$p,
        CnblogsSetting: _sfc_main$n,
        ConfluenceSetting: _sfc_main$m,
        LiandiSetting: _sfc_main$k,
        YuqueSetting: _sfc_main$j,
        KmsSetting: _sfc_main$i,
        MetaweblogSetting: _sfc_main$q,
        WordpressSetting: _sfc_main$h
      }
    };
    const _sfc_main$g = /* @__PURE__ */ defineComponent({
      ...__default__$g,
      props: {
        isReload: {
          type: Boolean,
          default: false
        }
      },
      setup(__props) {
        const props = __props;
        const vuepressEnabled = ref(true);
        const jvueEnabled = ref(false);
        const confEnabled = ref(false);
        const cnblogsEnabled = ref(false);
        const wordpressEnabled = ref(false);
        const liandiEnabled = ref(false);
        const yuqueEnabled = ref(false);
        const kmsEnabled = ref(false);
        let formData = reactive({
          dynamicConfigArray: [],
          metaweblogArray: [],
          wordpressArray: []
        });
        const createMCfg = reactive((mcfg) => {
          return new DynamicMCfg("custom-" + mcfg.plantformKey + "-post-id");
        });
        const createWCfg = reactive((wcfg) => {
          return new DynamicWCfg("custom-" + wcfg.plantformKey + "-post-id");
        });
        const initDynCfg = (dynCfg) => {
          const newCfg = [];
          dynCfg.forEach((item) => {
            const newItem = new DynamicConfig(item.plantformType, item.plantformKey, item.plantformName);
            const switchKey = "switch-" + item.plantformKey;
            const switchValue = getBooleanConf(switchKey);
            newItem.modelValue = switchValue;
            if (switchValue) {
              newCfg.push(newItem);
            }
          });
          return newCfg;
        };
        const initConf = () => {
          vuepressEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_VUEPRESS_KEY);
          jvueEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_JVUE_KEY);
          confEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_CONF_KEY);
          cnblogsEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_CNBLOGS_KEY);
          wordpressEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_WORDPRESS_KEY);
          liandiEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_LIANDI_KEY);
          yuqueEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_YUQUE_KEY);
          kmsEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_KMS_KEY);
          const dynamicJsonCfg = getDynamicJsonCfg();
          formData.dynamicConfigArray = initDynCfg(dynamicJsonCfg.totalCfg || []);
          formData.metaweblogArray = initDynCfg(dynamicJsonCfg.metaweblogCfg || []);
          formData.wordpressArray = initDynCfg(dynamicJsonCfg.wordpressCfg || []);
          logUtil.logInfo("dynamicJsonCfg=>");
          logUtil.logInfo(JSON.stringify(dynamicJsonCfg));
          logUtil.logInfo("\u5E73\u53F0\u8BBE\u7F6E\u521D\u59CB\u5316");
        };
        watch(() => props.isReload, (oldValue, newValue) => {
          setBooleanConf(SWITCH_CONSTSNTS.SWITCH_VUEPRESS_KEY, true);
          initConf();
          logUtil.logInfo("plantform-setting\u521D\u59CB\u5316");
        });
        return (_ctx, _cache) => {
          const _component_el_tab_pane = resolveComponent("el-tab-pane");
          const _component_el_tabs = resolveComponent("el-tabs");
          return openBlock(), createBlock(_component_el_tabs, {
            type: "border-card"
          }, {
            default: withCtx(() => [vuepressEnabled.value ? (openBlock(), createBlock(_component_el_tab_pane, {
              key: 0,
              label: _ctx.$t("setting.vuepress")
            }, {
              default: withCtx(() => [createVNode(VuepressSetting)]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), jvueEnabled.value ? (openBlock(), createBlock(_component_el_tab_pane, {
              key: 1,
              label: _ctx.$t("setting.jvue")
            }, {
              default: withCtx(() => [createVNode(_sfc_main$p)]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), confEnabled.value ? (openBlock(), createBlock(_component_el_tab_pane, {
              key: 2,
              label: _ctx.$t("setting.conf")
            }, {
              default: withCtx(() => [createVNode(_sfc_main$m)]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), cnblogsEnabled.value ? (openBlock(), createBlock(_component_el_tab_pane, {
              key: 3,
              label: _ctx.$t("setting.cnblogs")
            }, {
              default: withCtx(() => [createVNode(_sfc_main$n)]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), wordpressEnabled.value ? (openBlock(), createBlock(_component_el_tab_pane, {
              key: 4,
              label: _ctx.$t("setting.wordpress")
            }, {
              default: withCtx(() => [createVNode(_sfc_main$h)]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), liandiEnabled.value ? (openBlock(), createBlock(_component_el_tab_pane, {
              key: 5,
              label: _ctx.$t("setting.liandi")
            }, {
              default: withCtx(() => [createVNode(_sfc_main$k)]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), yuqueEnabled.value ? (openBlock(), createBlock(_component_el_tab_pane, {
              key: 6,
              label: _ctx.$t("setting.yuque")
            }, {
              default: withCtx(() => [createVNode(_sfc_main$j)]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), kmsEnabled.value ? (openBlock(), createBlock(_component_el_tab_pane, {
              key: 7,
              label: _ctx.$t("setting.kms")
            }, {
              default: withCtx(() => [createVNode(_sfc_main$i)]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), (openBlock(true), createElementBlock(Fragment, null, renderList(unref(formData).metaweblogArray, (mcfg) => {
              return openBlock(), createBlock(_component_el_tab_pane, {
                label: mcfg.plantformName + "_" + mcfg.plantformType.toUpperCase().substring(0, 1)
              }, {
                default: withCtx(() => [createVNode(_sfc_main$q, {
                  "api-type": mcfg.plantformKey,
                  cfg: createMCfg(mcfg)
                }, null, 8, ["api-type", "cfg"])]),
                _: 2
              }, 1032, ["label"]);
            }), 256)), (openBlock(true), createElementBlock(Fragment, null, renderList(unref(formData).wordpressArray, (wcfg) => {
              return openBlock(), createBlock(_component_el_tab_pane, {
                label: wcfg.plantformName + "_" + wcfg.plantformType.toUpperCase().substring(0, 1)
              }, {
                default: withCtx(() => [createVNode(_sfc_main$h, {
                  "api-type": wcfg.plantformKey,
                  cfg: createWCfg(wcfg)
                }, null, 8, ["api-type", "cfg"])]),
                _: 2
              }, 1032, ["label"]);
            }), 256))]),
            _: 1
          });
        };
      }
    });
    const __default__$f = {
      name: "PostBind"
    };
    const _sfc_main$f = /* @__PURE__ */ defineComponent({
      ...__default__$f,
      props: {
        isReload: {
          type: Boolean,
          default: false
        }
      },
      setup(__props) {
        const props = __props;
        const {
          t
        } = useI18n_1();
        const vuepressEnabled = ref(true);
        const jvueEnabled = ref(false);
        const confEnabled = ref(false);
        const cnblogsEnabled = ref(false);
        const wordpressEnabled = ref(false);
        const liandiEnabled = ref(false);
        const yuqueEnabled = ref(false);
        const kmsEnabled = ref(false);
        let formData = reactive({
          dynamicConfigArray: []
        });
        const initConf = () => {
          vuepressEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_VUEPRESS_KEY);
          jvueEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_JVUE_KEY);
          confEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_CONF_KEY);
          cnblogsEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_CNBLOGS_KEY);
          wordpressEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_WORDPRESS_KEY);
          liandiEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_LIANDI_KEY);
          yuqueEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_YUQUE_KEY);
          kmsEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_KMS_KEY);
          const dynamicJsonCfg = getDynamicJsonCfg();
          const results = dynamicJsonCfg.totalCfg || [];
          formData.dynamicConfigArray = [];
          results.forEach((item) => {
            const switchKey = "switch-" + item.plantformKey;
            const switchValue = getBooleanConf(switchKey);
            item.modelValue = switchValue;
            formData.dynamicConfigArray.push(item);
          });
          logUtil.logInfo(formData.dynamicConfigArray);
          logUtil.logInfo("\u5E73\u53F0\u8BBE\u7F6E\u521D\u59CB\u5316");
        };
        watch(() => props.isReload, async (oldValue, newValue) => {
          setBooleanConf(SWITCH_CONSTSNTS.SWITCH_VUEPRESS_KEY, true);
          initConf();
          await initPage();
          logUtil.logInfo("post-bind\u521D\u59CB\u5316");
        });
        onBeforeMount(async () => {
          setBooleanConf(SWITCH_CONSTSNTS.SWITCH_VUEPRESS_KEY, true);
          initConf();
          await initPage();
          logUtil.logInfo("post-bind\u521D\u59CB\u5316 onMounted");
        });
        onMounted(() => {
        });
        const siyuanData = {
          pageId: "",
          meta: {}
        };
        const formSize = ref("default");
        const ruleFormRef = ref();
        const ruleForm = reactive({
          vuepressSlug: "",
          jvuePostid: "",
          cnblogsPostid: "",
          confPostid: "",
          wordpressPostid: "",
          liandiPostid: "",
          yuquePostid: "",
          kmsPostid: ""
        });
        const rules2 = reactive({});
        async function initPage() {
          const pageId = await getPageId(true);
          logUtil.logInfo("PostBind pageId=>", pageId);
          if (!pageId || pageId == "") {
            return;
          }
          const meta = await getPageAttrs(pageId);
          siyuanData.pageId = pageId;
          siyuanData.meta = meta;
          ruleForm.vuepressSlug = meta[POSTID_KEY_CONSTANTS.VUEPRESS_POSTID_KEY];
          ruleForm.jvuePostid = meta[POSTID_KEY_CONSTANTS.JVUE_POSTID_KEY];
          ruleForm.confPostid = meta[POSTID_KEY_CONSTANTS.CONFLUENCE_POSTID_KEY];
          ruleForm.cnblogsPostid = meta[POSTID_KEY_CONSTANTS.CNBLOGS_POSTID_KEY];
          ruleForm.wordpressPostid = meta[POSTID_KEY_CONSTANTS.WORDPRESS_POSTID_KEY];
          ruleForm.liandiPostid = meta[POSTID_KEY_CONSTANTS.LIANDI_POSTID_KEY];
          ruleForm.yuquePostid = meta[POSTID_KEY_CONSTANTS.YUQUE_POSTID_KEY];
          ruleForm.kmsPostid = meta[POSTID_KEY_CONSTANTS.KMS_POSTID_KEY];
          const results = formData.dynamicConfigArray;
          formData.dynamicConfigArray = [];
          results.forEach((item) => {
            const posidKey = "custom-" + item.plantformKey + "-post-id";
            item.posid = meta[posidKey] || "";
            formData.dynamicConfigArray.push(item);
          });
        }
        const assignPostid = (enabled, customAttr, key, value) => {
          if (enabled && !isEmptyString(value)) {
            Object.assign(customAttr, {
              [key]: value
            });
          } else {
            Object.assign(customAttr, {
              [key]: ""
            });
          }
        };
        const submitForm = async (formEl) => {
          if (!formEl)
            return;
          const result = await formEl.validate((valid, fields) => {
            if (valid) {
              logUtil.logInfo("\u6821\u9A8C\u6210\u529F");
            } else {
              logUtil.logError(t("main.opt.failure"), fields);
              return;
            }
          });
          if (!result) {
            return;
          }
          const customAttr = {};
          assignPostid(vuepressEnabled.value, customAttr, POSTID_KEY_CONSTANTS.VUEPRESS_POSTID_KEY, ruleForm.vuepressSlug);
          assignPostid(jvueEnabled.value, customAttr, POSTID_KEY_CONSTANTS.JVUE_POSTID_KEY, ruleForm.jvuePostid);
          assignPostid(confEnabled.value, customAttr, POSTID_KEY_CONSTANTS.CONFLUENCE_POSTID_KEY, ruleForm.confPostid);
          assignPostid(cnblogsEnabled.value, customAttr, POSTID_KEY_CONSTANTS.CNBLOGS_POSTID_KEY, ruleForm.cnblogsPostid);
          assignPostid(wordpressEnabled.value, customAttr, POSTID_KEY_CONSTANTS.WORDPRESS_POSTID_KEY, ruleForm.wordpressPostid);
          assignPostid(liandiEnabled.value, customAttr, POSTID_KEY_CONSTANTS.LIANDI_POSTID_KEY, ruleForm.liandiPostid);
          assignPostid(yuqueEnabled.value, customAttr, POSTID_KEY_CONSTANTS.YUQUE_POSTID_KEY, ruleForm.yuquePostid);
          assignPostid(kmsEnabled.value, customAttr, POSTID_KEY_CONSTANTS.KMS_POSTID_KEY, ruleForm.kmsPostid);
          formData.dynamicConfigArray.forEach((item) => {
            const posidKey = "custom-" + item.plantformKey + "-post-id";
            assignPostid(item.modelValue, customAttr, posidKey, item.posid);
          });
          logUtil.logWarn("PostBind\u4FDD\u5B58\u5C5E\u6027\u5230\u601D\u6E90\u7B14\u8BB0,meta=>", customAttr);
          await setPageAttrs(siyuanData.pageId, customAttr);
          ElMessage.success(t("main.opt.success"));
        };
        const resetForm = (formEl) => {
          if (!formEl)
            return;
          formEl.resetFields();
        };
        return (_ctx, _cache) => {
          const _component_el_input = resolveComponent("el-input");
          const _component_el_form_item = resolveComponent("el-form-item");
          const _component_el_button = resolveComponent("el-button");
          const _component_el_form = resolveComponent("el-form");
          return openBlock(), createBlock(_component_el_form, {
            "label-width": "125px",
            ref_key: "ruleFormRef",
            ref: ruleFormRef,
            model: ruleForm,
            rules: rules2,
            size: formSize.value,
            "status-icon": ""
          }, {
            default: withCtx(() => [vuepressEnabled.value ? (openBlock(), createBlock(_component_el_form_item, {
              key: 0,
              label: _ctx.$t("post.bind.vuepress.slug"),
              prop: "vuepressSlug"
            }, {
              default: withCtx(() => [createVNode(_component_el_input, {
                modelValue: ruleForm.vuepressSlug,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => ruleForm.vuepressSlug = $event)
              }, null, 8, ["modelValue"])]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), jvueEnabled.value ? (openBlock(), createBlock(_component_el_form_item, {
              key: 1,
              label: _ctx.$t("post.bind.jvue.postid"),
              prop: "jvuePostid"
            }, {
              default: withCtx(() => [createVNode(_component_el_input, {
                modelValue: ruleForm.jvuePostid,
                "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => ruleForm.jvuePostid = $event)
              }, null, 8, ["modelValue"])]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), confEnabled.value ? (openBlock(), createBlock(_component_el_form_item, {
              key: 2,
              label: _ctx.$t("post.bind.conf.postid"),
              prop: "confPostid"
            }, {
              default: withCtx(() => [createVNode(_component_el_input, {
                modelValue: ruleForm.confPostid,
                "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => ruleForm.confPostid = $event)
              }, null, 8, ["modelValue"])]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), cnblogsEnabled.value ? (openBlock(), createBlock(_component_el_form_item, {
              key: 3,
              label: _ctx.$t("post.bind.cnblogs.postid"),
              prop: "cnblogsPostid"
            }, {
              default: withCtx(() => [createVNode(_component_el_input, {
                modelValue: ruleForm.cnblogsPostid,
                "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => ruleForm.cnblogsPostid = $event)
              }, null, 8, ["modelValue"])]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), wordpressEnabled.value ? (openBlock(), createBlock(_component_el_form_item, {
              key: 4,
              label: _ctx.$t("post.bind.wordpress.postid"),
              prop: "wordpressPostid"
            }, {
              default: withCtx(() => [createVNode(_component_el_input, {
                modelValue: ruleForm.wordpressPostid,
                "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => ruleForm.wordpressPostid = $event)
              }, null, 8, ["modelValue"])]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), liandiEnabled.value ? (openBlock(), createBlock(_component_el_form_item, {
              key: 5,
              label: _ctx.$t("post.bind.liandi.postid"),
              prop: "liandiPostid"
            }, {
              default: withCtx(() => [createVNode(_component_el_input, {
                modelValue: ruleForm.liandiPostid,
                "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => ruleForm.liandiPostid = $event)
              }, null, 8, ["modelValue"])]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), yuqueEnabled.value ? (openBlock(), createBlock(_component_el_form_item, {
              key: 6,
              label: _ctx.$t("post.bind.yuque.postid"),
              prop: "yuquePostid"
            }, {
              default: withCtx(() => [createVNode(_component_el_input, {
                modelValue: ruleForm.yuquePostid,
                "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => ruleForm.yuquePostid = $event)
              }, null, 8, ["modelValue"])]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), kmsEnabled.value ? (openBlock(), createBlock(_component_el_form_item, {
              key: 7,
              label: _ctx.$t("post.bind.kms.postid"),
              prop: "kmsPostid"
            }, {
              default: withCtx(() => [createVNode(_component_el_input, {
                modelValue: ruleForm.kmsPostid,
                "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => ruleForm.kmsPostid = $event)
              }, null, 8, ["modelValue"])]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), (openBlock(true), createElementBlock(Fragment, null, renderList(unref(formData).dynamicConfigArray, (cfg) => {
              return withDirectives((openBlock(), createBlock(_component_el_form_item, {
                label: cfg.plantformName + "_" + cfg.plantformType.toUpperCase().substring(0, 1) + " ID"
              }, {
                default: withCtx(() => [createVNode(_component_el_input, {
                  modelValue: cfg.posid,
                  "onUpdate:modelValue": ($event) => cfg.posid = $event
                }, null, 8, ["modelValue", "onUpdate:modelValue"])]),
                _: 2
              }, 1032, ["label"])), [[vShow, cfg.modelValue]]);
            }), 256)), createVNode(_component_el_form_item, null, {
              default: withCtx(() => [createVNode(_component_el_button, {
                type: "primary",
                onClick: _cache[8] || (_cache[8] = ($event) => submitForm(ruleFormRef.value))
              }, {
                default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("post.bind.conf.save")), 1)]),
                _: 1
              }), createVNode(_component_el_button, {
                onClick: _cache[9] || (_cache[9] = ($event) => resetForm(ruleFormRef.value))
              }, {
                default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("post.bind.conf.cancel")), 1)]),
                _: 1
              })]),
              _: 1
            })]),
            _: 1
          }, 8, ["model", "rules", "size"]);
        };
      }
    });
    const SIYUAN_PAGE_ATTR_CUSTOM_SLUG_KEY = "custom-slug";
    const SIYUAN_PAGE_ATTR_CUSTOM_DESC_KEY = "custom-desc";
    const SIYUAN_PAGE_ATTR_KEY = {
      SIYUAN_PAGE_ATTR_CUSTOM_SLUG_KEY,
      SIYUAN_PAGE_ATTR_CUSTOM_DESC_KEY
    };
    var toggleSelection = function() {
      var selection = document.getSelection();
      if (!selection.rangeCount) {
        return function() {
        };
      }
      var active = document.activeElement;
      var ranges = [];
      for (var i2 = 0; i2 < selection.rangeCount; i2++) {
        ranges.push(selection.getRangeAt(i2));
      }
      switch (active.tagName.toUpperCase()) {
        case "INPUT":
        case "TEXTAREA":
          active.blur();
          break;
        default:
          active = null;
          break;
      }
      selection.removeAllRanges();
      return function() {
        selection.type === "Caret" && selection.removeAllRanges();
        if (!selection.rangeCount) {
          ranges.forEach(function(range2) {
            selection.addRange(range2);
          });
        }
        active && active.focus();
      };
    };
    var deselectCurrent = toggleSelection;
    var clipboardToIE11Formatting = {
      "text/plain": "Text",
      "text/html": "Url",
      "default": "Text"
    };
    var defaultMessage = "Copy to clipboard: #{key}, Enter";
    function format(message2) {
      var copyKey = (/mac os x/i.test(navigator.userAgent) ? "\u2318" : "Ctrl") + "+C";
      return message2.replace(/#{\s*key\s*}/g, copyKey);
    }
    function copy(text, options) {
      var debug2, message2, reselectPrevious, range2, selection, mark2, success = false;
      if (!options) {
        options = {};
      }
      debug2 = options.debug || false;
      try {
        reselectPrevious = deselectCurrent();
        range2 = document.createRange();
        selection = document.getSelection();
        mark2 = document.createElement("span");
        mark2.textContent = text;
        mark2.style.all = "unset";
        mark2.style.position = "fixed";
        mark2.style.top = 0;
        mark2.style.clip = "rect(0, 0, 0, 0)";
        mark2.style.whiteSpace = "pre";
        mark2.style.webkitUserSelect = "text";
        mark2.style.MozUserSelect = "text";
        mark2.style.msUserSelect = "text";
        mark2.style.userSelect = "text";
        mark2.addEventListener("copy", function(e2) {
          e2.stopPropagation();
          if (options.format) {
            e2.preventDefault();
            if (typeof e2.clipboardData === "undefined") {
              debug2 && console.warn("unable to use e.clipboardData");
              debug2 && console.warn("trying IE specific stuff");
              window.clipboardData.clearData();
              var format2 = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting["default"];
              window.clipboardData.setData(format2, text);
            } else {
              e2.clipboardData.clearData();
              e2.clipboardData.setData(options.format, text);
            }
          }
          if (options.onCopy) {
            e2.preventDefault();
            options.onCopy(e2.clipboardData);
          }
        });
        document.body.appendChild(mark2);
        range2.selectNodeContents(mark2);
        selection.addRange(range2);
        var successful = document.execCommand("copy");
        if (!successful) {
          throw new Error("copy command was unsuccessful");
        }
        success = true;
      } catch (err) {
        debug2 && console.error("unable to copy using execCommand: ", err);
        debug2 && console.warn("trying IE specific stuff");
        try {
          window.clipboardData.setData(options.format || "text", text);
          options.onCopy && options.onCopy(window.clipboardData);
          success = true;
        } catch (err2) {
          debug2 && console.error("unable to copy using clipboardData: ", err2);
          debug2 && console.error("falling back to prompt");
          message2 = format("message" in options ? options.message : defaultMessage);
          window.prompt(message2, text);
        }
      } finally {
        if (selection) {
          if (typeof selection.removeRange == "function") {
            selection.removeRange(range2);
          } else {
            selection.removeAllRanges();
          }
        }
        if (mark2) {
          document.body.removeChild(mark2);
        }
        reselectPrevious();
      }
      return success;
    }
    var copyToClipboard = copy;
    var bitwise = function(str2) {
      var hash = 0;
      if (str2.length == 0)
        return hash;
      for (var i2 = 0; i2 < str2.length; i2++) {
        var ch = str2.charCodeAt(i2);
        hash = (hash << 5) - hash + ch;
        hash = hash & hash;
      }
      return hash;
    };
    var binaryTransfer = function(integer2, binary2) {
      var dictionary = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
      binary2 = binary2 || 62;
      var stack2 = [];
      var num;
      var result = "";
      var sign = integer2 < 0 ? "-" : "";
      integer2 = Math.abs(integer2);
      while (integer2 >= binary2) {
        num = integer2 % binary2;
        integer2 = Math.floor(integer2 / binary2);
        stack2.push(dictionary[num]);
      }
      if (integer2 > 0) {
        stack2.push(dictionary[integer2]);
      }
      for (var i2 = stack2.length - 1; i2 >= 0; i2--) {
        result += stack2[i2];
      }
      return sign + result;
    };
    var shortHash = function(text) {
      var type2 = typeof text;
      if (type2 === "string" || type2 === "number") {
        var id2 = binaryTransfer(bitwise(String(text)), 61);
        return id2.replace("-", "Z");
      } else {
        throw new Error("Unexpected input type");
      }
    };
    var dist = shortHash;
    const _hoisted_1$4 = ["href", "title"];
    const __default__$e = {
      name: "VuepressMain"
    };
    const _sfc_main$e = /* @__PURE__ */ defineComponent({
      ...__default__$e,
      props: {
        isReload: {
          type: Boolean,
          default: false
        }
      },
      setup(__props) {
        const props = __props;
        const {
          t
        } = useI18n_1();
        watch(() => props.isReload, async (oldValue, newValue) => {
          await initPage();
          logUtil.logWarn("VuepressMain\u68C0\u6D4B\u5230\u66F4\u65B0\u64CD\u4F5C\uFF0C\u5237\u65B0\u9875\u9762");
        });
        onBeforeMount(async () => {
          await initPage();
        });
        const isSlugLoading = ref(false);
        const isDescLoading = ref(false);
        const isTagLoading = ref(false);
        const isGenLoading = ref(false);
        const isPublishLoading = ref(false);
        const isCancelLoading = ref(false);
        const editMode = ref(false);
        const slugHashEnabled = ref(false);
        const vuepressGithubEnabled = ref(false);
        const useDefaultPath = ref(true);
        const isPublished = ref(false);
        const previewUrl = ref("");
        const forceRefresh = ref(false);
        const formData = ref({
          title: "",
          customSlug: "",
          desc: "",
          created: "",
          checkList: ["1"],
          tag: {
            inputValue: "",
            dynamicTags: [],
            inputVisible: false
          },
          customPath: "",
          categories: ["\u9ED8\u8BA4\u5206\u7C7B"]
        });
        const siyuanData = ref({
          pageId: "",
          meta: {
            tags: ""
          }
        });
        const vuepressData = ref({
          yamlObj: {
            title: "",
            date: new Date(),
            permalink: "/post/convert-npm-dependencies-to-local.html",
            meta: [{
              name: "keywords",
              content: ""
            }, {
              name: "description",
              content: ""
            }],
            categories: [],
            tags: [],
            author: {
              name: "terwer",
              link: "https://github.com/terwer"
            }
          },
          formatter: "",
          vuepressContent: "",
          vuepressFullContent: ""
        });
        const simpleMode = () => {
          editMode.value = false;
        };
        const complexMode = () => {
          editMode.value = true;
        };
        async function initPage() {
          const pageId = await getPageId(true);
          logUtil.logInfo("VuepressMain pageId=>", pageId);
          if (!pageId || pageId == "") {
            return;
          }
          const page = await getPage(pageId);
          logUtil.logWarn("VuepressMain\u83B7\u53D6\u4E3B\u6587\u6863", page);
          siyuanData.value.pageId = pageId;
          siyuanData.value.meta = await getPageAttrs(pageId);
          formData.value.title = page.content + ".md";
          formData.value.customSlug = siyuanData.value.meta[SIYUAN_PAGE_ATTR_KEY.SIYUAN_PAGE_ATTR_CUSTOM_SLUG_KEY];
          formData.value.desc = siyuanData.value.meta[SIYUAN_PAGE_ATTR_KEY.SIYUAN_PAGE_ATTR_CUSTOM_DESC_KEY];
          formData.value.created = formatNumToZhDate(page.created);
          formData.value.tag.dynamicTags = [];
          const tagstr = siyuanData.value.meta.tags || "";
          const tgarr = tagstr.split(",");
          for (let i2 = 0; i2 < tgarr.length; i2++) {
            const tg = tgarr[i2];
            if (tg != "") {
              formData.value.tag.dynamicTags.push(tgarr[i2]);
            }
          }
          const isOk = getBooleanConf(API_STATUS_CONSTANTS.API_STATUS_VUEPRESS);
          vuepressGithubEnabled.value = isOk;
          slugHashEnabled.value = true;
          logUtil.logInfo("Vuepress\u7684api\u72B6\u6001=>");
          logUtil.logInfo(isOk);
          convertAttrToYAML();
          const data = await getPageMd(siyuanData.value.pageId);
          const md = removeWidgetTag(data.content);
          vuepressData.value.vuepressContent = md;
          vuepressData.value.vuepressFullContent = vuepressData.value.formatter + "\n" + vuepressData.value.vuepressContent;
          isPublished.value = getPublishStatus(API_TYPE_CONSTANTS.API_TYPE_VUEPRESS, siyuanData.value.meta);
          if (isPublished.value) {
            const vuepressCfg = getJSONConf(API_TYPE_CONSTANTS.API_TYPE_VUEPRESS);
            const docPath = getDocPath();
            useDefaultPath.value = false;
            formData.value.customPath = docPath;
            previewUrl.value = "https://github.com/" + vuepressCfg.githubUser + "/" + vuepressCfg.githubRepo + "/blob/" + vuepressCfg.defaultBranch + "/" + docPath;
          }
        }
        function getDocPath() {
          const postidKey = getApiParams(API_TYPE_CONSTANTS.API_TYPE_VUEPRESS).posidKey;
          const meta = siyuanData.value.meta;
          const docPath = meta[postidKey] || "";
          return docPath;
        }
        function checkForce() {
          if (isEmptyString(formData.value.customSlug) || isEmptyString(formData.value.desc) || formData.value.tag.dynamicTags.length == 0) {
            return true;
          }
          if (!forceRefresh.value) {
            logUtil.logWarn(t("main.force.refresh.tip"));
            return false;
          }
          return true;
        }
        async function makeSlug(hideTip) {
          if (!checkForce()) {
            return;
          }
          isSlugLoading.value = true;
          const page = await getPage(siyuanData.value.pageId);
          logUtil.logInfo("page=>", page);
          const title2 = page.content;
          logUtil.logInfo("title=>", title2);
          if (formData.value.checkList.length > 0) {
            const result = await zhSlugify(title2);
            logUtil.logInfo("result=>", result);
            if (result) {
              formData.value.customSlug = result;
            } else {
              ElMessage.success(t("main.opt.failure"));
            }
          } else {
            formData.value.customSlug = await pingyinSlugify(title2);
          }
          if (slugHashEnabled.value) {
            const newstr = page.content + new Date().toISOString();
            const hashstr = "-" + dist(newstr).toLowerCase();
            formData.value.customSlug += hashstr;
          }
          isSlugLoading.value = false;
          if (hideTip != true) {
            ElMessage.success(t("main.opt.success"));
          }
        }
        async function makeDesc(hideTip) {
          if (!checkForce()) {
            return;
          }
          isDescLoading.value = true;
          const data = await getPageMd(siyuanData.value.pageId);
          const md = data.content;
          let html = mdToHtml(md);
          formData.value.desc = parseHtml(html, CONSTANTS.MAX_PREVIEW_LENGTH, true);
          isDescLoading.value = false;
          if (hideTip != true) {
            ElMessage.success(t("main.opt.success"));
          }
        }
        const createTimeChanged = (val) => {
          logUtil.logInfo("createTimeChanged=>", val);
        };
        const tagHandleClose = (tag) => {
          formData.value.tag.dynamicTags.splice(formData.value.tag.dynamicTags.indexOf(tag), 1);
        };
        const tagRefInput = ref();
        const tagShowInput = () => {
          formData.value.tag.inputVisible = true;
          nextTick$1(() => {
            tagRefInput.value.focus();
          });
        };
        const tagHandleInputConfirm = () => {
          if (formData.value.tag.inputValue) {
            formData.value.tag.dynamicTags.push(formData.value.tag.inputValue);
          }
          formData.value.tag.inputVisible = false;
          formData.value.tag.inputValue = "";
        };
        async function fetchTag(hideTip) {
          if (!checkForce()) {
            return;
          }
          isTagLoading.value = true;
          const data = await getPageMd(siyuanData.value.pageId);
          const md = data.content;
          const genTags = await cutWords(md);
          logUtil.logInfo("genTags=>", genTags);
          const hotTags = jiebaToHotWords(genTags, 5);
          logUtil.logInfo("hotTags=>", hotTags);
          for (let i2 = 0; i2 < hotTags.length; i2++) {
            if (!formData.value.tag.dynamicTags.includes(hotTags[i2])) {
              formData.value.tag.dynamicTags.push(hotTags[i2]);
            }
          }
          isTagLoading.value = false;
          if (hideTip != true) {
            ElMessage.success(t("main.opt.success"));
          }
        }
        async function saveAttrToSiyuan(hideTip) {
          const customAttr = {
            [SIYUAN_PAGE_ATTR_KEY.SIYUAN_PAGE_ATTR_CUSTOM_SLUG_KEY]: formData.value.customSlug,
            [SIYUAN_PAGE_ATTR_KEY.SIYUAN_PAGE_ATTR_CUSTOM_DESC_KEY]: formData.value.desc,
            tags: formData.value.tag.dynamicTags.join(",")
          };
          await setPageAttrs(siyuanData.value.pageId, customAttr);
          logUtil.logWarn("VuepressMain\u4FDD\u5B58\u5C5E\u6027\u5230\u601D\u6E90\u7B14\u8BB0,meta=>", customAttr);
          if (hideTip != true) {
            await initPage();
            ElMessage.success(t("main.opt.success"));
          }
        }
        const mdFileToTitle = (fmtTitle) => {
          if (fmtTitle.indexOf(".md") > -1) {
            fmtTitle = fmtTitle.replace(/\.md/g, "");
          }
          if (fmtTitle.indexOf(".") > -1) {
            fmtTitle = fmtTitle.replace(/\d*\./g, "");
          }
          return fmtTitle;
        };
        const convertAttrToYAML = () => {
          logUtil.logInfo("convertAttrToYAML,formData=>", formData);
          let fmtTitle = formData.value.title;
          fmtTitle = mdFileToTitle(fmtTitle);
          vuepressData.value.yamlObj.title = fmtTitle;
          vuepressData.value.yamlObj.permalink = "/post/" + formData.value.customSlug + ".html";
          vuepressData.value.yamlObj.date = covertStringToDate(formData.value.created);
          const meta = [{
            name: "keywords",
            content: formData.value.tag.dynamicTags.join(" ")
          }, {
            name: "description",
            content: formData.value.desc
          }];
          vuepressData.value.yamlObj.meta = meta;
          vuepressData.value.yamlObj.tags = formData.value.tag.dynamicTags;
          vuepressData.value.yamlObj.categories = formData.value.categories;
          let yaml = obj2yaml(vuepressData.value.yamlObj);
          yaml = formatIsoToZhDate(yaml, true);
          vuepressData.value.formatter = yaml;
          vuepressData.value.vuepressFullContent = vuepressData.value.formatter;
        };
        const convertYAMLToAttr = () => {
          vuepressData.value.formatter = vuepressData.value.vuepressFullContent;
          vuepressData.value.yamlObj = yaml2Obj(vuepressData.value.formatter);
          logUtil.logInfo("convertYAMLToAttr,yamlObj=>", vuepressData.value.yamlObj);
          formData.value.title = vuepressData.value.yamlObj.title + ".md";
          formData.value.customSlug = vuepressData.value.yamlObj.permalink.replace("/pages/", "").replace("/post/", "").replace(".html", "").replace("/", "");
          formData.value.created = formatIsoToZhDate(vuepressData.value.yamlObj.date.toISOString(), false);
          const yamlMeta = vuepressData.value.yamlObj.meta;
          for (let i2 = 0; i2 < yamlMeta.length; i2++) {
            const m2 = yamlMeta[i2];
            if (m2.name === "description") {
              formData.value.desc = m2.content;
              break;
            }
          }
          for (let j2 = 0; j2 < vuepressData.value.yamlObj.tags.length; j2++) {
            const tag = vuepressData.value.yamlObj.tags[j2];
            if (!formData.value.tag.dynamicTags.includes(tag) && tag != "") {
              formData.value.tag.dynamicTags.push(tag);
            }
          }
          formData.value.categories = vuepressData.value.yamlObj.categories;
        };
        const fmtRefInput = ref();
        const copyToClipboard$1 = () => {
          nextTick$1(() => {
            fmtRefInput.value.focus();
            copyToClipboard(vuepressData.value.vuepressFullContent);
            ElMessage.success(t("main.opt.success"));
          });
        };
        const githubOnChange = (val) => {
          slugHashEnabled.value = val;
          vuepressGithubEnabled.value = val;
        };
        const defaultPathOnChange = (val) => {
          useDefaultPath.value = val;
        };
        const customProps = {
          label: "label",
          children: "children",
          isLeaf: "isLeaf"
        };
        const customLoad = async (node, resolve2) => {
          if (node.isLeaf)
            return resolve2([]);
          logUtil.logInfo("\u76EE\u524D\u5DF2\u4FDD\u5B58\u8DEF\u5F84=>", formData.value.customPath);
          logUtil.logInfo("\u5F53\u524D\u8282\u70B9=>", node.data);
          const vuepressCfg = getJSONConf(API_TYPE_CONSTANTS.API_TYPE_VUEPRESS);
          let docPath;
          let parentDocPath = node.data.value || "";
          if (parentDocPath == "") {
            parentDocPath = "docs/";
          }
          docPath = parentDocPath;
          const treeNode = await getPageTreeNode(vuepressCfg, docPath);
          resolve2(treeNode);
        };
        async function doPublish() {
          isPublishLoading.value = true;
          await doCancel(false);
          const fmtTitle = mdFileToTitle(formData.value.title);
          if (/[\s*|\\.]/g.test(fmtTitle)) {
            logUtil.logInfo("fmtTitle=>", fmtTitle);
            ElMessage.error("\u6587\u4EF6\u540D\u4E0D\u80FD\u5305\u542B\u7A7A\u683C\u6216\u8005\u7279\u6B8A\u5B57\u7B26");
            return;
          }
          await oneclickAttr(true);
          const isOk = getBooleanConf(API_STATUS_CONSTANTS.API_STATUS_VUEPRESS);
          if (!isOk && vuepressGithubEnabled.value) {
            await initPage();
            isPublishLoading.value = false;
            ElMessage.error("\u68C0\u6D4B\u5230api\u4E0D\u53EF\u7528\u6216\u8005\u914D\u7F6E\u9519\u8BEF\uFF0C\u65E0\u6CD5\u53D1\u5E03\u5230Github\uFF0C\u8BF7\u81EA\u884C\u590D\u5236\u6587\u672C");
            return;
          } else if (isOk && vuepressGithubEnabled.value) {
            logUtil.logWarn("\u5F00\u59CB\u771F\u6B63\u8C03\u7528api\u53D1\u5E03\u5230Github");
            const vuepressCfg = getJSONConf(API_TYPE_CONSTANTS.API_TYPE_VUEPRESS);
            const mdFile = formData.value.title;
            let docPath = vuepressCfg.defaultPath + mdFile;
            if (!useDefaultPath.value) {
              if (formData.value.customPath.indexOf(".md") > -1) {
                docPath = formData.value.customPath;
                logUtil.logWarn("\u5DF2\u7ECF\u6709\u5B8C\u6574\u8DEF\u5F84\uFF0C\u4E0D\u62FC\u63A5");
              } else {
                docPath = formData.value.customPath + "/" + mdFile;
              }
              logUtil.logInfo(formData.value.customPath);
              logUtil.logWarn("\u6587\u7AE0\u8BB2\u53D1\u5E03\u4E8E\u4EE5\u4E0B\u8DEF\u5F84=>", docPath);
            }
            const data = await getPageMd(siyuanData.value.pageId);
            const md = removeWidgetTag(data.content);
            const mdContent = vuepressData.value.formatter + "\n" + md;
            vuepressData.value.vuepressContent = md;
            vuepressData.value.vuepressFullContent = mdContent;
            logUtil.logWarn("\u5373\u5C06\u53D1\u5E03\u7684\u5185\u5BB9\uFF0CmdContent=>", {
              "mdContent": mdContent
            });
            const res = await publishPage(vuepressCfg, docPath, mdContent);
            if (!res) {
              isPublishLoading.value = false;
              await initPage();
              ElMessage.error(t("main.publish.vuepress.failure"));
              return;
            }
            const customAttr = {
              [POSTID_KEY_CONSTANTS.VUEPRESS_POSTID_KEY]: docPath
            };
            await setPageAttrs(siyuanData.value.pageId, customAttr);
            logUtil.logInfo("VuepressMain\u53D1\u5E03\u6210\u529F\uFF0C\u4FDD\u5B58\u8DEF\u5F84,meta=>", customAttr);
            await initPage();
            logUtil.logInfo("\u6587\u7AE0\u9884\u89C8\u94FE\u63A5=>", previewUrl);
          } else {
            await initPage();
          }
          logUtil.logWarn("\u53D1\u5E03\u5185\u5BB9\u5B8C\u6210");
          isPublishLoading.value = false;
          ElMessage.success(t("main.opt.status.publish"));
        }
        async function oneclickAttr(hideTip) {
          isGenLoading.value = true;
          await makeSlug(true);
          await makeDesc(true);
          await fetchTag(true);
          convertAttrToYAML();
          await saveAttrToSiyuan(true);
          logUtil.logWarn("\u53D1\u5E03\u5C5E\u6027\u5B8C\u6210");
          isGenLoading.value = false;
          if (hideTip != true) {
            ElMessage.success(t("main.publish.oneclick.attr.finish"));
          }
        }
        async function cancelPublish() {
          isCancelLoading.value = true;
          ElMessageBox.confirm(t("main.opt.warning.tip"), t("main.opt.warning"), {
            confirmButtonText: t("main.opt.ok"),
            cancelButtonText: t("main.opt.cancel"),
            type: "warning"
          }).then(async () => {
            await doCancel(true);
            isCancelLoading.value = false;
            ElMessage.warning(t("main.opt.status.cancel"));
          }).catch(() => {
            isCancelLoading.value = false;
            logUtil.logInfo("\u64CD\u4F5C\u5DF2\u53D6\u6D88");
          });
        }
        async function doCancel(isInit) {
          const vuepressCfg = getJSONConf(API_TYPE_CONSTANTS.API_TYPE_VUEPRESS);
          const docPath = getDocPath();
          logUtil.logInfo("\u51C6\u5907\u53D6\u6D88\u53D1\u5E03\uFF0CdocPath=>", docPath);
          await deletePage(vuepressCfg, docPath);
          const customAttr = {
            [POSTID_KEY_CONSTANTS.VUEPRESS_POSTID_KEY]: ""
          };
          await setPageAttrs(siyuanData.value.pageId, customAttr);
          logUtil.logWarn("VuepressMain\u53D6\u6D88\u53D1\u5E03,meta=>", customAttr);
          if (isInit) {
            await initPage();
          }
        }
        return (_ctx, _cache) => {
          const _component_el_alert = resolveComponent("el-alert");
          const _component_el_switch = resolveComponent("el-switch");
          const _component_el_form_item = resolveComponent("el-form-item");
          const _component_el_button = resolveComponent("el-button");
          const _component_el_input = resolveComponent("el-input");
          const _component_el_checkbox = resolveComponent("el-checkbox");
          const _component_el_checkbox_group = resolveComponent("el-checkbox-group");
          const _component_el_date_picker = resolveComponent("el-date-picker");
          const _component_el_tag = resolveComponent("el-tag");
          const _component_el_tree_select = resolveComponent("el-tree-select");
          const _component_el_form = resolveComponent("el-form");
          const _component_el_aside = resolveComponent("el-aside");
          const _component_el_main = resolveComponent("el-main");
          const _component_el_container = resolveComponent("el-container");
          return openBlock(), createBlock(_component_el_container, null, {
            default: withCtx(() => [createVNode(_component_el_aside, {
              width: "45%"
            }, {
              default: withCtx(() => [createVNode(_component_el_alert, {
                class: "top-version-tip",
                title: _ctx.$t("main.publish.vuepress.tip"),
                type: "info",
                closable: false
              }, null, 8, ["title"]), createCommentVNode("", true), createVNode(_component_el_form, {
                "label-width": "100px"
              }, {
                default: withCtx(() => [editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 0,
                  label: _ctx.$t("main.force.refresh")
                }, {
                  default: withCtx(() => [createVNode(_component_el_switch, {
                    modelValue: forceRefresh.value,
                    "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => forceRefresh.value = $event)
                  }, null, 8, ["modelValue"]), !forceRefresh.value ? (openBlock(), createBlock(_component_el_alert, {
                    key: 0,
                    title: _ctx.$t("main.force.refresh.tip"),
                    type: "warning",
                    closable: false
                  }, null, 8, ["title"])) : createCommentVNode("", true)]),
                  _: 1
                }, 8, ["label"])) : createCommentVNode("", true), createVNode(_component_el_form_item, {
                  label: _ctx.$t("main.publish.vuepress.editmode")
                }, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: editMode.value ? "default" : "primary",
                    onClick: simpleMode
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("main.publish.vuepress.editmode.simple")), 1)]),
                    _: 1
                  }, 8, ["type"])]),
                  _: 1
                }, 8, ["label"]), createVNode(_component_el_form_item, null, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: editMode.value ? "primary" : "default",
                    onClick: complexMode
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("main.publish.vuepress.editmode.complex")), 1)]),
                    _: 1
                  }, 8, ["type"])]),
                  _: 1
                }), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 1,
                  label: _ctx.$t("main.slug")
                }, {
                  default: withCtx(() => [createVNode(_component_el_input, {
                    modelValue: formData.value.customSlug,
                    "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => formData.value.customSlug = $event)
                  }, null, 8, ["modelValue"])]),
                  _: 1
                }, 8, ["label"])) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 2
                }, {
                  default: withCtx(() => [createVNode(_component_el_checkbox_group, {
                    modelValue: formData.value.checkList,
                    "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => formData.value.checkList = $event)
                  }, {
                    default: withCtx(() => [createVNode(_component_el_checkbox, {
                      label: "1"
                    }, {
                      default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("main.use.google.translate")), 1)]),
                      _: 1
                    })]),
                    _: 1
                  }, 8, ["modelValue"])]),
                  _: 1
                })) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 3,
                  label: _ctx.$t("main.use.hash")
                }, {
                  default: withCtx(() => [createVNode(_component_el_switch, {
                    modelValue: slugHashEnabled.value,
                    "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => slugHashEnabled.value = $event)
                  }, null, 8, ["modelValue"]), !slugHashEnabled.value ? (openBlock(), createBlock(_component_el_alert, {
                    key: 0,
                    title: _ctx.$t("main.use.hash.tip"),
                    type: "warning",
                    closable: false
                  }, null, 8, ["title"])) : createCommentVNode("", true)]),
                  _: 1
                }, 8, ["label"])) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 4
                }, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: "primary",
                    class: "make-slug-btn",
                    onClick: makeSlug,
                    loading: isSlugLoading.value
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(isSlugLoading.value ? _ctx.$t("main.opt.loading") : _ctx.$t("main.auto.fetch.slug")), 1)]),
                    _: 1
                  }, 8, ["loading"])]),
                  _: 1
                })) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 5,
                  label: _ctx.$t("main.desc")
                }, {
                  default: withCtx(() => [createVNode(_component_el_input, {
                    type: "textarea",
                    modelValue: formData.value.desc,
                    "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => formData.value.desc = $event)
                  }, null, 8, ["modelValue"])]),
                  _: 1
                }, 8, ["label"])) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 6
                }, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: "primary",
                    onClick: makeDesc,
                    loading: isDescLoading.value
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(isDescLoading.value ? _ctx.$t("main.opt.loading") : _ctx.$t("main.auto.fetch.desc")), 1)]),
                    _: 1
                  }, 8, ["loading"])]),
                  _: 1
                })) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 7,
                  label: _ctx.$t("main.create.time")
                }, {
                  default: withCtx(() => [createVNode(_component_el_date_picker, {
                    type: "datetime",
                    modelValue: formData.value.created,
                    "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => formData.value.created = $event),
                    format: "YYYY-MM-DD HH:mm:ss",
                    "value-format": "YYYY-MM-DD HH:mm:ss",
                    onChange: createTimeChanged,
                    placeholder: _ctx.$t("main.create.time.placeholder")
                  }, null, 8, ["modelValue", "placeholder"])]),
                  _: 1
                }, 8, ["label"])) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 8,
                  label: _ctx.$t("main.tag")
                }, {
                  default: withCtx(() => [(openBlock(true), createElementBlock(Fragment, null, renderList(formData.value.tag.dynamicTags, (tag) => {
                    return openBlock(), createBlock(_component_el_tag, {
                      key: tag,
                      class: "mx-1",
                      closable: "",
                      "disable-transitions": false,
                      onClose: ($event) => tagHandleClose(tag)
                    }, {
                      default: withCtx(() => [createTextVNode(toDisplayString$1(tag), 1)]),
                      _: 2
                    }, 1032, ["onClose"]);
                  }), 128)), formData.value.tag.inputVisible ? (openBlock(), createBlock(_component_el_input, {
                    key: 0,
                    ref_key: "tagRefInput",
                    ref: tagRefInput,
                    modelValue: formData.value.tag.inputValue,
                    "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => formData.value.tag.inputValue = $event),
                    class: "ml-1 w-20",
                    size: "small",
                    onKeyup: withKeys(tagHandleInputConfirm, ["enter"]),
                    onBlur: tagHandleInputConfirm
                  }, null, 8, ["modelValue", "onKeyup"])) : (openBlock(), createBlock(_component_el_button, {
                    key: 1,
                    class: "button-new-tag ml-1 el-tag",
                    size: "small",
                    onClick: tagShowInput
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("main.tag.new")), 1)]),
                    _: 1
                  }))]),
                  _: 1
                }, 8, ["label"])) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 9
                }, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: "primary",
                    onClick: fetchTag,
                    loading: isTagLoading.value
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(isTagLoading.value ? _ctx.$t("main.opt.loading") : _ctx.$t("main.auto.fetch.tag")), 1)]),
                    _: 1
                  }, 8, ["loading"])]),
                  _: 1
                })) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 10
                }, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: "primary",
                    onClick: saveAttrToSiyuan
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("main.save.attr.to.siyuan")), 1)]),
                    _: 1
                  })]),
                  _: 1
                })) : createCommentVNode("", true), createVNode(_component_el_form_item, {
                  label: _ctx.$t("main.opt.quick")
                }, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: "primary",
                    onClick: oneclickAttr,
                    loading: isGenLoading.value
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(isGenLoading.value ? _ctx.$t("main.opt.loading") : _ctx.$t("main.publish.oneclick.attr")), 1)]),
                    _: 1
                  }, 8, ["loading"])]),
                  _: 1
                }, 8, ["label"]), createVNode(_component_el_form_item, {
                  label: _ctx.$t("main.publish.vuepress.github")
                }, {
                  default: withCtx(() => [createVNode(_component_el_switch, {
                    modelValue: vuepressGithubEnabled.value,
                    "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => vuepressGithubEnabled.value = $event),
                    onChange: githubOnChange
                  }, null, 8, ["modelValue"]), vuepressGithubEnabled.value ? (openBlock(), createBlock(_component_el_alert, {
                    key: 0,
                    title: _ctx.$t("main.publish.vuepress.github.tip"),
                    type: "info",
                    closable: false
                  }, null, 8, ["title"])) : createCommentVNode("", true), !vuepressGithubEnabled.value ? (openBlock(), createBlock(_component_el_alert, {
                    key: 1,
                    title: _ctx.$t("main.publish.vuepress.github.no.tip"),
                    type: "warning",
                    closable: false
                  }, null, 8, ["title"])) : createCommentVNode("", true)]),
                  _: 1
                }, 8, ["label"]), vuepressGithubEnabled.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 11,
                  label: _ctx.$t("main.publish.vuepress.choose.path.use.default")
                }, {
                  default: withCtx(() => [createVNode(_component_el_switch, {
                    modelValue: useDefaultPath.value,
                    "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => useDefaultPath.value = $event),
                    onChange: defaultPathOnChange
                  }, null, 8, ["modelValue"]), useDefaultPath.value ? (openBlock(), createBlock(_component_el_alert, {
                    key: 0,
                    title: _ctx.$t("main.publish.vuepress.choose.path.use.default.tip"),
                    type: "info",
                    closable: false
                  }, null, 8, ["title"])) : createCommentVNode("", true)]),
                  _: 1
                }, 8, ["label"])) : createCommentVNode("", true), vuepressGithubEnabled.value && !useDefaultPath.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 12,
                  label: _ctx.$t("main.publish.vuepress.choose.path")
                }, {
                  default: withCtx(() => [createVNode(_component_el_tree_select, {
                    modelValue: formData.value.customPath,
                    "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => formData.value.customPath = $event),
                    lazy: "",
                    "check-strictly": true,
                    load: customLoad,
                    props: customProps
                  }, null, 8, ["modelValue"])]),
                  _: 1
                }, 8, ["label"])) : createCommentVNode("", true), vuepressGithubEnabled.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 13,
                  label: _ctx.$t("main.publish.vuepress.choose.title")
                }, {
                  default: withCtx(() => [createVNode(_component_el_input, {
                    modelValue: formData.value.title,
                    "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => formData.value.title = $event)
                  }, null, 8, ["modelValue"]), vuepressGithubEnabled.value ? (openBlock(), createBlock(_component_el_alert, {
                    key: 0,
                    title: _ctx.$t("main.publish.vuepress.choose.title.tip"),
                    type: "error",
                    closable: false
                  }, null, 8, ["title"])) : createCommentVNode("", true)]),
                  _: 1
                }, 8, ["label"])) : createCommentVNode("", true), createVNode(_component_el_form_item, {
                  label: ""
                }, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: "primary",
                    onClick: doPublish,
                    loading: isPublishLoading.value
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(isPublishLoading.value ? _ctx.$t("main.publish.loading") : isPublished.value ? _ctx.$t("main.update") : _ctx.$t("main.publish")), 1)]),
                    _: 1
                  }, 8, ["loading"]), createVNode(_component_el_button, {
                    onClick: cancelPublish,
                    loading: isCancelLoading.value
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("main.cancel")), 1)]),
                    _: 1
                  }, 8, ["loading"])]),
                  _: 1
                }), createVNode(_component_el_form_item, null, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: "danger",
                    text: "",
                    disabled: ""
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(isPublished.value ? _ctx.$t("main.publish.status.published") : _ctx.$t("main.publish.status.unpublish")), 1)]),
                    _: 1
                  }), isPublished.value ? (openBlock(), createElementBlock("a", {
                    key: 0,
                    href: previewUrl.value,
                    title: previewUrl.value,
                    target: "_blank"
                  }, toDisplayString$1(_ctx.$t("main.publish.vuepress.see.preview")), 9, _hoisted_1$4)) : createCommentVNode("", true)]),
                  _: 1
                })]),
                _: 1
              })]),
              _: 1
            }), createVNode(_component_el_main, null, {
              default: withCtx(() => [createVNode(_component_el_form, {
                "label-width": "75px"
              }, {
                default: withCtx(() => [createVNode(_component_el_form_item, null, {
                  default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("main.yaml.formatter")), 1)]),
                  _: 1
                }), createVNode(_component_el_form_item, null, {
                  default: withCtx(() => [createVNode(_component_el_input, {
                    modelValue: vuepressData.value.vuepressFullContent,
                    "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => vuepressData.value.vuepressFullContent = $event),
                    autosize: {
                      minRows: 5,
                      maxRows: 8
                    },
                    onFocus: _cache[12] || (_cache[12] = ($event) => $event.target.select()),
                    ref_key: "fmtRefInput",
                    ref: fmtRefInput,
                    type: "textarea"
                  }, null, 8, ["modelValue"])]),
                  _: 1
                }), createVNode(_component_el_form_item, null, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: "primary",
                    onClick: convertAttrToYAML
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("main.siyuan.to.yaml")), 1)]),
                    _: 1
                  })]),
                  _: 1
                }), createVNode(_component_el_form_item, null, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: "primary",
                    onClick: convertYAMLToAttr
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("main.yaml.to.siyuan")), 1)]),
                    _: 1
                  })]),
                  _: 1
                }), createVNode(_component_el_form_item, null, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: "primary",
                    onClick: copyToClipboard$1
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("main.copy")), 1)]),
                    _: 1
                  })]),
                  _: 1
                })]),
                _: 1
              })]),
              _: 1
            })]),
            _: 1
          });
        };
      }
    });
    const _hoisted_1$3 = ["href", "title"];
    const __default__$d = {
      name: "MetaweblogMain"
    };
    const _sfc_main$d = /* @__PURE__ */ defineComponent({
      ...__default__$d,
      props: {
        isReload: {
          type: Boolean,
          default: false
        },
        apiType: {
          type: String,
          default: ""
        },
        useAdaptor: {
          type: Boolean,
          default: false
        }
      },
      setup(__props) {
        const props = __props;
        const {
          t
        } = useI18n_1();
        const blogName = ref("");
        const apiTypeInfo = ref(t("setting.blog.platform.support.metaweblog") + props.apiType + " ");
        const apiStatus = ref(false);
        const isSlugLoading = ref(false);
        const isDescLoading = ref(false);
        const isTagLoading = ref(false);
        const isGenLoading = ref(false);
        const isPublishLoading = ref(false);
        const isCancelLoading = ref(false);
        const editMode = ref(false);
        const forceRefresh = ref(false);
        const slugHashEnabled = ref(false);
        const isPublished = ref(false);
        const previewUrl = ref("");
        const formData = reactive({
          postid: "",
          title: "",
          customSlug: "",
          desc: "",
          created: "",
          checkList: ["1"],
          tag: {
            inputValue: "",
            dynamicTags: [],
            inputVisible: false
          },
          categories: ["\u9ED8\u8BA4\u5206\u7C7B"]
        });
        const siyuanData = reactive({
          pageId: "",
          meta: {
            tags: ""
          }
        });
        const simpleMode = () => {
          editMode.value = false;
        };
        const complexMode = () => {
          editMode.value = true;
        };
        const initPage = async () => {
          const pageId = await getPageId(true);
          if (!pageId || pageId === "") {
            return;
          }
          let conf = getJSONConf(props.apiType);
          if (!isEmptyObject(conf)) {
            blogName.value = conf.blogName;
          }
          slugHashEnabled.value = true;
          siyuanData.pageId = pageId;
          siyuanData.meta = await getPageAttrs(pageId);
          const page = await getPage(pageId);
          logUtil.logInfo("MetaweblogMain\u521D\u59CB\u5316\u9875\u9762,meta=>", siyuanData.meta);
          formData.title = page.content;
          formData.customSlug = siyuanData.meta[SIYUAN_PAGE_ATTR_KEY.SIYUAN_PAGE_ATTR_CUSTOM_SLUG_KEY];
          formData.desc = siyuanData.meta[SIYUAN_PAGE_ATTR_KEY.SIYUAN_PAGE_ATTR_CUSTOM_DESC_KEY];
          formData.created = formatNumToZhDate(page.created);
          formData.tag.dynamicTags = [];
          const tagstr = siyuanData.meta.tags || "";
          const tgarr = tagstr.split(",");
          for (let i2 = 0; i2 < tgarr.length; i2++) {
            const tg = tgarr[i2];
            if (tg != "") {
              formData.tag.dynamicTags.push(tgarr[i2]);
            }
          }
          isPublished.value = getPublishStatus(props.apiType, siyuanData.meta);
          if (isPublished.value) {
            const metaweblogCfg = getJSONConf(props.apiType);
            const meta = siyuanData.meta;
            formData.postid = meta[metaweblogCfg.posidKey];
            const postUrl = metaweblogCfg.previewUrl.replace("[postid]", formData.postid);
            previewUrl.value = pathJoin(metaweblogCfg.home, postUrl);
          }
          apiStatus.value = conf.apiStatus;
        };
        onMounted(async () => {
          await initPage();
        });
        function checkForce() {
          if (isEmptyString(formData.customSlug) || isEmptyString(formData.desc) || formData.tag.dynamicTags.length == 0) {
            return true;
          }
          if (!forceRefresh.value) {
            logUtil.logWarn(t("main.force.refresh.tip"));
            return false;
          }
          return true;
        }
        const makeSlug = async (hideTip) => {
          if (!checkForce()) {
            return;
          }
          isSlugLoading.value = true;
          const page = await getPage(siyuanData.pageId);
          logUtil.logInfo("page=>", page);
          const title2 = page.content;
          logUtil.logInfo("title=>", title2);
          if (formData.checkList.length > 0) {
            const result = await zhSlugify(title2);
            logUtil.logInfo("result=>", result);
            if (result) {
              formData.customSlug = result;
            } else {
              ElMessage.success(t("main.opt.failure"));
            }
          } else {
            formData.customSlug = await pingyinSlugify(title2);
          }
          if (slugHashEnabled.value) {
            const newstr = page.content + new Date().toISOString();
            const hashstr = "-" + dist(newstr).toLowerCase();
            formData.customSlug += hashstr;
          }
          isSlugLoading.value = false;
          if (hideTip != true) {
            ElMessage.success(t("main.opt.success"));
          }
        };
        const makeDesc = async (hideTip) => {
          if (!checkForce()) {
            return;
          }
          isDescLoading.value = true;
          const data = await getPageMd(siyuanData.pageId);
          const md = data.content;
          let html = mdToHtml(md);
          formData.desc = parseHtml(html, CONSTANTS.MAX_PREVIEW_LENGTH, true);
          isDescLoading.value = false;
          if (hideTip != true) {
            ElMessage.success(t("main.opt.success"));
          }
        };
        const tagHandleClose = (tag) => {
          formData.tag.dynamicTags.splice(formData.tag.dynamicTags.indexOf(tag), 1);
        };
        const tagRefInput = ref();
        const tagShowInput = () => {
          formData.tag.inputVisible = true;
          nextTick$1(() => {
            tagRefInput.value.focus();
          });
        };
        const tagHandleInputConfirm = () => {
          if (formData.tag.inputValue) {
            formData.tag.dynamicTags.push(formData.tag.inputValue);
          }
          formData.tag.inputVisible = false;
          formData.tag.inputValue = "";
        };
        async function fetchTag(hideTip) {
          if (!checkForce()) {
            return;
          }
          isTagLoading.value = true;
          const data = await getPageMd(siyuanData.pageId);
          const md = data.content;
          const genTags = await cutWords(md);
          logUtil.logInfo("genTags=>", genTags);
          const hotTags = jiebaToHotWords(genTags, 5);
          logUtil.logInfo("hotTags=>", hotTags);
          for (let i2 = 0; i2 < hotTags.length; i2++) {
            if (!formData.tag.dynamicTags.includes(hotTags[i2])) {
              formData.tag.dynamicTags.push(hotTags[i2]);
            }
          }
          isTagLoading.value = false;
          if (hideTip != true) {
            ElMessage.success(t("main.opt.success"));
          }
        }
        const saveAttrToSiyuan = async (hideTip) => {
          const customAttr = {
            [SIYUAN_PAGE_ATTR_KEY.SIYUAN_PAGE_ATTR_CUSTOM_SLUG_KEY]: formData.customSlug,
            [SIYUAN_PAGE_ATTR_KEY.SIYUAN_PAGE_ATTR_CUSTOM_DESC_KEY]: formData.desc,
            tags: formData.tag.dynamicTags.join(",")
          };
          await setPageAttrs(siyuanData.pageId, customAttr);
          logUtil.logInfo("MetaweblogMain\u4FDD\u5B58\u5C5E\u6027\u5230\u601D\u6E90\u7B14\u8BB0,meta=>", customAttr);
          if (hideTip != true) {
            await initPage();
            ElMessage.success(t("main.opt.success"));
          }
        };
        const oneclickAttr = async (hideTip) => {
          isGenLoading.value = true;
          await makeSlug(true);
          await makeDesc(true);
          await fetchTag(true);
          await saveAttrToSiyuan(true);
          logUtil.logWarn("\u53D1\u5E03\u5C5E\u6027\u5B8C\u6210");
          isGenLoading.value = false;
          if (hideTip != true) {
            ElMessage.success(t("main.publish.oneclick.attr.finish"));
          }
        };
        const doPublish = async () => {
          if (!apiStatus.value) {
            ElMessage.error(t("setting.blog.vali.tip.metaweblog"));
            return;
          }
          isPublishLoading.value = true;
          try {
            await oneclickAttr(true);
            const metaweblogCfg = getJSONConf(props.apiType);
            const api = new API(props.apiType);
            const data = await getPageMd(siyuanData.pageId);
            const md = removeWidgetTag(data.content);
            let content = md;
            if (PageType.Html == metaweblogCfg.pageType) {
              content = render(md);
            }
            const post = new Post();
            post.title = formData.title;
            post.wp_slug = formData.customSlug;
            post.description = content;
            post.categories = formData.categories;
            post.mt_keywords = formData.tag.dynamicTags.join(",");
            if (props.apiType == API_TYPE_CONSTANTS.API_TYPE_CNBLOGS) {
              post.categories.push("[Markdown]");
            }
            post.dateCreated = new Date();
            const publish = true;
            let postid;
            if (isPublished.value) {
              postid = formData.postid;
              const flag = await api.editPost(postid, post, true);
              if (!flag) {
                ElMessage.error("\u6587\u7AE0\u66F4\u65B0\u5931\u8D25");
                throw new Error("\u6587\u7AE0\u66F4\u65B0\u5931\u8D25=>" + postid);
              }
              logUtil.logWarn("\u6587\u7AE0\u5DF2\u66F4\u65B0\uFF0Cpostid=>", postid);
            } else {
              postid = await api.newPost(post, publish);
              logUtil.logWarn("\u5F53\u524D\u4FDD\u5B58\u7684posidKey=>", metaweblogCfg.posidKey);
              const customAttr = {
                [metaweblogCfg.posidKey]: postid
              };
              await setPageAttrs(siyuanData.pageId, customAttr);
              logUtil.logInfo("MetaweblogMain\u53D1\u5E03\u6210\u529F\uFF0C\u4FDD\u5B58postid,meta=>", customAttr);
              logUtil.logWarn("\u6587\u7AE0\u53D1\u5E03\u6210\u529F\uFF0Cpostid=>", postid);
            }
            await initPage();
            ElMessage.success(t("main.opt.success"));
          } catch (e2) {
            logUtil.logError("\u53D1\u5E03\u5F02\u5E38");
            ElMessage.error(t("main.opt.failure"));
            throw new Error(e2);
          }
          isPublishLoading.value = false;
        };
        const cancelPublish = async () => {
          isCancelLoading.value = true;
          ElMessageBox.confirm(t("main.opt.warning.tip"), t("main.opt.warning"), {
            confirmButtonText: t("main.opt.ok"),
            cancelButtonText: t("main.opt.cancel"),
            type: "warning"
          }).then(async () => {
            await doCancel(true);
            isCancelLoading.value = false;
            ElMessage.warning(t("main.opt.status.cancel"));
          }).catch((e2) => {
            ElMessage({
              type: "error",
              message: t("main.opt.failure")
            });
            isCancelLoading.value = false;
            throw new Error(e2);
          });
        };
        const doCancel = async (isInit) => {
          const metaweblogCfg = getJSONConf(props.apiType);
          logUtil.logInfo("\u51C6\u5907\u53D6\u6D88\u53D1\u5E03\uFF0Cpostid=>", formData.postid);
          const api = new API(props.apiType);
          const flag = await api.deletePost(formData.postid);
          if (!flag) {
            ElMessage.error("\u6587\u7AE0\u5220\u9664\u5931\u8D25");
            throw new Error("\u6587\u7AE0\u5220\u9664\u5931\u8D25");
          }
          const customAttr = {
            [metaweblogCfg.posidKey]: ""
          };
          await setPageAttrs(siyuanData.pageId, customAttr);
          logUtil.logWarn("MetaweblogMain\u53D6\u6D88\u53D1\u5E03,meta=>", customAttr);
          if (isInit) {
            await initPage();
          }
        };
        return (_ctx, _cache) => {
          const _component_el_alert = resolveComponent("el-alert");
          const _component_el_switch = resolveComponent("el-switch");
          const _component_el_form_item = resolveComponent("el-form-item");
          const _component_el_button = resolveComponent("el-button");
          const _component_el_input = resolveComponent("el-input");
          const _component_el_checkbox = resolveComponent("el-checkbox");
          const _component_el_checkbox_group = resolveComponent("el-checkbox-group");
          const _component_el_date_picker = resolveComponent("el-date-picker");
          const _component_el_tag = resolveComponent("el-tag");
          const _component_el_form = resolveComponent("el-form");
          const _component_el_main = resolveComponent("el-main");
          const _component_el_container = resolveComponent("el-container");
          return openBlock(), createBlock(_component_el_container, null, {
            default: withCtx(() => [createVNode(_component_el_main, {
              class: "blog-main"
            }, {
              default: withCtx(() => [createVNode(_component_el_alert, {
                class: "top-version-tip",
                title: apiTypeInfo.value + blogName.value,
                type: "info",
                closable: false
              }, null, 8, ["title"]), !apiStatus.value ? (openBlock(), createBlock(_component_el_alert, {
                key: 0,
                class: "top-version-tip",
                title: _ctx.$t("setting.blog.vali.tip.metaweblog"),
                type: "error",
                closable: false
              }, null, 8, ["title"])) : createCommentVNode("", true), __props.useAdaptor ? (openBlock(), createBlock(_component_el_alert, {
                key: 1,
                class: "top-version-tip",
                title: _ctx.$t("setting.conf.tip"),
                type: "error",
                closable: false
              }, null, 8, ["title"])) : createCommentVNode("", true), createVNode(_component_el_form, {
                "label-width": "120px"
              }, {
                default: withCtx(() => [editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 0,
                  label: _ctx.$t("main.force.refresh")
                }, {
                  default: withCtx(() => [createVNode(_component_el_switch, {
                    modelValue: forceRefresh.value,
                    "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => forceRefresh.value = $event)
                  }, null, 8, ["modelValue"]), !forceRefresh.value ? (openBlock(), createBlock(_component_el_alert, {
                    key: 0,
                    title: _ctx.$t("main.force.refresh.tip"),
                    type: "warning",
                    closable: false
                  }, null, 8, ["title"])) : createCommentVNode("", true)]),
                  _: 1
                }, 8, ["label"])) : createCommentVNode("", true), createVNode(_component_el_form_item, {
                  label: _ctx.$t("main.publish.vuepress.editmode")
                }, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: editMode.value ? "default" : "primary",
                    onClick: simpleMode
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("main.publish.vuepress.editmode.simple")), 1)]),
                    _: 1
                  }, 8, ["type"])]),
                  _: 1
                }, 8, ["label"]), createVNode(_component_el_form_item, null, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: editMode.value ? "primary" : "default",
                    onClick: complexMode
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("main.publish.vuepress.editmode.complex")), 1)]),
                    _: 1
                  }, 8, ["type"])]),
                  _: 1
                }), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 1,
                  label: _ctx.$t("main.slug")
                }, {
                  default: withCtx(() => [createVNode(_component_el_input, {
                    modelValue: formData.customSlug,
                    "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => formData.customSlug = $event)
                  }, null, 8, ["modelValue"])]),
                  _: 1
                }, 8, ["label"])) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 2
                }, {
                  default: withCtx(() => [createVNode(_component_el_checkbox_group, {
                    modelValue: formData.checkList,
                    "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => formData.checkList = $event)
                  }, {
                    default: withCtx(() => [createVNode(_component_el_checkbox, {
                      label: "1"
                    }, {
                      default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("main.use.google.translate")), 1)]),
                      _: 1
                    })]),
                    _: 1
                  }, 8, ["modelValue"])]),
                  _: 1
                })) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 3
                }, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: "primary",
                    class: "make-slug-btn",
                    onClick: makeSlug,
                    loading: isSlugLoading.value
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(isSlugLoading.value ? _ctx.$t("main.opt.loading") : _ctx.$t("main.auto.fetch.slug")), 1)]),
                    _: 1
                  }, 8, ["loading"])]),
                  _: 1
                })) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 4,
                  label: _ctx.$t("main.use.hash")
                }, {
                  default: withCtx(() => [createVNode(_component_el_switch, {
                    modelValue: slugHashEnabled.value,
                    "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => slugHashEnabled.value = $event)
                  }, null, 8, ["modelValue"]), !slugHashEnabled.value ? (openBlock(), createBlock(_component_el_alert, {
                    key: 0,
                    title: _ctx.$t("main.use.hash.tip"),
                    type: "warning",
                    closable: false
                  }, null, 8, ["title"])) : createCommentVNode("", true)]),
                  _: 1
                }, 8, ["label"])) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 5,
                  label: _ctx.$t("main.desc")
                }, {
                  default: withCtx(() => [createVNode(_component_el_input, {
                    type: "textarea",
                    modelValue: formData.desc,
                    "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => formData.desc = $event)
                  }, null, 8, ["modelValue"])]),
                  _: 1
                }, 8, ["label"])) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 6
                }, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: "primary",
                    onClick: makeDesc,
                    loading: isDescLoading.value
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(isDescLoading.value ? _ctx.$t("main.opt.loading") : _ctx.$t("main.auto.fetch.desc")), 1)]),
                    _: 1
                  }, 8, ["loading"])]),
                  _: 1
                })) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 7,
                  label: _ctx.$t("main.create.time")
                }, {
                  default: withCtx(() => [createVNode(_component_el_date_picker, {
                    type: "datetime",
                    modelValue: formData.created,
                    "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => formData.created = $event),
                    format: "YYYY-MM-DD HH:mm:ss",
                    "value-format": "YYYY-MM-DD HH:mm:ss",
                    placeholder: _ctx.$t("main.create.time.placeholder")
                  }, null, 8, ["modelValue", "placeholder"])]),
                  _: 1
                }, 8, ["label"])) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 8,
                  label: _ctx.$t("main.tag")
                }, {
                  default: withCtx(() => [(openBlock(true), createElementBlock(Fragment, null, renderList(formData.tag.dynamicTags, (tag) => {
                    return openBlock(), createBlock(_component_el_tag, {
                      key: tag,
                      class: "mx-1",
                      closable: "",
                      "disable-transitions": false,
                      onClose: ($event) => tagHandleClose(tag)
                    }, {
                      default: withCtx(() => [createTextVNode(toDisplayString$1(tag), 1)]),
                      _: 2
                    }, 1032, ["onClose"]);
                  }), 128)), formData.tag.inputVisible ? (openBlock(), createBlock(_component_el_input, {
                    key: 0,
                    ref_key: "tagRefInput",
                    ref: tagRefInput,
                    modelValue: formData.tag.inputValue,
                    "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => formData.tag.inputValue = $event),
                    class: "ml-1 w-20",
                    size: "small",
                    onKeyup: withKeys(tagHandleInputConfirm, ["enter"]),
                    onBlur: tagHandleInputConfirm
                  }, null, 8, ["modelValue", "onKeyup"])) : (openBlock(), createBlock(_component_el_button, {
                    key: 1,
                    class: "button-new-tag ml-1 el-tag",
                    size: "small",
                    onClick: tagShowInput
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("main.tag.new")), 1)]),
                    _: 1
                  }))]),
                  _: 1
                }, 8, ["label"])) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 9
                }, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: "primary",
                    onClick: fetchTag,
                    loading: isTagLoading.value
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(isTagLoading.value ? _ctx.$t("main.opt.loading") : _ctx.$t("main.auto.fetch.tag")), 1)]),
                    _: 1
                  }, 8, ["loading"])]),
                  _: 1
                })) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 10
                }, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: "primary",
                    onClick: saveAttrToSiyuan
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("main.save.attr.to.siyuan")), 1)]),
                    _: 1
                  })]),
                  _: 1
                })) : createCommentVNode("", true), createVNode(_component_el_form_item, {
                  label: _ctx.$t("main.opt.quick")
                }, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: "primary",
                    onClick: oneclickAttr,
                    loading: isGenLoading.value
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(isGenLoading.value ? _ctx.$t("main.opt.loading") : _ctx.$t("main.publish.oneclick.attr")), 1)]),
                    _: 1
                  }, 8, ["loading"])]),
                  _: 1
                }, 8, ["label"]), createVNode(_component_el_form_item, {
                  label: ""
                }, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: "primary",
                    onClick: doPublish,
                    loading: isPublishLoading.value
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(isPublishLoading.value ? _ctx.$t("main.publish.loading") : isPublished.value ? _ctx.$t("main.update") : _ctx.$t("main.publish")), 1)]),
                    _: 1
                  }, 8, ["loading"]), createVNode(_component_el_button, {
                    onClick: cancelPublish,
                    loading: isCancelLoading.value
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("main.cancel")), 1)]),
                    _: 1
                  }, 8, ["loading"])]),
                  _: 1
                }), createVNode(_component_el_form_item, null, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: "danger",
                    text: "",
                    disabled: ""
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(isPublished.value ? _ctx.$t("main.publish.status.published") : _ctx.$t("main.publish.status.unpublish")), 1)]),
                    _: 1
                  }), isPublished.value ? (openBlock(), createElementBlock("a", {
                    key: 0,
                    href: previewUrl.value,
                    title: previewUrl.value,
                    target: "_blank"
                  }, toDisplayString$1(_ctx.$t("main.publish.vuepress.see.preview")), 9, _hoisted_1$3)) : createCommentVNode("", true)]),
                  _: 1
                })]),
                _: 1
              })]),
              _: 1
            })]),
            _: 1
          });
        };
      }
    });
    const MetaweblogMain_vue_vue_type_style_index_0_scoped_85f92c86_lang = "";
    const MetaweblogMain = /* @__PURE__ */ _export_sfc(_sfc_main$d, [["__scopeId", "data-v-85f92c86"]]);
    const __default__$c = {
      name: "JVueMain",
      components: {
        MetaweblogMain
      }
    };
    const _sfc_main$c = /* @__PURE__ */ defineComponent({
      ...__default__$c,
      setup(__props) {
        const apiType = ref(API_TYPE_CONSTANTS.API_TYPE_JVUE);
        return (_ctx, _cache) => {
          return openBlock(), createBlock(MetaweblogMain, {
            "api-type": apiType.value
          }, null, 8, ["api-type"]);
        };
      }
    });
    const __default__$b = {
      name: "CnblogsMain",
      components: {
        MetaweblogMain
      }
    };
    const _sfc_main$b = /* @__PURE__ */ defineComponent({
      ...__default__$b,
      setup(__props) {
        const apiType = ref(API_TYPE_CONSTANTS.API_TYPE_CNBLOGS);
        return (_ctx, _cache) => {
          return openBlock(), createBlock(MetaweblogMain, {
            "api-type": apiType.value
          }, null, 8, ["api-type"]);
        };
      }
    });
    const __default__$a = {
      name: "ConfluenceMain",
      components: {
        MetaweblogMain
      }
    };
    const _sfc_main$a = /* @__PURE__ */ defineComponent({
      ...__default__$a,
      setup(__props) {
        const apiType = ref(API_TYPE_CONSTANTS.API_TYPE_CONFLUENCE);
        return (_ctx, _cache) => {
          return openBlock(), createBlock(MetaweblogMain, {
            "api-type": apiType.value,
            "use-adaptor": true
          }, null, 8, ["api-type"]);
        };
      }
    });
    const __default__$9 = {
      name: "WordpressMain",
      components: {
        MetaweblogMain
      }
    };
    const _sfc_main$9 = /* @__PURE__ */ defineComponent({
      ...__default__$9,
      setup(__props) {
        const apiType = ref(API_TYPE_CONSTANTS.API_TYPE_WORDPRESS);
        return (_ctx, _cache) => {
          return openBlock(), createBlock(MetaweblogMain, {
            "api-type": apiType.value
          }, null, 8, ["api-type"]);
        };
      }
    });
    const _hoisted_1$2 = ["href", "title"];
    const __default__$8 = {
      name: "CommonBlogMain"
    };
    const _sfc_main$8 = /* @__PURE__ */ defineComponent({
      ...__default__$8,
      props: {
        isReload: {
          type: Boolean,
          default: false
        },
        apiType: {
          type: String,
          default: ""
        },
        cfg: {
          type: CommonblogCfg,
          default: null
        }
      },
      setup(__props) {
        const props = __props;
        const {
          t
        } = useI18n_1();
        const blogName = ref("");
        const apiTypeInfo = ref(t("setting.blog.platform.support.common") + props.apiType + " ");
        const apiStatus = ref(false);
        const isSlugLoading = ref(false);
        const isDescLoading = ref(false);
        const isTagLoading = ref(false);
        const isGenLoading = ref(false);
        const isPublishLoading = ref(false);
        const isCancelLoading = ref(false);
        const editMode = ref(false);
        const forceRefresh = ref(false);
        const slugHashEnabled = ref(false);
        const isPublished = ref(false);
        const previewUrl = ref("");
        const formData = reactive({
          postid: "",
          title: "",
          customSlug: "",
          desc: "",
          created: "",
          checkList: ["1"],
          tag: {
            inputValue: "",
            dynamicTags: [],
            inputVisible: false
          },
          categories: ["\u9ED8\u8BA4\u5206\u7C7B"]
        });
        const siyuanData = reactive({
          pageId: "",
          meta: {
            tags: ""
          }
        });
        const simpleMode = () => {
          editMode.value = false;
        };
        const complexMode = () => {
          editMode.value = true;
        };
        const initPage = async () => {
          const pageId = await getPageId(true);
          if (!pageId || pageId === "") {
            return;
          }
          const conf = getJSONConf(props.apiType);
          if (!isEmptyObject(conf)) {
            blogName.value = conf.blogName || "";
          }
          slugHashEnabled.value = true;
          siyuanData.pageId = pageId;
          siyuanData.meta = await getPageAttrs(pageId);
          const page = await getPage(pageId);
          logUtil.logInfo("CommonblogMain\u521D\u59CB\u5316\u9875\u9762,meta=>", siyuanData.meta);
          formData.title = page.content;
          formData.customSlug = siyuanData.meta[SIYUAN_PAGE_ATTR_KEY.SIYUAN_PAGE_ATTR_CUSTOM_SLUG_KEY];
          formData.desc = siyuanData.meta[SIYUAN_PAGE_ATTR_KEY.SIYUAN_PAGE_ATTR_CUSTOM_DESC_KEY];
          formData.created = formatNumToZhDate(page.created);
          formData.tag.dynamicTags = [];
          const tagstr = siyuanData.meta.tags || "";
          const tgarr = tagstr.split(",");
          for (let i2 = 0; i2 < tgarr.length; i2++) {
            const tg = tgarr[i2];
            if (tg != "") {
              formData.tag.dynamicTags.push(tgarr[i2]);
            }
          }
          isPublished.value = getPublishStatus(props.apiType, siyuanData.meta);
          if (isPublished.value) {
            const commonCfg = getJSONConf(props.apiType);
            const meta = siyuanData.meta;
            formData.postid = meta[commonCfg.posidKey || ""];
            const purl = commonCfg.previewUrl || "";
            const postUrl = purl.replace("[postid]", formData.postid).replace("[notebook]", commonCfg.blogid || "");
            previewUrl.value = pathJoin(commonCfg.home || "", postUrl);
          }
          apiStatus.value = conf.apiStatus || false;
        };
        onMounted(async () => {
          await initPage();
        });
        function checkForce() {
          if (isEmptyString(formData.customSlug) || isEmptyString(formData.desc) || formData.tag.dynamicTags.length == 0) {
            return true;
          }
          if (!forceRefresh.value) {
            logUtil.logWarn(t("main.force.refresh.tip"));
            return false;
          }
          return true;
        }
        const makeSlug = async (hideTip) => {
          if (!checkForce()) {
            return;
          }
          isSlugLoading.value = true;
          const page = await getPage(siyuanData.pageId);
          logUtil.logInfo("page=>", page);
          const title2 = page.content;
          logUtil.logInfo("title=>", title2);
          if (formData.checkList.length > 0) {
            const result = await zhSlugify(title2);
            logUtil.logInfo("result=>", result);
            if (result) {
              formData.customSlug = result;
            } else {
              ElMessage.success(t("main.opt.failure"));
            }
          } else {
            formData.customSlug = await pingyinSlugify(title2);
          }
          if (slugHashEnabled.value) {
            const newstr = page.content + new Date().toISOString();
            const hashstr = "-" + dist(newstr).toLowerCase();
            formData.customSlug += hashstr;
          }
          isSlugLoading.value = false;
          if (hideTip != true) {
            ElMessage.success(t("main.opt.success"));
          }
        };
        const makeDesc = async (hideTip) => {
          if (!checkForce()) {
            return;
          }
          isDescLoading.value = true;
          const data = await getPageMd(siyuanData.pageId);
          const md = data.content;
          let html = mdToHtml(md);
          formData.desc = parseHtml(html, CONSTANTS.MAX_PREVIEW_LENGTH, true);
          isDescLoading.value = false;
          if (hideTip != true) {
            ElMessage.success(t("main.opt.success"));
          }
        };
        const tagHandleClose = (tag) => {
          formData.tag.dynamicTags.splice(formData.tag.dynamicTags.indexOf(tag), 1);
        };
        const tagRefInput = ref();
        const tagShowInput = () => {
          formData.tag.inputVisible = true;
          nextTick$1(() => {
            tagRefInput.value.focus();
          });
        };
        const tagHandleInputConfirm = () => {
          if (formData.tag.inputValue) {
            formData.tag.dynamicTags.push(formData.tag.inputValue);
          }
          formData.tag.inputVisible = false;
          formData.tag.inputValue = "";
        };
        async function fetchTag(hideTip) {
          if (!checkForce()) {
            return;
          }
          isTagLoading.value = true;
          const data = await getPageMd(siyuanData.pageId);
          const md = data.content;
          const genTags = await cutWords(md);
          logUtil.logInfo("genTags=>", genTags);
          const hotTags = jiebaToHotWords(genTags, 5);
          logUtil.logInfo("hotTags=>", hotTags);
          for (let i2 = 0; i2 < hotTags.length; i2++) {
            if (!formData.tag.dynamicTags.includes(hotTags[i2])) {
              formData.tag.dynamicTags.push(hotTags[i2]);
            }
          }
          isTagLoading.value = false;
          if (hideTip != true) {
            ElMessage.success(t("main.opt.success"));
          }
        }
        const saveAttrToSiyuan = async (hideTip) => {
          const customAttr = {
            [SIYUAN_PAGE_ATTR_KEY.SIYUAN_PAGE_ATTR_CUSTOM_SLUG_KEY]: formData.customSlug,
            [SIYUAN_PAGE_ATTR_KEY.SIYUAN_PAGE_ATTR_CUSTOM_DESC_KEY]: formData.desc,
            tags: formData.tag.dynamicTags.join(",")
          };
          await setPageAttrs(siyuanData.pageId, customAttr);
          logUtil.logInfo("CommonblogMain\u4FDD\u5B58\u5C5E\u6027\u5230\u601D\u6E90\u7B14\u8BB0,meta=>", customAttr);
          if (hideTip != true) {
            await initPage();
            ElMessage.success(t("main.opt.success"));
          }
        };
        const oneclickAttr = async (hideTip) => {
          isGenLoading.value = true;
          await makeSlug(true);
          await makeDesc(true);
          await fetchTag(true);
          await saveAttrToSiyuan(true);
          logUtil.logWarn("\u53D1\u5E03\u5C5E\u6027\u5B8C\u6210");
          isGenLoading.value = false;
          if (hideTip != true) {
            ElMessage.success(t("main.publish.oneclick.attr.finish"));
          }
        };
        const doPublish = async () => {
          if (!apiStatus.value) {
            ElMessage.error(t("setting.blog.vali.tip.metaweblog"));
            return;
          }
          isPublishLoading.value = true;
          try {
            await oneclickAttr(true);
            const commonblogCfg = getJSONConf(props.apiType);
            const api = new API(props.apiType);
            const data = await getPageMd(siyuanData.pageId);
            const md = removeWidgetTag(data.content);
            let content = md;
            if (PageType.Html == commonblogCfg.pageType) {
              content = render(md);
            }
            const post = new Post();
            post.title = formData.title;
            post.wp_slug = formData.customSlug;
            post.description = content;
            post.categories = formData.categories;
            post.mt_keywords = formData.tag.dynamicTags.join(",");
            post.dateCreated = new Date();
            const publish = true;
            let postid;
            if (isPublished.value) {
              postid = formData.postid;
              const flag = await api.editPost(postid, post, true);
              if (!flag) {
                ElMessage.error("\u6587\u7AE0\u66F4\u65B0\u5931\u8D25");
                throw new Error("\u6587\u7AE0\u66F4\u65B0\u5931\u8D25=>" + postid);
              }
              logUtil.logWarn("\u6587\u7AE0\u5DF2\u66F4\u65B0\uFF0Cpostid=>", postid);
            } else {
              postid = await api.newPost(post, publish);
              logUtil.logWarn("\u5F53\u524D\u4FDD\u5B58\u7684posidKey=>", commonblogCfg.posidKey);
              const customAttr = {
                [commonblogCfg.posidKey || ""]: postid
              };
              await setPageAttrs(siyuanData.pageId, customAttr);
              logUtil.logInfo("CommonblogMain\u53D1\u5E03\u6210\u529F\uFF0C\u4FDD\u5B58postid,meta=>", customAttr);
              logUtil.logWarn("\u6587\u7AE0\u53D1\u5E03\u6210\u529F\uFF0Cpostid=>", postid);
            }
            await initPage();
            ElMessage.success(t("main.opt.success"));
          } catch (e2) {
            isPublishLoading.value = false;
            logUtil.logError("\u53D1\u5E03\u5F02\u5E38");
            ElMessage.error(t("main.opt.failure"));
            throw new Error(e2);
          }
          isPublishLoading.value = false;
        };
        const cancelPublish = async () => {
          isCancelLoading.value = true;
          ElMessageBox.confirm(t("main.opt.warning.tip"), t("main.opt.warning"), {
            confirmButtonText: t("main.opt.ok"),
            cancelButtonText: t("main.opt.cancel"),
            type: "warning"
          }).then(async () => {
            await doCancel(true);
            isCancelLoading.value = false;
            ElMessage.warning(t("main.opt.status.cancel"));
          }).catch((e2) => {
            ElMessage({
              type: "error",
              message: t("main.opt.failure")
            });
            isCancelLoading.value = false;
            throw new Error(e2);
          });
        };
        const doCancel = async (isInit) => {
          const commonblogCfg = getJSONConf(props.apiType);
          logUtil.logInfo("\u51C6\u5907\u53D6\u6D88\u53D1\u5E03\uFF0Cpostid=>", formData.postid);
          const api = new API(props.apiType);
          const flag = await api.deletePost(formData.postid);
          if (!flag) {
            ElMessage.error("\u6587\u7AE0\u5220\u9664\u5931\u8D25");
            throw new Error("\u6587\u7AE0\u5220\u9664\u5931\u8D25");
          }
          const customAttr = {
            [commonblogCfg.posidKey || ""]: ""
          };
          await setPageAttrs(siyuanData.pageId, customAttr);
          logUtil.logWarn("MetaweblogMain\u53D6\u6D88\u53D1\u5E03,meta=>", customAttr);
          if (isInit) {
            await initPage();
          }
        };
        return (_ctx, _cache) => {
          const _component_el_alert = resolveComponent("el-alert");
          const _component_el_switch = resolveComponent("el-switch");
          const _component_el_form_item = resolveComponent("el-form-item");
          const _component_el_button = resolveComponent("el-button");
          const _component_el_input = resolveComponent("el-input");
          const _component_el_checkbox = resolveComponent("el-checkbox");
          const _component_el_checkbox_group = resolveComponent("el-checkbox-group");
          const _component_el_date_picker = resolveComponent("el-date-picker");
          const _component_el_tag = resolveComponent("el-tag");
          const _component_el_form = resolveComponent("el-form");
          const _component_el_main = resolveComponent("el-main");
          const _component_el_container = resolveComponent("el-container");
          return openBlock(), createBlock(_component_el_container, null, {
            default: withCtx(() => [createVNode(_component_el_main, {
              class: "blog-main"
            }, {
              default: withCtx(() => [createVNode(_component_el_alert, {
                class: "top-version-tip",
                title: apiTypeInfo.value + blogName.value,
                type: "info",
                closable: false
              }, null, 8, ["title"]), !apiStatus.value ? (openBlock(), createBlock(_component_el_alert, {
                key: 0,
                class: "top-version-tip",
                title: _ctx.$t("setting.blog.vali.tip.metaweblog"),
                type: "error",
                closable: false
              }, null, 8, ["title"])) : createCommentVNode("", true), createVNode(_component_el_form, {
                "label-width": "120px"
              }, {
                default: withCtx(() => [editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 0,
                  label: _ctx.$t("main.force.refresh")
                }, {
                  default: withCtx(() => [createVNode(_component_el_switch, {
                    modelValue: forceRefresh.value,
                    "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => forceRefresh.value = $event)
                  }, null, 8, ["modelValue"]), !forceRefresh.value ? (openBlock(), createBlock(_component_el_alert, {
                    key: 0,
                    title: _ctx.$t("main.force.refresh.tip"),
                    type: "warning",
                    closable: false
                  }, null, 8, ["title"])) : createCommentVNode("", true)]),
                  _: 1
                }, 8, ["label"])) : createCommentVNode("", true), createVNode(_component_el_form_item, {
                  label: _ctx.$t("main.publish.vuepress.editmode")
                }, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: editMode.value ? "default" : "primary",
                    onClick: simpleMode
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("main.publish.vuepress.editmode.simple")), 1)]),
                    _: 1
                  }, 8, ["type"])]),
                  _: 1
                }, 8, ["label"]), createVNode(_component_el_form_item, null, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: editMode.value ? "primary" : "default",
                    onClick: complexMode
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("main.publish.vuepress.editmode.complex")), 1)]),
                    _: 1
                  }, 8, ["type"])]),
                  _: 1
                }), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 1,
                  label: _ctx.$t("main.slug")
                }, {
                  default: withCtx(() => [createVNode(_component_el_input, {
                    modelValue: formData.customSlug,
                    "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => formData.customSlug = $event)
                  }, null, 8, ["modelValue"])]),
                  _: 1
                }, 8, ["label"])) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 2
                }, {
                  default: withCtx(() => [createVNode(_component_el_checkbox_group, {
                    modelValue: formData.checkList,
                    "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => formData.checkList = $event)
                  }, {
                    default: withCtx(() => [createVNode(_component_el_checkbox, {
                      label: "1"
                    }, {
                      default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("main.use.google.translate")), 1)]),
                      _: 1
                    })]),
                    _: 1
                  }, 8, ["modelValue"])]),
                  _: 1
                })) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 3
                }, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: "primary",
                    class: "make-slug-btn",
                    onClick: makeSlug,
                    loading: isSlugLoading.value
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(isSlugLoading.value ? _ctx.$t("main.opt.loading") : _ctx.$t("main.auto.fetch.slug")), 1)]),
                    _: 1
                  }, 8, ["loading"])]),
                  _: 1
                })) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 4,
                  label: _ctx.$t("main.use.hash")
                }, {
                  default: withCtx(() => [createVNode(_component_el_switch, {
                    modelValue: slugHashEnabled.value,
                    "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => slugHashEnabled.value = $event)
                  }, null, 8, ["modelValue"]), !slugHashEnabled.value ? (openBlock(), createBlock(_component_el_alert, {
                    key: 0,
                    title: _ctx.$t("main.use.hash.tip"),
                    type: "warning",
                    closable: false
                  }, null, 8, ["title"])) : createCommentVNode("", true)]),
                  _: 1
                }, 8, ["label"])) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 5,
                  label: _ctx.$t("main.desc")
                }, {
                  default: withCtx(() => [createVNode(_component_el_input, {
                    type: "textarea",
                    modelValue: formData.desc,
                    "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => formData.desc = $event)
                  }, null, 8, ["modelValue"])]),
                  _: 1
                }, 8, ["label"])) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 6
                }, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: "primary",
                    onClick: makeDesc,
                    loading: isDescLoading.value
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(isDescLoading.value ? _ctx.$t("main.opt.loading") : _ctx.$t("main.auto.fetch.desc")), 1)]),
                    _: 1
                  }, 8, ["loading"])]),
                  _: 1
                })) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 7,
                  label: _ctx.$t("main.create.time")
                }, {
                  default: withCtx(() => [createVNode(_component_el_date_picker, {
                    type: "datetime",
                    modelValue: formData.created,
                    "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => formData.created = $event),
                    format: "YYYY-MM-DD HH:mm:ss",
                    "value-format": "YYYY-MM-DD HH:mm:ss",
                    placeholder: _ctx.$t("main.create.time.placeholder")
                  }, null, 8, ["modelValue", "placeholder"])]),
                  _: 1
                }, 8, ["label"])) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 8,
                  label: _ctx.$t("main.tag")
                }, {
                  default: withCtx(() => [(openBlock(true), createElementBlock(Fragment, null, renderList(formData.tag.dynamicTags, (tag) => {
                    return openBlock(), createBlock(_component_el_tag, {
                      key: tag,
                      class: "mx-1",
                      closable: "",
                      "disable-transitions": false,
                      onClose: ($event) => tagHandleClose(tag)
                    }, {
                      default: withCtx(() => [createTextVNode(toDisplayString$1(tag), 1)]),
                      _: 2
                    }, 1032, ["onClose"]);
                  }), 128)), formData.tag.inputVisible ? (openBlock(), createBlock(_component_el_input, {
                    key: 0,
                    ref_key: "tagRefInput",
                    ref: tagRefInput,
                    modelValue: formData.tag.inputValue,
                    "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => formData.tag.inputValue = $event),
                    class: "ml-1 w-20",
                    size: "small",
                    onKeyup: withKeys(tagHandleInputConfirm, ["enter"]),
                    onBlur: tagHandleInputConfirm
                  }, null, 8, ["modelValue", "onKeyup"])) : (openBlock(), createBlock(_component_el_button, {
                    key: 1,
                    class: "button-new-tag ml-1 el-tag",
                    size: "small",
                    onClick: tagShowInput
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("main.tag.new")), 1)]),
                    _: 1
                  }))]),
                  _: 1
                }, 8, ["label"])) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 9
                }, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: "primary",
                    onClick: fetchTag,
                    loading: isTagLoading.value
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(isTagLoading.value ? _ctx.$t("main.opt.loading") : _ctx.$t("main.auto.fetch.tag")), 1)]),
                    _: 1
                  }, 8, ["loading"])]),
                  _: 1
                })) : createCommentVNode("", true), editMode.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 10
                }, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: "primary",
                    onClick: saveAttrToSiyuan
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("main.save.attr.to.siyuan")), 1)]),
                    _: 1
                  })]),
                  _: 1
                })) : createCommentVNode("", true), createVNode(_component_el_form_item, {
                  label: _ctx.$t("main.opt.quick")
                }, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: "primary",
                    onClick: oneclickAttr,
                    loading: isGenLoading.value
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(isGenLoading.value ? _ctx.$t("main.opt.loading") : _ctx.$t("main.publish.oneclick.attr")), 1)]),
                    _: 1
                  }, 8, ["loading"])]),
                  _: 1
                }, 8, ["label"]), createVNode(_component_el_form_item, {
                  label: ""
                }, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: "primary",
                    onClick: doPublish,
                    loading: isPublishLoading.value
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(isPublishLoading.value ? _ctx.$t("main.publish.loading") : isPublished.value ? _ctx.$t("main.update") : _ctx.$t("main.publish")), 1)]),
                    _: 1
                  }, 8, ["loading"]), createVNode(_component_el_button, {
                    onClick: cancelPublish,
                    loading: isCancelLoading.value
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("main.cancel")), 1)]),
                    _: 1
                  }, 8, ["loading"])]),
                  _: 1
                }), createVNode(_component_el_form_item, null, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: "danger",
                    text: "",
                    disabled: ""
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(isPublished.value ? _ctx.$t("main.publish.status.published") : _ctx.$t("main.publish.status.unpublish")), 1)]),
                    _: 1
                  }), isPublished.value ? (openBlock(), createElementBlock("a", {
                    key: 0,
                    href: previewUrl.value,
                    title: previewUrl.value,
                    target: "_blank"
                  }, toDisplayString$1(_ctx.$t("main.publish.vuepress.see.preview")), 9, _hoisted_1$2)) : createCommentVNode("", true)]),
                  _: 1
                })]),
                _: 1
              })]),
              _: 1
            })]),
            _: 1
          });
        };
      }
    });
    const __default__$7 = {
      name: "LiandiMain",
      components: {
        CommonBlogMain: _sfc_main$8
      }
    };
    const _sfc_main$7 = /* @__PURE__ */ defineComponent({
      ...__default__$7,
      setup(__props) {
        const apiType = ref(API_TYPE_CONSTANTS.API_TYPE_LIANDI);
        return (_ctx, _cache) => {
          return openBlock(), createBlock(_sfc_main$8, {
            "api-type": apiType.value
          }, null, 8, ["api-type"]);
        };
      }
    });
    const __default__$6 = {
      name: "YuqueMain",
      components: {
        CommonBlogMain: _sfc_main$8
      }
    };
    const _sfc_main$6 = /* @__PURE__ */ defineComponent({
      ...__default__$6,
      setup(__props) {
        const apiType = ref(API_TYPE_CONSTANTS.API_TYPE_YUQUE);
        return (_ctx, _cache) => {
          return openBlock(), createBlock(_sfc_main$8, {
            "api-type": apiType.value
          }, null, 8, ["api-type"]);
        };
      }
    });
    const __default__$5 = {
      name: "KmsMain",
      components: {
        CommonBlogMain: _sfc_main$8
      }
    };
    const _sfc_main$5 = /* @__PURE__ */ defineComponent({
      ...__default__$5,
      setup(__props) {
        const apiType = ref(API_TYPE_CONSTANTS.API_TYPE_KMS);
        return (_ctx, _cache) => {
          return openBlock(), createBlock(_sfc_main$8, {
            "api-type": apiType.value
          }, null, 8, ["api-type"]);
        };
      }
    });
    const __default__$4 = {
      name: "PlantformMain",
      components: {
        VuepressMain: _sfc_main$e,
        JVueMain: _sfc_main$c,
        CnblogsMain: _sfc_main$b,
        ConfluenceMain: _sfc_main$a,
        WordpressMain: _sfc_main$9,
        LiandiMain: _sfc_main$7,
        YuqueMain: _sfc_main$6,
        KmsMain: _sfc_main$5,
        MetaweblogMain
      }
    };
    const _sfc_main$4 = /* @__PURE__ */ defineComponent({
      ...__default__$4,
      props: {
        isReload: {
          type: Boolean,
          default: false
        }
      },
      setup(__props) {
        const props = __props;
        const vuepressEnabled = ref(true);
        const jvueEnabled = ref(false);
        const confEnabled = ref(false);
        const cnblogsEnabled = ref(false);
        const wordpressEnabled = ref(false);
        const liandiEnabled = ref(false);
        const yuqueEnabled = ref(false);
        const kmsEnabled = ref(false);
        let formData = reactive({
          dynamicConfigArray: [],
          metaweblogArray: [],
          wordpressArray: []
        });
        const initDynCfg = (dynCfg) => {
          const newCfg = [];
          dynCfg.forEach((item) => {
            const newItem = new DynamicConfig(item.plantformType, item.plantformKey, item.plantformName);
            const switchKey = "switch-" + item.plantformKey;
            const switchValue = getBooleanConf(switchKey);
            newItem.modelValue = switchValue;
            if (switchValue) {
              newCfg.push(newItem);
            }
          });
          return newCfg;
        };
        const initConf = () => {
          vuepressEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_VUEPRESS_KEY);
          jvueEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_JVUE_KEY);
          confEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_CONF_KEY);
          cnblogsEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_CNBLOGS_KEY);
          wordpressEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_WORDPRESS_KEY);
          liandiEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_LIANDI_KEY);
          yuqueEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_YUQUE_KEY);
          kmsEnabled.value = getBooleanConf(SWITCH_CONSTSNTS.SWITCH_KMS_KEY);
          const dynamicJsonCfg = getDynamicJsonCfg();
          formData.dynamicConfigArray = initDynCfg(dynamicJsonCfg.totalCfg || []);
          formData.metaweblogArray = initDynCfg(dynamicJsonCfg.metaweblogCfg || []);
          formData.wordpressArray = initDynCfg(dynamicJsonCfg.wordpressCfg || []);
          logUtil.logInfo("dynamicJsonCfg=>");
          logUtil.logInfo(JSON.stringify(dynamicJsonCfg));
          logUtil.logInfo("\u5E73\u53F0\u8BBE\u7F6E\u521D\u59CB\u5316");
        };
        const isReloadVuepressMain = ref(false);
        watch(() => props.isReload, (oldValue, newValue) => {
          setBooleanConf(SWITCH_CONSTSNTS.SWITCH_VUEPRESS_KEY, true);
          initConf();
          logUtil.logInfo("plantform-main\u521D\u59CB\u5316");
          if (vuepressEnabled.value) {
            isReloadVuepressMain.value = !isReloadVuepressMain.value;
          }
        });
        onMounted(() => {
          setBooleanConf(SWITCH_CONSTSNTS.SWITCH_VUEPRESS_KEY, true);
          initConf();
          logUtil.logInfo("plantform-main\u521D\u59CB\u5316 onMounted");
        });
        return (_ctx, _cache) => {
          const _component_el_tab_pane = resolveComponent("el-tab-pane");
          const _component_el_tabs = resolveComponent("el-tabs");
          return openBlock(), createBlock(_component_el_tabs, {
            type: "border-card"
          }, {
            default: withCtx(() => [vuepressEnabled.value ? (openBlock(), createBlock(_component_el_tab_pane, {
              key: 0,
              label: _ctx.$t("main.publish.to.vuepress")
            }, {
              default: withCtx(() => [createVNode(_sfc_main$e, {
                "is-reload": isReloadVuepressMain.value
              }, null, 8, ["is-reload"])]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), jvueEnabled.value ? (openBlock(), createBlock(_component_el_tab_pane, {
              key: 1,
              label: _ctx.$t("main.publish.to.jvue")
            }, {
              default: withCtx(() => [createVNode(_sfc_main$c)]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), confEnabled.value ? (openBlock(), createBlock(_component_el_tab_pane, {
              key: 2,
              label: _ctx.$t("main.publish.to.conf")
            }, {
              default: withCtx(() => [createVNode(_sfc_main$a)]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), cnblogsEnabled.value ? (openBlock(), createBlock(_component_el_tab_pane, {
              key: 3,
              label: _ctx.$t("main.publish.to.cnblogs")
            }, {
              default: withCtx(() => [createVNode(_sfc_main$b)]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), wordpressEnabled.value ? (openBlock(), createBlock(_component_el_tab_pane, {
              key: 4,
              label: _ctx.$t("main.publish.to.wordpress")
            }, {
              default: withCtx(() => [createVNode(_sfc_main$9)]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), liandiEnabled.value ? (openBlock(), createBlock(_component_el_tab_pane, {
              key: 5,
              label: _ctx.$t("main.publish.to.liandi")
            }, {
              default: withCtx(() => [createVNode(_sfc_main$7)]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), yuqueEnabled.value ? (openBlock(), createBlock(_component_el_tab_pane, {
              key: 6,
              label: _ctx.$t("main.publish.to.yuque")
            }, {
              default: withCtx(() => [createVNode(_sfc_main$6)]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), kmsEnabled.value ? (openBlock(), createBlock(_component_el_tab_pane, {
              key: 7,
              label: _ctx.$t("main.publish.to.kms")
            }, {
              default: withCtx(() => [createVNode(_sfc_main$5)]),
              _: 1
            }, 8, ["label"])) : createCommentVNode("", true), (openBlock(true), createElementBlock(Fragment, null, renderList(unref(formData).metaweblogArray, (mcfg) => {
              return openBlock(), createBlock(_component_el_tab_pane, {
                label: mcfg.plantformName + "_" + mcfg.plantformType.toUpperCase().substring(0, 1)
              }, {
                default: withCtx(() => [createVNode(MetaweblogMain, {
                  "api-type": mcfg.plantformKey
                }, null, 8, ["api-type"])]),
                _: 2
              }, 1032, ["label"]);
            }), 256)), (openBlock(true), createElementBlock(Fragment, null, renderList(unref(formData).wordpressArray, (wcfg) => {
              return openBlock(), createBlock(_component_el_tab_pane, {
                label: wcfg.plantformName + "_" + wcfg.plantformType.toUpperCase().substring(0, 1)
              }, {
                default: withCtx(() => [createVNode(MetaweblogMain, {
                  "api-type": wcfg.plantformKey
                }, null, 8, ["api-type"])]),
                _: 2
              }, 1032, ["label"]);
            }), 256))]),
            _: 1
          });
        };
      }
    });
    const _hoisted_1$1 = /* @__PURE__ */ createTextVNode(" \u656C\u8BF7\u671F\u5F85 ");
    const __default__$3 = {
      name: "DynamicPlantform"
    };
    const _sfc_main$3 = /* @__PURE__ */ defineComponent({
      ...__default__$3,
      setup(__props) {
        const {
          t
        } = useI18n_1();
        const pType = ref();
        pType.value = PlantformType.Metaweblog;
        const showForm = ref(true);
        let dynamicConfigArray = reactive([]);
        const formRef = ref();
        const formData = reactive(new DynamicConfig(PlantformType.Metaweblog, "", ""));
        const rules2 = reactive({
          plantformKey: [{
            required: true,
            message: () => t("form.validate.name.required")
          }],
          plantformName: [{
            required: true,
            message: () => t("form.validate.name.required")
          }]
        });
        const onPlantformTypeChange = (val) => {
          pType.value = val;
          showForm.value = pType.value == PlantformType.Metaweblog || pType.value == PlantformType.Wordpress;
          logUtil.logInfo(pType.value);
        };
        const reloadTabPage = () => {
          setTimeout(function() {
            if (inBrowser()) {
              const url2 = window.location.href;
              window.location.href = setUrlParameter(url2, "tab", "dynamicp-platform");
            }
          }, 1e3);
        };
        const submitForm = async (formEl) => {
          if (pType.value == "") {
            ElMessage.error(t("dynamic.platform.opt.noselect"));
            return;
          }
          const pkey = formData.plantformKey;
          const ptypeKey = pType.value.toLowerCase() + "-" + formData.plantformKey;
          logUtil.logWarn("\u5C06\u8981\u4FDD\u5B58\u7684\u5E73\u53F0key", ptypeKey);
          if (isDynamicKeyExists(ptypeKey)) {
            ElMessage.error(t("dynamic.platform.opt.key.exist"));
            return;
          }
          const switchKey = "switch-" + ptypeKey;
          const postidKey = "custom-" + ptypeKey + "-post-id";
          if (checkKeyExists(pkey) || checkKeyExists(ptypeKey) || checkKeyExists(switchKey) || checkKeyExists(postidKey)) {
            ElMessage.error(t("dynamic.platform.opt.key.exist"));
            return;
          }
          if (!formEl)
            return;
          const result = await formEl.validate((valid, fields) => {
            if (valid) {
              logUtil.logInfo("\u6821\u9A8C\u6210\u529F");
            } else {
              logUtil.logError(t("main.opt.failure"), fields);
              return;
            }
          });
          if (!result) {
            return;
          }
          const newCfg = new DynamicConfig(pType.value, ptypeKey, formData.plantformName);
          dynamicConfigArray.push(newCfg);
          setDynamicJsonCfg(dynamicConfigArray);
          reloadTabPage();
          ElMessage.success(t("main.opt.success"));
        };
        const tableData = [];
        const num = ref(0);
        const currentRow = ref();
        const currentTip = ref(t("ynamic.platform.opt.item.select"));
        const handleCurrentChange = (val) => {
          currentRow.value = val;
          currentTip.value = t("dynamic.platform.opt.item.select.tip") + currentRow.value.plantformName;
          logUtil.logInfo(currentRow.value);
        };
        const isDynamicKeyExists = (key) => {
          let flag = false;
          logUtil.logInfo("isDynamicKeyExists,dynamicConfigArray=>");
          logUtil.logInfo(dynamicConfigArray);
          for (let i2 = 0; i2 < dynamicConfigArray.length; i2++) {
            if (dynamicConfigArray[i2].plantformKey == key) {
              flag = true;
              break;
            }
          }
          return flag;
        };
        const delRow = async () => {
          if (!currentRow.value || !currentRow.value.plantformKey) {
            ElMessage.error(t("dynamic.platform.opt.item.no.select.tip"));
          }
          for (let i2 = 0; i2 < dynamicConfigArray.length; i2++) {
            logUtil.logInfo(currentRow.value.plantformKey);
            logUtil.logInfo(dynamicConfigArray[i2].plantformKey);
            logUtil.logInfo("------------------------");
            if (currentRow.value.plantformKey == dynamicConfigArray[i2].plantformKey) {
              dynamicConfigArray.splice(i2, 1);
            }
          }
          setDynamicJsonCfg(dynamicConfigArray);
          reloadTabPage();
          ElMessage.success(t("main.opt.success"));
        };
        const initPage = async () => {
          dynamicConfigArray = getDynamicJsonCfg().totalCfg || [];
          for (let i2 = 0; i2 < dynamicConfigArray.length; i2++) {
            tableData.push(dynamicConfigArray[i2]);
          }
          num.value = dynamicConfigArray.length;
          logUtil.logInfo("dynamic init page=>", dynamicConfigArray);
        };
        onMounted(async () => {
          await initPage();
        });
        return (_ctx, _cache) => {
          const _component_el_alert = resolveComponent("el-alert");
          const _component_el_button = resolveComponent("el-button");
          const _component_el_button_group = resolveComponent("el-button-group");
          const _component_el_form_item = resolveComponent("el-form-item");
          const _component_el_input = resolveComponent("el-input");
          const _component_el_form = resolveComponent("el-form");
          const _component_el_header = resolveComponent("el-header");
          const _component_el_table_column = resolveComponent("el-table-column");
          const _component_el_table = resolveComponent("el-table");
          const _component_el_main = resolveComponent("el-main");
          const _component_el_container = resolveComponent("el-container");
          return openBlock(), createBlock(_component_el_container, null, {
            default: withCtx(() => [createVNode(_component_el_header, {
              height: "250px"
            }, {
              default: withCtx(() => [createVNode(_component_el_form, {
                "label-width": "180px",
                ref_key: "formRef",
                ref: formRef,
                model: formData,
                rules: rules2
              }, {
                default: withCtx(() => [createVNode(_component_el_alert, {
                  class: "top-version-tip",
                  title: _ctx.$t("dynamic.platform.tip"),
                  type: "info",
                  closable: false
                }, null, 8, ["title"]), createVNode(_component_el_form_item, {
                  label: _ctx.$t("dynamic.platform.type")
                }, {
                  default: withCtx(() => [createVNode(_component_el_button_group, null, {
                    default: withCtx(() => [createVNode(_component_el_button, {
                      type: pType.value === unref(PlantformType).Metaweblog ? "primary" : "",
                      onClick: _cache[0] || (_cache[0] = ($event) => onPlantformTypeChange(unref(PlantformType).Metaweblog))
                    }, {
                      default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("dynamic.platform.type.metaweblog")), 1)]),
                      _: 1
                    }, 8, ["type"]), createVNode(_component_el_button, {
                      type: pType.value === unref(PlantformType).Wordpress ? "primary" : "",
                      onClick: _cache[1] || (_cache[1] = ($event) => onPlantformTypeChange(unref(PlantformType).Wordpress))
                    }, {
                      default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("dynamic.platform.type.wordpress")), 1)]),
                      _: 1
                    }, 8, ["type"]), createVNode(_component_el_button, {
                      type: pType.value === unref(PlantformType).Custom ? "primary" : "",
                      onClick: _cache[2] || (_cache[2] = ($event) => onPlantformTypeChange(unref(PlantformType).Custom))
                    }, {
                      default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("dynamic.platform.type.custom")), 1)]),
                      _: 1
                    }, 8, ["type"])]),
                    _: 1
                  })]),
                  _: 1
                }, 8, ["label"]), !showForm.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 0
                }, {
                  default: withCtx(() => [_hoisted_1$1]),
                  _: 1
                })) : createCommentVNode("", true), showForm.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 1,
                  label: pType.value + _ctx.$t("dynamic.platform.key"),
                  prop: "plantformKey"
                }, {
                  default: withCtx(() => [createVNode(_component_el_input, {
                    modelValue: formData.plantformKey,
                    "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => formData.plantformKey = $event),
                    placeholder: _ctx.$t("dynamic.platform.key.tip")
                  }, null, 8, ["modelValue", "placeholder"])]),
                  _: 1
                }, 8, ["label"])) : createCommentVNode("", true), showForm.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 2,
                  label: pType.value + _ctx.$t("dynamic.platform.name"),
                  prop: "plantformName"
                }, {
                  default: withCtx(() => [createVNode(_component_el_input, {
                    modelValue: formData.plantformName,
                    "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => formData.plantformName = $event),
                    placeholder: _ctx.$t("dynamic.platform.name.tip")
                  }, null, 8, ["modelValue", "placeholder"])]),
                  _: 1
                }, 8, ["label"])) : createCommentVNode("", true), showForm.value ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 3
                }, {
                  default: withCtx(() => [createVNode(_component_el_button, {
                    type: "primary",
                    onClick: _cache[5] || (_cache[5] = ($event) => submitForm(formRef.value))
                  }, {
                    default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("dynamic.platform.opt.add")), 1)]),
                    _: 1
                  })]),
                  _: 1
                })) : createCommentVNode("", true)]),
                _: 1
              }, 8, ["model", "rules"])]),
              _: 1
            }), createVNode(_component_el_main, null, {
              default: withCtx(() => [createVNode(_component_el_form_item, null, {
                default: withCtx(() => [currentRow.value ? (openBlock(), createBlock(_component_el_alert, {
                  key: 0,
                  class: "top-version-tip",
                  title: currentTip.value,
                  type: "info",
                  closable: false
                }, null, 8, ["title"])) : createCommentVNode("", true), createVNode(_component_el_button, {
                  type: "danger",
                  onClick: delRow
                }, {
                  default: withCtx(() => [createTextVNode(toDisplayString$1(_ctx.$t("dynamic.platform.opt.del.select")), 1)]),
                  _: 1
                })]),
                _: 1
              }), (openBlock(), createBlock(_component_el_table, {
                data: tableData,
                key: num.value,
                border: "",
                stripe: "",
                "highlight-current-row": "",
                onCurrentChange: handleCurrentChange
              }, {
                default: withCtx(() => [createVNode(_component_el_table_column, {
                  prop: "plantformType",
                  label: _ctx.$t("dynamic.platform.type")
                }, null, 8, ["label"]), createVNode(_component_el_table_column, {
                  prop: "plantformKey",
                  label: _ctx.$t("dynamic.platform.key")
                }, null, 8, ["label"]), createVNode(_component_el_table_column, {
                  prop: "plantformName",
                  label: _ctx.$t("dynamic.platform.name")
                }, null, 8, ["label"])]),
                _: 1
              }))]),
              _: 1
            })]),
            _: 1
          });
        };
      }
    });
    const __default__$2 = {
      name: "PublishService",
      components: {
        PlantformSetting: _sfc_main$g,
        ServiceSwitch: _sfc_main$2H,
        ChangeLocale: _sfc_main$2I,
        PostBind: _sfc_main$f,
        PlantformMain: _sfc_main$4,
        DynamicPlantform: _sfc_main$3
      }
    };
    const _sfc_main$2 = /* @__PURE__ */ defineComponent({
      ...__default__$2,
      setup(__props) {
        let defaultTab = ref("plantform-main");
        let isReloadSetting = ref(false);
        let isReloadMain = ref(false);
        let isReloadPostBind = ref(false);
        const serviceTabChange = (name) => {
          logUtil.logInfo("serviceTabChange=>", name);
          if ("plantform-setting" == name) {
            isReloadSetting.value = !isReloadSetting.value;
            logUtil.logInfo("plantform-setting change=>");
          } else if ("plantform-main" == name) {
            isReloadMain.value = !isReloadMain.value;
            logUtil.logInfo("plantform-main change=>");
          } else if ("post-bind" == name) {
            isReloadPostBind.value = !isReloadPostBind.value;
            logUtil.logInfo("post-bind change=>");
          }
        };
        onMounted(() => {
          defaultTab.value = getQueryString("tab") || defaultTab.value;
        });
        return (_ctx, _cache) => {
          const _component_el_tab_pane = resolveComponent("el-tab-pane");
          const _component_el_tabs = resolveComponent("el-tabs");
          return openBlock(), createBlock(_component_el_tabs, {
            "model-value": unref(defaultTab),
            "tab-position": "left",
            onTabChange: serviceTabChange
          }, {
            default: withCtx(() => [createVNode(_component_el_tab_pane, {
              name: "plantform-main",
              label: _ctx.$t("service.tab.publish.service")
            }, {
              default: withCtx(() => [createVNode(_sfc_main$4, {
                "is-reload": unref(isReloadMain)
              }, null, 8, ["is-reload"])]),
              _: 1
            }, 8, ["label"]), createVNode(_component_el_tab_pane, {
              name: "plantform-setting",
              label: _ctx.$t("service.tab.publish.setting")
            }, {
              default: withCtx(() => [createVNode(_sfc_main$g, {
                "is-reload": unref(isReloadSetting)
              }, null, 8, ["is-reload"])]),
              _: 1
            }, 8, ["label"]), createVNode(_component_el_tab_pane, {
              name: "post-bind",
              label: _ctx.$t("service.tab.post.bind")
            }, {
              default: withCtx(() => [createVNode(_sfc_main$f, {
                "is-reload": unref(isReloadPostBind)
              }, null, 8, ["is-reload"])]),
              _: 1
            }, 8, ["label"]), createVNode(_component_el_tab_pane, {
              name: "service-switch",
              label: _ctx.$t("service.tab.service.switch")
            }, {
              default: withCtx(() => [createVNode(_sfc_main$2H)]),
              _: 1
            }, 8, ["label"]), createVNode(_component_el_tab_pane, {
              name: "dynamicp-platform",
              label: _ctx.$t("dynamic.platform.new")
            }, {
              default: withCtx(() => [createVNode(_sfc_main$3)]),
              _: 1
            }, 8, ["label"]), createVNode(_component_el_tab_pane, {
              name: "change-local",
              label: _ctx.$t("service.tab.change.local")
            }, {
              default: withCtx(() => [createVNode(_sfc_main$2I)]),
              _: 1
            }, 8, ["label"])]),
            _: 1
          }, 8, ["model-value"]);
        };
      }
    });
    const _hoisted_1 = /* @__PURE__ */ createBaseVNode("h1", null, "\u5BF9\u4E0D\u8D77\uFF0C\u60A8\u6CA1\u6709\u8BE5\u64CD\u4F5C\u7684\u6743\u9650", -1);
    const _hoisted_2 = /* @__PURE__ */ createTextVNode("\u786E\u8BA4");
    const __default__$1 = {
      name: "NoAuth"
    };
    const _sfc_main$1 = /* @__PURE__ */ defineComponent({
      ...__default__$1,
      setup(__props) {
        const pwd = ref("");
        const conformPwd = () => {
          if (inBrowser()) {
            const newUrl = "/?pwd=" + pwd.value;
            window.location.href = newUrl;
          }
        };
        return (_ctx, _cache) => {
          const _component_el_input = resolveComponent("el-input");
          const _component_el_form_item = resolveComponent("el-form-item");
          const _component_el_button = resolveComponent("el-button");
          const _component_el_form = resolveComponent("el-form");
          return openBlock(), createElementBlock("div", null, [_hoisted_1, createVNode(_component_el_form, null, {
            default: withCtx(() => [createVNode(_component_el_form_item, null, {
              default: withCtx(() => [createVNode(_component_el_input, {
                modelValue: pwd.value,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => pwd.value = $event)
              }, null, 8, ["modelValue"])]),
              _: 1
            }), createVNode(_component_el_form_item, null, {
              default: withCtx(() => [createVNode(_component_el_button, {
                onClick: conformPwd
              }, {
                default: withCtx(() => [_hoisted_2]),
                _: 1
              })]),
              _: 1
            })]),
            _: 1
          })]);
        };
      }
    });
    const __default__ = {
      name: "App",
      components: {
        PublishService: _sfc_main$2,
        NoAuth: _sfc_main$1
      }
    };
    const _sfc_main = /* @__PURE__ */ defineComponent({
      ...__default__,
      setup(__props) {
        const isAuth = ref(false);
        onMounted(async () => {
          logUtil.logWarn("MODE=>", "production");
          const widgetResult = await getWidgetId();
          if (widgetResult.isInSiyuan) {
            isAuth.value = true;
            return;
          }
          const optPwd = getEnv("VITE_OPT_PWD") || "";
          const pwd = getQueryString("pwd") || "";
          if (pwd != "" && pwd == optPwd) {
            isAuth.value = true;
          }
        });
        return (_ctx, _cache) => {
          return isAuth.value ? (openBlock(), createBlock(_sfc_main$2, {
            key: 0
          })) : (openBlock(), createBlock(_sfc_main$1, {
            key: 1
          }));
        };
      }
    });
    const style = "";
    const zh_CN = {
      "lang.choose": "\u8BED\u8A00\u9009\u62E9",
      "lang.choose.placeholder": "\u8BF7\u9009\u62E9\u8BED\u8A00",
      "service.tab.publish.service": "\u53D1\u5E03\u670D\u52A1",
      "service.tab.publish.setting": "\u53D1\u5E03\u914D\u7F6E",
      "service.tab.post.bind": "\u6587\u7AE0\u7ED1\u5B9A",
      "service.tab.service.switch": "\u670D\u52A1\u5F00\u5173",
      "service.tab.change.local": "\u8BED\u8A00\u8BBE\u7F6E",
      "main.publish.to.vuepress": "\u53D1\u5E03\u5230Vuepress",
      "main.publish.vuepress.tip": "\u63A8\u8350Vuepress\u7684V1\u7248\u672C\uFF0C\u914D\u5408 vuepress-theme-vdoing \u4F7F\u7528\uFF0C\u540E\u7EEDbug\u4E5F\u53EA\u4F1A\u5BF9V1\u548C\u6B64\u4E3B\u9898\u8FDB\u884C\u66F4\u65B0",
      "main.publish.vuepress.error.tip": "\u7531\u4E8EGithub\u7684rest\u7684API\u95EE\u9898\uFF0C\u5BFC\u81F4\u66F4\u65B0\u6682\u65F6\u65E0\u6CD5\u5904\u7406\uFF0C\u5982\u9700\u66F4\u65B0\u8BF7\u5148\u70B9\u53D6\u6D88\u5220\u9664\u518D\u65B0\u589E\u5373\u53EF\uFF0C\u53EF\u4EE5\u67E5\u770B\u8FD9\u91CC\u7B49\u5F85\u4FEE\u590D\u8FDB\u5EA6\uFF1Ahttps://github.com/terwer/src-sy-post-publisher/issues/21\u3002",
      "main.publish.vuepress.editmode": "\u7F16\u8F91\u6A21\u5F0F",
      "main.publish.vuepress.editmode.simple": "\u7B80\u6D01\u6A21\u5F0F",
      "main.publish.vuepress.editmode.complex": "\u8BE6\u7EC6\u6A21\u5F0F",
      "main.publish.vuepress.github": "\u53D1\u5E03Github",
      "main.publish.vuepress.github.tip": "\u81EA\u52A8\u5C06\u6587\u7AE0\u7684markdown\u6587\u672C\u53D1\u5E03\u5230Vuepress\u5BF9\u5E94\u7684Github\u4ED3\u5E93\uFF08\u9700\u8981\u5148\u8FDB\u884C\u76F8\u5173\u914D\u7F6E\uFF09",
      "main.publish.vuepress.github.no.tip": "\u60A8\u672A\u5F00\u542FGithub\u53D1\u5E03\uFF0C\u8BF7\u5728\u70B9\u51FB\u53D1\u5E03\u4E4B\u540E\u81EA\u884C\u590D\u5236\u53F3\u4FA7\u6587\u672C",
      "main.publish.vuepress.choose.path": "\u8BF7\u9009\u62E9\u76EE\u5F55",
      "main.publish.vuepress.choose.path.use.default": "\u9ED8\u8BA4\u76EE\u5F55",
      "main.publish.vuepress.choose.path.use.default.tip": "\u4F7F\u7528\u9ED8\u8BA4\u76EE\u5F55\uFF0C\u5219\u9ED8\u8BA4\u6240\u6709\u6587\u7AE0\u90FD\u53D1\u5E03\u5728\u914D\u7F6E\u597D\u7684\u9ED8\u8BA4\u76EE\u5F55\u4E0B\uFF0C\u65E0\u9700\u6BCF\u6B21\u53D1\u5E03\u7684\u65F6\u5019\u6765\u9009\u62E9\u76EE\u5F55",
      "main.publish.vuepress.choose.title": "\u6587\u4EF6\u540D",
      "main.publish.vuepress.choose.title.tip": "Vuepress-theme-vdoing\u652F\u6301\u6587\u4EF6\u540D\u52A0\u4E0A\u5E8F\u53F7\u6765\u6807\u8BC6\uFF0C\u5982\u679C\u4F60\u4E0D\u6E05\u695A\u6B64\u7528\u6CD5\uFF0C\u8BF7\u4E0D\u8981\u4FEE\u6539\u6587\u4EF6\u540D",
      "main.publish.vuepress.failure": "\u53D1\u5E03\u5931\u8D25\uFF0C\u8BF7\u81EA\u884C\u590D\u5236\u53F3\u4FA7\u6587\u672C",
      "main.publish.vuepress.see.preview": "\u70B9\u51FB\u8FD9\u91CC\u67E5\u770B\u6700\u65B0\u6587\u7AE0",
      "main.publish.to.wordpress": "\u53D1\u5E03\u5230Wordpress",
      "main.slug": "\u6587\u7AE0\u522B\u540D",
      "main.auto.fetch.slug": "\u81EA\u52A8\u751F\u6210\u522B\u540D",
      "main.use.google.translate": "\u4F7F\u7528Google\u7FFB\u8BD1API",
      "main.use.hash": "\u4F7F\u7528hash",
      "main.use.hash.tip": "\u4E0D\u4F7F\u7528hash\u4F1A\u5C55\u793A\u66F4\u6709\u610F\u4E49\u7684url\uFF0C\u4F46\u662F\u53EF\u80FD\u5BFC\u81F4\u6587\u7AE0\u522B\u540D\u91CD\u590D\uFF08\u540E\u679C\u662FVuepress\u4F1ABuild\u5931\u8D25\u9664\u975E\u624B\u52A8\u89E3\u51B3\u522B\u540D\u552F\u4E00\u95EE\u9898\uFF09\uFF0C\u8BF7\u77E5\u6089\u3002",
      "main.force.refresh": "\u5F3A\u5236\u5237\u65B0",
      "main.force.refresh.tip": "\u4E3A\u4E86\u9632\u6B62\u8BEF\u64CD\u4F5C\u66F4\u65B0\u522B\u540D\uFF0C\u522B\u540D\u4E0D\u4E3A\u7A7A\u7684\u65F6\u5019\u9ED8\u8BA4\u4E0D\u4F1A\u66F4\u65B0\u5C5E\u6027\uFF0C\u5982\u9700\u66F4\u65B0\uFF0C\u8BF7\u52FE\u9009\u5F3A\u5236\u5237\u65B0\u6216\u8005\u6E05\u7A7A\u5BF9\u5E94\u5B57\u6BB5\u3002",
      "main.desc": "\u6587\u7AE0\u6458\u8981",
      "main.auto.fetch.desc": "\u81EA\u52A8\u63D0\u53D6\u6458\u8981",
      "main.create.time": "\u53D1\u5E03\u65F6\u95F4",
      "main.create.time.placeholder": "\u8BF7\u9009\u62E9\u53D1\u5E03\u65F6\u95F4",
      "main.tag": "\u6587\u7AE0\u6807\u7B7E",
      "main.tag.new": "\u65B0\u6807\u7B7E",
      "main.auto.fetch.tag": "\u81EA\u52A8\u63D0\u53D6\u6807\u7B7E",
      "main.yaml.formatter": "YAML Formatter",
      "main.siyuan.to.yaml": "\u601D\u6E90\u5C5E\u6027\u8F6CYAML",
      "main.yaml.to.siyuan": "YAML\u8F6C\u601D\u6E90\u5C5E\u6027",
      "main.save.attr.to.siyuan": "\u4FDD\u5B58\u5C5E\u6027\u5230\u601D\u6E90",
      "main.copy": "\u590D\u5236",
      "main.publish": "\u53D1\u5E03",
      "main.publish.loading": "\u53D1\u5E03\u4E2D...",
      "main.loading": "\u52A0\u8F7D\u4E2D...",
      "main.update": "\u66F4\u65B0",
      "main.cancel": "\u53D6\u6D88",
      "main.publish.oneclick.attr": "\u4E00\u952E\u751F\u6210\u5C5E\u6027",
      "main.publish.oneclick.attr.finish": "\u5C5E\u6027\u5DF2\u751F\u6210",
      "main.publish.status.unpublish": "\u672A\u53D1\u5E03",
      "main.publish.status.published": "\u5DF2\u53D1\u5E03",
      "main.publish.to.jvue": "\u53D1\u5E03\u5230JVue",
      "main.publish.to.conf": "\u53D1\u5E03\u5230Confluence",
      "main.publish.to.cnblogs": "\u53D1\u5E03\u5230\u535A\u5BA2\u56ED",
      "main.publish.to.liandi": "\u53D1\u5E03\u5230\u94FE\u6EF4",
      "main.publish.to.yuque": "\u53D1\u5E03\u5230\u8BED\u96C0",
      "main.publish.to.kms": "\u53D1\u5E03\u5230KMS",
      "main.opt.success": "\u64CD\u4F5C\u6210\u529F",
      "main.opt.failure": "\u64CD\u4F5C\u5931\u8D25",
      "main.opt.quick": "\u5FEB\u6377\u64CD\u4F5C",
      "main.opt.status.publish": "\u6587\u7AE0\u5DF2\u53D1\u5E03",
      "main.opt.status.cancel": "\u6587\u7AE0\u53D1\u5E03\u5DF2\u53D6\u6D88",
      "main.opt.loading": "\u64CD\u4F5C\u4E2D...",
      "main.opt.warning": "\u8B66\u544A\u4FE1\u606F",
      "main.opt.ok": "\u786E\u8BA4",
      "main.opt.cancel": "\u53D6\u6D88",
      "main.opt.warning.tip": "\u64CD\u4F5C\u5C06\u5220\u9664\u6570\u636E\uFF0C\u662F\u5426\u7EE7\u7EED\uFF1F",
      "setting.noneed": "\u65E0\u9700\u914D\u7F6E",
      "setting.vuepress": "Vuepress",
      "setting.blog.type": "\u535A\u5BA2\u7C7B\u578B",
      "setting.blog.type.placeholder": "\u8BF7\u9009\u62E9\u535A\u5BA2\u7C7B\u578B",
      "setting.blog.type.wordpress.value": "Wordpress",
      "setting.blog.type.wordpress.label": "Wordpress",
      "setting.blog.type.metaweblog.value": "MetaweblogApi",
      "setting.blog.type.metaweblog.label": "Metaweblog API",
      "setting.blog.type.vuepress.value": "Vuepress",
      "setting.blog.type.vuepress.label": "Vuepress",
      "setting.blog.type.vuepress.github.user": "Github\u7528\u6237\u540D",
      "setting.blog.type.vuepress.github.user.tip": "Github\u7528\u6237\u540D\uFF0C\u4F8B\u5982\uFF1Aterwer",
      "setting.blog.type.vuepress.github.repo": "Github\u4ED3\u5E93\u540D",
      "setting.blog.type.vuepress.github.repo.tip": "Github\u4ED3\u5E93\u540D\uFF0C\u4F8B\u5982\uFF1Asrc.terwer.github.io",
      "setting.blog.type.vuepress.github.token": "Github\u4EE4\u724C",
      "setting.blog.type.vuepress.github.token.tip": "Github\u4EE4\u724C\uFF0C\u4F8B\u5982\uFF1Aghp_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
      "setting.blog.type.vuepress.github.token.gen": "Github \u4E2A\u4EBA\u4EE4\u724C\u751F\u6210\u5730\u5740",
      "setting.blog.type.vuepress.github.default.branch": "\u9ED8\u8BA4\u5206\u652F",
      "setting.blog.type.vuepress.github.default.branch.tip": "\u9ED8\u8BA4\u5206\u652F\uFF08\u65E7\u7248\u4ED3\u5E93\u4E3Amaster\uFF0C\u65B0\u7248\u4ED3\u5E93\u9ED8\u8BA4\u4E3Amain\uFF09\uFF0C\u4F8B\u5982\uFF1Amain",
      "setting.blog.type.vuepress.github.default.path": "\u5B58\u50A8\u76EE\u5F55",
      "setting.blog.type.vuepress.github.default.path.tip": "\u5B58\u50A8\u76EE\u5F55\uFF08\u76F8\u5BF9\u4E8E\u4ED3\u5E93\u6839\u76EE\u5F55\u7684\u76F8\u5BF9\u8DEF\u5F84\uFF0C\u9ED8\u8BA4\u6240\u6709\u6587\u7AE0\u90FD\u53D1\u5E03\u5728\u8FD9\u91CC\uFF09\uFF0C\u4F8B\u5982\uFF1Adocs/_posts/",
      "setting.blog.type.vuepress.github.msg": "\u63D0\u4EA4\u4FE1\u606F",
      "setting.blog.type.vuepress.github.msg.tip": "\u63D0\u4EA4\u4FE1\u606F\uFF0C\u4F8B\u5982\uFF1Aauto published by sy-post-publisher",
      "setting.blog.type.vuepress.github.author": "\u4F5C\u8005",
      "setting.blog.type.vuepress.github.author.tip": "\u4F5C\u8005\uFF0C\u4F8B\u5982\uFF1Aterwer",
      "setting.blog.type.vuepress.github.email": "\u90AE\u7BB1",
      "setting.blog.type.vuepress.github.email.tip": "\u90AE\u7BB1",
      "setting.blog.url": "\u535A\u5BA2\u7F51\u5740",
      "setting.blog.username": "\u8D26\u53F7",
      "setting.blog.password": "\u5BC6\u7801",
      "setting.blog.apiurl": "API\u5730\u5740",
      "setting.blog.validate": "\u9A8C\u8BC1",
      "setting.blog.save": "\u4FDD\u5B58",
      "setting.blog.vali": "\u9A8C\u8BC1",
      "setting.blog.vali.tip": "\u5F3A\u70C8\u5EFA\u8BAE\u4FDD\u5B58\u4E4B\u524D\u5148\u9A8C\u8BC1\u914D\u7F6E\u4EE5\u4FDD\u8BC1api\u7684\u53EF\u7528\u6027\uFF0C\u9A8C\u8BC1\u8FC7\u7A0B\u4E2D\u5C06\u53D1\u9001\u4E00\u7BC7\u6D4B\u8BD5\u6587\u7AE0\uFF0C\u60A8\u53EF\u4EE5\u7A0D\u540E\u5728\u5E73\u53F0\u624B\u52A8\u5220\u9664\u5B83\u3002\u60A8\u4E5F\u53EF\u4EE5\u5148\u4FDD\u5B58\uFF0C\u7A0D\u540E\u4FEE\u6539\uFF0C\u4F46\u662F\u5728\u9A8C\u8BC1\u901A\u8FC7\u4E4B\u524D\u8BE5api\u5C06\u4E0D\u53EF\u4F7F\u7528\u3002",
      "setting.blog.vali.tip.metaweblog": "\u914D\u7F6E\u9519\u8BEF\u6216\u8005api\u4E0D\u53EF\u7528\uFF0C\u8BF7\u68C0\u67E5\u3002\u82E5\u4FEE\u6539\u8FC7\u914D\u7F6E\uFF0C\u8BF7\u5237\u65B0\u9875\u9762",
      "setting.blog.vali.ing": "\u9A8C\u8BC1\u4E2D...",
      "setting.blog.vali.ok": "\u9A8C\u8BC1\u901A\u8FC7\uFF0C\u4E0D\u8981\u5FD8\u4E86\u70B9\u51FB\u4E0B\u65B9\u4FDD\u5B58\u54DF(*^\u25BD^*)",
      "setting.blog.vali.ok.metaweblog": "\u914D\u7F6E\u5DF2\u4FDD\u5B58\u5E76\u9A8C\u8BC1\u901A\u8FC7",
      "setting.blog.vali.error": "API\u9A8C\u8BC1\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u914D\u7F6E",
      "setting.blog.platform.support.metaweblog": "\u60A8\u5F53\u524D\u64CD\u4F5C\u7684\u662F\u652F\u6301metaweblog\u7684\u5E73\u53F0\uFF1A",
      "setting.blog.cancel": "\u53D6\u6D88",
      "setting.jvue": "JVue",
      "setting.conf": "Confluence",
      "setting.conf.tip": "\u53D1\u5E03\u5230Confluence\u9700\u8981\u914D\u5408\u6211\u7684\u53E6\u4E00\u4E2A\u9002\u914D\u5668\u9879\u76EE\u4F7F\u7528\uFF08\u5F3A\u70C8\u63A8\u8350\uFF09\uFF0C\u8BF7\u53C2\u8003\uFF1Ahttps://github.com/terwer/node-metaweblog-api-adaptor",
      "setting.cnblogs": "\u535A\u5BA2\u56ED",
      "setting.wordpress": "Wordpress",
      "setting.liandi": "\u94FE\u6EF4",
      "setting.yuque": "\u8BED\u96C0",
      "setting.kms": "KMS",
      "setting.other1": "\u5176\u4ED61",
      "service.switch.vuepress": "Vuepress",
      "service.switch.jvue": "JVue",
      "service.switch.conf": "Confluence",
      "service.switch.cnblogs": "\u535A\u5BA2\u56ED",
      "service.switch.wordpress": "Wordpress",
      "service.switch.yuque": "\u8BED\u96C0",
      "service.switch.liandi": "\u94FE\u6EF4",
      "service.switch.wechat": "\u5FAE\u4FE1\u804A\u5929",
      "service.switch.wemp": "\u5FAE\u4FE1\u516C\u4F17\u53F7",
      "service.switch.zhihu": "\u77E5\u4E4E",
      "service.switch.kms": "\u77E5\u8BC6\u4ED3\u5E93",
      "service.switch.must.select.one": "\u60A8\u5FC5\u987B\u9009\u62E9\u4E00\u4E2A\u81F3\u5C11\u5E73\u53F0",
      "post.bind.vuepress.slug": "Vuepress\u522B\u540D",
      "post.bind.cnblogs.postid": "\u535A\u5BA2\u56ED\u522B\u540D",
      "post.bind.jvue.postid": "JVue\u7684ID",
      "post.bind.conf.postid": "Conf\u7684ID",
      "post.bind.wordpress.postid": "WP\u7684ID",
      "post.bind.liandi.postid": "\u94FE\u6EF4\u7684ID",
      "post.bind.yuque.postid": "\u8BED\u96C0\u7684ID",
      "post.bind.kms.postid": "KMS\u7684ID",
      "post.bind.conf.save": "\u4FDD\u5B58",
      "post.bind.conf.cancel": "\u53D6\u6D88",
      "form.validate.name.required": "\u8BF7\u8F93\u5165\u540D\u79F0",
      "form.validate.name.length": "\u957F\u5EA6\u5FC5\u987B\u57280\u52301\u4E4B\u95F4",
      "form.validate.vuepress.auto.delete": "\u81EA\u52A8\u5220\u9664",
      "dynamic.platform.new": "\u65B0\u589E\u5E73\u53F0",
      "dynamic.platform.tip": "\u5982\u679C\u5185\u7F6E\u7684\u53D1\u5E03\u670D\u52A1\u65E0\u6CD5\u6EE1\u8DB3\u6216\u8005\u9700\u8981\u6DFB\u52A0\u591A\u4E2A\u5B9E\u4F8B\uFF0C\u60A8\u53EF\u4EE5\u5728\u8FD9\u91CC\u6DFB\u52A0\u53D7\u652F\u6301\u7684\u5E73\u53F0\uFF0C\u76EE\u524D\u652F\u6301metaweblog API\u548CWordpress API",
      "dynamic.platform.type": "\u5E73\u53F0\u7C7B\u578B[\u5FC5\u9009]",
      "dynamic.platform.type.metaweblog": "metaweblog API",
      "dynamic.platform.type.wordpress": "Wordpress",
      "dynamic.platform.type.custom": "\u81EA\u5B9A\u4E49",
      "dynamic.platform.key": "\u5E73\u53F0key",
      "dynamic.platform.key.tip": "\u5E73\u53F0\u552F\u4E00\u6807\u8BC6\uFF0C\u4E0D\u80FD\u91CD\u590D\uFF0C\u4F8B\u5982\uFF1Amyblog",
      "dynamic.platform.name": "\u5E73\u53F0\u540D\u79F0",
      "dynamic.platform.name.tip": "\u5E73\u53F0\u540D\u79F0\uFF0C\u4F8B\u5982\uFF1A\u6211\u7684\u535A\u5BA2",
      "dynamic.platform.opt.add": "\u63D0\u4EA4",
      "dynamic.platform.opt.noselect": "\u8BF7\u9009\u62E9\u5E73\u53F0\u7C7B\u578B",
      "dynamic.platform.opt.key.exist": "\u5E73\u53F0key\u5DF2\u7ECF\u5B58\u5728",
      "dynamic.platform.opt.del.select": "\u5220\u9664\u9009\u4E2D",
      "dynamic.platform.opt.item.select": "\u672A\u9009\u62E9",
      "dynamic.platform.opt.item.select.tip": "\u5F53\u524D\u9009\u62E9\u7684\u662F\uFF1A",
      "dynamic.platform.opt.item.no.select.tip": "\u8BF7\u9009\u62E9\u8981\u5220\u9664\u7684\u884C",
      "setting.common.home": "\u5E73\u53F0\u9996\u9875",
      "setting.common.apiurl": "API\u5730\u5740",
      "setting.common.token": "\u9274\u6743token",
      "setting.common.token.gen": "Token\u751F\u6210\u5730\u5740",
      "setting.common.username": "\u7528\u6237\u540D",
      "setting.common.username.gen": "\u8BBF\u95EE\u7B56\u7565\u8BBE\u7F6E",
      "setting.common.password": "\u5BC6\u7801",
      "setting.blog.platform.support.common": "\u60A8\u5F53\u524D\u64CD\u4F5C\u7684\u5E73\u53F0\u662F\uFF1A"
    };
    const en_US = {
      "lang.choose": "Choose lang",
      "lang.choose.placeholder": "Please select language",
      "service.tab.publish.service": "Publish service",
      "service.tab.publish.setting": "Publish setting",
      "service.tab.post.bind": "Post bind",
      "service.tab.service.switch": "Service switch",
      "service.tab.change.local": "Change language",
      "main.publish.to.vuepress": "Send to Vuepress",
      "main.publish.vuepress.tip": "Recommends use it with vuepress-theme-vdoing , and the subsequent bug will only update this theme",
      "main.publish.vuepress.error.tip": "Due to the API of GitHub's REST, the update cannot be treated for the time being. If you need to update, please click Delete and then add it. You can check here for the restoration progress: https: //github.com/terwer/src-sy-post -Publisher/ISSUES/21.",
      "main.publish.vuepress.editmode": "Edit mode",
      "main.publish.vuepress.editmode.simple": "Simple",
      "main.publish.vuepress.editmode.complex": "Complex",
      "main.publish.vuepress.github": "Send Github",
      "main.publish.vuepress.github.tip": "Checking the Markdown text of the article to the GitHub warehouse corresponding to Vuepress (need to perform related configuration first, unsatisfactory or configuration error will be ignored)",
      "main.publish.vuepress.choose.path": "Choose path",
      "main.publish.vuepress.choose.path.use.default": "Default path",
      "main.publish.vuepress.choose.path.use.default.tip": "Using the default directory, all articles are published in the configuration default directory, no need to select the directory every time it is published",
      "main.publish.vuepress.github.no.tip": "You have not opened github release, please copy the right text on your own",
      "main.publish.vuepress.choose.title": "File name",
      "main.publish.vuepress.choose.title.tip": "Vuepress-theme-VDoing support file name plus serial number to identify. If you don\u2019t know this usage, please do not modify the file name",
      "main.publish.vuepress.see.preview": "Click here see new post",
      "main.publish.to.wordpress": "Sendto WP",
      "main.slug": "Post slug",
      "main.auto.fetch.slug": "Auto fetch slug",
      "main.use.google.translate": "Use Google translate API",
      "main.use.hash": "Use hash",
      "main.use.hash.tip": "Do not use HASH to show more meaningful URLs, but it may cause the only path of the article to repeat (the consequence is that Vuepress will build a failure unless manual solution to the other problem), please know",
      "main.force.refresh": "Force refresh",
      "main.force.refresh.tip": "In order to prevent the wrongdoing aliases by mistake, the attribute will not be updated by default. If you need to update, please check for compulsory refresh.",
      "main.desc": "Post desc",
      "main.auto.fetch.desc": "Auto fetch desc",
      "main.create.time": "Pub time",
      "main.create.time.placeholder": "Please select time",
      "main.tag": "Post tag",
      "main.tag.new": "New tag",
      "main.auto.fetch.tag": "Auto fetch tag",
      "main.yaml.formatter": "YAML Formatter",
      "main.siyuan.to.yaml": "Siyuan attr to YAML",
      "main.yaml.to.siyuan": "YAML to Siyuan attr",
      "main.save.attr.to.siyuan": "Save attr to Siyuan",
      "main.copy": "Copy",
      "main.publish": "Publish",
      "main.publish.loading": "Publishing...",
      "main.loading": "Loading...",
      "main.update": "Update",
      "main.cancel": "Cancel",
      "main.publish.oneclick.attr": "Click to attr",
      "main.publish.oneclick.attr.finish": "Make attr finished",
      "main.publish.status.unpublish": "Unpublish",
      "main.publish.status.published": "Published",
      "main.publish.to.jvue": "Send to JVue",
      "main.publish.to.conf": "Send to Confluence",
      "main.publish.to.cnblogs": "Send to Cnblogs",
      "main.publish.to.liandi": "Send to Liandi",
      "main.publish.to.yuque": "Send to Yuque",
      "main.publish.to.kms": "Send to KMS",
      "main.opt.success": "Success",
      "main.opt.failure": "Error",
      "main.opt.quick": "Quick",
      "main.opt.status.publish": "Post published success",
      "main.opt.status.cancel": "Post publishing has been canceled",
      "main.opt.loading": "Doding...",
      "main.opt.warning": "Warning",
      "main.opt.ok": "Confirm",
      "main.opt.cancel": "Cancel",
      "main.opt.warning.tip": "The operation will delete the data, whether to continue?",
      "setting.noneed": "No need setting",
      "setting.vuepress": "Vuepress",
      "setting.blog.type": "Blog type",
      "setting.blog.type.placeholder": "Please select type",
      "setting.blog.type.wordpress.value": "Wordpress",
      "setting.blog.type.wordpress.label": "Wordpress",
      "setting.blog.type.metaweblog.value": "MetaweblogApi",
      "setting.blog.type.metaweblog.label": "Metaweblog API",
      "setting.blog.type.vuepress.value": "Vuepress",
      "setting.blog.type.vuepress.label": "Vuepress",
      "setting.blog.type.vuepress.github.user": "Github user",
      "setting.blog.type.vuepress.github.user.tip": "Github user, eg:terwer",
      "setting.blog.type.vuepress.github.repo": "Github repo",
      "setting.blog.type.vuepress.github.repo.tip": "Github repo, eg:src.terwer.github.io",
      "setting.blog.type.vuepress.github.token": "Github token",
      "setting.blog.type.vuepress.github.token.tip": "Github token, eg:ghp_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
      "setting.blog.type.vuepress.github.token.gen": "Generate Github Personal Token",
      "setting.blog.type.vuepress.github.default.path": "Doc path",
      "setting.blog.type.vuepress.github.default.path.tip": "Doc path, eg:docs/_posts/",
      "setting.blog.type.vuepress.github.msg": "Commit msg",
      "setting.blog.type.vuepress.github.msg.tip": "Commit msg, eg:auto published by sy-post-publisher",
      "setting.blog.type.vuepress.github.author": "Author",
      "setting.blog.type.vuepress.github.author.tip": "Author, eg:terwer",
      "setting.blog.type.vuepress.github.email": "Email",
      "setting.blog.type.vuepress.github.email.tip": "Email",
      "setting.blog.url": "Blog addr",
      "setting.blog.username": "Username",
      "setting.blog.password": "Password",
      "setting.blog.apiurl": "API Url",
      "setting.blog.validate": "Validate",
      "setting.blog.save": "Save",
      "setting.blog.vali": "Validate",
      "setting.blog.vali.tip": "Please verify the configuration to ensure the availability of the API, and it will not be used without verification.",
      "setting.blog.vali.tip.metaweblog": "Please verify the configuration to ensure the availability of the API, and it will not be used without verification.",
      "setting.blog.vali.ing": "Validating...",
      "setting.blog.vali.ok": "Available",
      "setting.blog.vali.ok.metaweblog": "The configuration has been saved and verified",
      "setting.blog.vali.error": "Validate error",
      "setting.blog.platform.support.metaweblog": "Current metaweblog supported platform:",
      "setting.blog.cancel": "Cancel",
      "setting.jvue": "JVue",
      "setting.conf": "Confluence",
      "setting.conf.tip": "Published to Confluice needs to cooperate with my other adapter project (strong recommendation), please refer to:https://github.com/terwer/node-metaweblog-api-adaptor",
      "setting.cnblogs": "Cnblogs",
      "setting.wordpress": "Wordpress",
      "setting.liandi": "Liandi",
      "setting.yuque": "Yuque",
      "setting.kms": "KMS",
      "setting.other1": "Other1",
      "service.switch.vuepress": "Vuepress",
      "service.switch.jvue": "JVue",
      "service.switch.conf": "Confluence",
      "service.switch.cnblogs": "Cnblogs",
      "service.switch.wordpress": "Wordpress",
      "service.switch.yuque": "Yuque",
      "service.switch.liandi": "Liandi",
      "service.switch.wechat": "WeChat",
      "service.switch.wemp": "WeMedia",
      "service.switch.zhihu": "Zhihu",
      "service.switch.kms": "LandrayKms",
      "service.switch.must.select.one": "You must add at least one plantform",
      "post.bind.vuepress.slug": "Vuepress slug",
      "post.bind.cnblogs.postid": "Cnblogs ID",
      "post.bind.jvue.postid": "JVue ID",
      "post.bind.conf.postid": "Conf ID",
      "post.bind.wordpress.postid": "WP ID",
      "post.bind.liandi.postid": "Liandi ID",
      "post.bind.yuque.postid": "Yuque ID",
      "post.bind.kms.postid": "KMS ID",
      "post.bind.conf.save": "Save",
      "post.bind.conf.cancel": "Cancel",
      "form.validate.name.required": "Please input name",
      "form.validate.name.length": "Length should be 0 to 1",
      "form.validate.vuepress.auto.delete": "Auto delete",
      "dynamic.platform.new": "New plantform",
      "dynamic.platform.tip": "If the built -in release service cannot be satisfied or multiple instances need to be added, you can add supporting platforms here. Currently supporting Metaweblog API and WordPress API",
      "dynamic.platform.type": "Plantform type",
      "dynamic.platform.type.metaweblog": "metaweblog API",
      "dynamic.platform.type.wordpress": "Wordpress",
      "dynamic.platform.type.custom": "Custom",
      "dynamic.platform.key": "Plantform key",
      "dynamic.platform.key.tip": "The unique logo of the platform, cannot be repeated, for example: myblog",
      "dynamic.platform.name": "Plantform name",
      "dynamic.platform.name.tip": "Platform name, for example: my blog",
      "dynamic.platform.opt.add": "Submit",
      "dynamic.platform.opt.noselect": "Please select plantform type",
      "dynamic.platform.opt.key.exist": "Plantform key exists",
      "dynamic.platform.opt.del.select": "Delete selected",
      "dynamic.platform.opt.item.select": "Item no select",
      "dynamic.platform.opt.item.select.tip": "The current selection is:",
      "dynamic.platform.opt.item.no.select.tip": "Please select the line to be deleted",
      "setting.common.home": "Home",
      "setting.common.apiurl": "API",
      "setting.common.token": "Token",
      "setting.common.token.gen": "Token addr",
      "setting.common.username": "Username",
      "setting.common.username.gen": "Username setting",
      "setting.common.password": "Password",
      "setting.blog.platform.support.common": "Current platform\uFF1A"
    };
    const i18n = createI18n_1({
      locale: "zh_CN",
      fallbackLocale: "en_US",
      messages: {
        zh_CN,
        en_US
      }
    });
    const index = "";
    const app = createApp(_sfc_main);
    app.use(i18n);
    app.use(installer);
    app.directive("focus", {
      mounted(el) {
        el.focus();
      }
    });
    app.mount("#app");
  }
});
export default require_index_18e50d07();
